1
00:09:48,040 --> 00:09:53,690
hello hello hello everybody let's check

2
00:09:53,690 --> 00:10:01,463
if our zoom colleagues are able

3
00:10:01,463 --> 00:10:06,251
to hear us because you know

4
00:10:06,251 --> 00:10:08,115
behind the scenes we have a

5
00:10:08,115 --> 00:10:10,298
zoom channel that actually everyone

6
00:10:10,298 --> 00:10:11,280
is welcome to join

7
00:10:12,610 --> 00:10:15,135
right so the stream should be live

8
00:10:15,135 --> 00:10:17,640
and here we are for day

9
00:10:17,640 --> 00:10:19,564
four code refinery in this first

10
00:10:19,564 --> 00:10:21,247
10 minutes we just chit chat

11
00:10:22,269 --> 00:10:25,655
that's [name] hello [name] hey

12
00:10:25,655 --> 00:10:30,585
that's [name] hello [name] hello and [name] hey

13
00:10:31,882 --> 00:10:33,606
So I still don't see any

14
00:10:34,408 --> 00:10:37,054
feedback from our Zoom chat.

15
00:10:38,458 --> 00:10:40,062
If you hear us, if you

16
00:10:40,062 --> 00:10:42,668
see us, please make some noise.

17
00:10:44,285 --> 00:10:46,508
But anyway, so today it's

18
00:10:46,508 --> 00:10:47,269
an interesting day.

19
00:10:47,269 --> 00:10:50,674
It's maybe, I mean, it sounds, of course,

20
00:10:50,674 --> 00:10:51,856
if every time I say this

21
00:10:51,856 --> 00:10:53,298
is the most important day of

22
00:10:53,298 --> 00:10:54,520
Code Refinery, it feels a

23
00:10:54,520 --> 00:10:56,683
bit, you know, hyperbolic.

24
00:10:56,683 --> 00:10:57,885
But maybe this is the most

25
00:10:57,885 --> 00:10:59,247
important day of Code Refinery

26
00:10:59,247 --> 00:11:00,629
because it's really the day where

27
00:11:00,629 --> 00:11:03,313
we link all together the why

28
00:11:03,313 --> 00:11:05,716
are we here and what's the final goal.

29
00:11:05,716 --> 00:11:11,164
In this notes document that

30
00:11:11,164 --> 00:11:12,146
I just shared with you

31
00:11:12,146 --> 00:11:16,312
via email, there's already some icebreakers.

32
00:11:16,312 --> 00:11:17,674
So if you were with us

33
00:11:17,674 --> 00:11:19,757
last week, you should be

34
00:11:19,757 --> 00:11:21,380
already familiar with this.

35
00:11:21,380 --> 00:11:24,745
But if you are just joining for this day,

36
00:11:25,666 --> 00:11:27,729
basically you can scroll at the

37
00:11:27,729 --> 00:11:29,752
top of the document, of

38
00:11:29,752 --> 00:11:31,535
this notes document that I'm sharing.

39
00:11:31,535 --> 00:11:35,000
and at the top there's a pencil

40
00:11:35,000 --> 00:11:35,942
so if you click on the

41
00:11:35,942 --> 00:11:38,966
pencil you can answer these icebreakers

42
00:11:39,868 --> 00:11:41,210
and the first one is interesting

43
00:11:41,210 --> 00:11:42,031
and of course i'm going

44
00:11:42,031 --> 00:11:44,074
to ask our instructors of the day

45
00:11:44,074 --> 00:11:46,658
what do they think of have

46
00:11:46,658 --> 00:11:47,759
you ever heard the sentence

47
00:11:48,781 --> 00:11:50,483
works on my computer what does

48
00:11:50,483 --> 00:11:52,406
this mean in practice how do

49
00:11:52,406 --> 00:11:54,490
you solve this problem what about

50
00:11:54,490 --> 00:11:57,370
[name] have you ever heard it

51
00:11:57,370 --> 00:12:00,658
Yeah, well, I guess I've heard it,

52
00:12:00,658 --> 00:12:03,424
and it was usually just very simple stuff,

53
00:12:03,424 --> 00:12:06,051
some missing packages, dependencies,

54
00:12:06,051 --> 00:12:08,376
so generally...

55
00:12:09,520 --> 00:12:12,604
looking at error messages or

56
00:12:12,604 --> 00:12:14,767
how the problem presents itself

57
00:12:14,767 --> 00:12:17,510
has been easy to solve in my hands.

58
00:12:17,510 --> 00:12:19,172
But I think maybe [name]

59
00:12:19,172 --> 00:12:22,517
has some more stories to share.

60
00:12:22,517 --> 00:12:24,019
I just wrote one down.

61
00:12:24,019 --> 00:12:25,621
We just yesterday had a user

62
00:12:25,621 --> 00:12:30,106
where they had a program, a Python program

63
00:12:30,106 --> 00:12:32,249
that is running on several

64
00:12:32,249 --> 00:12:33,591
of the machines in the lab,

65
00:12:33,591 --> 00:12:37,516
but for some reason doesn't run on his machine.

66
00:12:37,516 --> 00:12:39,558
Admittedly, we tried to figure out,

67
00:12:39,558 --> 00:12:42,101
we didn't find the final reason,

68
00:12:42,101 --> 00:12:44,324
but the assumption that

69
00:12:44,324 --> 00:12:45,745
I'm currently working on is,

70
00:12:45,745 --> 00:12:47,588
yeah, different environments.

71
00:12:47,588 --> 00:12:49,089
So we do know that

72
00:12:49,089 --> 00:12:50,451
there are version differences

73
00:12:50,451 --> 00:12:53,534
between his machine and another one.

74
00:12:53,534 --> 00:12:56,237
And in the end, we told him that, yeah,

75
00:12:56,237 --> 00:12:58,560
maybe get the environment that's

76
00:12:58,560 --> 00:13:01,744
working on the other machine and

77
00:13:03,546 --> 00:13:04,587
use it on your machine.

78
00:13:05,579 --> 00:13:06,622
Where you're using Conda.

79
00:13:08,086 --> 00:13:09,851
They had an environment.

80
00:13:09,851 --> 00:13:10,593
So the installation

81
00:13:10,593 --> 00:13:12,218
instructions essentially had an

82
00:13:12,218 --> 00:13:14,063
environment, but in that case,

83
00:13:14,063 --> 00:13:16,791
it was installed PyTorch.

84
00:13:19,078 --> 00:13:21,023
And the program is from 2023.

85
00:13:23,939 --> 00:13:28,124
So, well, the PyTorch version

86
00:13:28,124 --> 00:13:29,726
that it depends on in

87
00:13:29,726 --> 00:13:32,489
the setup is something like 1.10

88
00:13:32,489 --> 00:13:35,553
and we are now at 2.8 and

89
00:13:35,553 --> 00:13:36,714
there are quite a bit of

90
00:13:36,714 --> 00:13:39,618
changes and not only there, but

91
00:13:39,618 --> 00:13:42,621
yeah, that's a relatively

92
00:13:42,621 --> 00:13:45,204
typical situation where it works

93
00:13:45,204 --> 00:13:46,486
here, it works on different

94
00:13:46,486 --> 00:13:47,787
machines, but it doesn't work on mine.

95
00:13:47,787 --> 00:13:48,168
Why?

96
00:13:48,168 --> 00:13:49,049
Yeah.

97
00:13:49,049 --> 00:13:52,376
We have this internal joke with our team.

98
00:13:52,376 --> 00:13:54,740
[name], by the way, is part of our team.

99
00:13:54,740 --> 00:13:58,107
We have a daily support Zoom session

100
00:13:58,107 --> 00:14:00,351
and we usually have, you

101
00:14:00,351 --> 00:14:03,437
know, that Conda is mentioned every day.

102
00:14:03,437 --> 00:14:04,760
How many days since Conda

103
00:14:04,760 --> 00:14:06,082
was mentioned in the support?

104
00:14:06,082 --> 00:14:07,966
And it's usually zero.

105
00:14:07,966 --> 00:14:11,409
which is, conda is an important tool.

106
00:14:11,409 --> 00:14:12,910
You will hear more about conda today.

107
00:14:13,751 --> 00:14:17,154
In general, if you think in your work,

108
00:14:17,154 --> 00:14:18,075
I think Inna has been

109
00:14:18,075 --> 00:14:20,477
mostly using Python and [name] a

110
00:14:20,477 --> 00:14:22,278
bit of Matlab, a bit of Python.

111
00:14:23,119 --> 00:14:24,800
Have you ever experienced this,

112
00:14:24,800 --> 00:14:27,162
that maybe after many months or

113
00:14:27,162 --> 00:14:28,523
even more, many years, the

114
00:14:28,523 --> 00:14:32,046
same code that used to work stopped working?

115
00:14:32,046 --> 00:14:33,488
Was it easier?

116
00:14:33,488 --> 00:14:34,849
Was it easy to make it work

117
00:14:34,849 --> 00:14:37,551
again or was it impossible?

118
00:14:39,033 --> 00:14:44,202
Yes, I have had that experience.

119
00:14:46,726 --> 00:14:48,730
It's very often the problem

120
00:14:48,730 --> 00:14:51,755
that I come back to something

121
00:14:51,755 --> 00:14:54,139
old from myself and

122
00:14:55,874 --> 00:14:57,376
Depending on how much of a

123
00:14:57,376 --> 00:14:59,158
rush I was in when doing

124
00:14:59,158 --> 00:15:01,241
that stuff, it's difficult to

125
00:15:01,241 --> 00:15:02,363
see what I actually did.

126
00:15:03,524 --> 00:15:06,088
And getting back in, like what

127
00:15:06,088 --> 00:15:08,311
the user is writing as well.

128
00:15:09,292 --> 00:15:10,834
And the other thing is,

129
00:15:10,834 --> 00:15:15,300
yeah, particularly recently with what

130
00:15:15,300 --> 00:15:18,625
I just mentioned, PyTorch changes where

131
00:15:20,258 --> 00:15:22,201
The library is, or at least

132
00:15:22,201 --> 00:15:24,304
has been, now it starts to

133
00:15:24,304 --> 00:15:27,469
slowly, well, settle down.

134
00:15:27,469 --> 00:15:29,572
But in the beginning, this was changing

135
00:15:29,572 --> 00:15:34,259
so rapidly that the library

136
00:15:34,259 --> 00:15:35,942
that was working two months ago

137
00:15:35,942 --> 00:15:37,845
is not working now.

138
00:15:37,845 --> 00:15:39,848
So you really had to be careful

139
00:15:39,848 --> 00:15:41,230
what versions you were using

140
00:15:41,230 --> 00:15:43,954
for what code and things.

141
00:15:46,904 --> 00:15:47,989
And what about [name], have

142
00:15:47,989 --> 00:15:50,821
you experienced this, what can I

143
00:15:50,821 --> 00:15:53,806
call it, lack of self-reproducibility?

144
00:15:53,806 --> 00:15:59,193
I think actually not that much

145
00:15:59,193 --> 00:16:01,897
in my hands because I tend

146
00:16:01,897 --> 00:16:04,079
to have fairly self-contained code

147
00:16:04,079 --> 00:16:05,702
for many of my projects,

148
00:16:05,702 --> 00:16:08,766
but working with others and

149
00:16:08,766 --> 00:16:10,568
then especially also working with

150
00:16:10,568 --> 00:16:13,272
PyTorch, I have similar experiences.

151
00:16:13,272 --> 00:16:14,974
So especially when the versions

152
00:16:14,974 --> 00:16:16,516
were in quite a lot of

153
00:16:16,516 --> 00:16:19,780
flux and the change between version one and two

154
00:16:20,890 --> 00:16:24,253
that made things interesting, to

155
00:16:24,253 --> 00:16:24,874
say the least.

156
00:16:25,854 --> 00:16:27,296
Yeah.

157
00:16:27,296 --> 00:16:28,917
I personally had the, sometimes

158
00:16:28,917 --> 00:16:31,019
we need to maybe help somebody

159
00:16:31,019 --> 00:16:34,162
to run a tool that came from

160
00:16:34,162 --> 00:16:36,044
a paper for a few years back.

161
00:16:36,044 --> 00:16:38,205
And I remember once that

162
00:16:38,205 --> 00:16:40,227
tool was specifically working with

163
00:16:40,227 --> 00:16:42,069
a certain combination of versions.

164
00:16:42,069 --> 00:16:43,610
So I had to go back and

165
00:16:43,610 --> 00:16:46,913
see in 2021 which NumPy was

166
00:16:46,913 --> 00:16:48,835
there and which whatever.

167
00:16:48,835 --> 00:16:50,678
package was there try to

168
00:16:50,678 --> 00:16:53,283
see those numbers and then in

169
00:16:53,283 --> 00:16:55,688
the end we managed to

170
00:16:55,688 --> 00:16:57,030
recreate the environment but

171
00:16:57,030 --> 00:16:59,715
it's just sometimes traveling back

172
00:16:59,715 --> 00:17:01,358
in time with code try to

173
00:17:01,358 --> 00:17:02,700
reuse code from other paper

174
00:17:02,700 --> 00:17:04,604
also require this type of

175
00:17:04,604 --> 00:17:07,870
investigation on versions of

176
00:17:07,870 --> 00:17:09,291
different packages.

177
00:17:09,291 --> 00:17:10,953
And maybe Python in this sense

178
00:17:10,953 --> 00:17:13,575
is one of the, I mean, Python is amazing,

179
00:17:13,575 --> 00:17:15,456
but it's one of the worst

180
00:17:15,456 --> 00:17:18,599
when it comes to these dependencies and chains.

181
00:17:18,599 --> 00:17:22,783
And in a way, MATLAB, you

182
00:17:22,783 --> 00:17:24,404
can say anything bad about MATLAB.

183
00:17:24,404 --> 00:17:26,686
I've been using MATLAB for many years,

184
00:17:26,686 --> 00:17:28,828
but being self-contained that

185
00:17:28,828 --> 00:17:31,710
if I'm using MATLAB, whatever,

186
00:17:31,710 --> 00:17:35,493
2021, I can just tell [name]

187
00:17:35,493 --> 00:17:37,435
I'm using MATLAB 2021.

188
00:17:37,435 --> 00:17:38,417
Of course, there can

189
00:17:38,417 --> 00:17:42,543
still be reproducibility issues.

190
00:17:42,543 --> 00:17:44,686
But in this sense, you know.

191
00:17:44,686 --> 00:17:45,908
But essentially what you're doing

192
00:17:45,908 --> 00:17:48,813
there is you said, I'm using MATLAB 2021.

193
00:17:48,813 --> 00:17:50,335
So yes, you have a version

194
00:17:50,335 --> 00:17:52,959
number for the software you're using.

195
00:17:52,959 --> 00:17:55,403
So you have exactly the same

196
00:17:55,403 --> 00:17:59,350
as a, I'm using Python 3.10 with PyTorch 1.0.

197
00:18:01,633 --> 00:18:02,815
That's...

198
00:18:02,815 --> 00:18:04,376
a clear version definition.

199
00:18:04,376 --> 00:18:05,918
If you would say I'm using MATLAB

200
00:18:07,699 --> 00:18:09,060
or I have some MATLAB code,

201
00:18:10,742 --> 00:18:12,463
I remember a situation where

202
00:18:12,463 --> 00:18:14,745
we were teaching something and

203
00:18:14,745 --> 00:18:17,167
MATLAB decided that they will

204
00:18:17,167 --> 00:18:18,549
change the default output of

205
00:18:18,549 --> 00:18:20,871
a function to assuming that a

206
00:18:20,871 --> 00:18:23,333
parameter is set versus it

207
00:18:23,333 --> 00:18:24,914
wasn't assuming that parameter before.

208
00:18:25,835 --> 00:18:29,478
So we had examples that were

209
00:18:29,478 --> 00:18:31,120
running on, I think it was

210
00:18:31,120 --> 00:18:32,701
MATLAB 2018 or something.

211
00:18:32,701 --> 00:18:35,986
And in 2019, they changed the

212
00:18:35,986 --> 00:18:37,809
default for a parameter.

213
00:18:37,809 --> 00:18:40,975
And I was like, why do

214
00:18:40,975 --> 00:18:42,136
our scripts no longer work?

215
00:18:44,580 --> 00:18:48,387
We are just using Matlab functionality.

216
00:18:48,387 --> 00:18:50,170
They should work.

217
00:18:50,170 --> 00:18:52,006
Oh, oh, great.

218
00:18:52,006 --> 00:18:53,508
So now we are not getting

219
00:18:53,508 --> 00:18:54,750
the full output anymore.

220
00:18:54,750 --> 00:18:56,171
We need to add this parameter

221
00:18:56,171 --> 00:18:57,834
to get the full output that we got before.

222
00:18:58,955 --> 00:19:04,082
So I think all languages have this issue.

223
00:19:04,082 --> 00:19:05,443
You were actually in a good scenario.

224
00:19:05,443 --> 00:19:06,385
You were able to see that

225
00:19:06,385 --> 00:19:07,526
the script would not work.

226
00:19:07,526 --> 00:19:10,410
What if the change was so subtle

227
00:19:10,410 --> 00:19:13,594
that the output is still similar,

228
00:19:13,594 --> 00:19:14,816
but I don't know, maybe just

229
00:19:14,816 --> 00:19:18,280
the order with things are sorted is different.

230
00:19:18,280 --> 00:19:21,363
Well, we noticed that the scripts were,

231
00:19:21,363 --> 00:19:22,544
well, the scripts were

232
00:19:22,544 --> 00:19:24,206
actually working, but the answers

233
00:19:24,206 --> 00:19:25,347
were not the same anymore.

234
00:19:26,488 --> 00:19:27,569
Because it was essentially

235
00:19:27,569 --> 00:19:29,370
about solving differential equations.

236
00:19:29,370 --> 00:19:32,874
And before they gave

237
00:19:32,874 --> 00:19:34,415
out parameterized solutions by

238
00:19:34,415 --> 00:19:38,179
default, and after the change, they didn't.

239
00:19:38,179 --> 00:19:39,400
So they gave one solution.

240
00:19:41,602 --> 00:19:43,864
And yeah, that essentially led to,

241
00:19:43,864 --> 00:19:44,805
yeah, the script works, but

242
00:19:44,805 --> 00:19:46,026
it only shows one of the

243
00:19:47,592 --> 00:19:48,574
multiple solutions.

244
00:19:50,457 --> 00:19:52,740
So you kind of got already

245
00:19:52,740 --> 00:19:55,325
a feeling of what we're going to cover today.

246
00:19:55,325 --> 00:19:58,430
It's one o'clock in Helsinki, Finland.

247
00:19:59,231 --> 00:20:01,234
So we can now start with

248
00:20:01,234 --> 00:20:03,458
day four of the code refinery workshop.

249
00:20:04,535 --> 00:20:06,278
Hello everyone and welcome to day

250
00:20:06,278 --> 00:20:07,760
4 of the Code Refinery

251
00:20:07,760 --> 00:20:10,344
workshop September-October 2025.

252
00:20:11,306 --> 00:20:13,289
With me today we have

253
00:20:14,130 --> 00:20:15,853
[name] from University of

254
00:20:15,853 --> 00:20:18,417
Eastern Finland and [name]

255
00:20:19,319 --> 00:20:20,641
from Aalto University.

256
00:20:21,723 --> 00:20:22,844
As you can see I'm

257
00:20:22,844 --> 00:20:25,048
sharing the workshop webpage.

258
00:20:25,048 --> 00:20:26,570
As usual this is the

259
00:20:26,570 --> 00:20:28,273
reference point for all the links

260
00:20:28,273 --> 00:20:29,375
and all the material.

261
00:20:29,375 --> 00:20:31,957
that we will share today and

262
00:20:31,957 --> 00:20:34,519
today starts a different kind of

263
00:20:34,519 --> 00:20:36,141
part of the workshop we often

264
00:20:36,141 --> 00:20:38,142
call it part two so then

265
00:20:38,142 --> 00:20:40,344
instead of having every day like

266
00:20:40,344 --> 00:20:41,785
we had last week and a

267
00:20:41,785 --> 00:20:43,347
little bit longer days the next

268
00:20:43,347 --> 00:20:44,728
days are a little bit shorter

269
00:20:44,728 --> 00:20:46,810
and instead of being one after

270
00:20:46,810 --> 00:20:49,472
the other it will be a week so in practice

271
00:20:49,472 --> 00:20:51,514
for the next sixth or for

272
00:20:51,514 --> 00:20:53,455
the next five Wednesday and for

273
00:20:53,455 --> 00:20:55,357
today we will start at 1

274
00:20:55,357 --> 00:20:57,559
p.m finish time and whatever is

275
00:20:57,559 --> 00:20:58,940
that in your time zone

276
00:20:58,940 --> 00:21:01,023
and the workshop will be

277
00:21:01,023 --> 00:21:03,425
more kind of episodes that

278
00:21:03,425 --> 00:21:05,328
don't really depend on each other

279
00:21:05,328 --> 00:21:06,229
but they are of course

280
00:21:06,229 --> 00:21:08,952
linked all together and today I'm

281
00:21:08,952 --> 00:21:11,015
very happy to talk about I'm very happy

282
00:21:11,015 --> 00:21:12,737
that we are covering this

283
00:21:12,737 --> 00:21:14,819
lesson on reproducible research

284
00:21:14,819 --> 00:21:16,842
because it's really that it

285
00:21:16,842 --> 00:21:19,245
links all the different episodes

286
00:21:19,245 --> 00:21:20,607
whether it's the version control

287
00:21:20,607 --> 00:21:23,190
or you know how do you

288
00:21:23,190 --> 00:21:24,932
work with other people how do

289
00:21:24,932 --> 00:21:28,356
you document your software and so on

290
00:21:30,057 --> 00:21:32,180
so when it comes to the

291
00:21:32,180 --> 00:21:34,463
recap of the previous week so

292
00:21:34,463 --> 00:21:35,884
far we learned about version

293
00:21:35,884 --> 00:21:38,628
control you learn all the terms

294
00:21:38,628 --> 00:21:39,609
that are used how to

295
00:21:39,609 --> 00:21:41,492
commit whether you're using

296
00:21:41,492 --> 00:21:43,274
the github interface or your

297
00:21:43,274 --> 00:21:45,397
favorite editor if you work locally

298
00:21:46,198 --> 00:21:47,259
and also of course what's

299
00:21:47,259 --> 00:21:48,781
very the most exciting bit

300
00:21:48,781 --> 00:21:49,742
of version control is to

301
00:21:49,742 --> 00:21:51,684
work with others fixing

302
00:21:51,684 --> 00:21:54,128
other people repositories or

303
00:21:54,128 --> 00:21:58,373
accepting changes to your own repository

304
00:21:58,373 --> 00:22:00,756
Now for this part two that

305
00:22:00,756 --> 00:22:03,200
is starting we are going to

306
00:22:03,200 --> 00:22:06,204
go more broadly in topics

307
00:22:06,204 --> 00:22:07,486
that sometimes maybe don't

308
00:22:07,486 --> 00:22:10,190
have practical exercises but compared

309
00:22:10,190 --> 00:22:11,973
to the previous years where

310
00:22:11,973 --> 00:22:15,518
this second part was mostly kind of demo based.

311
00:22:15,518 --> 00:22:17,962
this year we decided to

312
00:22:17,962 --> 00:22:20,166
introduce more exercises and so

313
00:22:20,166 --> 00:22:21,829
hopefully you will have fun

314
00:22:21,829 --> 00:22:24,093
today with some interesting

315
00:22:24,093 --> 00:22:27,759
reproducibility exercises when it

316
00:22:27,759 --> 00:22:29,482
comes to the notes document

317
00:22:29,482 --> 00:22:30,904
you should always receive

318
00:22:30,904 --> 00:22:33,849
this collaborative notes document

319
00:22:33,849 --> 00:22:35,953
and for those who are not

320
00:22:35,953 --> 00:22:38,317
familiar with this document at the very top

321
00:22:38,317 --> 00:22:40,561
now there's our cameras there

322
00:22:40,561 --> 00:22:44,568
but under our webcams there

323
00:22:44,568 --> 00:22:48,596
would be a pencil and so that if you

324
00:22:48,596 --> 00:22:51,180
if you click the okay now

325
00:22:51,180 --> 00:22:52,643
it's you see that my mouse is

326
00:22:52,643 --> 00:22:53,825
on top of the pencil

327
00:22:53,825 --> 00:22:55,728
Now I click the pencil

328
00:22:55,728 --> 00:22:57,311
and the interface changes into

329
00:22:57,311 --> 00:22:59,494
some sort of like a editor

330
00:22:59,494 --> 00:23:01,979
mode and here everyone can edit.

331
00:23:01,979 --> 00:23:03,601
So for example you could

332
00:23:03,601 --> 00:23:05,805
already answer one of these

333
00:23:05,805 --> 00:23:08,009
icebreakers like have you heard

334
00:23:08,009 --> 00:23:10,713
this sentence works on my computer

335
00:23:11,915 --> 00:23:13,057
and it's nice to hear your

336
00:23:13,057 --> 00:23:15,101
stories of you know where

337
00:23:15,101 --> 00:23:16,483
this type of computational

338
00:23:16,483 --> 00:23:19,508
reproducibility has failed.

339
00:23:19,508 --> 00:23:21,751
but I'm still in precious

340
00:23:21,751 --> 00:23:24,754
times from our instructors.

341
00:23:24,754 --> 00:23:27,858
So I scroll back up and switch to this eye,

342
00:23:27,858 --> 00:23:29,020
which is the view mode,

343
00:23:29,020 --> 00:23:30,702
meaning that I don't need to

344
00:23:30,702 --> 00:23:32,023
edit this document anymore.

345
00:23:33,505 --> 00:23:36,248
And so I'm very happy that

346
00:23:36,248 --> 00:23:38,491
today we have [name] from

347
00:23:38,491 --> 00:23:39,873
University of Eastern Finland.

348
00:23:39,873 --> 00:23:41,755
She's a researcher working

349
00:23:41,755 --> 00:23:45,059
with computational methods for

350
00:23:45,059 --> 00:23:46,160
drug discovery.

351
00:23:46,160 --> 00:23:48,283
At least this is what I understood.

352
00:23:48,283 --> 00:23:49,124
I hope it's correct.

353
00:23:49,124 --> 00:23:52,250
And [name] from our team at

354
00:23:52,250 --> 00:23:53,653
Aalto is a Research Software

355
00:23:53,653 --> 00:23:56,018
Engineer having lots of fun,

356
00:23:56,018 --> 00:23:57,461
especially with web development

357
00:23:57,461 --> 00:23:59,064
and applications and things like that.

358
00:24:00,066 --> 00:24:02,912
So the stage is yours and

359
00:24:02,912 --> 00:24:04,675
I think we should switch to

360
00:24:04,675 --> 00:24:07,821
[name]'s screen if I'm correct.

361
00:24:07,821 --> 00:24:08,162
Yes.

362
00:24:09,526 --> 00:24:11,269
Okay, thank you very much

363
00:24:11,269 --> 00:24:13,653
for the kind introduction, [name].

364
00:24:13,653 --> 00:24:16,138
And as [name] mentioned, so

365
00:24:16,138 --> 00:24:17,640
we're here today to talk

366
00:24:17,640 --> 00:24:19,543
about reproducible research.

367
00:24:20,826 --> 00:24:23,951
And as [name] has also already mentioned,

368
00:24:24,873 --> 00:24:26,476
this kind of connects all

369
00:24:26,476 --> 00:24:29,982
the different parts of this workshop together.

370
00:24:29,982 --> 00:24:33,087
And let's actually start from there.

371
00:24:35,243 --> 00:24:36,726
How it all connects.

372
00:24:36,726 --> 00:24:40,033
So what I think is pretty clear

373
00:24:40,033 --> 00:24:41,215
when we talk about how

374
00:24:41,215 --> 00:24:44,021
do we get reproducible results in

375
00:24:44,021 --> 00:24:46,285
the end is, well, we need the data.

376
00:24:46,285 --> 00:24:47,788
That's pretty straightforward, right?

377
00:24:48,931 --> 00:24:50,975
And also, of course, we need

378
00:24:50,975 --> 00:24:53,961
the code used to generate the results.

379
00:24:54,937 --> 00:24:56,599
But then there is another thing

380
00:24:56,599 --> 00:24:57,881
that we need to think about

381
00:24:57,881 --> 00:24:59,863
that is called here are my tools.

382
00:24:59,863 --> 00:25:01,085
And that might be a little

383
00:25:01,085 --> 00:25:05,351
bit more alien to you on the surface.

384
00:25:05,351 --> 00:25:06,432
But we are going to talk

385
00:25:06,432 --> 00:25:08,675
about that quite a bit today.

386
00:25:08,675 --> 00:25:10,277
So think of tools as all

387
00:25:10,277 --> 00:25:11,619
the other things you need to

388
00:25:11,619 --> 00:25:13,461
know, all the prerequisites and

389
00:25:13,461 --> 00:25:14,763
everything else you need to

390
00:25:14,763 --> 00:25:17,507
have in addition to code and

391
00:25:17,507 --> 00:25:20,030
data to make reproducible results.

392
00:25:20,030 --> 00:25:22,633
And what has this got to

393
00:25:22,633 --> 00:25:24,636
do with this workshop altogether?

394
00:25:24,636 --> 00:25:27,500
So actually the whole workshop

395
00:25:27,500 --> 00:25:29,803
gives you all the tools you need

396
00:25:29,803 --> 00:25:32,627
for computational reproducibility from

397
00:25:32,627 --> 00:25:34,489
a computational perspective.

398
00:25:34,489 --> 00:25:36,252
So this here is my code.

399
00:25:36,252 --> 00:25:37,754
Those of you who have been

400
00:25:37,754 --> 00:25:40,297
there during the first week

401
00:25:40,297 --> 00:25:42,159
or already know version control

402
00:25:42,159 --> 00:25:43,561
with Git, have a sense of

403
00:25:44,402 --> 00:25:45,683
how this can help you.

404
00:25:45,683 --> 00:25:46,684
And there's a lot more

405
00:25:46,684 --> 00:25:49,628
coming on topics like social coding,

406
00:25:49,628 --> 00:25:52,311
so licensing, how to get credit

407
00:25:52,311 --> 00:25:54,113
for your code, documentation,

408
00:25:55,074 --> 00:25:58,358
Jupyter Notebooks, annotated executable

409
00:25:58,358 --> 00:26:00,640
code blocks, and automated

410
00:26:00,640 --> 00:26:02,843
testing, modular code development.

411
00:26:02,843 --> 00:26:04,785
All of this helps you to

412
00:26:04,785 --> 00:26:06,967
make your code reproducible.

413
00:26:06,967 --> 00:26:09,170
But then what about the other stuff?

414
00:26:09,170 --> 00:26:11,575
So this here are my tools

415
00:26:11,575 --> 00:26:13,739
is what we are going to cover today.

416
00:26:13,739 --> 00:26:16,966
General reproducibility, how you

417
00:26:16,966 --> 00:26:19,251
can actually prepare your code and

418
00:26:19,251 --> 00:26:21,656
put it in context so others and

419
00:26:21,656 --> 00:26:25,103
you can use it again in the future.

420
00:26:26,281 --> 00:26:29,466
And what is important, and I

421
00:26:29,466 --> 00:26:31,148
want to stress that right at

422
00:26:31,148 --> 00:26:33,011
the very beginning of today's

423
00:26:33,011 --> 00:26:35,255
lesson is this might feel

424
00:26:35,255 --> 00:26:36,797
a little bit overwhelming.

425
00:26:36,797 --> 00:26:38,199
So we are going to cover

426
00:26:38,199 --> 00:26:39,561
a lot of ground today.

427
00:26:39,561 --> 00:26:41,164
And you might think that

428
00:26:42,065 --> 00:26:43,427
maybe I don't really need

429
00:26:43,427 --> 00:26:44,869
these things right now.

430
00:26:44,869 --> 00:26:45,370
So

431
00:26:46,700 --> 00:26:47,702
what am I going to

432
00:26:47,702 --> 00:26:50,006
do with this information?

433
00:26:50,006 --> 00:26:52,251
And what we really want to

434
00:26:52,251 --> 00:26:55,858
stress is we want to show you what's out there.

435
00:26:55,858 --> 00:26:56,980
We want to give you an

436
00:26:56,980 --> 00:26:59,124
idea how can you achieve

437
00:26:59,124 --> 00:27:01,729
different things in case this

438
00:27:01,729 --> 00:27:04,595
becomes relevant to you in future.

439
00:27:04,595 --> 00:27:06,578
But don't overthink it.

440
00:27:06,578 --> 00:27:07,260
Don't fret.

441
00:27:08,141 --> 00:27:09,464
What we really want to

442
00:27:09,464 --> 00:27:11,566
point out is focus on

443
00:27:11,566 --> 00:27:13,688
good enough start somewhere start

444
00:27:13,688 --> 00:27:16,571
with small steps that's already a big step

445
00:27:16,571 --> 00:27:18,654
for overall reproducibility think

446
00:27:18,654 --> 00:27:20,856
of one topic maybe we cover

447
00:27:20,856 --> 00:27:24,560
today you can get inspired perhaps

448
00:27:24,560 --> 00:27:25,861
if you know that you want

449
00:27:25,861 --> 00:27:27,743
to submit to a certain journal

450
00:27:27,743 --> 00:27:30,306
then look at the journal requirements

451
00:27:30,306 --> 00:27:31,387
or look at your funder

452
00:27:31,387 --> 00:27:33,309
requirements or talk with colleagues

453
00:27:33,309 --> 00:27:34,550
maybe your work group has

454
00:27:34,550 --> 00:27:36,953
some requirements that have to do with

455
00:27:36,953 --> 00:27:40,779
data structure, reproducibility aspects.

456
00:27:40,779 --> 00:27:42,622
So get inspired by something

457
00:27:42,622 --> 00:27:45,186
that you need that helps you right now

458
00:27:45,186 --> 00:27:47,790
and start with one topic and

459
00:27:47,790 --> 00:27:50,274
just try to learn and implement that.

460
00:27:50,274 --> 00:27:51,095
And if you don't really

461
00:27:51,095 --> 00:27:53,780
know where to start, a great way we find

462
00:27:53,780 --> 00:27:55,362
that helps you to

463
00:27:55,362 --> 00:27:58,788
identify bottlenecks, problems, missing

464
00:27:58,788 --> 00:28:00,390
links is always to just give

465
00:28:00,390 --> 00:28:02,053
your code to somebody else

466
00:28:02,053 --> 00:28:04,156
and every question they need to ask you

467
00:28:04,156 --> 00:28:06,183
tells you probably something

468
00:28:06,183 --> 00:28:07,889
where you could improve a

469
00:28:07,889 --> 00:28:09,675
little bit on reproducibility.

470
00:28:11,703 --> 00:28:12,124
And

471
00:28:13,488 --> 00:28:16,172
Now, I think based on

472
00:28:16,172 --> 00:28:18,415
the icebreaker, this is something

473
00:28:18,415 --> 00:28:20,138
you are all here because you

474
00:28:20,138 --> 00:28:23,022
already have some idea about reproducibility.

475
00:28:23,022 --> 00:28:24,585
And I think at least some

476
00:28:24,585 --> 00:28:27,028
of you can quite nicely connect

477
00:28:27,890 --> 00:28:29,933
to this PhD comic that

478
00:28:29,933 --> 00:28:32,737
you have suffered through the

479
00:28:32,737 --> 00:28:34,700
great fun of starting from

480
00:28:34,700 --> 00:28:36,002
somebody else's work.

481
00:28:37,315 --> 00:28:40,300
Nonetheless, why are we talking about this?

482
00:28:40,300 --> 00:28:41,762
So what's the motivation

483
00:28:41,762 --> 00:28:44,206
overall behind reproducible science?

484
00:28:45,408 --> 00:28:49,154
And we have here a scary anecdote for you.

485
00:28:49,154 --> 00:28:50,937
And in fact, this is a

486
00:28:50,937 --> 00:28:53,901
true story that we have really

487
00:28:53,901 --> 00:28:57,707
seen happen in real life.

488
00:28:57,707 --> 00:28:59,250
So it's not just something that

489
00:28:59,250 --> 00:29:00,812
we put here to convince you.

490
00:29:01,653 --> 00:29:03,877
So imagine this.

491
00:29:03,877 --> 00:29:06,523
You're in a group of researchers

492
00:29:06,523 --> 00:29:08,206
and you obtain really good results,

493
00:29:08,206 --> 00:29:09,709
so obviously you want to

494
00:29:09,709 --> 00:29:11,974
submit that work to a high profile journal.

495
00:29:13,237 --> 00:29:16,423
And then a month or

496
00:29:16,423 --> 00:29:18,868
two later, reviewers ask you

497
00:29:18,868 --> 00:29:20,552
to make some changes, get

498
00:29:20,552 --> 00:29:22,496
some additional figures in, do

499
00:29:22,496 --> 00:29:24,380
some more analysis.

500
00:29:24,380 --> 00:29:27,087
And as you try to implement those changes,

501
00:29:27,087 --> 00:29:28,931
you realize that actually

502
00:29:28,931 --> 00:29:32,320
there's something odd happening.

503
00:29:32,320 --> 00:29:34,305
You can't even quite reproduce

504
00:29:34,305 --> 00:29:35,588
the original figures.

505
00:29:36,410 --> 00:29:37,974
There seems to be some

506
00:29:37,974 --> 00:29:40,380
data missing that you can't find.

507
00:29:41,474 --> 00:29:44,338
And you can't really reproduce

508
00:29:44,338 --> 00:29:46,561
the results of the original submission.

509
00:29:48,023 --> 00:29:50,206
And maybe you don't even know

510
00:29:50,206 --> 00:29:51,688
what parameters were used

511
00:29:51,688 --> 00:29:54,431
for generating the original data.

512
00:29:54,431 --> 00:29:55,733
And this can just mean

513
00:29:55,733 --> 00:29:58,036
that the manuscript never sees the

514
00:29:58,036 --> 00:29:58,917
light of the day.

515
00:29:58,917 --> 00:30:00,900
So it's still left in the drawer.

516
00:30:01,994 --> 00:30:05,698
And well, of course, this can

517
00:30:05,698 --> 00:30:07,400
be quite bad for you if,

518
00:30:07,400 --> 00:30:09,483
for example, your PhD depends

519
00:30:09,483 --> 00:30:11,385
on that paper, your next grant,

520
00:30:11,385 --> 00:30:12,446
maybe your next job.

521
00:30:13,768 --> 00:30:15,230
Expected that this paper

522
00:30:15,230 --> 00:30:18,173
would eventually be published and

523
00:30:18,173 --> 00:30:19,094
now it's not happening.

524
00:30:20,095 --> 00:30:22,038
So this is a bad situation

525
00:30:22,038 --> 00:30:25,622
that I think we can all agree we want to avoid.

526
00:30:27,644 --> 00:30:29,227
But then you could argue, hey,

527
00:30:29,227 --> 00:30:31,412
this is just an isolated thing.

528
00:30:31,412 --> 00:30:33,215
And obviously this happens to

529
00:30:33,215 --> 00:30:34,578
some people, but it's not going

530
00:30:34,578 --> 00:30:35,260
to happen to me.

531
00:30:36,402 --> 00:30:38,366
And it's not really something

532
00:30:38,366 --> 00:30:40,210
that happens very often.

533
00:30:40,210 --> 00:30:42,534
And well, some of you

534
00:30:42,534 --> 00:30:44,037
might be familiar with this

535
00:30:44,037 --> 00:30:46,823
already, but in case you have

536
00:30:46,823 --> 00:30:48,687
not seen this conversation,

537
00:30:48,687 --> 00:30:51,770
quite telltale survey published

538
00:30:51,770 --> 00:30:53,352
in Nature now nine years

539
00:30:53,352 --> 00:30:56,675
back about reproducible research

540
00:30:56,675 --> 00:30:58,857
asking researchers across the

541
00:30:58,857 --> 00:31:00,479
life sciences have they ever

542
00:31:00,479 --> 00:31:02,561
failed to reproduce an experiment

543
00:31:03,642 --> 00:31:04,804
and now it might not be

544
00:31:04,804 --> 00:31:06,886
such a big surprise that quite

545
00:31:06,886 --> 00:31:08,768
many failed in reproducing

546
00:31:08,768 --> 00:31:11,150
someone else's experiment but what's

547
00:31:11,150 --> 00:31:14,641
a lot more depressing is that you see that

548
00:31:14,641 --> 00:31:16,483
almost as many have also

549
00:31:16,483 --> 00:31:18,105
failed to actually reproduce

550
00:31:18,105 --> 00:31:19,186
their own experiments.

551
00:31:20,207 --> 00:31:22,489
So that's rather bad.

552
00:31:22,489 --> 00:31:27,574
And it's probably the publication

553
00:31:27,574 --> 00:31:29,737
that kind of coined that term

554
00:31:29,737 --> 00:31:31,519
that we really accept that, hey,

555
00:31:31,519 --> 00:31:33,581
we have a reproducibility crisis.

556
00:31:33,581 --> 00:31:34,542
So more than half of

557
00:31:34,542 --> 00:31:37,465
the surveyed researchers said, okay,

558
00:31:37,465 --> 00:31:39,287
there is a crisis going on

559
00:31:39,287 --> 00:31:40,628
in science right now.

560
00:31:40,628 --> 00:31:45,375
But this is all from experimental sciences.

561
00:31:45,375 --> 00:31:46,496
And what was among the

562
00:31:46,496 --> 00:31:48,980
reasons they asked about was

563
00:31:48,980 --> 00:31:50,903
that methods and code were

564
00:31:50,903 --> 00:31:52,445
simply not available.

565
00:31:52,445 --> 00:31:54,288
So then you can't reproduce it.

566
00:31:55,109 --> 00:31:57,071
And hopefully, since you're in

567
00:31:57,071 --> 00:31:58,674
the code refinery workshop, you

568
00:31:58,674 --> 00:32:00,396
already know how to avoid that

569
00:32:00,396 --> 00:32:01,658
one and how to do better.

570
00:32:03,207 --> 00:32:07,794
And also, as I said, experimental sciences,

571
00:32:07,794 --> 00:32:09,637
there can be any number of reasons,

572
00:32:09,637 --> 00:32:11,280
but you would naively think

573
00:32:11,280 --> 00:32:13,744
we're talking about computational

574
00:32:13,744 --> 00:32:15,446
methods today.

575
00:32:15,446 --> 00:32:17,369
So this is kind of deterministic.

576
00:32:17,369 --> 00:32:19,352
You feed it some data into

577
00:32:19,352 --> 00:32:21,736
the same code, you get the same result out.

578
00:32:21,736 --> 00:32:22,998
So this should be an easy

579
00:32:22,998 --> 00:32:24,220
one for us to solve.

580
00:32:25,499 --> 00:32:31,270
But in practice, well, I can tell you

581
00:32:31,270 --> 00:32:32,832
that we have quite recently

582
00:32:32,832 --> 00:32:36,018
done a reproducibility study with

583
00:32:36,018 --> 00:32:38,182
my team and trying to actually

584
00:32:38,182 --> 00:32:41,989
run over 200 published research codes.

585
00:32:43,066 --> 00:32:46,152
and it's easily as grim as

586
00:32:46,152 --> 00:32:47,374
what you have seen here

587
00:32:47,374 --> 00:32:49,779
in the experimental sciences so

588
00:32:49,779 --> 00:32:54,067
a lot of failure cases actually

589
00:32:54,067 --> 00:32:55,469
the majority of them

590
00:32:55,469 --> 00:32:57,854
had reproducibility problems more

591
00:32:57,854 --> 00:32:59,897
than half at any rate and

592
00:32:59,897 --> 00:33:02,202
top reasons were for example

593
00:33:02,202 --> 00:33:04,366
complete lack of documentation

594
00:33:04,366 --> 00:33:06,610
so that's something for you to learn more

595
00:33:07,670 --> 00:33:10,854
during day six of this workshop.

596
00:33:10,854 --> 00:33:12,536
And then the other topics

597
00:33:12,536 --> 00:33:14,598
were things like environment

598
00:33:14,598 --> 00:33:17,181
definition problems, missing dependencies.

599
00:33:17,181 --> 00:33:19,264
So a lot of reasons that have not

600
00:33:19,264 --> 00:33:21,467
so much to do with the code itself

601
00:33:21,467 --> 00:33:23,970
or the data, but actually with

602
00:33:23,970 --> 00:33:25,571
that environment, with these

603
00:33:25,571 --> 00:33:27,654
additional tools and requirements

604
00:33:28,875 --> 00:33:31,078
that we mentioned in the beginning.

605
00:33:32,459 --> 00:33:35,988
And hopefully after today's workshop,

606
00:33:35,988 --> 00:33:38,234
what we will teach you helps

607
00:33:38,234 --> 00:33:40,500
you to avoid at least some

608
00:33:40,500 --> 00:33:42,385
of these pitfalls and do better.

609
00:33:43,883 --> 00:33:44,584
And when we think

610
00:33:44,584 --> 00:33:47,008
about reproducibility, that's also

611
00:33:47,008 --> 00:33:49,693
important to recognize that we

612
00:33:49,693 --> 00:33:54,121
often kind of think just about code and data.

613
00:33:54,121 --> 00:33:55,303
We might acknowledge that

614
00:33:55,303 --> 00:33:57,987
documentation is important and we

615
00:33:57,987 --> 00:34:00,351
might be very focused at this end goal.

616
00:34:00,351 --> 00:34:01,573
OK, we want to write an

617
00:34:01,573 --> 00:34:04,879
article or maybe you have a different end goal.

618
00:34:04,879 --> 00:34:06,682
Maybe you just want to publish software.

619
00:34:06,682 --> 00:34:09,265
software, but whatever your end goal is,

620
00:34:09,265 --> 00:34:10,366
this rests on top of

621
00:34:10,366 --> 00:34:12,428
documentation, code, data, that's

622
00:34:12,428 --> 00:34:14,069
all very nice.

623
00:34:14,069 --> 00:34:16,392
But it's just not enough.

624
00:34:16,392 --> 00:34:18,074
And all of this rests on

625
00:34:18,074 --> 00:34:19,535
a foundation that has to

626
00:34:19,535 --> 00:34:20,896
do with the environment.

627
00:34:20,896 --> 00:34:22,038
And if we don't really know

628
00:34:22,038 --> 00:34:24,680
what to do with your code and your data,

629
00:34:24,680 --> 00:34:26,402
how these things come together,

630
00:34:26,402 --> 00:34:28,965
and where you executed them

631
00:34:28,965 --> 00:34:31,287
with what other tools in mind,

632
00:34:31,287 --> 00:34:33,049
then the whole thing just breaks down.

633
00:34:33,049 --> 00:34:35,251
And that's just important to recognize,

634
00:34:35,251 --> 00:34:37,680
that reproducibility is more than

635
00:34:37,680 --> 00:34:40,229
just code and data and documentation,

636
00:34:40,229 --> 00:34:42,898
but there is something underneath

637
00:34:42,898 --> 00:34:46,290
it that we should also take into account.

638
00:34:48,228 --> 00:34:50,412
And yeah, I have now already

639
00:34:50,412 --> 00:34:53,857
shared my own experience with

640
00:34:53,857 --> 00:34:55,360
trying to reproduce code.

641
00:34:55,360 --> 00:34:57,123
And I think we have a

642
00:34:57,123 --> 00:34:59,226
couple of interesting stories by

643
00:34:59,226 --> 00:35:01,590
now also in the icebreaker

644
00:35:01,590 --> 00:35:05,076
questions about your experiences

645
00:35:05,076 --> 00:35:07,820
with rerunning codes, adjusting

646
00:35:07,820 --> 00:35:10,104
scripts, figuring out what you

647
00:35:10,104 --> 00:35:11,466
have done a couple of months

648
00:35:11,466 --> 00:35:13,510
ago, continuing to work from

649
00:35:13,510 --> 00:35:14,992
somebody else's code.

650
00:35:14,992 --> 00:35:17,879
So maybe I think it's time

651
00:35:17,879 --> 00:35:21,789
to maybe switch to [name]'s screen to see

652
00:35:21,789 --> 00:35:24,335
what interesting stories we have

653
00:35:24,335 --> 00:35:26,200
by now in the collaborated notes.

654
00:35:27,901 --> 00:35:34,349
Overall, the most interesting thing

655
00:35:34,349 --> 00:35:38,914
that I saw here is when

656
00:35:38,914 --> 00:35:41,197
coming back to their own code,

657
00:35:41,197 --> 00:35:42,979
a lot of people are saying that

658
00:35:42,979 --> 00:35:45,021
they do need to take a couple

659
00:35:45,021 --> 00:35:47,044
of days to get back into

660
00:35:47,044 --> 00:35:48,305
what they were actually doing.

661
00:35:48,305 --> 00:35:50,668
And I can completely understand that.

662
00:35:50,668 --> 00:35:51,689
It's the same for me.

663
00:35:51,689 --> 00:35:53,532
Even with good documentation, you

664
00:35:53,532 --> 00:35:56,335
just need some time to get into a...

665
00:35:56,335 --> 00:35:58,198
new project, even if it's

666
00:35:58,198 --> 00:36:00,241
a project that you have been working on before.

667
00:36:03,166 --> 00:36:05,609
Often code styling, code

668
00:36:06,671 --> 00:36:08,514
considerations are somewhat different

669
00:36:08,514 --> 00:36:11,218
between different projects and

670
00:36:11,218 --> 00:36:12,981
then it's just, yeah, you need

671
00:36:12,981 --> 00:36:17,800
some time to get back in.

672
00:36:17,800 --> 00:36:20,850
So have you ever experienced that

673
00:36:20,850 --> 00:36:23,238
if you're looking back at code

674
00:36:23,238 --> 00:36:25,084
that you wrote two or three years ago,

675
00:36:25,084 --> 00:36:26,308
that it feels like it has

676
00:36:26,308 --> 00:36:28,195
been written by a different person?

677
00:36:28,195 --> 00:36:29,696
Yes, definitely.

678
00:36:31,218 --> 00:36:33,861
It's also, especially if you

679
00:36:33,861 --> 00:36:35,342
are working in a field

680
00:36:35,342 --> 00:36:38,165
where things are evolving, things are changing,

681
00:36:38,165 --> 00:36:39,446
you look back at code that

682
00:36:39,446 --> 00:36:42,689
you wrote a couple of years back or

683
00:36:42,689 --> 00:36:44,511
even sometimes even a couple

684
00:36:44,511 --> 00:36:46,553
of months back and think like,

685
00:36:46,553 --> 00:36:49,176
why the heck did I even do this like that?

686
00:36:49,176 --> 00:36:51,858
Because this doesn't... Well, yeah,

687
00:36:51,858 --> 00:36:55,502
okay, it works, but it's not

688
00:36:55,502 --> 00:36:56,723
what it should be.

689
00:36:56,723 --> 00:36:57,524
It's not...

690
00:36:57,524 --> 00:37:00,769
how I recently found style for

691
00:37:00,769 --> 00:37:03,153
this kind of library or how

692
00:37:03,153 --> 00:37:05,737
this type of library should be used.

693
00:37:05,737 --> 00:37:09,703
And it's very often that you, yeah,

694
00:37:09,703 --> 00:37:10,585
as I said, you come from

695
00:37:10,585 --> 00:37:12,368
a certain style of writing code.

696
00:37:13,169 --> 00:37:15,473
And if a library has

697
00:37:15,473 --> 00:37:20,120
a different approach to coding in general,

698
00:37:20,120 --> 00:37:23,124
what you write and how

699
00:37:23,124 --> 00:37:24,606
you interface with that library

700
00:37:24,606 --> 00:37:28,210
might look very, very, very different.

701
00:37:28,210 --> 00:37:29,192
And at some point, if you

702
00:37:29,192 --> 00:37:30,994
use the library enough, you

703
00:37:30,994 --> 00:37:32,897
start to understand how they

704
00:37:32,897 --> 00:37:34,959
were thinking, how they want things

705
00:37:34,959 --> 00:37:37,262
to be used with this library.

706
00:37:37,262 --> 00:37:38,284
And then you start writing

707
00:37:38,284 --> 00:37:39,345
your code that way.

708
00:37:39,345 --> 00:37:40,927
And then you look back at some old code

709
00:37:40,927 --> 00:37:42,749
and you think like, this

710
00:37:42,749 --> 00:37:43,650
shouldn't be written like this.

711
00:37:44,732 --> 00:37:45,513
It should be written

712
00:37:45,513 --> 00:37:46,414
completely differently.

713
00:37:47,947 --> 00:37:50,470
And when it comes to

714
00:37:51,411 --> 00:37:53,955
continuing work from other people, yeah,

715
00:37:53,955 --> 00:37:55,937
I think the first one is

716
00:37:55,937 --> 00:37:58,340
quite telling was, yeah, there's

717
00:37:58,340 --> 00:38:00,763
a lot of errors coming up.

718
00:38:00,763 --> 00:38:02,285
You need to find which versions

719
00:38:02,285 --> 00:38:03,887
where to put things and

720
00:38:03,887 --> 00:38:06,090
it's pretty much undocumented.

721
00:38:06,090 --> 00:38:06,731
And I think we will

722
00:38:06,731 --> 00:38:08,433
come to the documentation will

723
00:38:08,433 --> 00:38:11,757
be in three weeks, I think.

724
00:38:11,757 --> 00:38:14,865
And documentation is probably also

725
00:38:14,865 --> 00:38:16,730
one of the most important

726
00:38:16,730 --> 00:38:19,297
bits about code development.

727
00:38:21,483 --> 00:38:23,448
And then the problem that

728
00:38:23,448 --> 00:38:26,978
if you have really old things then, well,

729
00:38:26,978 --> 00:38:31,544
you just can't find the right versions

730
00:38:31,544 --> 00:38:33,708
that were used to compile that

731
00:38:33,708 --> 00:38:35,070
because if you have something from,

732
00:38:35,070 --> 00:38:37,413
yeah, here it's from 2003,

733
00:38:38,615 --> 00:38:40,097
you don't necessarily know whether

734
00:38:40,097 --> 00:38:41,639
that was compiled with the

735
00:38:41,639 --> 00:38:44,783
latest version or maybe a

736
00:38:46,646 --> 00:38:49,730
Linux three years from, three or

737
00:38:49,730 --> 00:38:50,892
four years old that didn't

738
00:38:50,892 --> 00:38:52,274
have the latest versions.

739
00:38:52,274 --> 00:38:56,360
and was just about at its end of life.

740
00:38:56,360 --> 00:38:58,422
And yeah, it was compiled

741
00:38:58,422 --> 00:39:01,026
with something even older and

742
00:39:01,026 --> 00:39:02,528
only worked with that.

743
00:39:02,528 --> 00:39:05,792
So like [name] mentioned in

744
00:39:05,792 --> 00:39:08,135
the Icebreaker time, that is something

745
00:39:08,135 --> 00:39:12,041
that very often comes in the way of,

746
00:39:12,041 --> 00:39:15,125
yeah, reproducing things, either

747
00:39:15,125 --> 00:39:17,488
your own or continuing work from others.

748
00:39:18,582 --> 00:39:20,925
And I think we have already

749
00:39:20,925 --> 00:39:22,788
now talked a lot about the

750
00:39:22,788 --> 00:39:25,832
aspect of versions that you

751
00:39:25,832 --> 00:39:27,474
don't really know what versions

752
00:39:27,474 --> 00:39:28,735
people have been using.

753
00:39:28,735 --> 00:39:30,458
And that's, for example, also

754
00:39:30,458 --> 00:39:32,360
in our study was a huge

755
00:39:32,360 --> 00:39:34,163
problem that, you know, when a

756
00:39:34,163 --> 00:39:36,145
code has been published.

757
00:39:36,145 --> 00:39:37,367
But if they don't report

758
00:39:37,367 --> 00:39:39,530
the versions, it can like

759
00:39:39,530 --> 00:39:41,472
simply mean any number of things.

760
00:39:41,472 --> 00:39:43,335
You can roughly guesstimate

761
00:39:43,335 --> 00:39:46,058
what package versions were relevant

762
00:39:46,058 --> 00:39:47,320
in 23 versions.

763
00:39:47,320 --> 00:39:48,823
But then they might have

764
00:39:48,823 --> 00:39:50,447
worked with versions and they

765
00:39:50,447 --> 00:39:51,509
might have worked on a

766
00:39:51,509 --> 00:39:53,774
project since, let's say, 2018.

767
00:39:53,774 --> 00:39:57,442
And they have never

768
00:39:57,442 --> 00:39:59,627
changed their environment.

769
00:39:59,627 --> 00:40:01,030
So they are using even

770
00:40:01,030 --> 00:40:03,054
more outdated versions than you would think.

771
00:40:03,054 --> 00:40:05,580
And if there's no information

772
00:40:05,580 --> 00:40:07,604
about that, you have no way of knowing.

773
00:40:07,604 --> 00:40:10,108
And there's actually, sorry to interrupt,

774
00:40:10,108 --> 00:40:12,492
there's actually one good question here,

775
00:40:13,473 --> 00:40:15,757
whether if a scientific findings

776
00:40:15,757 --> 00:40:18,221
depend on the specific version of libraries,

777
00:40:18,221 --> 00:40:19,703
if it then is actually

778
00:40:19,703 --> 00:40:22,628
reproducible or if it cannot

779
00:40:22,628 --> 00:40:24,631
be repeated with different libraries.

780
00:40:24,631 --> 00:40:27,114
I think this very much plays

781
00:40:27,114 --> 00:40:27,934
in here as well because

782
00:40:27,934 --> 00:40:29,636
there's two different things.

783
00:40:29,636 --> 00:40:33,060
There is the science behind

784
00:40:33,060 --> 00:40:37,885
a certain code where, yeah,

785
00:40:37,885 --> 00:40:40,147
if this works properly and is

786
00:40:40,147 --> 00:40:41,529
not dependent on things like

787
00:40:41,529 --> 00:40:47,955
numerics or other non-code-based

788
00:40:47,955 --> 00:40:49,437
issues, let's phrase it like that,

789
00:40:49,437 --> 00:40:53,323
then I think it's okay

790
00:40:53,323 --> 00:40:54,785
and it's also reproducible even

791
00:40:54,785 --> 00:40:55,866
if it doesn't work with a

792
00:40:55,866 --> 00:40:56,948
newer version because the newer

793
00:40:56,948 --> 00:40:59,011
version is essentially a different tool.

794
00:40:59,832 --> 00:41:03,497
So it's the same as if you would say,

795
00:41:03,497 --> 00:41:05,140
well, if I have a

796
00:41:05,140 --> 00:41:06,862
completely different machine to

797
00:41:06,862 --> 00:41:10,988
analyze things, it should still be working.

798
00:41:10,988 --> 00:41:12,250
Yeah, but only if that

799
00:41:12,250 --> 00:41:14,393
machine actually produces the same

800
00:41:14,393 --> 00:41:16,656
kind of outputs and takes the

801
00:41:16,656 --> 00:41:19,360
same kind of samples from preparation.

802
00:41:21,027 --> 00:41:23,910
It's really this, if a

803
00:41:23,910 --> 00:41:27,434
library changes, sometimes functionality

804
00:41:27,434 --> 00:41:28,075
stays the same.

805
00:41:29,477 --> 00:41:31,759
But if the functionalities do change

806
00:41:31,759 --> 00:41:33,101
and do change, for example,

807
00:41:33,101 --> 00:41:34,623
an underlying algorithm for

808
00:41:34,623 --> 00:41:36,785
a certain functionality, because

809
00:41:36,785 --> 00:41:38,407
someone found that there is

810
00:41:38,407 --> 00:41:39,729
a more efficient one for

811
00:41:39,729 --> 00:41:41,611
some type of approximation.

812
00:41:43,253 --> 00:41:45,575
And now, well, it gives

813
00:41:45,575 --> 00:41:47,417
slightly different results because,

814
00:41:47,417 --> 00:41:48,739
well, it's an approximation.

815
00:41:49,681 --> 00:41:51,865
It's also, I think, important

816
00:41:51,865 --> 00:41:53,808
in this context that we

817
00:41:53,808 --> 00:41:55,691
distinguish a little bit between

818
00:41:55,691 --> 00:41:57,974
kind of technical reproducibility.

819
00:41:57,974 --> 00:42:01,740
So can you even rerun the code in itself?

820
00:42:01,740 --> 00:42:04,705
Can you generate output in the first place?

821
00:42:04,705 --> 00:42:06,388
And a lot of this versioning

822
00:42:06,388 --> 00:42:08,652
is going to break that first

823
00:42:08,652 --> 00:42:11,576
rerun ability or technical reproducibility.

824
00:42:11,576 --> 00:42:12,377
And then it's a whole

825
00:42:12,377 --> 00:42:14,301
different matter that depends on

826
00:42:14,301 --> 00:42:15,803
other things out there.

827
00:42:15,803 --> 00:42:17,626
changes in the libraries, like

828
00:42:17,626 --> 00:42:19,730
you just explained, can of

829
00:42:19,730 --> 00:42:21,372
course also affect the results.

830
00:42:21,372 --> 00:42:24,938
Can you reproduce the exact output

831
00:42:24,938 --> 00:42:27,523
or at least in reality, when

832
00:42:27,523 --> 00:42:29,606
we work with approximations, it's

833
00:42:29,606 --> 00:42:31,329
quite often more a question, can

834
00:42:31,329 --> 00:42:33,934
you get the ballpark right?

835
00:42:33,934 --> 00:42:35,676
So it will not be exactly

836
00:42:35,676 --> 00:42:37,540
the same floating point number,

837
00:42:37,540 --> 00:42:39,563
but it should at least give you the same

838
00:42:39,563 --> 00:42:42,306
general direction and general idea

839
00:42:42,306 --> 00:42:43,828
and that's kind of more

840
00:42:44,729 --> 00:42:47,633
the actual reproducibility of the

841
00:42:47,633 --> 00:42:49,515
results of a computational study

842
00:42:50,396 --> 00:42:53,319
but quite often unfortunately I

843
00:42:53,319 --> 00:42:55,842
can attest to the fact that

844
00:42:55,842 --> 00:42:58,265
you fail already in the first step

845
00:42:58,265 --> 00:43:00,488
so you cannot even get

846
00:43:00,488 --> 00:43:02,771
this technical reproducible you cannot

847
00:43:02,771 --> 00:43:04,092
run the code and if you

848
00:43:04,092 --> 00:43:05,654
can't run the code then there's

849
00:43:05,654 --> 00:43:07,316
no point in even talking about

850
00:43:07,316 --> 00:43:09,078
would I get the same results

851
00:43:09,078 --> 00:43:11,421
with the information I have,

852
00:43:11,421 --> 00:43:13,403
because, well, it's not running.

853
00:43:14,264 --> 00:43:16,706
So I hope, since we've talked

854
00:43:16,706 --> 00:43:20,090
a lot now about versions, and there, of course,

855
00:43:20,090 --> 00:43:22,312
when you work with somebody else's code,

856
00:43:22,312 --> 00:43:23,353
and you run into a lot

857
00:43:23,353 --> 00:43:26,256
of errors, not everything is

858
00:43:26,256 --> 00:43:28,919
related to versions and environment.

859
00:43:28,919 --> 00:43:30,401
But I think we have heard

860
00:43:30,401 --> 00:43:33,344
a couple of examples and seen a couple of

861
00:43:33,344 --> 00:43:36,009
comments that link to, for

862
00:43:36,009 --> 00:43:39,735
example, the ENV and conda environments

863
00:43:39,735 --> 00:43:42,480
and versions that you install

864
00:43:42,480 --> 00:43:44,243
that kind of tell you that

865
00:43:44,243 --> 00:43:47,729
this is very much at the core of the issue,

866
00:43:47,729 --> 00:43:49,452
that we simply do not

867
00:43:49,452 --> 00:43:51,355
know enough about these tools

868
00:43:51,355 --> 00:43:54,961
and about the environment to reproduce code.

869
00:43:54,961 --> 00:43:57,792
But before we dive even deeper into

870
00:43:57,792 --> 00:44:01,467
that topic, I think let's

871
00:44:01,467 --> 00:44:03,074
talk about something that is

872
00:44:03,074 --> 00:44:05,865
maybe even easier.

873
00:44:06,706 --> 00:44:08,229
And if you don't really know

874
00:44:08,229 --> 00:44:11,996
what is the first step, where

875
00:44:11,996 --> 00:44:13,860
to start in order to

876
00:44:13,860 --> 00:44:16,986
improve reproducibility, then this is

877
00:44:16,986 --> 00:44:19,390
a good place for you to begin.

878
00:44:19,390 --> 00:44:21,414
And it might seem really obvious,

879
00:44:22,236 --> 00:44:24,059
but trust me when I tell

880
00:44:24,059 --> 00:44:27,145
you in practice, sadly, it's quite often not.

881
00:44:28,559 --> 00:44:31,543
And start from organizing your

882
00:44:31,543 --> 00:44:33,946
projects in a logical fashion,

883
00:44:33,946 --> 00:44:35,729
because like we heard in that

884
00:44:35,729 --> 00:44:37,571
anecdote in the beginning, it

885
00:44:37,571 --> 00:44:39,554
might actually be quite useful

886
00:44:39,554 --> 00:44:41,717
to simply know where are my files?

887
00:44:42,638 --> 00:44:46,023
Where are those scripts that I've executed?

888
00:44:46,023 --> 00:44:48,907
How does it link to the data and so on?

889
00:44:49,968 --> 00:44:52,572
And well...

890
00:44:52,572 --> 00:44:54,895
Some of the repositories we

891
00:44:54,895 --> 00:44:58,099
tested, you look at the code repository

892
00:44:58,099 --> 00:45:00,842
and you get this wall of files

893
00:45:00,842 --> 00:45:02,344
that are like script one,

894
00:45:02,344 --> 00:45:04,166
script two, script three, data

895
00:45:04,166 --> 00:45:04,767
one, two, three.

896
00:45:07,370 --> 00:45:08,932
Personally, I think this is

897
00:45:08,932 --> 00:45:11,655
even for the authors themselves.

898
00:45:13,518 --> 00:45:15,120
At a point, impossible to

899
00:45:15,120 --> 00:45:17,162
know what is script one, two, three, four.

900
00:45:18,188 --> 00:45:20,210
And this is actually a

901
00:45:20,210 --> 00:45:22,573
really low hanging fruit that

902
00:45:22,573 --> 00:45:24,055
if you just structure your

903
00:45:24,055 --> 00:45:26,177
projects cleverly and you name

904
00:45:26,177 --> 00:45:28,200
things in a reasonable way

905
00:45:28,200 --> 00:45:30,743
that is descriptive, that's

906
00:45:30,743 --> 00:45:33,186
already documentation in itself.

907
00:45:33,987 --> 00:45:35,929
And it kind of really

908
00:45:35,929 --> 00:45:39,413
becomes natural to you after some

909
00:45:39,413 --> 00:45:41,596
time that you structure projects

910
00:45:41,596 --> 00:45:42,677
in a different way.

911
00:45:43,703 --> 00:45:46,007
It becomes normal and then

912
00:45:46,007 --> 00:45:47,990
it's not really that much effort anymore.

913
00:45:48,952 --> 00:45:50,274
And we just want to share

914
00:45:50,274 --> 00:45:53,219
with you some ideas on that topic.

915
00:45:53,219 --> 00:45:55,563
What is a directory structure

916
00:45:55,563 --> 00:45:57,025
that people have really found

917
00:45:57,025 --> 00:46:00,511
to work for that kind of project basis?

918
00:46:00,511 --> 00:46:02,174
So, for example, that you

919
00:46:02,174 --> 00:46:04,078
collect all the project related

920
00:46:04,078 --> 00:46:06,343
files, at least what you have

921
00:46:06,343 --> 00:46:08,006
related to a certain project,

922
00:46:08,006 --> 00:46:09,108
if you're just working in

923
00:46:09,108 --> 00:46:12,114
a multidisciplinary project on, let's say,

924
00:46:12,114 --> 00:46:14,339
computational part, then collect

925
00:46:14,339 --> 00:46:19,040
all the data you have in a single directory.

926
00:46:19,040 --> 00:46:22,286
and put different projects to

927
00:46:22,286 --> 00:46:23,949
live in their own directory.

928
00:46:24,751 --> 00:46:26,995
And then, as I said, try

929
00:46:26,995 --> 00:46:28,838
to use the naming to already

930
00:46:28,838 --> 00:46:30,501
give you a hint, what am

931
00:46:30,501 --> 00:46:32,385
I actually looking at here?

932
00:46:32,385 --> 00:46:33,827
So not script one, two,

933
00:46:33,827 --> 00:46:35,210
three, but actually tell what

934
00:46:35,210 --> 00:46:36,152
the script is doing.

935
00:46:37,554 --> 00:46:39,698
And yeah, this is maybe...

936
00:46:41,517 --> 00:46:45,220
I think we are mostly Linux people,

937
00:46:45,220 --> 00:46:47,182
so we hate spaces in

938
00:46:47,182 --> 00:46:49,724
file names and directory names.

939
00:46:49,724 --> 00:46:50,965
But generally, it's a good

940
00:46:50,965 --> 00:46:55,850
idea to avoid spaces on other systems as well.

941
00:46:55,850 --> 00:46:57,952
Use dashes, use underscore or

942
00:46:57,952 --> 00:46:59,813
camel case if you prefer.

943
00:46:59,813 --> 00:47:01,995
It's just nicer to work with

944
00:47:01,995 --> 00:47:03,557
and there's no ambiguity.

945
00:47:03,557 --> 00:47:05,819
What's like really the full path

946
00:47:05,819 --> 00:47:06,619
and you don't have to

947
00:47:06,619 --> 00:47:08,861
worry about escaping spaces and

948
00:47:08,861 --> 00:47:10,863
other things like that.

949
00:47:10,863 --> 00:47:12,865
And if you need, let's

950
00:47:12,865 --> 00:47:14,847
say you actually work with

951
00:47:16,108 --> 00:47:19,732
some personalized data, sensitive data,

952
00:47:19,732 --> 00:47:21,314
then of course you should

953
00:47:21,314 --> 00:47:23,696
have private directories where

954
00:47:23,696 --> 00:47:25,118
it's really clear that this

955
00:47:25,118 --> 00:47:26,979
is something you don't want to

956
00:47:26,979 --> 00:47:28,961
share with the outside world.

957
00:47:28,961 --> 00:47:31,144
And at least those of you

958
00:47:31,144 --> 00:47:33,626
who have been there in week

959
00:47:33,626 --> 00:47:35,989
one have heard of that git ignore.

960
00:47:35,989 --> 00:47:37,230
So just if you need a

961
00:47:37,230 --> 00:47:40,293
refresher, you can check the lessons there.

962
00:47:40,293 --> 00:47:41,875
during the first week, but

963
00:47:41,875 --> 00:47:44,439
this is basically a file that tells you

964
00:47:44,439 --> 00:47:45,921
when you version control

965
00:47:45,921 --> 00:47:47,904
that whole structure, this is

966
00:47:47,904 --> 00:47:50,387
the stuff you won't get to ignore.

967
00:47:50,387 --> 00:47:53,452
So this is not gonna be put anywhere.

968
00:47:54,613 --> 00:47:57,397
And then have README files.

969
00:47:57,397 --> 00:48:00,361
So have a README for the whole project

970
00:48:00,361 --> 00:48:01,703
that describes what is this

971
00:48:01,703 --> 00:48:04,407
project about, what do I have in here.

972
00:48:04,407 --> 00:48:06,029
And then also have a

973
00:48:06,029 --> 00:48:08,813
readme file, for example, for the data.

974
00:48:08,813 --> 00:48:11,037
There log where did the data come from?

975
00:48:12,238 --> 00:48:14,121
When did you get the data?

976
00:48:14,121 --> 00:48:15,784
Especially when you get data

977
00:48:15,784 --> 00:48:17,546
online, the data might change.

978
00:48:17,546 --> 00:48:20,290
So also put timestamp information there

979
00:48:21,151 --> 00:48:23,014
and pull the data down

980
00:48:23,014 --> 00:48:26,419
into specific subdirectories.

981
00:48:26,419 --> 00:48:27,621
And then you will always

982
00:48:27,621 --> 00:48:30,465
know exactly what version of the data you used.

983
00:48:32,150 --> 00:48:34,052
If you manipulate data

984
00:48:34,052 --> 00:48:36,015
throughout your pipeline, then

985
00:48:36,015 --> 00:48:38,238
create another folder, have a

986
00:48:38,238 --> 00:48:39,900
separate folder for all the

987
00:48:39,900 --> 00:48:41,742
intermediate files that helps you

988
00:48:41,742 --> 00:48:43,144
if something goes wrong or if

989
00:48:43,144 --> 00:48:45,066
you later on need to track

990
00:48:45,066 --> 00:48:47,630
what has maybe changed in

991
00:48:47,630 --> 00:48:49,352
my data processing code, then

992
00:48:49,352 --> 00:48:50,814
you can actually compare the

993
00:48:50,814 --> 00:48:52,676
first intermediate files with the

994
00:48:52,676 --> 00:48:54,538
second ones and get some idea

995
00:48:54,538 --> 00:48:57,462
is this a problem, for instance.

996
00:48:57,462 --> 00:48:59,505
Then have a folder for

997
00:48:59,505 --> 00:49:00,968
your final results where you

998
00:49:00,968 --> 00:49:02,731
put things like your final

999
00:49:02,731 --> 00:49:05,115
data, your tables, your figures.

1000
00:49:05,115 --> 00:49:06,217
Maybe you want to have a

1001
00:49:06,217 --> 00:49:07,819
folder for the manuscript

1002
00:49:07,819 --> 00:49:09,322
describing those results.

1003
00:49:10,864 --> 00:49:11,866
And you want to have a

1004
00:49:11,866 --> 00:49:14,070
documentation of the whole project.

1005
00:49:15,031 --> 00:49:16,674
And inside all of this,

1006
00:49:16,674 --> 00:49:18,357
you have your source folder.

1007
00:49:19,400 --> 00:49:21,382
where all your code lives

1008
00:49:21,382 --> 00:49:24,566
with a license ideally and the requirements

1009
00:49:24,566 --> 00:49:26,469
or dependencies we are going

1010
00:49:26,469 --> 00:49:27,530
to talk a little bit

1011
00:49:27,530 --> 00:49:29,732
more about requirements and

1012
00:49:29,732 --> 00:49:33,457
dependencies today and you can

1013
00:49:33,457 --> 00:49:35,479
learn a bit more about licensing

1014
00:49:36,300 --> 00:49:40,105
I think next week in the social coding session

1015
00:49:40,105 --> 00:49:42,589
But anyway, this just is

1016
00:49:42,589 --> 00:49:44,993
already a project structure that

1017
00:49:44,993 --> 00:49:47,497
is very much self-explanatory and

1018
00:49:47,497 --> 00:49:49,100
that would help you to avoid

1019
00:49:49,100 --> 00:49:50,703
a lot of the problems we

1020
00:49:50,703 --> 00:49:52,426
have mentioned in that scary

1021
00:49:52,426 --> 00:49:54,329
anecdote in the beginning.

1022
00:49:54,329 --> 00:49:56,553
So if you consistently followed

1023
00:49:56,553 --> 00:49:57,634
that kind of project

1024
00:49:57,634 --> 00:50:01,040
structure, you probably won't end

1025
00:50:01,040 --> 00:50:02,523
up in a situation where you

1026
00:50:02,523 --> 00:50:03,705
don't know where is the

1027
00:50:03,705 --> 00:50:06,329
data, what parameters were used or

1028
00:50:06,329 --> 00:50:08,893
Simply, you can't really trace

1029
00:50:08,893 --> 00:50:09,795
how did you get to

1030
00:50:09,795 --> 00:50:11,558
the intermediate files and you have

1031
00:50:11,558 --> 00:50:13,501
a chance to rescue your manuscript.

1032
00:50:15,504 --> 00:50:18,990
And now you can really track

1033
00:50:18,990 --> 00:50:21,494
what is inside your source folder.

1034
00:50:21,494 --> 00:50:23,136
You can, in principle, within

1035
00:50:23,136 --> 00:50:25,801
some limits, also track your data

1036
00:50:25,801 --> 00:50:27,684
if it's not very big.

1037
00:50:27,684 --> 00:50:29,567
If it's sensitive or large,

1038
00:50:29,567 --> 00:50:32,151
then again, untrack it with git ignore.

1039
00:50:33,498 --> 00:50:35,421
keep all the intermediate files

1040
00:50:36,402 --> 00:50:38,386
and consider those git tags

1041
00:50:39,687 --> 00:50:41,570
to mark specific versions.

1042
00:50:41,570 --> 00:50:43,614
So, for example, if you have something

1043
00:50:43,614 --> 00:50:44,895
that is related to your

1044
00:50:44,895 --> 00:50:46,838
thesis, to your manuscript or

1045
00:50:46,838 --> 00:50:49,062
a poster presentation, then you

1046
00:50:49,062 --> 00:50:50,564
can use the git tags so

1047
00:50:50,564 --> 00:50:53,028
you know exactly, OK, this is

1048
00:50:53,028 --> 00:50:56,954
the status when I generated that poster.

1049
00:50:56,954 --> 00:50:58,938
And that can be really helpful.

1050
00:50:58,938 --> 00:51:00,280
And there are even a

1051
00:51:00,280 --> 00:51:04,648
bunch of templates that you are

1052
00:51:04,648 --> 00:51:07,593
welcome to try for R and Python.

1053
00:51:07,593 --> 00:51:08,996
We have some examples and

1054
00:51:08,996 --> 00:51:10,799
some more general guidelines and

1055
00:51:10,799 --> 00:51:12,462
many more in this blog.

1056
00:51:12,462 --> 00:51:15,349
That can help you with some ideas

1057
00:51:15,349 --> 00:51:16,692
how to structure things,

1058
00:51:16,692 --> 00:51:19,078
with what components to put and where.

1059
00:51:20,040 --> 00:51:21,965
These are really great starting points

1060
00:51:21,965 --> 00:51:23,168
if you don't quite know

1061
00:51:23,168 --> 00:51:25,995
how to best organize things.

1062
00:51:25,995 --> 00:51:28,120
One small request though,

1063
00:51:28,120 --> 00:51:30,265
please remember to actually

1064
00:51:30,265 --> 00:51:33,889
populated do not just copy a template

1065
00:51:33,889 --> 00:51:35,811
and then forget to

1066
00:51:35,811 --> 00:51:37,853
write actual documentation about

1067
00:51:37,853 --> 00:51:39,475
your code because we also

1068
00:51:39,475 --> 00:51:41,798
had a repository where I was

1069
00:51:41,798 --> 00:51:42,979
thrilled to see hey this

1070
00:51:42,979 --> 00:51:45,442
has everything documentation all

1071
00:51:45,442 --> 00:51:47,364
the intermediate files that whole

1072
00:51:47,364 --> 00:51:49,186
structure I have shown to you and

1073
00:51:49,186 --> 00:51:50,247
when I looked into the

1074
00:51:50,247 --> 00:51:51,789
data structure there was just

1075
00:51:51,789 --> 00:51:54,412
nothing so the documentation said

1076
00:51:54,412 --> 00:51:56,694
okay enter your documentation here

1077
00:51:56,694 --> 00:51:59,257
so thanks very much

1078
00:51:59,257 --> 00:52:01,101
All of this is nice and

1079
00:52:01,101 --> 00:52:03,145
gives you a guidance what you

1080
00:52:03,145 --> 00:52:05,349
need to fill and where you need to fill it.

1081
00:52:05,349 --> 00:52:07,052
But just please remember that

1082
00:52:07,934 --> 00:52:09,517
it won't autofill.

1083
00:52:09,517 --> 00:52:10,599
We will give you some

1084
00:52:10,599 --> 00:52:12,643
tools throughout the workshop that

1085
00:52:12,643 --> 00:52:15,068
help you to make this easier.

1086
00:52:15,068 --> 00:52:17,791
Still, it requires some input

1087
00:52:17,791 --> 00:52:19,373
from your site to really

1088
00:52:19,373 --> 00:52:21,495
write specific documentation for

1089
00:52:21,495 --> 00:52:25,199
your project and populate

1090
00:52:25,199 --> 00:52:28,383
that with information that you actually need.

1091
00:52:28,383 --> 00:52:29,664
And this is also something

1092
00:52:29,664 --> 00:52:30,866
that should grow kind of

1093
00:52:30,866 --> 00:52:34,109
organically as your project progresses.

1094
00:52:34,109 --> 00:52:35,711
You have to also remember

1095
00:52:35,711 --> 00:52:37,613
to update the documentation.

1096
00:52:37,613 --> 00:52:39,356
It might seem like a lot

1097
00:52:39,356 --> 00:52:42,180
of hassle at times, but I

1098
00:52:42,180 --> 00:52:44,103
think it's an important step

1099
00:52:44,103 --> 00:52:46,407
to avoid such things like

1100
00:52:46,407 --> 00:52:48,009
you basically can't publish

1101
00:52:48,009 --> 00:52:49,972
a manuscript because you have

1102
00:52:49,972 --> 00:52:51,114
lost track of what you

1103
00:52:51,114 --> 00:52:53,337
were doing somewhere along the way.

1104
00:52:53,337 --> 00:52:54,559
And the more often and

1105
00:52:54,559 --> 00:52:56,102
consistently you are doing this,

1106
00:52:56,102 --> 00:52:57,844
the more natural it becomes.

1107
00:52:57,844 --> 00:52:59,387
And it's not really a hustle

1108
00:52:59,387 --> 00:53:00,689
when you do it the fifth

1109
00:53:00,689 --> 00:53:02,692
or sixth or seventh time.

1110
00:53:02,692 --> 00:53:04,715
At some point, it's just natural.

1111
00:53:04,715 --> 00:53:08,361
So hopefully, hopefully we will

1112
00:53:08,361 --> 00:53:09,984
give you all the tools to

1113
00:53:09,984 --> 00:53:11,807
just get you started along that line.

1114
00:53:12,829 --> 00:53:14,251
I think the bottom line of all

1115
00:53:14,251 --> 00:53:16,355
of this is a good structure

1116
00:53:16,355 --> 00:53:18,899
can be a very important

1117
00:53:18,899 --> 00:53:21,964
part of documentation, documentation in

1118
00:53:21,964 --> 00:53:22,885
its own right.

1119
00:53:22,885 --> 00:53:25,730
And it's a fairly easy thing to do

1120
00:53:25,730 --> 00:53:28,034
and usually quite applicable to

1121
00:53:28,034 --> 00:53:29,757
any number of projects.

1122
00:53:29,757 --> 00:53:32,269
So if you don't know where else to start,

1123
00:53:32,269 --> 00:53:34,660
this is maybe where we

1124
00:53:34,660 --> 00:53:36,468
would recommend you just get

1125
00:53:36,468 --> 00:53:38,518
going because this is going to really.

1126
00:53:39,697 --> 00:53:42,901
have a huge contribution to reproducibility.

1127
00:53:44,142 --> 00:53:46,785
And especially then if you're

1128
00:53:46,785 --> 00:53:48,968
in a larger collaborative project,

1129
00:53:50,069 --> 00:53:52,272
you know where to find things

1130
00:53:52,272 --> 00:53:54,214
if you get reviewer comments and

1131
00:53:54,214 --> 00:53:58,279
you can also help others to

1132
00:53:58,279 --> 00:54:01,823
find things in your own structure more easily.

1133
00:54:01,823 --> 00:54:03,145
And yeah, speaking of

1134
00:54:03,145 --> 00:54:06,449
collaboration, I think now let's

1135
00:54:06,449 --> 00:54:08,151
take a quick excursion

1136
00:54:09,194 --> 00:54:11,037
to talk about collaborative

1137
00:54:11,037 --> 00:54:13,101
writing of academic papers.

1138
00:54:13,101 --> 00:54:14,303
So now we have covered a

1139
00:54:14,303 --> 00:54:15,946
bit of the bottom of this

1140
00:54:15,946 --> 00:54:19,833
pyramid and we have talked a lot about versions,

1141
00:54:19,833 --> 00:54:21,736
directory structure, how this is

1142
00:54:21,736 --> 00:54:24,100
a bit of documentation, where

1143
00:54:24,100 --> 00:54:26,044
to put data, where to put code.

1144
00:54:26,044 --> 00:54:27,506
And then we have this final

1145
00:54:27,506 --> 00:54:30,271
top of the pyramid, the article.

1146
00:54:30,271 --> 00:54:33,097
So what are your experiences?

1147
00:54:33,097 --> 00:54:34,559
How do you collaborate on

1148
00:54:34,559 --> 00:54:36,463
writing academic papers?

1149
00:54:36,463 --> 00:54:38,046
How do you handle issues

1150
00:54:38,046 --> 00:54:39,489
like conflicting changes?

1151
00:54:41,172 --> 00:54:43,597
Maybe, [name], can you share

1152
00:54:43,597 --> 00:54:46,964
some of the stories and

1153
00:54:46,964 --> 00:54:50,811
experiences in writing papers with us?

1154
00:54:51,922 --> 00:54:53,805
So also from the notes

1155
00:54:53,805 --> 00:54:59,192
here, I've personally done two

1156
00:54:59,192 --> 00:55:01,515
of the three approaches that

1157
00:55:01,515 --> 00:55:04,900
I, or four approaches, three

1158
00:55:04,900 --> 00:55:07,904
that are mentioned in the notes now.

1159
00:55:07,904 --> 00:55:09,707
I have done the drafting

1160
00:55:09,707 --> 00:55:11,229
things on Google Docs and

1161
00:55:12,731 --> 00:55:14,714
doing a final submission, then

1162
00:55:14,714 --> 00:55:15,775
putting it into LaTeX.

1163
00:55:15,775 --> 00:55:18,619
So taking the templates that

1164
00:55:19,461 --> 00:55:21,183
the journalist offering

1165
00:55:21,183 --> 00:55:24,809
because if you need to write

1166
00:55:24,809 --> 00:55:27,794
this to some other journal you

1167
00:55:27,794 --> 00:55:29,617
will have to fill it into

1168
00:55:29,617 --> 00:55:32,541
their template again anyway so

1169
00:55:32,541 --> 00:55:35,105
having draft where you just have text

1170
00:55:35,105 --> 00:55:36,387
that you can just put

1171
00:55:36,387 --> 00:55:39,092
into certain places and no

1172
00:55:39,092 --> 00:55:40,754
notes like figure here figure

1173
00:55:40,754 --> 00:55:43,519
here makes it easier to do

1174
00:55:43,519 --> 00:55:46,664
these kind of adaptions

1175
00:55:46,664 --> 00:55:49,749
I've also done the Overleaf approach

1176
00:55:49,749 --> 00:55:51,151
where multiple people were working on it,

1177
00:55:51,151 --> 00:55:54,035
but that was mainly working

1178
00:55:54,035 --> 00:55:55,818
because it was primarily

1179
00:55:55,818 --> 00:55:57,500
computer scientists that were

1180
00:55:57,500 --> 00:55:58,963
accustomed to LaTeX.

1181
00:56:00,385 --> 00:56:02,508
So everyone was on the LaTeX thing.

1182
00:56:02,508 --> 00:56:04,811
And I have had the

1183
00:56:04,811 --> 00:56:06,934
unfortunate pleasure to have

1184
00:56:06,934 --> 00:56:09,498
Word documents sent around and edited

1185
00:56:09,498 --> 00:56:12,062
and version X, final version

1186
00:56:12,062 --> 00:56:15,908
one, final version 17, final version 17 v2.

1187
00:56:15,908 --> 00:56:20,375
final version 17 your

1188
00:56:21,637 --> 00:56:23,781
initials their initials whatever

1189
00:56:23,781 --> 00:56:28,889
so yeah I can share a fun story on

1190
00:56:28,889 --> 00:56:31,774
that too so word documents

1191
00:56:31,774 --> 00:56:34,278
sent around via email I was

1192
00:56:34,278 --> 00:56:38,605
not carbon copied on several of those emails

1193
00:56:38,605 --> 00:56:39,787
Then I was asked to

1194
00:56:39,787 --> 00:56:41,790
revise the manuscript and I did.

1195
00:56:41,790 --> 00:56:43,232
Then I got a very angry

1196
00:56:43,232 --> 00:56:45,175
email by the first author saying,

1197
00:56:45,175 --> 00:56:47,098
hey, but you used the wrong version.

1198
00:56:47,098 --> 00:56:48,400
And I was like, I used

1199
00:56:48,400 --> 00:56:49,963
the latest version I had.

1200
00:56:51,165 --> 00:56:52,146
And then it turned out

1201
00:56:52,146 --> 00:56:54,270
that they actually sent another

1202
00:56:54,270 --> 00:56:56,653
two versions around that I never got.

1203
00:56:56,653 --> 00:56:57,775
So...

1204
00:56:57,775 --> 00:57:00,419
This is just unpleasant and

1205
00:57:00,419 --> 00:57:03,304
I think one important motivation

1206
00:57:03,304 --> 00:57:04,666
because this kind of goes

1207
00:57:04,666 --> 00:57:08,853
into version control and why also

1208
00:57:08,853 --> 00:57:10,796
we suggest to think about

1209
00:57:10,796 --> 00:57:13,000
version control maybe for manuscripts

1210
00:57:13,000 --> 00:57:14,001
and to try to have

1211
00:57:14,001 --> 00:57:16,145
it somewhere there everybody can

1212
00:57:16,145 --> 00:57:18,869
see what is really the latest version.

1213
00:57:18,869 --> 00:57:21,934
to avoid those kind of problems.

1214
00:57:22,756 --> 00:57:26,142
But also, this has also been, I think,

1215
00:57:26,142 --> 00:57:28,646
published in Nature a while back

1216
00:57:28,646 --> 00:57:30,930
that somebody wrote that they

1217
00:57:30,930 --> 00:57:35,238
used version control and basically Git

1218
00:57:35,238 --> 00:57:37,802
mainly to show that their

1219
00:57:37,802 --> 00:57:40,186
manuscript was not written by AI.

1220
00:57:40,186 --> 00:57:41,928
And this is now something

1221
00:57:41,928 --> 00:57:43,751
that I think becomes more

1222
00:57:43,751 --> 00:57:47,197
timely and relevant every day, that

1223
00:57:47,197 --> 00:57:49,740
it's not a bad idea if you

1224
00:57:49,740 --> 00:57:51,663
can kind of show how your

1225
00:57:51,663 --> 00:57:55,910
manuscript, how your text evolved over time.

1226
00:57:55,910 --> 00:57:58,994
So you avoid that reviewer say, hey,

1227
00:57:58,994 --> 00:58:01,337
obviously this just came at the

1228
00:58:01,337 --> 00:58:03,700
click of a button from chat GPT.

1229
00:58:05,162 --> 00:58:08,246
So another thing simply to

1230
00:58:08,246 --> 00:58:10,028
keep in mind that having

1231
00:58:10,028 --> 00:58:12,071
version control, having a protocol

1232
00:58:12,071 --> 00:58:13,633
that really shows when and

1233
00:58:13,633 --> 00:58:15,996
how things changed can also help

1234
00:58:15,996 --> 00:58:17,658
you to fend off such

1235
00:58:17,658 --> 00:58:20,935
nasty reviewer comments and suspicions a bit.

1236
00:58:20,935 --> 00:58:22,277
I think what I would

1237
00:58:22,277 --> 00:58:26,124
in general recommend from

1238
00:58:26,124 --> 00:58:28,268
personal experience is we have

1239
00:58:28,268 --> 00:58:29,511
nowadays the option to

1240
00:58:29,511 --> 00:58:31,374
have collaborative documents where

1241
00:58:31,374 --> 00:58:33,859
multiple people can edit and comment on.

1242
00:58:33,859 --> 00:58:36,303
And I think one should make

1243
00:58:36,303 --> 00:58:37,746
use of these tools.

1244
00:58:37,746 --> 00:58:39,589
The times of sending around

1245
00:58:39,589 --> 00:58:43,396
version drafts should be over.

1246
00:58:43,396 --> 00:58:46,119
in my opinion because that's

1247
00:58:46,119 --> 00:58:48,502
to me the worst possible option

1248
00:58:48,502 --> 00:58:49,764
because you end up exactly

1249
00:58:49,764 --> 00:58:51,205
what you said someone gets

1250
00:58:51,205 --> 00:58:54,149
dropped from an email chain works

1251
00:58:54,149 --> 00:58:55,350
on an old version where all

1252
00:58:55,350 --> 00:58:57,233
the typos have already been fixed

1253
00:58:57,233 --> 00:59:00,216
and the next one yeah

1254
00:59:00,216 --> 00:59:01,938
sends their comments and then

1255
00:59:01,938 --> 00:59:03,981
someone has to try to compile

1256
00:59:03,981 --> 00:59:07,325
the things and it's just a complete mess

1257
00:59:07,325 --> 00:59:12,641
So this is kind of, yeah, don't do this.

1258
00:59:12,641 --> 00:59:13,464
Do something else.

1259
00:59:14,527 --> 00:59:16,272
Do some collaborative document.

1260
00:59:17,281 --> 00:59:23,370
Personally, I'm not that big of

1261
00:59:23,370 --> 00:59:25,293
a fan of using Git for

1262
00:59:25,293 --> 00:59:30,320
version controlling a paper, at

1263
00:59:30,320 --> 00:59:32,363
least not for version controlling

1264
00:59:32,363 --> 00:59:35,027
the actual process of writing.

1265
00:59:35,027 --> 00:59:37,310
Maybe for some revisions, but

1266
00:59:37,310 --> 00:59:39,353
for the writing process,

1267
00:59:39,353 --> 00:59:41,376
I'm not that big of a

1268
00:59:41,376 --> 00:59:43,279
fan because you end up with

1269
00:59:43,279 --> 00:59:45,943
exactly the second question that we have here,

1270
00:59:45,943 --> 00:59:47,405
where you have multiple people

1271
00:59:47,405 --> 00:59:50,691
working on the document and submitting

1272
00:59:50,691 --> 00:59:52,113
and then you get merge

1273
00:59:52,113 --> 00:59:54,416
conflicts or, well, if you're

1274
00:59:54,416 --> 00:59:55,919
unlucky, you get merge conflicts.

1275
00:59:55,919 --> 00:59:57,261
If you're lucky, you don't

1276
00:59:57,261 --> 00:59:59,104
get merge conflicts, but you

1277
00:59:59,104 --> 01:00:00,025
might end up with...

1278
01:00:00,025 --> 01:00:01,767
two people writing the same

1279
01:00:01,767 --> 01:00:04,550
kind of comment that needs to

1280
01:00:04,550 --> 01:00:06,612
be added to some paragraph and

1281
01:00:06,612 --> 01:00:08,655
they write it at slightly different places

1282
01:00:08,655 --> 01:00:10,296
and then you have it in twice

1283
01:00:10,296 --> 01:00:12,659
because yeah it merges nicely

1284
01:00:12,659 --> 01:00:16,363
it doesn't complain with a rebase

1285
01:00:16,363 --> 01:00:18,485
or something and then you

1286
01:00:18,485 --> 01:00:20,327
notice it somewhere sometime later

1287
01:00:20,327 --> 01:00:22,350
or you unfortunately don't notice

1288
01:00:22,350 --> 01:00:24,031
it at all and submit something

1289
01:00:24,031 --> 01:00:25,693
that feels like why is

1290
01:00:25,693 --> 01:00:27,816
this mentioned twice that review

1291
01:00:27,816 --> 01:00:29,978
is getting annoyed so

1292
01:00:29,978 --> 01:00:34,946
That's where I personally would prefer

1293
01:00:34,946 --> 01:00:37,090
or would recommend using

1294
01:00:37,090 --> 01:00:42,299
a collaborative editor nowadays.

1295
01:00:44,102 --> 01:00:45,824
Because they are available and

1296
01:00:45,824 --> 01:00:46,806
make use of the tech.

1297
01:00:48,035 --> 01:00:50,221
Yeah and I think I mean

1298
01:00:50,221 --> 01:00:52,087
word is still at least

1299
01:00:52,087 --> 01:00:56,680
in our field unfortunately very very common

1300
01:00:56,680 --> 01:00:58,325
and people have a certain

1301
01:00:58,325 --> 01:01:00,631
resilience to changing but I have

1302
01:01:00,631 --> 01:01:03,239
to say that I've been with LaTeX for

1303
01:01:03,239 --> 01:01:06,145
quite some time also Overleaf a

1304
01:01:06,145 --> 01:01:08,349
while back did not have

1305
01:01:08,349 --> 01:01:10,994
the functionalities that you would

1306
01:01:10,994 --> 01:01:12,297
find in Word but now it

1307
01:01:12,297 --> 01:01:14,641
does so the argument that for

1308
01:01:14,641 --> 01:01:17,527
example you can't use LaTeX with people

1309
01:01:17,527 --> 01:01:18,910
who don't know how to write

1310
01:01:18,910 --> 01:01:21,234
LaTeX I have had a couple

1311
01:01:21,234 --> 01:01:22,557
of people who really have

1312
01:01:22,557 --> 01:01:24,461
never used LaTeX before working

1313
01:01:24,461 --> 01:01:25,683
fine with Overleaf

1314
01:01:25,683 --> 01:01:27,586
you can write comments, you

1315
01:01:27,586 --> 01:01:28,728
have track changes.

1316
01:01:28,728 --> 01:01:30,831
So all of these things, I

1317
01:01:30,831 --> 01:01:34,056
think also in TypeST, if

1318
01:01:34,056 --> 01:01:38,543
you prefer Markdown, these tools are there.

1319
01:01:38,543 --> 01:01:40,587
So the argument that people

1320
01:01:40,587 --> 01:01:44,052
love to give for having to use Word,

1321
01:01:44,052 --> 01:01:46,136
that you can't comment on the files

1322
01:01:46,136 --> 01:01:47,197
or you don't see track

1323
01:01:47,197 --> 01:01:49,561
changes, that just doesn't apply anymore.

1324
01:01:49,561 --> 01:01:50,202
And yeah.

1325
01:01:50,202 --> 01:01:51,944
Then all of these tools

1326
01:01:51,944 --> 01:01:54,248
also provide Git integrations that

1327
01:01:55,069 --> 01:01:57,272
help at least with some of these things.

1328
01:01:57,272 --> 01:01:59,415
So you work together on one document,

1329
01:01:59,415 --> 01:02:02,099
but then you commit versions

1330
01:02:02,099 --> 01:02:03,821
on a regular basis that just

1331
01:02:03,821 --> 01:02:04,963
shows the track record.

1332
01:02:07,607 --> 01:02:10,030
And even if you have to work with Word,

1333
01:02:10,030 --> 01:02:11,011
you can use something like

1334
01:02:11,011 --> 01:02:14,176
SharePoint or some other central source.

1335
01:02:15,478 --> 01:02:17,140
Just avoid having to

1336
01:02:17,140 --> 01:02:18,522
send around manuscripts.

1337
01:02:21,961 --> 01:02:26,066
And yes, I think with that,

1338
01:02:27,648 --> 01:02:29,010
maybe one other thing.

1339
01:02:29,010 --> 01:02:31,994
As a little teaser, there's going

1340
01:02:31,994 --> 01:02:33,496
to be a whole session

1341
01:02:33,496 --> 01:02:35,599
dedicated to Jupyter Notebooks that

1342
01:02:35,599 --> 01:02:37,741
tells you a lot more about that.

1343
01:02:37,741 --> 01:02:39,163
But if you really want

1344
01:02:39,163 --> 01:02:40,825
to have essentially an

1345
01:02:40,825 --> 01:02:43,268
executable manuscript where you

1346
01:02:43,268 --> 01:02:45,491
write things in Markdown and

1347
01:02:45,491 --> 01:02:46,853
then you have code blocks

1348
01:02:46,853 --> 01:02:48,836
embedded into the manuscript, there

1349
01:02:48,836 --> 01:02:49,957
are now also

1350
01:02:49,957 --> 01:02:52,320
tools available where you can

1351
01:02:52,320 --> 01:02:55,044
basically run those online

1352
01:02:55,044 --> 01:02:56,646
directly without actually having

1353
01:02:56,646 --> 01:02:58,669
to install anything.

1354
01:02:58,669 --> 01:03:00,251
So reviewers can really go

1355
01:03:00,251 --> 01:03:02,655
read the manuscript and execute

1356
01:03:02,655 --> 01:03:03,856
the code as they go.

1357
01:03:03,856 --> 01:03:06,920
So there's a lot of things happening

1358
01:03:06,920 --> 01:03:08,763
that are interesting in this

1359
01:03:08,763 --> 01:03:11,126
context of making things

1360
01:03:11,126 --> 01:03:14,411
reproducible, making collaboration easier

1361
01:03:14,411 --> 01:03:15,252
that I think

1362
01:03:15,252 --> 01:03:17,575
are worth being aware of and

1363
01:03:17,575 --> 01:03:19,558
trying out if you haven't.

1364
01:03:19,558 --> 01:03:21,602
There's also some additional

1365
01:03:21,602 --> 01:03:25,227
reading material if you're interested.

1366
01:03:26,309 --> 01:03:28,592
But yeah, I think with

1367
01:03:28,592 --> 01:03:30,355
that, we're about done with that

1368
01:03:30,355 --> 01:03:33,680
first part of our workshop for today.

1369
01:03:33,680 --> 01:03:35,903
And I think the key take

1370
01:03:35,903 --> 01:03:38,267
home message at this point is that

1371
01:03:38,267 --> 01:03:39,829
if you have an organized

1372
01:03:39,829 --> 01:03:41,932
project directory structure,

1373
01:03:41,932 --> 01:03:43,894
That's already a huge

1374
01:03:43,894 --> 01:03:45,717
step towards reproducibility.

1375
01:03:45,717 --> 01:03:47,139
And although it might seem

1376
01:03:47,139 --> 01:03:52,566
obvious, I think also a nod to myself

1377
01:03:52,566 --> 01:03:54,408
that I'm sometimes sloppy in

1378
01:03:54,408 --> 01:03:56,470
how I organize my projects and

1379
01:03:56,470 --> 01:03:57,812
it tends to backfire.

1380
01:03:57,812 --> 01:04:00,215
So this is the first step

1381
01:04:00,215 --> 01:04:01,577
to work on that doesn't

1382
01:04:01,577 --> 01:04:03,560
really require any tools.

1383
01:04:03,560 --> 01:04:05,001
Requires a bit of effort,

1384
01:04:05,001 --> 01:04:07,885
but it becomes quite natural quite fast.

1385
01:04:07,885 --> 01:04:09,948
And really helps a ton.

1386
01:04:09,948 --> 01:04:11,551
And yeah, also think about

1387
01:04:11,551 --> 01:04:13,253
version control for the future

1388
01:04:13,253 --> 01:04:16,839
when writing your manuscripts.

1389
01:04:16,839 --> 01:04:19,202
And now, [name], I don't know.

1390
01:04:19,202 --> 01:04:21,566
Shall we do a short break now?

1391
01:04:21,566 --> 01:04:24,050
Or do you want to actually...

1392
01:04:24,050 --> 01:04:25,332
I would say let's do a short

1393
01:04:25,332 --> 01:04:27,916
break now for 10 minutes.

1394
01:04:27,916 --> 01:04:32,703
And then... [name], was the

1395
01:04:32,703 --> 01:04:35,668
timing that we go for lunch soonish?

1396
01:04:35,668 --> 01:04:35,968
Or...

1397
01:04:37,518 --> 01:04:38,419
We can have a break now.

1398
01:04:39,500 --> 01:04:41,362
Okay, then let's do a 10-minute break now.

1399
01:04:45,145 --> 01:04:48,308
Alright, so... Meet back at 5 to the hour.

1400
01:04:48,308 --> 01:04:50,511
10-minute break.

1401
01:04:52,092 --> 01:04:54,334
See you in 10 minutes, and

1402
01:04:54,334 --> 01:04:55,475
then we will hear some

1403
01:04:55,475 --> 01:05:00,701
more about directory structures,

1404
01:05:00,701 --> 01:05:03,183
computational steps, dependencies, and

1405
01:05:03,183 --> 01:05:04,284
lots of other fun things.

1406
01:05:06,726 --> 01:05:07,407
Bye!

1407
01:14:39,415 --> 01:14:42,218
and welcome back so we have

1408
01:14:42,218 --> 01:14:44,260
talked a bit about the upper

1409
01:14:44,260 --> 01:14:45,481
parts of the pyramid that

1410
01:14:45,481 --> 01:14:47,223
we've shown earlier and now we

1411
01:14:47,223 --> 01:14:48,804
have started to get further

1412
01:14:48,804 --> 01:14:53,128
down this pyramid after having

1413
01:14:53,128 --> 01:14:54,750
talked a bit about the structure now

1414
01:14:54,750 --> 01:14:57,373
if you have a project

1415
01:14:57,373 --> 01:15:00,736
that you have something that you

1416
01:15:00,736 --> 01:15:06,061
need to need to do like having a workflow

1417
01:15:06,061 --> 01:15:07,904
This is something that also

1418
01:15:07,904 --> 01:15:09,688
needs to be reported and

1419
01:15:09,688 --> 01:15:11,230
very often this reported in scripts,

1420
01:15:12,052 --> 01:15:13,675
but it can also be reported

1421
01:15:13,675 --> 01:15:17,181
in other ways and depending on

1422
01:15:17,181 --> 01:15:20,507
what you have it's like or

1423
01:15:20,507 --> 01:15:23,172
more easily or more difficult to reproduce.

1424
01:15:26,097 --> 01:15:26,398
So.

1425
01:15:27,914 --> 01:15:29,477
There are commonly a couple

1426
01:15:29,477 --> 01:15:32,483
of steps from input data that

1427
01:15:32,483 --> 01:15:34,266
you have from experiments or

1428
01:15:34,266 --> 01:15:36,671
from other sources to the results

1429
01:15:36,671 --> 01:15:38,956
that you want to present for a paper.

1430
01:15:39,938 --> 01:15:43,745
And we are using an example

1431
01:15:43,745 --> 01:15:46,831
project that is essentially just word counting.

1432
01:15:46,831 --> 01:15:49,356
And even in this very simple thing

1433
01:15:49,356 --> 01:15:50,858
where we want to count

1434
01:15:50,858 --> 01:15:52,982
words and create some statistics

1435
01:15:52,982 --> 01:15:57,050
for the amount of words that

1436
01:15:57,050 --> 01:16:02,019
are occurring in some books, it

1437
01:16:02,019 --> 01:16:02,860
has a couple of steps.

1438
01:16:02,860 --> 01:16:04,283
So we first have to

1439
01:16:04,283 --> 01:16:07,228
analyze the frequencies of the words.

1440
01:16:07,228 --> 01:16:09,953
That's done in a counterpy file.

1441
01:16:11,165 --> 01:16:12,807
for all the books that

1442
01:16:12,807 --> 01:16:13,889
we currently have, which is

1443
01:16:15,211 --> 01:16:17,554
in this data directory.

1444
01:16:17,554 --> 01:16:20,799
So data directory currently

1445
01:16:20,799 --> 01:16:22,882
contains these four books and

1446
01:16:22,882 --> 01:16:25,065
the books essentially just contain

1447
01:16:25,065 --> 01:16:27,248
the plain text of these books

1448
01:16:27,248 --> 01:16:30,453
that we are investigating here.

1449
01:16:30,453 --> 01:16:33,339
And the counterpy file simply says

1450
01:16:33,339 --> 01:16:37,367
that we are checking how

1451
01:16:37,367 --> 01:16:44,040
often does a certain word occur in this book.

1452
01:16:45,843 --> 01:16:47,746
And then we want to plot them

1453
01:16:47,746 --> 01:16:50,371
and generate these nice plots

1454
01:16:50,371 --> 01:16:51,714
so that we can put into our paper.

1455
01:16:52,635 --> 01:16:54,859
And for a single book,

1456
01:16:54,859 --> 01:16:56,763
this is essentially what we would be doing.

1457
01:16:56,763 --> 01:17:00,249
So I have this in here.

1458
01:17:00,249 --> 01:17:04,356
I'm creating this counter pi,

1459
01:17:04,356 --> 01:17:06,520
and then I have a aisles.data

1460
01:17:06,520 --> 01:17:08,644
that I can have a look at.

1461
01:17:11,645 --> 01:17:12,766
How does this look like?

1462
01:17:12,766 --> 01:17:15,109
So yeah, this is the off and O

1463
01:17:15,109 --> 01:17:16,711
and two, and then I

1464
01:17:16,711 --> 01:17:23,558
can plot this relatively easily and

1465
01:17:23,558 --> 01:17:30,506
can get a file that is

1466
01:17:30,506 --> 01:17:32,328
essentially showing this plot.

1467
01:17:35,972 --> 01:17:36,893
Let's see.

1468
01:17:43,420 --> 01:17:45,323
My machine being slow.

1469
01:17:45,323 --> 01:17:47,687
But yeah, I get this file.

1470
01:17:47,687 --> 01:17:50,973
And this is all nice and well,

1471
01:17:50,973 --> 01:17:52,636
but now if we imagine that

1472
01:17:53,558 --> 01:17:54,980
we have to repeat this

1473
01:17:54,980 --> 01:17:56,282
multiple times, that would

1474
01:17:56,282 --> 01:18:01,291
essentially happen in our run all, which is...

1475
01:18:01,291 --> 01:18:06,096
a script that essentially just

1476
01:18:06,096 --> 01:18:07,878
says okay for the first file

1477
01:18:07,878 --> 01:18:09,800
for the first file for the second file

1478
01:18:09,800 --> 01:18:12,543
for the third file for the fourth file

1479
01:18:13,364 --> 01:18:15,226
and yeah this is this works

1480
01:18:15,226 --> 01:18:16,448
for the four books that we have

1481
01:18:16,448 --> 01:18:18,050
but if we want to have 500

1482
01:18:18,050 --> 01:18:20,813
books now this script

1483
01:18:20,813 --> 01:18:24,022
becomes essentially unmaintainable

1484
01:18:24,022 --> 01:18:25,104
because there are so many

1485
01:18:25,104 --> 01:18:27,931
different files now and there is

1486
01:18:27,931 --> 01:18:31,118
so likely to be some kind of typo or whatever.

1487
01:18:31,118 --> 01:18:32,200
We can of course create

1488
01:18:32,200 --> 01:18:36,389
this file automatically and stuff,

1489
01:18:36,389 --> 01:18:41,639
but it's just getting more and more crowded.

1490
01:18:41,639 --> 01:18:44,544
I think maybe one thing is

1491
01:18:44,544 --> 01:18:46,248
that quite many people would

1492
01:18:46,248 --> 01:18:48,071
actually execute those steps

1493
01:18:48,071 --> 01:18:49,634
manually, then it's very easy

1494
01:18:49,634 --> 01:18:50,796
to forget something.

1495
01:18:50,796 --> 01:18:53,821
So already the script is one

1496
01:18:53,821 --> 01:18:56,066
step towards a certain degree

1497
01:18:56,066 --> 01:18:58,430
of reproducibility that I think

1498
01:18:58,430 --> 01:19:00,553
It's important to recognize here

1499
01:19:00,553 --> 01:19:02,696
that having a script that makes sure

1500
01:19:02,696 --> 01:19:05,420
that it's actually executed in

1501
01:19:05,420 --> 01:19:08,024
order for everything is not a

1502
01:19:08,024 --> 01:19:09,046
bad thing per se.

1503
01:19:09,046 --> 01:19:11,369
That's already a good starting point.

1504
01:19:11,369 --> 01:19:13,152
So better than doing it by hand

1505
01:19:13,152 --> 01:19:14,194
and forgetting half of

1506
01:19:14,194 --> 01:19:17,178
the books, especially if you get 500.

1507
01:19:17,178 --> 01:19:19,062
Yeah, that definitely.

1508
01:19:19,062 --> 01:19:21,206
But it just, even if you

1509
01:19:21,206 --> 01:19:23,951
do it in the script, it becomes unmaintainable.

1510
01:19:23,951 --> 01:19:25,855
So this is something that you can do

1511
01:19:25,855 --> 01:19:28,040
for a few things and for

1512
01:19:28,040 --> 01:19:30,805
a quite simplistic workflow where

1513
01:19:30,805 --> 01:19:33,571
you have some fixed input data

1514
01:19:33,571 --> 01:19:36,116
and some fixed output data, that's okay.

1515
01:19:36,116 --> 01:19:37,799
That's perfectly fine.

1516
01:19:37,799 --> 01:19:40,242
But as soon as you start to, for example,

1517
01:19:40,242 --> 01:19:41,904
collect more and more data over time

1518
01:19:41,904 --> 01:19:43,225
and you need to run this again

1519
01:19:43,225 --> 01:19:45,748
and again and again for new things

1520
01:19:45,748 --> 01:19:47,450
that are coming in, you

1521
01:19:47,450 --> 01:19:48,751
commonly don't want to run

1522
01:19:48,751 --> 01:19:50,954
everything again because, yeah, in

1523
01:19:50,954 --> 01:19:52,956
this case, the computation takes

1524
01:19:52,956 --> 01:19:54,297
a second or something.

1525
01:19:54,297 --> 01:19:55,859
But let's assume that each

1526
01:19:57,261 --> 01:20:00,104
calculation here or each individual

1527
01:20:00,104 --> 01:20:03,888
data entry takes an hour or two.

1528
01:20:03,888 --> 01:20:05,571
you don't want to rerun this

1529
01:20:05,571 --> 01:20:07,815
all the time if nothing has changed

1530
01:20:08,997 --> 01:20:12,082
and one more thing to mention here is

1531
01:20:12,082 --> 01:20:14,185
that this kind of stating

1532
01:20:14,185 --> 01:20:16,649
every individual element is

1533
01:20:16,649 --> 01:20:18,392
also called imperative style where

1534
01:20:18,392 --> 01:20:21,577
you tell a script every single

1535
01:20:21,577 --> 01:20:26,706
thing that it has to do one after another and

1536
01:20:27,648 --> 01:20:29,612
Well, there are some advantages

1537
01:20:29,612 --> 01:20:31,355
to this solution compared to

1538
01:20:31,355 --> 01:20:34,841
processing all one by one.

1539
01:20:34,841 --> 01:20:40,913
And yeah, as Ninash already

1540
01:20:40,913 --> 01:20:44,945
mentioned, this run all is

1541
01:20:44,945 --> 01:20:46,930
better reproducible, because you're

1542
01:20:46,930 --> 01:20:48,654
not forgetting one or the other.

1543
01:20:48,654 --> 01:20:51,881
So having this in a script,

1544
01:20:51,881 --> 01:20:54,287
yeah, is the first step.

1545
01:20:54,287 --> 01:20:56,573
But as I said, if we have more

1546
01:20:56,573 --> 01:20:57,956
and more things coming in,

1547
01:20:57,956 --> 01:21:01,384
then there start to be more and more problems.

1548
01:21:02,832 --> 01:21:05,501
And that's where workflow tools come in.

1549
01:21:05,501 --> 01:21:07,507
So workflow tools are

1550
01:21:07,507 --> 01:21:09,132
essentially tools that help you

1551
01:21:09,132 --> 01:21:12,202
to organize workflows that you have

1552
01:21:12,202 --> 01:21:14,389
to do in a repetitive fashion

1553
01:21:14,389 --> 01:21:17,007
or that are more complex.

1554
01:21:17,007 --> 01:21:20,052
And we will focus here on SnakeMake,

1555
01:21:20,052 --> 01:21:21,074
but there are multiple

1556
01:21:21,074 --> 01:21:22,416
different other tools that are

1557
01:21:22,416 --> 01:21:23,458
also mentioned later on.

1558
01:21:24,700 --> 01:21:27,345
And SnakeMake, in contrast

1559
01:21:29,689 --> 01:21:33,195
to this imperative style,

1560
01:21:33,195 --> 01:21:36,220
uses something that's called

1561
01:21:36,220 --> 01:21:38,624
a declarative style, sorry.

1562
01:21:38,624 --> 01:21:41,027
And this will also be

1563
01:21:41,027 --> 01:21:42,850
the exercise, will also be used

1564
01:21:42,850 --> 01:21:46,114
in the exercise that you're going

1565
01:21:46,114 --> 01:21:47,256
to be doing soonish.

1566
01:21:47,256 --> 01:21:50,020
But I quickly go over how

1567
01:21:50,020 --> 01:21:54,446
this snake make or how snake make works.

1568
01:21:54,446 --> 01:21:57,951
So in snake make, you

1569
01:21:57,951 --> 01:22:01,575
define rules and snake make

1570
01:22:01,575 --> 01:22:04,159
tries to satisfy all rules.

1571
01:22:05,489 --> 01:22:07,114
And that means that a rule

1572
01:22:07,114 --> 01:22:10,543
or to satisfy a rule, all the

1573
01:22:10,543 --> 01:22:12,429
inputs of the rule have to

1574
01:22:12,429 --> 01:22:14,254
be created or satisfied.

1575
01:22:15,698 --> 01:22:20,339
And in our bookcase, the rule

1576
01:22:20,339 --> 01:22:23,303
the one rule to rule them all,

1577
01:22:24,285 --> 01:22:25,867
that is essentially indicating, okay,

1578
01:22:25,867 --> 01:22:28,310
this is the final rule, the final rule,

1579
01:22:28,310 --> 01:22:32,116
or this is the target requires

1580
01:22:32,116 --> 01:22:33,618
as inputs, you could also

1581
01:22:33,618 --> 01:22:36,642
call inputs requirements for

1582
01:22:36,642 --> 01:22:40,348
this, that everything in statistics

1583
01:22:41,169 --> 01:22:44,774
book data exists and

1584
01:22:44,774 --> 01:22:47,038
the book here will be

1585
01:22:47,038 --> 01:22:52,327
replaced by whatever is in the data array.

1586
01:22:52,327 --> 01:22:53,329
So this is somewhat of

1587
01:22:53,329 --> 01:22:56,294
a Pythonic syntax that you can

1588
01:22:56,294 --> 01:22:59,340
use Python code in the snake files.

1589
01:23:00,402 --> 01:23:04,298
And this data is generated by looking

1590
01:23:04,298 --> 01:23:05,923
through the data folder,

1591
01:23:05,923 --> 01:23:07,327
through everything that matches

1592
01:23:07,327 --> 01:23:11,519
this placeholder.txt, and then

1593
01:23:11,519 --> 01:23:17,818
saying, okay, this becomes the data book,

1594
01:23:18,997 --> 01:23:22,642
or no, this is the book field of this

1595
01:23:22,642 --> 01:23:25,345
and this glob wildcards

1596
01:23:25,345 --> 01:23:27,728
generates these book fields for

1597
01:23:27,728 --> 01:23:29,991
all elements in here.

1598
01:23:31,093 --> 01:23:33,576
So for the rule all, we

1599
01:23:33,576 --> 01:23:36,099
want everything in the statistics

1600
01:23:36,099 --> 01:23:38,222
book data to exist and we

1601
01:23:38,222 --> 01:23:41,606
want everything in the book PNG

1602
01:23:41,606 --> 01:23:45,912
to exist and they have to be

1603
01:23:45,912 --> 01:23:48,736
as recent as any requirements

1604
01:23:48,736 --> 01:23:52,120
that or in each rule it

1605
01:23:52,120 --> 01:23:54,103
will be checked whether there

1606
01:23:54,103 --> 01:23:56,286
have been updates in the inputs

1607
01:23:56,286 --> 01:23:58,589
and then the rule has to be executed

1608
01:23:59,430 --> 01:24:01,733
and for example count words

1609
01:24:01,733 --> 01:24:05,018
here requires as an input the

1610
01:24:05,018 --> 01:24:07,261
count.py so your script file so

1611
01:24:07,261 --> 01:24:08,963
if you change your script

1612
01:24:08,963 --> 01:24:10,144
you will have to rerun

1613
01:24:10,144 --> 01:24:12,867
this for all elements and

1614
01:24:12,867 --> 01:24:14,790
it requires the different book files.

1615
01:24:14,790 --> 01:24:17,473
So if one of the book files changes

1616
01:24:17,473 --> 01:24:21,177
or there's a new book file,

1617
01:24:21,177 --> 01:24:22,519
then it has to generate this

1618
01:24:22,519 --> 01:24:23,560
for the new book file.

1619
01:24:24,721 --> 01:24:27,484
And the output from this is

1620
01:24:27,484 --> 01:24:31,128
defined as this is the statistics file data.

1621
01:24:31,128 --> 01:24:36,034
So this essentially satisfies this input.

1622
01:24:37,516 --> 01:24:39,479
And so it will look up

1623
01:24:39,479 --> 01:24:41,662
in the underlying rules what

1624
01:24:41,662 --> 01:24:45,348
rules could satisfy one of my

1625
01:24:45,348 --> 01:24:48,112
inputs or one of my requirements.

1626
01:24:48,112 --> 01:24:49,574
And then there is the command

1627
01:24:49,574 --> 01:24:51,237
that is being called when

1628
01:24:51,237 --> 01:24:53,039
this rule is being executed.

1629
01:24:54,161 --> 01:24:55,343
And that's essentially just, in

1630
01:24:55,343 --> 01:24:56,504
this case, a Python command.

1631
01:24:56,504 --> 01:24:58,247
This could be anything else.

1632
01:24:58,247 --> 01:24:59,449
This could also be R,

1633
01:24:59,449 --> 01:25:02,493
MATLAB, or whatever language you want.

1634
01:25:03,315 --> 01:25:04,857
SnakeMate doesn't make a difference here.

1635
01:25:06,153 --> 01:25:08,718
And it essentially says, okay, well,

1636
01:25:10,240 --> 01:25:13,326
for each input, the input.script

1637
01:25:13,326 --> 01:25:15,430
value is being used, and

1638
01:25:15,430 --> 01:25:17,794
that's the code count.py.

1639
01:25:18,756 --> 01:25:21,921
And the input.book, that's the data,

1640
01:25:21,921 --> 01:25:23,584
whatever the file is that

1641
01:25:23,584 --> 01:25:26,289
came from that, again, comes

1642
01:25:26,289 --> 01:25:28,630
from the requirement here.

1643
01:25:28,630 --> 01:25:31,294
and is passed kind of downwards.

1644
01:25:31,294 --> 01:25:33,437
And this generates the output,

1645
01:25:34,940 --> 01:25:37,023
which is again for each file.

1646
01:25:38,105 --> 01:25:39,306
And this is how SnakeMake

1647
01:25:40,248 --> 01:25:43,853
builds these rules and goes

1648
01:25:43,853 --> 01:25:46,357
through the graph and essentially checks

1649
01:25:46,357 --> 01:25:48,280
for every input if it

1650
01:25:48,280 --> 01:25:53,167
changed and then generates the outputs.

1651
01:25:53,167 --> 01:25:54,529
We'll also check whether

1652
01:25:54,529 --> 01:25:56,712
the outputs changed if there

1653
01:25:56,712 --> 01:25:58,736
are dependencies because the make

1654
01:25:58,736 --> 01:26:00,298
plot then depends on the outputs

1655
01:26:00,298 --> 01:26:02,141
of the count words and so on.

1656
01:26:04,064 --> 01:26:05,706
I think this is going to

1657
01:26:05,706 --> 01:26:08,951
be maybe easier and more clear

1658
01:26:08,951 --> 01:26:12,657
once people have gone through the exercises.

1659
01:26:12,657 --> 01:26:14,560
So there are two different

1660
01:26:14,560 --> 01:26:16,082
options how you can do this.

1661
01:26:16,082 --> 01:26:17,324
You can do this on your own computer.

1662
01:26:17,324 --> 01:26:19,186
If you have the code

1663
01:26:20,208 --> 01:26:22,411
refinery conda environment, then

1664
01:26:22,411 --> 01:26:24,574
just conduct code refinery and

1665
01:26:24,574 --> 01:26:26,497
all and everything you need will be in there.

1666
01:26:26,497 --> 01:26:29,221
And then you can go through

1667
01:26:29,221 --> 01:26:30,944
the exercise on your own machine,

1668
01:26:30,944 --> 01:26:32,225
or you can do this on binder

1669
01:26:32,225 --> 01:26:36,792
where there is a binder

1670
01:26:38,476 --> 01:26:41,058
link on the repository.

1671
01:26:41,058 --> 01:26:43,420
And if you launch it in

1672
01:26:43,420 --> 01:26:45,542
Binder, you get a online

1673
01:26:45,542 --> 01:26:48,104
machine that essentially gives you

1674
01:26:48,104 --> 01:26:51,187
the same infrastructure that

1675
01:26:52,208 --> 01:26:56,031
would be available with the conda environment.

1676
01:26:56,031 --> 01:26:58,093
There's a small difference

1677
01:26:58,093 --> 01:27:00,675
between Binder and your local machine in

1678
01:27:00,675 --> 01:27:03,238
that due to the way how

1679
01:27:03,238 --> 01:27:05,700
Binder works, some files might

1680
01:27:06,500 --> 01:27:08,382
need to be reproduced more often.

1681
01:27:09,509 --> 01:27:10,751
Because I think because of

1682
01:27:10,751 --> 01:27:12,995
indexing, if I remember that right.

1683
01:27:12,995 --> 01:27:16,340
It caches some files and then

1684
01:27:16,340 --> 01:27:18,123
it will also update the cache.

1685
01:27:18,123 --> 01:27:19,325
So you will not get the

1686
01:27:19,325 --> 01:27:21,148
counts you would maybe expect

1687
01:27:21,148 --> 01:27:22,951
because there are additional files

1688
01:27:22,951 --> 01:27:25,135
in the background changing.

1689
01:27:25,135 --> 01:27:28,461
Okay, but you have 15 minutes for this.

1690
01:27:30,224 --> 01:27:32,027
Essentially go through all the

1691
01:27:32,027 --> 01:27:35,793
steps in the workflow here

1692
01:27:36,995 --> 01:27:39,159
and report on whatever errors

1693
01:27:39,159 --> 01:27:42,745
you encounter and see you at 23.

1694
01:27:42,745 --> 01:27:42,885
Bye.

1695
01:27:44,769 --> 01:27:46,131
Bye.

1696
01:42:37,246 --> 01:42:38,848
And welcome back.

1697
01:42:38,848 --> 01:42:41,010
So there were a couple of questions

1698
01:42:41,010 --> 01:42:42,151
as to why we are doing

1699
01:42:42,151 --> 01:42:45,175
this, and I will demonstrate a few commands

1700
01:42:45,175 --> 01:42:48,538
that hopefully explain why SnakeMake

1701
01:42:48,538 --> 01:42:51,602
or any workflow manager can be a useful tool.

1702
01:42:51,602 --> 01:42:56,507
So I've cleaned up my repository here.

1703
01:42:56,507 --> 01:42:57,848
There's nothing in statistics.

1704
01:42:57,848 --> 01:43:03,014
There's nothing in the, in,

1705
01:43:03,014 --> 01:43:04,079
in the plots.

1706
01:43:04,883 --> 01:43:06,993
So at the moment I'm

1707
01:43:06,993 --> 01:43:09,666
essentially in just having the data.

1708
01:43:10,470 --> 01:43:11,877
So if I now run

1709
01:43:14,506 --> 01:43:17,509
the snake make command minus j

1710
01:43:17,509 --> 01:43:19,190
just to say okay well use one

1711
01:43:19,190 --> 01:43:20,111
core i don't want to do

1712
01:43:20,111 --> 01:43:22,774
this parallel it will run this

1713
01:43:22,774 --> 01:43:24,716
and it will run seeing that

1714
01:43:24,716 --> 01:43:27,098
okay there there needs to be things done

1715
01:43:27,098 --> 01:43:29,660
and it tells you okay things

1716
01:43:29,660 --> 01:43:30,902
need to be updated because they

1717
01:43:30,902 --> 01:43:33,284
are missing and now i do

1718
01:43:33,284 --> 01:43:35,506
have in the statistics all of

1719
01:43:35,506 --> 01:43:37,368
my statistics and in the plots

1720
01:43:38,389 --> 01:43:40,851
i have all my plots generated

1721
01:43:41,810 --> 01:43:44,393
Now, the nice thing with snake make is

1722
01:43:44,393 --> 01:43:46,635
that we can now, for example,

1723
01:43:46,635 --> 01:43:52,901
if I take, let's say one

1724
01:43:52,901 --> 01:43:54,803
of the input files and just

1725
01:43:54,803 --> 01:43:59,448
copy it over into, so I just

1726
01:43:59,448 --> 01:44:00,869
create a copy of it.

1727
01:44:00,869 --> 01:44:04,934
Assume this is a new book that comes in.

1728
01:44:04,934 --> 01:44:06,435
If I now run snake make

1729
01:44:06,435 --> 01:44:09,218
again, it'll say, okay, well,

1730
01:44:10,902 --> 01:44:11,844
I'm looking in here.

1731
01:44:11,844 --> 01:44:16,893
There is overall one thing to do with all.

1732
01:44:17,795 --> 01:44:19,198
There's one count word that

1733
01:44:19,198 --> 01:44:20,961
needs to be done and one make plot

1734
01:44:20,961 --> 01:44:21,662
that needs to be done

1735
01:44:21,662 --> 01:44:23,265
and everything else is already done.

1736
01:44:23,265 --> 01:44:25,269
So it's only doing the thing

1737
01:44:25,269 --> 01:44:30,058
once while if I look back what happened before.

1738
01:44:31,034 --> 01:44:32,536
It's a lot of things.

1739
01:44:32,536 --> 01:44:34,720
So there's one time the rule

1740
01:44:34,720 --> 01:44:36,422
all needs to be done.

1741
01:44:36,422 --> 01:44:38,045
Well, yeah, it's the final rule.

1742
01:44:38,045 --> 01:44:41,009
So it only executes once and

1743
01:44:41,009 --> 01:44:42,331
four times it needs to count

1744
01:44:42,331 --> 01:44:44,614
words and four times it needs to make plots.

1745
01:44:45,616 --> 01:44:47,639
So at this point,

1746
01:44:47,639 --> 01:44:51,223
I now, looking into the plots,

1747
01:44:51,223 --> 01:44:52,965
I have a sierra2.png.

1748
01:44:54,127 --> 01:44:57,531
If, for example, some of

1749
01:44:57,531 --> 01:45:00,334
my input data changes, let's

1750
01:45:00,334 --> 01:45:04,960
take the abyss.txt and remove this, the people.

1751
01:45:07,823 --> 01:45:09,225
And I run snake make again.

1752
01:45:10,842 --> 01:45:13,386
it'll say, oh, something changed

1753
01:45:14,507 --> 01:45:17,652
and it's the abyss that

1754
01:45:17,652 --> 01:45:21,277
has changed and that needs to be updated.

1755
01:45:21,277 --> 01:45:23,060
So it updates only the abyss.

1756
01:45:24,001 --> 01:45:25,022
And that is kind of the

1757
01:45:25,022 --> 01:45:28,207
power of these tools that you,

1758
01:45:28,207 --> 01:45:30,029
can run them again and again and again,

1759
01:45:30,029 --> 01:45:31,471
and they will only do what

1760
01:45:31,471 --> 01:45:32,693
is necessary to be done.

1761
01:45:32,693 --> 01:45:34,035
They will not repeat things

1762
01:45:34,035 --> 01:45:36,258
that are already done.

1763
01:45:36,258 --> 01:45:38,060
If you have, for example,

1764
01:45:38,060 --> 01:45:43,127
a quite long lasting preprocessing step

1765
01:45:43,127 --> 01:45:46,712
that is data independent, but

1766
01:45:46,712 --> 01:45:48,314
that you need to do, you can

1767
01:45:48,314 --> 01:45:52,319
have that as a prerequisite in your rules.

1768
01:45:53,320 --> 01:45:56,084
And as long as

1769
01:45:56,084 --> 01:45:57,847
the code that's generating

1770
01:45:57,847 --> 01:46:00,170
this preprocessing doesn't change.

1771
01:46:00,170 --> 01:46:01,612
So if you have that separated

1772
01:46:01,612 --> 01:46:05,518
into its own file, you can run this again

1773
01:46:05,518 --> 01:46:08,022
and it will know that,

1774
01:46:08,022 --> 01:46:09,565
okay, well, the preprocessing

1775
01:46:09,565 --> 01:46:10,766
file that generates my

1776
01:46:10,766 --> 01:46:13,050
preprocessing data hasn't changed.

1777
01:46:13,050 --> 01:46:15,013
So I can run everything else.

1778
01:46:15,013 --> 01:46:18,118
But if my preprocessing data has changed,

1779
01:46:18,118 --> 01:46:19,680
then I need to run everything else

1780
01:46:19,680 --> 01:46:21,443
because the dependencies of all

1781
01:46:21,443 --> 01:46:23,506
the other rules have changed.

1782
01:46:23,506 --> 01:46:25,711
And that's what's making these

1783
01:46:25,711 --> 01:46:28,318
snake make or general workflow managers

1784
01:46:28,318 --> 01:46:31,466
so powerful that they take

1785
01:46:31,466 --> 01:46:34,213
away you needing to remember, okay,

1786
01:46:34,213 --> 01:46:35,436
what have I already done?

1787
01:46:35,436 --> 01:46:37,902
And what new data do I have

1788
01:46:37,902 --> 01:46:40,027
to now run my things on?

1789
01:46:40,027 --> 01:46:41,410
And you can keep all of

1790
01:46:41,410 --> 01:46:42,974
the data in one folder.

1791
01:46:42,974 --> 01:46:47,023
And if they're separated by file name,

1792
01:46:47,023 --> 01:46:50,571
it's able to essentially go

1793
01:46:50,571 --> 01:46:52,315
through all the files in there

1794
01:46:52,315 --> 01:46:54,019
and do something for all the files.

1795
01:46:56,530 --> 01:47:03,378
You can also visualize how things,

1796
01:47:03,378 --> 01:47:05,300
how it's essentially doing these things

1797
01:47:05,300 --> 01:47:07,943
and the command for that,

1798
01:47:07,943 --> 01:47:11,007
oops, that was not what I wanted to do.

1799
01:47:11,007 --> 01:47:13,630
And the command for that is outlined here.

1800
01:47:13,630 --> 01:47:16,993
So we create the, the

1801
01:47:16,993 --> 01:47:20,417
direct acyclic graph, I think, and

1802
01:47:21,919 --> 01:47:26,264
put it into, put it into a image.

1803
01:47:26,264 --> 01:47:28,387
And this also shows you

1804
01:47:28,387 --> 01:47:30,731
how the different rules that

1805
01:47:30,731 --> 01:47:33,595
it will execute are built.

1806
01:47:33,595 --> 01:47:37,061
So in our case, all depends

1807
01:47:37,061 --> 01:47:40,766
on both the statistics and the make plot.

1808
01:47:40,766 --> 01:47:42,248
The make plot depends on

1809
01:47:42,248 --> 01:47:46,655
the statistics and then feeds into all.

1810
01:47:46,655 --> 01:47:48,238
So we have a double dependency.

1811
01:47:48,238 --> 01:47:50,601
We could essentially remove

1812
01:47:50,601 --> 01:47:53,686
the statistics from the all rule

1813
01:47:53,686 --> 01:47:54,787
and it would still do

1814
01:47:54,787 --> 01:47:56,169
the same steps because it

1815
01:47:56,169 --> 01:47:57,891
looks back, okay, this depends

1816
01:47:57,891 --> 01:47:59,673
on this and would redo the things.

1817
01:48:01,775 --> 01:48:04,038
And one question for us, why

1818
01:48:04,038 --> 01:48:05,920
do we use SnakeMake for this

1819
01:48:05,920 --> 01:48:08,423
and not a different workflow manager?

1820
01:48:08,423 --> 01:48:10,225
And the main reason is it

1821
01:48:10,225 --> 01:48:13,789
has a relatively gentle learning curve.

1822
01:48:13,789 --> 01:48:16,292
Yeah, it is something where you

1823
01:48:16,292 --> 01:48:18,274
need to get your head around

1824
01:48:18,274 --> 01:48:21,057
how the rules are being generated.

1825
01:48:21,057 --> 01:48:23,660
but that's the typical different

1826
01:48:23,660 --> 01:48:25,702
style of different style of

1827
01:48:25,702 --> 01:48:28,064
coding essentially and you just

1828
01:48:28,064 --> 01:48:30,386
need to get your head around okay this is

1829
01:48:30,386 --> 01:48:32,849
how it works inputs are

1830
01:48:32,849 --> 01:48:34,971
essentially the requirements outputs

1831
01:48:34,971 --> 01:48:36,953
are the products of each rule

1832
01:48:36,953 --> 01:48:38,414
and the rules are somewhat

1833
01:48:38,414 --> 01:48:40,577
the functions that are being called

1834
01:48:40,577 --> 01:48:45,001
in some way and so on and

1835
01:48:45,001 --> 01:48:48,985
the all function i think you know

1836
01:48:48,985 --> 01:48:50,447
told me once that she compares

1837
01:48:50,447 --> 01:48:51,809
that somewhat with the main

1838
01:48:51,809 --> 01:48:53,251
function of a program.

1839
01:48:54,873 --> 01:48:56,876
It's not really a function.

1840
01:48:56,876 --> 01:48:58,037
I agree to that.

1841
01:48:58,037 --> 01:49:00,401
But if you sort of think of this

1842
01:49:00,401 --> 01:49:03,004
as where it tells all the

1843
01:49:03,004 --> 01:49:05,027
other things it needs to execute,

1844
01:49:05,027 --> 01:49:08,071
that is kind of where this analogy came from.

1845
01:49:08,071 --> 01:49:10,316
But I think it helps

1846
01:49:10,316 --> 01:49:12,961
in understanding how SnakeMake

1847
01:49:12,961 --> 01:49:15,707
builds these things.

1848
01:49:17,089 --> 01:49:19,394
And the second thing is

1849
01:49:19,394 --> 01:49:21,779
SnakeMake is free and open source.

1850
01:49:21,779 --> 01:49:23,863
It also installs pretty easily

1851
01:49:23,863 --> 01:49:25,487
via condo or via pip and

1852
01:49:25,487 --> 01:49:27,190
can be used cross-platform.

1853
01:49:27,190 --> 01:49:30,194
There are several things in SnakeMake

1854
01:49:30,194 --> 01:49:32,778
that allow you to run things in parallel,

1855
01:49:32,778 --> 01:49:35,161
which can be quite convenient

1856
01:49:35,161 --> 01:49:36,944
on high performance computing systems

1857
01:49:36,944 --> 01:49:39,868
because SnakeMake also has built

1858
01:49:39,868 --> 01:49:41,430
in support for, for example,

1859
01:49:41,430 --> 01:49:44,734
Slurm queue management, where

1860
01:49:44,734 --> 01:49:46,597
it can essentially run

1861
01:49:46,597 --> 01:49:49,603
large workflows as individual slurm

1862
01:49:49,603 --> 01:49:51,667
jobs it will submit the jobs

1863
01:49:51,667 --> 01:49:55,294
they will will run on the on the cluster

1864
01:49:55,294 --> 01:49:56,556
and it can and it will

1865
01:49:56,556 --> 01:49:59,442
then continue where it away where

1866
01:49:59,442 --> 01:50:03,590
the jobs left off essentially um

1867
01:50:03,590 --> 01:50:05,252
it's also possible to do

1868
01:50:05,252 --> 01:50:08,376
individual steps in individual

1869
01:50:08,376 --> 01:50:10,358
environments by having by

1870
01:50:10,358 --> 01:50:12,020
essentially just adding conda

1871
01:50:12,020 --> 01:50:14,904
environment.yaml so indicating this

1872
01:50:14,904 --> 01:50:16,326
is the environment that is necessary

1873
01:50:16,326 --> 01:50:17,807
for this or this is

1874
01:50:17,807 --> 01:50:19,129
the environment yaml and will

1875
01:50:19,129 --> 01:50:20,911
create these environments if

1876
01:50:20,911 --> 01:50:23,975
necessary and that's

1877
01:50:23,975 --> 01:50:26,499
quite important for example as

1878
01:50:26,499 --> 01:50:29,264
we mentioned very early with

1879
01:50:29,264 --> 01:50:30,747
things like pytorch if you

1880
01:50:30,747 --> 01:50:35,194
have multiple different tools that

1881
01:50:35,194 --> 01:50:37,278
depend on different pytorch versions

1882
01:50:37,278 --> 01:50:38,299
but you want to chain

1883
01:50:38,299 --> 01:50:39,942
them because they because the

1884
01:50:39,942 --> 01:50:41,044
one does something that you

1885
01:50:41,044 --> 01:50:42,827
want in your workflow and the

1886
01:50:42,827 --> 01:50:44,229
other one does also something that

1887
01:50:44,229 --> 01:50:45,311
you want in your workflow you

1888
01:50:45,311 --> 01:50:47,515
can't run them in the same environment

1889
01:50:47,515 --> 01:50:50,206
So by using SnakeMake,

1890
01:50:50,206 --> 01:50:51,591
you essentially separate them

1891
01:50:51,591 --> 01:50:53,760
into different environments and you

1892
01:50:53,760 --> 01:50:56,952
can run them again.

1893
01:50:58,737 --> 01:51:00,859
It's also possible to directly

1894
01:51:00,859 --> 01:51:03,182
use Docker container containers

1895
01:51:04,143 --> 01:51:06,665
by indicating, okay, which container

1896
01:51:06,665 --> 01:51:07,987
to use for a certain rule.

1897
01:51:07,987 --> 01:51:08,748
And then this will be

1898
01:51:08,748 --> 01:51:10,169
executed within this container.

1899
01:51:12,131 --> 01:51:14,033
So it's very flexible and has support

1900
01:51:14,033 --> 01:51:17,377
for a lot of high-performance computing

1901
01:51:17,377 --> 01:51:20,060
or things that you need

1902
01:51:20,060 --> 01:51:21,101
in a high-performance computing

1903
01:51:21,101 --> 01:51:23,003
system environment.

1904
01:51:23,003 --> 01:51:25,108
It's also quite heavily

1905
01:51:25,108 --> 01:51:27,414
used in bioinformatics, but it

1906
01:51:27,414 --> 01:51:28,396
is completely general.

1907
01:51:28,396 --> 01:51:31,784
You can write any workflow

1908
01:51:31,784 --> 01:51:33,709
into a snake make file.

1909
01:51:34,571 --> 01:51:37,137
And that's just making it

1910
01:51:37,137 --> 01:51:39,743
quite nice to use.

1911
01:51:39,743 --> 01:51:42,465
and as mentioned these tools

1912
01:51:42,465 --> 01:51:43,426
like snake make help a

1913
01:51:43,426 --> 01:51:45,588
lot with reproducibility because they

1914
01:51:45,588 --> 01:51:47,610
help you in not forgetting

1915
01:51:47,610 --> 01:51:48,951
to add certain things not

1916
01:51:48,951 --> 01:51:51,373
forgetting to rerun something and

1917
01:51:51,373 --> 01:51:53,375
if you essentially run your

1918
01:51:53,375 --> 01:51:55,777
snake make file at the end of your

1919
01:51:55,777 --> 01:51:57,279
or before you want to submit

1920
01:51:58,980 --> 01:52:00,021
and you have defined your

1921
01:52:00,021 --> 01:52:02,243
snake make file correctly i you

1922
01:52:02,243 --> 01:52:05,026
also have the um the script

1923
01:52:05,026 --> 01:52:07,528
files as inputs and so on you

1924
01:52:07,528 --> 01:52:09,730
will run the right code

1925
01:52:09,730 --> 01:52:12,333
for your data with the

1926
01:52:12,333 --> 01:52:14,596
right data that's now there and

1927
01:52:14,596 --> 01:52:17,119
you can be sure that okay i

1928
01:52:17,119 --> 01:52:19,321
know what i was running on

1929
01:52:19,321 --> 01:52:21,624
when i built this this does

1930
01:52:21,624 --> 01:52:25,388
not help against you running

1931
01:52:25,388 --> 01:52:27,251
it then modifying things then

1932
01:52:27,251 --> 01:52:29,273
running it again and having

1933
01:52:29,273 --> 01:52:30,575
done something with intermediary

1934
01:52:30,575 --> 01:52:32,697
results that's where the

1935
01:52:32,697 --> 01:52:36,781
The project structure comes back in a bit.

1936
01:52:36,781 --> 01:52:39,763
Okay, if you have something like,

1937
01:52:39,763 --> 01:52:42,146
or general versioning, if I

1938
01:52:42,146 --> 01:52:45,408
have something at submission version,

1939
01:52:46,670 --> 01:52:47,711
I should make sure that I

1940
01:52:47,711 --> 01:52:49,692
know this is the data

1941
01:52:49,692 --> 01:52:50,933
at submission version, this is

1942
01:52:50,933 --> 01:52:52,855
the code at submission version, and

1943
01:52:52,855 --> 01:52:54,817
so that I can rebuild this.

1944
01:52:54,817 --> 01:52:56,298
So it doesn't help you against that,

1945
01:52:56,298 --> 01:52:58,080
but it helps you to keep

1946
01:52:58,080 --> 01:53:00,242
the data in itself or the

1947
01:53:00,242 --> 01:53:02,704
data and the results in itself consistent.

1948
01:53:04,102 --> 01:53:06,205
I think for this version

1949
01:53:06,205 --> 01:53:07,928
tracking, just to mention that

1950
01:53:07,928 --> 01:53:10,913
again, really git tags are quite useful.

1951
01:53:10,913 --> 01:53:12,736
So you can just make sure,

1952
01:53:12,736 --> 01:53:14,158
okay, this is the script

1953
01:53:14,158 --> 01:53:16,262
version, data version and so on

1954
01:53:16,262 --> 01:53:17,824
that you use to submit and

1955
01:53:17,824 --> 01:53:19,427
then there's no ambiguity.

1956
01:53:21,635 --> 01:53:23,558
Okay, yeah, there are, of course,

1957
01:53:23,558 --> 01:53:25,380
a lot of similar tools

1958
01:53:25,380 --> 01:53:30,567
like Make, Nextflow, CWL.

1959
01:53:30,567 --> 01:53:32,529
I think it's sometimes interesting

1960
01:53:32,529 --> 01:53:35,653
to see Make here because most people know

1961
01:53:35,653 --> 01:53:37,355
that Make is a tool that

1962
01:53:37,355 --> 01:53:39,198
is being used for compiling C

1963
01:53:39,198 --> 01:53:41,821
or C++ code or Fortran code.

1964
01:53:41,821 --> 01:53:43,884
And don't really think of this

1965
01:53:43,884 --> 01:53:46,547
as a workflow manager, but in the end,

1966
01:53:46,547 --> 01:53:48,490
it has the same structure as

1967
01:53:48,490 --> 01:53:50,052
a snake file, it has rules.

1968
01:53:50,052 --> 01:53:51,859
And rules can depend on other rules.

1969
01:53:52,742 --> 01:53:55,332
And it just executes these rules.

1970
01:53:55,332 --> 01:53:56,115
So in the end, it is

1971
01:53:56,115 --> 01:53:58,122
exactly the same thing.

1972
01:54:00,329 --> 01:54:03,433
Let's go on from having

1973
01:54:03,433 --> 01:54:09,281
recorded the flow of how you execute your code,

1974
01:54:09,281 --> 01:54:11,544
how the different steps in

1975
01:54:11,544 --> 01:54:15,470
your code are being executed

1976
01:54:15,470 --> 01:54:19,295
one after another, to what's

1977
01:54:19,295 --> 01:54:22,840
necessary to be able to actually run your code.

1978
01:54:22,840 --> 01:54:24,802
and that is dependencies.

1979
01:54:24,802 --> 01:54:26,044
And we have talked about

1980
01:54:26,044 --> 01:54:27,685
this already quite a bit

1981
01:54:27,685 --> 01:54:29,608
that version numbers are

1982
01:54:29,608 --> 01:54:32,191
important and versioning is quite important.

1983
01:54:33,332 --> 01:54:38,337
And I like this image here

1984
01:54:38,337 --> 01:54:41,781
from XKCD where you can and

1985
01:54:41,781 --> 01:54:42,903
it's very, very true.

1986
01:54:42,903 --> 01:54:43,824
You have a lot

1987
01:54:43,824 --> 01:54:47,047
of programming infrastructure, a lot

1988
01:54:47,047 --> 01:54:48,909
of code infrastructure for a

1989
01:54:48,909 --> 01:54:51,292
lot of systems and

1990
01:54:51,292 --> 01:54:53,174
there are always some

1991
01:54:53,174 --> 01:54:54,936
small libraries somewhere that

1992
01:54:54,936 --> 01:54:57,279
are maintained by maybe a person

1993
01:54:57,279 --> 01:55:00,123
or two in their spare time

1994
01:55:00,123 --> 01:55:02,606
and that are underlying a lot of things.

1995
01:55:02,606 --> 01:55:04,548
And I want to give an anecdote

1996
01:55:04,548 --> 01:55:06,851
that is from 2024 where

1997
01:55:06,851 --> 01:55:09,534
essentially exactly this thing

1998
01:55:09,534 --> 01:55:11,536
almost brought this whole

1999
01:55:11,536 --> 01:55:13,859
thing down collapsing.

2000
01:55:13,859 --> 01:55:18,244
And that's the XC story.

2001
01:55:18,244 --> 01:55:21,228
XC is a small zipping library.

2002
01:55:21,228 --> 01:55:24,372
where essentially it's just

2003
01:55:24,372 --> 01:55:25,694
about compressing some data.

2004
01:55:26,976 --> 01:55:30,340
But this library is very, very basic

2005
01:55:30,340 --> 01:55:31,662
or very, very much below a

2006
01:55:32,623 --> 01:55:36,468
lot of operating system code and so on.

2007
01:55:36,468 --> 01:55:38,751
And in 2024, someone after

2008
01:55:38,751 --> 01:55:39,853
a couple of years had

2009
01:55:39,853 --> 01:55:42,416
managed to social engineer themselves

2010
01:55:42,416 --> 01:55:44,158
into a maintainer position on

2011
01:55:44,158 --> 01:55:47,623
the project and added a backdoor.

2012
01:55:49,223 --> 01:55:51,625
quite sophisticated and it

2013
01:55:51,625 --> 01:55:55,409
was essentially very, very short

2014
01:55:55,409 --> 01:55:57,111
before coming into a lot

2015
01:55:57,111 --> 01:55:59,593
of major Linux distributions

2016
01:55:59,593 --> 01:56:03,557
until someone noticed a timing increase of,

2017
01:56:03,557 --> 01:56:05,338
I think a couple of milliseconds

2018
01:56:05,338 --> 01:56:07,040
for some requests that they

2019
01:56:07,040 --> 01:56:09,342
were doing and started investigating

2020
01:56:09,342 --> 01:56:11,564
and found that, oh yeah,

2021
01:56:11,564 --> 01:56:14,387
there's now a backdoor in there.

2022
01:56:14,387 --> 01:56:16,429
So yeah, we have this situation.

2023
01:56:16,429 --> 01:56:17,610
This is not,

2024
01:56:18,502 --> 01:56:20,445
artificial, this is exactly what we have.

2025
01:56:20,445 --> 01:56:22,727
We have exactly this situation

2026
01:56:22,727 --> 01:56:26,172
and it's so easy even

2027
01:56:26,172 --> 01:56:29,556
for a relatively simple project

2028
01:56:29,556 --> 01:56:32,240
like a PhD project to depend

2029
01:56:32,240 --> 01:56:34,803
on some things that might or

2030
01:56:34,803 --> 01:56:37,987
might not be maintained and

2031
01:56:37,987 --> 01:56:41,652
that exists somewhere and needs

2032
01:56:41,652 --> 01:56:44,155
some software, yeah.

2033
01:56:45,063 --> 01:56:48,206
I think also what I

2034
01:56:48,206 --> 01:56:51,389
realized is quite often, at least with Python,

2035
01:56:52,551 --> 01:56:55,474
that some of my students, without

2036
01:56:55,474 --> 01:56:57,456
even thinking, they find that

2037
01:56:57,456 --> 01:57:00,138
there is a module that can do the job.

2038
01:57:00,138 --> 01:57:01,600
And without thinking twice, they

2039
01:57:01,600 --> 01:57:02,841
will just pip install the

2040
01:57:02,841 --> 01:57:04,603
module, then another module, and

2041
01:57:04,603 --> 01:57:06,365
then they have 15 modules to

2042
01:57:06,365 --> 01:57:08,087
do very simple things that would

2043
01:57:08,087 --> 01:57:09,648
be there in base Python, and

2044
01:57:09,648 --> 01:57:12,451
that's okay on some level.

2045
01:57:12,451 --> 01:57:13,913
But they don't really think

2046
01:57:13,913 --> 01:57:15,375
that every module creates

2047
01:57:15,375 --> 01:57:17,919
dependencies of their own and

2048
01:57:17,919 --> 01:57:19,661
that sometimes you kind of

2049
01:57:19,661 --> 01:57:21,844
engineer a dependency hell into

2050
01:57:21,844 --> 01:57:23,747
your own code by installing

2051
01:57:23,747 --> 01:57:25,489
those things without thinking

2052
01:57:25,489 --> 01:57:27,732
about the potential consequences.

2053
01:57:27,732 --> 01:57:28,974
And sometimes it's a good

2054
01:57:28,974 --> 01:57:31,317
idea to think about exactly that.

2055
01:57:31,317 --> 01:57:33,540
That everything you depend

2056
01:57:33,540 --> 01:57:36,363
on has dependencies in their own right.

2057
01:57:36,363 --> 01:57:39,928
And it's just it can spiral out of control.

2058
01:57:39,928 --> 01:57:41,530
So it is just something that

2059
01:57:41,530 --> 01:57:43,532
we should keep in the back of our heads

2060
01:57:43,532 --> 01:57:45,275
when we install someone else's

2061
01:57:45,275 --> 01:57:47,497
code that we do not necessarily know.

2062
01:57:48,318 --> 01:57:49,640
How is this maintained and

2063
01:57:49,640 --> 01:57:51,182
what does it build on in it?

2064
01:57:52,124 --> 01:57:54,808
Overall, I would say it's

2065
01:57:54,808 --> 01:57:56,370
a general good principle to

2066
01:57:56,370 --> 01:57:58,514
try to minimize your dependencies,

2067
01:57:59,655 --> 01:58:01,578
but at the same time, don't

2068
01:58:01,578 --> 01:58:03,421
try to reinvent the wheel.

2069
01:58:03,421 --> 01:58:04,202
Have it in a balance.

2070
01:58:05,144 --> 01:58:07,647
If there's complex stuff that

2071
01:58:07,647 --> 01:58:09,390
a library does really well,

2072
01:58:10,872 --> 01:58:13,715
take that library however if

2073
01:58:13,715 --> 01:58:17,038
there is a relatively simple thing uh

2074
01:58:17,038 --> 01:58:18,138
that oh yeah there is

2075
01:58:18,138 --> 01:58:21,321
a convenient function in this huge

2076
01:58:22,342 --> 01:58:23,403
i don't know there is a

2077
01:58:23,403 --> 01:58:26,166
convenient function in pytorch for

2078
01:58:26,166 --> 01:58:29,429
my small um i need to flip some matrix

2079
01:58:29,429 --> 01:58:32,371
or something uh don't install

2080
01:58:32,371 --> 01:58:34,713
pytorch to flip the matrix

2081
01:58:34,713 --> 01:58:36,435
either do it yourself or use

2082
01:58:36,435 --> 01:58:39,077
some other smaller library that

2083
01:58:39,077 --> 01:58:40,589
does the same thing

2084
01:58:40,589 --> 01:58:42,712
I mean, we don't want

2085
01:58:42,712 --> 01:58:44,875
to discourage anyone from using

2086
01:58:44,875 --> 01:58:46,977
other people's code.

2087
01:58:46,977 --> 01:58:50,562
It's just in my experience, exactly.

2088
01:58:50,562 --> 01:58:51,583
It's just something people

2089
01:58:51,583 --> 01:58:53,566
don't necessarily think about.

2090
01:58:53,566 --> 01:58:55,348
And it can be a good

2091
01:58:55,348 --> 01:58:58,112
idea to just be mindful of those things.

2092
01:58:58,112 --> 01:59:00,215
That's what I just wanted to say.

2093
01:59:00,215 --> 01:59:04,000
But to make this whole

2094
01:59:04,000 --> 01:59:05,462
what are dependencies and so on

2095
01:59:05,462 --> 01:59:10,509
a bit more obvious, we

2096
01:59:10,509 --> 01:59:13,513
have this kitchen analogy where

2097
01:59:13,513 --> 01:59:16,998
essentially the software that

2098
01:59:16,998 --> 01:59:19,481
you're running or that you

2099
01:59:19,481 --> 01:59:21,684
have been writing, that's

2100
01:59:21,684 --> 01:59:23,927
essentially the recipe for what

2101
01:59:23,927 --> 01:59:24,628
needs to be done.

2102
01:59:24,628 --> 01:59:27,191
The data that your software

2103
01:59:27,191 --> 01:59:30,100
uses are the ingredients.

2104
01:59:30,100 --> 01:59:34,852
And the libraries are the pots

2105
01:59:34,852 --> 01:59:37,218
and tools that are necessary

2106
01:59:37,218 --> 01:59:41,148
to actually do the processing.

2107
01:59:42,090 --> 01:59:43,113
And that's something that's

2108
01:59:43,113 --> 01:59:46,115
very often forgotten.

2109
01:59:46,115 --> 01:59:47,717
How many recipes do you see

2110
01:59:47,717 --> 01:59:49,940
that mention a pot and a

2111
01:59:49,940 --> 01:59:53,685
pan as requirements for them?

2112
01:59:53,685 --> 01:59:55,787
Yeah, well, if you just buy the stuff

2113
01:59:55,787 --> 01:59:57,810
and you don't have a pot and a pan,

2114
01:59:57,810 --> 01:59:58,771
you will probably not be able

2115
01:59:58,771 --> 02:00:01,174
to run this or do this recipe.

2116
02:00:01,174 --> 02:00:03,297
And it's the same with a computer.

2117
02:00:03,297 --> 02:00:06,962
If you don't mention this library

2118
02:00:06,962 --> 02:00:10,887
and this library, then yeah,

2119
02:00:10,887 --> 02:00:12,509
you have some code, but it

2120
02:00:12,509 --> 02:00:15,092
requires things that we don't know about.

2121
02:00:18,008 --> 02:00:20,632
And we often use these

2122
02:00:20,632 --> 02:00:23,497
tools from others and that's perfectly fine,

2123
02:00:23,497 --> 02:00:25,000
but we just have to remember

2124
02:00:25,000 --> 02:00:27,043
that they are being used.

2125
02:00:27,043 --> 02:00:28,666
And if we want someone else

2126
02:00:28,666 --> 02:00:31,170
to use our code, they need

2127
02:00:31,170 --> 02:00:33,955
to know what they have to use.

2128
02:00:33,955 --> 02:00:36,419
So there's the idea of

2129
02:00:36,419 --> 02:00:39,324
dependency and environment management.

2130
02:00:40,265 --> 02:00:42,168
And tools like conda,

2131
02:00:42,168 --> 02:00:45,113
pip, virtualenv, pipenv and so

2132
02:00:45,113 --> 02:00:47,477
on, they all record dependencies

2133
02:00:47,477 --> 02:00:50,442
in different files like these.

2134
02:00:50,442 --> 02:00:53,426
like requirements.txt for pip

2135
02:00:53,426 --> 02:00:55,528
or environment.yamls for conda,

2136
02:00:55,528 --> 02:00:57,190
mamba and so on.

2137
02:00:57,190 --> 02:00:59,333
And they try to solve a problem

2138
02:00:59,333 --> 02:01:01,295
that you need to define a

2139
02:01:01,295 --> 02:01:05,500
specific set of dependencies for your project.

2140
02:01:05,500 --> 02:01:07,803
So listing everything that

2141
02:01:07,803 --> 02:01:11,047
is actually necessary for your project.

2142
02:01:11,047 --> 02:01:13,553
The tools then aim to, and

2143
02:01:13,553 --> 02:01:15,077
that's done in the requirement

2144
02:01:15,077 --> 02:01:16,801
60 or environment.yaml.

2145
02:01:16,801 --> 02:01:18,104
The tools then try to

2146
02:01:19,127 --> 02:01:20,891
make, automate installing these

2147
02:01:20,891 --> 02:01:22,295
dependencies based on the file

2148
02:01:22,295 --> 02:01:24,179
that you have provided or

2149
02:01:24,179 --> 02:01:26,926
based on the dependency file you have provided.

2150
02:01:26,926 --> 02:01:30,752
They also often do record versions

2151
02:01:30,752 --> 02:01:32,856
for all dependencies if they

2152
02:01:32,856 --> 02:01:34,078
install them themselves.

2153
02:01:35,159 --> 02:01:37,523
And one more very, very

2154
02:01:37,523 --> 02:01:41,129
useful thing with having these

2155
02:01:41,129 --> 02:01:44,214
environments is you can isolate environments.

2156
02:01:44,214 --> 02:01:46,418
So if you have a project

2157
02:01:46,418 --> 02:01:49,643
that uses packages A, B, and C,

2158
02:01:50,922 --> 02:01:52,745
you can have those run

2159
02:01:52,745 --> 02:01:54,748
in one environment and you can

2160
02:01:54,748 --> 02:01:57,252
have a project that needs D, E

2161
02:01:57,252 --> 02:01:59,135
and F in a different environment.

2162
02:01:59,135 --> 02:02:01,799
And while if they are completely separate,

2163
02:02:02,681 --> 02:02:03,883
you could probably run them

2164
02:02:03,883 --> 02:02:04,964
in the same environment.

2165
02:02:06,447 --> 02:02:07,208
You might get in a

2166
02:02:07,208 --> 02:02:09,251
situation where for project A, you

2167
02:02:09,251 --> 02:02:12,236
need A, B and C at version five.

2168
02:02:12,236 --> 02:02:13,478
And for the second project, you

2169
02:02:13,478 --> 02:02:17,315
need C at version seven and E and F.

2170
02:02:17,315 --> 02:02:19,479
and then you can't use them

2171
02:02:19,479 --> 02:02:21,102
at the same time anymore.

2172
02:02:21,102 --> 02:02:22,905
You would essentially need to uninstall

2173
02:02:22,905 --> 02:02:26,150
and reinstall system packages all

2174
02:02:26,150 --> 02:02:28,895
the time just to have

2175
02:02:28,895 --> 02:02:32,742
your two different projects still running.

2176
02:02:35,135 --> 02:02:38,580
Yeah, and having these environment

2177
02:02:38,580 --> 02:02:41,604
or requirements file also allows

2178
02:02:41,604 --> 02:02:47,613
you to essentially list things for others

2179
02:02:47,613 --> 02:02:48,975
so that you can more

2180
02:02:48,975 --> 02:02:51,519
easily share the package and share

2181
02:02:51,519 --> 02:02:54,143
the code and share what you

2182
02:02:54,143 --> 02:02:55,725
have done and what you're using.

2183
02:02:57,393 --> 02:02:59,741
And one more thing that I

2184
02:02:59,741 --> 02:03:01,908
think is quite useful, if

2185
02:03:01,908 --> 02:03:03,473
you have recorded these environments

2186
02:03:04,336 --> 02:03:08,058
and you at some point want to try out

2187
02:03:08,058 --> 02:03:11,282
Let's say a pip package

2188
02:03:11,282 --> 02:03:12,563
that you found that, oh,

2189
02:03:12,563 --> 02:03:14,165
that sounds very promising.

2190
02:03:14,165 --> 02:03:16,187
And you install it and

2191
02:03:16,187 --> 02:03:19,191
it changes five versions because pip says,

2192
02:03:19,191 --> 02:03:20,192
okay, well, you will now

2193
02:03:20,192 --> 02:03:21,934
want to install this package.

2194
02:03:21,934 --> 02:03:24,156
I will make sure that this package works.

2195
02:03:24,156 --> 02:03:26,299
And at the same time, pip

2196
02:03:26,299 --> 02:03:28,301
at least doesn't care about

2197
02:03:28,301 --> 02:03:30,083
whether it breaks some other things.

2198
02:03:31,261 --> 02:03:33,024
And then suddenly your code

2199
02:03:33,024 --> 02:03:35,508
doesn't work anymore and it's

2200
02:03:35,508 --> 02:03:37,150
sometimes very difficult to figure out

2201
02:03:37,150 --> 02:03:40,255
what exactly went wrong so

2202
02:03:40,255 --> 02:03:41,857
having this environment file that

2203
02:03:41,857 --> 02:03:43,760
you know is working allows you

2204
02:03:43,760 --> 02:03:45,002
to just say okay well

2205
02:03:45,002 --> 02:03:46,384
i'll delete that environment I

2206
02:03:46,384 --> 02:03:48,708
recreated and I have my stuff working again.

2207
02:03:51,753 --> 02:03:52,594
So um.

2208
02:03:54,025 --> 02:03:59,142
We'll give you I think 10

2209
02:03:59,142 --> 02:04:01,991
minutes again to go through

2210
02:04:01,991 --> 02:04:05,503
the time capsule exercise here.

2211
02:04:07,373 --> 02:04:09,876
which is essentially to be

2212
02:04:09,876 --> 02:04:11,238
answered in the collaborative document

2213
02:04:12,039 --> 02:04:15,863
and allowing you to have a

2214
02:04:15,863 --> 02:04:17,966
look at the different types

2215
02:04:17,966 --> 02:04:20,389
of projects that you can see.

2216
02:04:20,389 --> 02:04:21,570
And I think we have talked

2217
02:04:21,570 --> 02:04:24,293
about quite a bit of this already.

2218
02:04:24,293 --> 02:04:27,658
So hopefully this will not

2219
02:04:27,658 --> 02:04:28,979
be taking too long, but I

2220
02:04:28,979 --> 02:04:32,183
think, yeah, should we give five or 10?

2221
02:04:36,668 --> 02:04:38,134
Yeah, maybe.

2222
02:04:38,134 --> 02:04:39,619
Let's start with 10 minutes

2223
02:04:39,619 --> 02:04:41,266
and people can tell how it goes.

2224
02:04:42,812 --> 02:04:44,940
So see you back at 55.

2225
02:14:36,659 --> 02:14:38,663
Will come back so yeah we

2226
02:14:38,663 --> 02:14:40,025
have seen quite a few people

2227
02:14:40,025 --> 02:14:43,030
i'm marking down the right

2228
02:14:43,030 --> 02:14:44,413
comments to the different types of

2229
02:14:45,535 --> 02:14:46,476
what can be found in

2230
02:14:46,476 --> 02:14:49,281
the in the repositories and I

2231
02:14:49,281 --> 02:14:50,684
think we can all agree that

2232
02:14:50,684 --> 02:14:54,330
a is pretty useless be.

2233
02:14:55,643 --> 02:14:58,490
might be difficult to create

2234
02:14:58,490 --> 02:15:00,975
the software maybe we at least know

2235
02:15:00,975 --> 02:15:03,080
what kind of libraries there are

2236
02:15:03,080 --> 02:15:04,524
but we have no idea

2237
02:15:04,524 --> 02:15:05,767
what versions were being used and

2238
02:15:05,767 --> 02:15:10,057
so on um seam is already a

2239
02:15:10,057 --> 02:15:13,264
bit better and that it at least gives

2240
02:15:14,240 --> 02:15:20,710
for some of the things a bit more, well,

2241
02:15:20,710 --> 02:15:21,992
it gives the file that you

2242
02:15:21,992 --> 02:15:24,295
can actually get the data from,

2243
02:15:24,295 --> 02:15:26,799
but it still lacks the versions

2244
02:15:26,799 --> 02:15:30,625
and master is nothing that's stable.

2245
02:15:30,625 --> 02:15:35,291
um d has stable links um

2246
02:15:35,291 --> 02:15:38,675
main issue is yeah git

2247
02:15:38,675 --> 02:15:41,459
repositories can disappear if

2248
02:15:41,459 --> 02:15:42,800
someone decides that i don't

2249
02:15:42,800 --> 02:15:44,342
want this anymore then it

2250
02:15:44,342 --> 02:15:48,468
can become well obsolete and can

2251
02:15:48,468 --> 02:15:50,410
and can't be found anymore but

2252
02:15:50,410 --> 02:15:51,952
at the same time the same can

2253
02:15:51,952 --> 02:15:54,335
also happen with a conda package

2254
02:15:54,335 --> 02:15:55,522
It's a question.

2255
02:15:55,522 --> 02:15:57,533
These two are, in my

2256
02:15:57,533 --> 02:16:01,375
opinion, pretty much same quality.

2257
02:16:03,363 --> 02:16:07,271
It's a bit probably from ease of use,

2258
02:16:07,271 --> 02:16:10,197
preferable if you have the information

2259
02:16:10,197 --> 02:16:11,980
that they are on conda already,

2260
02:16:13,163 --> 02:16:16,189
because the dependency resolution

2261
02:16:16,189 --> 02:16:19,515
is better if they are on

2262
02:16:19,515 --> 02:16:22,121
conda, but sometimes the code just

2263
02:16:22,121 --> 02:16:25,287
isn't on the conda repositories.

2264
02:16:26,110 --> 02:16:31,059
I will go over the time capsule

2265
02:16:31,059 --> 02:16:33,463
for the future thing here

2266
02:16:33,463 --> 02:16:36,969
myself and not have it as an exercise.

2267
02:16:38,151 --> 02:16:40,435
So if we have an environment,

2268
02:16:42,138 --> 02:16:44,762
we can create an environment, or

2269
02:16:44,762 --> 02:16:45,584
if you have an environment

2270
02:16:45,584 --> 02:16:47,607
file, for example, myenv.yaml.

2271
02:16:50,552 --> 02:16:50,953
Come on.

2272
02:16:57,346 --> 02:16:59,248
and I think I just called it ML,

2273
02:16:59,248 --> 02:17:01,069
but luckily it doesn't matter

2274
02:17:01,069 --> 02:17:02,230
what file name I give it.

2275
02:17:03,612 --> 02:17:05,133
I can create an environment

2276
02:17:05,133 --> 02:17:06,975
quite easily by saying, okay,

2277
02:17:06,975 --> 02:17:07,815
well, I want this.

2278
02:17:09,537 --> 02:17:10,518
I want to create this

2279
02:17:10,518 --> 02:17:14,602
environment based from my.yaml and

2280
02:17:14,602 --> 02:17:16,864
it does matter, okay.

2281
02:17:22,849 --> 02:17:24,671
It does care about what

2282
02:17:24,671 --> 02:17:26,172
the file extension is,

2283
02:17:27,721 --> 02:17:29,185
And I created the environment already.

2284
02:17:30,268 --> 02:17:31,250
That I shouldn't have done.

2285
02:17:32,614 --> 02:17:36,664
But let's rename that.

2286
02:17:42,279 --> 02:17:44,565
So now it will be myEnv2.

2287
02:17:46,047 --> 02:17:46,928
And it will essentially

2288
02:17:46,928 --> 02:17:48,871
create that environment.

2289
02:17:48,871 --> 02:17:49,612
And then I will have

2290
02:17:49,612 --> 02:17:51,635
these dependencies listed there.

2291
02:17:51,635 --> 02:17:54,599
Of course, these dependencies don't

2292
02:17:54,599 --> 02:17:57,042
help me a lot because at least

2293
02:17:57,042 --> 02:18:01,608
if I get this from a project, I don't know

2294
02:18:01,608 --> 02:18:02,810
which NumPy version, I don't

2295
02:18:02,810 --> 02:18:03,952
know which Pandas version, I

2296
02:18:03,952 --> 02:18:05,354
don't know which Seaborn version.

2297
02:18:06,495 --> 02:18:08,258
And this is quite inconvenient.

2298
02:18:11,662 --> 02:18:12,223
Come on.

2299
02:18:15,308 --> 02:18:16,432
taking a bit longer today.

2300
02:18:16,432 --> 02:18:18,238
Okay.

2301
02:18:19,603 --> 02:18:21,229
We'll cancel that.

2302
02:18:21,229 --> 02:18:25,403
And just.

2303
02:18:28,690 --> 02:18:31,053
and just use the one that

2304
02:18:31,053 --> 02:18:33,355
I already have, which is my end.

2305
02:18:33,355 --> 02:18:37,580
So I can create that or can enter it.

2306
02:18:38,401 --> 02:18:40,263
And what I can do then is

2307
02:18:40,263 --> 02:18:41,885
I can export the environment.

2308
02:18:42,766 --> 02:18:44,788
And if I do that and

2309
02:18:44,788 --> 02:18:47,071
look into the environment file that

2310
02:18:47,071 --> 02:18:50,294
I have now created, it lists a lot of things.

2311
02:18:50,294 --> 02:18:51,476
And that is all things

2312
02:18:51,476 --> 02:18:56,281
that were installed by Conda with the version,

2313
02:18:56,281 --> 02:18:58,607
and the build version.

2314
02:18:58,607 --> 02:19:00,571
The problem with this is something

2315
02:19:00,571 --> 02:19:03,779
that build versions are

2316
02:19:03,779 --> 02:19:08,190
sometimes machine dependent.

2317
02:19:08,190 --> 02:19:09,854
That can be, for example,

2318
02:19:11,117 --> 02:19:12,961
some might work on Linux, some

2319
02:19:12,961 --> 02:19:14,405
might work on Windows.

2320
02:19:14,405 --> 02:19:18,572
that can be that they are GPU specific

2321
02:19:20,115 --> 02:19:23,019
or you have a library that

2322
02:19:23,019 --> 02:19:25,704
can use GPUs or doesn't use GPUs.

2323
02:19:25,704 --> 02:19:27,387
And depending on whether it finds

2324
02:19:27,387 --> 02:19:29,110
a GPU, it will install the one or the other.

2325
02:19:29,110 --> 02:19:33,477
So this can be a bit,

2326
02:19:34,942 --> 02:19:36,044
too much detail.

2327
02:19:36,885 --> 02:19:39,449
It's great to provide in

2328
02:19:39,449 --> 02:19:42,995
your final repository as a,

2329
02:19:43,816 --> 02:19:46,540
this was the environment that was being used

2330
02:19:46,540 --> 02:19:49,225
so that anyone who wants to reproduce this,

2331
02:19:49,225 --> 02:19:50,867
they can know exactly what

2332
02:19:50,867 --> 02:19:53,311
builds were being used for running your code.

2333
02:19:54,213 --> 02:19:55,715
And I would personally recommend

2334
02:19:55,715 --> 02:20:00,763
to have a full export available, but

2335
02:20:02,752 --> 02:20:05,721
what's for installation often

2336
02:20:06,804 --> 02:20:09,934
more convenient is something like

2337
02:20:10,816 --> 02:20:12,622
the from history.

2338
02:20:13,905 --> 02:20:17,115
And this essentially creates a file that,

2339
02:20:18,800 --> 02:20:20,463
just contains what you

2340
02:20:20,463 --> 02:20:21,424
originally installed.

2341
02:20:22,546 --> 02:20:24,830
So all dependencies below that

2342
02:20:24,830 --> 02:20:28,917
is something that it will pull independently.

2343
02:20:31,481 --> 02:20:32,764
One more thing that's not in

2344
02:20:32,764 --> 02:20:38,293
the notes, but that is relatively recent.

2345
02:20:39,893 --> 02:20:41,956
You can also do a

2346
02:20:42,837 --> 02:20:46,141
so-called no-builds export.

2347
02:20:46,141 --> 02:20:47,082
Oops.

2348
02:20:47,082 --> 02:20:49,104
Well, it went into from history now,

2349
02:20:49,104 --> 02:20:50,226
which is the same as the

2350
02:20:50,226 --> 02:20:52,348
first one, except that it

2351
02:20:52,348 --> 02:20:54,010
doesn't contain the builds.

2352
02:20:54,010 --> 02:20:57,534
This is a lot more easy to install

2353
02:20:58,736 --> 02:20:59,857
because it does not have

2354
02:21:00,678 --> 02:21:03,462
operating system dependent things,

2355
02:21:03,462 --> 02:21:06,365
which wouldn't install on

2356
02:21:06,365 --> 02:21:09,037
a different operating system.

2357
02:21:09,037 --> 02:21:11,239
but it can still have things

2358
02:21:11,239 --> 02:21:14,362
that are a bit tricky because

2359
02:21:14,362 --> 02:21:16,044
it can still have things

2360
02:21:16,044 --> 02:21:20,088
that are somewhat operating system dependent.

2361
02:21:20,088 --> 02:21:23,271
So it might still be too precise

2362
02:21:23,271 --> 02:21:24,212
because for some things you

2363
02:21:24,212 --> 02:21:26,694
need underlying operating system things,

2364
02:21:27,595 --> 02:21:29,056
operating system libraries that

2365
02:21:30,478 --> 02:21:34,902
are just not part of conda or

2366
02:21:34,902 --> 02:21:37,184
of one of these package managers.

2367
02:21:37,184 --> 02:21:39,451
And for example, pip assumes

2368
02:21:39,451 --> 02:21:41,858
that all system dependencies are

2369
02:21:41,858 --> 02:21:43,222
provided by the system.

2370
02:21:43,222 --> 02:21:45,007
It doesn't care about this.

2371
02:21:45,007 --> 02:21:46,913
While conda has a bunch

2372
02:21:46,913 --> 02:21:49,882
of more system-like libraries that

2373
02:21:49,882 --> 02:21:52,557
it also ships into the environments.

2374
02:21:52,557 --> 02:21:55,121
And this is also where we

2375
02:21:55,121 --> 02:22:00,868
can now step into the next area in this lecture,

2376
02:22:00,868 --> 02:22:03,031
where it's essentially about

2377
02:22:03,031 --> 02:22:10,862
shipping your whole operating system, i.e.

2378
02:22:10,862 --> 02:22:11,543
containers.

2379
02:22:12,845 --> 02:22:15,148
And well, there's this meme where,

2380
02:22:15,969 --> 02:22:16,730
and we had it in the

2381
02:22:16,730 --> 02:22:19,068
beginning, it works on my machine.

2382
02:22:19,068 --> 02:22:20,991
well then ship your machine.

2383
02:22:20,991 --> 02:22:24,656
And that is somewhat how Docker

2384
02:22:24,656 --> 02:22:27,539
and containers were born because

2385
02:22:27,539 --> 02:22:31,224
it sounds nice to ship a machine,

2386
02:22:31,224 --> 02:22:33,327
but you can't always just

2387
02:22:33,327 --> 02:22:34,989
take a computer and yeah, okay,

2388
02:22:34,989 --> 02:22:37,032
I'll just take that computer somewhere else.

2389
02:22:37,032 --> 02:22:38,194
No, it doesn't work.

2390
02:22:38,194 --> 02:22:39,776
However, what does work is

2391
02:22:40,997 --> 02:22:42,900
depending and a bit on the

2392
02:22:42,900 --> 02:22:45,123
operating system and on things,

2393
02:22:45,123 --> 02:22:48,107
to encapsulate as much as

2394
02:22:48,107 --> 02:22:50,250
possible of a computer into

2395
02:22:50,250 --> 02:22:52,494
a somewhat, into essentially a

2396
02:22:52,494 --> 02:22:54,717
kind of virtual machine, and

2397
02:22:54,717 --> 02:22:58,162
then run a simulated machine in the machine.

2398
02:22:58,963 --> 02:23:02,888
And containers are a small step above that.

2399
02:23:02,888 --> 02:23:04,370
They are not creating a

2400
02:23:04,370 --> 02:23:07,074
whole simulated environment, but

2401
02:23:07,074 --> 02:23:11,296
they are creating a,

2402
02:23:11,296 --> 02:23:13,361
largely simulated environment

2403
02:23:13,361 --> 02:23:14,543
where you have all the

2404
02:23:14,543 --> 02:23:16,167
system all the system level

2405
02:23:16,167 --> 02:23:19,334
dependencies in the in this container

2406
02:23:20,357 --> 02:23:21,239
and to come back to our

2407
02:23:21,239 --> 02:23:24,987
kitchen analogy so our codes

2408
02:23:24,987 --> 02:23:28,255
and scripts we said are the cooking recipes

2409
02:23:28,255 --> 02:23:30,559
And if we go for

2410
02:23:30,559 --> 02:23:32,762
containers, we have container

2411
02:23:32,762 --> 02:23:34,465
definition files that essentially

2412
02:23:34,465 --> 02:23:38,552
define what is in a container.

2413
02:23:38,552 --> 02:23:41,717
What does the container contain?

2414
02:23:43,019 --> 02:23:45,964
And they are somewhat like

2415
02:23:45,964 --> 02:23:49,990
blueprints on how to build the kitchen.

2416
02:23:49,990 --> 02:23:53,194
so what things need what plugs

2417
02:23:53,194 --> 02:23:54,797
need to be there what kind

2418
02:23:54,797 --> 02:23:57,601
of appliances need to be there and

2419
02:23:57,601 --> 02:23:59,624
so on then you have

2420
02:23:59,624 --> 02:24:02,808
the container images and those

2421
02:24:02,808 --> 02:24:06,513
are essentially showroom kitchens

2422
02:24:06,513 --> 02:24:08,977
similar to the build based

2423
02:24:08,977 --> 02:24:10,679
on these definition files

2424
02:24:10,679 --> 02:24:12,301
So built based on the

2425
02:24:12,301 --> 02:24:14,444
blueprints, you have built a

2426
02:24:14,444 --> 02:24:16,607
showroom kitchen on its own,

2427
02:24:16,607 --> 02:24:18,650
but it's not connected to anything.

2428
02:24:18,650 --> 02:24:20,452
It's just standing there.

2429
02:24:20,452 --> 02:24:21,494
The sinks are not connected

2430
02:24:21,494 --> 02:24:22,555
to the water supply and so on.

2431
02:24:23,617 --> 02:24:26,921
And when you then start

2432
02:24:26,921 --> 02:24:28,463
the container, you're taking one

2433
02:24:28,463 --> 02:24:31,167
of these images and you're starting

2434
02:24:31,167 --> 02:24:33,070
to plug in the different

2435
02:24:33,070 --> 02:24:35,133
cables and different pipes so

2436
02:24:35,133 --> 02:24:38,357
that your kitchen actually works.

2437
02:24:40,025 --> 02:24:41,326
And yeah, you can have a

2438
02:24:41,326 --> 02:24:44,330
look at these example kitchens

2439
02:24:44,330 --> 02:24:46,472
and think about what operating

2440
02:24:46,472 --> 02:24:49,115
systems they might represent.

2441
02:24:49,115 --> 02:24:54,802
So if we talk about

2442
02:24:54,802 --> 02:24:56,243
containers, we always go from

2443
02:24:56,243 --> 02:24:58,646
these definition files that just indicate,

2444
02:24:58,646 --> 02:24:59,767
okay, this is in there

2445
02:24:59,767 --> 02:25:05,914
to the actual container that's being run and

2446
02:25:07,717 --> 02:25:11,104
Containers can be built

2447
02:25:11,104 --> 02:25:14,291
to essentially bundle all necessary

2448
02:25:14,291 --> 02:25:15,674
tools and ingredients.

2449
02:25:15,674 --> 02:25:20,364
So they can even, also the ingredients.

2450
02:25:20,364 --> 02:25:22,107
So you can even bundle the

2451
02:25:22,107 --> 02:25:25,334
data into your container if you really want to.

2452
02:25:25,334 --> 02:25:26,777
It blows up the container

2453
02:25:26,777 --> 02:25:29,062
size-wise if your data is large,

2454
02:25:29,062 --> 02:25:30,364
but you can do that.

2455
02:25:30,364 --> 02:25:32,529
And the advantage to that is

2456
02:25:32,529 --> 02:25:35,555
that you have a stable thing that you can say,

2457
02:25:35,555 --> 02:25:37,419
okay, you can take this and

2458
02:25:37,419 --> 02:25:38,881
you can run it and it

2459
02:25:38,881 --> 02:25:40,465
should produce the same thing

2460
02:25:40,465 --> 02:25:42,709
that it produced locally for

2461
02:25:42,709 --> 02:25:47,038
me because it contains everything.

2462
02:25:48,942 --> 02:25:51,466
And a container and the

2463
02:25:51,466 --> 02:25:54,630
image is then essentially this thing

2464
02:25:54,630 --> 02:25:56,092
that you hand over to someone

2465
02:25:56,092 --> 02:25:58,816
else and it contains essentially anything.

2466
02:25:58,816 --> 02:26:01,820
And when you run it, you put, yeah,

2467
02:26:01,820 --> 02:26:03,442
kind of an additional layer on

2468
02:26:03,442 --> 02:26:06,627
top of that similar way

2469
02:26:06,627 --> 02:26:08,149
you can make modifications.

2470
02:26:08,149 --> 02:26:11,674
But if you shut down the running container,

2471
02:26:11,674 --> 02:26:13,716
this layer gets removed and you

2472
02:26:13,716 --> 02:26:16,300
are back at the image essentially.

2473
02:26:18,592 --> 02:26:20,440
And the definition files are

2474
02:26:20,440 --> 02:26:22,167
then the text files that define

2475
02:26:22,167 --> 02:26:23,894
a series of instructions on how

2476
02:26:23,894 --> 02:26:25,159
to build the container images.

2477
02:26:26,827 --> 02:26:29,111
And where and how can

2478
02:26:29,111 --> 02:26:30,152
you use these containers?

2479
02:26:30,152 --> 02:26:33,477
Well, they are mainly used

2480
02:26:33,477 --> 02:26:35,060
for two different purposes.

2481
02:26:37,083 --> 02:26:38,646
One is software installations

2482
02:26:38,646 --> 02:26:39,427
that are tricky.

2483
02:26:41,530 --> 02:26:45,596
For example, some database systems

2484
02:26:45,596 --> 02:26:46,979
or similar things where it's

2485
02:26:46,979 --> 02:26:49,743
just difficult to install them.

2486
02:26:49,743 --> 02:26:53,589
because they need administrative

2487
02:26:53,589 --> 02:26:54,831
privileges and so on.

2488
02:26:54,831 --> 02:26:56,975
And depending on the system,

2489
02:26:56,975 --> 02:26:58,417
you just don't have them and

2490
02:26:58,417 --> 02:27:00,600
you still want to use it.

2491
02:27:01,722 --> 02:27:03,866
So having something that allows

2492
02:27:03,866 --> 02:27:07,371
you to plug that in and to

2493
02:27:07,371 --> 02:27:10,356
still run it can be very handy.

2494
02:27:10,356 --> 02:27:11,178
Or if it's just a

2495
02:27:11,178 --> 02:27:13,061
very complicated installation where you

2496
02:27:13,061 --> 02:27:15,342
need a lot of

2497
02:27:15,342 --> 02:27:18,008
difficult to obtain libraries

2498
02:27:18,008 --> 02:27:19,551
that are necessary to run this.

2499
02:27:21,254 --> 02:27:23,419
What I can also imagine is something

2500
02:27:23,419 --> 02:27:25,864
where there is code from way

2501
02:27:25,864 --> 02:27:30,884
back and it's a lot easier to build a container

2502
02:27:30,884 --> 02:27:32,006
that can run the code,

2503
02:27:33,147 --> 02:27:35,951
then starting to write instructions

2504
02:27:35,951 --> 02:27:36,892
on how to run it.

2505
02:27:36,892 --> 02:27:38,034
Because when you write

2506
02:27:38,034 --> 02:27:39,997
these instructions, you can essentially

2507
02:27:40,898 --> 02:27:43,622
take a container definition file,

2508
02:27:43,622 --> 02:27:44,884
write these instructions inside

2509
02:27:44,884 --> 02:27:47,227
the container definition file, and

2510
02:27:47,227 --> 02:27:49,150
then you have the tool working.

2511
02:27:49,150 --> 02:27:49,931
And if you provide them

2512
02:27:49,931 --> 02:27:50,992
the container, you just have

2513
02:27:50,992 --> 02:27:52,234
the tool working and you don't

2514
02:27:52,234 --> 02:27:54,357
need to install them anymore.

2515
02:27:54,357 --> 02:27:56,601
And it's also making sure

2516
02:27:56,601 --> 02:27:58,564
that this is encapsulated.

2517
02:27:58,564 --> 02:28:00,467
This is not doing stuff

2518
02:28:00,467 --> 02:28:01,789
with your operating system.

2519
02:28:01,789 --> 02:28:04,033
So if I install a database

2520
02:28:04,834 --> 02:28:09,882
via a container, it's not modifying my system.

2521
02:28:09,882 --> 02:28:14,389
And I'm not, after shutting it down

2522
02:28:14,389 --> 02:28:16,352
and restarting my computer,

2523
02:28:16,352 --> 02:28:18,135
I don't suddenly have a

2524
02:28:18,135 --> 02:28:19,117
certain database running on

2525
02:28:19,117 --> 02:28:21,020
my computer because it,

2526
02:28:21,020 --> 02:28:21,883
Because if I had it

2527
02:28:21,883 --> 02:28:23,309
containerized, it was just running

2528
02:28:23,309 --> 02:28:23,891
in that container.

2529
02:28:23,891 --> 02:28:24,855
And if that container shut

2530
02:28:24,855 --> 02:28:26,943
down, the database is not active

2531
02:28:26,943 --> 02:28:27,907
and cannot be accessed from

2532
02:28:27,907 --> 02:28:28,650
the outside anymore.

2533
02:28:30,098 --> 02:28:33,703
So how do these container

2534
02:28:33,703 --> 02:28:36,006
recipes or reference files look?

2535
02:28:36,006 --> 02:28:37,087
This is an example

2536
02:28:37,087 --> 02:28:38,689
for Singularity definition file.

2537
02:28:40,692 --> 02:28:44,056
Singularity can use Docker images,

2538
02:28:44,056 --> 02:28:45,077
but you have to define that,

2539
02:28:45,077 --> 02:28:46,499
okay, this is coming from Docker

2540
02:28:46,499 --> 02:28:51,766
and this is using the image for Ubuntu 24.04.

2541
02:28:51,766 --> 02:28:54,310
And then when I have this

2542
02:28:54,310 --> 02:28:57,115
image, I want to install, I

2543
02:28:57,115 --> 02:28:59,378
want to do some installation,

2544
02:28:59,378 --> 02:29:00,781
some instructions that need to be done.

2545
02:29:01,622 --> 02:29:05,268
And in this case, it wants

2546
02:29:05,268 --> 02:29:10,396
to update the package cache

2547
02:29:11,297 --> 02:29:14,480
and then install Fortune, Kause and Lolcat.

2548
02:29:14,480 --> 02:29:16,963
Yeah, this is pretty,

2549
02:29:16,963 --> 02:29:20,866
well, useless container image, but

2550
02:29:20,866 --> 02:29:23,709
it's just for explaining how the things work.

2551
02:29:23,709 --> 02:29:24,991
You could have anything else

2552
02:29:24,991 --> 02:29:26,953
that you want to install here.

2553
02:29:26,953 --> 02:29:28,794
You could do compilations of

2554
02:29:28,794 --> 02:29:30,837
code that you have in there.

2555
02:29:30,837 --> 02:29:36,843
And you can also, by having a files field,

2556
02:29:36,843 --> 02:29:38,404
you can also copy files

2557
02:29:38,404 --> 02:29:41,227
from your operating system into the container.

2558
02:29:41,227 --> 02:29:42,768
and then for example compile them

2559
02:29:42,768 --> 02:29:45,351
and run and have them as compiled

2560
02:29:45,351 --> 02:29:46,752
as a compiled program you

2561
02:29:46,752 --> 02:29:49,354
can set environment variables based

2562
02:29:49,354 --> 02:29:51,776
on in this environment field

2563
02:29:51,776 --> 02:29:53,718
and then you define what

2564
02:29:53,718 --> 02:29:55,980
this container should do when it's being

2565
02:29:55,980 --> 02:29:57,861
when it's being used in this

2566
02:29:57,861 --> 02:30:00,844
case it would use fortune to

2567
02:30:00,844 --> 02:30:02,185
pipe it into cow say to

2568
02:30:02,185 --> 02:30:06,128
pipe it into lolcat which is more

2569
02:30:06,128 --> 02:30:07,149
of a more of a joke

2570
02:30:07,149 --> 02:30:10,592
than anything useful however there

2571
02:30:11,737 --> 02:30:14,520
There are definitely more

2572
02:30:14,520 --> 02:30:15,561
useful containers than this.

2573
02:30:16,502 --> 02:30:17,403
And we will come to one

2574
02:30:17,403 --> 02:30:19,224
of them a little bit later.

2575
02:30:19,224 --> 02:30:20,306
So what are the pros and

2576
02:30:20,306 --> 02:30:21,587
cons of containers in general?

2577
02:30:23,008 --> 02:30:25,030
The pro is definitely that

2578
02:30:25,030 --> 02:30:26,392
you can move workflows

2579
02:30:26,392 --> 02:30:27,493
across different platforms.

2580
02:30:28,574 --> 02:30:30,976
That being said, there's one caveat here.

2581
02:30:30,976 --> 02:30:34,320
At the moment, it's mostly

2582
02:30:34,320 --> 02:30:36,822
you can move Linux workflows

2583
02:30:36,822 --> 02:30:39,023
to other platforms.

2584
02:30:39,023 --> 02:30:41,626
I haven't really seen

2585
02:30:41,626 --> 02:30:45,030
Windows containers there because I

2586
02:30:45,030 --> 02:30:46,231
think the problem is that

2587
02:30:46,231 --> 02:30:49,534
the container softwares don't

2588
02:30:49,534 --> 02:30:51,016
really support Windows containers

2589
02:30:51,016 --> 02:30:53,659
mostly or Mac containers for that.

2590
02:30:55,281 --> 02:30:56,362
It can solve the works

2591
02:30:56,362 --> 02:30:57,443
on my machine situation

2592
02:30:58,404 --> 02:31:00,386
because you essentially, well,

2593
02:31:00,386 --> 02:31:02,128
somewhat ship your machine.

2594
02:31:03,188 --> 02:31:05,612
It allows for a more

2595
02:31:05,612 --> 02:31:07,576
stable future reproducibility because

2596
02:31:07,576 --> 02:31:09,279
if you have created the container

2597
02:31:09,279 --> 02:31:10,721
and you can provide the

2598
02:31:10,721 --> 02:31:12,765
container to someone else, they

2599
02:31:12,765 --> 02:31:16,011
can reproduce it because it has the software.

2600
02:31:16,011 --> 02:31:17,353
It has everything in there.

2601
02:31:17,353 --> 02:31:20,178
It's not, oh, this software

2602
02:31:20,178 --> 02:31:21,801
is not available anymore because

2603
02:31:21,801 --> 02:31:22,783
yeah, it is available.

2604
02:31:22,783 --> 02:31:23,864
It is in the container.

2605
02:31:23,864 --> 02:31:25,868
It doesn't need to be available.

2606
02:31:25,868 --> 02:31:28,973
Note here that this I'm

2607
02:31:28,973 --> 02:31:31,217
talking about the images, so if

2608
02:31:31,217 --> 02:31:33,941
they have been stored somewhere,

2609
02:31:33,941 --> 02:31:34,562
if you only have the

2610
02:31:34,562 --> 02:31:36,986
container definition file you're in

2611
02:31:36,986 --> 02:31:38,889
the same you're again at the

2612
02:31:38,889 --> 02:31:40,071
same point where Okay, well,

2613
02:31:40,071 --> 02:31:44,097
this can change versions and so on.

2614
02:31:46,405 --> 02:31:48,789
You can potentially use it

2615
02:31:48,789 --> 02:31:50,972
to send your computer to the data

2616
02:31:50,972 --> 02:31:52,775
when the data set is either too large

2617
02:31:52,775 --> 02:31:54,478
or cannot be transferred for

2618
02:31:54,478 --> 02:31:57,142
legal reasons like it needs to

2619
02:31:57,142 --> 02:31:58,965
be in a highly secure environment

2620
02:31:58,965 --> 02:32:03,753
and then you most often have the thing.

2621
02:32:03,753 --> 02:32:05,496
No, you can't install anything

2622
02:32:05,496 --> 02:32:06,617
from the internet.

2623
02:32:06,617 --> 02:32:07,539
The only thing that you can

2624
02:32:07,539 --> 02:32:10,202
do is you can provide us with a container

2625
02:32:10,202 --> 02:32:12,506
that we can put on the machine

2626
02:32:12,506 --> 02:32:13,587
and then you can use

2627
02:32:13,587 --> 02:32:14,789
whatever you have installed in

2628
02:32:14,789 --> 02:32:17,713
that container to analyze the data.

2629
02:32:19,276 --> 02:32:21,038
And yeah, that's in research

2630
02:32:21,038 --> 02:32:24,643
I think the most common thing

2631
02:32:24,643 --> 02:32:29,170
where it's really needed to use containers.

2632
02:32:31,073 --> 02:32:32,755
it's also possible to yeah

2633
02:32:32,755 --> 02:32:34,838
install software into a file

2634
02:32:34,838 --> 02:32:36,720
instead of into your computer

2635
02:32:36,720 --> 02:32:38,963
um you essentially transfer the file

2636
02:32:38,963 --> 02:32:41,967
this is a somewhat executable in

2637
02:32:41,967 --> 02:32:44,891
its in its own right um if you have a

2638
02:32:44,891 --> 02:32:46,413
if you have an execution

2639
02:32:46,413 --> 02:32:48,236
environment as so the so

2640
02:32:48,236 --> 02:32:51,560
docker potman obtainer or anything

2641
02:32:51,560 --> 02:32:54,584
There are some drawbacks to containers.

2642
02:32:54,584 --> 02:32:57,467
And one thing is that

2643
02:32:58,989 --> 02:33:01,672
containers can hide complexity

2644
02:33:01,672 --> 02:33:04,916
and hide problems that are

2645
02:33:04,916 --> 02:33:06,438
never solved because, oh yeah,

2646
02:33:06,438 --> 02:33:07,859
we are just hiding that in the container.

2647
02:33:08,921 --> 02:33:11,624
And that should realistically

2648
02:33:11,624 --> 02:33:15,068
be solved because yeah, they are a problem.

2649
02:33:15,068 --> 02:33:16,510
Otherwise they wouldn't be hidden.

2650
02:33:16,510 --> 02:33:19,876
So if the installation is so complex, then

2651
02:33:19,876 --> 02:33:22,460
Yeah, maybe it might be better

2652
02:33:22,460 --> 02:33:24,903
to get the installation a bit more easily done,

2653
02:33:24,903 --> 02:33:27,207
if possible, than in contrast

2654
02:33:27,207 --> 02:33:28,448
to just providing a container.

2655
02:33:31,132 --> 02:33:34,116
You can get into the, well,

2656
02:33:34,116 --> 02:33:35,318
works on my machine works

2657
02:33:35,318 --> 02:33:37,802
only in this container problem, because

2658
02:33:37,802 --> 02:33:39,584
if a container is not

2659
02:33:39,584 --> 02:33:42,048
recreatable anymore, because it

2660
02:33:42,048 --> 02:33:43,370
has some software that is

2661
02:33:43,370 --> 02:33:44,885
not available anymore,

2662
02:33:44,885 --> 02:33:47,555
Yeah, it works in the

2663
02:33:47,555 --> 02:33:49,963
container, but it doesn't work anywhere else.

2664
02:33:49,963 --> 02:33:51,950
Doesn't make things, well, at

2665
02:33:51,950 --> 02:33:52,954
least it works somewhere.

2666
02:33:54,706 --> 02:33:57,028
but it's still a bit problematic.

2667
02:33:59,331 --> 02:34:00,732
They can be difficult to modify.

2668
02:34:00,732 --> 02:34:02,274
So if you are in the situation

2669
02:34:02,274 --> 02:34:03,075
that it works only in

2670
02:34:03,075 --> 02:34:05,657
this container, then starting to modify

2671
02:34:05,657 --> 02:34:07,760
that container and modifying

2672
02:34:07,760 --> 02:34:09,161
the code that's in that container

2673
02:34:09,161 --> 02:34:11,003
can be a pain.

2674
02:34:12,404 --> 02:34:13,986
And container images can

2675
02:34:13,986 --> 02:34:15,407
become quite large.

2676
02:34:15,407 --> 02:34:17,830
We are talking about easily

2677
02:34:17,830 --> 02:34:19,552
having things like 10, 20

2678
02:34:19,552 --> 02:34:23,596
gigabyte container files very, very quickly.

2679
02:34:23,596 --> 02:34:26,481
So, and like with any software,

2680
02:34:28,905 --> 02:34:31,350
if you have, if you want

2681
02:34:31,350 --> 02:34:33,313
to install or use a container,

2682
02:34:33,313 --> 02:34:35,297
not all images can be trusted.

2683
02:34:35,297 --> 02:34:37,781
Be sure where you get the image from,

2684
02:34:37,781 --> 02:34:40,165
don't just take anything, especially

2685
02:34:40,165 --> 02:34:41,688
if you're using Docker,

2686
02:34:41,688 --> 02:34:44,032
because containers on tendency

2687
02:34:44,032 --> 02:34:46,296
run with administrative privileges.

2688
02:34:47,423 --> 02:34:51,943
So especially in Docker.

2689
02:34:51,943 --> 02:34:54,414
So if you run something in

2690
02:34:54,414 --> 02:34:56,061
a container, it essentially has

2691
02:34:56,061 --> 02:34:57,045
admin rights on your machine.

2692
02:34:59,405 --> 02:35:02,188
That's somewhat overcome on HPC

2693
02:35:02,188 --> 02:35:04,230
system with tools like AppTainer

2694
02:35:04,230 --> 02:35:07,152
or also Podman in non-root mode,

2695
02:35:08,834 --> 02:35:12,437
which run differently, but

2696
02:35:12,437 --> 02:35:13,959
on most workstations that run

2697
02:35:13,959 --> 02:35:18,023
Docker, you have a tool that

2698
02:35:18,843 --> 02:35:20,545
essentially can do anything and

2699
02:35:21,446 --> 02:35:22,827
runs on your system as root.

2700
02:35:23,748 --> 02:35:25,350
So be careful what kind

2701
02:35:25,350 --> 02:35:26,931
of containers you are using.

2702
02:35:28,480 --> 02:35:34,786
So, since exactly that problem

2703
02:35:34,786 --> 02:35:38,710
that Docker needs a route for installation,

2704
02:35:39,591 --> 02:35:41,934
we will do the exercise here

2705
02:35:41,934 --> 02:35:44,677
as a demo because I'm creating this,

2706
02:35:44,677 --> 02:35:47,459
or actually no, the

2707
02:35:47,459 --> 02:35:49,081
first exercise, something that you

2708
02:35:49,081 --> 02:35:51,544
can have a quick look for

2709
02:35:51,544 --> 02:35:54,306
five minutes as to how

2710
02:35:54,306 --> 02:35:55,888
reproducible you think this is.

2711
02:35:57,725 --> 02:36:01,590
And the second example I will demo

2712
02:36:01,590 --> 02:36:04,835
for so that you see where

2713
02:36:04,835 --> 02:36:06,958
things can be useful or how

2714
02:36:06,958 --> 02:36:07,979
containers can be useful.

2715
02:36:09,421 --> 02:36:10,483
So let's have a look for

2716
02:36:10,483 --> 02:36:17,052
five minutes at this time travel exercise.

2717
02:36:18,093 --> 02:36:20,236
It's essentially about

2718
02:36:20,236 --> 02:36:21,858
um writing down what you

2719
02:36:21,858 --> 02:36:23,361
notice with the with this

2720
02:36:23,361 --> 02:36:26,526
docker container um how reproducible

2721
02:36:26,526 --> 02:36:28,108
that is how good the docker

2722
02:36:28,108 --> 02:36:31,693
uh the docker file is um or

2723
02:36:31,693 --> 02:36:34,498
the uh in this case the singularity file

2724
02:36:34,498 --> 02:36:36,982
as in specifying what goes in there

2725
02:36:36,982 --> 02:36:39,986
and if we can reproduce this

2726
02:36:39,986 --> 02:36:42,951
just based on the um on

2727
02:36:42,951 --> 02:36:45,855
the docker on the singularity definition file

2728
02:36:47,489 --> 02:36:50,104
Okay, see you back at 22.

2729
02:36:50,104 --> 02:36:51,854
And then we are probably

2730
02:36:51,854 --> 02:36:53,483
also quickly getting to the wrap up.

2731
02:41:37,098 --> 02:41:41,427
and welcome back so um to

2732
02:41:41,427 --> 02:41:44,273
quickly go over what they um

2733
02:41:44,273 --> 02:41:46,217
what the file has i think

2734
02:41:46,217 --> 02:41:48,101
the biggest issue um if you

2735
02:41:48,101 --> 02:41:49,544
really want to reproduce this one

2736
02:41:49,544 --> 02:41:51,788
is that we have a latest

2737
02:41:51,788 --> 02:41:53,492
here which essentially means that

2738
02:41:53,492 --> 02:41:55,576
this is some version

2739
02:41:55,576 --> 02:41:57,999
There's also the copying of

2740
02:41:57,999 --> 02:42:01,103
local files that specifically say

2741
02:42:01,103 --> 02:42:04,407
in some folder that's not in the same folder.

2742
02:42:04,407 --> 02:42:06,850
So this could be from anywhere.

2743
02:42:06,850 --> 02:42:07,711
And we don't even know if

2744
02:42:07,711 --> 02:42:11,636
this is part of the repository

2745
02:42:11,636 --> 02:42:13,458
itself or from somewhere else.

2746
02:42:13,458 --> 02:42:15,320
So these are the two biggest

2747
02:42:15,320 --> 02:42:18,464
flags in here that make

2748
02:42:18,464 --> 02:42:21,428
reproduction somewhat difficult.

2749
02:42:21,428 --> 02:42:24,373
I will quickly show you

2750
02:42:24,373 --> 02:42:29,922
one thing where containers come in handy.

2751
02:42:29,922 --> 02:42:30,763
And that is, for example,

2752
02:42:31,604 --> 02:42:33,047
running an RStudio server.

2753
02:42:34,028 --> 02:42:36,632
And I've already started with Docker Run.

2754
02:42:36,632 --> 02:42:37,634
I don't have RStudio on

2755
02:42:37,634 --> 02:42:40,078
my machine normally because I

2756
02:42:40,078 --> 02:42:41,380
rarely work with R nowadays.

2757
02:42:42,922 --> 02:42:44,585
But like this, I can

2758
02:42:44,585 --> 02:42:47,149
essentially get an online RStudio

2759
02:42:49,542 --> 02:42:52,825
and have RStudio loaded and can

2760
02:42:52,825 --> 02:42:54,327
run my R stuff.

2761
02:42:54,327 --> 02:42:56,189
And if I have something that

2762
02:42:56,189 --> 02:42:57,771
says it needs R 3.3 or

2763
02:42:58,752 --> 02:43:02,335
whatever, or some older R version,

2764
02:43:02,335 --> 02:43:05,258
I can specify which version I

2765
02:43:05,258 --> 02:43:09,783
want by simply changing my docker run command.

2766
02:43:09,783 --> 02:43:13,727
And that's quite convenient just

2767
02:43:13,727 --> 02:43:18,027
to get things to run, just to try things out.

2768
02:43:18,027 --> 02:43:21,010
So as I mentioned, containers

2769
02:43:21,010 --> 02:43:22,792
are quite useful in helping

2770
02:43:22,792 --> 02:43:24,354
setting up complex systems and

2771
02:43:24,354 --> 02:43:27,157
complex setups for specific software,

2772
02:43:27,157 --> 02:43:32,043
and they can help you isolating things

2773
02:43:32,043 --> 02:43:34,285
for testing stuff without messing

2774
02:43:34,285 --> 02:43:35,667
up your own computing environment

2775
02:43:35,667 --> 02:43:37,269
in your own system.

2776
02:43:37,269 --> 02:43:38,510
So you don't need to

2777
02:43:38,510 --> 02:43:41,193
install more complex things and

2778
02:43:41,193 --> 02:43:44,577
thereby put trash into your

2779
02:43:44,577 --> 02:43:46,439
system that you actually don't want

2780
02:43:46,439 --> 02:43:47,140
to have in there.

2781
02:43:49,381 --> 02:43:51,190
So where to go from here?

2782
02:43:54,025 --> 02:43:54,970
Well,

2783
02:43:56,502 --> 02:43:57,724
We've mentioned a lot of

2784
02:43:57,724 --> 02:43:59,086
different things in this lecture.

2785
02:43:59,086 --> 02:44:00,688
And I just want to come

2786
02:44:00,688 --> 02:44:02,731
back to what [name] said in the beginning.

2787
02:44:03,712 --> 02:44:05,615
Don't get stressed with these.

2788
02:44:05,615 --> 02:44:07,317
It's not, you have to use

2789
02:44:07,317 --> 02:44:09,200
this all the time.

2790
02:44:09,200 --> 02:44:10,421
It's, we wanted to present

2791
02:44:10,421 --> 02:44:12,104
you tools that exist.

2792
02:44:12,104 --> 02:44:13,626
And we wanted to give you something

2793
02:44:13,626 --> 02:44:17,011
that helps in reproducing things,

2794
02:44:17,011 --> 02:44:19,674
that helps in making you be

2795
02:44:19,674 --> 02:44:23,840
able to come back to your code and reuse it.

2796
02:44:23,840 --> 02:44:28,205
because this is something

2797
02:44:28,205 --> 02:44:30,707
that's quite important for you

2798
02:44:30,707 --> 02:44:33,410
and for people that want to use your code.

2799
02:44:35,573 --> 02:44:36,614
As for the workflow tools,

2800
02:44:37,955 --> 02:44:38,696
as also mentioned in the

2801
02:44:38,696 --> 02:44:40,178
lecture, probably in a lot

2802
02:44:40,178 --> 02:44:43,341
of situations, they are not really needed.

2803
02:44:43,341 --> 02:44:45,804
But if the workflows that you

2804
02:44:45,804 --> 02:44:48,507
need to run become more complex

2805
02:44:48,507 --> 02:44:53,152
or you start continuously collecting data,

2806
02:44:53,152 --> 02:44:55,118
They become more and more useful

2807
02:44:55,118 --> 02:44:56,061
and you might really want

2808
02:44:56,061 --> 02:44:58,026
to think about starting to build

2809
02:44:58,026 --> 02:45:00,654
a workflow in a workflow tool and

2810
02:45:00,654 --> 02:45:04,666
not just in a script.

2811
02:45:04,666 --> 02:45:06,351
Containers, they...

2812
02:45:08,018 --> 02:45:09,420
are sometimes amazing and

2813
02:45:09,420 --> 02:45:11,763
sometimes really annoying because

2814
02:45:11,763 --> 02:45:14,206
it's another level of complexity

2815
02:45:14,206 --> 02:45:16,730
that you need to understand

2816
02:45:16,730 --> 02:45:18,452
and that you need to be able to run.

2817
02:45:18,452 --> 02:45:19,553
But on the other end,

2818
02:45:19,553 --> 02:45:21,236
sometimes you just can't get

2819
02:45:21,236 --> 02:45:23,118
around using containers because

2820
02:45:23,118 --> 02:45:27,004
the situation requires it, or it's

2821
02:45:27,004 --> 02:45:28,626
so difficult to get something

2822
02:45:28,626 --> 02:45:31,670
to run otherwise that the

2823
02:45:31,670 --> 02:45:34,093
container complexity is a lot simpler.

2824
02:45:35,643 --> 02:45:38,389
And you can run tools, Linux

2825
02:45:38,389 --> 02:45:39,832
tools on your Windows or on

2826
02:45:39,832 --> 02:45:42,798
your Mac that weren't

2827
02:45:42,798 --> 02:45:44,060
easily runnable otherwise.

2828
02:45:46,004 --> 02:45:47,327
It might allow you to have

2829
02:45:47,327 --> 02:45:49,571
a lot more easy installation instructions.

2830
02:45:50,614 --> 02:45:51,736
Yeah.

2831
02:45:51,736 --> 02:45:53,820
And you get a fully configured environment.

2832
02:45:55,235 --> 02:45:57,801
So I think what we want

2833
02:45:57,801 --> 02:45:59,204
to really stress that is

2834
02:46:00,086 --> 02:46:01,930
something that's useful for every

2835
02:46:01,930 --> 02:46:03,634
project is having a clear

2836
02:46:03,634 --> 02:46:06,199
directory and file structure sticking

2837
02:46:06,199 --> 02:46:08,905
to it and keeping it up to date.

2838
02:46:08,905 --> 02:46:09,867
So not just having the

2839
02:46:09,867 --> 02:46:11,331
structure, but also filling the

2840
02:46:11,331 --> 02:46:12,433
structure with life.

2841
02:46:13,375 --> 02:46:17,626
record your workflow in a script

2842
02:46:17,626 --> 02:46:19,290
and write it down in a script

2843
02:46:19,290 --> 02:46:22,278
so that once someone else wants to do it,

2844
02:46:22,278 --> 02:46:24,323
they can run a script and

2845
02:46:24,323 --> 02:46:30,338
they can get the resource that you present.

2846
02:46:31,229 --> 02:46:32,671
Or also, if I may

2847
02:46:32,671 --> 02:46:34,774
interject, I mean workflow, if you

2848
02:46:34,774 --> 02:46:37,839
have to have any other manipulation steps

2849
02:46:37,839 --> 02:46:39,562
and you have to modify data

2850
02:46:39,562 --> 02:46:41,625
and you maybe are not using

2851
02:46:41,625 --> 02:46:44,629
code for that, which is always the best idea.

2852
02:46:44,629 --> 02:46:47,514
But if you can't automate certain steps,

2853
02:46:47,514 --> 02:46:48,876
also then write down a

2854
02:46:48,876 --> 02:46:51,019
workflow that details those steps.

2855
02:46:51,019 --> 02:46:52,421
So it doesn't have to be

2856
02:46:52,421 --> 02:46:53,964
in a workflow management tool.

2857
02:46:53,964 --> 02:46:55,646
It doesn't have to be a script,

2858
02:46:55,646 --> 02:46:57,489
but it has to be documented

2859
02:46:57,489 --> 02:46:59,512
what to do in which order.

2860
02:46:59,512 --> 02:47:03,639
I think that's the important thing to note.

2861
02:47:03,639 --> 02:47:06,324
For me, one very, very,

2862
02:47:06,324 --> 02:47:08,007
very important point is create

2863
02:47:08,007 --> 02:47:09,650
a dependency list and keep it updated.

2864
02:47:10,812 --> 02:47:12,535
Optimally do it in an environment file,

2865
02:47:12,535 --> 02:47:14,719
but keep a list of

2866
02:47:14,719 --> 02:47:16,482
the dependencies with versions

2867
02:47:16,482 --> 02:47:17,183
that you're using.

2868
02:47:18,445 --> 02:47:22,509
And personally, if I would

2869
02:47:22,509 --> 02:47:24,131
be running something in a

2870
02:47:24,131 --> 02:47:28,496
conda environment nowadays and publish that,

2871
02:47:28,496 --> 02:47:31,098
I would provide the full export

2872
02:47:31,999 --> 02:47:33,661
and probably the from

2873
02:47:36,504 --> 02:47:38,486
history version because that's

2874
02:47:38,486 --> 02:47:40,128
what I installed and this is

2875
02:47:40,128 --> 02:47:41,930
what I got kind of.

2876
02:47:41,930 --> 02:47:43,171
So you can follow the exact

2877
02:47:43,171 --> 02:47:44,973
steps that I did

2878
02:47:44,973 --> 02:47:46,976
which might not lead to the same results,

2879
02:47:46,976 --> 02:47:49,800
but it can also look into, okay,

2880
02:47:49,800 --> 02:47:51,303
what has now changed between

2881
02:47:51,303 --> 02:47:54,227
what he was doing and what I am doing now.

2882
02:47:55,489 --> 02:47:57,091
And you can always take

2883
02:47:57,091 --> 02:47:58,994
the from history export and

2884
02:47:58,994 --> 02:48:00,456
populate it with additional

2885
02:48:00,456 --> 02:48:01,698
version information.

2886
02:48:01,698 --> 02:48:03,040
So in the example, we had

2887
02:48:03,040 --> 02:48:04,883
NumPy without a version, but of

2888
02:48:04,883 --> 02:48:06,065
course you can take that

2889
02:48:06,886 --> 02:48:09,290
from your full environment export

2890
02:48:09,290 --> 02:48:10,772
and add the versions for the

2891
02:48:10,772 --> 02:48:12,800
major packages in there.

2892
02:48:12,800 --> 02:48:16,325
And finally, if you at least consider

2893
02:48:16,325 --> 02:48:20,831
that someone wants to reproduce your work,

2894
02:48:20,831 --> 02:48:22,153
and hopefully people will,

2895
02:48:23,675 --> 02:48:26,018
and anything that you can do

2896
02:48:26,018 --> 02:48:30,043
to make their life easier and your life,

2897
02:48:30,043 --> 02:48:31,405
very likely actually your life,

2898
02:48:31,405 --> 02:48:33,208
if you build on your previous

2899
02:48:33,208 --> 02:48:37,153
work, is really helping yourself and others.

2900
02:48:40,137 --> 02:48:41,520
There's a lot of additional

2901
02:48:41,520 --> 02:48:43,865
further reading that you can have a look into.

2902
02:48:43,865 --> 02:48:48,235
And I think with that, I

2903
02:48:48,235 --> 02:48:51,202
would give the head over to

2904
02:48:51,202 --> 02:48:53,387
[name] for some final words.

2905
02:48:55,240 --> 02:48:57,806
yes thank you [name] so we

2906
02:48:57,806 --> 02:48:59,109
are perfect on time because we

2907
02:48:59,109 --> 02:49:01,334
have one minute left with our

2908
02:49:01,334 --> 02:49:05,364
day four of code refinery at

2909
02:49:05,364 --> 02:49:08,050
the bottom of the notes document

2910
02:49:08,050 --> 02:49:09,233
maybe if you are not could

2911
02:49:09,233 --> 02:49:10,917
switch to the notes document

2912
02:49:10,917 --> 02:49:16,404
we have this feedback so if

2913
02:49:16,404 --> 02:49:18,527
you click on the notes document

2914
02:49:18,527 --> 02:49:21,110
and edit you can add on the

2915
02:49:21,110 --> 02:49:23,674
top there's a poll where you can specify

2916
02:49:23,674 --> 02:49:25,896
if it was too fast too slow and

2917
02:49:25,896 --> 02:49:26,958
so on and i can see

2918
02:49:26,958 --> 02:49:28,620
already some people are answering

2919
02:49:28,620 --> 02:49:30,342
and in general something good

2920
02:49:30,342 --> 02:49:31,884
something to improve and any

2921
02:49:31,884 --> 02:49:35,068
other feedback or questions i

2922
02:49:35,068 --> 02:49:35,769
think more or less we

2923
02:49:35,769 --> 02:49:40,195
have covered everything and we try to give

2924
02:49:40,195 --> 02:49:42,180
useful answers, hopefully, to

2925
02:49:42,180 --> 02:49:43,644
the notes document.

2926
02:49:43,644 --> 02:49:45,067
So we are perfect on

2927
02:49:45,067 --> 02:49:48,817
time, unless there's anything else

2928
02:49:48,817 --> 02:49:53,428
that we should discuss, you know, [name]?

2929
02:49:54,843 --> 02:49:58,050
not on my side all right

2930
02:49:58,050 --> 02:50:00,255
so thank you again so much to

2931
02:50:00,255 --> 02:50:01,838
[name] and to [name] for being

2932
02:50:01,838 --> 02:50:04,223
instructors of day four and we

2933
02:50:04,223 --> 02:50:07,050
will meet again next week for

2934
02:50:07,050 --> 02:50:10,958
day five where we will kind of continue on this

2935
02:50:10,958 --> 02:50:14,402
same topics but more related

2936
02:50:14,402 --> 02:50:17,385
to the collaborative side of things

2937
02:50:17,385 --> 02:50:18,627
when you need to basically

2938
02:50:18,627 --> 02:50:20,128
agree with others whether

2939
02:50:20,128 --> 02:50:21,730
they are collaborators or stranger

2940
02:50:21,730 --> 02:50:23,232
how you will work together

2941
02:50:23,232 --> 02:50:25,034
on a specific project or on

2942
02:50:25,034 --> 02:50:28,397
a specific software and so thank

2943
02:50:28,397 --> 02:50:29,719
you again for the feedback and

2944
02:50:29,719 --> 02:50:34,384
see you in seven days bye bye bye see you

