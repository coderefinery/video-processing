1
00:03:34,765 --> 00:03:40,052
All right, and live we are.

2
00:03:41,014 --> 00:03:41,755
Hello, everyone.

3
00:03:42,716 --> 00:03:44,839
Welcome to pre-workshop hangout.

4
00:03:45,880 --> 00:03:47,683
Today, only five minutes, but

5
00:03:47,683 --> 00:03:49,044
we are still here.

6
00:03:49,044 --> 00:03:52,389
And let's do maybe a quick sound check.

7
00:03:52,389 --> 00:03:54,332
So we have [name] here

8
00:03:54,332 --> 00:03:57,816
as our streamer today, connecting

9
00:03:57,816 --> 00:03:59,258
from Aalto University.

10
00:03:59,258 --> 00:04:00,861
Then we have [name] and

11
00:04:00,861 --> 00:04:04,583
[name] as our instructors for today.

12
00:04:04,583 --> 00:04:05,524
[name], do you want to

13
00:04:05,524 --> 00:04:07,206
start this audio check?

14
00:04:08,247 --> 00:04:09,509
Yeah.

15
00:04:09,509 --> 00:04:11,151
So I guess we'll count

16
00:04:11,151 --> 00:04:11,832
one, two, three, four.

17
00:04:13,013 --> 00:04:13,614
One.

18
00:04:15,436 --> 00:04:15,757
Two.

19
00:04:15,757 --> 00:04:15,997
Okay.

20
00:04:17,459 --> 00:04:21,784
So order is [name], [name], [name], [name].

21
00:04:21,784 --> 00:04:22,625
Okay.

22
00:04:22,625 --> 00:04:22,765
One.

23
00:04:24,507 --> 00:04:24,708
Two.

24
00:04:25,629 --> 00:04:25,869
Three.

25
00:04:26,670 --> 00:04:26,850
Four.

26
00:04:28,252 --> 00:04:28,532
Okay.

27
00:04:28,532 --> 00:04:30,214
At least on my screen it looks good.

28
00:04:31,035 --> 00:04:32,357
Sounds fine.

29
00:04:32,357 --> 00:04:33,035
If

30
00:04:33,035 --> 00:04:35,158
someone who's listening on Twitch

31
00:04:35,158 --> 00:04:35,838
can let us know.

32
00:04:35,838 --> 00:04:40,604
That's great.

33
00:04:40,604 --> 00:04:41,125
All right.

34
00:04:44,228 --> 00:04:45,770
Yes, let's take a look

35
00:04:45,770 --> 00:04:48,033
at our notes document.

36
00:04:48,033 --> 00:04:50,896
So for everyone who is here and not

37
00:04:50,896 --> 00:04:53,339
yet familiar with that, it's

38
00:04:53,339 --> 00:04:54,440
what we're showing on screen.

39
00:04:54,440 --> 00:04:58,245
It's what you got via email.

40
00:04:58,245 --> 00:05:01,629
Unfortunately, today, not right

41
00:05:01,629 --> 00:05:03,038
before this stream,

42
00:05:03,038 --> 00:05:05,220
because of technical difficulties,

43
00:05:05,220 --> 00:05:07,783
but you got it like when

44
00:05:07,783 --> 00:05:10,146
you registered to the workshop,

45
00:05:10,146 --> 00:05:11,787
there's a link to the notes document.

46
00:05:13,209 --> 00:05:13,889
And this is what you're

47
00:05:13,889 --> 00:05:14,991
seeing here on screen.

48
00:05:14,991 --> 00:05:16,492
And [name], if you could show

49
00:05:16,492 --> 00:05:21,037
us how this can be edited.

50
00:05:21,037 --> 00:05:22,699
So everyone can find a

51
00:05:22,699 --> 00:05:24,280
little pen symbol either on the

52
00:05:24,280 --> 00:05:27,584
upper left or upper right of the document.

53
00:05:28,605 --> 00:05:29,466
Trying to hide.

54
00:05:29,466 --> 00:05:29,586
Okay.

55
00:05:29,586 --> 00:05:30,447
Now it's visible maybe.

56
00:05:32,502 --> 00:05:35,047
Yes, so for [name], it's on the upper left.

57
00:05:35,047 --> 00:05:37,111
So there is a pen symbol

58
00:05:37,111 --> 00:05:40,057
which brings you into edit mode or

59
00:05:40,057 --> 00:05:41,860
what [name] just clicked is

60
00:05:41,860 --> 00:05:47,133
the both double view or however it is called.

61
00:05:47,133 --> 00:05:48,695
to see both the rendered

62
00:05:48,695 --> 00:05:50,138
version and the edit version.

63
00:05:50,138 --> 00:05:51,480
And if we scroll down there,

64
00:05:51,480 --> 00:05:55,106
now we will have some

65
00:05:55,106 --> 00:05:56,928
icebreaker questions prepared for you.

66
00:05:58,070 --> 00:06:00,254
So you can get used to the document

67
00:06:00,254 --> 00:06:01,235
and get to know a little

68
00:06:01,235 --> 00:06:02,617
bit about each other who is

69
00:06:02,617 --> 00:06:04,460
here all in the workshop.

70
00:06:04,460 --> 00:06:05,682
So first question there is

71
00:06:05,682 --> 00:06:06,944
what programming languages are

72
00:06:06,944 --> 00:06:08,186
you normally working with?

73
00:06:08,186 --> 00:06:09,709
And I will ask that to

74
00:06:09,709 --> 00:06:11,491
our instructors for today.

75
00:06:11,491 --> 00:06:12,333
So what are your

76
00:06:12,333 --> 00:06:14,997
daily programming languages, [name]?

77
00:06:16,141 --> 00:06:19,204
Well, it's mostly Python, I'd say,

78
00:06:19,204 --> 00:06:21,206
and maybe then it's occasionally

79
00:06:21,206 --> 00:06:24,329
some bash for smaller scripting,

80
00:06:25,190 --> 00:06:25,891
but that's mostly it.

81
00:06:26,892 --> 00:06:27,112
Okay.

82
00:06:27,112 --> 00:06:29,294
How about [name]?

83
00:06:29,294 --> 00:06:29,895
Yeah.

84
00:06:29,895 --> 00:06:32,097
So I'm working a lot with

85
00:06:32,097 --> 00:06:35,120
bash in Python in daily work.

86
00:06:36,361 --> 00:06:37,863
Then in some code projects where

87
00:06:37,863 --> 00:06:38,924
I'm one of the main

88
00:06:38,924 --> 00:06:41,186
developers, I'm using Fortran and

89
00:06:41,186 --> 00:06:43,408
also CUDA for GPU programming.

90
00:06:44,990 --> 00:06:45,875
Okay.

91
00:06:45,875 --> 00:06:47,738
So for everyone watching today, know

92
00:06:47,738 --> 00:06:48,779
that you can ask also

93
00:06:48,779 --> 00:06:51,202
questions about these languages today.

94
00:06:51,202 --> 00:06:53,005
And then we have also a

95
00:06:53,005 --> 00:06:54,547
few people working here behind

96
00:06:54,547 --> 00:06:56,189
the scenes and answering questions

97
00:06:56,189 --> 00:06:57,290
in this document.

98
00:06:57,290 --> 00:06:58,552
So this document is also used

99
00:06:58,552 --> 00:07:02,377
for asking questions during the

100
00:07:02,377 --> 00:07:04,340
workshop to our instructors and

101
00:07:04,340 --> 00:07:06,182
our friends behind the scenes.

102
00:07:06,182 --> 00:07:08,586
And you can also, if you

103
00:07:08,586 --> 00:07:09,487
know the answer to some

104
00:07:09,487 --> 00:07:10,949
questions appearing here, you can

105
00:07:10,949 --> 00:07:13,793
of course also answer yourself.

106
00:07:14,894 --> 00:07:15,760
Then we have

107
00:07:15,760 --> 00:07:17,767
Another icebreaker question.

108
00:07:17,767 --> 00:07:20,477
What does testing your code

109
00:07:20,477 --> 00:07:23,266
mean for you and how do you test?

110
00:07:23,266 --> 00:07:26,277
So in your daily life, do you test, [name]?

111
00:07:28,096 --> 00:07:32,440
So well, not in my sort of

112
00:07:32,440 --> 00:07:33,822
work day to day stuff, but

113
00:07:33,822 --> 00:07:35,423
in the in the projects that

114
00:07:35,423 --> 00:07:37,906
I'm doing some more actual programming

115
00:07:37,906 --> 00:07:39,387
that I do test quite a lot.

116
00:07:39,387 --> 00:07:39,587
Yes.

117
00:07:41,929 --> 00:07:43,111
Yeah, I guess we'll talk

118
00:07:43,111 --> 00:07:44,212
more later a little bit

119
00:07:44,212 --> 00:07:45,633
about the different types of

120
00:07:45,633 --> 00:07:46,974
testing that are maybe relevant.

121
00:07:46,974 --> 00:07:47,795
Yeah.

122
00:07:47,795 --> 00:07:49,117
Yeah.

123
00:07:50,097 --> 00:07:50,678
How about [name]?

124
00:07:53,301 --> 00:07:54,762
Yes, I'm

125
00:07:56,345 --> 00:07:59,548
I'm using testing in various contexts,

126
00:07:59,548 --> 00:08:04,872
both for a product where I'm

127
00:08:04,872 --> 00:08:07,414
one of the developers, and also

128
00:08:07,414 --> 00:08:10,157
when I install codes on a

129
00:08:10,157 --> 00:08:12,399
supercomputer at PDC in Stockholm

130
00:08:12,399 --> 00:08:13,099
where I'm working.

131
00:08:13,900 --> 00:08:16,822
Then, yeah, maybe by default,

132
00:08:16,822 --> 00:08:17,843
we run through some test

133
00:08:17,843 --> 00:08:20,345
suites after having built and

134
00:08:20,345 --> 00:08:21,486
installed a program.

135
00:08:25,249 --> 00:08:25,930
Okay.

136
00:08:30,145 --> 00:08:33,132
So we still have one

137
00:08:33,132 --> 00:08:35,216
minute before we're officially

138
00:08:35,216 --> 00:08:37,842
starting to briefly want to

139
00:08:37,842 --> 00:08:40,428
introduce yourself to our

140
00:08:40,428 --> 00:08:42,993
participants, where you are.

141
00:08:42,993 --> 00:08:46,561
Located Where do you work, what

142
00:08:46,561 --> 00:08:47,884
do you work [name].

143
00:08:49,602 --> 00:08:50,723
Yeah, sure.

144
00:08:50,723 --> 00:08:52,885
So I work at CSC at

145
00:08:52,885 --> 00:08:54,526
CSC as a machine learning specialist.

146
00:08:55,667 --> 00:09:00,151
And yeah, so I mostly help

147
00:09:00,151 --> 00:09:02,793
users use our supercomputers, mostly

148
00:09:02,793 --> 00:09:03,814
in the machine learning context,

149
00:09:04,795 --> 00:09:06,917
you know, GPU stuff.

150
00:09:07,978 --> 00:09:09,199
And then I work in

151
00:09:09,199 --> 00:09:12,101
several like research projects, also

152
00:09:12,101 --> 00:09:13,463
in a similar support role, but

153
00:09:13,463 --> 00:09:14,904
kind of a little bit more like

154
00:09:14,904 --> 00:09:17,246
embedded in a in a group

155
00:09:17,246 --> 00:09:18,647
that does the actual research.

156
00:09:20,517 --> 00:09:23,062
Okay, how about [name]?

157
00:09:23,062 --> 00:09:26,147
Yeah, so I work at the PDC Center

158
00:09:26,147 --> 00:09:29,013
for High Performance Computing at

159
00:09:29,013 --> 00:09:31,778
KTH in Stockholm, where we

160
00:09:31,778 --> 00:09:33,541
are currently operating the

161
00:09:33,541 --> 00:09:36,506
largest supercomputer in the country.

162
00:09:36,506 --> 00:09:38,530
And that's a machine named

163
00:09:38,530 --> 00:09:43,940
.del, which has AMD CPUs and GPUs.

164
00:09:43,940 --> 00:09:46,323
So some of you might recognize this

165
00:09:46,323 --> 00:09:48,806
as the similar configuration as

166
00:09:48,806 --> 00:09:52,630
you have on the Lumi supercomputer in Finland.

167
00:09:52,630 --> 00:09:56,034
So it's a lot of commonalities there.

168
00:09:57,135 --> 00:09:58,797
And I have a background

169
00:09:58,797 --> 00:10:00,740
in material science research.

170
00:10:00,740 --> 00:10:01,821
So a lot of the work that

171
00:10:01,821 --> 00:10:04,104
I do at BDC is connecting

172
00:10:04,104 --> 00:10:07,953
to material science simulations and programs.

173
00:10:07,953 --> 00:10:09,275
And related to that, I

174
00:10:09,275 --> 00:10:10,717
am then working quite a

175
00:10:10,717 --> 00:10:12,440
bit with product traditional languages

176
00:10:12,440 --> 00:10:14,263
such as Fortran and C++.

177
00:10:14,263 --> 00:10:23,016
Okay, now we have one minute

178
00:10:23,016 --> 00:10:25,080
after the hour so we can

179
00:10:25,080 --> 00:10:26,923
officially get started here.

180
00:10:28,645 --> 00:10:32,067
Welcome everyone to day

181
00:10:32,067 --> 00:10:35,292
eight of the Code Refinery workshop,

182
00:10:35,292 --> 00:10:37,034
where we'll be talking

183
00:10:37,034 --> 00:10:40,078
and practicing automated testing.

184
00:10:42,101 --> 00:10:43,784
For those of you that have just been here,

185
00:10:43,784 --> 00:10:47,269
we have here with me, [name]

186
00:10:47,269 --> 00:10:48,370
and [name], who will be

187
00:10:48,370 --> 00:10:49,872
the instructors for today.

188
00:10:49,872 --> 00:10:53,077
And also [name] is here doing

189
00:10:53,077 --> 00:10:55,560
the behind the scenes, the streaming

190
00:10:55,560 --> 00:10:56,462
set up for you.

191
00:10:56,462 --> 00:10:57,886
My name is [name].

192
00:10:57,886 --> 00:11:00,249
I'm project manager for Code Refinery

193
00:11:00,249 --> 00:11:03,512
and just briefly here to say

194
00:11:03,512 --> 00:11:04,794
hi and in the very end.

195
00:11:06,075 --> 00:11:07,176
So what I wanted to show

196
00:11:07,176 --> 00:11:11,841
you is first our workshop event page.

197
00:11:11,841 --> 00:11:14,564
[name], if you could switch to that one.

198
00:11:15,425 --> 00:11:16,586
Yes, so hopefully you know

199
00:11:16,586 --> 00:11:18,629
that that's the page where you registered

200
00:11:18,629 --> 00:11:20,210
and here you can find the

201
00:11:20,210 --> 00:11:24,375
link to our lesson materials for today.

202
00:11:24,375 --> 00:11:26,675
If you scroll down,

203
00:11:26,675 --> 00:11:28,337
through the schedule towards

204
00:11:28,337 --> 00:11:31,101
day eight behind the automated

205
00:11:31,101 --> 00:11:34,425
testing name, there's a link to the materials.

206
00:11:35,767 --> 00:11:37,449
And there you can also

207
00:11:37,449 --> 00:11:38,851
find all the questions and

208
00:11:38,851 --> 00:11:40,814
answers from the previous days.

209
00:11:40,814 --> 00:11:42,576
If you go in the upper

210
00:11:44,419 --> 00:11:47,463
navigation bar under questions

211
00:11:47,463 --> 00:11:49,425
and also information about their certificates.

212
00:11:52,129 --> 00:11:54,232
Let's wait a moment for

213
00:11:54,232 --> 00:11:55,213
scrolling all the way up.

214
00:11:59,092 --> 00:12:03,937
Okay, and then let's switch

215
00:12:03,937 --> 00:12:05,279
to our notes document.

216
00:12:05,279 --> 00:12:06,901
That's the main document that

217
00:12:06,901 --> 00:12:08,523
you will need for today.

218
00:12:09,564 --> 00:12:11,646
So this link you got

219
00:12:11,646 --> 00:12:15,851
with the registration to this workshop,

220
00:12:15,851 --> 00:12:17,112
and that will be our

221
00:12:17,112 --> 00:12:18,694
communication channel for today.

222
00:12:18,694 --> 00:12:21,077
So here you can ask questions.

223
00:12:21,077 --> 00:12:22,779
We will in between ask some questions,

224
00:12:22,779 --> 00:12:23,860
how it's going during the

225
00:12:23,860 --> 00:12:26,523
exercises to identify if we need

226
00:12:26,523 --> 00:12:29,213
more or less time for them.

227
00:12:29,213 --> 00:12:31,016
And it's also the place where

228
00:12:31,016 --> 00:12:32,858
you can find our icebreaker.

229
00:12:32,858 --> 00:12:34,360
So when you are clicking the

230
00:12:34,360 --> 00:12:35,662
link in the email to the

231
00:12:35,662 --> 00:12:38,847
notes document, you will find it in view mode.

232
00:12:38,847 --> 00:12:40,129
So that looks something like

233
00:12:40,129 --> 00:12:42,092
what is shown right now on screen to the right.

234
00:12:44,455 --> 00:12:46,478
To go and edit this document,

235
00:12:47,840 --> 00:12:49,242
you can go all the way to

236
00:12:49,242 --> 00:12:50,624
the top of the document and

237
00:12:50,624 --> 00:12:51,946
find the little pen symbol.

238
00:12:51,946 --> 00:12:54,273
It's either up to the right somewhere.

239
00:12:54,273 --> 00:12:55,595
or up to the left where it is

240
00:12:55,595 --> 00:12:57,997
for [name] showing the clicking

241
00:12:57,997 --> 00:13:00,480
right now that brings you into edit mode.

242
00:13:00,480 --> 00:13:02,382
And then you can practice

243
00:13:02,382 --> 00:13:05,406
editing this document with plain

244
00:13:05,406 --> 00:13:08,329
text by adding an O

245
00:13:08,329 --> 00:13:09,591
for the programming language

246
00:13:09,591 --> 00:13:12,314
that you're generally using.

247
00:13:12,314 --> 00:13:14,096
And then also let us know

248
00:13:14,096 --> 00:13:16,479
how you currently do testing.

249
00:13:18,801 --> 00:13:22,538
And yes, we also have

250
00:13:22,538 --> 00:13:24,261
[name] behind the scenes who

251
00:13:24,261 --> 00:13:26,524
is the notes manager.

252
00:13:26,524 --> 00:13:28,387
So there will be headers

253
00:13:28,387 --> 00:13:31,672
appearing during the lesson that

254
00:13:31,672 --> 00:13:33,174
give you the exact links

255
00:13:33,174 --> 00:13:34,937
to the lesson materials where we

256
00:13:34,937 --> 00:13:36,119
are at each moment.

257
00:13:36,119 --> 00:13:38,683
And when there's exercises, you

258
00:13:38,683 --> 00:13:40,025
will put the information on where

259
00:13:40,025 --> 00:13:43,150
you can find the exercise.

260
00:13:45,594 --> 00:13:46,395
Yes, so we will have

261
00:13:46,395 --> 00:13:49,660
two exercise sessions and one break today.

262
00:13:51,428 --> 00:13:54,333
And a quick outro with a

263
00:13:54,333 --> 00:13:56,356
little bit of hints for the

264
00:13:56,356 --> 00:13:57,698
next session as well on

265
00:13:57,698 --> 00:14:00,082
modular code development in the very end.

266
00:14:02,306 --> 00:14:04,369
And with that, I remind you

267
00:14:04,369 --> 00:14:06,032
about the code of conduct.

268
00:14:06,032 --> 00:14:07,193
Everyone here is at a

269
00:14:07,193 --> 00:14:09,357
different level and that's okay.

270
00:14:09,357 --> 00:14:11,581
You can ask questions freely.

271
00:14:11,581 --> 00:14:13,043
You can answer them as well,

272
00:14:13,043 --> 00:14:15,026
but please be nice and

273
00:14:15,026 --> 00:14:17,470
considerate with each other.

274
00:14:18,445 --> 00:14:22,048
And with that, I'll give over to [name]

275
00:14:22,048 --> 00:14:24,230
for starting today's automated

276
00:14:24,230 --> 00:14:25,271
testing session.

277
00:14:27,353 --> 00:14:27,933
Over to you.

278
00:14:27,933 --> 00:14:28,374
Yes.

279
00:14:30,235 --> 00:14:30,636
Thank you.

280
00:14:30,636 --> 00:14:32,257
Thank you very much, [name].

281
00:14:33,138 --> 00:14:35,420
So just briefly mentioning that

282
00:14:36,281 --> 00:14:38,263
when you're not actively editing

283
00:14:38,263 --> 00:14:41,345
in the shared collaborative notes,

284
00:14:41,345 --> 00:14:43,787
then please press this view

285
00:14:43,787 --> 00:14:46,190
button here because that then

286
00:14:46,190 --> 00:14:48,061
reduces a little bit

287
00:14:48,061 --> 00:14:50,470
the load on the server

288
00:14:50,470 --> 00:14:53,461
side of the document.

289
00:14:53,461 --> 00:14:55,488
So I will now go into

290
00:14:55,488 --> 00:14:59,944
the automated testing lesson here and I'll

291
00:15:03,029 --> 00:15:04,953
With me here for this lesson,

292
00:15:04,953 --> 00:15:08,601
I have [name] from CSE.

293
00:15:09,603 --> 00:15:10,264
Hi, [name].

294
00:15:12,048 --> 00:15:12,168
Hey.

295
00:15:12,168 --> 00:15:12,249
Hey.

296
00:15:13,151 --> 00:15:17,279
So automated testing is on the schedule.

297
00:15:17,279 --> 00:15:22,270
And yeah, we have already here in the...

298
00:15:23,228 --> 00:15:26,853
in the icebreaker questions, got

299
00:15:26,853 --> 00:15:28,034
all of you participants to think

300
00:15:28,034 --> 00:15:31,139
a little bit on what testing can be about.

301
00:15:31,139 --> 00:15:35,004
So perhaps if I start with you, [name],

302
00:15:35,004 --> 00:15:39,309
so what would you say

303
00:15:39,309 --> 00:15:41,813
are the relevant cases for

304
00:15:41,813 --> 00:15:43,515
using software testing?

305
00:15:44,677 --> 00:15:48,742
Well, for me, I'd say there

306
00:15:48,742 --> 00:15:50,884
are, I guess, several aspects to it.

307
00:15:52,686 --> 00:15:53,527
First would be if I

308
00:15:53,527 --> 00:15:55,689
implement a new feature, I would

309
00:15:55,689 --> 00:15:58,092
want that to work as expected.

310
00:15:58,092 --> 00:16:02,237
So I make sure that it does with tests.

311
00:16:02,237 --> 00:16:04,019
And then I also want to make sure

312
00:16:04,019 --> 00:16:05,461
that I haven't broken anything

313
00:16:05,461 --> 00:16:07,203
that already exists.

314
00:16:07,203 --> 00:16:09,365
So I'm going to test that.

315
00:16:09,365 --> 00:16:13,170
And I guess slightly related

316
00:16:13,170 --> 00:16:17,657
to the first point is if you

317
00:16:17,657 --> 00:16:20,761
start with a test or start thinking about

318
00:16:20,761 --> 00:16:23,405
how you test things, then it

319
00:16:23,405 --> 00:16:25,108
helps you also think about how

320
00:16:25,108 --> 00:16:27,671
you want to organize your code

321
00:16:27,671 --> 00:16:28,833
or how you want to develop the

322
00:16:28,833 --> 00:16:31,677
code in the first place.

323
00:16:33,800 --> 00:16:34,481
Yeah, thanks.

324
00:16:34,481 --> 00:16:37,487
Those are all very relevant points.

325
00:16:37,487 --> 00:16:39,650
And I think in particular,

326
00:16:39,650 --> 00:16:40,832
the last thing you said is

327
00:16:40,832 --> 00:16:43,718
that if you have testing in

328
00:16:43,718 --> 00:16:48,246
mind while designing and implementing code,

329
00:16:49,107 --> 00:16:51,231
then that's a good mechanism

330
00:16:52,273 --> 00:16:54,436
to guide you when you write

331
00:16:54,436 --> 00:16:58,744
the code in the first place.

332
00:17:00,158 --> 00:17:02,480
Here are in less material here

333
00:17:02,480 --> 00:17:04,923
or also some statements here.

334
00:17:04,923 --> 00:17:09,607
So a very common thing is

335
00:17:09,607 --> 00:17:11,609
that you do not start from scratch.

336
00:17:11,609 --> 00:17:16,994
You are perhaps you're downloading

337
00:17:16,994 --> 00:17:19,476
to try out some new code

338
00:17:19,476 --> 00:17:21,338
and you find, oh, this is relevant for me.

339
00:17:22,419 --> 00:17:25,742
And you might then need one

340
00:17:25,742 --> 00:17:28,880
or two more features which are not available.

341
00:17:28,880 --> 00:17:31,885
And you would like them to implement it.

342
00:17:31,885 --> 00:17:34,991
And then it's very good if

343
00:17:34,991 --> 00:17:38,036
you can soon establish that, okay,

344
00:17:38,036 --> 00:17:39,378
this code is working.

345
00:17:39,378 --> 00:17:40,440
It's working on my machine.

346
00:17:41,442 --> 00:17:43,345
And if I now go ahead

347
00:17:43,345 --> 00:17:46,030
and implement a feature A and a feature B,

348
00:17:47,172 --> 00:17:49,115
then this will not interfere

349
00:17:49,115 --> 00:17:50,758
with the already existing functionality.

350
00:17:53,623 --> 00:17:53,723
Okay.

351
00:17:57,736 --> 00:17:59,961
So during this lesson here,

352
00:18:00,923 --> 00:18:03,588
we will have some demonstrations

353
00:18:04,871 --> 00:18:06,515
and there will also be

354
00:18:06,515 --> 00:18:10,240
exercises for the exercises.

355
00:18:10,240 --> 00:18:12,644
we encourage you to work

356
00:18:12,644 --> 00:18:15,468
primarily with python and within

357
00:18:15,468 --> 00:18:18,212
the code refinery conda environment

358
00:18:18,212 --> 00:18:22,919
you have a tool pi test available

359
00:18:22,919 --> 00:18:24,001
and that's a framework

360
00:18:24,001 --> 00:18:28,247
for performing testing working

361
00:18:28,247 --> 00:18:33,275
with python code bases there are similar

362
00:18:33,275 --> 00:18:35,078
type of tools available for

363
00:18:35,078 --> 00:18:37,462
other languages there are also tools

364
00:18:37,462 --> 00:18:39,626
which are language agnostics that

365
00:18:39,626 --> 00:18:40,648
can be used then for

366
00:18:40,648 --> 00:18:44,835
for different languages and yeah

367
00:18:44,835 --> 00:18:46,558
we will highlight a few of

368
00:18:46,558 --> 00:18:48,702
these during the lesson

369
00:18:59,819 --> 00:19:04,444
so one aspect of testing

370
00:19:04,444 --> 00:19:06,526
is that maybe we're working

371
00:19:06,526 --> 00:19:10,090
here with software and computing um

372
00:19:10,090 --> 00:19:11,252
i can draw a little bit of

373
00:19:11,252 --> 00:19:13,734
an analog to testing in in

374
00:19:13,734 --> 00:19:18,019
the context of measurements

375
00:19:18,019 --> 00:19:19,801
using physical devices those

376
00:19:19,801 --> 00:19:21,183
could be mechanical measurements

377
00:19:21,183 --> 00:19:22,464
could be electronic measurements

378
00:19:23,545 --> 00:19:29,857
and within scientific research you could

379
00:19:29,857 --> 00:19:31,642
it's clear that if you're, for instance,

380
00:19:31,642 --> 00:19:33,207
in the physical sciences and

381
00:19:33,207 --> 00:19:37,800
you have some detectors of, yeah,

382
00:19:37,800 --> 00:19:40,246
that could be velocities,

383
00:19:40,246 --> 00:19:41,671
could be positioning, if you

384
00:19:41,671 --> 00:19:43,323
have a mechanical problem,

385
00:19:43,323 --> 00:19:44,764
and could be, for instance,

386
00:19:44,764 --> 00:19:46,126
in condensed matter physics or

387
00:19:46,966 --> 00:19:49,969
chemistry, it could be measurements

388
00:19:49,969 --> 00:19:52,251
of photo emission spectra and so forth.

389
00:19:53,272 --> 00:19:54,253
And it's very important there

390
00:19:54,253 --> 00:19:56,776
that you establish a base

391
00:19:56,776 --> 00:20:00,259
case and to calibrate your detectors.

392
00:20:01,780 --> 00:20:05,244
And where you are then in a regime

393
00:20:05,244 --> 00:20:08,767
where you can be on firm

394
00:20:08,767 --> 00:20:10,689
ground and perhaps have some

395
00:20:10,689 --> 00:20:12,030
reference data also.

396
00:20:13,090 --> 00:20:14,633
Once you have that, you can

397
00:20:14,633 --> 00:20:19,041
then move into using your instrument,

398
00:20:19,041 --> 00:20:20,523
be it a physical instrument or

399
00:20:20,523 --> 00:20:21,585
be it a scientific code,

400
00:20:22,527 --> 00:20:24,570
and then have reasonable confidence

401
00:20:24,570 --> 00:20:28,898
in that your tool will do the

402
00:20:28,898 --> 00:20:31,242
job also in this new situation.

403
00:20:31,242 --> 00:20:33,025
And [name], what do you say?

404
00:20:33,025 --> 00:20:34,468
Can one arrive to, let's

405
00:20:34,468 --> 00:20:37,393
say, 100% confidence that things will work?

406
00:20:38,504 --> 00:20:40,347
I would say no.

407
00:20:40,347 --> 00:20:42,350
Because, well, the person who

408
00:20:42,350 --> 00:20:43,832
wrote the tests, they also

409
00:20:43,832 --> 00:20:44,934
had certain constraints.

410
00:20:44,934 --> 00:20:45,896
For example, they were using

411
00:20:45,896 --> 00:20:47,658
definitely a different or very

412
00:20:47,658 --> 00:20:48,980
likely a different machine than

413
00:20:48,980 --> 00:20:50,042
what you're using.

414
00:20:50,042 --> 00:20:53,127
So they sort of all of

415
00:20:53,127 --> 00:20:57,273
the sort of assurances they could

416
00:20:57,273 --> 00:20:59,557
make are done through a specific

417
00:20:59,557 --> 00:21:00,919
lens that may not sort

418
00:21:00,919 --> 00:21:02,942
of completely overlap with your situation.

419
00:21:05,673 --> 00:21:07,355
Yeah, precisely.

420
00:21:07,355 --> 00:21:10,660
That's something that relates

421
00:21:10,660 --> 00:21:12,482
to the concept.

422
00:21:12,482 --> 00:21:18,010
It is known as code coverage.

423
00:21:21,615 --> 00:21:23,838
We are trying to make a

424
00:21:23,838 --> 00:21:26,902
code... Okay, in our sense,

425
00:21:26,902 --> 00:21:29,332
code coverage would have...

426
00:21:29,332 --> 00:21:32,720
is how much of the code base is tested.

427
00:21:32,720 --> 00:21:34,745
But here also this, that how

428
00:21:34,745 --> 00:21:37,371
much the tests will cover

429
00:21:37,371 --> 00:21:39,095
the functionality of a code

430
00:21:39,095 --> 00:21:42,477
and various use cases and various edge cases.

431
00:21:42,477 --> 00:21:45,480
Yeah, and I'd say like coverage

432
00:21:45,480 --> 00:21:47,121
is a useful metric, but

433
00:21:47,121 --> 00:21:50,985
it's not infinitely strongly

434
00:21:50,985 --> 00:21:56,290
correlated with those sort of safety

435
00:21:56,290 --> 00:21:58,312
or security or like confidence

436
00:21:58,312 --> 00:22:02,856
that all of the code works

437
00:22:02,856 --> 00:22:04,077
entirely as you would want it to.

438
00:22:05,579 --> 00:22:07,100
But yeah, it's a start.

439
00:22:08,001 --> 00:22:09,042
Yeah, yeah, right.

440
00:22:15,046 --> 00:22:17,028
So here we have some examples

441
00:22:17,028 --> 00:22:23,115
here in the lesson materials with some papers.

442
00:22:23,115 --> 00:22:25,457
And I think this one here,

443
00:22:25,457 --> 00:22:26,478
this you can check out here.

444
00:22:26,478 --> 00:22:27,980
A scientist's nightmare.

445
00:22:27,980 --> 00:22:32,164
Software problem leads to five retractions.

446
00:22:33,385 --> 00:22:34,667
And that's quite interesting story.

447
00:22:34,667 --> 00:22:36,589
So in brief, what happened here is

448
00:22:36,589 --> 00:22:39,011
that some scripts were used

449
00:22:39,011 --> 00:22:41,374
on different operating systems.

450
00:22:41,374 --> 00:22:43,987
And when...

451
00:22:43,987 --> 00:22:45,409
The original developer of the

452
00:22:45,409 --> 00:22:49,636
tool had been running for his or hers computer.

453
00:22:49,636 --> 00:22:50,698
Things were all working.

454
00:22:51,820 --> 00:22:53,883
Then the code was being used

455
00:22:53,883 --> 00:22:55,486
also by others and they

456
00:22:55,486 --> 00:22:58,471
had other computers, other operating systems.

457
00:22:59,913 --> 00:23:01,656
And some of the unexpected

458
00:23:01,656 --> 00:23:03,118
things happened then.

459
00:23:03,118 --> 00:23:05,602
So the way that the

460
00:23:05,602 --> 00:23:09,268
program executed was not as intended.

461
00:23:11,645 --> 00:23:13,848
And in this case, this

462
00:23:13,848 --> 00:23:16,030
had rather severe consequences

463
00:23:16,030 --> 00:23:17,913
because many people were using

464
00:23:17,913 --> 00:23:21,217
this for over many years without noticing.

465
00:23:24,401 --> 00:23:25,362
Have you ever experienced

466
00:23:25,362 --> 00:23:26,063
something similar?

467
00:23:27,104 --> 00:23:28,085
Or were you lucky?

468
00:23:32,330 --> 00:23:35,694
No, not of that type, no.

469
00:23:37,757 --> 00:23:40,420
That could rather be... My experience of...

470
00:23:42,543 --> 00:23:49,490
of things going wrong with, I mean,

471
00:23:49,490 --> 00:23:51,112
in connection to testing

472
00:23:51,112 --> 00:23:52,414
would perhaps rather be that

473
00:23:53,294 --> 00:23:55,016
the functionality that was implemented

474
00:23:55,016 --> 00:23:56,638
in a program written by me

475
00:23:56,638 --> 00:24:00,102
and my colleagues that perhaps

476
00:24:00,102 --> 00:24:01,864
you didn't implement what you

477
00:24:01,864 --> 00:24:05,087
had intended to implement.

478
00:24:05,087 --> 00:24:06,348
So yeah, for us working

479
00:24:06,348 --> 00:24:11,062
with physical models that would simply be that

480
00:24:11,062 --> 00:24:12,204
We did not implement

481
00:24:12,204 --> 00:24:16,710
the mathematical expressions as formulated.

482
00:24:16,710 --> 00:24:23,581
It is also something that can be tested.

483
00:24:23,581 --> 00:24:24,983
We will come very soon here

484
00:24:24,983 --> 00:24:27,446
to various kind of tests.

485
00:24:27,446 --> 00:24:30,531
And I would say here, this

486
00:24:30,531 --> 00:24:32,774
that I then encountered is that

487
00:24:34,176 --> 00:24:39,344
we have complex numerical modeling where

488
00:24:39,344 --> 00:24:40,465
I mean, naturally, you do

489
00:24:40,465 --> 00:24:41,707
this on the computer because you

490
00:24:41,707 --> 00:24:44,530
cannot do it with pen and paper and by hand.

491
00:24:44,530 --> 00:24:49,576
Then if you can test and verify

492
00:24:49,576 --> 00:24:54,041
that for the very small problems

493
00:24:54,041 --> 00:24:59,027
where your calculation is of

494
00:24:59,027 --> 00:25:00,549
a small problem size, you can

495
00:25:00,549 --> 00:25:02,682
perhaps do it with pen and paper.

496
00:25:02,682 --> 00:25:04,244
If you can then establish

497
00:25:04,244 --> 00:25:07,529
that these are correct or things

498
00:25:07,529 --> 00:25:09,793
are, let's say you get it to a zero result

499
00:25:09,793 --> 00:25:11,335
or something is invariant,

500
00:25:11,335 --> 00:25:13,879
doesn't change over time, then

501
00:25:13,879 --> 00:25:16,102
you can incrementally increase

502
00:25:16,102 --> 00:25:17,304
the problem size going to

503
00:25:17,304 --> 00:25:21,149
the real problems and you can

504
00:25:21,149 --> 00:25:22,892
then build up this confidence

505
00:25:22,892 --> 00:25:25,496
that your code will do the job.

506
00:25:26,357 --> 00:25:29,682
But yet here, this is also a regime where

507
00:25:29,682 --> 00:25:31,725
you cannot really arrive to

508
00:25:31,725 --> 00:25:36,372
the, like the full 100% confidence

509
00:25:36,372 --> 00:25:38,095
is sort of an asymptotic.

510
00:25:40,338 --> 00:25:41,299
But it might be that

511
00:25:41,299 --> 00:25:43,202
you cannot compare things because

512
00:25:43,202 --> 00:25:44,845
you don't have a full reference case.

513
00:25:46,988 --> 00:25:47,929
Okay.

514
00:25:50,854 --> 00:25:56,101
So we can start here by example here.

515
00:25:56,101 --> 00:25:59,166
So

516
00:26:00,412 --> 00:26:05,879
We have a small snippet here of code.

517
00:26:06,860 --> 00:26:08,582
This is here about

518
00:26:09,644 --> 00:26:11,766
conversion of temperature from

519
00:26:11,766 --> 00:26:13,028
the Fahrenheit to the

520
00:26:13,028 --> 00:26:15,771
Celsius temperature scale.

521
00:26:15,771 --> 00:26:16,472
As you can see here,

522
00:26:16,472 --> 00:26:18,415
there are multiple tabs for

523
00:26:18,415 --> 00:26:21,719
Python, C++, and also other languages.

524
00:26:25,163 --> 00:26:30,618
And this now will illustrate

525
00:26:30,618 --> 00:26:33,602
use of the PyTest framework.

526
00:26:33,602 --> 00:26:35,785
So I'll copy this code here.

527
00:26:35,785 --> 00:26:36,766
You have a copy button up

528
00:26:36,766 --> 00:26:37,367
to the right here.

529
00:26:39,509 --> 00:26:44,355
And I call this source

530
00:26:44,355 --> 00:26:47,559
code file Fahrenheit.py.

531
00:26:50,563 --> 00:26:52,746
Copy and save.

532
00:26:56,210 --> 00:26:56,811
And

533
00:26:59,288 --> 00:27:00,630
And now I just run it.

534
00:27:00,630 --> 00:27:01,111
PyTest.

535
00:27:03,795 --> 00:27:05,036
So I gave no arguments here.

536
00:27:06,178 --> 00:27:07,540
So what happened here is

537
00:27:07,540 --> 00:27:09,603
that PyTest have looked here

538
00:27:09,603 --> 00:27:12,788
in this directory and it has

539
00:27:12,788 --> 00:27:15,211
picked up here in this source

540
00:27:15,211 --> 00:27:18,215
code file a function definition

541
00:27:18,215 --> 00:27:21,580
which starts with test underscore

542
00:27:21,580 --> 00:27:22,782
and then Fahrenheit to Celsius.

543
00:27:24,665 --> 00:27:28,350
So it will then

544
00:27:29,900 --> 00:27:30,881
Execute this function.

545
00:27:32,083 --> 00:27:33,064
And what you can see here

546
00:27:33,064 --> 00:27:36,428
is that here is defined

547
00:27:36,428 --> 00:27:40,033
an expected result, 37.7.

548
00:27:42,696 --> 00:27:44,338
This temporary variable C here

549
00:27:44,338 --> 00:27:48,984
is assigned from the call of this function,

550
00:27:48,984 --> 00:27:51,627
where you call the function

551
00:27:51,627 --> 00:27:54,351
with 100 degrees Fahrenheit.

552
00:27:55,672 --> 00:27:56,774
And here, within here,

553
00:27:56,774 --> 00:27:58,316
Fahrenheit to certain function, you

554
00:27:58,316 --> 00:27:59,870
have the conversion then

555
00:27:59,870 --> 00:28:02,494
from Fahrenheit to Celsius,

556
00:28:02,494 --> 00:28:04,056
according to this formula.

557
00:28:08,923 --> 00:28:10,705
In this test function, you

558
00:28:10,705 --> 00:28:12,908
use an assert statement that

559
00:28:12,908 --> 00:28:16,674
the absolute value of the

560
00:28:16,674 --> 00:28:19,137
difference between the obtained

561
00:28:19,137 --> 00:28:20,839
result from the function call

562
00:28:20,839 --> 00:28:23,303
and the expected result should be

563
00:28:23,303 --> 00:28:25,506
less than one part per million.

564
00:28:27,950 --> 00:28:30,534
And yeah, indeed, that is what

565
00:28:30,534 --> 00:28:32,717
came out and executed this function.

566
00:28:32,717 --> 00:28:34,800
So all are good here.

567
00:28:46,657 --> 00:28:47,979
So what can tests help you do?

568
00:28:47,979 --> 00:28:50,683
I think we already touched

569
00:28:50,683 --> 00:28:52,986
upon that right in the beginning of the lesson.

570
00:28:54,068 --> 00:28:57,012
So preserving expected functionality,

571
00:28:58,173 --> 00:29:02,079
You can help users to be confident

572
00:29:02,079 --> 00:29:02,801
that the program has

573
00:29:02,801 --> 00:29:04,303
been installed correctly and that

574
00:29:04,303 --> 00:29:05,285
it is working.

575
00:29:06,867 --> 00:29:08,790
You give developers, and that

576
00:29:08,790 --> 00:29:10,112
can be yourself or could

577
00:29:10,112 --> 00:29:16,603
be external people, the ability to

578
00:29:17,478 --> 00:29:20,401
start out from something that

579
00:29:20,401 --> 00:29:21,702
you know is working and then

580
00:29:21,702 --> 00:29:23,203
you can add on features and

581
00:29:23,203 --> 00:29:24,344
then you can check also that

582
00:29:24,344 --> 00:29:25,866
the new stuff are not

583
00:29:25,866 --> 00:29:28,328
breaking the already existing functionality.

584
00:29:33,112 --> 00:29:39,318
So discussion, when would you say

585
00:29:39,318 --> 00:29:41,720
that it's not really needed

586
00:29:41,720 --> 00:29:44,903
to add the tests, [name]?

587
00:29:48,241 --> 00:29:48,862
Sorry, come again.

588
00:29:48,862 --> 00:29:51,045
I was looking at the document.

589
00:29:51,045 --> 00:29:51,907
Yeah, okay.

590
00:29:51,907 --> 00:29:54,370
So in what situations would

591
00:29:54,370 --> 00:29:56,353
you say it's not necessary to

592
00:29:56,353 --> 00:29:58,757
do any explicit tests?

593
00:29:59,638 --> 00:30:02,623
So, well, there are also

594
00:30:02,623 --> 00:30:04,726
some examples given here.

595
00:30:04,726 --> 00:30:07,089
So since I mostly work in machine learning,

596
00:30:07,089 --> 00:30:08,672
there are some things that

597
00:30:08,672 --> 00:30:11,196
are difficult or impossible to test.

598
00:30:11,196 --> 00:30:14,701
So testing an entire neural network,

599
00:30:14,701 --> 00:30:16,344
That's kind of difficult because

600
00:30:16,344 --> 00:30:18,287
it's kind of stochastic and it's a black box.

601
00:30:18,287 --> 00:30:22,394
So, yeah, there I would say I don't bother.

602
00:30:22,394 --> 00:30:23,837
Then I focus more on things

603
00:30:23,837 --> 00:30:27,944
that I can test well, like if

604
00:30:27,944 --> 00:30:29,186
I implement a new metric, for

605
00:30:29,186 --> 00:30:32,091
example, that then evaluates that model.

606
00:30:32,091 --> 00:30:33,533
But

607
00:30:33,533 --> 00:30:36,021
Yeah, that's one thing, things

608
00:30:36,021 --> 00:30:36,964
that are difficult to test.

609
00:30:37,826 --> 00:30:39,411
For the example, things that

610
00:30:39,411 --> 00:30:41,538
are sort of obviously correct, I

611
00:30:41,538 --> 00:30:43,183
would say it's still very often,

612
00:30:45,450 --> 00:30:47,897
it can be good to write a test.

613
00:30:49,396 --> 00:30:50,437
maybe it's not very high

614
00:30:50,437 --> 00:30:52,119
priority, but still, it can be

615
00:30:52,119 --> 00:30:52,760
useful to do that.

616
00:30:54,441 --> 00:30:56,383
Because, well, I generally

617
00:30:56,383 --> 00:30:57,525
don't trust myself very much.

618
00:30:57,525 --> 00:30:58,806
So I think it's still useful

619
00:30:58,806 --> 00:31:02,730
to, to write the test a to make sure

620
00:31:02,730 --> 00:31:04,873
that you the code is correct,

621
00:31:04,873 --> 00:31:05,753
but also to make sure that

622
00:31:05,753 --> 00:31:07,015
you were sort of thinking correctly.

623
00:31:12,140 --> 00:31:14,223
Yeah, that's a good point.

624
00:31:14,223 --> 00:31:18,407
And when it comes to this with so

625
00:31:19,720 --> 00:31:22,325
It can happen that one thinks that,

626
00:31:22,325 --> 00:31:23,647
okay, testing, that brings a

627
00:31:23,647 --> 00:31:24,829
lot of overhead.

628
00:31:24,829 --> 00:31:26,232
And let's say that the

629
00:31:26,232 --> 00:31:28,135
code you're working with is 10

630
00:31:28,135 --> 00:31:29,858
lines of code, but the test

631
00:31:29,858 --> 00:31:32,223
stuff would be 30 lines of code.

632
00:31:32,223 --> 00:31:34,827
That seems like a rather

633
00:31:34,827 --> 00:31:37,652
expensive and time-consuming thing.

634
00:31:37,652 --> 00:31:41,880
However, it depends a little bit on...

635
00:31:42,856 --> 00:31:45,900
workflow that that you get up

636
00:31:45,900 --> 00:31:48,664
and started with because with pi test

637
00:31:48,664 --> 00:31:50,146
and we'll also see a

638
00:31:50,146 --> 00:31:53,651
program here called catch2 for c++

639
00:31:53,651 --> 00:31:55,974
code then i mean you do

640
00:31:55,974 --> 00:31:59,419
have this machinery implemented and

641
00:31:59,419 --> 00:32:02,363
you can then relatively quickly

642
00:32:02,363 --> 00:32:05,948
set up new tests and also to

643
00:32:05,948 --> 00:32:10,160
run them in in a quasi-automated manner

644
00:32:10,160 --> 00:32:14,047
So I really like PyTest in

645
00:32:14,047 --> 00:32:15,911
part because it does not

646
00:32:15,911 --> 00:32:17,153
give you much overhead.

647
00:32:17,153 --> 00:32:18,676
You saw earlier, you just

648
00:32:18,676 --> 00:32:20,359
wrote a function that did the thing

649
00:32:20,359 --> 00:32:21,722
and you did not even

650
00:32:21,722 --> 00:32:23,605
import anything from PyTest or anything.

651
00:32:23,605 --> 00:32:25,168
You just wrote a code that

652
00:32:25,168 --> 00:32:26,190
called what you were doing.

653
00:32:26,190 --> 00:32:26,911
And that's it.

654
00:32:26,911 --> 00:32:28,254
And you made an assertion,

655
00:32:28,254 --> 00:32:30,157
which is also not really part of PyTest.

656
00:32:30,157 --> 00:32:31,540
It's just normal Python code.

657
00:32:31,540 --> 00:32:33,263
And yeah, that's why I

658
00:32:33,263 --> 00:32:35,528
really like PyTest in that sense.

659
00:32:35,528 --> 00:32:36,550
I prefer it over the other

660
00:32:36,550 --> 00:32:40,557
testing suits in Python and also

661
00:32:40,557 --> 00:32:42,120
for most other languages where

662
00:32:42,120 --> 00:32:43,483
I'm aware of any.

663
00:32:45,928 --> 00:32:47,591
Yeah, indeed.

664
00:32:47,591 --> 00:32:49,394
It's neat that it's readily

665
00:32:49,394 --> 00:32:51,578
available and sort of not

666
00:32:51,578 --> 00:32:52,941
difficult to install.

667
00:32:55,030 --> 00:32:58,254
So we will soon move

668
00:32:58,254 --> 00:33:00,476
into the first exercise.

669
00:33:00,476 --> 00:33:02,638
However, before doing so, we

670
00:33:02,638 --> 00:33:12,630
will go through here rather briefly,

671
00:33:12,630 --> 00:33:15,953
but go through the various

672
00:33:15,953 --> 00:33:19,617
kind of tests and testing concepts

673
00:33:19,617 --> 00:33:21,625
that are out there.

674
00:33:21,625 --> 00:33:23,968
And this nomenclature can be

675
00:33:23,968 --> 00:33:25,209
good to be acquainted with,

676
00:33:26,351 --> 00:33:28,293
because otherwise you might

677
00:33:28,293 --> 00:33:32,077
misunderstand what tests are

678
00:33:32,077 --> 00:33:33,559
actually being run for a code.

679
00:33:34,981 --> 00:33:38,265
So UNIS tests, those are

680
00:33:38,265 --> 00:33:40,988
tests when you test a function at a time.

681
00:33:42,630 --> 00:33:44,292
This can be...

682
00:33:45,520 --> 00:33:47,683
good to work with when you

683
00:33:47,683 --> 00:33:50,386
are starting to write a

684
00:33:50,386 --> 00:33:51,507
whole program from scratch

685
00:33:51,507 --> 00:33:53,450
or individual modules of a

686
00:33:53,450 --> 00:33:55,072
program from scratch, because then

687
00:33:55,072 --> 00:33:58,616
you can implement the tests one

688
00:33:58,616 --> 00:34:00,198
at a time, or let's say

689
00:34:00,198 --> 00:34:02,401
perhaps multiple tests at a time.

690
00:34:03,723 --> 00:34:05,545
And this Fahrenheit to Celsius

691
00:34:05,545 --> 00:34:06,907
code snippet is an example of

692
00:34:06,907 --> 00:34:10,431
that where this small test case was,

693
00:34:11,542 --> 00:34:12,623
We can presume that that

694
00:34:12,623 --> 00:34:15,947
was written right after defining the function.

695
00:34:15,947 --> 00:34:17,208
So you do it as you go.

696
00:34:21,213 --> 00:34:24,717
Integrating tests are when you test

697
00:34:24,717 --> 00:34:26,679
how the part of the

698
00:34:26,679 --> 00:34:27,700
program is working together.

699
00:34:27,700 --> 00:34:30,824
So let's say you have like

700
00:34:30,824 --> 00:34:34,769
10 big building blocks in your program.

701
00:34:34,769 --> 00:34:37,091
You might want to see them

702
00:34:37,091 --> 00:34:39,402
do this three times.

703
00:34:39,402 --> 00:34:41,244
blocks, column A, B, C,

704
00:34:41,244 --> 00:34:43,626
do they work together as they

705
00:34:43,626 --> 00:34:47,149
should with the API, that

706
00:34:47,149 --> 00:34:48,751
everything is matching with data types

707
00:34:48,751 --> 00:34:49,992
and so forth, and also

708
00:34:49,992 --> 00:34:54,136
then that the intended execution

709
00:34:54,136 --> 00:34:56,658
is proceeding as intended.

710
00:34:58,380 --> 00:35:01,523
M2M tests, that would, and

711
00:35:01,523 --> 00:35:02,864
here certainly it depends a bit

712
00:35:02,864 --> 00:35:06,287
on what kind of program you're working with.

713
00:35:07,128 --> 00:35:10,294
But it could be that that will involve,

714
00:35:10,294 --> 00:35:12,057
so to say, the whole code base,

715
00:35:13,219 --> 00:35:17,467
or that it would, in any

716
00:35:17,467 --> 00:35:18,989
case, do some things, so to

717
00:35:18,989 --> 00:35:21,113
say, from the very start to the very end.

718
00:35:21,113 --> 00:35:25,842
And I'd say that this is something which,

719
00:35:27,745 --> 00:35:28,827
if you have, let's say,

720
00:35:28,827 --> 00:35:32,120
in scientific computing, numerical modeling,

721
00:35:32,120 --> 00:35:34,182
some use cases where you, let's say,

722
00:35:34,182 --> 00:35:36,465
you start with a set of input files

723
00:35:36,465 --> 00:35:37,346
and then you crank it with

724
00:35:37,346 --> 00:35:42,332
a program and you get a set of output files.

725
00:35:42,332 --> 00:35:43,494
That situation is something

726
00:35:43,494 --> 00:35:45,036
that lends itself very natural

727
00:35:45,036 --> 00:35:46,938
for end-to-end tests.

728
00:35:48,199 --> 00:35:49,020
If you, on the other

729
00:35:49,020 --> 00:35:50,082
hand, have something which is

730
00:35:50,082 --> 00:35:53,426
more, let's say, event driven

731
00:35:54,307 --> 00:35:57,891
or user interaction type of program,

732
00:35:58,748 --> 00:36:00,490
then it could be perhaps

733
00:36:01,512 --> 00:36:03,594
much more challenging actually to

734
00:36:03,594 --> 00:36:05,016
set up end-to-end tests

735
00:36:05,016 --> 00:36:09,342
that are representative for how

736
00:36:09,342 --> 00:36:11,405
the program is used.

737
00:36:13,908 --> 00:36:16,692
Regression tests are something

738
00:36:16,692 --> 00:36:19,075
that relates a bit to end-to-end tests.

739
00:36:20,076 --> 00:36:21,738
So what is rather common is

740
00:36:21,738 --> 00:36:24,222
that you set up some reference

741
00:36:24,222 --> 00:36:26,865
cases where you are then

742
00:36:28,499 --> 00:36:31,825
confident that, okay, the program

743
00:36:31,825 --> 00:36:35,932
did for given input produce the right results.

744
00:36:37,014 --> 00:36:39,018
And perhaps the confidence in

745
00:36:39,018 --> 00:36:41,883
these right results are both

746
00:36:41,883 --> 00:36:43,005
in that the program was, I

747
00:36:43,005 --> 00:36:45,108
mean, written in a correct manner,

748
00:36:45,108 --> 00:36:47,813
but also that you compare with, let's say,

749
00:36:47,813 --> 00:36:49,055
completely other programs that

750
00:36:49,055 --> 00:36:51,760
are perhaps implementing

751
00:36:51,760 --> 00:36:53,778
similar functionality.

752
00:36:53,778 --> 00:36:54,580
That could be, so to

753
00:36:54,580 --> 00:36:56,925
say, perhaps among your colleagues

754
00:36:56,925 --> 00:37:00,212
or the science community could

755
00:37:00,212 --> 00:37:01,435
be also from your, let's

756
00:37:01,435 --> 00:37:04,441
say, rival research group that are

757
00:37:04,441 --> 00:37:09,492
trying to do similar stuff also.

758
00:37:12,188 --> 00:37:14,152
So these were a few of them.

759
00:37:14,152 --> 00:37:16,457
Then we have test-driven development.

760
00:37:16,457 --> 00:37:21,168
And [name], what can that be about?

761
00:37:21,168 --> 00:37:24,775
So, well, normally you maybe

762
00:37:24,775 --> 00:37:28,083
just start thinking about your

763
00:37:28,083 --> 00:37:30,428
fantabulous new software that you

764
00:37:30,428 --> 00:37:31,510
want to write.

765
00:37:31,510 --> 00:37:34,032
and maybe don't think as much about

766
00:37:34,032 --> 00:37:36,454
how that all of that

767
00:37:36,454 --> 00:37:38,456
that what you're writing is

768
00:37:38,456 --> 00:37:39,637
actually being used and

769
00:37:39,637 --> 00:37:42,960
test-driven development is one way

770
00:37:42,960 --> 00:37:45,042
where you can try and sort of invert

771
00:37:45,042 --> 00:37:46,383
that where you first think about

772
00:37:46,383 --> 00:37:47,904
how it's used because you

773
00:37:47,904 --> 00:37:49,566
first write the test that

774
00:37:49,566 --> 00:37:51,828
uses the software that you're

775
00:37:51,828 --> 00:37:55,151
about to write and yeah then

776
00:37:55,151 --> 00:37:57,232
sort of continue developing that

777
00:37:57,232 --> 00:38:01,396
and continue testing it until the test

778
00:38:01,396 --> 00:38:03,640
passes.

779
00:38:03,640 --> 00:38:05,002
Yeah, that can be a

780
00:38:05,002 --> 00:38:07,826
useful approach for some problems.

781
00:38:07,826 --> 00:38:09,509
It's certainly not a universal

782
00:38:09,509 --> 00:38:11,672
solution to all problems.

783
00:38:11,672 --> 00:38:12,714
But yeah, it can be

784
00:38:12,714 --> 00:38:17,021
an interesting approach to have

785
00:38:17,021 --> 00:38:19,524
a different sort of viewpoint on

786
00:38:19,524 --> 00:38:21,568
how to make software.

787
00:38:23,090 --> 00:38:23,691
Yeah.

788
00:38:25,595 --> 00:38:28,783
that's um yeah indeed and

789
00:38:28,783 --> 00:38:33,636
and um sometimes and and uh if

790
00:38:33,636 --> 00:38:34,779
if some of you in the

791
00:38:34,779 --> 00:38:36,183
audience here perhaps you're working

792
00:38:36,183 --> 00:38:39,030
at uh private companies and and um

793
00:38:41,542 --> 00:38:43,964
What we can often see is,

794
00:38:43,964 --> 00:38:46,066
I mean, comparing a little bit

795
00:38:46,066 --> 00:38:48,929
the situation in academia and

796
00:38:48,929 --> 00:38:51,871
in corporate settings, you often have,

797
00:38:53,333 --> 00:38:54,574
I mean, you have larger

798
00:38:54,574 --> 00:38:56,696
teams in companies and

799
00:38:57,576 --> 00:39:00,879
test-driven development is sometimes,

800
00:39:00,879 --> 00:39:01,900
I know it from my own

801
00:39:01,900 --> 00:39:04,102
experience, where we have in

802
00:39:04,102 --> 00:39:06,905
a unit or department where

803
00:39:06,905 --> 00:39:10,688
you have some engineers who are

804
00:39:11,630 --> 00:39:13,192
Really, for instance, they

805
00:39:13,192 --> 00:39:15,695
write the specifications for some

806
00:39:15,695 --> 00:39:19,179
program, and then they also write the tests.

807
00:39:20,080 --> 00:39:21,641
And these people themselves

808
00:39:21,641 --> 00:39:23,704
will perhaps not then work for the code base,

809
00:39:23,704 --> 00:39:24,885
but that will then be done

810
00:39:24,885 --> 00:39:26,146
by other members of the team.

811
00:39:29,310 --> 00:39:31,773
So this is, I mean, it's clear here.

812
00:39:31,773 --> 00:39:33,455
If you want to do all

813
00:39:33,455 --> 00:39:36,718
of these various things, all

814
00:39:36,718 --> 00:39:38,961
kind of different tests, it helps

815
00:39:38,961 --> 00:39:40,843
if you are a large team.

816
00:39:42,292 --> 00:39:44,194
But I guess usually in a scientific, well,

817
00:39:44,194 --> 00:39:45,435
maybe it depends a little bit

818
00:39:45,435 --> 00:39:47,057
more on the context, but as a PhD student,

819
00:39:47,057 --> 00:39:48,418
for example, then you are

820
00:39:48,418 --> 00:39:50,380
probably mostly writing or like

821
00:39:50,380 --> 00:39:51,761
working on your own.

822
00:39:51,761 --> 00:39:53,122
And then you are the same person

823
00:39:53,122 --> 00:39:54,003
who writes the test will

824
00:39:54,003 --> 00:39:56,285
also write the code itself oftentimes.

825
00:39:57,767 --> 00:39:59,448
Yeah, yeah, indeed.

826
00:40:01,110 --> 00:40:01,730
Great.

827
00:40:03,452 --> 00:40:06,535
So continuous integration, code coverage,

828
00:40:06,535 --> 00:40:08,237
we will come to that a

829
00:40:08,237 --> 00:40:12,329
bit later and we'll define what these are then.

830
00:40:12,329 --> 00:40:17,014
So I think now, in the interest of time,

831
00:40:17,014 --> 00:40:20,398
that we will move now into

832
00:40:20,398 --> 00:40:22,660
what will be the first exercise for today.

833
00:40:23,981 --> 00:40:28,426
So we go here to the

834
00:40:28,426 --> 00:40:30,689
next section of the lesson here.

835
00:40:30,689 --> 00:40:35,153
So what you will do here

836
00:40:35,153 --> 00:40:37,976
is that you will get some

837
00:40:37,976 --> 00:40:42,201
hands-on practice on testing

838
00:40:43,295 --> 00:40:45,318
some functions locally.

839
00:40:47,100 --> 00:40:49,523
And testing locally is, I would say,

840
00:40:49,523 --> 00:40:51,806
that's sort of the base case

841
00:40:51,806 --> 00:40:53,668
where you can do everything

842
00:40:53,668 --> 00:40:54,890
on your local computer.

843
00:40:55,891 --> 00:40:57,774
Then in, so to say, real

844
00:40:57,774 --> 00:40:59,936
life, you will often then do

845
00:40:59,936 --> 00:41:02,860
testing on various services such

846
00:41:02,860 --> 00:41:04,442
as GitHub and GitLab.

847
00:41:08,438 --> 00:41:11,101
so we will just very

848
00:41:11,101 --> 00:41:12,803
briefly introduce the exercise and

849
00:41:12,803 --> 00:41:15,806
and perhaps um have some posted

850
00:41:15,806 --> 00:41:18,108
it into the share document yes

851
00:41:18,108 --> 00:41:21,592
i see the link is here and

852
00:41:21,592 --> 00:41:25,817
there are two tests here testing

853
00:41:27,118 --> 00:41:29,841
um local one and local two

854
00:41:31,222 --> 00:41:33,852
and then the suggestion is that

855
00:41:33,852 --> 00:41:35,654
you can get started with

856
00:41:35,654 --> 00:41:38,297
this minimal example, local one.

857
00:41:40,180 --> 00:41:42,903
And some of you might be

858
00:41:42,903 --> 00:41:44,245
able to do it rather swiftly,

859
00:41:44,245 --> 00:41:47,228
and then you can move on to the other example.

860
00:41:48,510 --> 00:41:50,052
So the instructions can be

861
00:41:50,052 --> 00:41:52,955
found here in the lesson material,

862
00:41:52,955 --> 00:41:56,780
and you will be using PyTests.

863
00:41:56,780 --> 00:41:58,142
And you will work both with

864
00:41:58,142 --> 00:42:03,940
a code that will pass the test and with tests

865
00:42:03,940 --> 00:42:06,908
that limit code that break the tests.

866
00:42:10,518 --> 00:42:14,750
So are there any more

867
00:42:14,750 --> 00:42:16,154
instructions that we would like

868
00:42:16,154 --> 00:42:17,798
to give [name] or?

869
00:42:18,638 --> 00:42:20,101
Well, yeah.

870
00:42:20,101 --> 00:42:22,405
So implement the function,

871
00:42:22,405 --> 00:42:23,747
implement the test for the function.

872
00:42:23,747 --> 00:42:26,131
The function is adding two

873
00:42:26,131 --> 00:42:28,595
numbers together or two anythings,

874
00:42:28,595 --> 00:42:31,120
two Python objects.

875
00:42:32,061 --> 00:42:34,646
And yeah, then test it.

876
00:42:36,088 --> 00:42:38,112
Not much more to it, I think.

877
00:42:38,112 --> 00:42:40,315
And then for the other

878
00:42:40,315 --> 00:42:42,018
one, what's important is that you

879
00:42:42,018 --> 00:42:46,545
are now, so the function is the same.

880
00:42:46,545 --> 00:42:47,707
You're adding a new test

881
00:42:47,707 --> 00:42:51,753
for what happens if you try

882
00:42:51,753 --> 00:42:53,015
and add floating point numbers.

883
00:42:53,015 --> 00:42:53,836
There might be something,

884
00:42:55,198 --> 00:42:58,483
some special considerations, but yeah.

885
00:43:00,505 --> 00:43:03,168
Yes, indeed, that adds

886
00:43:03,168 --> 00:43:06,151
some extra complications to it

887
00:43:06,151 --> 00:43:09,074
that one will need to deal with.

888
00:43:11,036 --> 00:43:16,782
So with that, you are then

889
00:43:16,782 --> 00:43:19,084
welcome to start up the exercise.

890
00:43:19,084 --> 00:43:23,289
And it's now 34 past the full hour.

891
00:43:23,289 --> 00:43:25,050
So we will reconvene here at

892
00:43:25,050 --> 00:43:29,415
54 past the full hour.

893
00:43:31,825 --> 00:43:33,550
Bye for now.

894
01:03:43,585 --> 01:03:49,410
Welcome back, everyone.

895
01:03:50,723 --> 01:03:53,508
so we hope that you have

896
01:03:53,508 --> 01:03:56,012
now been able to to work

897
01:03:56,012 --> 01:03:58,917
work through the first exercise

898
01:03:58,917 --> 01:04:01,642
and perhaps also the second one

899
01:04:02,804 --> 01:04:04,948
so there are a few questions

900
01:04:04,948 --> 01:04:06,370
that were posed in the

901
01:04:06,370 --> 01:04:08,253
collaborative document and we would

902
01:04:08,253 --> 01:04:12,441
like to highlight some of of

903
01:04:12,441 --> 01:04:16,306
them and yeah first one here is about

904
01:04:16,306 --> 01:04:19,009
how to avoid that the

905
01:04:19,009 --> 01:04:21,913
execution of the tests will not interrupt.

906
01:04:23,374 --> 01:04:25,737
And so a good practice is

907
01:04:25,737 --> 01:04:29,742
to put each assert in its own test function.

908
01:04:29,742 --> 01:04:31,224
I think this might depend also

909
01:04:31,224 --> 01:04:32,385
a bit on which testing

910
01:04:32,385 --> 01:04:35,389
framework that you're using that

911
01:04:35,389 --> 01:04:39,934
might also be language specific.

912
01:04:42,091 --> 01:04:43,733
So second question here is

913
01:04:43,733 --> 01:04:49,379
about testing in, yeah, for

914
01:04:49,379 --> 01:04:51,301
machine learning, deep learning models.

915
01:04:57,808 --> 01:05:08,881
So, yeah, okay, one thing

916
01:05:08,881 --> 01:05:10,778
to learn from this,

917
01:05:10,778 --> 01:05:12,320
discussion here the question and

918
01:05:12,320 --> 01:05:19,209
answer is that um for something

919
01:05:19,209 --> 01:05:21,872
like like a big deep learning model

920
01:05:21,872 --> 01:05:23,134
that can take a long time

921
01:05:23,134 --> 01:05:25,877
to train you might want to do the testing

922
01:05:25,877 --> 01:05:28,000
for so to say smaller cases

923
01:05:28,000 --> 01:05:30,202
and and it might be that

924
01:05:30,202 --> 01:05:32,065
it's just too expensive if you

925
01:05:32,065 --> 01:05:33,867
need to to run the

926
01:05:35,247 --> 01:05:37,850
the full training and then

927
01:05:37,850 --> 01:05:41,093
validation with test data.

928
01:05:44,436 --> 01:05:46,218
It's not just a problem of expense,

929
01:05:46,218 --> 01:05:48,320
but also the model sort

930
01:05:48,320 --> 01:05:52,424
of, it's a statistical problem usually.

931
01:05:52,424 --> 01:05:56,268
And so, or it's, yeah, you don't have like,

932
01:05:56,268 --> 01:05:58,531
it's often not sort of

933
01:05:58,531 --> 01:05:59,652
deterministic in the sense that

934
01:05:59,652 --> 01:06:02,134
when you train a model twice,

935
01:06:02,134 --> 01:06:03,115
it will not give you the

936
01:06:03,115 --> 01:06:04,897
exact same answer probably.

937
01:06:04,897 --> 01:06:08,923
And so that is then difficult to check.

938
01:06:08,923 --> 01:06:10,385
Even more difficult, well, you've

939
01:06:10,385 --> 01:06:11,287
done the exercise now for

940
01:06:11,287 --> 01:06:12,388
your floating point numbers, it's

941
01:06:12,388 --> 01:06:13,590
even more difficult then for

942
01:06:13,590 --> 01:06:16,735
the floating point numbers.

943
01:06:16,735 --> 01:06:18,197
Because if you have a language model,

944
01:06:18,197 --> 01:06:20,000
comparing two sentences that

945
01:06:20,000 --> 01:06:21,903
it produced can be tricky.

946
01:06:23,385 --> 01:06:23,625
Yeah.

947
01:06:26,830 --> 01:06:28,032
At least in the context of testing.

948
01:06:31,297 --> 01:06:32,659
Yes, yes, indeed.

949
01:06:39,743 --> 01:06:41,985
Yeah, and the question number

950
01:06:41,985 --> 01:06:44,447
five here, how the testing works.

951
01:06:46,029 --> 01:06:47,690
And the key here is that

952
01:06:49,512 --> 01:06:52,555
you need to check up on what,

953
01:06:52,555 --> 01:06:54,196
or let's say, the keyword

954
01:06:54,196 --> 01:06:56,999
constructs in the respective framework.

955
01:06:56,999 --> 01:06:59,822
So for PyTest, it's test underscore.

956
01:06:59,822 --> 01:07:07,148
And sometimes you need to...

957
01:07:07,148 --> 01:07:09,171
use some other construct to and

958
01:07:09,171 --> 01:07:10,193
or to regular start the

959
01:07:10,193 --> 01:07:14,499
tests with with macros so uh

960
01:07:17,043 --> 01:07:20,929
yeah you you simply um need to follow

961
01:07:20,929 --> 01:07:22,050
that syntax and and we will

962
01:07:22,050 --> 01:07:23,793
see a bit later here one example

963
01:07:23,793 --> 01:07:25,455
of how that is done with uh

964
01:07:25,455 --> 01:07:29,241
catch two for c plus plus code snippets

965
01:07:30,672 --> 01:07:35,077
So we will now proceed to

966
01:07:36,519 --> 01:07:38,422
talk a bit about automated testing.

967
01:07:40,624 --> 01:07:42,407
So the outset here is that

968
01:07:43,728 --> 01:07:46,071
we would like to explore how

969
01:07:46,071 --> 01:07:48,454
we could implement automated testing

970
01:07:48,454 --> 01:07:52,079
that will run, for instance,

971
01:07:52,079 --> 01:07:53,400
on each time that we push

972
01:07:53,400 --> 01:07:54,722
changes to a repository.

973
01:07:56,508 --> 01:07:58,470
And yeah, here's a little

974
01:07:58,470 --> 01:08:00,973
bit of question that we can keep in mind.

975
01:08:00,973 --> 01:08:03,676
So why is it good to

976
01:08:03,676 --> 01:08:08,041
auto close issues with commit messages?

977
01:08:09,422 --> 01:08:11,945
And yeah, you will see that in a minute.

978
01:08:14,869 --> 01:08:17,792
So this part now will be

979
01:08:17,792 --> 01:08:21,997
run as a demonstration and we

980
01:08:21,997 --> 01:08:23,558
will then make use of

981
01:08:23,558 --> 01:08:25,941
the so-called GitHub actions

982
01:08:27,592 --> 01:08:29,755
There's also the GitLab

983
01:08:29,755 --> 01:08:32,719
continuous integration framework.

984
01:08:34,382 --> 01:08:36,124
And in addition to these

985
01:08:36,124 --> 01:08:38,688
services, there are multiple of these around.

986
01:08:41,251 --> 01:08:45,818
So what I will do now is

987
01:08:45,818 --> 01:08:49,383
that I will set up a new

988
01:08:49,383 --> 01:08:57,376
Git repository with some starting coding.

989
01:08:57,376 --> 01:09:01,119
And I will configure tests to

990
01:09:01,119 --> 01:09:03,402
be run as a GitHub action.

991
01:09:06,625 --> 01:09:07,926
We will see that this

992
01:09:07,926 --> 01:09:12,050
code will contain some bugs.

993
01:09:13,071 --> 01:09:14,572
We will not notice it at first,

994
01:09:14,572 --> 01:09:16,734
but when we start to run, let's say,

995
01:09:16,734 --> 01:09:17,735
all parts of the code, you'll

996
01:09:17,735 --> 01:09:19,056
see that, oh, here's something

997
01:09:19,056 --> 01:09:20,317
which is not working.

998
01:09:20,317 --> 01:09:22,820
And that will then be caught

999
01:09:22,820 --> 01:09:25,442
by the tests being run on GitHub.

1000
01:09:27,295 --> 01:09:32,865
What one then can do is,

1001
01:09:34,387 --> 01:09:37,112
and this is also very important

1002
01:09:37,112 --> 01:09:37,874
in the context of

1003
01:09:37,874 --> 01:09:39,837
collaborative code development, is

1004
01:09:39,837 --> 01:09:41,219
that, I mean, you make a note

1005
01:09:41,219 --> 01:09:43,043
of it so that you don't forget it.

1006
01:09:43,043 --> 01:09:45,767
And one inbuilt functionality to do

1007
01:09:45,767 --> 01:09:46,929
that here is to use

1008
01:09:46,929 --> 01:09:49,975
the GitHub issues functionality.

1009
01:09:49,975 --> 01:09:51,818
So report a bug as an issue.

1010
01:09:53,705 --> 01:09:57,430
then someone that can be yourself

1011
01:09:57,430 --> 01:09:58,671
or could be one of your

1012
01:09:58,671 --> 01:10:01,455
your colleagues can spot this issue

1013
01:10:02,696 --> 01:10:04,839
and work out and okay how

1014
01:10:04,839 --> 01:10:08,303
can i fix this and then go ahead and fix it

1015
01:10:08,303 --> 01:10:10,586
and then contribute this fix

1016
01:10:11,847 --> 01:10:13,670
in a feature bronze and and and

1017
01:10:13,670 --> 01:10:15,612
you push it to the github repo

1018
01:10:17,785 --> 01:10:20,108
And as you will see then, if

1019
01:10:20,108 --> 01:10:22,231
I set up this automated testing machinery

1020
01:10:22,231 --> 01:10:24,134
as a GitHub action, then the

1021
01:10:24,134 --> 01:10:28,579
tests will be run directly after pushing

1022
01:10:29,521 --> 01:10:30,782
so that this, so to say,

1023
01:10:30,782 --> 01:10:32,505
the code fix will then be

1024
01:10:34,848 --> 01:10:36,130
tested to see whether it

1025
01:10:36,130 --> 01:10:39,183
actually then have resolved the bug.

1026
01:10:39,183 --> 01:10:41,986
And if that is affirmative,

1027
01:10:41,986 --> 01:10:43,568
then one can then go ahead

1028
01:10:43,568 --> 01:10:45,930
and merge in this new code.

1029
01:10:45,930 --> 01:10:46,711
And you have the answer to

1030
01:10:46,711 --> 01:10:49,854
say, improve the program by

1031
01:10:49,854 --> 01:10:50,575
correcting the bike.

1032
01:10:52,717 --> 01:10:55,621
So let's get started.

1033
01:10:59,164 --> 01:11:08,194
So I will go to my GitHub and I will

1034
01:11:09,575 --> 01:11:15,422
Now I have already a copy of this,

1035
01:11:15,422 --> 01:11:16,804
but I'll create another

1036
01:11:16,804 --> 01:11:18,466
example here, another repo.

1037
01:11:20,508 --> 01:11:25,854
So I call this repo example

1038
01:11:25,854 --> 01:11:28,317
dash ci for continuous integration.

1039
01:11:31,081 --> 01:11:32,142
It's a public repo.

1040
01:11:34,745 --> 01:11:37,168
And yeah, I just go with the defaults.

1041
01:11:41,198 --> 01:11:47,967
And here is, yeah, SSH URL for cloning it.

1042
01:11:47,967 --> 01:11:50,490
So I copy the URL.

1043
01:11:53,634 --> 01:12:02,025
Then I go here and I clone it.

1044
01:12:09,683 --> 01:12:11,748
and here in the terminal

1045
01:12:11,748 --> 01:12:13,732
window it reports an oh you

1046
01:12:13,732 --> 01:12:15,737
have cloned a empty repository

1047
01:12:17,180 --> 01:12:19,546
but that's perfectly fine so i

1048
01:12:19,546 --> 01:12:24,498
see it into the directory does

1049
01:12:24,498 --> 01:12:28,587
only include the dot git directory

1050
01:12:44,513 --> 01:12:45,834
So here are the code

1051
01:12:45,834 --> 01:12:47,656
snippets that we'll work with, and

1052
01:12:47,656 --> 01:12:50,459
these are in Python.

1053
01:12:50,459 --> 01:12:53,682
So in this file, functions.py,

1054
01:12:55,564 --> 01:12:58,086
we have some simple arithmetic functions.

1055
01:12:59,948 --> 01:13:01,930
So I create this source

1056
01:13:01,930 --> 01:13:07,235
code file, functions.py, paste the

1057
01:13:07,235 --> 01:13:10,318
code, save it.

1058
01:13:12,830 --> 01:13:14,652
Then we will have another

1059
01:13:14,652 --> 01:13:18,135
code snippet, test underscore functions.

1060
01:13:20,137 --> 01:13:25,042
And here is where we

1061
01:13:25,042 --> 01:13:26,803
have then the definition of the tests.

1062
01:13:29,065 --> 01:13:31,328
So I'll put that in

1063
01:13:31,328 --> 01:13:36,152
another source code file,

1064
01:13:36,152 --> 01:13:41,217
test underscore functions, py.

1065
01:13:42,783 --> 01:13:45,046
I paste it and save it.

1066
01:13:45,046 --> 01:13:46,027
And as you can see here,

1067
01:13:47,750 --> 01:13:51,315
this red block here is Python code,

1068
01:13:51,315 --> 01:13:53,177
which has been commented out

1069
01:13:53,177 --> 01:13:55,601
and that we will activate later.

1070
01:14:02,270 --> 01:14:02,710
Let's see.

1071
01:14:02,710 --> 01:14:06,115
The git status is that we

1072
01:14:06,115 --> 01:14:07,617
have two new files here, which

1073
01:14:07,617 --> 01:14:08,679
are untracked so far.

1074
01:14:10,281 --> 01:14:11,102
We will add them.

1075
01:14:12,753 --> 01:14:14,435
Get add functions.

1076
01:14:14,435 --> 01:14:16,398
Get add test functions.

1077
01:14:25,690 --> 01:14:27,573
I call this added functions.

1078
01:14:30,176 --> 01:14:30,997
And tests.

1079
01:14:33,861 --> 01:14:34,322
Commit.

1080
01:14:37,766 --> 01:14:38,187
And push.

1081
01:14:45,389 --> 01:14:47,454
So, okay, now I already

1082
01:14:47,454 --> 01:14:50,100
contributed this to the instance

1083
01:14:50,100 --> 01:14:51,925
of the Git repo on GitHub.

1084
01:14:52,987 --> 01:14:55,433
We could also then, independent

1085
01:14:55,433 --> 01:15:00,906
of this one, we can test the code locally.

1086
01:15:00,906 --> 01:15:02,149
So PyTest.

1087
01:15:04,070 --> 01:15:05,032
Let's see what it finds.

1088
01:15:06,153 --> 01:15:06,634
Yeah, okay.

1089
01:15:06,634 --> 01:15:07,395
It goes into the

1090
01:15:07,395 --> 01:15:10,240
test.FindChainSourceCode file, picks up

1091
01:15:10,240 --> 01:15:13,165
these test definitions and executes them.

1092
01:15:13,165 --> 01:15:15,429
So one test was executed and

1093
01:15:15,429 --> 01:15:17,472
that one test passed.

1094
01:15:25,185 --> 01:15:28,390
So now we will enable automated testing.

1095
01:15:29,467 --> 01:15:33,072
So I will now go, as you

1096
01:15:33,072 --> 01:15:35,615
can see, there are tabs here for

1097
01:15:35,615 --> 01:15:38,339
how to do that on various platforms.

1098
01:15:38,339 --> 01:15:42,284
So also for GitLab and for, yeah,

1099
01:15:42,284 --> 01:15:43,586
and for GitHub and for

1100
01:15:43,586 --> 01:15:49,313
R. The most straightforward thing is

1101
01:15:49,313 --> 01:15:50,975
to use the GUI.

1102
01:15:50,975 --> 01:15:53,339
So what I'll do when I go

1103
01:15:53,339 --> 01:15:54,360
to my GitHub page is to

1104
01:15:54,360 --> 01:15:56,723
click this Python applications button.

1105
01:16:02,272 --> 01:16:03,534
So I'll do that.

1106
01:16:12,171 --> 01:16:12,972
Go to actions.

1107
01:16:18,443 --> 01:16:19,665
Scroll down a bit and

1108
01:16:19,665 --> 01:16:22,390
then press the configure button.

1109
01:16:30,807 --> 01:16:34,091
Now there are a few things here that,

1110
01:16:34,091 --> 01:16:34,932
yeah, as you can see here,

1111
01:16:34,932 --> 01:16:37,955
what is coming up here as

1112
01:16:37,955 --> 01:16:43,001
a template is this within the .github

1113
01:16:43,001 --> 01:16:45,103
and workflows directory is

1114
01:16:45,103 --> 01:16:47,406
then templated here, a YAML

1115
01:16:47,406 --> 01:16:49,027
file, Python dash app.

1116
01:16:53,012 --> 01:16:54,013
In the lesson material,

1117
01:16:56,592 --> 01:17:02,360
we have some stuff that we

1118
01:17:02,360 --> 01:17:03,601
would like to add in here.

1119
01:17:04,543 --> 01:17:09,189
So I will copy in those lines of code from,

1120
01:17:09,189 --> 01:17:11,192
I do it from another window,

1121
01:17:11,192 --> 01:17:12,654
not shown here on the stream.

1122
01:17:15,978 --> 01:17:20,364
So I will here put

1123
01:17:20,364 --> 01:17:23,769
these permissions here, contents read,

1124
01:17:23,769 --> 01:17:26,312
and I add a line here, pulled.

1125
01:17:27,676 --> 01:17:33,884
Request.

1126
01:17:33,884 --> 01:17:37,068
Write.

1127
01:17:37,068 --> 01:17:39,412
So what this YAML file is about is

1128
01:17:39,412 --> 01:17:47,743
that it's in a, yeah,

1129
01:17:48,864 --> 01:17:53,050
within this YAML format, it

1130
01:17:53,050 --> 01:17:55,253
is a specification on what actions

1131
01:17:55,253 --> 01:17:57,075
that are to be run automatically.

1132
01:17:59,030 --> 01:18:01,113
Another thing we need to add

1133
01:18:01,113 --> 01:18:04,158
is we would like to augment here.

1134
01:18:04,158 --> 01:18:10,327
So after this pip

1135
01:18:10,327 --> 01:18:14,232
install flake8-pytest, we'll also

1136
01:18:14,232 --> 01:18:20,802
then add pytest-coverage.cout.

1137
01:18:23,127 --> 01:18:24,849
And I think there was

1138
01:18:24,849 --> 01:18:26,351
earlier a question about how

1139
01:18:26,351 --> 01:18:28,634
to measure coverage and this is a

1140
01:18:28,634 --> 01:18:30,136
way to do it sort of automatically.

1141
01:18:30,136 --> 01:18:32,159
There's existing tools and you

1142
01:18:32,159 --> 01:18:33,801
don't need to worry about that yourself.

1143
01:18:36,844 --> 01:18:37,646
Yes.

1144
01:18:38,467 --> 01:18:40,549
That's right.

1145
01:18:40,549 --> 01:18:43,573
So there are these tools that

1146
01:18:43,573 --> 01:18:45,355
can do it for you.

1147
01:18:51,063 --> 01:18:53,367
But obviously it's also

1148
01:18:53,367 --> 01:18:54,789
good if you bring in also

1149
01:18:54,789 --> 01:18:57,493
your your own insights into what

1150
01:18:57,493 --> 01:19:00,098
things are the most important to test

1151
01:19:00,098 --> 01:19:01,319
because I think the the

1152
01:19:01,319 --> 01:19:05,386
coverage testing here is um

1153
01:19:06,928 --> 01:19:08,951
simply keeping track of how

1154
01:19:09,793 --> 01:19:12,196
which lines of code are

1155
01:19:12,196 --> 01:19:14,500
being touched while executing the

1156
01:19:14,500 --> 01:19:19,628
tests so it's sort of a metric with this

1157
01:19:21,987 --> 01:19:23,849
Yeah, it's simply telling you

1158
01:19:23,849 --> 01:19:25,831
in terms of lines of code

1159
01:19:25,831 --> 01:19:27,933
where you have been traversed

1160
01:19:27,933 --> 01:19:30,076
by using the runway test,

1161
01:19:30,076 --> 01:19:32,759
but doesn't say anything about

1162
01:19:32,759 --> 01:19:36,162
how, let's say central or this

1163
01:19:36,162 --> 01:19:37,564
part of the code for the

1164
01:19:37,564 --> 01:19:38,605
functionality of the program.

1165
01:19:41,889 --> 01:19:42,710
Okay.

1166
01:19:42,710 --> 01:19:44,211
Then I add here at the

1167
01:19:44,211 --> 01:19:48,636
end, this coverage report thingy and

1168
01:19:50,877 --> 01:19:52,399
Yes, I think we are done with that.

1169
01:19:53,981 --> 01:19:55,663
Now I, in order to see

1170
01:19:55,663 --> 01:19:58,065
the commit button here, I need

1171
01:19:58,065 --> 01:20:01,309
to just increase the size temporarily here.

1172
01:20:03,652 --> 01:20:05,314
Now you don't see it on stream,

1173
01:20:05,314 --> 01:20:06,615
but I commit the changes

1174
01:20:08,337 --> 01:20:11,281
with the default commit message

1175
01:20:11,281 --> 01:20:13,223
and I commit directly to the main branch.

1176
01:20:19,379 --> 01:20:22,262
So I now resize the window back.

1177
01:20:27,408 --> 01:20:30,792
And yeah, so what we see now is

1178
01:20:30,792 --> 01:20:34,697
that in the last commit message

1179
01:20:34,697 --> 01:20:38,121
is that we created this python-app.yml file.

1180
01:20:39,122 --> 01:20:43,026
And here, this little status

1181
01:20:44,308 --> 01:20:47,091
symbol here, where it says that the tests are

1182
01:20:49,231 --> 01:20:51,994
or some action is pending

1183
01:20:53,016 --> 01:20:56,520
it's here just like red brownish color

1184
01:20:56,520 --> 01:21:01,426
and if we rephrase reload

1185
01:21:01,426 --> 01:21:05,472
the page let's see what happens ah okay

1186
01:21:05,472 --> 01:21:09,076
so here we have we have

1187
01:21:09,076 --> 01:21:12,801
a green little hook here and

1188
01:21:13,662 --> 01:21:15,885
yeah it tells us success here

1189
01:21:15,885 --> 01:21:16,926
that's a good thing

1190
01:21:28,415 --> 01:21:31,480
This was step four here

1191
01:21:31,480 --> 01:21:33,362
in the lesson material.

1192
01:21:33,362 --> 01:21:34,484
Verify that the tests

1193
01:21:34,484 --> 01:21:35,526
have automatically been run.

1194
01:21:40,533 --> 01:21:43,137
So now we will start with...

1195
01:21:44,059 --> 01:21:46,402
So now we have the base set up here.

1196
01:21:47,965 --> 01:21:51,009
And this last thing, we did

1197
01:21:51,009 --> 01:21:53,693
it on the GitHub instance

1198
01:21:53,693 --> 01:21:54,895
of the Git repository.

1199
01:21:56,242 --> 01:21:58,205
So we don't have it locally yet.

1200
01:21:58,205 --> 01:22:03,993
So I go to my terminal and I type git pull.

1201
01:22:08,219 --> 01:22:13,186
So now, yeah, this python-app.yaml

1202
01:22:13,186 --> 01:22:15,269
file was then pulled in here.

1203
01:22:15,269 --> 01:22:16,591
So now we have it here also.

1204
01:22:21,238 --> 01:22:21,979
So...

1205
01:22:23,647 --> 01:22:25,910
We will now look into

1206
01:22:25,910 --> 01:22:30,577
this test underscore functions file.

1207
01:22:30,577 --> 01:22:39,029
So we already had, so here, uh, yeah,

1208
01:22:39,029 --> 01:22:41,793
I removed the, the, the

1209
01:22:41,793 --> 01:22:44,256
Python highlighting app is to

1210
01:22:44,256 --> 01:22:46,159
have more clear colors on the, on the screen.

1211
01:22:47,721 --> 01:22:47,781
Uh,

1212
01:22:51,102 --> 01:22:52,885
There is here definitions

1213
01:22:54,006 --> 01:22:55,088
for further tests.

1214
01:22:55,088 --> 01:22:58,593
So now for a start, we

1215
01:22:58,593 --> 01:23:00,816
remove the comments here so that

1216
01:23:00,816 --> 01:23:02,178
you have a test definition

1217
01:23:02,178 --> 01:23:05,502
also to test subtraction.

1218
01:23:07,665 --> 01:23:08,266
We save this.

1219
01:23:11,671 --> 01:23:14,976
And git status.

1220
01:23:14,976 --> 01:23:16,097
Yeah, we have changed this file.

1221
01:23:17,740 --> 01:23:19,422
We add it.

1222
01:23:21,646 --> 01:23:24,951
And then write in the

1223
01:23:24,951 --> 01:23:30,681
commit message, added test or subtraction.

1224
01:23:34,327 --> 01:23:34,647
Save.

1225
01:23:36,110 --> 01:23:36,490
Push.

1226
01:23:40,817 --> 01:23:43,061
Then let's go to the GitHub page.

1227
01:23:46,667 --> 01:23:47,468
Reload.

1228
01:23:50,553 --> 01:23:54,397
So latest commit added test of subtraction.

1229
01:23:57,040 --> 01:23:58,202
It's pending.

1230
01:24:02,627 --> 01:24:04,449
And yeah, this, this one

1231
01:24:04,449 --> 01:24:08,393
should be fast, but yeah.

1232
01:24:08,393 --> 01:24:08,754
Okay.

1233
01:24:08,754 --> 01:24:09,194
Now it's wrong.

1234
01:24:11,156 --> 01:24:12,077
And now we can see it.

1235
01:24:12,077 --> 01:24:15,261
There's a, it's a red X here.

1236
01:24:17,047 --> 01:24:19,409
So press that one.

1237
01:24:19,409 --> 01:24:21,571
And yeah, all tests have failed.

1238
01:24:23,253 --> 01:24:24,214
Click details.

1239
01:24:27,677 --> 01:24:28,318
And here you can see.

1240
01:24:29,219 --> 01:24:36,366
So we have, yeah, the

1241
01:24:36,366 --> 01:24:43,473
assertion was that the test would yield

1242
01:24:43,473 --> 01:24:46,137
that it would return minus one.

1243
01:24:46,137 --> 01:24:48,080
However, we obtained five.

1244
01:24:48,080 --> 01:24:50,064
So it was therefore not fulfilled.

1245
01:24:51,466 --> 01:24:51,786
Okay.

1246
01:24:53,249 --> 01:24:54,491
We could have obtained that

1247
01:24:54,491 --> 01:24:56,574
also locally with PyChess, but now

1248
01:24:56,574 --> 01:24:57,816
we did it here on GitHub.

1249
01:24:59,999 --> 01:25:02,664
So go back here to the

1250
01:25:02,664 --> 01:25:05,067
main page for the repo on GitHub,

1251
01:25:05,067 --> 01:25:07,571
and then go to issues.

1252
01:25:09,254 --> 01:25:10,476
Then create a new issue.

1253
01:25:13,763 --> 01:25:19,730
And right then, subtraction is

1254
01:25:19,730 --> 01:25:22,192
not working properly.

1255
01:25:26,737 --> 01:25:28,139
And then I create it.

1256
01:25:33,685 --> 01:25:34,606
OK.

1257
01:25:34,606 --> 01:25:37,729
So in this case, I think

1258
01:25:37,729 --> 01:25:39,451
I already spotted in the code

1259
01:25:39,451 --> 01:25:41,273
where it goes wrong.

1260
01:25:42,147 --> 01:25:46,273
Let's presume now that I'm stuck here.

1261
01:25:46,273 --> 01:25:47,715
I need help from someone

1262
01:25:47,715 --> 01:25:49,337
and I've spotted the error and

1263
01:25:50,399 --> 01:25:51,981
I reported it as an issue.

1264
01:25:51,981 --> 01:25:53,643
And now, yeah, my colleague

1265
01:25:53,643 --> 01:25:56,948
[name] will see what he could do about it.

1266
01:25:58,910 --> 01:26:00,413
[name], could you switch to my screen?

1267
01:26:03,957 --> 01:26:04,779
Thank you.

1268
01:26:04,779 --> 01:26:08,644
Well, that's not quite right, I think.

1269
01:26:13,096 --> 01:26:14,298
Yeah, there you go.

1270
01:26:14,298 --> 01:26:18,626
So I just, I forked the repository.

1271
01:26:18,626 --> 01:26:21,230
I guess I should sync it.

1272
01:26:21,230 --> 01:26:22,052
I'm probably a little bit

1273
01:26:22,052 --> 01:26:23,514
behind because I did it earlier.

1274
01:26:23,514 --> 01:26:24,236
So let's do that.

1275
01:26:25,818 --> 01:26:29,986
And here we go.

1276
01:26:29,986 --> 01:26:38,040
And then I, well, I also already, so

1277
01:26:42,307 --> 01:26:43,569
OK, so now I have

1278
01:26:43,569 --> 01:26:48,135
everything locally that [name] has.

1279
01:26:48,135 --> 01:26:50,559
Let's run the tests again locally.

1280
01:26:51,480 --> 01:26:52,782
Of course, one should, of

1281
01:26:52,782 --> 01:26:56,567
course, do that as well.

1282
01:27:02,055 --> 01:27:03,237
Let's check now again.

1283
01:27:04,619 --> 01:27:06,582
Oh, yeah, so we see tests have failed.

1284
01:27:07,904 --> 01:27:09,546
Why might that be?

1285
01:27:10,994 --> 01:27:13,457
And I can look at the test.

1286
01:27:14,999 --> 01:27:16,682
So I can see the test makes sense.

1287
01:27:17,523 --> 01:27:19,926
2 minus 3 should indeed be minus 1.

1288
01:27:20,967 --> 01:27:24,893
Then look at the code that

1289
01:27:24,893 --> 01:27:25,974
is being run, maybe.

1290
01:27:27,296 --> 01:27:27,817
Subtract.

1291
01:27:27,817 --> 01:27:30,921
So, oh, this is a plus 2.

1292
01:27:30,921 --> 01:27:33,104
I found the mistake.

1293
01:27:35,868 --> 01:27:39,853
So I've

1294
01:27:41,605 --> 01:27:42,627
made a change.

1295
01:27:42,627 --> 01:27:46,213
So let's run the test again.

1296
01:27:46,213 --> 01:27:47,696
And now it passes.

1297
01:27:48,978 --> 01:27:49,299
Hooray.

1298
01:27:49,299 --> 01:27:59,517
Then let's add our change and commit.

1299
01:27:59,517 --> 01:28:00,399
Now, what should I write

1300
01:28:00,399 --> 01:28:02,803
as a commit message here?

1301
01:28:03,728 --> 01:28:06,393
It's a moment here.

1302
01:28:06,393 --> 01:28:08,837
So now, which branch are you

1303
01:28:08,837 --> 01:28:09,558
in for the moment?

1304
01:28:10,600 --> 01:28:12,003
So I'm, I believe, still

1305
01:28:12,003 --> 01:28:13,405
in the main branch.

1306
01:28:13,405 --> 01:28:14,047
Yeah.

1307
01:28:14,047 --> 01:28:17,733
But I am... Yeah, I guess

1308
01:28:17,733 --> 01:28:19,917
I could have made a branch for that fix.

1309
01:28:19,917 --> 01:28:21,600
But I am on my own fork.

1310
01:28:21,600 --> 01:28:23,243
So I'm not on... Yes.

1311
01:28:23,243 --> 01:28:23,924
Yeah, yeah.

1312
01:28:23,924 --> 01:28:24,846
Right, right.

1313
01:28:24,846 --> 01:28:25,367
Yes.

1314
01:28:25,367 --> 01:28:25,447
Yeah.

1315
01:28:25,447 --> 01:28:27,113
So I could not directly

1316
01:28:27,113 --> 01:28:29,561
commit to [name]'s repository.

1317
01:28:29,561 --> 01:28:32,611
But since it's my own copy of it, I can.

1318
01:28:34,638 --> 01:28:34,798
Yeah.

1319
01:28:35,960 --> 01:28:39,805
So, well, I'm about to do

1320
01:28:39,805 --> 01:28:40,806
that, but first I would need

1321
01:28:40,806 --> 01:28:41,687
to commit my changes.

1322
01:28:43,669 --> 01:28:48,515
So, yeah, fixed subtraction, I guess.

1323
01:28:50,597 --> 01:28:52,560
Should I write something about

1324
01:28:52,560 --> 01:28:53,761
that I fixed an issue or

1325
01:28:53,761 --> 01:28:55,884
should I put that in the pull request message?

1326
01:28:58,927 --> 01:29:00,509
So, I mean, here you tested

1327
01:29:00,509 --> 01:29:02,732
it locally and you saw that it worked.

1328
01:29:03,813 --> 01:29:05,896
So then I'd say,

1329
01:29:05,896 --> 01:29:07,298
I mean, you could go ahead now

1330
01:29:07,298 --> 01:29:11,265
and write then with the,

1331
01:29:13,949 --> 01:29:16,393
yeah, with the square, square

1332
01:29:16,393 --> 01:29:20,680
symbol fixes and then number

1333
01:29:20,680 --> 01:29:22,663
one, because it was issue number one.

1334
01:29:23,585 --> 01:29:23,986
Okay.

1335
01:29:23,986 --> 01:29:28,473
the most important one all right yeah

1336
01:29:28,473 --> 01:29:32,740
so yeah so this fixes uh or closes

1337
01:29:32,740 --> 01:29:35,204
or close and then probably

1338
01:29:35,204 --> 01:29:37,428
an hour issue we'll do some

1339
01:29:37,428 --> 01:29:39,531
magic then on github

1340
01:29:40,355 --> 01:29:42,819
let's switch to back to github

1341
01:29:42,819 --> 01:29:43,780
and we can see here uh

1342
01:29:45,483 --> 01:29:46,825
when i cloned the when i

1343
01:29:46,825 --> 01:29:49,829
forked the repository it also copied um

1344
01:29:49,829 --> 01:29:51,532
for example all of those github actions

1345
01:29:51,532 --> 01:29:52,613
so you don't need to

1346
01:29:52,613 --> 01:29:55,217
reset them just because uh

1347
01:29:55,217 --> 01:29:56,259
you've walked something and they

1348
01:29:56,259 --> 01:29:58,542
are they come with your fork

1349
01:30:01,006 --> 01:30:02,909
yeah because those that the ml

1350
01:30:02,909 --> 01:30:05,653
file is included in the github

1351
01:30:07,473 --> 01:30:07,653
Yeah.

1352
01:30:07,653 --> 01:30:09,896
And so you can also see the nice thing is,

1353
01:30:09,896 --> 01:30:11,177
well, I wouldn't have had

1354
01:30:11,177 --> 01:30:13,279
to remember to locally test anything.

1355
01:30:13,279 --> 01:30:15,402
If I push it, it gets tested automatically.

1356
01:30:15,402 --> 01:30:16,583
You don't need to, you set it

1357
01:30:16,583 --> 01:30:18,265
once and then you kind of

1358
01:30:18,265 --> 01:30:19,927
forget about it because then

1359
01:30:19,927 --> 01:30:20,848
whenever a test fails, you

1360
01:30:20,848 --> 01:30:22,089
would probably get an email from GitHub.

1361
01:30:23,190 --> 01:30:23,571
Yes.

1362
01:30:23,571 --> 01:30:23,831
Yeah.

1363
01:30:23,831 --> 01:30:24,432
You're right.

1364
01:30:24,432 --> 01:30:31,239
Yeah.

1365
01:30:31,239 --> 01:30:36,585
So see, we can see success tests have, uh,

1366
01:30:38,354 --> 01:30:38,975
Completed.

1367
01:30:44,522 --> 01:30:46,705
Yeah, it seems to look fine.

1368
01:30:46,705 --> 01:30:49,209
And now I, of course, want

1369
01:30:49,209 --> 01:30:54,636
to make a pull request to

1370
01:30:54,636 --> 01:31:01,946
contribute back to the original repository.

1371
01:31:04,029 --> 01:31:04,670
Where is that?

1372
01:31:04,670 --> 01:31:06,893
Do I have to be taller?

1373
01:31:07,953 --> 01:31:10,337
contribute maybe open pull request.

1374
01:31:11,359 --> 01:31:13,423
Sorry, you probably don't see that.

1375
01:31:13,423 --> 01:31:14,004
Let's come back.

1376
01:31:19,434 --> 01:31:22,920
I guess this, yeah, we will

1377
01:31:22,920 --> 01:31:25,144
just use the commit message as the title.

1378
01:31:25,144 --> 01:31:26,486
I don't think we need anything further.

1379
01:31:26,486 --> 01:31:29,792
And then yeah, we create the pull request.

1380
01:31:34,042 --> 01:31:35,845
And yeah, let's switch back

1381
01:31:35,845 --> 01:31:38,009
to [name]'s screen.

1382
01:31:50,650 --> 01:31:56,160
So we now see the repo on my GitHub.

1383
01:31:56,160 --> 01:31:58,243
And I press refresh.

1384
01:32:01,379 --> 01:32:04,624
and uh okay it didn't throw up like

1385
01:32:04,624 --> 01:32:06,286
that but uh with the color

1386
01:32:06,286 --> 01:32:08,429
but i can see here yeah issues

1387
01:32:08,429 --> 01:32:10,713
we have one still then here

1388
01:32:10,713 --> 01:32:14,058
pull requests one i click here

1389
01:32:14,899 --> 01:32:16,862
and yeah then i'll see it

1390
01:32:16,862 --> 01:32:19,205
fix subtraction fixes error number

1391
01:32:19,205 --> 01:32:24,433
one or issue number one and uh

1392
01:32:24,433 --> 01:32:30,762
maybe old but i say pound once yeah okay

1393
01:32:35,905 --> 01:32:38,929
uh, prove the workflows to run like this.

1394
01:32:41,933 --> 01:32:47,059
Um, so they actually, you see here,

1395
01:32:47,059 --> 01:32:47,820
there, there, there are a

1396
01:32:47,820 --> 01:32:49,081
few tests being run here.

1397
01:32:49,081 --> 01:32:51,184
So, um, what's running here,

1398
01:32:51,184 --> 01:32:52,946
but that's the, the spice test

1399
01:32:52,946 --> 01:32:54,468
stuff that was, that we had

1400
01:32:54,468 --> 01:32:55,870
set up with the actions.

1401
01:32:57,332 --> 01:33:02,318
Uh, then here, um, Oh,

1402
01:33:03,547 --> 01:33:04,969
What happened there?

1403
01:33:04,969 --> 01:33:05,990
What happened there?

1404
01:33:05,990 --> 01:33:20,545
Okay.

1405
01:33:24,450 --> 01:33:26,652
Well, if you look on this part here,

1406
01:33:27,644 --> 01:33:29,787
So the test case for

1407
01:33:29,787 --> 01:33:32,991
addition and subtraction, each

1408
01:33:32,991 --> 01:33:35,454
of these passed.

1409
01:33:35,454 --> 01:33:37,277
So that thing is fine.

1410
01:33:38,078 --> 01:33:40,501
But now here's for the Calvert thing.

1411
01:33:49,873 --> 01:33:51,475
Something is not working here.

1412
01:33:59,032 --> 01:34:02,958
Then I don't know what we are missing.

1413
01:34:06,282 --> 01:34:07,865
Yeah, if you spot something,

1414
01:34:07,865 --> 01:34:10,869
you're very welcome to write

1415
01:34:10,869 --> 01:34:11,890
in the shared document.

1416
01:34:18,460 --> 01:34:24,128
But so the coverage report...

1417
01:34:30,267 --> 01:34:31,929
Well, at least there are no conflicts.

1418
01:34:31,929 --> 01:34:32,570
That's good news.

1419
01:34:41,923 --> 01:34:43,506
Yeah, perhaps there was some

1420
01:34:43,506 --> 01:34:48,372
typo when I added it in the Jaml file.

1421
01:34:53,600 --> 01:34:55,262
I actually think that...

1422
01:34:57,149 --> 01:34:58,150
I think right now is not

1423
01:34:58,150 --> 01:34:59,512
the time to error check for

1424
01:34:59,512 --> 01:35:01,355
where it goes wrong, but I

1425
01:35:01,355 --> 01:35:03,457
would presume it was in the YAML file.

1426
01:35:03,457 --> 01:35:05,861
But we can observe here that

1427
01:35:05,861 --> 01:35:08,905
we have no conflicts with the base bronze.

1428
01:35:10,507 --> 01:35:16,174
And therefore, I feel, so to

1429
01:35:16,174 --> 01:35:18,738
say, happy to merge this.

1430
01:35:20,420 --> 01:35:22,082
Confirm the merge, and then

1431
01:35:22,082 --> 01:35:22,903
the code is merged.

1432
01:35:28,621 --> 01:35:30,424
And now refreshing here, we can see

1433
01:35:30,424 --> 01:35:31,926
that both the issue and

1434
01:35:31,926 --> 01:35:33,488
the pull requests are, I mean,

1435
01:35:33,488 --> 01:35:34,830
we don't have any open on these.

1436
01:35:36,052 --> 01:35:40,979
And I actually say, what happened now,

1437
01:35:40,979 --> 01:35:41,900
okay, we don't know specifically

1438
01:35:41,900 --> 01:35:42,962
what went wrong here with

1439
01:35:42,962 --> 01:35:44,764
the coverage thingy, but I

1440
01:35:44,764 --> 01:35:46,547
say that something like this

1441
01:35:46,547 --> 01:35:50,613
is happening not so seldom, I would say.

1442
01:35:50,613 --> 01:35:51,414
In the sense, you have

1443
01:35:51,414 --> 01:35:54,218
the testing in place, but you

1444
01:35:54,218 --> 01:35:57,042
don't have clean termination of everything.

1445
01:35:58,709 --> 01:36:02,795
and uh yeah i do think of course

1446
01:36:02,795 --> 01:36:03,896
if you have clean termination

1447
01:36:03,896 --> 01:36:05,258
of all the tests but if

1448
01:36:05,258 --> 01:36:07,281
something happens like this here

1449
01:36:07,281 --> 01:36:08,863
then uh yeah perhaps you

1450
01:36:08,863 --> 01:36:10,165
could nevertheless go ahead and merge

1451
01:36:11,226 --> 01:36:11,947
as long as you know what

1452
01:36:11,947 --> 01:36:13,890
you're doing and then you might

1453
01:36:13,890 --> 01:36:19,738
then get back to it and then next day um

1454
01:36:20,900 --> 01:36:25,226
great um we could perhaps we

1455
01:36:25,226 --> 01:36:27,068
will have a break shortly and

1456
01:36:27,068 --> 01:36:29,191
and perhaps then then we could revisit

1457
01:36:30,132 --> 01:36:31,955
what happened and and get back

1458
01:36:31,955 --> 01:36:35,459
to you on that point later

1459
01:36:35,459 --> 01:36:37,382
but now it's high time that

1460
01:36:37,382 --> 01:36:40,866
we will have the break and

1461
01:36:43,190 --> 01:36:46,364
it's let's see how much time

1462
01:36:46,364 --> 01:36:48,247
I think originally it was 10 minutes.

1463
01:36:48,247 --> 01:36:48,648
Yes.

1464
01:36:48,648 --> 01:36:50,070
So let's go for that.

1465
01:36:50,070 --> 01:36:53,376
It's now 28 past the full hour.

1466
01:36:53,376 --> 01:36:54,819
So then let's reconvene at

1467
01:36:54,819 --> 01:36:58,345
38 after the full hour.

1468
01:37:02,372 --> 01:37:02,973
Bye.

1469
01:37:04,576 --> 01:37:05,217
Bye.

1470
01:47:18,907 --> 01:47:27,041
Welcome back after the break.

1471
01:47:29,405 --> 01:47:33,912
So right before we went into the break,

1472
01:47:33,912 --> 01:47:36,537
we noticed that this automated

1473
01:47:36,537 --> 01:47:40,864
test for my Gitria, that it failed.

1474
01:47:41,873 --> 01:47:44,657
Turned out that just refreshing

1475
01:47:44,657 --> 01:47:48,161
the web page and to look on

1476
01:47:48,161 --> 01:47:50,244
the test being run then after

1477
01:47:50,244 --> 01:47:51,085
the merge of the code,

1478
01:47:52,587 --> 01:47:55,431
then everything was smooth.

1479
01:47:55,431 --> 01:47:57,053
So what might have happened is simply

1480
01:47:57,053 --> 01:47:59,837
that it failed on this

1481
01:47:59,837 --> 01:48:01,419
particular instance when it ran

1482
01:48:01,419 --> 01:48:03,822
the tests at first.

1483
01:48:03,822 --> 01:48:05,965
And it can be good to be

1484
01:48:05,965 --> 01:48:10,952
aware of that this can happen.

1485
01:48:12,586 --> 01:48:14,369
so with that i think we

1486
01:48:14,369 --> 01:48:17,354
can conclude the part on automated testing

1487
01:48:17,354 --> 01:48:21,761
and we will now move into test design

1488
01:48:21,761 --> 01:48:27,269
so [name] please go ahead yeah

1489
01:48:27,269 --> 01:48:29,273
so this comes also with

1490
01:48:29,273 --> 01:48:32,017
an exercise that's uh which you

1491
01:48:32,017 --> 01:48:34,140
will also spend uh at least

1492
01:48:34,140 --> 01:48:39,569
well say 20 minutes with um it's mostly about

1493
01:48:39,569 --> 01:48:42,192
So different types, like

1494
01:48:42,192 --> 01:48:43,012
different scenarios.

1495
01:48:43,953 --> 01:48:45,315
There are different kinds of functions

1496
01:48:45,315 --> 01:48:48,338
and classes or general code

1497
01:48:48,338 --> 01:48:49,178
that you might want to test.

1498
01:48:51,060 --> 01:48:54,344
And yeah, we have in

1499
01:48:54,344 --> 01:48:56,646
total 10 different scenarios that

1500
01:48:56,646 --> 01:48:58,107
you can look at.

1501
01:48:58,107 --> 01:49:00,249
The first five or so are

1502
01:49:01,991 --> 01:49:04,113
sort of on the simpler side.

1503
01:49:04,113 --> 01:49:08,037
And the later ones are a bit more complex.

1504
01:49:08,037 --> 01:49:09,399
So I would recommend during

1505
01:49:09,399 --> 01:49:12,383
the exercise that you start with

1506
01:49:12,383 --> 01:49:13,745
a simple one and then maybe

1507
01:49:15,187 --> 01:49:16,670
go into the more complex ones

1508
01:49:16,670 --> 01:49:17,851
when you've done a simpler one.

1509
01:49:19,814 --> 01:49:21,577
Yeah, so there are, I

1510
01:49:21,577 --> 01:49:23,079
won't maybe go through all of

1511
01:49:23,079 --> 01:49:27,485
the ones, but yeah.

1512
01:49:27,485 --> 01:49:29,829
So the first one is just simple.

1513
01:49:29,829 --> 01:49:32,813
Number comes in, number goes out.

1514
01:49:34,379 --> 01:49:37,145
with a mathematical function, essentially.

1515
01:49:37,145 --> 01:49:38,950
Then the second one would

1516
01:49:38,950 --> 01:49:44,963
be like on strings and a number.

1517
01:49:44,963 --> 01:49:46,908
So for example, counting words,

1518
01:49:46,908 --> 01:49:48,592
then you have files.

1519
01:49:48,592 --> 01:49:49,975
So files are always interesting.

1520
01:49:51,372 --> 01:49:52,854
Then we have, I believe,

1521
01:49:52,854 --> 01:49:54,816
random, oh, no, this is external dependency.

1522
01:49:54,816 --> 01:49:56,118
So this is for something

1523
01:49:56,118 --> 01:49:59,482
when you imagine the code

1524
01:49:59,482 --> 01:50:01,364
that you're writing interfaces with

1525
01:50:01,364 --> 01:50:02,986
some kind of hardware, for

1526
01:50:02,986 --> 01:50:04,608
example, a sensor that is

1527
01:50:04,608 --> 01:50:07,191
not present necessarily while you're testing.

1528
01:50:07,191 --> 01:50:08,893
So you'd have to find some

1529
01:50:08,893 --> 01:50:10,475
way around still testing your

1530
01:50:10,475 --> 01:50:12,257
software or your code, even

1531
01:50:12,257 --> 01:50:14,440
when that hardware is not present.

1532
01:50:14,440 --> 01:50:18,005
Then you have something mutable,

1533
01:50:18,005 --> 01:50:21,389
so you can have side effects

1534
01:50:21,389 --> 01:50:22,691
and you have to make

1535
01:50:22,691 --> 01:50:26,035
sure everything still works as expected.

1536
01:50:27,017 --> 01:50:32,164
Then the more complex ones start.

1537
01:50:32,164 --> 01:50:33,525
I won't go through all of them,

1538
01:50:33,525 --> 01:50:34,947
but there's also some random

1539
01:50:34,947 --> 01:50:36,770
numbers and some more interesting

1540
01:50:36,770 --> 01:50:37,711
things to explore.

1541
01:50:37,711 --> 01:50:39,714
And yeah, if you have

1542
01:50:39,714 --> 01:50:42,258
any questions, then just reach

1543
01:50:42,258 --> 01:50:44,302
out in the collaborative document.

1544
01:50:44,302 --> 01:50:46,706
And I'd say then, yeah,

1545
01:50:46,706 --> 01:50:48,128
start with the exercises.

1546
01:50:48,128 --> 01:50:50,472
You have 20 minutes from now.

1547
01:50:50,472 --> 01:50:53,557
And yeah, so it's 42 past

1548
01:50:53,557 --> 01:50:54,358
the full hour now.

1549
01:50:54,358 --> 01:50:56,883
So we'll see you two past

1550
01:50:57,764 --> 01:50:59,006
the next full hour.

1551
01:51:01,150 --> 01:51:01,911
Have fun.

1552
01:51:01,911 --> 01:51:02,031
Bye.

1553
02:11:21,685 --> 02:11:24,818
Welcome back.

1554
02:11:26,264 --> 02:11:27,107
I think that's the wrong.

1555
02:11:27,991 --> 02:11:29,919
Yes, the screen share is wrong.

1556
02:11:29,919 --> 02:11:30,240
Sorry.

1557
02:11:31,244 --> 02:11:31,425
Okay.

1558
02:11:33,886 --> 02:11:35,108
Yeah, thanks.

1559
02:11:35,108 --> 02:11:36,670
Yeah, welcome back.

1560
02:11:36,670 --> 02:11:39,413
So, yeah, there were two questions.

1561
02:11:40,975 --> 02:11:42,117
I think we'll get to them

1562
02:11:42,117 --> 02:11:42,918
for the second one.

1563
02:11:43,739 --> 02:11:45,841
Generally, well, the testing

1564
02:11:45,841 --> 02:11:47,563
frameworks provide facilities for

1565
02:11:47,563 --> 02:11:49,206
that usually, but you can,

1566
02:11:49,206 --> 02:11:50,647
in Python at least, also

1567
02:11:50,647 --> 02:11:53,471
just handle the exception that

1568
02:11:53,471 --> 02:11:55,574
you're expecting and not any

1569
02:11:55,574 --> 02:11:56,755
of the other ones.

1570
02:11:56,755 --> 02:11:57,376
That would...

1571
02:11:57,376 --> 02:11:59,420
At least should achieve that

1572
02:11:59,420 --> 02:12:01,204
what you're looking for.

1573
02:12:01,204 --> 02:12:04,170
But yeah, let's go on

1574
02:12:04,170 --> 02:12:05,552
since we're already quite late.

1575
02:12:07,136 --> 02:12:11,304
So next would be, we'll maybe go back.

1576
02:12:11,304 --> 02:12:13,168
So because for now, until

1577
02:12:13,168 --> 02:12:14,971
now, we've mostly talked about

1578
02:12:14,971 --> 02:12:17,356
Python and PyTest.

1579
02:12:17,356 --> 02:12:20,320
And we promised that we would

1580
02:12:20,320 --> 02:12:22,483
also at least take a brief

1581
02:12:22,483 --> 02:12:25,447
look at some other frameworks.

1582
02:12:25,447 --> 02:12:27,830
So yeah, let's look at C++.

1583
02:12:27,830 --> 02:12:30,274
And we'll be using catch2.

1584
02:12:33,538 --> 02:12:36,803
So yeah, we are going back

1585
02:12:36,803 --> 02:12:38,084
to this example where we're trying

1586
02:12:38,084 --> 02:12:38,906
to add two numbers.

1587
02:12:39,727 --> 02:12:46,536
And yeah, let's look at how that works.

1588
02:12:47,815 --> 02:12:57,833
Right.

1589
02:12:58,635 --> 02:13:02,061
So I have this minimal example.

1590
02:13:05,753 --> 02:13:10,498
The example is, yeah, you can,

1591
02:13:11,780 --> 02:13:13,762
I won't type it out again, but

1592
02:13:13,762 --> 02:13:17,286
so we need to include these

1593
02:13:17,286 --> 02:13:21,171
macros that Catch2 provides, like so.

1594
02:13:21,171 --> 02:13:25,716
Then there is most of, so

1595
02:13:25,716 --> 02:13:27,758
this here is the actual,

1596
02:13:27,758 --> 02:13:29,381
function that we're implementing

1597
02:13:29,381 --> 02:13:33,749
so it takes a number and

1598
02:13:33,749 --> 02:13:38,117
a number could be yeah different things

1599
02:13:39,059 --> 02:13:42,225
and then yeah the function name

1600
02:13:42,225 --> 02:13:45,190
and we add them together like so

1601
02:13:45,190 --> 02:13:47,734
And after that comes our test case.

1602
02:13:47,734 --> 02:13:50,599
So we have this, well,

1603
02:13:50,599 --> 02:13:51,781
here, the integer test.

1604
02:13:53,924 --> 02:13:57,911
Maybe, [name], you can maybe

1605
02:13:57,911 --> 02:14:01,517
explain what does this add in square brackets?

1606
02:14:01,517 --> 02:14:02,078
What does that do?

1607
02:14:07,427 --> 02:14:08,869
Yes, I think...

1608
02:14:12,292 --> 02:14:13,614
Yeah, good question.

1609
02:14:13,614 --> 02:14:15,537
I don't know if it's a label

1610
02:14:15,537 --> 02:14:16,719
or if it's a keyword here.

1611
02:14:17,880 --> 02:14:28,896
Yeah, so add this also here,

1612
02:14:28,896 --> 02:14:31,761
the name of the function that we have defined.

1613
02:14:31,761 --> 02:14:34,104
And then here in the test

1614
02:14:34,104 --> 02:14:38,451
case, we have the int test.

1615
02:14:38,451 --> 02:14:39,993
I mean, that's int for integer.

1616
02:14:41,295 --> 02:14:41,455
Yeah.

1617
02:14:42,667 --> 02:14:45,131
Yeah, but so test case, in any case,

1618
02:14:45,131 --> 02:14:47,495
is a macro that is provided

1619
02:14:47,495 --> 02:14:49,298
by this include statement.

1620
02:14:49,298 --> 02:14:53,846
And this requires also, comes

1621
02:14:53,846 --> 02:14:56,831
out of that include.

1622
02:14:56,831 --> 02:14:59,295
And yeah, so whatever's in there

1623
02:14:59,295 --> 02:15:03,001
is just a sort of parameter to this macro.

1624
02:15:03,001 --> 02:15:05,585
um and in this require we

1625
02:15:05,585 --> 02:15:07,708
then call our function with some parameters

1626
02:15:07,708 --> 02:15:09,531
and it works very similar

1627
02:15:09,531 --> 02:15:10,893
to this assert that you saw earlier

1628
02:15:10,893 --> 02:15:14,979
in um in uh pi test so

1629
02:15:14,979 --> 02:15:17,723
that's that's our code and then

1630
02:15:17,723 --> 02:15:19,866
um catch two is very integrated

1631
02:15:19,866 --> 02:15:25,555
with cmake um so we're not

1632
02:15:25,555 --> 02:15:27,037
sure how familiar you are with

1633
02:15:27,037 --> 02:15:29,461
cmake i'm i'm not very familiar with it i

1634
02:15:29,461 --> 02:15:32,546
tend to avoid those kinds of things.

1635
02:15:32,546 --> 02:15:33,407
And in Python, you don't

1636
02:15:33,407 --> 02:15:34,268
really need them usually.

1637
02:15:35,871 --> 02:15:38,715
But yeah, so CMake is

1638
02:15:40,017 --> 02:15:40,938
in the broadest terms, I guess

1639
02:15:40,938 --> 02:15:43,422
we could call it a build system.

1640
02:15:43,422 --> 02:15:46,266
So you can use it, especially

1641
02:15:46,266 --> 02:15:49,711
for compiled languages to build

1642
02:15:49,711 --> 02:15:53,677
and sort of build the binaries or

1643
02:15:53,677 --> 02:15:55,279
Well, it's a bit more powerful

1644
02:15:55,279 --> 02:15:56,880
than that, but you can sort

1645
02:15:56,880 --> 02:15:59,323
of use it to take your

1646
02:15:59,323 --> 02:16:02,225
code and generate something from it.

1647
02:16:02,225 --> 02:16:04,267
And in our case, so most of the time,

1648
02:16:04,267 --> 02:16:05,629
that's just compiling it to

1649
02:16:05,629 --> 02:16:07,230
the binaries that you can then execute,

1650
02:16:07,230 --> 02:16:08,151
but you can also use it

1651
02:16:08,151 --> 02:16:10,313
when you're in conjunction with

1652
02:16:10,313 --> 02:16:14,878
Catch-2 to run tests, for example.

1653
02:16:14,878 --> 02:16:18,922
And so this is how the...

1654
02:16:18,922 --> 02:16:21,766
our CMakeLists file would look like.

1655
02:16:21,766 --> 02:16:22,927
So this is the description

1656
02:16:22,927 --> 02:16:24,389
of the project and what is

1657
02:16:25,230 --> 02:16:29,276
supposed to happen when you, how

1658
02:16:29,276 --> 02:16:31,619
you build it and whatever that means.

1659
02:16:31,619 --> 02:16:34,723
So first is some sort of preamble.

1660
02:16:36,004 --> 02:16:38,327
And then what we're doing here

1661
02:16:38,327 --> 02:16:41,872
is we tell CMake to download Catch2.

1662
02:16:41,872 --> 02:16:44,676
And so you don't need to

1663
02:16:44,676 --> 02:16:46,659
sort of install it yourself first,

1664
02:16:46,659 --> 02:16:49,684
which I have also done, but

1665
02:16:49,684 --> 02:16:51,346
it's not sort of strictly necessary

1666
02:16:51,346 --> 02:16:52,668
because you can sort of put

1667
02:16:52,668 --> 02:16:54,130
that in there and then CMake

1668
02:16:54,130 --> 02:16:55,452
will do that for you.

1669
02:16:57,435 --> 02:17:03,424
Then we do, so this part

1670
02:17:03,424 --> 02:17:04,586
down here, that is also

1671
02:17:04,586 --> 02:17:08,872
basically provided or sort of

1672
02:17:08,872 --> 02:17:10,515
Catch tool understands this.

1673
02:17:11,476 --> 02:17:13,500
So enable testing, then we

1674
02:17:13,500 --> 02:17:15,924
add an executable, which, so

1675
02:17:15,924 --> 02:17:17,827
this is example here.

1676
02:17:17,827 --> 02:17:18,689
It will also tell that

1677
02:17:18,689 --> 02:17:20,953
to compile that executable.

1678
02:17:20,953 --> 02:17:23,797
And then example CPP is the

1679
02:17:23,797 --> 02:17:27,063
source code for that executable.

1680
02:17:27,063 --> 02:17:28,906
And then you have to

1681
02:17:29,808 --> 02:17:31,852
link the libraries from catch to

1682
02:17:31,852 --> 02:17:34,176
that you would need to run the tests

1683
02:17:34,176 --> 02:17:36,580
and sort of do all of the things

1684
02:17:36,580 --> 02:17:39,045
that the testing that, for

1685
02:17:39,045 --> 02:17:40,227
example, in the in the other

1686
02:17:40,227 --> 02:17:42,652
scenario, or in the other lab

1687
02:17:42,652 --> 02:17:43,894
for the other other language pi

1688
02:17:43,894 --> 02:17:46,739
test would do and

1689
02:17:46,739 --> 02:17:49,124
Yeah, then we would need it

1690
02:17:49,124 --> 02:17:54,796
to catch to how it finds

1691
02:17:54,796 --> 02:17:55,718
the test that we're running.

1692
02:17:55,718 --> 02:17:59,466
So now, how does one actually run that?

1693
02:17:59,466 --> 02:18:04,377
So you can see in the description here.

1694
02:18:05,622 --> 02:18:06,724
You run the test, that's a

1695
02:18:06,724 --> 02:18:08,707
little bit more complicated again.

1696
02:18:08,707 --> 02:18:10,229
In Python, you just run pytest.

1697
02:18:13,113 --> 02:18:16,418
For catch2, you would need to run this.

1698
02:18:17,479 --> 02:18:18,621
So, and again, I'm not

1699
02:18:18,621 --> 02:18:19,763
too familiar with CMAC.

1700
02:18:19,763 --> 02:18:23,829
So this will kind of prepare

1701
02:18:23,829 --> 02:18:26,453
all of the stuff that is

1702
02:18:26,453 --> 02:18:28,775
just there for the testing.

1703
02:18:28,775 --> 02:18:29,958
itself.

1704
02:18:29,958 --> 02:18:31,581
And now in order to

1705
02:18:31,581 --> 02:18:36,612
compile the actual executable

1706
02:18:36,612 --> 02:18:38,576
binaries, like so.

1707
02:18:39,799 --> 02:18:41,963
And that takes already, I

1708
02:18:41,963 --> 02:18:43,106
think, unbearably long.

1709
02:18:45,010 --> 02:18:46,332
Why is that?

1710
02:18:46,332 --> 02:18:47,776
Why does it take long time here?

1711
02:18:47,776 --> 02:18:49,970
Because our code is very short.

1712
02:18:49,970 --> 02:18:53,975
Yeah, well, I would suspect

1713
02:18:53,975 --> 02:18:55,937
that our code is very short,

1714
02:18:55,937 --> 02:18:58,860
but the catch-2 test, the catch-2

1715
02:18:58,860 --> 02:19:01,203
code is not very short.

1716
02:19:01,203 --> 02:19:03,346
It can do probably a lot

1717
02:19:03,346 --> 02:19:05,829
more than we are currently asking of it.

1718
02:19:05,829 --> 02:19:07,671
And yeah, I guess it's

1719
02:19:07,671 --> 02:19:09,072
more relatively complex.

1720
02:19:10,494 --> 02:19:11,615
Yeah, yeah, exactly.

1721
02:19:11,615 --> 02:19:12,897
No, so indeed.

1722
02:19:12,897 --> 02:19:13,898
So here.

1723
02:19:13,898 --> 02:19:16,643
as defined in this CMakeList.txt,

1724
02:19:17,484 --> 02:19:21,892
we are fetching the Catch2 framework,

1725
02:19:22,814 --> 02:19:23,956
which then is now then

1726
02:19:23,956 --> 02:19:26,139
also built together with

1727
02:19:26,139 --> 02:19:28,083
our specific application code.

1728
02:19:29,165 --> 02:19:30,287
This is one workflow.

1729
02:19:30,287 --> 02:19:32,731
One could also have

1730
02:19:32,731 --> 02:19:33,372
I mean, you could have

1731
02:19:33,372 --> 02:19:35,876
a standalone installation or catch

1732
02:19:35,876 --> 02:19:38,720
two on your computer.

1733
02:19:38,720 --> 02:19:40,583
And then instead of building

1734
02:19:40,583 --> 02:19:43,508
it each time, you could then link to it.

1735
02:19:44,309 --> 02:19:46,873
And I will include statements

1736
02:19:46,873 --> 02:19:49,036
while you are building your specific code.

1737
02:19:49,838 --> 02:19:50,378
Okay.

1738
02:19:50,378 --> 02:19:54,164
So if I did it again, does it cache it?

1739
02:19:57,590 --> 02:19:57,810
No.

1740
02:20:01,283 --> 02:20:03,090
Yeah, well, if you would add it here,

1741
02:20:03,090 --> 02:20:08,128
let's say that example.cc source

1742
02:20:08,128 --> 02:20:10,236
code file here, but everything

1743
02:20:10,236 --> 02:20:13,167
else, including the fetched code for

1744
02:20:14,294 --> 02:20:17,420
For the cats too, then,

1745
02:20:17,420 --> 02:20:18,682
yeah, CMake will then figure out

1746
02:20:18,682 --> 02:20:20,806
that it will need to recompile

1747
02:20:20,806 --> 02:20:21,908
only the source code file

1748
02:20:21,908 --> 02:20:23,310
that they have changed.

1749
02:20:23,310 --> 02:20:26,216
So in that regard, it is cats.

1750
02:20:26,216 --> 02:20:27,799
But still, this is just local

1751
02:20:28,780 --> 02:20:31,565
fetch code to be used

1752
02:20:31,565 --> 02:20:33,028
within this directory here.

1753
02:20:34,443 --> 02:20:36,249
OK, so you can see I

1754
02:20:36,249 --> 02:20:37,212
just made a trivial change

1755
02:20:37,212 --> 02:20:39,138
that goes significantly faster.

1756
02:20:39,940 --> 02:20:41,184
Yeah.

1757
02:20:41,184 --> 02:20:44,093
OK, so we've built everything now.

1758
02:20:45,036 --> 02:20:47,926
And we build it into the build directory.

1759
02:20:47,926 --> 02:20:51,455
And so now we run it.

1760
02:20:51,455 --> 02:20:53,440
And I believe that is the CTest command,

1761
02:20:53,440 --> 02:20:54,744
which you can see that

1762
02:20:54,744 --> 02:20:56,047
also goes relatively quickly.

1763
02:20:56,909 --> 02:21:01,241
And yeah, one test passed.

1764
02:21:02,304 --> 02:21:04,770
Hooray.

1765
02:21:05,746 --> 02:21:06,367
Yeah.

1766
02:21:06,367 --> 02:21:09,251
So, uh, since we're already quite late,

1767
02:21:09,251 --> 02:21:10,973
we had a more complex example

1768
02:21:10,973 --> 02:21:12,855
for that as well, but I would suggest

1769
02:21:12,855 --> 02:21:16,400
that we skip that and, uh,

1770
02:21:16,400 --> 02:21:20,024
move on to our next point

1771
02:21:20,024 --> 02:21:24,670
in the agenda, um, which

1772
02:21:24,670 --> 02:21:26,573
is maybe some conclusions.

1773
02:21:28,836 --> 02:21:30,618
Um, yeah.

1774
02:21:31,720 --> 02:21:32,040
Um,

1775
02:21:33,910 --> 02:21:34,591
What would you say?

1776
02:21:34,591 --> 02:21:38,358
What's the main takeaway, [name]?

1777
02:21:42,385 --> 02:21:44,308
So yeah, one main takeaway

1778
02:21:44,308 --> 02:21:49,978
is that testing is good and it's important.

1779
02:21:51,089 --> 02:21:54,552
Often there is a bit of

1780
02:21:54,552 --> 02:21:57,395
a learning curve for these tools.

1781
02:21:57,395 --> 02:21:59,197
So PyTest, which are mainly

1782
02:21:59,197 --> 02:22:03,101
used here, is rather smooth

1783
02:22:03,101 --> 02:22:03,922
to get started with.

1784
02:22:04,923 --> 02:22:08,146
For compiling with this, yeah,

1785
02:22:08,146 --> 02:22:11,289
certainly it can be a bit more involved.

1786
02:22:11,289 --> 02:22:14,533
So it's a little bit a

1787
02:22:14,533 --> 02:22:16,214
question of mindset here that

1788
02:22:16,214 --> 02:22:19,037
you simply need to...

1789
02:22:20,654 --> 02:22:22,296
I mean, you need to figure out

1790
02:22:22,296 --> 02:22:24,859
for yourself whether, let's say,

1791
02:22:24,859 --> 02:22:26,761
is the code that I'm working here now,

1792
02:22:26,761 --> 02:22:27,662
is it something, let's

1793
02:22:27,662 --> 02:22:30,085
say, something major, something that

1794
02:22:30,085 --> 02:22:31,447
I and colleagues will use over

1795
02:22:31,447 --> 02:22:33,810
many months of time or even years?

1796
02:22:34,891 --> 02:22:35,872
Yes.

1797
02:22:35,872 --> 02:22:38,836
If that's so, then it's worth

1798
02:22:38,836 --> 02:22:41,078
the effort to get going with testing.

1799
02:22:43,181 --> 02:22:49,108
Automated testing really helps because

1800
02:22:50,624 --> 02:22:52,532
that enables you to have

1801
02:22:52,532 --> 02:22:54,481
the tests being run without

1802
02:22:54,481 --> 02:22:57,012
you having to monitor it automatically.

1803
02:22:58,197 --> 02:23:01,272
This is a large convenience factor here.

1804
02:23:01,272 --> 02:23:01,773
Yeah.

1805
02:23:01,773 --> 02:23:03,536
I would also point out there,

1806
02:23:03,536 --> 02:23:06,400
so we used mostly PyTest and

1807
02:23:07,562 --> 02:23:08,945
for the most part, it was

1808
02:23:08,945 --> 02:23:11,208
kind of almost invisible.

1809
02:23:11,208 --> 02:23:14,474
The only thing that, or depending on

1810
02:23:14,474 --> 02:23:15,816
how you solve the exercise or

1811
02:23:15,816 --> 02:23:17,298
how you approach them, you may

1812
02:23:17,298 --> 02:23:20,824
be only used PyTest by calling PyTest.

1813
02:23:20,824 --> 02:23:23,428
But there are also additional features

1814
02:23:23,428 --> 02:23:25,472
that you can use inside of

1815
02:23:25,472 --> 02:23:27,074
the tests while you're writing them.

1816
02:23:27,074 --> 02:23:28,036
For example,

1817
02:23:28,036 --> 02:23:31,679
when you are testing

1818
02:23:32,860 --> 02:23:34,862
floating point numbers, then you

1819
02:23:34,862 --> 02:23:36,584
can use pi tests.

1820
02:23:38,445 --> 02:23:41,028
It offers some facilities to

1821
02:23:41,028 --> 02:23:43,950
set the tolerance, which might be

1822
02:23:43,950 --> 02:23:45,011
sort of a little bit more

1823
02:23:45,011 --> 02:23:49,876
robust than sort of just checking

1824
02:23:49,876 --> 02:23:52,418
sort of the absolute difference

1825
02:23:52,418 --> 02:23:56,442
between the output and what

1826
02:23:56,442 --> 02:23:57,803
you were expecting.

1827
02:23:57,803 --> 02:24:00,767
And it offers some more of those things.

1828
02:24:00,767 --> 02:24:04,071
And one thing you might want

1829
02:24:04,071 --> 02:24:05,152
to look at is that we

1830
02:24:05,152 --> 02:24:06,173
didn't discuss our fixtures.

1831
02:24:07,375 --> 02:24:11,339
And yeah, so there's a little

1832
02:24:11,339 --> 02:24:14,423
bit more to PyTest than we showed.

1833
02:24:14,423 --> 02:24:16,005
But yeah, I think the

1834
02:24:16,005 --> 02:24:18,408
nice thing about PyTest is that it

1835
02:24:18,408 --> 02:24:19,770
It provides a relatively

1836
02:24:19,770 --> 02:24:21,632
smooth on-ramp, very much

1837
02:24:21,632 --> 02:24:26,358
unlike something like Catch-2.

1838
02:24:26,358 --> 02:24:28,260
I was mostly exposed to

1839
02:24:28,260 --> 02:24:32,305
it in preparation for this lesson today.

1840
02:24:32,305 --> 02:24:34,428
And I would say I'm

1841
02:24:35,629 --> 02:24:37,591
not very comfortable with it yet.

1842
02:24:37,591 --> 02:24:38,292
I would need to spend a

1843
02:24:38,292 --> 02:24:39,073
lot more time to actually

1844
02:24:39,073 --> 02:24:40,375
understand everything that's going on there.

1845
02:24:42,337 --> 02:24:42,978
Yeah.

1846
02:24:42,978 --> 02:24:45,662
um but yeah and uh i would

1847
02:24:45,662 --> 02:24:47,506
say i i use pytest quite a

1848
02:24:47,506 --> 02:24:48,728
lot and i would uh yeah

1849
02:24:48,728 --> 02:24:50,671
recommend pick pick find one that

1850
02:24:50,671 --> 02:24:52,133
you find a framework that you like

1851
02:24:52,133 --> 02:24:59,686
and and launch um yeah and

1852
02:24:59,686 --> 02:25:02,691
uh as we talked about earlier

1853
02:25:02,691 --> 02:25:07,396
also so i mean your your code is one thing

1854
02:25:07,396 --> 02:25:09,399
that you need to, I mean,

1855
02:25:09,399 --> 02:25:10,660
as a developer of code, you

1856
02:25:10,660 --> 02:25:12,462
naturally have a responsibility

1857
02:25:12,462 --> 02:25:15,046
for its functionality, but then

1858
02:25:15,046 --> 02:25:19,551
there's always an environment in form of,

1859
02:25:19,551 --> 02:25:20,372
I mean, running on different

1860
02:25:20,372 --> 02:25:22,555
computers and running on

1861
02:25:22,555 --> 02:25:24,818
different operating systems.

1862
02:25:24,818 --> 02:25:27,561
And there, a common thing is

1863
02:25:27,561 --> 02:25:31,827
that then, I mean, you need to

1864
02:25:31,827 --> 02:25:33,589
be ready to, to, uh,

1865
02:25:35,273 --> 02:25:38,297
to work with the available resources.

1866
02:25:38,297 --> 02:25:40,681
And I mean, things can happen.

1867
02:25:40,681 --> 02:25:42,243
So just because the program

1868
02:25:42,243 --> 02:25:43,786
is working perfectly fine on

1869
02:25:43,786 --> 02:25:47,231
your personal computer doesn't

1870
02:25:47,231 --> 02:25:50,035
necessarily imply that a

1871
02:25:51,056 --> 02:25:54,742
code might flawlessly work on

1872
02:25:55,583 --> 02:25:56,624
some other system.

1873
02:25:59,348 --> 02:26:00,330
So I mean, in particular

1874
02:26:00,330 --> 02:26:02,513
for codes, which are rather

1875
02:26:03,640 --> 02:26:05,783
where you have worked through all of,

1876
02:26:05,783 --> 02:26:11,570
let's say, the more obvious bugs

1877
02:26:11,570 --> 02:26:13,653
or things that I guess you're wrong

1878
02:26:13,653 --> 02:26:17,578
while developing it, then it's

1879
02:26:17,578 --> 02:26:19,941
important to be aware of

1880
02:26:19,941 --> 02:26:22,665
that unexpected things could happen

1881
02:26:22,665 --> 02:26:24,427
if the environment changes.

1882
02:26:24,427 --> 02:26:25,789
Let's say you upgrade your

1883
02:26:25,789 --> 02:26:28,032
operating system or if you're

1884
02:26:28,032 --> 02:26:28,973
on another computer.

1885
02:26:31,737 --> 02:26:34,420
And it's clear that for some of these,

1886
02:26:38,545 --> 02:26:41,949
without having a testing

1887
02:26:41,949 --> 02:26:45,454
framework available, it would

1888
02:26:45,454 --> 02:26:48,517
be rather challenging to actually

1889
02:26:48,517 --> 02:26:52,943
test these things.

1890
02:26:52,943 --> 02:26:53,744
Because if you have a

1891
02:26:53,744 --> 02:26:56,487
large program, you cannot, let's

1892
02:26:56,487 --> 02:27:00,087
say, devote the time to try things out.

1893
02:27:00,087 --> 02:27:02,932
just on your own and by optical inspection,

1894
02:27:02,932 --> 02:27:04,395
because that would be much

1895
02:27:04,395 --> 02:27:05,317
too time consuming.

1896
02:27:05,317 --> 02:27:06,058
So if you then have a

1897
02:27:07,020 --> 02:27:08,303
test suite delivered with a

1898
02:27:08,303 --> 02:27:11,028
program, then it's a good habit

1899
02:27:11,028 --> 02:27:14,936
to just start that thing up as

1900
02:27:14,936 --> 02:27:18,182
soon as you are installing

1901
02:27:18,182 --> 02:27:19,885
or building a program.

1902
02:27:22,328 --> 02:27:24,091
I would also not underestimate

1903
02:27:24,091 --> 02:27:29,800
the kind of documentation effect testing has.

1904
02:27:29,800 --> 02:27:36,991
It can be really useful to see tests

1905
02:27:36,991 --> 02:27:39,815
and you, well, I guess at

1906
02:27:39,815 --> 02:27:41,458
some point you'll publish software

1907
02:27:41,458 --> 02:27:44,823
or you're writing the software, not

1908
02:27:44,823 --> 02:27:46,165
well, for the most part,

1909
02:27:46,165 --> 02:27:47,566
not because only you are

1910
02:27:47,566 --> 02:27:49,829
using it, but eventually someone

1911
02:27:49,829 --> 02:27:51,311
else will also be using it.

1912
02:27:51,311 --> 02:27:53,234
And that other person then needs to,

1913
02:27:53,234 --> 02:27:55,076
to some extent, understand

1914
02:27:55,076 --> 02:27:55,516
what's happening.

1915
02:27:56,398 --> 02:27:59,161
And tests can be very useful for that.

1916
02:27:59,161 --> 02:28:01,884
And also, I'm pretty sure that

1917
02:28:01,884 --> 02:28:03,807
that is happening because that's

1918
02:28:03,807 --> 02:28:06,010
going to happen because future you

1919
02:28:06,010 --> 02:28:07,992
is not the same person as you, of course.

1920
02:28:08,813 --> 02:28:10,916
And yeah, so future you

1921
02:28:10,916 --> 02:28:11,957
will be then grateful that

1922
02:28:11,957 --> 02:28:14,340
you've written tests in the past.

1923
02:28:15,974 --> 02:28:16,274
Yeah.

1924
02:28:17,736 --> 02:28:18,217
Yeah.

1925
02:28:18,217 --> 02:28:21,942
And here one can naturally, I mean,

1926
02:28:21,942 --> 02:28:23,765
reduce efforts that you devote

1927
02:28:23,765 --> 02:28:27,590
to your product so that material

1928
02:28:27,590 --> 02:28:29,573
which go into tests can also

1929
02:28:29,573 --> 02:28:31,255
be used like examples.

1930
02:28:31,255 --> 02:28:32,897
And I mean, examples then also

1931
02:28:32,897 --> 02:28:36,923
is part of the documentation of a code.

1932
02:28:38,845 --> 02:28:39,887
Yeah.

1933
02:28:39,887 --> 02:28:43,598
And that's actually very much

1934
02:28:43,598 --> 02:28:47,282
how some large projects are working.

1935
02:28:47,282 --> 02:28:48,563
So if you look under the

1936
02:28:48,563 --> 02:28:51,846
hood in the source code, you will see that,

1937
02:28:52,787 --> 02:28:53,989
okay, sometimes just like a

1938
02:28:53,989 --> 02:28:56,111
directory is called like examples

1939
02:28:56,111 --> 02:28:57,492
and then it's directly called tests.

1940
02:28:58,793 --> 02:28:59,975
But it could also be that

1941
02:28:59,975 --> 02:29:01,436
it's sort of intermixed.

1942
02:29:01,436 --> 02:29:03,138
So you have the set of examples

1943
02:29:03,138 --> 02:29:04,779
and you can also have then

1944
02:29:04,779 --> 02:29:06,501
have the scripts that can

1945
02:29:08,243 --> 02:29:13,417
run these example files and then

1946
02:29:13,417 --> 02:29:15,840
you compare, if it's an end-to-end test

1947
02:29:15,840 --> 02:29:16,722
or regression test, that you

1948
02:29:16,722 --> 02:29:19,406
compare the output that you

1949
02:29:19,406 --> 02:29:22,009
get with the expected reference output.

1950
02:29:23,211 --> 02:29:25,334
Yeah, it just strikes me here now

1951
02:29:25,334 --> 02:29:29,080
that one main reason why you then,

1952
02:29:30,221 --> 02:29:31,964
after all, perhaps let's say split,

1953
02:29:33,506 --> 02:29:34,167
if it comes to, let's

1954
02:29:34,167 --> 02:29:36,550
say, end-to-end testing, why you

1955
02:29:36,550 --> 02:29:40,433
have, let's say, distinct set of input files

1956
02:29:40,433 --> 02:29:44,919
for tests and for examples is that,

1957
02:29:46,462 --> 02:29:47,403
yeah, there's a practical

1958
02:29:47,403 --> 02:29:49,646
aspect of computation time.

1959
02:29:50,467 --> 02:29:54,753
So when you have examples, for a code,

1960
02:29:54,753 --> 02:29:57,157
you would like to have, let's say,

1961
02:29:57,157 --> 02:29:58,759
some basic cases, but then

1962
02:29:58,759 --> 02:30:00,622
also it's nice if you can

1963
02:30:00,622 --> 02:30:04,066
have some, let's say, more real use cases.

1964
02:30:04,066 --> 02:30:07,071
And those might be the annual

1965
02:30:07,071 --> 02:30:09,394
size so that it takes time to execute them.

1966
02:30:11,011 --> 02:30:14,658
And this then in contrast

1967
02:30:14,658 --> 02:30:17,282
with a test suite, the test cases

1968
02:30:17,282 --> 02:30:18,745
that you have here should

1969
02:30:18,745 --> 02:30:24,115
ideally be possible to run

1970
02:30:24,115 --> 02:30:26,259
them rather quickly.

1971
02:30:28,362 --> 02:30:29,885
And that's in particular important

1972
02:30:29,885 --> 02:30:31,348
if you set it up in

1973
02:30:31,348 --> 02:30:33,151
an automated workflow so that the

1974
02:30:33,151 --> 02:30:35,395
test suite is run

1975
02:30:35,395 --> 02:30:40,402
for each pull request or each

1976
02:30:40,402 --> 02:30:41,303
push to a repo.

1977
02:30:43,405 --> 02:30:45,829
And clearly here, one can also

1978
02:30:46,750 --> 02:30:48,272
do it a little bit in, so

1979
02:30:48,272 --> 02:30:52,818
to say, I mean, you can do it in different sizes.

1980
02:30:52,818 --> 02:30:54,099
So you can work with, let's

1981
02:30:55,121 --> 02:30:57,544
say, the small test suite, and

1982
02:30:57,544 --> 02:30:59,146
then let's say the large test

1983
02:30:59,146 --> 02:31:00,809
suite, and then you can

1984
02:31:00,809 --> 02:31:02,960
run the big thing.

1985
02:31:02,960 --> 02:31:03,845
I mean, not on a daily

1986
02:31:03,845 --> 02:31:06,217
basis, but perhaps let's say once

1987
02:31:06,217 --> 02:31:06,921
every week or so.

1988
02:31:07,913 --> 02:31:10,217
Yeah, that's a good point.

1989
02:31:10,217 --> 02:31:11,840
That's another feature that

1990
02:31:11,840 --> 02:31:13,382
these test suites also have

1991
02:31:13,382 --> 02:31:15,446
that you can filter for tests.

1992
02:31:15,446 --> 02:31:16,407
And this way, you can sort

1993
02:31:16,407 --> 02:31:19,252
of select maybe not test everything at once.

1994
02:31:19,252 --> 02:31:20,334
Sometimes you only want to

1995
02:31:20,334 --> 02:31:22,117
run a single test.

1996
02:31:22,117 --> 02:31:23,540
Or in other situations, you want

1997
02:31:23,540 --> 02:31:25,663
to run a certain subset of tests.

1998
02:31:25,663 --> 02:31:27,206
And these test suites sort

1999
02:31:27,206 --> 02:31:29,069
of usually provide some kind of

2000
02:31:29,069 --> 02:31:32,014
tools to do just that.

2001
02:31:33,344 --> 02:31:35,287
Yeah.

2002
02:31:35,287 --> 02:31:37,531
And maybe some more words just

2003
02:31:37,531 --> 02:31:39,614
if you are not testing currently

2004
02:31:39,614 --> 02:31:40,616
how to get started.

2005
02:31:41,978 --> 02:31:44,843
So I'd say, well, since

2006
02:31:44,843 --> 02:31:48,949
you probably have an end-to-end test

2007
02:31:48,949 --> 02:31:50,692
that you can sort of

2008
02:31:50,692 --> 02:31:51,834
do relatively quickly just

2009
02:31:51,834 --> 02:31:54,598
from the documentation or

2010
02:31:54,598 --> 02:31:56,902
something that you've already written.

2011
02:31:56,902 --> 02:31:58,064
And then the next easiest

2012
02:31:58,064 --> 02:32:00,910
tests are unit tests for small

2013
02:32:00,910 --> 02:32:04,518
units of code that are in there

2014
02:32:04,518 --> 02:32:07,304
sort of if you have structured

2015
02:32:07,304 --> 02:32:08,547
your code a little bit.

2016
02:32:09,388 --> 02:32:11,052
And if you haven't, then that

2017
02:32:11,052 --> 02:32:12,816
would be kind of maybe a

2018
02:32:12,816 --> 02:32:14,700
good sort of inspiration on

2019
02:32:14,700 --> 02:32:15,642
how to structure your code.

2020
02:32:17,005 --> 02:32:17,205
Yeah.

2021
02:32:20,864 --> 02:32:22,128
Okay, great.

2022
02:32:22,128 --> 02:32:27,445
No, I think we've covered

2023
02:32:27,445 --> 02:32:31,920
the essentials now and I'm looking here on the

2024
02:32:33,065 --> 02:32:35,328
collaborative document and I see yeah

2025
02:32:36,669 --> 02:32:37,650
for the time being no

2026
02:32:37,650 --> 02:32:39,492
further questions then as usual

2027
02:32:39,492 --> 02:32:43,837
we have the the feedback block

2028
02:32:43,837 --> 02:32:46,220
is here at the end of the document

2029
02:32:46,220 --> 02:32:47,742
and I think we can now

2030
02:32:47,742 --> 02:32:50,185
conclude this lesson and leave

2031
02:32:50,185 --> 02:32:51,506
the word to [name] who will

2032
02:32:51,506 --> 02:32:53,689
tell us about the program for

2033
02:32:53,689 --> 02:32:55,671
for next week on modular

2034
02:32:55,671 --> 02:33:02,613
code development yes thanks thank you both

2035
02:33:02,613 --> 02:33:04,816
for this session.

2036
02:33:04,816 --> 02:33:06,098
So we hope that you

2037
02:33:06,098 --> 02:33:08,742
could take something from today's

2038
02:33:08,742 --> 02:33:11,707
session to your own workflow

2039
02:33:11,707 --> 02:33:13,970
and maybe learn something new.

2040
02:33:13,970 --> 02:33:15,853
Please give us feedback.

2041
02:33:15,853 --> 02:33:16,975
It's in the very bottom

2042
02:33:16,975 --> 02:33:18,637
of the notes document.

2043
02:33:19,899 --> 02:33:22,824
Something about the speed, the

2044
02:33:22,824 --> 02:33:25,528
level of the session today.

2045
02:33:25,528 --> 02:33:27,911
If you will use if you

2046
02:33:27,911 --> 02:33:28,853
think that you will use what

2047
02:33:28,853 --> 02:33:29,734
you have learned today.

2048
02:33:29,734 --> 02:33:31,840
And if you have anything

2049
02:33:31,840 --> 02:33:34,043
one good thing about today

2050
02:33:34,043 --> 02:33:35,826
and one thing that we

2051
02:33:35,826 --> 02:33:37,668
should look into improving for the

2052
02:33:37,668 --> 02:33:39,611
next time we are having these workshops.

2053
02:33:39,611 --> 02:33:42,094
We're currently running these twice a year,

2054
02:33:42,094 --> 02:33:44,798
so there will be definitely options

2055
02:33:44,798 --> 02:33:46,761
for us to update either

2056
02:33:46,761 --> 02:33:49,264
materials or the way we run this workshop.

2057
02:33:50,166 --> 02:33:51,267
So please let us know.

2058
02:33:52,749 --> 02:33:54,652
And you can also still ask

2059
02:33:54,652 --> 02:33:57,254
questions in the very bottom of the document.

2060
02:33:57,254 --> 02:34:00,078
Or I also put the link or

2061
02:34:00,078 --> 02:34:03,183
we also put the link to our Zulip chat,

2062
02:34:03,183 --> 02:34:04,224
which is the place where

2063
02:34:04,224 --> 02:34:06,427
the Code Refinery community hangs out

2064
02:34:06,427 --> 02:34:10,413
and discusses, well, all kinds

2065
02:34:10,413 --> 02:34:12,035
of topics also like the

2066
02:34:12,035 --> 02:34:14,839
organization of the workshop happens there.

2067
02:34:14,839 --> 02:34:17,223
So if you're curious on joining us,

2068
02:34:17,223 --> 02:34:18,625
for example, or just if

2069
02:34:18,625 --> 02:34:20,628
you have any further questions

2070
02:34:20,628 --> 02:34:22,170
regarding the materials of this

2071
02:34:22,170 --> 02:34:24,093
workshop, you can join us there.

2072
02:34:24,093 --> 02:34:26,316
We have a help channel and you can

2073
02:34:27,123 --> 02:34:32,291
like, yeah, discuss and ask more there.

2074
02:34:33,853 --> 02:34:34,774
Then thank you also to

2075
02:34:34,774 --> 02:34:36,857
[name] for the streaming today.

2076
02:34:36,857 --> 02:34:38,740
All the helpers behind the

2077
02:34:38,740 --> 02:34:41,044
scenes, I think [name] and

2078
02:34:41,044 --> 02:34:43,227
[name] have been active in

2079
02:34:43,227 --> 02:34:44,909
the collaborative notes.

2080
02:34:44,909 --> 02:34:46,191
And of course, to you for

2081
02:34:46,191 --> 02:34:48,174
asking all the questions that you

2082
02:34:48,174 --> 02:34:51,219
had via our document.

2083
02:34:51,219 --> 02:34:52,781
Next week, we'll meet same

2084
02:34:52,781 --> 02:34:55,245
time, same place for a

2085
02:34:55,245 --> 02:34:57,548
modular code development lesson

2086
02:34:57,548 --> 02:35:00,172
And this lesson is really there

2087
02:35:00,172 --> 02:35:02,316
to tie it all together.

2088
02:35:02,316 --> 02:35:05,341
So we will revisit most of

2089
02:35:05,341 --> 02:35:06,924
the topics of this whole

2090
02:35:06,924 --> 02:35:08,506
workshop, of this whole workshop

2091
02:35:08,506 --> 02:35:10,069
series as it was this time,

2092
02:35:11,291 --> 02:35:14,476
and apply them to an example.

2093
02:35:14,476 --> 02:35:16,019
Currently, if you look from

2094
02:35:16,019 --> 02:35:18,143
the schedule at the materials,

2095
02:35:18,143 --> 02:35:19,184
it's all in Python.

2096
02:35:19,184 --> 02:35:20,386
We are working on adding

2097
02:35:20,386 --> 02:35:23,502
the same examples also for R.

2098
02:35:23,502 --> 02:35:26,167
So, and also don't worry if

2099
02:35:26,167 --> 02:35:27,730
those are not your languages.

2100
02:35:27,730 --> 02:35:31,437
I think that even by following

2101
02:35:31,437 --> 02:35:33,241
and looking how it works in Python

2102
02:35:33,241 --> 02:35:34,483
or R, you can get also

2103
02:35:34,483 --> 02:35:35,645
something if you are, for

2104
02:35:35,645 --> 02:35:37,669
example, coding in Julia or so.

2105
02:35:38,771 --> 02:35:39,713
So it's more about the

2106
02:35:39,713 --> 02:35:41,356
topic than the language itself.

2107
02:35:43,500 --> 02:35:45,865
And yes.

2108
02:35:47,853 --> 02:35:49,735
And if you have any

2109
02:35:49,735 --> 02:35:52,379
other feedback about the whole workshop

2110
02:35:52,379 --> 02:35:53,700
or anything that happened

2111
02:35:55,022 --> 02:35:56,383
in these sessions, we're also

2112
02:35:56,383 --> 02:35:59,507
very happy to hear about that.

2113
02:36:00,709 --> 02:36:03,492
Thank you so much also to our instructors.

2114
02:36:04,633 --> 02:36:05,014
Well done.

2115
02:36:07,217 --> 02:36:08,799
And I don't know, do we

2116
02:36:08,799 --> 02:36:12,443
have any last things to say for today?

2117
02:36:15,697 --> 02:36:18,111
Yeah, well, I could probably just say that.

2118
02:36:18,111 --> 02:36:19,700
So as you might have

2119
02:36:19,700 --> 02:36:23,260
noticed for this testing lesson,

2120
02:36:24,623 --> 02:36:26,526
It's rather extensive, so just

2121
02:36:26,526 --> 02:36:28,388
a lot of material in there

2122
02:36:28,388 --> 02:36:33,154
that we didn't have time to address.

2123
02:36:33,154 --> 02:36:36,519
In particular, there are, I

2124
02:36:36,519 --> 02:36:37,640
mean, the different examples

2125
02:36:37,640 --> 02:36:38,602
in various languages.

2126
02:36:38,602 --> 02:36:40,645
So if you're interested in

2127
02:36:40,645 --> 02:36:42,467
these, we very much encourage you

2128
02:36:42,467 --> 02:36:44,850
to go and have a look on these.

2129
02:36:44,850 --> 02:36:46,953
And then there are template

2130
02:36:46,953 --> 02:36:51,339
solutions for many of these in

2131
02:36:51,339 --> 02:36:52,200
many of the languages.

2132
02:36:57,732 --> 02:37:00,535
All right, then we'll give you

2133
02:37:00,535 --> 02:37:03,819
the last two minutes until half past

2134
02:37:03,819 --> 02:37:05,161
for filling in the feedback

2135
02:37:06,082 --> 02:37:09,205
and preparing for whatever next meetings

2136
02:37:09,205 --> 02:37:12,509
or courses you'll have and

2137
02:37:12,509 --> 02:37:14,011
wish you good rest of the day

2138
02:37:14,011 --> 02:37:15,613
and the week and see you next week.

2139
02:37:17,715 --> 02:37:18,136
Bye bye.

2140
02:37:21,260 --> 02:37:21,580
Bye bye.

