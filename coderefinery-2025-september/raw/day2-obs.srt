1
00:12:55,758 --> 00:12:56,959
Let's see.

2
00:12:58,881 --> 00:13:00,423
What could affect this?

3
00:13:01,684 --> 00:13:02,525
I don't know.

4
00:13:04,247 --> 00:13:06,188
Let us know if you can hear us.

5
00:13:07,830 --> 00:13:13,796
Is the headphone muted?

6
00:13:13,796 --> 00:13:14,377
Okay.

7
00:13:14,377 --> 00:13:15,978
Now people can hear us.

8
00:13:15,978 --> 00:13:17,199
Now can they hear us online?

9
00:13:18,040 --> 00:13:21,224
I'm assuming it was the headphone.

10
00:13:21,224 --> 00:13:21,644
Okay.

11
00:13:22,685 --> 00:13:23,706
It is not muted now.

12
00:13:24,648 --> 00:13:26,572
and I can hear my own

13
00:13:26,572 --> 00:13:28,476
voice coming from there.

14
00:13:28,476 --> 00:13:31,261
So now that was probably the issue.

15
00:13:31,261 --> 00:13:33,185
But okay, so I guess we'll

16
00:13:33,185 --> 00:13:34,568
start from the top then.

17
00:13:34,568 --> 00:13:36,332
Yes, it's okay.

18
00:13:36,332 --> 00:13:37,955
Like if you didn't hear what

19
00:13:37,955 --> 00:13:38,656
we were saying in the

20
00:13:38,656 --> 00:13:40,460
past minutes, it's totally fine.

21
00:13:40,460 --> 00:13:41,941
What I was just mentioning is

22
00:13:41,941 --> 00:13:44,424
that I'm now showing this

23
00:13:44,424 --> 00:13:47,046
notes document that we've been using today.

24
00:13:47,046 --> 00:13:48,387
If you were not here with

25
00:13:48,387 --> 00:13:51,170
us today, it's great that you made it today.

26
00:13:51,170 --> 00:13:52,051
You just open this

27
00:13:52,051 --> 00:13:54,493
notes.coderefinery.org link that I've

28
00:13:54,493 --> 00:13:54,853
sent you.

29
00:13:55,894 --> 00:13:58,056
And there you can start editing

30
00:13:58,056 --> 00:13:59,698
and for example, tell us what

31
00:13:59,698 --> 00:14:01,599
was the last animal you saw

32
00:14:02,440 --> 00:14:04,182
by clicking this pencil here.

33
00:14:05,503 --> 00:14:06,964
And I was just asking to

34
00:14:06,964 --> 00:14:09,907
our instructors of the day,

35
00:14:09,907 --> 00:14:11,770
And [name] said that when you grow up,

36
00:14:11,770 --> 00:14:12,831
you want to be an inventor

37
00:14:12,831 --> 00:14:14,293
or you always want to be an inventor.

38
00:14:14,293 --> 00:14:20,142
And what are you doing today as a career?

39
00:14:20,142 --> 00:14:23,888
Yeah, well, so I went into research

40
00:14:23,888 --> 00:14:25,009
because that seemed the

41
00:14:26,672 --> 00:14:28,915
more traditional thing is most

42
00:14:28,915 --> 00:14:30,377
closely to inventing than

43
00:14:31,579 --> 00:14:33,642
just inventing stuff.

44
00:14:33,642 --> 00:14:37,888
And then

45
00:14:39,016 --> 00:14:41,301
I was always more

46
00:14:41,301 --> 00:14:44,728
technically interested than really

47
00:14:44,728 --> 00:14:46,973
just finding things out.

48
00:14:46,973 --> 00:14:50,380
So then I became a

49
00:14:50,380 --> 00:14:53,406
research software engineer, which

50
00:14:53,406 --> 00:14:58,557
is basically, at least to me, the ideal

51
00:14:58,557 --> 00:15:01,547
middle midway between doing

52
00:15:01,547 --> 00:15:03,173
something technical like coding

53
00:15:03,173 --> 00:15:07,147
and doing research so I guess

54
00:15:07,147 --> 00:15:10,235
I'm in a quite a good place now yeah

55
00:15:10,235 --> 00:15:12,378
I also feel the same.

56
00:15:12,378 --> 00:15:14,120
I'm so happy to be, you

57
00:15:14,120 --> 00:15:15,723
know, I don't have to worry

58
00:15:15,723 --> 00:15:17,365
about applying for grants.

59
00:15:17,365 --> 00:15:18,947
And of course, I'm super happy

60
00:15:18,947 --> 00:15:20,830
that we have great postdocs

61
00:15:20,830 --> 00:15:22,652
and professors and doctoral researchers

62
00:15:22,652 --> 00:15:23,974
who are applying for grants

63
00:15:23,974 --> 00:15:26,297
and keeping the whole system working.

64
00:15:27,279 --> 00:15:29,401
But as I can, it's nice

65
00:15:29,401 --> 00:15:31,324
to just focus on the software

66
00:15:31,324 --> 00:15:33,387
and methods and, you know,

67
00:15:33,387 --> 00:15:35,570
and what about [name] what do

68
00:15:35,570 --> 00:15:36,771
you want to do when you grow

69
00:15:36,771 --> 00:15:38,173
up or maybe you can also think

70
00:15:38,173 --> 00:15:39,775
it what did you want to do

71
00:15:39,775 --> 00:15:41,097
when you were younger what

72
00:15:41,097 --> 00:15:42,018
were you thinking that you were

73
00:15:42,018 --> 00:15:43,500
going to be when you grew

74
00:15:43,500 --> 00:15:47,926
up i'm not really sure whether what i

75
00:15:47,926 --> 00:15:49,949
whether i had dreams i would

76
00:15:49,949 --> 00:15:53,553
say um yeah i would i wanted

77
00:15:53,553 --> 00:15:55,156
to be useful um i guess

78
00:15:55,156 --> 00:15:57,258
that engineer would maybe describe

79
00:15:57,258 --> 00:16:00,402
that but yeah good way to be

80
00:16:00,402 --> 00:16:01,524
useful and in the end and

81
00:16:01,524 --> 00:16:02,365
what are you doing today

82
00:16:03,205 --> 00:16:05,048
Well, at CSC, I work as

83
00:16:05,048 --> 00:16:06,169
a machine learning specialist.

84
00:16:06,169 --> 00:16:07,811
So I, most of the time

85
00:16:07,811 --> 00:16:12,238
I help researchers use HPC

86
00:16:12,238 --> 00:16:14,821
resources to do machine learning research.

87
00:16:16,203 --> 00:16:17,965
And that's, I think that's,

88
00:16:17,965 --> 00:16:19,207
that fits quite well.

89
00:16:19,207 --> 00:16:19,387
Yeah.

90
00:16:20,409 --> 00:16:22,352
So any plans for where

91
00:16:22,352 --> 00:16:23,814
you're gonna grow up?

92
00:16:24,695 --> 00:16:26,628
Or are you happy where you are now?

93
00:16:26,628 --> 00:16:28,271
i haven't been doing this for

94
00:16:28,271 --> 00:16:29,993
so long so i'm still learning a lot

95
00:16:29,993 --> 00:16:32,037
and that's i think so long

96
00:16:32,037 --> 00:16:33,760
as i'm still learning i think

97
00:16:33,760 --> 00:16:37,746
that's why i agree so excellent i see

98
00:16:37,746 --> 00:16:39,890
that people are editing this

99
00:16:39,890 --> 00:16:42,514
notes document i will remind

100
00:16:42,514 --> 00:16:43,936
later when we start with the

101
00:16:43,936 --> 00:16:47,502
actual intro but basically with this pencil

102
00:16:47,502 --> 00:16:48,985
that i'm showing here now

103
00:16:48,985 --> 00:16:53,452
maybe that's the cameras on top of my mouse

104
00:16:53,452 --> 00:16:55,636
but in the top what is

105
00:16:55,636 --> 00:16:56,818
that in the top right corner

106
00:16:56,818 --> 00:17:00,344
of this notes document there is a pencil

107
00:17:00,344 --> 00:17:01,626
if you click the pencil you see

108
00:17:01,626 --> 00:17:04,471
that now the view of

109
00:17:04,471 --> 00:17:06,294
this document has changed and looks

110
00:17:06,294 --> 00:17:08,678
like a code editor and this

111
00:17:08,678 --> 00:17:10,942
is the idea that it's a simple text editor

112
00:17:10,942 --> 00:17:13,826
that everyone can edit at the same time.

113
00:17:13,826 --> 00:17:17,292
Right now there's 73 people who are,

114
00:17:17,292 --> 00:17:18,774
some of them are editing, some

115
00:17:18,774 --> 00:17:20,637
of them are just watching like I'm doing now.

116
00:17:21,718 --> 00:17:25,624
And so here you can tell us which animal.

117
00:17:25,624 --> 00:17:26,465
Someone saw a bee.

118
00:17:27,988 --> 00:17:30,812
I saw the Otanian geese in the morning.

119
00:17:31,773 --> 00:17:33,196
They wanted to walk in the

120
00:17:33,196 --> 00:17:34,297
middle of the road.

121
00:17:34,297 --> 00:17:34,898
I don't know why.

122
00:17:34,898 --> 00:17:37,422
I scared them.

123
00:17:38,920 --> 00:17:41,183
And, um, and also what do

124
00:17:41,183 --> 00:17:44,589
you want to do when you, when you grow up?

125
00:17:45,971 --> 00:17:46,271
Right.

126
00:17:46,271 --> 00:17:49,136
But it's basically one minute to go.

127
00:17:49,136 --> 00:17:52,421
Anything else you want to

128
00:17:52,421 --> 00:17:54,484
mention before we start with

129
00:17:54,484 --> 00:17:56,387
the show, [name] and [name]?

130
00:17:58,470 --> 00:17:58,710
No.

131
00:17:59,692 --> 00:18:00,473
Are you excited?

132
00:18:01,718 --> 00:18:05,203
Yes, of course, so I will

133
00:18:05,203 --> 00:18:06,625
switch back to the view

134
00:18:06,625 --> 00:18:08,528
mode, which is something that

135
00:18:08,528 --> 00:18:11,232
I recommend also for the learners

136
00:18:11,232 --> 00:18:15,299
that it's lighter for the server

137
00:18:15,299 --> 00:18:16,901
that is hosting this tool,

138
00:18:16,901 --> 00:18:18,323
if you don't plan to edit

139
00:18:18,323 --> 00:18:20,807
you can switch to this view mode.

140
00:18:23,453 --> 00:18:26,258
and I was mentioning when

141
00:18:26,258 --> 00:18:27,801
you could not hear us but

142
00:18:27,801 --> 00:18:29,986
since now you can hear us I was mentioning

143
00:18:29,986 --> 00:18:32,110
that we have also left

144
00:18:32,110 --> 00:18:34,654
the feedback from yesterday so

145
00:18:34,654 --> 00:18:36,758
if you were around yesterday and

146
00:18:36,758 --> 00:18:38,602
you did not have time to

147
00:18:38,602 --> 00:18:40,726
write say something about the

148
00:18:40,726 --> 00:18:41,988
feedback from yesterday so you

149
00:18:41,988 --> 00:18:46,437
still have a chance to edit that in the notes

150
00:18:46,437 --> 00:18:49,090
but now it's 12 o'clock in

151
00:18:49,090 --> 00:18:52,728
finland and so we can actually

152
00:18:52,728 --> 00:18:54,135
start with the workshop

153
00:18:55,752 --> 00:18:57,834
Hello everyone and welcome to

154
00:18:57,834 --> 00:18:59,235
day two of the Code

155
00:18:59,235 --> 00:19:02,018
Refinery workshop, September-October 2025.

156
00:19:02,018 --> 00:19:04,260
I'm [name] here, your

157
00:19:04,260 --> 00:19:06,622
workshop organizer for this time

158
00:19:06,622 --> 00:19:07,483
along with [name].

159
00:19:08,904 --> 00:19:11,246
And with me today we

160
00:19:11,246 --> 00:19:13,968
have [name] from CSC

161
00:19:13,968 --> 00:19:16,491
Finland and [name] also

162
00:19:16,491 --> 00:19:17,612
from Aalto University Finland.

163
00:19:18,512 --> 00:19:21,155
And [name] also from

164
00:19:21,155 --> 00:19:25,739
our team is the broadcaster for today.

165
00:19:25,739 --> 00:19:29,565
so a bit of reminder if

166
00:19:29,565 --> 00:19:31,287
you were not with us yesterday

167
00:19:31,287 --> 00:19:34,091
it's totally fine you can

168
00:19:34,091 --> 00:19:36,275
still understand everything and

169
00:19:36,275 --> 00:19:37,657
do everything that will be done today

170
00:19:37,657 --> 00:19:41,783
and if you want to re-watch

171
00:19:41,783 --> 00:19:44,767
what was done yesterday on twitch

172
00:19:44,767 --> 00:19:46,570
tv on the same link that

173
00:19:46,570 --> 00:19:48,172
you watch in this stream you

174
00:19:48,172 --> 00:19:51,497
can also watch yesterday's videos

175
00:19:51,497 --> 00:19:53,600
later for example if you want to catch up

176
00:19:53,600 --> 00:19:56,063
but in general today you

177
00:19:56,063 --> 00:19:59,088
are good to understand what's been doing

178
00:19:59,088 --> 00:20:00,530
and also be able to do

179
00:20:00,530 --> 00:20:02,372
the exercises along with the

180
00:20:02,372 --> 00:20:05,677
instructors in the workshop web page

181
00:20:05,677 --> 00:20:06,758
that I'm showing right now

182
00:20:06,758 --> 00:20:09,262
you find the materials for today and

183
00:20:09,262 --> 00:20:11,264
so now I'm scrolling down to

184
00:20:11,264 --> 00:20:15,210
day two and today we will

185
00:20:15,210 --> 00:20:17,012
continue with this git version

186
00:20:17,012 --> 00:20:19,736
control and I'm gonna briefly give

187
00:20:19,736 --> 00:20:21,278
you a mini intro

188
00:20:22,658 --> 00:20:25,522
so yesterday we learned about

189
00:20:25,522 --> 00:20:27,604
all this terminology around

190
00:20:27,604 --> 00:20:30,408
git version control so you

191
00:20:30,408 --> 00:20:33,051
heard all these terms like forking

192
00:20:33,051 --> 00:20:35,915
and pull requests and commits

193
00:20:35,915 --> 00:20:38,579
and it's okay if not

194
00:20:38,579 --> 00:20:40,141
everything is fully clear because

195
00:20:40,141 --> 00:20:41,422
these terms will be repeated

196
00:20:41,422 --> 00:20:43,465
today and also tomorrow

197
00:20:43,465 --> 00:20:45,808
But the goal, what was important is

198
00:20:45,808 --> 00:20:47,631
that you understood the motivation,

199
00:20:47,631 --> 00:20:48,933
why it is so important to

200
00:20:48,933 --> 00:20:50,495
work with virtual control as a

201
00:20:50,495 --> 00:20:52,418
time machine to go back in

202
00:20:52,418 --> 00:20:55,402
time in a previous version of

203
00:20:55,402 --> 00:20:59,988
your code or whatever project

204
00:20:59,988 --> 00:21:02,011
that you are version controlling.

205
00:21:02,011 --> 00:21:05,118
today for day two we'll move

206
00:21:05,118 --> 00:21:07,324
to local work so if yesterday

207
00:21:07,324 --> 00:21:10,712
we were using this github.com

208
00:21:10,712 --> 00:21:12,837
web browser web server meaning

209
00:21:12,837 --> 00:21:14,601
that the files were stored

210
00:21:14,601 --> 00:21:17,127
somewhere in the cloud in

211
00:21:17,127 --> 00:21:18,490
actually microsoft cloud because

212
00:21:18,490 --> 00:21:20,455
github is microsoft today

213
00:21:20,455 --> 00:21:23,299
now it's good that we have github.com

214
00:21:23,299 --> 00:21:25,202
as a remote repository but

215
00:21:25,202 --> 00:21:28,147
it's also good to work locally so

216
00:21:28,147 --> 00:21:29,709
and this is what will happen today

217
00:21:29,709 --> 00:21:31,752
so the files instead of

218
00:21:31,752 --> 00:21:33,235
being just in github.com will

219
00:21:33,235 --> 00:21:35,218
come to your computer you will

220
00:21:35,218 --> 00:21:37,421
be able to edit them do changes and

221
00:21:37,421 --> 00:21:38,583
when you're happy you can push

222
00:21:38,583 --> 00:21:41,127
them back to the cloud

223
00:21:41,127 --> 00:21:45,233
github.com servers or you know i

224
00:21:45,233 --> 00:21:46,194
don't want to spoil the fun

225
00:21:46,194 --> 00:21:48,518
you will see today what we will do

226
00:21:48,518 --> 00:21:49,840
In the links that you have

227
00:21:49,840 --> 00:21:51,162
received in your email there is

228
00:21:51,162 --> 00:21:54,446
also this notes document and

229
00:21:54,446 --> 00:21:56,429
just a reminder although I

230
00:21:56,429 --> 00:21:58,933
was just chatting about it when

231
00:21:58,933 --> 00:22:01,056
you visit this notes document

232
00:22:01,056 --> 00:22:03,700
it looks like this and you

233
00:22:03,700 --> 00:22:04,801
can use this to basically

234
00:22:04,801 --> 00:22:06,644
interactively ask questions to

235
00:22:06,644 --> 00:22:09,087
our instructors and our helpers

236
00:22:09,087 --> 00:22:10,629
by clicking in the very top

237
00:22:10,629 --> 00:22:12,352
there is a pencil which will

238
00:22:12,352 --> 00:22:14,395
switch the notes from this view

239
00:22:14,395 --> 00:22:18,100
mode to this editor mode

240
00:22:18,100 --> 00:22:20,743
and it's basically a simple text editor

241
00:22:20,743 --> 00:22:22,946
so that many hundreds of people

242
00:22:22,946 --> 00:22:24,268
can edit at the same time.

243
00:22:24,268 --> 00:22:26,030
I think it's like a Google Doc

244
00:22:26,030 --> 00:22:27,112
but a bit more reliable

245
00:22:27,112 --> 00:22:28,133
because Google Doc has

246
00:22:28,133 --> 00:22:30,696
limitations of simultaneous editing

247
00:22:30,696 --> 00:22:31,637
and also simplified.

248
00:22:32,619 --> 00:22:35,042
I can already see some questions there

249
00:22:35,042 --> 00:22:38,566
and our helpers are already answering

250
00:22:38,566 --> 00:22:39,908
so keep the questions coming

251
00:22:41,190 --> 00:22:42,471
and I don't want to steal

252
00:22:42,471 --> 00:22:45,455
any other precious time to our

253
00:22:45,455 --> 00:22:49,202
I believe now it's a good

254
00:22:49,202 --> 00:22:51,747
moment to switch to [name]'s screen.

255
00:22:51,747 --> 00:22:52,469
I guess you're going to be

256
00:22:52,469 --> 00:22:54,012
the first one, right, [name]?

257
00:22:54,012 --> 00:22:55,534
Yes, I'm going to share.

258
00:22:55,534 --> 00:22:57,017
Excellent.

259
00:22:57,017 --> 00:22:58,019
I'm sharing [name]'s screen.

260
00:22:59,262 --> 00:23:00,344
All right.

261
00:23:00,344 --> 00:23:00,805
Right.

262
00:23:00,805 --> 00:23:03,129
So the floor is yours.

263
00:23:03,129 --> 00:23:05,854
I will move out from the

264
00:23:05,854 --> 00:23:08,239
scene and have a great workshop, everyone.

265
00:23:09,518 --> 00:23:10,399
Right.

266
00:23:10,399 --> 00:23:12,101
So the first thing we're going

267
00:23:12,101 --> 00:23:15,045
to do is looking at working

268
00:23:15,045 --> 00:23:17,448
locally on our computers instead of

269
00:23:17,448 --> 00:23:21,673
on the on GitHub, on the website.

270
00:23:21,673 --> 00:23:23,836
So I'll, I'll open the

271
00:23:23,836 --> 00:23:25,798
lesson from our overview.

272
00:23:27,040 --> 00:23:30,745
And then now, [name], what

273
00:23:30,745 --> 00:23:31,606
are we doing today?

274
00:23:31,606 --> 00:23:32,607
And why are we doing it?

275
00:23:33,886 --> 00:23:34,747
Well, yeah.

276
00:23:34,747 --> 00:23:37,211
So well, as [name] already said,

277
00:23:37,211 --> 00:23:39,134
we are now instead of

278
00:23:39,134 --> 00:23:40,717
working remotely on GitHub on

279
00:23:40,717 --> 00:23:43,541
the website, we will now move

280
00:23:43,541 --> 00:23:44,703
home to our own computer.

281
00:23:46,085 --> 00:23:49,190
And so there's several different

282
00:23:49,190 --> 00:23:49,831
ways you could do that.

283
00:23:49,831 --> 00:23:52,355
So we will probably mostly focus

284
00:23:52,355 --> 00:23:53,597
on the VS Code way because

285
00:23:53,597 --> 00:23:56,448
that's sort of beginner friendly.

286
00:23:56,448 --> 00:23:58,250
um but uh we'll also

287
00:23:58,250 --> 00:24:01,314
show some terminal things um yeah

288
00:24:01,314 --> 00:24:02,975
and you can also do a

289
00:24:02,975 --> 00:24:05,719
lot of the stuff still on on github

290
00:24:05,719 --> 00:24:07,861
so just cloning or just

291
00:24:07,861 --> 00:24:10,784
the copying that's difficult but

292
00:24:10,784 --> 00:24:12,226
um yeah most of the other stuff

293
00:24:12,226 --> 00:24:13,608
uh you can also just do

294
00:24:13,608 --> 00:24:17,852
remotely on github um yeah um

295
00:24:18,753 --> 00:24:22,318
so maybe just to ask you do

296
00:24:22,318 --> 00:24:25,203
you how do you work mostly do you

297
00:24:25,203 --> 00:24:30,048
Well, I do work locally on my machine.

298
00:24:30,048 --> 00:24:34,813
I do work mostly with IDE studies, VS Code.

299
00:24:34,813 --> 00:24:38,397
But there are a few steps

300
00:24:38,397 --> 00:24:40,259
that you can only do in Terminal.

301
00:24:40,259 --> 00:24:42,061
And we'll show a way to

302
00:24:42,061 --> 00:24:43,742
do that from VS Code as well.

303
00:24:43,742 --> 00:24:43,842
OK.

304
00:24:45,084 --> 00:24:48,167
And so why?

305
00:24:48,167 --> 00:24:52,709
Why do you not just work on GitHub?

306
00:24:52,709 --> 00:24:53,971
So there are some things that

307
00:24:53,971 --> 00:24:56,254
you can only do in a certain way.

308
00:24:58,858 --> 00:25:01,101
So I like to have my

309
00:25:01,101 --> 00:25:03,164
work on my computer and

310
00:25:03,164 --> 00:25:06,829
not just somewhere online.

311
00:25:06,829 --> 00:25:09,633
And then the web interfaces,

312
00:25:09,633 --> 00:25:11,376
they don't have all the tools.

313
00:25:11,376 --> 00:25:13,853
And then if I want to run something,

314
00:25:13,853 --> 00:25:15,655
if it's actual code, I want

315
00:25:15,655 --> 00:25:17,158
to have it on my computer where

316
00:25:17,158 --> 00:25:18,680
I can test run it without

317
00:25:19,541 --> 00:25:22,104
having to have the connection and everything.

318
00:25:22,104 --> 00:25:24,988
I mean, it's usually what I

319
00:25:24,988 --> 00:25:27,151
do is I start locally, I

320
00:25:27,151 --> 00:25:28,793
start doing something on my

321
00:25:28,793 --> 00:25:31,037
computer, and then it's there.

322
00:25:31,037 --> 00:25:33,159
And then I start publishing it.

323
00:25:33,159 --> 00:25:34,103
I don't

324
00:25:34,103 --> 00:25:37,728
go to the web and have this

325
00:25:37,728 --> 00:25:40,152
big idea of a project that I want.

326
00:25:40,152 --> 00:25:42,756
I've got a problem that I want to solve

327
00:25:42,756 --> 00:25:44,498
and then I write some code for it

328
00:25:44,498 --> 00:25:45,961
and then it grows bigger and

329
00:25:45,961 --> 00:25:47,723
then I notice this should be

330
00:25:47,723 --> 00:25:49,125
its own project and then I put

331
00:25:49,125 --> 00:25:51,869
it in a folder and then I

332
00:25:51,869 --> 00:25:54,974
realize maybe I want to share

333
00:25:54,974 --> 00:25:59,129
this with some other people and then

334
00:25:59,129 --> 00:26:01,233
that is the latest place that

335
00:26:01,233 --> 00:26:02,496
that is the latest time where

336
00:26:02,496 --> 00:26:03,678
it needs to go somewhere

337
00:26:03,678 --> 00:26:06,023
that is actually shareable okay

338
00:26:06,023 --> 00:26:07,145
we'll also get to that later

339
00:26:07,145 --> 00:26:08,868
in a later lesson where when how

340
00:26:08,868 --> 00:26:11,674
to turn like a local project

341
00:26:11,674 --> 00:26:13,397
that you started into into

342
00:26:13,397 --> 00:26:15,221
something into a into a good

343
00:26:15,221 --> 00:26:16,543
thing that you can then easily

344
00:26:16,543 --> 00:26:22,163
share with other people or publishers great um

345
00:26:22,163 --> 00:26:25,011
Yeah, and yeah, that's so those

346
00:26:25,011 --> 00:26:25,894
are sort of two of the

347
00:26:25,894 --> 00:26:29,665
lessons we go to download something, then

348
00:26:29,665 --> 00:26:32,794
how to do some archaeology,

349
00:26:32,794 --> 00:26:34,519
some some poking around in there,

350
00:26:34,519 --> 00:26:35,763
if you are searching for

351
00:26:35,763 --> 00:26:37,469
a problem, for example.

352
00:26:37,469 --> 00:26:39,413
Then we will talk about how

353
00:26:39,413 --> 00:26:41,678
to turn a project that you

354
00:26:41,678 --> 00:26:44,484
have locally into a Git repository

355
00:26:44,484 --> 00:26:46,388
that you can easily share with others.

356
00:26:46,388 --> 00:26:47,851
And then we'll do some

357
00:26:47,851 --> 00:26:49,896
general discussion and maybe

358
00:26:49,896 --> 00:26:51,900
some lived experience.

359
00:26:51,900 --> 00:26:51,980
Yes.

360
00:26:53,804 --> 00:26:55,628
And what to do and what not to do.

361
00:26:55,628 --> 00:26:56,960
Yes.

362
00:26:56,960 --> 00:26:58,562
Great.

363
00:26:58,562 --> 00:27:02,668
Then I guess, should we

364
00:27:02,668 --> 00:27:04,350
talk about, discuss anything else

365
00:27:04,350 --> 00:27:07,775
or should we just go to the first exercise?

366
00:27:07,775 --> 00:27:09,857
Well, maybe as a little recap,

367
00:27:09,857 --> 00:27:11,660
like a Git repository.

368
00:27:14,664 --> 00:27:18,489
What is a Git repository actually?

369
00:27:18,489 --> 00:27:20,452
Yeah.

370
00:27:20,452 --> 00:27:24,635
So, well, I think those things were,

371
00:27:24,635 --> 00:27:27,219
discussed a lot yesterday as well.

372
00:27:28,421 --> 00:27:29,983
Indeed, they were just the

373
00:27:29,983 --> 00:27:33,228
very short version.

374
00:27:33,228 --> 00:27:36,392
So yeah, it's just a collection

375
00:27:36,392 --> 00:27:38,215
of all of the files.

376
00:27:38,215 --> 00:27:42,040
And it also does not just

377
00:27:42,040 --> 00:27:43,322
contain the sort of the

378
00:27:43,322 --> 00:27:45,245
current incarnation of all of

379
00:27:45,245 --> 00:27:47,889
that information, but also all

380
00:27:47,889 --> 00:27:52,141
of the history and a lot of metadata

381
00:27:52,141 --> 00:27:54,564
um that describes how it got to

382
00:27:54,564 --> 00:27:57,528
that state and so um

383
00:27:58,929 --> 00:28:02,193
each commit is essentially a sort

384
00:28:02,193 --> 00:28:03,715
of can be used as a

385
00:28:03,715 --> 00:28:05,758
snapshot of the entire project at

386
00:28:05,758 --> 00:28:08,421
any at a specific point in time

387
00:28:09,342 --> 00:28:10,864
and it has a kind of

388
00:28:10,864 --> 00:28:16,087
official name which is called its hash and um

389
00:28:16,087 --> 00:28:18,390
can also be sort of it

390
00:28:18,390 --> 00:28:20,252
can branch off in different directions

391
00:28:20,252 --> 00:28:21,394
which can then also be

392
00:28:21,394 --> 00:28:22,775
merged again together so there's

393
00:28:23,636 --> 00:28:26,680
a well an arbitrarily complicated graph

394
00:28:26,680 --> 00:28:30,245
that uh is often um future

395
00:28:30,245 --> 00:28:31,546
you will thank you for keeping it

396
00:28:31,546 --> 00:28:34,570
as simple as possible um and

397
00:28:35,591 --> 00:28:38,295
um yeah all of that there's

398
00:28:38,295 --> 00:28:40,538
a sort of secret hidden directory

399
00:28:40,538 --> 00:28:43,141
inside of that uh repository

400
00:28:43,141 --> 00:28:44,521
that's called dot git

401
00:28:44,521 --> 00:28:48,448
And everything, so all of the

402
00:28:48,448 --> 00:28:50,753
files of the current state that you have,

403
00:28:50,753 --> 00:28:52,556
as it's called, checked out,

404
00:28:52,556 --> 00:28:54,400
they are just in the directory,

405
00:28:54,400 --> 00:28:57,105
in the normal repository directory.

406
00:28:57,105 --> 00:28:58,988
And all of the other information

407
00:28:58,988 --> 00:29:00,451
that is sort of hidden away

408
00:29:00,451 --> 00:29:03,016
is in that .git directory.

409
00:29:03,016 --> 00:29:05,160
And you can use certain

410
00:29:05,160 --> 00:29:07,252
git commands in order

411
00:29:07,252 --> 00:29:09,315
relatively conveniently interface with

412
00:29:09,315 --> 00:29:13,160
that or the GitHub interface or

413
00:29:13,160 --> 00:29:15,724
all the VS code interfaces we'll show later.

414
00:29:17,566 --> 00:29:17,746
Yeah.

415
00:29:18,728 --> 00:29:21,832
So then when we clone it, we

416
00:29:21,832 --> 00:29:23,454
make a copy of that the whole thing.

417
00:29:24,836 --> 00:29:26,101
Well, yes.

418
00:29:26,101 --> 00:29:28,523
Not necessarily the entire thing.

419
00:29:28,523 --> 00:29:30,265
You can copy everything.

420
00:29:30,265 --> 00:29:32,067
But most of the time when you copy,

421
00:29:32,067 --> 00:29:33,288
when you just git clone,

422
00:29:34,409 --> 00:29:37,552
it does not necessarily by

423
00:29:37,552 --> 00:29:38,954
default download, for example, all

424
00:29:38,954 --> 00:29:39,554
of the branches.

425
00:29:41,536 --> 00:29:43,418
It just downloads sort of

426
00:29:43,418 --> 00:29:44,819
the default things that you would need.

427
00:29:46,041 --> 00:29:47,262
You can also tell it to

428
00:29:47,262 --> 00:29:49,884
clone a specific commit or a specific branch.

429
00:29:50,865 --> 00:29:52,867
But yeah, it's sort of

430
00:29:53,728 --> 00:29:54,589
flexible in that way.

431
00:29:57,218 --> 00:29:59,241
When you fork something, then

432
00:30:01,084 --> 00:30:02,005
that copies everything.

433
00:30:02,927 --> 00:30:05,370
Okay, so that's basically

434
00:30:05,370 --> 00:30:07,233
the difference between forking and cloning.

435
00:30:07,233 --> 00:30:09,637
If you fork something, it'll do

436
00:30:09,637 --> 00:30:11,459
a full copy of everything.

437
00:30:11,459 --> 00:30:13,102
And with cloning, you get

438
00:30:13,102 --> 00:30:16,547
the option to copy it all,

439
00:30:16,547 --> 00:30:21,795
but not necessarily everything done

440
00:30:21,795 --> 00:30:23,177
for you automatically.

441
00:30:23,177 --> 00:30:23,476
Okay.

442
00:30:23,476 --> 00:30:25,318
Yeah, okay.

443
00:30:26,299 --> 00:30:29,002
So why do we not fork it to our computers?

444
00:30:30,984 --> 00:30:35,108
Well, I guess you could do it,

445
00:30:35,108 --> 00:30:37,030
but most of the time

446
00:30:37,030 --> 00:30:38,812
when you fork something, that is

447
00:30:38,812 --> 00:30:44,578
sort of the sort of a central thing.

448
00:30:44,578 --> 00:30:47,281
If like, for example, if multiple people,

449
00:30:48,242 --> 00:30:49,683
they work on a fork or

450
00:30:49,683 --> 00:30:51,185
if there's a project and then

451
00:30:51,185 --> 00:30:53,788
new people want to add

452
00:30:53,788 --> 00:30:57,913
and take over development or add

453
00:30:57,913 --> 00:31:00,776
things to that project, then

454
00:31:00,776 --> 00:31:01,577
you would need everything.

455
00:31:01,577 --> 00:31:02,939
And that's when you fork it.

456
00:31:02,939 --> 00:31:05,782
But when you just clone

457
00:31:05,782 --> 00:31:07,164
something from your own fork

458
00:31:07,164 --> 00:31:09,267
or from the development fork, then

459
00:31:09,267 --> 00:31:10,728
you clone it because then

460
00:31:10,728 --> 00:31:12,831
you don't necessarily need everything.

461
00:31:12,831 --> 00:31:15,834
And yeah, I think that's just part of

462
00:31:15,834 --> 00:31:16,956
that is probably just historically

463
00:31:17,997 --> 00:31:19,259
how it developed.

464
00:31:19,259 --> 00:31:20,500
And yeah.

465
00:31:24,614 --> 00:31:28,438
Okay, so how do we?

466
00:31:28,438 --> 00:31:30,760
I mean, now that we've got

467
00:31:30,760 --> 00:31:32,182
the the command line and the

468
00:31:32,182 --> 00:31:33,503
VS code path, right?

469
00:31:33,503 --> 00:31:40,630
And so maybe we start

470
00:31:40,630 --> 00:31:42,132
with the exercise, right?

471
00:31:42,132 --> 00:31:44,534
Sure, sure.

472
00:31:44,534 --> 00:31:51,381
So there's the this exercise in the

473
00:31:53,082 --> 00:31:57,328
the lesson page um where you

474
00:31:57,328 --> 00:32:02,676
if you've got vs code you can

475
00:32:02,676 --> 00:32:07,143
um you can clone it with vs

476
00:32:07,143 --> 00:32:12,991
code and um could you maybe

477
00:32:12,991 --> 00:32:14,854
our faces are partially obscuring the

478
00:32:16,336 --> 00:32:18,819
URL, I think, if you move

479
00:32:18,819 --> 00:32:22,905
it a little bit, I can just move this bit.

480
00:32:24,507 --> 00:32:27,632
And then, but the basic idea is

481
00:32:27,632 --> 00:32:29,154
that you go to the code

482
00:32:29,154 --> 00:32:31,217
with the overview page, and then

483
00:32:31,217 --> 00:32:33,200
you click on on the day two,

484
00:32:33,200 --> 00:32:34,602
you click on the local work,

485
00:32:34,602 --> 00:32:36,664
and then it'll get you to this one.

486
00:32:38,147 --> 00:32:43,474
And then the exercise is to um,

487
00:32:47,825 --> 00:32:50,468
Yeah, so, so we'll give you

488
00:32:50,468 --> 00:32:55,373
25 minutes to try this out on your own before.

489
00:32:55,373 --> 00:32:58,036
And then after that, don't

490
00:32:58,036 --> 00:33:00,099
worry about it when you if

491
00:33:00,099 --> 00:33:01,780
you struggle with anything, just

492
00:33:01,780 --> 00:33:02,882
give it your best try.

493
00:33:04,784 --> 00:33:06,846
You got to decide which

494
00:33:06,846 --> 00:33:09,789
repository to clone side, it can

495
00:33:09,789 --> 00:33:12,212
be any one really, then.

496
00:33:14,200 --> 00:33:17,845
clone it, create a new branch, um,

497
00:33:18,646 --> 00:33:20,929
try to make a commit on that new branch,

498
00:33:20,929 --> 00:33:22,471
then switching to the main

499
00:33:22,471 --> 00:33:24,915
branch and try to merge that

500
00:33:24,915 --> 00:33:27,979
new branch into the main.

501
00:33:27,979 --> 00:33:29,701
This will work if you have

502
00:33:30,923 --> 00:33:32,966
merge access to that repository.

503
00:33:32,966 --> 00:33:33,687
So it should be a

504
00:33:33,687 --> 00:33:35,650
repository you have access to, like

505
00:33:35,650 --> 00:33:38,353
for example, the recipe book

506
00:33:38,353 --> 00:33:40,156
that you made the fork

507
00:33:40,156 --> 00:33:41,918
that you forked yesterday.

508
00:33:41,918 --> 00:33:43,060
And then, um,

509
00:33:45,959 --> 00:33:51,766
you can compare those, like you

510
00:33:51,766 --> 00:33:54,249
can see the steps of the exercise

511
00:33:54,249 --> 00:33:56,932
and after the exercise time is done,

512
00:33:56,932 --> 00:33:58,193
we will walk through the

513
00:33:58,193 --> 00:34:00,636
exercise with VS Code as I would do it.

514
00:34:02,198 --> 00:34:03,739
So I would say we'll do

515
00:34:03,739 --> 00:34:06,443
25 minute exercise now.

516
00:34:08,084 --> 00:34:10,347
That makes it...

517
00:34:13,280 --> 00:34:17,365
exercise until dreadful with times.

518
00:34:17,365 --> 00:34:22,391
1240 1240.

519
00:34:22,391 --> 00:34:26,556
Okay.

520
00:34:26,556 --> 00:34:28,418
Yeah, also, you can sort

521
00:34:28,418 --> 00:34:31,762
down a little further down

522
00:34:31,762 --> 00:34:33,685
there are instructions for command

523
00:34:33,685 --> 00:34:37,006
line vs code and also our studio now.

524
00:34:37,006 --> 00:34:39,569
And well, as we mentioned

525
00:34:39,569 --> 00:34:41,751
previously, you can do most of

526
00:34:41,751 --> 00:34:44,214
the things also just on GitHub itself.

527
00:34:44,214 --> 00:34:46,797
So making a new branch, adding

528
00:34:46,797 --> 00:34:47,718
a new commit and so forth.

529
00:34:49,039 --> 00:34:51,061
But yeah, the first step

530
00:34:51,061 --> 00:34:53,284
you can't do because, yeah.

531
00:34:54,205 --> 00:34:56,287
So the instructions are here.

532
00:34:56,287 --> 00:34:56,787
Yeah.

533
00:34:56,787 --> 00:34:59,330
Switch whatever you want with these tabs.

534
00:35:00,952 --> 00:35:02,453
But we will go over those

535
00:35:02,453 --> 00:35:04,035
as well after the exercise.

536
00:35:06,218 --> 00:35:07,077
Right.

537
00:35:07,077 --> 00:35:10,646
Then see you in 25 minutes.

538
00:35:10,646 --> 00:35:11,130
Yes.

539
00:59:00,743 --> 00:59:06,791
i'll come back i see a

540
00:59:06,791 --> 00:59:09,595
lot of people have finished no

541
00:59:09,595 --> 00:59:10,937
one has indicated that they are

542
00:59:10,937 --> 00:59:13,140
stuck uh i guess we didn't mention

543
00:59:13,140 --> 00:59:15,663
but you you can indicate your progress

544
00:59:15,663 --> 00:59:17,446
or your state uh in

545
00:59:17,446 --> 00:59:19,508
the collaborative document as well

546
00:59:19,508 --> 00:59:22,512
um but yeah a lot of you have found that

547
00:59:22,512 --> 00:59:23,073
by themselves.

548
00:59:24,194 --> 00:59:25,415
Before we continue, I want

549
00:59:25,415 --> 00:59:26,957
to make maybe two small

550
00:59:26,957 --> 00:59:30,241
corrections because, or yeah,

551
00:59:30,241 --> 00:59:31,542
verifications at least.

552
00:59:31,542 --> 00:59:33,664
So I mentioned that a clone

553
00:59:33,664 --> 00:59:35,967
does not copy everything does.

554
00:59:35,967 --> 00:59:38,370
I messed that up, mixed that

555
00:59:38,370 --> 00:59:39,651
up with with something that we're

556
00:59:39,651 --> 00:59:40,732
going to talk about later.

557
00:59:40,732 --> 00:59:44,156
And that's why a fork is something

558
00:59:44,156 --> 00:59:45,057
that you do on GitHub and

559
00:59:45,057 --> 00:59:46,419
a clone is something that you do in Git.

560
00:59:46,419 --> 00:59:47,940
So there's sometimes a distinction

561
00:59:47,940 --> 00:59:48,821
or there is an

562
00:59:48,821 --> 00:59:50,862
important distinction between Git and GitHub.

563
00:59:50,862 --> 00:59:53,106
um and github when you

564
00:59:53,106 --> 00:59:55,470
fork something it just clones it um

565
00:59:55,470 --> 00:59:58,756
so uh yeah just to sort

566
00:59:58,756 --> 01:00:05,288
of um make sure that's uh yeah

567
01:00:05,288 --> 01:00:11,419
but uh well then uh let's continue um so um

568
01:00:13,036 --> 01:00:16,922
Yes, we do the exercise.

569
01:00:16,922 --> 01:00:20,287
And we're doing it with VS Code.

570
01:00:20,287 --> 01:00:24,112
So here's my VS Code window.

571
01:00:24,112 --> 01:00:26,135
And the first step says to

572
01:00:26,135 --> 01:00:29,039
have a welcome screen and then

573
01:00:29,039 --> 01:00:31,463
go to clone git repository.

574
01:00:31,463 --> 01:00:34,386
And then I've copied my URL.

575
01:00:34,386 --> 01:00:37,409
Actually, the one I copied

576
01:00:38,470 --> 01:00:40,972
is the SSH version.

577
01:00:40,972 --> 01:00:44,896
And the instructions say to

578
01:00:44,896 --> 01:00:47,238
use the HTTPS version.

579
01:00:47,238 --> 01:00:48,460
Yeah, that's what I was wondering about.

580
01:00:48,460 --> 01:00:52,784
So I'm also not a VS Code user, typically.

581
01:00:52,784 --> 01:00:53,925
So can you use either?

582
01:00:53,925 --> 01:00:55,927
Or does it matter?

583
01:00:55,927 --> 01:00:58,550
I think you can use either.

584
01:00:58,550 --> 01:00:58,990
OK.

585
01:01:00,016 --> 01:01:01,117
And then you need to.

586
01:01:01,117 --> 01:01:02,399
But in order to use the

587
01:01:02,399 --> 01:01:04,261
SSH version, you probably need to

588
01:01:04,261 --> 01:01:07,024
upload a key pair and do

589
01:01:07,024 --> 01:01:08,686
all of that jazz, right?

590
01:01:08,686 --> 01:01:26,726
Oh, it couldn't read.

591
01:01:26,726 --> 01:01:27,947
Yeah, apparently.

592
01:01:29,058 --> 01:01:31,824
Let's try the same with the SSH version.

593
01:01:32,626 --> 01:01:33,929
Well, it wasn't the SSH version

594
01:01:33,929 --> 01:01:35,913
because it says it was trying

595
01:01:35,913 --> 01:01:37,156
to exchange a key, right?

596
01:01:37,156 --> 01:01:38,839
And it's... Yes.

597
01:01:39,661 --> 01:01:42,267
Well, maybe I messed it up.

598
01:01:43,730 --> 01:01:44,391
Let's try this one.

599
01:01:48,320 --> 01:01:48,400
Hmm.

600
01:01:57,239 --> 01:01:58,981
And that URL still looked

601
01:01:58,981 --> 01:02:00,783
like the SSH version.

602
01:02:00,783 --> 01:02:01,344
Yeah.

603
01:02:01,344 --> 01:02:04,587
Okay.

604
01:02:04,587 --> 01:02:08,592
So I will have to go

605
01:02:08,592 --> 01:02:09,933
back to the instructions.

606
01:02:18,803 --> 01:02:23,309
Probably have to remove

607
01:02:23,309 --> 01:02:24,630
the failed attempts.

608
01:02:27,445 --> 01:02:29,829
So it doesn't remember any,

609
01:02:31,232 --> 01:02:32,093
any weird things.

610
01:02:35,920 --> 01:02:44,014
I will do that off screen.

611
01:02:44,014 --> 01:02:44,475
Okay, that's me.

612
01:02:59,508 --> 01:03:02,892
In the meantime, if just

613
01:03:02,892 --> 01:03:08,598
because I'm interested, curious as to

614
01:03:09,599 --> 01:03:10,540
what people have been

615
01:03:10,540 --> 01:03:11,662
using, whether they're using the

616
01:03:12,522 --> 01:03:15,286
command line or another tool.

617
01:03:15,286 --> 01:03:22,233
So I'll just add that

618
01:03:22,233 --> 01:03:25,617
here, the progress thing.

619
01:03:35,283 --> 01:03:36,284
And now we can open it.

620
01:03:37,346 --> 01:03:37,827
Yeah, very good.

621
01:03:40,330 --> 01:03:40,751
Right.

622
01:03:40,751 --> 01:03:42,273
So what is the next?

623
01:03:44,937 --> 01:03:52,608
The next was to make a new branch, right?

624
01:03:52,608 --> 01:03:53,088
I believe so.

625
01:03:54,070 --> 01:03:55,432
Make a branch and then make

626
01:03:55,432 --> 01:03:56,413
a commit to that branch.

627
01:04:25,655 --> 01:04:29,140
Oh, I'm all alone here.

628
01:04:31,924 --> 01:04:32,424
You're back.

629
01:04:40,495 --> 01:04:42,158
My Zoom apparently crashed.

630
01:04:42,158 --> 01:04:43,960
It might be that we are

631
01:04:43,960 --> 01:04:46,163
completely out of it, that

632
01:04:46,163 --> 01:04:48,066
something happened on the outer side.

633
01:04:49,468 --> 01:04:52,992
Oh, I am.

634
01:04:52,992 --> 01:04:53,493
Yes.

635
01:04:53,493 --> 01:04:56,361
Yeah, no, you're not everything is fine.

636
01:04:56,361 --> 01:04:58,507
Okay, okay, then it was just my zoom.

637
01:05:00,052 --> 01:05:02,499
The stream or the at least

638
01:05:02,499 --> 01:05:04,147
my preview of it is

639
01:05:04,147 --> 01:05:06,691
It's frozen to what [name]

640
01:05:06,691 --> 01:05:08,854
was sharing before the crash.

641
01:05:08,854 --> 01:05:10,216
And so I can reset it

642
01:05:10,216 --> 01:05:12,099
to either [name]'s share or if

643
01:05:12,099 --> 01:05:13,921
[name] shares, then that's fine.

644
01:05:13,921 --> 01:05:15,484
I can start sharing again.

645
01:05:15,484 --> 01:05:21,953
It will change the things.

646
01:05:21,953 --> 01:05:25,038
So I will start sharing again now.

647
01:05:25,038 --> 01:05:26,660
Yeah.

648
01:05:26,660 --> 01:05:27,001
Go ahead.

649
01:05:28,703 --> 01:05:29,344
Okay.

650
01:05:36,327 --> 01:05:37,768
Okay, most people seem to

651
01:05:37,768 --> 01:05:39,070
have been using the command line

652
01:05:39,070 --> 01:05:40,691
so far, at least the people who responded.

653
01:05:41,552 --> 01:05:44,295
Okay, that's okay as well.

654
01:05:44,295 --> 01:05:51,462
So say, can you see my screen again?

655
01:05:51,462 --> 01:05:55,066
Like the VS code screen?

656
01:05:55,066 --> 01:05:55,767
I can.

657
01:05:57,128 --> 01:05:58,129
It's on the stream.

658
01:05:58,129 --> 01:05:58,229
Yeah.

659
01:06:03,294 --> 01:06:05,136
Okay, so you get a pop up that

660
01:06:06,247 --> 01:06:08,050
allows you to put in a new

661
01:06:08,050 --> 01:06:09,253
like a name for the branch.

662
01:06:09,253 --> 01:06:11,717
So yes, so you click on

663
01:06:11,717 --> 01:06:14,422
on the three dots beside changes,

664
01:06:14,422 --> 01:06:17,568
go to branch and create branch

665
01:06:17,568 --> 01:06:21,315
and then you get a little window

666
01:06:21,315 --> 01:06:23,399
at the at the top little pop up window.

667
01:06:23,399 --> 01:06:25,883
That way you can type the

668
01:06:25,883 --> 01:06:27,727
name for the branch and then

669
01:06:27,727 --> 01:06:29,470
you hit enter and then it

670
01:06:33,989 --> 01:06:35,311
It creates a branch, but

671
01:06:35,311 --> 01:06:37,916
it creates a branch only locally.

672
01:06:40,682 --> 01:06:43,026
So now maybe I can go back

673
01:06:43,026 --> 01:06:50,981
and I can say, um, under this

674
01:06:50,981 --> 01:06:57,533
is I create a new file, call it, um,

675
01:07:27,095 --> 01:07:29,059
But instant powder, what makes it?

676
01:07:29,059 --> 01:07:29,239
Yes.

677
01:07:30,361 --> 01:07:32,224
Yeah.

678
01:07:32,224 --> 01:07:34,308
Easy peasy.

679
01:07:38,316 --> 01:07:38,817
Right.

680
01:07:38,817 --> 01:07:43,365
So this is this file is now on

681
01:07:47,007 --> 01:07:48,409
And so there's an indicator

682
01:07:48,409 --> 01:07:50,151
that it's untracked, right?

683
01:07:50,151 --> 01:07:52,734
So it's green and there's a U

684
01:07:52,734 --> 01:07:54,035
next to it in the file browser.

685
01:07:54,035 --> 01:07:56,418
Yes, that says it's untracked.

686
01:07:56,418 --> 01:07:57,860
And if I want to actually

687
01:07:57,860 --> 01:08:00,443
add it to the branch now, I

688
01:08:00,443 --> 01:08:07,912
need to tick the plus to add

689
01:08:07,912 --> 01:08:10,075
it to the staging area.

690
01:08:10,075 --> 01:08:12,618
And then the command line that

691
01:08:12,618 --> 01:08:14,961
will be the same as git add and then that file.

692
01:08:14,961 --> 01:08:15,442
Yes.

693
01:08:15,442 --> 01:08:18,826
So if the hitting the plus is the same

694
01:08:18,826 --> 01:08:19,988
as on the command line saying

695
01:08:19,988 --> 01:08:21,770
git add, and then the file name.

696
01:08:25,034 --> 01:08:25,975
And then if you if I

697
01:08:25,975 --> 01:08:27,097
want to commit, I've got a

698
01:08:27,097 --> 01:08:29,200
nice little window here to put

699
01:08:29,200 --> 01:08:30,221
in the commit message.

700
01:08:34,446 --> 01:08:36,130
So that that

701
01:08:36,130 --> 01:08:37,892
windows, maybe a little bit small,

702
01:08:37,892 --> 01:08:39,775
if I wanted to write as like,

703
01:08:39,775 --> 01:08:42,138
if this is if I wanted to write a like,

704
01:08:42,138 --> 01:08:42,939
if this is a complicated

705
01:08:42,939 --> 01:08:44,421
commit, and I wanted to write

706
01:08:44,421 --> 01:08:45,382
a longer commit message.

707
01:08:47,865 --> 01:08:48,826
Okay, I guess I can do that.

708
01:08:49,748 --> 01:08:51,510
But so normally, so when I'm

709
01:08:51,510 --> 01:08:53,112
on the command line, it has to get commit,

710
01:08:53,112 --> 01:08:54,474
then it opens a text editor,

711
01:08:54,474 --> 01:08:56,977
and I can indeed, okay,

712
01:08:56,977 --> 01:08:58,239
and there's something similar happen

713
01:08:58,239 --> 01:09:01,162
if I don't add anything.

714
01:09:02,023 --> 01:09:05,138
It will

715
01:09:05,138 --> 01:09:07,241
Just do not do that.

716
01:09:11,788 --> 01:09:14,071
It wasn't saved.

717
01:09:14,071 --> 01:09:15,112
OK, so you have to.

718
01:09:15,954 --> 01:09:17,115
Yes, you have to save.

719
01:09:21,742 --> 01:09:25,267
Then you get a text editor

720
01:09:25,267 --> 01:09:28,271
that allows you to edit the message.

721
01:09:29,974 --> 01:09:31,576
And maybe we'll talk about

722
01:09:31,576 --> 01:09:35,007
the philosophy of how to think about auto

723
01:09:35,007 --> 01:09:36,970
Uh, think of commit messages a bit later.

724
01:09:38,212 --> 01:09:40,455
Yes.

725
01:09:40,455 --> 01:09:50,649
And then, so, um, and then you can,

726
01:09:50,649 --> 01:09:52,131
once you, you're done editing,

727
01:09:52,131 --> 01:09:54,595
you can click the check mark thing.

728
01:09:55,737 --> 01:09:58,180
Mm-hmm .

729
01:10:00,438 --> 01:10:02,000
and then it will commit.

730
01:10:02,000 --> 01:10:03,863
To be honest, I usually

731
01:10:03,863 --> 01:10:07,129
use the short commit message because I'm lazy.

732
01:10:07,129 --> 01:10:09,793
I dislike typing more

733
01:10:09,793 --> 01:10:11,235
than absolutely necessary.

734
01:10:12,737 --> 01:10:14,340
Yeah, I also, I mostly

735
01:10:14,340 --> 01:10:15,902
make relatively small commits, so

736
01:10:15,902 --> 01:10:18,266
then I also only write a short message there.

737
01:10:18,266 --> 01:10:20,409
Yes, so let's go, let's see

738
01:10:20,409 --> 01:10:22,373
what the next exercise is.

739
01:10:22,373 --> 01:10:25,117
So we created a branch, then

740
01:10:25,117 --> 01:10:26,479
we did a commit,

741
01:10:29,277 --> 01:10:35,505
then well um i guess right

742
01:10:35,505 --> 01:10:36,807
now we're on your new branch

743
01:10:36,807 --> 01:10:38,109
how would i switch back to

744
01:10:38,109 --> 01:10:42,635
the to the main branch so um

745
01:10:48,462 --> 01:10:50,565
make this a bit wider so you

746
01:10:50,565 --> 01:10:58,255
can see it what i do is

747
01:11:08,512 --> 01:11:18,421
So you can, you can get

748
01:11:19,863 --> 01:11:22,045
click at the bottom on the branch name.

749
01:11:23,726 --> 01:11:26,028
And then you can you have

750
01:11:26,028 --> 01:11:27,870
a selection of branches.

751
01:11:30,833 --> 01:11:32,575
And then you can go back to the main batch.

752
01:11:33,736 --> 01:11:34,717
Okay, and merging.

753
01:11:35,617 --> 01:11:36,578
I guess now we want to

754
01:11:36,578 --> 01:11:39,005
merge the new branch back to the main branch.

755
01:11:39,005 --> 01:11:39,345
Yes.

756
01:11:44,553 --> 01:12:00,836
So if we want to, for

757
01:12:00,836 --> 01:12:04,000
some reason, I've got the

758
01:12:10,375 --> 01:12:12,078
there.

759
01:12:12,078 --> 01:12:13,600
I lost the repositories tab.

760
01:12:13,600 --> 01:12:16,985
So that's this repository changes.

761
01:12:16,985 --> 01:12:20,069
And then so I guess if you

762
01:12:20,069 --> 01:12:21,652
want to wish to for the

763
01:12:21,652 --> 01:12:25,197
zoom, then it's different.

764
01:12:25,197 --> 01:12:26,479
If you want to go to if

765
01:12:26,479 --> 01:12:27,641
you want to merge a branch,

766
01:12:27,641 --> 01:12:32,227
you go here, you select the

767
01:12:32,227 --> 01:12:34,611
branch that you just had, and then you can

768
01:12:42,607 --> 01:12:46,112
merge this into the main batch.

769
01:12:48,475 --> 01:12:50,899
Note that this is there's a

770
01:12:50,899 --> 01:12:52,782
main and then there's an origin main.

771
01:12:54,043 --> 01:12:58,930
So that means that the this,

772
01:12:58,930 --> 01:13:00,673
this is what's on GitHub.

773
01:13:01,614 --> 01:13:03,277
And this is what's on my computer.

774
01:13:07,763 --> 01:13:08,604
Right, what was the next?

775
01:13:09,846 --> 01:13:11,480
What's the next exercise?

776
01:13:11,480 --> 01:13:13,542
uh we still also have to

777
01:13:14,383 --> 01:13:15,885
uh look at the graph maybe

778
01:13:15,885 --> 01:13:22,793
that might be yes well i

779
01:13:22,793 --> 01:13:25,036
think with extensions you can but

780
01:13:25,036 --> 01:13:27,398
um i don't have them so i'm

781
01:13:27,398 --> 01:13:28,860
going to do it in the terminal

782
01:13:28,860 --> 01:13:30,161
and maybe you can tell me how

783
01:13:30,161 --> 01:13:32,224
to do it in the terminal but

784
01:13:32,224 --> 01:13:34,246
so first thing to do on vs code

785
01:13:34,246 --> 01:13:36,725
if you want to do something in the terminal

786
01:13:36,725 --> 01:13:39,450
is you go to the to your menu

787
01:13:39,450 --> 01:13:41,614
and then you go to the view menu

788
01:13:41,614 --> 01:13:43,758
and you open the terminal

789
01:13:44,560 --> 01:13:50,150
or hit the shortcuts and then

790
01:13:50,150 --> 01:13:59,307
I will actually hide this and

791
01:14:01,987 --> 01:14:04,090
Make this smaller.

792
01:14:04,090 --> 01:14:06,773
So you can see actually

793
01:14:08,095 --> 01:14:09,857
someone in the notes document

794
01:14:11,099 --> 01:14:13,642
say whether the font size is

795
01:14:13,642 --> 01:14:15,084
isn't as big enough.

796
01:14:18,288 --> 01:14:23,154
For me, it's fine, but Right.

797
01:14:23,154 --> 01:14:24,957
So I'd be typing here.

798
01:14:26,539 --> 01:14:28,241
Okay.

799
01:14:28,241 --> 01:14:28,281
So

800
01:14:32,378 --> 01:14:35,462
That was just an ls, this directory.

801
01:14:36,524 --> 01:14:37,946
Okay.

802
01:14:37,946 --> 01:14:41,170
Then maybe, so there is

803
01:14:41,170 --> 01:14:43,173
this command git log that

804
01:14:43,173 --> 01:14:46,618
just lets you interact with the

805
01:14:46,618 --> 01:14:48,721
sort of the history and you

806
01:14:48,721 --> 01:14:53,127
can give it all sorts of additional parameters.

807
01:14:53,929 --> 01:14:54,890
And what we're looking for

808
01:14:54,890 --> 01:14:56,412
is dash dash graph.

809
01:14:58,585 --> 01:15:02,450
it log dash dash graph dash

810
01:15:02,450 --> 01:15:06,715
dash one line dash dash one

811
01:15:06,715 --> 01:15:13,124
line dash dash decorate yes and

812
01:15:13,124 --> 01:15:20,213
then dash dash all um okay

813
01:15:20,213 --> 01:15:21,514
yeah that's that's it enter here

814
01:15:23,177 --> 01:15:27,462
uh and then we want to see

815
01:15:28,960 --> 01:15:31,663
Because it's right.

816
01:15:33,905 --> 01:15:37,808
This is from the beginning.

817
01:15:38,930 --> 01:15:39,430
Where's yours?

818
01:15:40,371 --> 01:15:40,851
It's mine.

819
01:15:40,851 --> 01:15:43,054
It's not there.

820
01:15:57,047 --> 01:15:58,208
We did merge, right?

821
01:15:59,302 --> 01:16:13,579
we did much yes can you just

822
01:16:13,579 --> 01:16:23,231
do git log is that just so

823
01:16:23,231 --> 01:16:26,355
there we should here we see we

824
01:16:30,723 --> 01:16:31,844
did the pudding recipe.

825
01:16:35,508 --> 01:16:37,210
So there is good news.

826
01:16:39,953 --> 01:16:41,054
Don't show up in the graph.

827
01:16:41,054 --> 01:16:54,688
But it seems to me that all the that

828
01:16:57,841 --> 01:17:00,085
Simplify, restore.

829
01:17:00,085 --> 01:17:01,627
It's all the way up there.

830
01:17:01,627 --> 01:17:02,649
Yeah, it was.

831
01:17:02,649 --> 01:17:07,918
It skipped a bunch, and that's I. OK.

832
01:17:07,918 --> 01:17:10,422
OK, well, I don't tend to

833
01:17:10,422 --> 01:17:12,605
use that kind of view very often.

834
01:17:12,605 --> 01:17:15,510
I kind of poke around in the log itself.

835
01:17:15,510 --> 01:17:18,455
But I guess the more complicated

836
01:17:18,455 --> 01:17:22,040
a sort of branching

837
01:17:22,040 --> 01:17:23,983
graph you have, the more

838
01:17:23,983 --> 01:17:25,185
useful this kind of US and

839
01:17:25,185 --> 01:17:27,008
then also the more useful it might

840
01:17:27,008 --> 01:17:28,731
be to use an additional tool that

841
01:17:28,731 --> 01:17:30,113
can maybe do a visualization a

842
01:17:30,113 --> 01:17:30,914
little bit better than.

843
01:17:33,278 --> 01:17:33,518
Yes.

844
01:17:36,463 --> 01:17:40,229
Okay, just think we're already

845
01:17:40,229 --> 01:17:42,011
very much over time.

846
01:17:42,011 --> 01:17:42,973
Yes, I guess.

847
01:17:42,973 --> 01:17:44,315
Sorry.

848
01:17:45,737 --> 01:17:49,363
And we will come to that.

849
01:17:51,537 --> 01:17:53,147
how to poke in the history

850
01:17:53,147 --> 01:17:58,037
um after a short break um

851
01:17:59,384 --> 01:18:00,145
Yes.

852
01:18:02,728 --> 01:18:05,372
So we'll have a 10 minute break.

853
01:18:05,372 --> 01:18:07,955
Yes, but we will first.

854
01:18:07,955 --> 01:18:09,677
So to recap this, we

855
01:18:09,677 --> 01:18:12,240
cloned the repository to our local computer

856
01:18:12,240 --> 01:18:14,223
and did something that we

857
01:18:14,223 --> 01:18:16,506
already did yesterday online.

858
01:18:16,506 --> 01:18:18,308
We did now on our local computer

859
01:18:19,450 --> 01:18:21,893
and we will continue exploring

860
01:18:21,893 --> 01:18:25,726
how to work locally in

861
01:18:25,726 --> 01:18:26,629
the rest of the day.

862
01:18:26,629 --> 01:18:30,662
So for now, we'll have a 10 minute break.

863
01:18:31,625 --> 01:18:33,350
And after that, we will

864
01:18:33,350 --> 01:18:35,557
start with poking at the history.

865
01:18:35,557 --> 01:18:36,360
So bye for now.

866
01:28:44,988 --> 01:28:49,153
Okay, so welcome back from the break.

867
01:28:49,153 --> 01:28:51,896
Hopefully, you got a chance

868
01:28:51,896 --> 01:28:52,797
to stretch your legs a bit.

869
01:28:55,541 --> 01:29:00,406
So now we have we have

870
01:29:00,406 --> 01:29:05,312
loaned a repository to our own local computer.

871
01:29:05,312 --> 01:29:09,257
And now we will look at how we can

872
01:29:10,925 --> 01:29:13,729
we can poke at the history and explore

873
01:29:13,729 --> 01:29:15,271
what has been going on

874
01:29:15,271 --> 01:29:17,655
in that Git repository a bit

875
01:29:18,576 --> 01:29:20,539
from the local site.

876
01:29:20,539 --> 01:29:25,186
So as a first like a bit of a warm up,

877
01:29:25,186 --> 01:29:28,130
let's look at a graphical way

878
01:29:28,130 --> 01:29:33,959
to look at the history and

879
01:29:33,959 --> 01:29:37,404
So there is this tool,

880
01:29:37,404 --> 01:29:40,027
the git history browser, which you

881
01:29:40,027 --> 01:29:43,211
can get by just adding this

882
01:29:43,211 --> 01:29:48,658
specific string to the front

883
01:29:48,658 --> 01:29:50,681
of the repository you want to look at.

884
01:29:51,522 --> 01:29:54,226
And [name] is

885
01:29:54,226 --> 01:29:57,389
Maybe now showing.

886
01:29:57,389 --> 01:30:01,934
So yeah, so this is

887
01:30:01,934 --> 01:30:03,456
the the repository we're going

888
01:30:03,456 --> 01:30:04,557
to look at networks.

889
01:30:06,539 --> 01:30:08,060
And then if you go if

890
01:30:08,060 --> 01:30:10,963
you replace the front bit by

891
01:30:10,963 --> 01:30:12,705
this get history string.

892
01:30:13,706 --> 01:30:16,629
So, or just follow the link

893
01:30:16,629 --> 01:30:19,172
on the yeah, on the lesson materials.

894
01:30:21,715 --> 01:30:23,858
Then you will see

895
01:30:23,858 --> 01:30:26,122
that there is a, that you

896
01:30:26,122 --> 01:30:28,485
can browse the history, like you

897
01:30:28,485 --> 01:30:30,869
can use your left and right keys

898
01:30:30,869 --> 01:30:33,814
to go back in history

899
01:30:33,814 --> 01:30:35,516
through the different commits, and

900
01:30:35,516 --> 01:30:38,381
it will tell you what has

901
01:30:38,381 --> 01:30:40,184
changed, who changed it.

902
01:30:42,327 --> 01:30:44,751
And when it was.

903
01:30:47,435 --> 01:30:48,617
So that's a sort of

904
01:30:51,044 --> 01:30:54,929
more graphical way to browse the history,

905
01:30:54,929 --> 01:30:56,371
which is, it's nice if you

906
01:30:56,371 --> 01:30:57,152
want to take a look.

907
01:30:58,434 --> 01:31:01,619
But in the end, if you're looking

908
01:31:01,619 --> 01:31:04,162
for something very specific, you

909
01:31:04,162 --> 01:31:05,624
will spend a lot of time

910
01:31:05,624 --> 01:31:08,528
looking if you only use this kind of way.

911
01:31:08,528 --> 01:31:12,534
So maybe we can go and go

912
01:31:12,534 --> 01:31:16,900
to tools that are a bit more to the point.

913
01:31:17,741 --> 01:31:20,545
So say you were

914
01:31:22,870 --> 01:31:25,796
you were looking for a bit of text,

915
01:31:25,796 --> 01:31:27,800
like you were looking for places

916
01:31:27,800 --> 01:31:31,688
where you had before in

917
01:31:31,688 --> 01:31:34,454
the code written fix me because

918
01:31:34,454 --> 01:31:35,937
you wanted to go come back to

919
01:31:35,937 --> 01:31:41,368
it at a later point and fix places.

920
01:31:42,293 --> 01:31:44,216
Then, and we'll try this

921
01:31:44,216 --> 01:31:46,499
on this NetworkX repository.

922
01:31:46,499 --> 01:31:50,725
So have you already cloned it or?

923
01:31:50,725 --> 01:31:51,806
I have not done anything yet,

924
01:31:51,806 --> 01:31:52,588
so I will clone it.

925
01:31:52,588 --> 01:31:53,990
Okay, so you clone it

926
01:31:53,990 --> 01:32:01,240
from the command line, which it was a bit fast,

927
01:32:01,240 --> 01:32:03,964
but you basically say git

928
01:32:03,964 --> 01:32:05,526
clone, and then there you go.

929
01:32:07,509 --> 01:32:09,472
You can see the history down

930
01:32:09,472 --> 01:32:10,793
here, if you want.

931
01:32:10,793 --> 01:32:11,254
Yeah.

932
01:32:12,247 --> 01:32:12,667
Right?

933
01:32:12,667 --> 01:32:13,028
Yeah.

934
01:32:13,028 --> 01:32:16,191
So now I'm in, we are

935
01:32:16,191 --> 01:32:18,714
in the network X directory in

936
01:32:18,714 --> 01:32:22,799
the on the main branch.

937
01:32:22,799 --> 01:32:27,944
And then if we wanted to say, search

938
01:32:27,944 --> 01:32:29,106
for the string, fix me

939
01:32:29,106 --> 01:32:31,348
anywhere in the repository, you

940
01:32:31,348 --> 01:32:32,750
could use git grep.

941
01:32:34,532 --> 01:32:42,098
And then minus, I fix the minus I do.

942
01:32:42,098 --> 01:32:47,506
I'm not quite sure actually at the moment.

943
01:32:47,506 --> 01:32:51,251
Well, that's just doesn't find

944
01:32:51,251 --> 01:32:54,716
any fix me this way and this

945
01:32:54,716 --> 01:32:58,041
way it finds even an uppercase.

946
01:33:01,767 --> 01:33:01,907
Okay.

947
01:33:01,907 --> 01:33:02,087
Okay.

948
01:33:02,928 --> 01:33:04,431
So there are some, there are

949
01:33:04,431 --> 01:33:05,673
some to do's in here.

950
01:33:05,673 --> 01:33:07,235
Yes, indeed.

951
01:33:10,059 --> 01:33:11,762
But that's the current state

952
01:33:11,762 --> 01:33:12,963
of the repository, right?

953
01:33:12,963 --> 01:33:18,932
So if you wanted to do something of

954
01:33:21,155 --> 01:33:24,600
that same type, you could use

955
01:33:24,600 --> 01:33:26,823
the git log command that we

956
01:33:26,823 --> 01:33:27,745
used earlier as well.

957
01:33:28,726 --> 01:33:30,909
And then I think it's

958
01:33:30,909 --> 01:33:32,351
uppercase S for search.

959
01:33:33,413 --> 01:33:34,293
Mm-hmm.

960
01:33:34,293 --> 01:33:35,815
And then the same text.

961
01:33:38,137 --> 01:33:39,118
Oh, let's try this again.

962
01:33:40,059 --> 01:33:41,220
So, yeah.

963
01:33:41,220 --> 01:33:41,821
Yeah.

964
01:33:41,821 --> 01:33:44,824
And then you get where it

965
01:33:44,824 --> 01:33:48,548
was and it should also be.

966
01:33:49,910 --> 01:33:50,671
So this shows me.

967
01:33:50,671 --> 01:33:52,973
At what commit you have found it.

968
01:33:53,854 --> 01:33:54,114
Okay.

969
01:33:55,956 --> 01:33:57,158
So for example, this first

970
01:33:57,158 --> 01:33:58,239
commit, it would be a commit

971
01:33:58,239 --> 01:33:59,841
that has changed the fix me.

972
01:34:01,602 --> 01:34:03,805
It has either removed or added one.

973
01:34:03,805 --> 01:34:03,945
Yeah.

974
01:34:04,853 --> 01:34:05,234
Okay.

975
01:34:06,215 --> 01:34:06,896
I think so.

976
01:34:09,279 --> 01:34:09,580
Okay.

977
01:34:10,681 --> 01:34:12,544
And because it is not explicit.

978
01:34:23,259 --> 01:34:23,419
Okay.

979
01:34:31,955 --> 01:34:35,119
Okay, so if you then wanted to,

980
01:34:35,940 --> 01:34:40,846
because if you found with your git log,

981
01:34:40,846 --> 01:34:46,272
for example, and a commit that

982
01:34:46,272 --> 01:34:49,536
you want to look at in more detail.

983
01:34:51,058 --> 01:34:52,620
For example, this first one.

984
01:34:52,620 --> 01:34:53,982
For example, this first one,

985
01:34:53,982 --> 01:34:57,165
and then you just copy the commit hash.

986
01:34:59,208 --> 01:35:01,050
And then you can use git show.

987
01:35:03,376 --> 01:35:06,782
You can get show and then the hash.

988
01:35:08,044 --> 01:35:09,146
You can look at the commit.

989
01:35:13,273 --> 01:35:16,338
And here you can see sort

990
01:35:16,338 --> 01:35:17,861
of all of the differences.

991
01:35:17,861 --> 01:35:19,564
So it always shows it has

992
01:35:19,564 --> 01:35:22,108
removed a line and added a line instead.

993
01:35:22,108 --> 01:35:22,328
Yes.

994
01:35:23,490 --> 01:35:27,068
But you can also do is so if you

995
01:35:27,068 --> 01:35:28,870
or whatever reason I'm not copying it,

996
01:35:28,870 --> 01:35:32,095
you can try to just like

997
01:35:32,095 --> 01:35:33,537
type in the first two, for

998
01:35:33,537 --> 01:35:35,239
example, I'm just trying having

999
01:35:35,239 --> 01:35:36,721
the first two letters and it also finds it.

1000
01:35:38,463 --> 01:35:40,466
I try the first four, then

1001
01:35:40,466 --> 01:35:41,307
you can see Oh, no.

1002
01:35:43,269 --> 01:35:45,573
It is this ambiguous, you're

1003
01:35:45,573 --> 01:35:47,014
giving it too little information,

1004
01:35:47,014 --> 01:35:48,256
but you don't always need to

1005
01:35:48,256 --> 01:35:51,140
give it the entire hash prefixes enough.

1006
01:35:51,140 --> 01:35:51,220
Yes.

1007
01:35:54,743 --> 01:35:56,286
But if you know the full

1008
01:35:56,286 --> 01:35:58,369
hash, you can copy this.

1009
01:35:58,369 --> 01:36:01,154
Because then this is the exact hash.

1010
01:36:03,778 --> 01:36:04,539
You know you'll get it.

1011
01:36:07,063 --> 01:36:12,172
So that's how to show it.

1012
01:36:12,172 --> 01:36:20,025
And we'll later get to how to have it more.

1013
01:36:28,645 --> 01:36:31,148
How to how to look at it a bit more like

1014
01:36:32,149 --> 01:36:34,391
if you do get show it'll show you in

1015
01:36:34,391 --> 01:36:36,333
that terminal what the commit was

1016
01:36:36,333 --> 01:36:37,794
but there's that doesn't mean

1017
01:36:37,794 --> 01:36:39,156
that you can browse the files

1018
01:36:39,156 --> 01:36:39,937
that were on the commit.

1019
01:36:41,278 --> 01:36:42,479
We get to how to do

1020
01:36:42,479 --> 01:36:44,942
that later, but first if you want to.

1021
01:36:44,942 --> 01:36:52,830
See for a given file who.

1022
01:36:54,447 --> 01:36:56,389
who did what in that file

1023
01:36:56,389 --> 01:36:58,612
on the terminal, you can use git annotate.

1024
01:37:00,214 --> 01:37:01,636
But you need to give it

1025
01:37:01,636 --> 01:37:06,322
a specific file in the current repository.

1026
01:37:06,322 --> 01:37:08,785
Which file do you want to look at?

1027
01:37:08,785 --> 01:37:12,729
Well, the lesson suggests convert matrix.

1028
01:37:15,252 --> 01:37:15,713
So

1029
01:37:17,819 --> 01:37:18,961
Convert underscore matrix.

1030
01:37:19,902 --> 01:37:20,724
Yes.

1031
01:37:20,724 --> 01:37:22,847
And then in this view, you

1032
01:37:22,847 --> 01:37:30,019
will see for each line when

1033
01:37:30,019 --> 01:37:32,664
it was changed, who changed it.

1034
01:37:34,867 --> 01:37:34,987
Yeah.

1035
01:37:34,987 --> 01:37:36,370
And I guess the way I'm

1036
01:37:36,370 --> 01:37:38,272
showing it is maybe a little bit

1037
01:37:38,272 --> 01:37:39,314
standard.

1038
01:37:39,314 --> 01:37:41,737
So because I'm squishing everything

1039
01:37:41,737 --> 01:37:45,683
to be better for viewing if you have a,

1040
01:37:45,683 --> 01:37:46,524
if you have some more real

1041
01:37:46,524 --> 01:37:47,806
estate in your for your terminal,

1042
01:37:47,806 --> 01:37:49,048
then it looks a little bit

1043
01:37:49,048 --> 01:37:52,533
more easier to to it's easier on the eyes.

1044
01:37:52,533 --> 01:37:52,753
Yes.

1045
01:37:53,835 --> 01:37:55,858
Because like this, it's hard to see

1046
01:37:55,858 --> 01:37:58,482
where the lines and but

1047
01:37:58,482 --> 01:37:59,964
usually you will have one line.

1048
01:37:59,964 --> 01:38:04,751
And that will have the the annotations.

1049
01:38:04,751 --> 01:38:06,571
So um,

1050
01:38:06,571 --> 01:38:10,154
Maybe I show it like this

1051
01:38:10,154 --> 01:38:11,455
when you only see part of it,

1052
01:38:11,455 --> 01:38:13,517
but you can see, oops, sorry.

1053
01:38:17,121 --> 01:38:18,362
And you can see more about,

1054
01:38:18,362 --> 01:38:20,203
uh, sort of what the lines

1055
01:38:20,203 --> 01:38:22,385
look like or what look like for you.

1056
01:38:25,248 --> 01:38:31,634
Um, one thing, um, that we

1057
01:38:31,634 --> 01:38:35,177
maybe wanted to, um,

1058
01:38:37,925 --> 01:38:39,827
quickly mention if you are

1059
01:38:39,827 --> 01:38:42,709
on GitHub and you want to find a hash.

1060
01:38:45,431 --> 01:38:46,993
You maybe want to show that quickly.

1061
01:38:48,434 --> 01:38:50,395
Yeah, right.

1062
01:38:50,395 --> 01:38:52,777
In, yeah, you go ahead.

1063
01:38:52,777 --> 01:38:55,159
So, yeah, so on GitHub,

1064
01:38:55,159 --> 01:38:57,341
you can, for example, right now

1065
01:38:57,341 --> 01:38:58,222
we're on the main branch.

1066
01:38:59,823 --> 01:39:01,665
You can, if you just want to

1067
01:39:01,665 --> 01:39:03,526
look at all of the commits or,

1068
01:39:03,526 --> 01:39:04,667
yeah, you can, so this would

1069
01:39:04,667 --> 01:39:05,728
be, again, a specific commit.

1070
01:39:05,728 --> 01:39:08,452
This is the prefix for that hash.

1071
01:39:08,452 --> 01:39:10,834
And then these are just all the commits.

1072
01:39:13,097 --> 01:39:18,002
And yeah, you've seen this already.

1073
01:39:18,002 --> 01:39:19,263
But so if we look at

1074
01:39:19,263 --> 01:39:21,566
a specific file, let's look at

1075
01:39:21,566 --> 01:39:23,247
the readme, for example.

1076
01:39:23,247 --> 01:39:24,909
Or let's look at the same

1077
01:39:24,909 --> 01:39:26,110
file that we just looked at.

1078
01:39:28,232 --> 01:39:29,554
So network, and then it

1079
01:39:29,554 --> 01:39:31,896
was convert matrix, this one.

1080
01:39:32,817 --> 01:39:34,459
Then you can, so in

1081
01:39:34,459 --> 01:39:36,501
here, instead of annotate, it's called blame.

1082
01:39:37,915 --> 01:39:41,862
uh for historical reasons again um

1083
01:39:41,862 --> 01:39:44,367
so here you can see basically

1084
01:39:44,367 --> 01:39:46,631
for every line who last changed it

1085
01:39:47,853 --> 01:39:49,657
and you can so at the

1086
01:39:49,657 --> 01:39:52,422
very right there's this blame

1087
01:39:52,422 --> 01:39:55,367
prior to change so here you can find the commit

1088
01:39:57,440 --> 01:40:00,224
this one here then, that is

1089
01:40:00,224 --> 01:40:02,327
the last commit before the change.

1090
01:40:02,327 --> 01:40:04,710
So if you have a breaking change

1091
01:40:04,710 --> 01:40:07,354
and you know sort of this

1092
01:40:07,354 --> 01:40:08,876
line is the problem, then you

1093
01:40:08,876 --> 01:40:10,638
can find the commit that sort

1094
01:40:10,638 --> 01:40:13,523
of last commit before the change to that line.

1095
01:40:13,523 --> 01:40:15,485
So it's just a convenience feature

1096
01:40:15,485 --> 01:40:16,767
if you wanted to go back

1097
01:40:16,767 --> 01:40:18,289
to that particular thing to try

1098
01:40:18,289 --> 01:40:20,292
out, or yeah, to investigate further.

1099
01:40:23,005 --> 01:40:23,285
Right.

1100
01:40:24,466 --> 01:40:27,589
So then, um, last thing before

1101
01:40:27,589 --> 01:40:31,333
we go to the exercise is exercise is

1102
01:40:31,333 --> 01:40:33,955
how do we actually go to, um,

1103
01:40:36,878 --> 01:40:37,959
how do we actually get to

1104
01:40:37,959 --> 01:40:42,403
look at the code that is in a historical commit?

1105
01:40:43,925 --> 01:40:47,909
And, um, that's basically, if

1106
01:40:47,909 --> 01:40:51,612
you go back to the, to the command line, um,

1107
01:40:55,557 --> 01:41:01,183
you use git switch to change a branch

1108
01:41:01,183 --> 01:41:03,165
and you can use git switch

1109
01:41:03,165 --> 01:41:07,030
with the create flag to create

1110
01:41:07,030 --> 01:41:11,495
a new branch, like call it

1111
01:41:11,495 --> 01:41:16,560
historic or whatever you want to call it.

1112
01:41:16,560 --> 01:41:17,501
And then you can give it

1113
01:41:17,501 --> 01:41:19,243
the hash of the commit that you.

1114
01:41:19,243 --> 01:41:21,666
I was too eager.

1115
01:41:24,025 --> 01:41:25,447
Sorry.

1116
01:41:28,030 --> 01:41:28,511
It is main.

1117
01:41:28,511 --> 01:41:28,791
Okay.

1118
01:41:35,440 --> 01:41:36,881
Give it a typo.

1119
01:41:36,881 --> 01:41:38,584
And then now some.

1120
01:41:38,584 --> 01:41:40,486
Now some hash.

1121
01:41:40,486 --> 01:41:42,068
Do you still have the hash

1122
01:41:42,068 --> 01:41:43,750
that you just earlier copied?

1123
01:41:43,750 --> 01:41:46,734
I'll just use the one that's down there.

1124
01:41:46,734 --> 01:41:47,956
Yeah.

1125
01:41:47,956 --> 01:41:48,576
Let's try that.

1126
01:41:50,399 --> 01:41:51,300
There we are.

1127
01:41:51,300 --> 01:41:52,088
Yeah.

1128
01:41:52,088 --> 01:41:54,431
And now you are on the

1129
01:41:54,431 --> 01:41:57,976
state of the repository when that,

1130
01:41:59,378 --> 01:42:03,144
when that commit was done and

1131
01:42:03,144 --> 01:42:07,470
then you can look at it and

1132
01:42:07,470 --> 01:42:09,793
look at the state of the files

1133
01:42:09,793 --> 01:42:11,756
as well and look at all the files.

1134
01:42:11,756 --> 01:42:12,077
Right.

1135
01:42:12,077 --> 01:42:13,118
So, um,

1136
01:42:14,633 --> 01:42:16,297
I think it is now time

1137
01:42:16,297 --> 01:42:20,469
to explore these for yourself in the exercise.

1138
01:42:27,227 --> 01:42:31,157
We've planned 20 minutes for this exercise.

1139
01:42:35,558 --> 01:42:38,348
And if you're absolutely stuck,

1140
01:42:38,348 --> 01:42:39,734
you can look at the solution

1141
01:42:39,734 --> 01:42:45,987
in the lesson notes or the lesson document.

1142
01:42:45,987 --> 01:42:47,008
I guess some of these things,

1143
01:42:47,008 --> 01:42:49,171
they are a bit tricky to do in VS Code.

1144
01:42:49,171 --> 01:42:49,352
Yeah.

1145
01:42:51,034 --> 01:42:51,575
Oh, yes.

1146
01:42:51,575 --> 01:42:53,717
If you are doing this with VS Code,

1147
01:42:54,799 --> 01:42:56,641
because most of these things

1148
01:42:56,641 --> 01:43:00,126
will be only possible on the command line,

1149
01:43:00,126 --> 01:43:01,348
but you can always use the

1150
01:43:01,348 --> 01:43:03,551
terminal in the command in VS

1151
01:43:03,551 --> 01:43:08,678
Code, as I showed in the last

1152
01:43:08,678 --> 01:43:10,380
part of the lesson for exercise seven.

1153
01:43:12,443 --> 01:43:14,225
So open the terminal and then

1154
01:43:14,225 --> 01:43:15,707
just use it normally.

1155
01:43:18,370 --> 01:43:19,832
And you can always ask

1156
01:43:19,832 --> 01:43:21,815
questions in the notes document.

1157
01:43:21,815 --> 01:43:23,016
There aren't any stupid

1158
01:43:23,016 --> 01:43:26,441
questions, only stupid answers.

1159
01:43:28,704 --> 01:43:32,690
And there is also, I think,

1160
01:43:32,690 --> 01:43:37,156
a Zoom room where you can go to get help.

1161
01:43:37,156 --> 01:43:39,779
But I'm not quite sure, maybe.

1162
01:43:41,201 --> 01:43:42,485
It should be one of the emails.

1163
01:43:42,485 --> 01:43:44,269
Yes, you should have gotten

1164
01:43:44,269 --> 01:43:46,554
an email where to go if you need help.

1165
01:43:48,819 --> 01:43:50,883
And yeah, let's start the break now.

1166
01:43:52,206 --> 01:43:53,168
Exercise break now.

1167
01:43:53,168 --> 01:43:55,092
Exercise goes on for 20 minutes.

1168
01:43:56,656 --> 01:43:57,397
So bye for now.

1169
01:43:58,239 --> 01:43:59,041
See you in 20 minutes.

1170
01:44:01,486 --> 01:44:01,827
Good luck.

1171
02:03:49,030 --> 02:03:52,355
Right welcome back from the exercise um.

1172
02:03:53,917 --> 02:03:56,481
It seems like there was quite a lot of.

1173
02:03:58,444 --> 02:04:00,266
discussion in the notes

1174
02:04:00,266 --> 02:04:01,408
about this exercise.

1175
02:04:04,012 --> 02:04:04,893
So we will.

1176
02:04:06,595 --> 02:04:07,076
Maybe.

1177
02:04:08,698 --> 02:04:09,900
go through the next.

1178
02:04:11,623 --> 02:04:11,983
um.

1179
02:04:15,102 --> 02:04:17,226
through the next part, only

1180
02:04:17,226 --> 02:04:19,351
go through it and discuss it

1181
02:04:19,351 --> 02:04:22,116
a bit, but not show a lot.

1182
02:04:22,116 --> 02:04:27,127
And then you have a little

1183
02:04:27,127 --> 02:04:29,131
more time to return to the

1184
02:04:29,131 --> 02:04:31,255
exercises if you want to, or

1185
02:04:32,804 --> 02:04:35,350
get some more other thinking done.

1186
02:04:36,312 --> 02:04:37,816
So the next thing we wanted

1187
02:04:37,816 --> 02:04:40,222
to discuss is what do you

1188
02:04:40,222 --> 02:04:44,632
do if you notice there

1189
02:04:44,632 --> 02:04:47,439
was something going wrong, but I

1190
02:04:47,439 --> 02:04:50,827
don't know how long this has been

1191
02:04:50,827 --> 02:04:53,471
going on how long when when

1192
02:04:53,471 --> 02:04:55,414
did this happen i'm i'm sure

1193
02:04:55,414 --> 02:04:57,798
it happened it was working at some point

1194
02:04:57,798 --> 02:04:59,861
but it's not working now i don't know

1195
02:04:59,861 --> 02:05:03,646
when it changed so um maybe we

1196
02:05:03,646 --> 02:05:07,112
can do it um without looking

1197
02:05:07,112 --> 02:05:08,494
at the lessons notes so far

1198
02:05:08,494 --> 02:05:10,577
so what would you do [name]

1199
02:05:12,600 --> 02:05:17,307
well knowing the knowing the the uh uh

1200
02:05:18,620 --> 02:05:22,705
the exercise is, well, I

1201
02:05:22,705 --> 02:05:24,126
guess one could randomly look

1202
02:05:24,126 --> 02:05:26,429
at previous commits or one, I

1203
02:05:26,429 --> 02:05:28,291
guess I would just start looking

1204
02:05:28,291 --> 02:05:29,252
at the last commit.

1205
02:05:29,252 --> 02:05:29,733
It's not bad.

1206
02:05:29,733 --> 02:05:31,475
I would look at the commit before that.

1207
02:05:31,475 --> 02:05:32,296
And at some point I would

1208
02:05:32,296 --> 02:05:33,898
probably do a more systematic

1209
02:05:33,898 --> 02:05:37,181
search, probably a bisection search.

1210
02:05:38,563 --> 02:05:41,727
So basically a divide and conquer approach.

1211
02:05:43,228 --> 02:05:44,370
I guess, yes.

1212
02:05:44,370 --> 02:05:45,191
I guess it's what you always

1213
02:05:45,191 --> 02:05:46,531
do in computer science.

1214
02:05:46,531 --> 02:05:50,237
At least that is one very

1215
02:05:50,237 --> 02:05:51,979
fast way to find things.

1216
02:05:51,979 --> 02:05:53,942
So it's nice, isn't it?

1217
02:05:53,942 --> 02:05:55,965
So yeah, Git actually does or

1218
02:05:57,247 --> 02:06:01,313
offers you a way to do just that.

1219
02:06:04,237 --> 02:06:06,801
To actually do the exercise,

1220
02:06:06,801 --> 02:06:11,388
you will have to have some way to find out

1221
02:06:11,388 --> 02:06:13,991
to decide whether your code

1222
02:06:13,991 --> 02:06:15,893
was working or not.

1223
02:06:15,893 --> 02:06:17,575
So this is not something

1224
02:06:17,575 --> 02:06:21,059
that's easily demoed quickly, but

1225
02:06:21,059 --> 02:06:24,583
we will go through the theory,

1226
02:06:24,583 --> 02:06:27,045
I think, and maybe show what's in the lesson.

1227
02:06:27,045 --> 02:06:32,251
So maybe you can scroll down a little bit.

1228
02:06:33,953 --> 02:06:37,617
So the command that you want

1229
02:06:37,617 --> 02:06:39,119
to use is git bisect.

1230
02:06:39,119 --> 02:06:41,361
And git bisect does the

1231
02:06:44,142 --> 02:06:46,705
So it's a multi-step process.

1232
02:06:46,705 --> 02:06:48,027
So first you say, I

1233
02:06:48,027 --> 02:06:49,288
want to start bisecting.

1234
02:06:49,288 --> 02:06:50,950
I want to find my problem.

1235
02:06:50,950 --> 02:06:53,573
Then you say git bisect

1236
02:06:53,573 --> 02:06:55,135
start on the command line.

1237
02:06:55,135 --> 02:06:56,957
This is only working on command line.

1238
02:06:56,957 --> 02:07:00,401
So if you're working in VS

1239
02:07:00,401 --> 02:07:03,324
code, you will want the terminal again.

1240
02:07:03,324 --> 02:07:06,268
And then you find a commit where you,

1241
02:07:07,469 --> 02:07:08,611
that's way, way back that

1242
02:07:08,611 --> 02:07:10,501
you know that's good.

1243
02:07:10,501 --> 02:07:12,484
then you tell git bisect

1244
02:07:12,484 --> 02:07:14,828
that this command this hash

1245
02:07:14,828 --> 02:07:18,895
was good with saying git bisect good

1246
02:07:18,895 --> 02:07:20,218
and then you give it the

1247
02:07:20,218 --> 02:07:22,642
the command hash or the the commit hash

1248
02:07:24,245 --> 02:07:26,448
and so we we have an exercise code

1249
02:07:26,448 --> 02:07:27,590
that you can use so this

1250
02:07:27,590 --> 02:07:29,954
gets bisect into uh exercise here

1251
02:07:29,954 --> 02:07:36,539
uh yeah and i guess in that exercise

1252
02:07:36,539 --> 02:07:38,482
You don't know when it last worked,

1253
02:07:38,482 --> 02:07:39,903
so you would probably just

1254
02:07:39,903 --> 02:07:42,607
start at the first, at the very first commit.

1255
02:07:43,608 --> 02:07:45,210
Yeah.

1256
02:07:45,210 --> 02:07:46,752
Or that's how I would do it.

1257
02:07:46,752 --> 02:07:47,814
If I don't know anything.

1258
02:07:47,814 --> 02:07:51,238
So you can start there.

1259
02:07:51,238 --> 02:07:53,961
And then you find the

1260
02:07:53,961 --> 02:07:55,584
commit where it's bad.

1261
02:07:56,645 --> 02:07:58,347
And then that's probably the

1262
02:07:58,347 --> 02:08:00,250
last commit that you've got.

1263
02:08:00,250 --> 02:08:01,812
Because that's when you

1264
02:08:01,812 --> 02:08:03,113
notice that something was going wrong.

1265
02:08:04,535 --> 02:08:06,057
So you do git bisect start.

1266
02:08:08,247 --> 02:08:08,607
Okay.

1267
02:08:11,852 --> 02:08:18,400
Then I know that bad is now.

1268
02:08:19,201 --> 02:08:19,561
Yeah, like.

1269
02:08:22,405 --> 02:08:22,886
And then.

1270
02:08:26,350 --> 02:08:27,511
Oh, for example, like this.

1271
02:08:27,511 --> 02:08:31,977
So the first one is this one.

1272
02:08:41,643 --> 02:08:44,265
OK, and then you can see we

1273
02:08:44,265 --> 02:08:47,168
are now on an entirely different.

1274
02:08:49,610 --> 02:08:50,631
So it shows you here the

1275
02:08:50,631 --> 02:08:52,072
beginning of the hash, or also

1276
02:08:52,072 --> 02:08:54,054
when you do get status, it shows you that hash.

1277
02:08:54,855 --> 02:08:56,857
And then you can try.

1278
02:08:56,857 --> 02:09:03,763
So for example, here, 3.57,

1279
02:09:03,763 --> 02:09:05,084
that's not quite pi.

1280
02:09:05,084 --> 02:09:06,725
So you know this one is also bad.

1281
02:09:09,408 --> 02:09:11,090
And then it gives you a new.

1282
02:09:11,090 --> 02:09:12,212
And well, yeah, it does

1283
02:09:12,212 --> 02:09:13,233
it by section search.

1284
02:09:13,233 --> 02:09:13,834
I won't go through the

1285
02:09:13,834 --> 02:09:15,917
entire thing now, but this is the gist.

1286
02:09:17,940 --> 02:09:18,761
And you try it again.

1287
02:09:20,464 --> 02:09:22,006
And then you can say, is it good or bad?

1288
02:09:24,630 --> 02:09:25,111
That one's good.

1289
02:09:26,553 --> 02:09:26,733
OK.

1290
02:09:29,297 --> 02:09:31,400
And yeah, it tells you,

1291
02:09:31,400 --> 02:09:33,904
it estimates how many times you

1292
02:09:33,904 --> 02:09:36,608
have to do this.

1293
02:09:37,718 --> 02:09:40,601
Yeah, it is for, I think

1294
02:09:40,601 --> 02:09:45,826
in total, this had, what, 500 commits

1295
02:09:45,826 --> 02:09:48,248
or so, so it, to

1296
02:09:48,248 --> 02:09:50,330
search it, that's relatively quickly,

1297
02:09:50,330 --> 02:09:52,332
like a few iterations and you'll find it.

1298
02:09:53,974 --> 02:09:54,895
Right.

1299
02:09:54,895 --> 02:10:01,321
So this is a quick view on the git bisect.

1300
02:10:03,463 --> 02:10:07,287
And that is all the content for the lesson.

1301
02:10:08,768 --> 02:10:10,931
Um, we had a look at how to, um,

1302
02:10:14,456 --> 02:10:17,080
how to look at the history

1303
02:10:17,080 --> 02:10:20,826
in, in a repository, how to,

1304
02:10:20,826 --> 02:10:24,831
um, show specific commits of

1305
02:10:24,831 --> 02:10:26,874
the repository once, once we've

1306
02:10:26,874 --> 02:10:28,176
got the hash, where to get the

1307
02:10:28,176 --> 02:10:32,042
hash and how to, um,

1308
02:10:34,199 --> 02:10:39,348
look at who did what change

1309
02:10:39,348 --> 02:10:42,754
with the git annotate, which

1310
02:10:42,754 --> 02:10:45,760
is the equivalent of the blame

1311
02:10:45,760 --> 02:10:48,905
that you saw on GitHub yesterday.

1312
02:10:50,428 --> 02:10:50,708
Sorry.

1313
02:10:53,473 --> 02:10:54,916
There was someone that said

1314
02:10:54,916 --> 02:10:58,533
that the explanation of bisect was too fast.

1315
02:10:58,533 --> 02:11:00,477
Well, okay, yes.

1316
02:11:02,320 --> 02:11:05,065
So maybe, and then we had

1317
02:11:05,065 --> 02:11:09,453
a very short excursion to the Git bisect,

1318
02:11:09,453 --> 02:11:13,881
which is a way of doing a

1319
02:11:15,223 --> 02:11:19,571
search on a Git repository to

1320
02:11:19,571 --> 02:11:23,592
where a specific change happened.

1321
02:11:23,592 --> 02:11:25,378
What you need for it is

1322
02:11:25,378 --> 02:11:26,803
a way to test whether that

1323
02:11:26,803 --> 02:11:30,294
was the commit that you wanted or not.

1324
02:11:31,418 --> 02:11:33,585
And

1325
02:11:43,690 --> 02:11:46,254
So yes, the idea with the

1326
02:11:46,254 --> 02:11:48,738
git bisect was not for you

1327
02:11:48,738 --> 02:11:51,021
to follow along so much as to

1328
02:11:51,021 --> 02:11:52,704
show that there is this option.

1329
02:11:52,704 --> 02:11:55,929
It's actually something that

1330
02:11:55,929 --> 02:11:57,551
doesn't really happen all that

1331
02:11:57,551 --> 02:11:58,913
often in my experience.

1332
02:12:01,757 --> 02:12:03,360
But if you are ever in

1333
02:12:03,360 --> 02:12:06,064
that situation, you should know that

1334
02:12:06,064 --> 02:12:08,708
there is a command called git bisect.

1335
02:12:08,708 --> 02:12:11,332
That's what you should know.

1336
02:12:11,332 --> 02:12:12,755
And then you can look up

1337
02:12:12,755 --> 02:12:18,206
in the manual what the actual commands are.

1338
02:12:22,335 --> 02:12:31,213
So we are now at seven minutes to the hour.

1339
02:12:34,096 --> 02:12:38,580
I would say there's something,

1340
02:12:38,580 --> 02:12:40,783
so the next thing that will

1341
02:12:40,783 --> 02:12:43,745
happen is the rather longer lunch break.

1342
02:12:45,167 --> 02:12:53,936
And to make up for it,

1343
02:12:53,936 --> 02:12:57,619
we will do the lunch, we will

1344
02:12:59,641 --> 02:13:02,584
have a lunch until the full hour again.

1345
02:13:04,589 --> 02:13:06,953
And so it's one hour and

1346
02:13:06,953 --> 02:13:08,495
five minutes at the moment.

1347
02:13:11,000 --> 02:13:15,267
So that's it from the instructors.

1348
02:13:15,267 --> 02:13:16,749
Do we have anything else?

1349
02:13:16,749 --> 02:13:17,991
You said one hour and five minutes.

1350
02:13:17,991 --> 02:13:20,736
So for me, it's right now 1355.

1351
02:13:20,736 --> 02:13:23,540
So five minutes to the full hour.

1352
02:13:25,604 --> 02:13:29,230
So the lunch hour, the lunch is one hour.

1353
02:13:29,230 --> 02:13:29,851
Yes.

1354
02:13:29,851 --> 02:13:32,374
but we have it is five minutes

1355
02:13:32,374 --> 02:13:34,177
before the hour so we have one hour

1356
02:13:34,177 --> 02:13:35,379
and five minutes lunch break

1357
02:13:37,141 --> 02:13:42,609
very well okay um yeah so for anyone

1358
02:13:42,609 --> 02:13:44,251
who is uh who wants to you

1359
02:13:44,251 --> 02:13:45,573
can have a look at the at

1360
02:13:45,573 --> 02:13:46,854
the get bisect maybe yourself

1361
02:13:47,836 --> 02:13:57,273
you're interested um yeah um

1362
02:13:57,273 --> 02:13:59,616
If you can show the

1363
02:14:01,157 --> 02:14:03,520
course page quickly, show the

1364
02:14:03,520 --> 02:14:06,163
schedule on the course page.

1365
02:14:07,705 --> 02:14:12,410
So yeah, so we'll be back in, well,

1366
02:14:12,410 --> 02:14:14,513
at the hour, and we'll then

1367
02:14:14,513 --> 02:14:15,854
talk about how you can use

1368
02:14:15,854 --> 02:14:17,376
Git to share your work.

1369
02:14:19,298 --> 02:14:21,521
Allows you to, well, I

1370
02:14:21,521 --> 02:14:22,362
mean, we already talked about

1371
02:14:22,362 --> 02:14:25,437
GitHub, so how you can get your work

1372
02:14:25,437 --> 02:14:26,599
to be visible for others so

1373
02:14:26,599 --> 02:14:27,320
that they can use it.

1374
02:14:28,321 --> 02:14:29,944
And some of your practical advice,

1375
02:14:29,944 --> 02:14:31,867
how we actually do things,

1376
02:14:31,867 --> 02:14:32,969
which parts of these are

1377
02:14:32,969 --> 02:14:34,531
actually useful and which are not.

1378
02:14:34,531 --> 02:14:36,775
So, and what to avoid.

1379
02:14:36,775 --> 02:14:38,257
So hopefully this wasn't

1380
02:14:38,257 --> 02:14:39,879
too complicated, but we did go

1381
02:14:39,879 --> 02:14:41,622
into some more advanced things.

1382
02:14:41,622 --> 02:14:45,228
So the next session should again be,

1383
02:14:48,593 --> 02:14:51,457
well, compared to Git bisect,

1384
02:14:51,457 --> 02:14:53,855
we're going back to more,

1385
02:14:53,855 --> 02:14:57,199
more everyday things, more

1386
02:14:57,199 --> 02:15:02,166
practical things that hopefully you

1387
02:15:02,166 --> 02:15:03,408
can not just follow along,

1388
02:15:03,408 --> 02:15:05,430
but actually do yourself in your own work.

1389
02:15:08,555 --> 02:15:09,776
Okay.

1390
02:15:09,776 --> 02:15:11,278
But yeah, it is also good to know

1391
02:15:11,278 --> 02:15:14,563
how powerful KDE is, how you

1392
02:15:14,563 --> 02:15:17,446
can do things that, you can

1393
02:15:17,446 --> 02:15:18,528
do these more advanced things

1394
02:15:18,528 --> 02:15:20,731
that wouldn't be possible if

1395
02:15:20,731 --> 02:15:22,393
you didn't track the whole history.

1396
02:15:23,335 --> 02:15:24,557
We can go and find the

1397
02:15:24,557 --> 02:15:28,082
bug that you're having trouble with.

1398
02:15:30,285 --> 02:15:30,966
Okay.

1399
02:15:30,966 --> 02:15:32,028
But yeah, so we'll be back

1400
02:15:32,028 --> 02:15:33,030
after the lunch break.

1401
02:15:36,955 --> 02:15:37,596
What should I say?

1402
02:15:37,596 --> 02:15:38,097
Have a good time.

1403
02:15:40,080 --> 02:15:41,963
Not everybody's having lunch, but

1404
02:15:41,963 --> 02:15:42,464
if you are.

1405
02:15:42,464 --> 02:15:51,317
So yeah, bye and see you.

1406
03:18:53,423 --> 03:18:55,165
And we're back.

1407
03:18:55,165 --> 03:18:56,347
I hope everybody had a good break.

1408
03:18:59,350 --> 03:19:01,693
Yeah, so I'm going to

1409
03:19:01,693 --> 03:19:06,138
briefly again go through the bisection part.

1410
03:19:06,138 --> 03:19:08,281
And then we will move on

1411
03:19:08,281 --> 03:19:11,125
to how you can publish a

1412
03:19:11,125 --> 03:19:12,466
project that you've already started

1413
03:19:12,466 --> 03:19:17,452
and version control it with

1414
03:19:17,452 --> 03:19:23,410
Git and also then publish it on GitHub.

1415
03:19:23,410 --> 03:19:27,396
Yeah, so this bisection is supposed

1416
03:19:27,396 --> 03:19:28,858
to be a tool that you can

1417
03:19:28,858 --> 03:19:33,444
use if you have a problem.

1418
03:19:34,866 --> 03:19:35,948
You find that the current

1419
03:19:35,948 --> 03:19:37,690
commit doesn't work anymore,

1420
03:19:38,531 --> 03:19:39,393
whatever that means.

1421
03:19:39,393 --> 03:19:41,616
So something that is not

1422
03:19:41,616 --> 03:19:42,797
the way it's supposed to be.

1423
03:19:42,797 --> 03:19:44,159
And you are certain that at

1424
03:19:44,159 --> 03:19:47,644
some point in the past, it worked.

1425
03:19:47,644 --> 03:19:49,367
And then you can go back

1426
03:19:49,367 --> 03:19:50,308
to that commit and check

1427
03:19:50,308 --> 03:19:52,250
whether it actually worked back then.

1428
03:19:52,250 --> 03:19:56,075
And then you can tell Git that, well,

1429
03:19:56,075 --> 03:19:57,117
first you tell it that you

1430
03:19:57,117 --> 03:19:58,239
want to do a bisection now.

1431
03:19:58,239 --> 03:19:59,661
So you do git bisect start.

1432
03:20:01,683 --> 03:20:02,765
And then you can tell it

1433
03:20:02,765 --> 03:20:06,030
the good commit that is still

1434
03:20:06,030 --> 03:20:07,812
working and the latest.

1435
03:20:08,653 --> 03:20:10,055
So the latest good commit

1436
03:20:10,055 --> 03:20:12,900
and the earliest bad commit.

1437
03:20:12,900 --> 03:20:15,463
And then it will automatically

1438
03:20:16,705 --> 03:20:19,368
check out commits in the middle.

1439
03:20:19,368 --> 03:20:20,611
And you can then test whether

1440
03:20:20,611 --> 03:20:22,156
they are good or bad and tell Git.

1441
03:20:22,156 --> 03:20:24,763
And then it sort of

1442
03:20:24,763 --> 03:20:27,390
conveniently, most efficiently searches

1443
03:20:27,390 --> 03:20:30,158
for you the commits that are

1444
03:20:31,161 --> 03:20:35,045
like it gives you commits that you can test.

1445
03:20:35,045 --> 03:20:37,808
and then tell Git whether that

1446
03:20:37,808 --> 03:20:39,830
was a good one or a bad one.

1447
03:20:39,830 --> 03:20:41,511
And when you do it, we'll

1448
03:20:41,511 --> 03:20:42,412
then give you the next one.

1449
03:20:42,412 --> 03:20:43,133
This way, you'll find

1450
03:20:43,133 --> 03:20:47,677
really efficiently the last commit

1451
03:20:47,677 --> 03:20:53,282
that broke things.

1452
03:20:53,282 --> 03:20:54,984
And for the exercise itself,

1453
03:20:54,984 --> 03:20:57,767
so there is this repository

1454
03:20:57,767 --> 03:20:59,088
that we prepared that you can use.

1455
03:20:59,088 --> 03:21:00,309
So you would just clone that

1456
03:21:00,309 --> 03:21:03,901
and then start bisecting on that.

1457
03:21:03,901 --> 03:21:06,706
To do that exercise, you will

1458
03:21:06,706 --> 03:21:10,292
need a Python installation, because

1459
03:21:10,292 --> 03:21:12,515
the test that you can use

1460
03:21:12,515 --> 03:21:14,018
in order to determine whether or

1461
03:21:14,018 --> 03:21:15,841
not this is a good or a

1462
03:21:15,841 --> 03:21:18,445
bad commit, you will need Python

1463
03:21:18,445 --> 03:21:20,849
to run that bit of code.

1464
03:21:20,849 --> 03:21:22,232
And it will then return a number,

1465
03:21:22,232 --> 03:21:23,854
and you can decide whether

1466
03:21:23,854 --> 03:21:25,497
that is close enough to pi

1467
03:21:25,497 --> 03:21:28,542
for you, for your purposes.

1468
03:21:29,804 --> 03:21:35,278
yeah i think that is all on bisect

1469
03:21:35,278 --> 03:21:36,702
that made things a bit clearer

1470
03:21:36,702 --> 03:21:40,332
than my last attempt um but

1471
03:21:40,332 --> 03:21:43,059
yeah then let's move on to

1472
03:21:43,059 --> 03:21:47,017
the next part which is

1473
03:21:47,017 --> 03:21:48,759
sharing the work.

1474
03:21:49,981 --> 03:21:53,546
So yeah, we're going back

1475
03:21:53,546 --> 03:21:56,069
to the schedule of and then

1476
03:21:56,069 --> 03:21:59,774
there's the current session is linked there.

1477
03:22:00,595 --> 03:22:02,298
So click on sharing work.

1478
03:22:03,379 --> 03:22:07,745
And then we have the lesson.

1479
03:22:10,028 --> 03:22:12,351
Okay, so maybe first, why?

1480
03:22:12,351 --> 03:22:15,015
Why do why does one do that?

1481
03:22:17,054 --> 03:22:20,883
Well, usually you don't really

1482
03:22:20,883 --> 03:22:25,153
start with a Git repository, right?

1483
03:22:25,153 --> 03:22:28,160
Usually you just start with some code.

1484
03:22:29,122 --> 03:22:30,626
Well, after today, you

1485
03:22:30,626 --> 03:22:33,136
hopefully always start with a Git repository.

1486
03:22:33,136 --> 03:22:37,082
Oh, but still, it doesn't

1487
03:22:37,082 --> 03:22:38,564
really matter whether you start

1488
03:22:38,564 --> 03:22:40,286
with the empty Git repository or

1489
03:22:40,286 --> 03:22:42,369
you start with a folder on

1490
03:22:42,369 --> 03:22:45,834
your machine and connect that

1491
03:22:45,834 --> 03:22:46,795
to a Git repository.

1492
03:22:46,795 --> 03:22:48,518
But first thing you need to do is turn

1493
03:22:48,518 --> 03:22:53,925
that folder on your disk

1494
03:22:53,925 --> 03:22:56,449
into a Git repository, into a local repository.

1495
03:22:58,972 --> 03:23:00,034
And now we're going to

1496
03:23:00,034 --> 03:23:03,058
practice and go through how to do that.

1497
03:23:04,034 --> 03:23:04,474
Very well.

1498
03:23:05,556 --> 03:23:09,300
So yeah, for this exercise,

1499
03:23:09,300 --> 03:23:12,062
you will just start with creating

1500
03:23:12,062 --> 03:23:15,166
a new folder and put some stuff into

1501
03:23:15,166 --> 03:23:16,027
that folder that you want

1502
03:23:16,027 --> 03:23:17,869
to version control, ideally some text.

1503
03:23:20,051 --> 03:23:22,153
And then you can turn this

1504
03:23:22,153 --> 03:23:23,815
directory into a Git repository.

1505
03:23:25,797 --> 03:23:29,140
And then you push it to

1506
03:23:29,140 --> 03:23:31,122
GitHub or GitLab if you're using that.

1507
03:23:31,122 --> 03:23:34,190
But for this, we will focus on GitHub.

1508
03:23:34,190 --> 03:23:41,820
and then you can share it there.

1509
03:23:44,283 --> 03:23:49,489
So the exercise offers

1510
03:23:50,651 --> 03:23:53,474
three different paths, only using

1511
03:23:53,474 --> 03:23:55,877
GitHub, the VS Code way and

1512
03:23:55,877 --> 03:23:57,259
with a command line.

1513
03:23:57,259 --> 03:23:59,242
The RStudio is currently

1514
03:23:59,242 --> 03:24:01,865
under construction.

1515
03:24:01,865 --> 03:24:03,167
So you're a bit on your

1516
03:24:03,167 --> 03:24:05,711
own if you wanted to try it with RStudio.

1517
03:24:05,711 --> 03:24:06,712
We are going to show,

1518
03:24:06,712 --> 03:24:08,335
after even the exercise, we're going

1519
03:24:08,335 --> 03:24:10,097
to show it with VS Code,

1520
03:24:10,097 --> 03:24:12,721
which is really, really quick.

1521
03:24:13,563 --> 03:24:14,925
And then maybe discuss a bit

1522
03:24:14,925 --> 03:24:16,507
how it would go on the command line.

1523
03:24:17,368 --> 03:24:19,932
But you're free to do it

1524
03:24:19,932 --> 03:24:21,915
whichever way you like.

1525
03:24:26,671 --> 03:24:27,713
All right.

1526
03:24:27,713 --> 03:24:28,834
Is there anything else or

1527
03:24:28,834 --> 03:24:31,118
should we just let loose?

1528
03:24:31,959 --> 03:24:35,064
No, I think that's about it.

1529
03:24:35,064 --> 03:24:37,147
There's 25 minutes scheduled

1530
03:24:37,147 --> 03:24:38,069
for this exercise.

1531
03:24:40,473 --> 03:24:43,818
So that would make it half past.

1532
03:24:45,300 --> 03:24:48,345
As always, the notes document

1533
03:24:48,345 --> 03:24:49,086
will stay open.

1534
03:24:49,086 --> 03:24:50,909
You're free to ask questions

1535
03:24:50,909 --> 03:24:54,194
in the notes document or go to

1536
03:24:54,194 --> 03:24:57,703
your other sources of possible help.

1537
03:25:00,230 --> 03:25:02,335
And yeah, we will see each

1538
03:25:02,335 --> 03:25:04,741
other again at half past.

1539
03:25:04,741 --> 03:25:05,503
So bye for now.

1540
03:49:05,967 --> 03:49:06,448
And we're back.

1541
03:49:08,210 --> 03:49:09,472
We're still working our way

1542
03:49:09,472 --> 03:49:12,776
through some of the questions, but yeah.

1543
03:49:21,707 --> 03:49:25,732
So you've now initialized a

1544
03:49:25,732 --> 03:49:27,795
repository in the folder, your

1545
03:49:27,795 --> 03:49:31,620
personal paper project, and pushed it to Git.

1546
03:49:32,461 --> 03:49:35,806
or some other place where

1547
03:49:35,806 --> 03:49:36,627
you wanted to push it.

1548
03:49:37,548 --> 03:49:39,511
Yeah, so we'll maybe do a

1549
03:49:39,511 --> 03:49:41,373
little bit of a demo, how

1550
03:49:41,373 --> 03:49:43,416
you would go about doing this in VS Code.

1551
03:49:49,143 --> 03:49:53,329
So I'll switch over to my VS Code window.

1552
03:49:54,631 --> 03:49:59,177
And I am here in a folder that has

1553
03:50:00,457 --> 03:50:02,140
two files, a license and a

1554
03:50:02,140 --> 03:50:06,488
README that I haven't been on Git at any point.

1555
03:50:09,374 --> 03:50:10,736
So I just made them up myself.

1556
03:50:11,678 --> 03:50:14,804
Now we go to the source control

1557
03:50:14,804 --> 03:50:20,194
and then we can either

1558
03:50:20,194 --> 03:50:23,828
initialize the repository and then set up the

1559
03:50:23,828 --> 03:50:25,431
Git connection, or we can

1560
03:50:25,431 --> 03:50:27,254
just directly publish to Git.

1561
03:50:28,776 --> 03:50:32,222
And then we need to, then

1562
03:50:32,222 --> 03:50:33,985
VS Code asks whether I want

1563
03:50:33,985 --> 03:50:36,289
to publish as a private repository

1564
03:50:36,289 --> 03:50:37,531
or as a public repository.

1565
03:50:41,077 --> 03:50:43,962
What would I, what should I select there?

1566
03:50:43,962 --> 03:50:45,465
[name], what do you think?

1567
03:50:45,465 --> 03:50:46,827
So it depends a little bit.

1568
03:50:46,827 --> 03:50:49,225
So if you

1569
03:50:49,225 --> 03:50:50,587
through the private repository,

1570
03:50:50,587 --> 03:50:52,770
then for now only you can see it.

1571
03:50:52,770 --> 03:50:55,173
But you can also give

1572
03:50:55,173 --> 03:50:56,234
other people access to it.

1573
03:50:56,234 --> 03:50:57,676
So you can still collaborate

1574
03:50:57,676 --> 03:50:58,197
with other people.

1575
03:50:59,398 --> 03:51:00,700
For a public repository, everybody

1576
03:51:00,700 --> 03:51:01,541
can see it immediately.

1577
03:51:01,541 --> 03:51:03,864
So if you have something

1578
03:51:03,864 --> 03:51:06,747
that you don't mind just

1579
03:51:06,747 --> 03:51:08,690
publishing, like sharing it with

1580
03:51:08,690 --> 03:51:12,355
anyone, then you can pick a public one.

1581
03:51:12,355 --> 03:51:14,157
And otherwise, it would probably

1582
03:51:14,157 --> 03:51:16,225
be better to go for private.

1583
03:51:16,225 --> 03:51:17,667
Well, there isn't anything in here,

1584
03:51:17,667 --> 03:51:22,071
so I think it's fine to put

1585
03:51:22,071 --> 03:51:23,433
it as a public repository.

1586
03:51:23,433 --> 03:51:25,415
I want both these files.

1587
03:51:27,537 --> 03:51:33,263
And then it's waiting.

1588
03:51:35,866 --> 03:51:36,807
Now it wants to commit.

1589
03:51:39,089 --> 03:51:39,870
Commit message.

1590
03:51:39,870 --> 03:51:43,414
I hate writing commit messages.

1591
03:51:47,933 --> 03:51:48,994
Metal commit is a good one.

1592
03:51:50,435 --> 03:51:51,196
Very classic.

1593
03:51:52,117 --> 03:51:52,397
Yes.

1594
03:52:10,793 --> 03:52:11,413
I used to be thinking

1595
03:52:11,413 --> 03:52:12,234
quite hard about that.

1596
03:52:14,055 --> 03:52:14,556
I don't know.

1597
03:52:16,898 --> 03:52:17,198
Okay.

1598
03:52:19,304 --> 03:52:24,393
So now I can even open it on GitHub.

1599
03:52:24,393 --> 03:52:25,595
Okay, so this creates now

1600
03:52:25,595 --> 03:52:27,999
a new repository on GitHub?

1601
03:52:27,999 --> 03:52:29,641
It creates a new repository

1602
03:52:29,641 --> 03:52:33,408
on GitHub with the name of the repository.

1603
03:52:34,850 --> 03:52:37,094
And it's got my license.

1604
03:52:37,094 --> 03:52:37,915
When did you pick that name?

1605
03:52:37,915 --> 03:52:39,538
Is that just the name of the folder?

1606
03:52:39,538 --> 03:52:39,678
Or?

1607
03:52:40,540 --> 03:52:40,800
Yes.

1608
03:52:43,124 --> 03:52:45,328
That was when I

1609
03:52:47,384 --> 03:52:50,727
there was a message asking, is this,

1610
03:52:50,727 --> 03:52:51,548
so it's the name of the

1611
03:52:51,548 --> 03:52:52,829
folder, and then it was asking

1612
03:52:52,829 --> 03:52:56,713
me whether this name was okay.

1613
03:52:57,594 --> 03:53:00,657
And it was checking, is that a valid name?

1614
03:53:00,657 --> 03:53:01,858
Is it taken?

1615
03:53:01,858 --> 03:53:04,121
And then it says, we suggest

1616
03:53:04,121 --> 03:53:06,042
this name, is it okay?

1617
03:53:06,042 --> 03:53:07,023
And then you could probably

1618
03:53:07,023 --> 03:53:16,733
also change that name, but I didn't.

1619
03:53:17,557 --> 03:53:19,940
And I guess it's possible that

1620
03:53:19,940 --> 03:53:21,302
that name is not allowed

1621
03:53:21,302 --> 03:53:22,423
because you already have a

1622
03:53:22,423 --> 03:53:24,906
repository with that name in your namespace.

1623
03:53:24,906 --> 03:53:26,248
Yeah, it might be.

1624
03:53:26,248 --> 03:53:27,870
So then it would probably give

1625
03:53:27,870 --> 03:53:30,453
an error or something.

1626
03:53:30,453 --> 03:53:32,095
I think it would actually

1627
03:53:32,095 --> 03:53:36,400
just make a suggestion of

1628
03:53:36,400 --> 03:53:38,002
a slightly different name.

1629
03:53:38,002 --> 03:53:38,322
Okay.

1630
03:53:40,785 --> 03:53:41,226
Yeah.

1631
03:53:41,226 --> 03:53:44,610
So it's got the two files here on Git.

1632
03:53:46,008 --> 03:53:46,929
Okay.

1633
03:53:46,929 --> 03:53:48,111
That's it.

1634
03:53:48,111 --> 03:53:50,014
Very good.

1635
03:53:53,921 --> 03:53:56,224
Well, that was easy then.

1636
03:53:56,224 --> 03:53:58,308
Yes, that is really, really easy.

1637
03:53:58,308 --> 03:54:00,451
It's not that much more work

1638
03:54:00,451 --> 03:54:02,194
on the command line, isn't it?

1639
03:54:02,194 --> 03:54:05,359
Well, I guess usually on the command line,

1640
03:54:05,359 --> 03:54:06,441
the command line does not

1641
03:54:06,441 --> 03:54:08,637
create a GitHub repository for you.

1642
03:54:08,637 --> 03:54:13,043
Yes, if I go back to the to the lesson,

1643
03:54:13,043 --> 03:54:14,465
and then we can use

1644
03:54:14,465 --> 03:54:16,667
the command line instructions for the exercise.

1645
03:54:20,352 --> 03:54:22,415
So you on on the command

1646
03:54:22,415 --> 03:54:25,879
line, you need to make you do

1647
03:54:25,879 --> 03:54:27,501
need to do get in it first, right?

1648
03:54:28,342 --> 03:54:28,663
Yes.

1649
03:54:28,663 --> 03:54:30,826
So that creates this dot git folder.

1650
03:54:32,848 --> 03:54:34,430
That that contains all of the history

1651
03:54:34,430 --> 03:54:35,612
and everything and sets all

1652
03:54:35,612 --> 03:54:38,084
of the metadata and then

1653
03:54:38,084 --> 03:54:41,267
I guess the dash B

1654
03:54:41,267 --> 03:54:44,209
main, usually it's probably gives

1655
03:54:44,209 --> 03:54:45,210
you a default branch.

1656
03:54:45,210 --> 03:54:46,752
And I think these days that is main.

1657
03:54:47,712 --> 03:54:48,994
In the olden times it was master.

1658
03:54:51,216 --> 03:54:53,057
But yeah, then you just add

1659
03:54:53,057 --> 03:54:56,921
your files as you are used to.

1660
03:54:56,921 --> 03:54:57,521
And then commit.

1661
03:54:58,502 --> 03:55:01,705
And then you've got a local Git repository.

1662
03:55:01,705 --> 03:55:04,507
And then that's where the

1663
03:55:04,507 --> 03:55:07,261
slightly more difficult

1664
03:55:07,261 --> 03:55:09,183
thing step begins for at

1665
03:55:09,183 --> 03:55:10,564
least from from my, from

1666
03:55:10,564 --> 03:55:12,346
my perspective, because you need

1667
03:55:12,346 --> 03:55:16,791
to create an empty repository on GitHub.

1668
03:55:16,791 --> 03:55:18,132
But GitHub gives you all

1669
03:55:18,132 --> 03:55:21,776
these tries to push creating

1670
03:55:21,776 --> 03:55:23,718
a readme and everything on you.

1671
03:55:23,718 --> 03:55:27,122
So you need to remember to

1672
03:55:27,122 --> 03:55:29,785
not to do not let make it add a readme.

1673
03:55:31,366 --> 03:55:32,427
Because otherwise, there's going

1674
03:55:32,427 --> 03:55:33,929
to be something in that repository.

1675
03:55:34,810 --> 03:55:34,990
Yes.

1676
03:55:37,535 --> 03:55:41,861
And then... But if that turns out,

1677
03:55:41,861 --> 03:55:43,904
like if you add a readme,

1678
03:55:43,904 --> 03:55:45,146
if you are convinced by GitHub

1679
03:55:45,146 --> 03:55:46,608
to add a readme, then that's

1680
03:55:46,608 --> 03:55:48,771
also not a huge problem.

1681
03:55:48,771 --> 03:55:50,814
Then it will just, when you

1682
03:55:50,814 --> 03:55:52,156
try to push to it, it will

1683
03:55:52,156 --> 03:55:53,938
just say, well, you have to

1684
03:55:53,938 --> 03:55:55,601
resolve all of these conflicts first.

1685
03:55:55,601 --> 03:55:56,542
So then you will have to

1686
03:55:56,542 --> 03:55:57,784
pull first and resolve the

1687
03:55:57,784 --> 03:56:01,529
conflicts and then you can push.

1688
03:56:01,529 --> 03:56:02,711
But yeah, if you want

1689
03:56:02,711 --> 03:56:04,534
to avoid jumping through those

1690
03:56:04,534 --> 03:56:06,076
hoops, then you just create

1691
03:56:06,076 --> 03:56:07,420
a completely empty one.

1692
03:56:07,420 --> 03:56:08,301
Yes.

1693
03:56:08,301 --> 03:56:09,083
Because some of the things

1694
03:56:09,083 --> 03:56:10,585
that GitHub suggests to you

1695
03:56:10,585 --> 03:56:11,467
are actually quite useful.

1696
03:56:11,467 --> 03:56:14,071
Like the default gitignore that

1697
03:56:14,071 --> 03:56:15,533
it has are often quite handy.

1698
03:56:18,318 --> 03:56:18,719
I like those.

1699
03:56:19,841 --> 03:56:23,747
Yeah.

1700
03:56:23,747 --> 03:56:26,552
So I think VS Code actually

1701
03:56:26,552 --> 03:56:30,098
does also have the option to

1702
03:56:30,098 --> 03:56:32,642
add a default gitignore.

1703
03:56:32,642 --> 03:56:32,702
Oh.

1704
03:56:34,218 --> 03:56:35,239
I'm not quite sure where it

1705
03:56:35,239 --> 03:56:36,921
is at the moment though.

1706
03:56:36,921 --> 03:56:41,847
So I'm not gonna try to find it on screen.

1707
03:56:43,269 --> 03:56:44,170
Yeah.

1708
03:56:44,170 --> 03:56:46,453
And then, but from the command line,

1709
03:56:46,453 --> 03:56:48,295
now that went to, if you

1710
03:56:48,295 --> 03:56:50,338
got a repository, then you have

1711
03:56:50,338 --> 03:56:57,366
this, you want the SSH version, right?

1712
03:56:57,366 --> 03:56:59,969
Because HTTPS.

1713
03:56:59,969 --> 03:57:02,292
uh so normally anymore yeah

1714
03:57:02,292 --> 03:57:04,094
normally you cannot like the

1715
03:57:04,094 --> 03:57:06,016
for security reasons the authentication

1716
03:57:07,298 --> 03:57:08,219
uh you cannot sort of

1717
03:57:08,219 --> 03:57:11,102
https password authenticate anymore

1718
03:57:11,102 --> 03:57:12,804
so you would need to have

1719
03:57:12,804 --> 03:57:15,608
set up ssh keys and then you

1720
03:57:15,608 --> 03:57:18,271
would need to use the ssh version

1721
03:57:18,271 --> 03:57:20,393
of the url to push to oh

1722
03:57:20,393 --> 03:57:21,895
yes that's one thing that vs

1723
03:57:21,895 --> 03:57:24,860
code does more or less automatically for you so

1724
03:57:24,860 --> 03:57:27,745
This didn't happen when we were showing,

1725
03:57:27,745 --> 03:57:31,792
but the first time you use VS Code,

1726
03:57:31,792 --> 03:57:33,875
you will get a pop-up

1727
03:57:34,777 --> 03:57:36,700
asking you to authenticate to GitHub.

1728
03:57:38,523 --> 03:57:41,007
And then it will save

1729
03:57:41,007 --> 03:57:45,655
your authentication and use

1730
03:57:45,655 --> 03:57:48,640
that to authenticate you towards GitHub.

1731
03:57:57,800 --> 03:57:59,303
So you don't even need to,

1732
03:57:59,303 --> 03:58:03,129
I don't think you even need to set up SSH keys.

1733
03:58:04,772 --> 03:58:06,896
Well, only, I guess earlier,

1734
03:58:06,896 --> 03:58:09,320
you could also use the SSH

1735
03:58:09,320 --> 03:58:11,063
version, but you didn't have to.

1736
03:58:11,063 --> 03:58:16,032
It also worked with the HTTPS for this one.

1737
03:58:20,801 --> 03:58:21,923
Yeah, I'm trying to think

1738
03:58:21,923 --> 03:58:23,213
whether there's a,

1739
03:58:23,213 --> 03:58:24,655
sort of a compelling reason

1740
03:58:24,655 --> 03:58:26,396
why one should recommend setting

1741
03:58:26,396 --> 03:58:30,120
up SSH keys anyway, if it works with HTTPS,

1742
03:58:30,120 --> 03:58:31,161
someday that you might run

1743
03:58:31,161 --> 03:58:32,183
into a situation where you would

1744
03:58:32,183 --> 03:58:34,945
need it, but then just do it then.

1745
03:58:34,945 --> 03:58:36,767
So yeah, do whatever.

1746
03:58:36,767 --> 03:58:41,052
I mean, it's not a big deal, right?

1747
03:58:41,052 --> 03:58:43,354
You create an SSH key and

1748
03:58:43,354 --> 03:58:46,558
then, I mean, there's instructions

1749
03:58:46,558 --> 03:58:48,580
in the install session

1750
03:58:50,095 --> 03:58:53,521
Yeah, there's instructions on

1751
03:58:53,521 --> 03:58:55,204
GitHub itself also that are,

1752
03:58:55,204 --> 03:58:56,386
I would say, quite comprehensive

1753
03:58:56,386 --> 03:58:57,969
that are useful.

1754
03:59:03,398 --> 03:59:03,659
Right.

1755
03:59:06,043 --> 03:59:08,708
Yeah, I think everything else just works.

1756
03:59:08,708 --> 03:59:09,589
As soon as you've set that

1757
03:59:09,589 --> 03:59:12,185
up, you just continue working in VS Code.

1758
03:59:12,185 --> 03:59:14,089
as you normally would or on

1759
03:59:14,089 --> 03:59:17,275
the terminal or whatever you're using.

1760
03:59:17,275 --> 03:59:18,919
And then you can just as not

1761
03:59:18,919 --> 03:59:23,408
as we saw with the other

1762
03:59:23,408 --> 03:59:24,830
ways where you can commit your

1763
03:59:24,830 --> 03:59:26,534
changes and push them.

1764
03:59:27,917 --> 03:59:29,620
But I think we will

1765
03:59:33,717 --> 03:59:38,622
discuss pushing and using

1766
03:59:38,622 --> 03:59:40,284
the remote repository more

1767
03:59:40,284 --> 03:59:43,367
in tomorrow, actually, in the

1768
03:59:43,367 --> 03:59:44,949
when we're working about when

1769
03:59:44,949 --> 03:59:46,810
we're talking about collaborative working.

1770
03:59:48,833 --> 03:59:50,474
Yeah, then it gets a

1771
03:59:50,474 --> 03:59:51,535
little bit more interesting when

1772
03:59:51,535 --> 03:59:52,877
you have to actually content

1773
03:59:52,877 --> 03:59:56,601
with other people also messing around in there.

1774
04:00:00,284 --> 04:00:00,705
Okay.

1775
04:00:02,547 --> 04:00:03,265
Well,

1776
04:00:03,265 --> 04:00:09,254
But, so there's a little

1777
04:00:09,254 --> 04:00:10,316
bit of discussion on the

1778
04:00:10,316 --> 04:00:12,178
lesson about remote repository, what

1779
04:00:12,178 --> 04:00:13,360
is a remote repository?

1780
04:00:16,044 --> 04:00:20,130
But I think, yeah, you can read that.

1781
04:00:20,130 --> 04:00:21,332
But I think is more

1782
04:00:21,332 --> 04:00:23,636
interesting is why would you

1783
04:00:23,636 --> 04:00:27,121
say you're working on something just yourself?

1784
04:00:27,121 --> 04:00:28,643
Why would you actually use

1785
04:00:28,643 --> 04:00:29,745
a remote repository?

1786
04:00:30,923 --> 04:00:33,247
So I guess there's a number of reasons.

1787
04:00:34,529 --> 04:00:37,874
So I always work in Git

1788
04:00:37,874 --> 04:00:41,279
whenever I work on any kind of text.

1789
04:00:41,279 --> 04:00:45,185
And then, well, A, it's useful to just,

1790
04:00:45,185 --> 04:00:46,087
for example, if I'm working

1791
04:00:46,087 --> 04:00:48,190
on different machines, then I can

1792
04:00:48,190 --> 04:00:49,912
use that to synchronize it

1793
04:00:49,912 --> 04:00:50,573
to different machines.

1794
04:00:52,296 --> 04:00:59,155
To have a backup is usually quite useful.

1795
04:00:59,155 --> 04:01:01,821
If one of those

1796
04:01:01,821 --> 04:01:04,326
aforementioned machines gets lost, then

1797
04:01:04,326 --> 04:01:06,551
not my entire work is gone.

1798
04:01:07,673 --> 04:01:12,183
Yeah, I think, and then just

1799
04:01:12,183 --> 04:01:13,646
if I at some point needed

1800
04:01:13,646 --> 04:01:16,793
to share with someone after all,

1801
04:01:18,241 --> 04:01:20,925
then it's right there and then it's easy.

1802
04:01:20,925 --> 04:01:22,587
And at least for my

1803
04:01:22,587 --> 04:01:25,010
work, that happens quite a lot that I

1804
04:01:25,010 --> 04:01:27,514
that at some point, I've

1805
04:01:27,514 --> 04:01:29,016
so I've been working on on

1806
04:01:29,016 --> 04:01:33,202
some on some piece of code for some time.

1807
04:01:33,202 --> 04:01:34,464
And at some point, somebody

1808
04:01:34,464 --> 04:01:36,266
else would find that useful.

1809
04:01:36,266 --> 04:01:37,808
So I just can, I can

1810
04:01:37,808 --> 04:01:38,730
just share the GitHub link with

1811
04:01:38,730 --> 04:01:39,330
them and they have it.

1812
04:01:40,432 --> 04:01:42,936
And they also have all of

1813
04:01:42,936 --> 04:01:44,378
the sort of metadata that is

1814
04:01:44,378 --> 04:01:46,881
in that GitHub repository to

1815
04:01:47,755 --> 04:01:49,940
uh understand sort of the history

1816
04:01:49,940 --> 04:01:53,266
and how things came to be yeah i think

1817
04:01:53,266 --> 04:01:56,092
for me the the most often

1818
04:01:56,092 --> 04:01:57,916
the reason uh why i put

1819
04:01:57,916 --> 04:02:00,381
something on on github or gitlab

1820
04:02:00,381 --> 04:02:02,666
or wherever is because i

1821
04:02:02,666 --> 04:02:05,086
work on different computers

1822
04:02:05,086 --> 04:02:08,991
So I work in the office on

1823
04:02:08,991 --> 04:02:10,393
a computer and I work on

1824
04:02:10,393 --> 04:02:12,055
a different computer at home.

1825
04:02:12,055 --> 04:02:13,898
And when I'm working remotely,

1826
04:02:13,898 --> 04:02:17,362
sometimes I even have to use

1827
04:02:17,362 --> 04:02:19,045
my own private computer for some things.

1828
04:02:21,528 --> 04:02:25,914
And that is very convenient.

1829
04:02:25,914 --> 04:02:27,236
It can get a bit confusing

1830
04:02:27,236 --> 04:02:31,161
because you can maneuver yourself into...

1831
04:02:32,086 --> 04:02:33,688
into situations where you've

1832
04:02:33,688 --> 04:02:36,530
got your remote mounted a repository,

1833
04:02:36,530 --> 04:02:39,833
and a folder from a different computer

1834
04:02:39,833 --> 04:02:41,315
that has the repository and

1835
04:02:41,315 --> 04:02:43,577
you have your own local repository copy.

1836
04:02:44,758 --> 04:02:47,241
Like it's confusing to try to avoid that.

1837
04:02:48,222 --> 04:02:50,284
Yeah, I pretty much never

1838
04:02:50,284 --> 04:02:51,965
remote mount anything anymore.

1839
04:02:56,590 --> 04:02:59,072
Yeah, so one thing maybe that's also

1840
04:03:00,470 --> 04:03:01,612
might be interesting to mention is

1841
04:03:01,612 --> 04:03:03,294
that so if you're working, for example,

1842
04:03:03,294 --> 04:03:06,679
on our HPC machines, then you

1843
04:03:06,679 --> 04:03:08,241
are at some point also working

1844
04:03:08,241 --> 04:03:10,644
on a different machine.

1845
04:03:10,644 --> 04:03:12,366
And you might sometimes also

1846
04:03:12,366 --> 04:03:14,669
want to remote mount something on that machine.

1847
04:03:16,051 --> 04:03:18,375
Or you can use Git to synchronize things.

1848
04:03:18,375 --> 04:03:22,060
So there's different ways of

1849
04:03:22,060 --> 04:03:27,507
doing this, again, in whatever works for you.

1850
04:03:28,988 --> 04:03:30,812
I tend to just use Git

1851
04:03:30,812 --> 04:03:32,555
and loan stuff around.

1852
04:03:34,198 --> 04:03:34,359
Yeah.

1853
04:03:36,242 --> 04:03:37,605
Yeah.

1854
04:03:37,605 --> 04:03:40,711
One more thing that's really, I

1855
04:03:40,711 --> 04:03:42,635
think a lot of my older

1856
04:03:42,635 --> 04:03:45,100
projects, I don't have them

1857
04:03:45,100 --> 04:03:47,425
anymore locally, but they are

1858
04:03:47,425 --> 04:03:50,352
still on Git somewhere, on GitHub.

1859
04:03:50,352 --> 04:03:53,397
So if I ever have this time

1860
04:03:53,397 --> 04:03:56,302
to pick them up again, they'll be there.

1861
04:03:56,302 --> 04:03:57,584
And I know I've got that

1862
04:03:57,584 --> 04:04:02,252
sort of safety net that it's

1863
04:04:02,252 --> 04:04:03,013
not going to be lost.

1864
04:04:04,315 --> 04:04:04,976
Yeah.

1865
04:04:04,976 --> 04:04:05,277
Yeah.

1866
04:04:05,277 --> 04:04:06,679
If you just kept them on a local drive

1867
04:04:06,679 --> 04:04:08,082
and then use at some point

1868
04:04:08,082 --> 04:04:09,684
have a new machine or something,

1869
04:04:09,684 --> 04:04:12,910
then you might lose track of things.

1870
04:04:12,910 --> 04:04:13,170
Yeah.

1871
04:04:15,293 --> 04:04:19,899
Right, so maybe we should

1872
04:04:19,899 --> 04:04:22,964
be heading into the break a bit earlier.

1873
04:04:23,945 --> 04:04:25,227
There's maybe one more thing

1874
04:04:26,048 --> 04:04:28,331
to discuss the last step or

1875
04:04:28,331 --> 04:04:30,735
the last part there on the lesson plan.

1876
04:04:31,536 --> 04:04:32,036
True, yes.

1877
04:04:32,938 --> 04:04:35,121
So the question is, is

1878
04:04:35,121 --> 04:04:36,743
putting software on GitHub

1879
04:04:36,743 --> 04:04:38,045
or somewhere publishing?

1880
04:04:39,587 --> 04:04:41,790
Well, I guess technically it is public.

1881
04:04:42,884 --> 04:04:44,526
If it's a public repository, yes.

1882
04:04:45,387 --> 04:04:49,191
Publish does not mean findable in

1883
04:04:49,191 --> 04:04:49,932
a lot of cases.

1884
04:04:50,733 --> 04:04:53,376
It also goes for other locations

1885
04:04:53,376 --> 04:04:55,258
where you traditionally publish

1886
04:04:55,258 --> 04:04:57,740
things, but yes.

1887
04:04:59,062 --> 04:05:00,543
So it is not fair in

1888
04:05:00,543 --> 04:05:03,266
the fair science sense.

1889
04:05:05,108 --> 04:05:06,049
For that you might want

1890
04:05:06,049 --> 04:05:08,956
to do some additional things?

1891
04:05:08,956 --> 04:05:10,998
especially for the science

1892
04:05:10,998 --> 04:05:13,120
thing, citability is maybe something

1893
04:05:13,120 --> 04:05:14,001
that is useful.

1894
04:05:15,243 --> 04:05:16,264
Well, that's not just software,

1895
04:05:16,264 --> 04:05:17,866
but also data, like citability

1896
04:05:17,866 --> 04:05:19,507
is really useful for lots

1897
04:05:19,507 --> 04:05:22,591
of kinds of different kinds of information.

1898
04:05:22,591 --> 04:05:24,312
And for that, there's

1899
04:05:24,312 --> 04:05:25,554
different services that you can use.

1900
04:05:26,775 --> 04:05:27,236
Yeah.

1901
04:05:28,257 --> 04:05:30,059
I've only ever used Zenodo,

1902
04:05:30,059 --> 04:05:31,881
but- Yeah, me too.

1903
04:05:31,881 --> 04:05:33,142
I hear there are similar

1904
04:05:33,142 --> 04:05:38,521
services that you can use.

1905
04:05:38,521 --> 04:05:39,322
Yeah.

1906
04:05:39,322 --> 04:05:44,567
But yeah, so technically, it's publicing,

1907
04:05:44,567 --> 04:05:46,749
but in practice, it is only

1908
04:05:46,749 --> 04:05:48,410
the first step to actually

1909
04:05:48,410 --> 04:05:49,511
getting it published.

1910
04:05:49,511 --> 04:05:53,355
And because it doesn't make

1911
04:05:53,355 --> 04:05:57,298
sense if you publish it, and

1912
04:05:57,298 --> 04:05:58,119
no one can find it.

1913
04:06:02,904 --> 04:06:05,406
So for that, there are other

1914
04:06:07,478 --> 04:06:08,879
And since the search engines

1915
04:06:08,879 --> 04:06:10,241
are getting worse and worse these days,

1916
04:06:11,482 --> 04:06:14,605
and the AI doesn't necessarily

1917
04:06:14,605 --> 04:06:16,367
know about your stuff either.

1918
04:06:16,367 --> 04:06:16,648
Yes.

1919
04:06:20,992 --> 04:06:25,777
With that said, I think we

1920
04:06:25,777 --> 04:06:29,321
have about 10 minutes break now.

1921
04:06:29,321 --> 04:06:31,343
And then after that, we will

1922
04:06:32,825 --> 04:06:34,326
discuss a bit more about how

1923
04:06:34,326 --> 04:06:36,571
we actually use Git.

1924
04:06:36,571 --> 04:06:40,476
and what are good practices,

1925
04:06:40,476 --> 04:06:42,439
good enough practices, what are

1926
04:06:42,439 --> 04:06:43,781
maybe not so good ideas.

1927
04:06:46,484 --> 04:06:46,705
Yeah.

1928
04:06:50,289 --> 04:06:51,952
We'll also, if there's any,

1929
04:06:51,952 --> 04:06:53,073
we'll pick out some questions

1930
04:06:53,073 --> 04:06:57,359
maybe to discuss in some more detail.

1931
04:06:57,359 --> 04:06:58,561
And yeah, if we have

1932
04:06:58,561 --> 04:07:02,666
not extensively replied to all

1933
04:07:02,666 --> 04:07:06,291
of them, then we'll catch up on that.

1934
04:07:07,604 --> 04:07:12,794
Okay, so we would go into the break now,

1935
04:07:12,794 --> 04:07:15,038
and break time will stop

1936
04:07:15,038 --> 04:07:21,771
at two minutes before the hour, so at 58.

1937
04:07:24,416 --> 04:07:29,325
[name], can you start the break?

1938
04:17:26,123 --> 04:17:28,527
All right, welcome back after the break.

1939
04:17:28,527 --> 04:17:34,517
We are now on the last bit of today's date.

1940
04:17:35,578 --> 04:17:38,523
And we will maybe do a

1941
04:17:38,523 --> 04:17:43,491
bit of a more discussion like thing about what

1942
04:17:44,365 --> 04:17:45,386
what to do and what not

1943
04:17:45,386 --> 04:17:47,248
to do, what are good practices.

1944
04:17:47,248 --> 04:17:51,193
So we will first look

1945
04:17:51,193 --> 04:17:53,756
at the practical advice.

1946
04:17:53,756 --> 04:17:55,198
If you go back to the

1947
04:17:57,621 --> 04:17:59,943
schedule, you can click on the

1948
04:17:59,943 --> 04:18:02,847
link as I do now, and then

1949
04:18:02,847 --> 04:18:08,213
it will open the current lesson.

1950
04:18:09,273 --> 04:18:12,381
And then, yeah, here's a few

1951
04:18:12,381 --> 04:18:14,347
topics that we think might

1952
04:18:14,347 --> 04:18:15,369
be useful to discuss.

1953
04:18:16,793 --> 04:18:21,446
The first one is if you're

1954
04:18:21,446 --> 04:18:23,752
working on the command line

1955
04:18:23,752 --> 04:18:24,853
to use Git status.

1956
04:18:27,096 --> 04:18:30,119
So maybe I'd like to

1957
04:18:30,119 --> 04:18:33,582
talk about command line versus

1958
04:18:33,582 --> 04:18:38,528
more graphic user interface ways first.

1959
04:18:38,528 --> 04:18:39,669
[name], what do you like

1960
04:18:39,669 --> 04:18:41,511
better, command line or UI?

1961
04:18:41,511 --> 04:18:45,095
I don't use any IDEs.

1962
04:18:45,095 --> 04:18:46,576
I use just command line.

1963
04:18:46,576 --> 04:18:51,798
I use Vim as a text editor, and I

1964
04:18:51,798 --> 04:18:54,662
kind of when I started

1965
04:18:55,924 --> 04:18:57,366
writing things on the computer

1966
04:18:57,366 --> 04:19:00,311
about 20 years ago or so I

1967
04:19:00,311 --> 04:19:02,374
started in an IDE actually and I found

1968
04:19:02,374 --> 04:19:03,756
that sort of frustrating because

1969
04:19:03,756 --> 04:19:04,957
it I always felt it was

1970
04:19:04,957 --> 04:19:06,680
hiding things from me of like

1971
04:19:06,680 --> 04:19:08,442
about it wasn't really showing me

1972
04:19:08,442 --> 04:19:10,485
how what was going on I

1973
04:19:10,485 --> 04:19:12,929
found that annoying and then I

1974
04:19:12,929 --> 04:19:15,733
found it a lot more uh

1975
04:19:15,733 --> 04:19:17,347
yeah easier to understand what what

1976
04:19:17,347 --> 04:19:18,589
things are actually going on,

1977
04:19:18,589 --> 04:19:21,632
and there's just terminal.

1978
04:19:21,632 --> 04:19:22,754
So how do you not lose

1979
04:19:22,754 --> 04:19:25,858
track of where you are on the command line?

1980
04:19:25,858 --> 04:19:27,300
Well, it's similar to when you

1981
04:19:27,300 --> 04:19:30,203
just sort of get specific, but

1982
04:19:30,203 --> 04:19:32,106
you just use a lot of LS

1983
04:19:32,106 --> 04:19:35,210
and PWD in order to know where

1984
04:19:35,210 --> 04:19:36,171
you are, and then you will

1985
04:19:36,972 --> 04:19:38,213
get some sort of sense of

1986
04:19:39,255 --> 04:19:40,777
where you currently are.

1987
04:19:40,777 --> 04:19:42,098
And yeah, then just use good

1988
04:19:42,098 --> 04:19:43,260
status a lot in the same

1989
04:19:43,260 --> 04:19:45,730
way to remind yourself.

1990
04:19:45,730 --> 04:19:46,592
Yeah, I guess.

1991
04:19:48,876 --> 04:19:50,259
Git status is the one command

1992
04:19:50,259 --> 04:19:52,242
that I use most often.

1993
04:19:53,264 --> 04:19:55,509
When I start working on a Git repo

1994
04:19:55,509 --> 04:19:59,436
or I open something, I start

1995
04:19:59,436 --> 04:20:00,418
by typing git status.

1996
04:20:01,340 --> 04:20:03,343
And then I remember something

1997
04:20:03,343 --> 04:20:04,385
might have changed.

1998
04:20:04,385 --> 04:20:05,728
So I go git fetch and then

1999
04:20:05,728 --> 04:20:06,810
I do git status again.

2000
04:20:07,718 --> 04:20:08,539
Yeah.

2001
04:20:08,539 --> 04:20:10,742
But so also, because I'm

2002
04:20:10,742 --> 04:20:12,245
mostly working on the command line,

2003
04:20:12,245 --> 04:20:13,527
I have the command line configured

2004
04:20:13,527 --> 04:20:15,189
in a way that is helpful for me.

2005
04:20:15,189 --> 04:20:16,872
So I think someone already

2006
04:20:16,872 --> 04:20:18,774
mentioned in the notes, I have

2007
04:20:18,774 --> 04:20:21,839
like my like shell prompt

2008
04:20:22,860 --> 04:20:24,543
already gives me information about

2009
04:20:24,543 --> 04:20:26,185
my the status of my Git

2010
04:20:26,185 --> 04:20:27,307
repository that I'm currently in.

2011
04:20:28,389 --> 04:20:31,613
And the editor does as well,

2012
04:20:32,495 --> 04:20:33,807
similar to an IDE.

2013
04:20:33,807 --> 04:20:36,289
And so then you sort of

2014
04:20:36,289 --> 04:20:37,450
use it maybe a little bit less,

2015
04:20:37,450 --> 04:20:39,372
but still you do it all of the time.

2016
04:20:48,220 --> 04:20:48,540
Yeah.

2017
04:20:48,540 --> 04:20:48,881
Right.

2018
04:20:50,142 --> 04:20:51,883
Then commit messages.

2019
04:20:53,184 --> 04:20:55,386
I already said at some point,

2020
04:20:55,386 --> 04:20:58,429
I think I hate writing commit messages.

2021
04:20:58,429 --> 04:21:01,572
I think in a sense it's

2022
04:21:01,572 --> 04:21:04,081
similar to writing comments.

2023
04:21:04,081 --> 04:21:06,384
Except I like commit messages

2024
04:21:06,384 --> 04:21:07,306
kind of more because

2025
04:21:07,306 --> 04:21:09,909
comments, because everybody doesn't

2026
04:21:09,909 --> 04:21:11,932
really enjoy writing them, they

2027
04:21:11,932 --> 04:21:13,855
then get stale because they

2028
04:21:13,855 --> 04:21:15,096
then describe a state of the

2029
04:21:15,096 --> 04:21:18,201
code that is not actually there anymore.

2030
04:21:18,201 --> 04:21:19,443
But the nice thing about

2031
04:21:19,443 --> 04:21:20,985
commit messages is that that's not true.

2032
04:21:20,985 --> 04:21:23,148
They are only specific to that very commit.

2033
04:21:23,148 --> 04:21:25,952
So I actually like them a lot more.

2034
04:21:25,952 --> 04:21:29,336
And, well, I don't think I

2035
04:21:29,336 --> 04:21:32,701
spend a long time thinking

2036
04:21:32,701 --> 04:21:34,355
about commit messages.

2037
04:21:34,355 --> 04:21:37,778
Yeah, I would say I

2038
04:21:37,778 --> 04:21:40,280
write relatively like small commits

2039
04:21:40,280 --> 04:21:41,661
and then also relatively

2040
04:21:41,661 --> 04:21:42,602
short commit messages.

2041
04:21:43,983 --> 04:21:48,127
And yeah, I don't know.

2042
04:21:48,127 --> 04:21:49,408
What do you do?

2043
04:21:49,408 --> 04:21:52,670
Well, what I do is mostly

2044
04:21:52,670 --> 04:21:54,232
I commit small things.

2045
04:21:54,232 --> 04:21:54,512
Yes.

2046
04:21:54,512 --> 04:21:55,873
So and then the commit.

2047
04:21:58,335 --> 04:22:01,378
Usually I do things in a branch.

2048
04:22:01,378 --> 04:22:03,940
So the branch name tells what's going on.

2049
04:22:05,152 --> 04:22:06,974
and then the commit is a

2050
04:22:09,598 --> 04:22:11,400
lot of the time what i do is

2051
04:22:11,400 --> 04:22:13,783
i commit at the end when at

2052
04:22:13,783 --> 04:22:15,265
the end of the day like um

2053
04:22:17,548 --> 04:22:19,611
and then i just say status

2054
04:22:19,611 --> 04:22:23,556
and the date just really a

2055
04:22:23,556 --> 04:22:25,498
null commit message right it

2056
04:22:25,498 --> 04:22:28,022
doesn't really tell you anything

2057
04:22:28,022 --> 04:22:29,317
about the commit

2058
04:22:29,317 --> 04:22:31,579
I'm not sure about that.

2059
04:22:31,579 --> 04:22:33,922
I think the last thing I did.

2060
04:22:33,922 --> 04:22:36,224
If I read that, I would think, okay,

2061
04:22:36,224 --> 04:22:38,166
this is sort of, this

2062
04:22:38,166 --> 04:22:39,728
might be broken, which is

2063
04:22:39,728 --> 04:22:41,870
already something that's good to know.

2064
04:22:41,870 --> 04:22:42,611
I know this is sort of

2065
04:22:42,611 --> 04:22:45,514
not a complete, this is sort

2066
04:22:45,514 --> 04:22:46,515
of an in-between state.

2067
04:22:47,336 --> 04:22:48,117
And I think that's a

2068
04:22:48,117 --> 04:22:49,078
useful information to have.

2069
04:22:49,078 --> 04:22:50,980
So it's better than this

2070
04:22:50,980 --> 04:22:51,701
is a commit message.

2071
04:22:52,842 --> 04:22:53,823
Yes.

2072
04:22:53,823 --> 04:22:54,342
Okay.

2073
04:22:54,342 --> 04:22:55,083
True.

2074
04:22:55,083 --> 04:22:56,005
True in that way.

2075
04:22:56,005 --> 04:22:57,948
But yeah, I do write very,

2076
04:22:57,948 --> 04:22:59,631
very, very short commit messages.

2077
04:23:00,753 --> 04:23:03,057
But I try to keep branches small.

2078
04:23:04,699 --> 04:23:08,125
And then I do write, when

2079
04:23:08,125 --> 04:23:09,808
I do a merge commit, then

2080
04:23:09,808 --> 04:23:11,250
I write a longer description of

2081
04:23:11,250 --> 04:23:12,993
what's going on and why.

2082
04:23:16,178 --> 04:23:18,693
Yeah, I think that's also similar.

2083
04:23:18,693 --> 04:23:20,536
working in branches, and then

2084
04:23:21,718 --> 04:23:24,824
like a sort of description or justification

2085
04:23:24,824 --> 04:23:26,567
for that branch is then

2086
04:23:26,567 --> 04:23:30,194
more deserves a little bit

2087
04:23:30,194 --> 04:23:32,818
more thought than just some any

2088
04:23:32,818 --> 04:23:34,842
of hundreds of thousands commits your writing.

2089
04:23:34,842 --> 04:23:36,946
Yeah, I mean, sometimes I put

2090
04:23:38,609 --> 04:23:41,654
in a commit message where I think it is broken.

2091
04:23:41,654 --> 04:23:42,135
Like,

2092
04:23:44,765 --> 04:23:48,049
still not doing this or this or whatever

2093
04:23:48,049 --> 04:23:50,652
so i know where to pick it up back

2094
04:23:50,652 --> 04:23:52,314
when when i'm getting back to it

2095
04:23:53,815 --> 04:23:57,459
but yeah mostly i work i

2096
04:23:57,459 --> 04:24:01,864
don't work with lots of people

2097
04:24:01,864 --> 04:24:04,167
on the same on the same branch

2098
04:24:04,167 --> 04:24:05,248
on the same topic so it's

2099
04:24:06,169 --> 04:24:08,792
mostly internal yeah to remind

2100
04:24:08,792 --> 04:24:13,978
me and that's yeah but

2101
04:24:19,375 --> 04:24:21,598
I think commit messages get

2102
04:24:21,598 --> 04:24:25,624
more important if you're working,

2103
04:24:25,624 --> 04:24:26,706
the more people you're working

2104
04:24:26,706 --> 04:24:28,108
with, the more important the

2105
04:24:28,108 --> 04:24:30,010
commit messages get.

2106
04:24:30,010 --> 04:24:30,191
Yes.

2107
04:24:31,953 --> 04:24:36,199
And also the less you know

2108
04:24:36,199 --> 04:24:37,802
the people that you're working with.

2109
04:24:37,802 --> 04:24:39,704
If you're in a huge project where you,

2110
04:24:39,704 --> 04:24:40,465
if you're just working with

2111
04:24:40,465 --> 04:24:41,427
one other person and you know

2112
04:24:41,427 --> 04:24:42,689
them really well and you know

2113
04:24:42,689 --> 04:24:45,312
how they sort of think about commit messages,

2114
04:24:45,312 --> 04:24:48,134
then you can sort of infer more.

2115
04:24:48,134 --> 04:24:49,155
And if you know these people

2116
04:24:49,155 --> 04:24:51,798
not at all, then that's more difficult.

2117
04:24:51,798 --> 04:24:51,918
Yeah.

2118
04:24:51,918 --> 04:24:55,361
But one really, really important

2119
04:24:55,361 --> 04:24:59,885
thing is the last advice.

2120
04:25:00,805 --> 04:25:01,886
It's better to make any

2121
04:25:01,886 --> 04:25:03,548
commit than no commit.

2122
04:25:05,049 --> 04:25:07,151
And if writing the commit

2123
04:25:07,151 --> 04:25:09,353
message means that you're not

2124
04:25:09,353 --> 04:25:12,155
going to commit it because it's

2125
04:25:13,176 --> 04:25:15,218
too much effort to write the commit message,

2126
04:25:17,307 --> 04:25:19,469
then this is a better

2127
04:25:19,469 --> 04:25:22,632
commit message than not committing at all.

2128
04:25:23,573 --> 04:25:24,373
Yes.

2129
04:25:24,373 --> 04:25:26,055
And also, well, if stuff

2130
04:25:26,055 --> 04:25:28,037
breaks, then we can also look

2131
04:25:28,037 --> 04:25:29,058
at the commits that are coming

2132
04:25:29,058 --> 04:25:31,740
before and after and at the context.

2133
04:25:31,740 --> 04:25:36,104
So even, yeah, not all is

2134
04:25:36,104 --> 04:25:38,346
lost if you don't have to.

2135
04:25:38,346 --> 04:25:39,267
The important thing is that

2136
04:25:39,267 --> 04:25:40,829
you commit your stuff.

2137
04:25:40,829 --> 04:25:42,210
Yes.

2138
04:25:42,210 --> 04:25:42,530
And often.

2139
04:25:44,092 --> 04:25:44,492
Yes.

2140
04:25:44,492 --> 04:25:46,265
How often do you commit?

2141
04:25:46,265 --> 04:25:48,869
So I don't do the end of the day thing.

2142
04:25:48,869 --> 04:25:50,772
I currently am thinking of repository

2143
04:25:50,772 --> 04:25:51,494
that I'm working on that

2144
04:25:51,494 --> 04:25:52,595
has uncommitted things in it

2145
04:25:52,595 --> 04:25:54,018
because I am working on it.

2146
04:25:54,018 --> 04:25:55,540
So sometimes I still have

2147
04:25:55,540 --> 04:25:57,603
like a virtual terminal session

2148
04:25:57,603 --> 04:25:59,326
floating around on a remote

2149
04:25:59,326 --> 04:26:02,311
computer somewhere that I need to get back to.

2150
04:26:02,311 --> 04:26:07,119
And so sort of when I finish that thought,

2151
04:26:07,119 --> 04:26:09,022
I commit what's going on and

2152
04:26:09,022 --> 04:26:11,987
then I close everything and

2153
04:26:11,987 --> 04:26:13,332
sort of start again.

2154
04:26:13,332 --> 04:26:15,394
Um, that's normally how I do it.

2155
04:26:15,394 --> 04:26:17,036
I'm not sure whether that is, um,

2156
04:26:17,857 --> 04:26:20,099
kind of ideal or even recommendable,

2157
04:26:20,099 --> 04:26:23,063
but I guess, uh, I, uh,

2158
04:26:23,063 --> 04:26:24,784
I'm still sort of kind of

2159
04:26:24,784 --> 04:26:27,007
attached to, to, um, at

2160
04:26:27,007 --> 04:26:31,692
least finishing a thought in order to, yeah.

2161
04:26:31,692 --> 04:26:33,614
So, uh, yeah, I, I, I have to say

2162
04:26:33,614 --> 04:26:34,455
that I don't quite follow

2163
04:26:34,455 --> 04:26:35,476
this advice, but maybe I should.

2164
04:26:38,960 --> 04:26:39,380
Quite often.

2165
04:26:41,803 --> 04:26:42,391
And.

2166
04:26:42,391 --> 04:26:44,573
the way my life is at the moment, it's,

2167
04:26:44,573 --> 04:26:46,536
I can't finish the thought before

2168
04:26:46,536 --> 04:26:49,499
I have to do something else.

2169
04:26:49,499 --> 04:26:51,641
Yeah.

2170
04:26:51,641 --> 04:26:54,524
So, um, and leaving it floating around,

2171
04:26:54,524 --> 04:26:57,047
I know that I will not get

2172
04:26:57,047 --> 04:27:00,571
back to it and still have

2173
04:27:00,571 --> 04:27:03,294
that same thought and know where I've been.

2174
04:27:03,294 --> 04:27:05,717
So it's safer to commit it.

2175
04:27:08,560 --> 04:27:08,720
Yeah.

2176
04:27:08,720 --> 04:27:09,421
That's why it's nice.

2177
04:27:09,421 --> 04:27:11,183
So these, these, that, uh,

2178
04:27:12,074 --> 04:27:14,877
sort of the terminal state

2179
04:27:14,877 --> 04:27:16,758
that I'm working in is preserved.

2180
04:27:16,758 --> 04:27:19,561
So I'm, I can, it is

2181
04:27:19,561 --> 04:27:20,542
relatively easy for me to

2182
04:27:20,542 --> 04:27:22,643
return to something that I left.

2183
04:27:24,405 --> 04:27:26,427
But yeah.

2184
04:27:36,336 --> 04:27:37,817
What level of branching

2185
04:27:37,817 --> 04:27:41,140
complexity is necessary for each project?

2186
04:27:41,140 --> 04:27:41,220
Hmm.

2187
04:27:43,057 --> 04:27:44,179
That really depends on the

2188
04:27:45,821 --> 04:27:48,465
people involved with it, I would say.

2189
04:27:48,465 --> 04:27:49,927
What do they like?

2190
04:27:49,927 --> 04:27:51,649
What's the most complicated

2191
04:27:51,649 --> 04:27:53,191
branching structure you've ever seen?

2192
04:27:56,135 --> 04:27:59,780
So I've worked on relatively

2193
04:27:59,780 --> 04:28:02,084
few large and really complicated projects.

2194
04:28:02,084 --> 04:28:04,507
And most of them are really, I would say,

2195
04:28:04,507 --> 04:28:06,390
quite good about the way they

2196
04:28:06,390 --> 04:28:09,414
do it is you make a new branch for a feature.

2197
04:28:09,414 --> 04:28:11,317
And I'm not sure how

2198
04:28:11,317 --> 04:28:13,263
much we discussed this, but there's

2199
04:28:13,263 --> 04:28:18,309
when you merge a branch back to main,

2200
04:28:18,309 --> 04:28:20,070
you can just sort of do

2201
04:28:20,070 --> 04:28:22,133
this via like a merge commit,

2202
04:28:22,133 --> 04:28:24,816
or you can also rebase.

2203
04:28:25,777 --> 04:28:27,318
So rebasing means you sort

2204
04:28:27,318 --> 04:28:29,281
of, you take that branch and you

2205
04:28:30,202 --> 04:28:31,964
cut it off and then you put it back on top.

2206
04:28:32,825 --> 04:28:35,287
And this way you can have essentially

2207
04:28:35,287 --> 04:28:38,250
that in that tree that you're building,

2208
04:28:38,250 --> 04:28:39,592
the trunk just gets ever

2209
04:28:39,592 --> 04:28:40,733
longer and the sort of more

2210
04:28:40,733 --> 04:28:42,676
recent branches are all at the top.

2211
04:28:42,676 --> 04:28:43,757
And this way you have a

2212
04:28:43,757 --> 04:28:48,083
relatively sort of tidy history in a sense.

2213
04:28:48,083 --> 04:28:50,486
And the, the most of the projects

2214
04:28:50,486 --> 04:28:51,727
that I've worked were involved

2215
04:28:51,727 --> 04:28:54,571
with in any way kind of followed that, uh,

2216
04:28:54,571 --> 04:28:57,014
that rough idea that, um,

2217
04:28:57,014 --> 04:28:58,436
that you always rebase before

2218
04:28:58,436 --> 04:29:00,999
you merge a feature branch back into main.

2219
04:29:02,020 --> 04:29:04,483
Um, yeah.

2220
04:29:04,483 --> 04:29:04,864
How about you?

2221
04:29:06,466 --> 04:29:06,726
Oh.

2222
04:29:09,558 --> 04:29:10,219
Nothing.

2223
04:29:10,219 --> 04:29:14,307
I mean, like the usual, you branch

2224
04:29:14,307 --> 04:29:15,930
and then you merge and then

2225
04:29:18,514 --> 04:29:19,677
the main moves forward.

2226
04:29:24,165 --> 04:29:26,409
I don't think we do much rebasing.

2227
04:29:29,034 --> 04:29:31,192
Yeah, rebasing, it's sort of

2228
04:29:31,192 --> 04:29:33,396
It is a little bit of

2229
04:29:33,396 --> 04:29:36,962
a hassle in the beginning, or it

2230
04:29:36,962 --> 04:29:38,284
can be when you have to do it.

2231
04:29:40,167 --> 04:29:41,610
But if you then have to

2232
04:29:41,610 --> 04:29:43,032
at some point return and

2233
04:29:43,032 --> 04:29:44,094
dig through the history, then

2234
04:29:44,094 --> 04:29:46,238
you can be rewarded for doing that.

2235
04:29:48,422 --> 04:29:49,323
And if you do it

2236
04:29:49,323 --> 04:29:50,565
consequently from the beginning, then

2237
04:29:50,565 --> 04:29:51,647
it's also easier.

2238
04:29:52,792 --> 04:29:57,419
Yeah, maybe we can have a few more people,

2239
04:29:57,419 --> 04:29:59,943
a few more opinions from

2240
04:29:59,943 --> 04:30:02,546
a few more seasoned people.

2241
04:30:02,546 --> 04:30:05,611
So I don't know, [name],

2242
04:30:05,611 --> 04:30:11,560
would you maybe join us or [name]?

2243
04:30:11,560 --> 04:30:12,041
Yes.

2244
04:30:13,242 --> 04:30:13,863
Hello.

2245
04:30:13,863 --> 04:30:14,344
Hello.

2246
04:30:15,151 --> 04:30:19,238
Can you hear or see me out there?

2247
04:30:19,238 --> 04:30:21,281
I can see you in here.

2248
04:30:22,323 --> 04:30:26,349
I'm losing my voice, but... Yeah.

2249
04:30:28,472 --> 04:30:31,618
So... Yeah.

2250
04:30:31,618 --> 04:30:32,880
You've been in this business

2251
04:30:32,880 --> 04:30:36,345
much longer, I think, at least.

2252
04:30:36,345 --> 04:30:36,806
Maybe.

2253
04:30:38,088 --> 04:30:39,871
No, but anyway, yeah.

2254
04:30:39,871 --> 04:30:42,475
It's good to get more thoughts about stuff.

2255
04:30:44,159 --> 04:30:45,805
What was the most

2256
04:30:45,805 --> 04:30:47,592
complicated branching structure you've

2257
04:30:47,592 --> 04:30:48,014
ever seen?

2258
04:30:48,014 --> 04:30:55,502
I mean, most projects I do

2259
04:30:56,579 --> 04:30:58,601
at most have a pull

2260
04:30:58,601 --> 04:31:00,243
request based workflow, which

2261
04:31:00,243 --> 04:31:02,546
is something you'll see tomorrow.

2262
04:31:02,546 --> 04:31:05,449
So basically there's one main branch

2263
04:31:05,449 --> 04:31:06,611
and then people can work

2264
04:31:06,611 --> 04:31:08,933
on features separately, test them,

2265
04:31:08,933 --> 04:31:11,296
and then get them merged to

2266
04:31:11,296 --> 04:31:13,799
the main code that everyone's using.

2267
04:31:13,799 --> 04:31:17,043
I guess the main reason it

2268
04:31:17,043 --> 04:31:18,845
would get more complex than that is

2269
04:31:18,845 --> 04:31:21,908
if you have like multiple deployments

2270
04:31:21,908 --> 04:31:23,270
or multiple versions of the

2271
04:31:23,270 --> 04:31:24,431
code that need to be used

2272
04:31:24,431 --> 04:31:25,793
by everyone at the same time.

2273
04:31:26,887 --> 04:31:30,391
And yeah, like it can work,

2274
04:31:30,391 --> 04:31:31,753
but to be honest, most

2275
04:31:31,753 --> 04:31:33,895
of our scientific projects aren't

2276
04:31:33,895 --> 04:31:35,477
really like that.

2277
04:31:36,939 --> 04:31:38,540
I mean, maybe something like

2278
04:31:38,540 --> 04:31:41,284
NumPy or SciPy or R or Python.

2279
04:31:41,284 --> 04:31:42,265
I mean, it will have the

2280
04:31:42,265 --> 04:31:43,626
old version that's still being

2281
04:31:43,626 --> 04:31:45,508
maintained for a few years.

2282
04:31:45,508 --> 04:31:49,553
Well, a new one's coming, but that's...

2283
04:31:52,165 --> 04:31:53,607
That's not really relevant to

2284
04:31:53,607 --> 04:31:54,629
most of our stuff.

2285
04:31:54,629 --> 04:31:57,374
So yeah, as simple as possible.

2286
04:31:57,374 --> 04:31:58,616
Most of my projects, I

2287
04:31:58,616 --> 04:32:00,339
just push directly to main because

2288
04:32:00,339 --> 04:32:01,741
I'm the only one using it.

2289
04:32:01,741 --> 04:32:04,927
There's no reason to make a

2290
04:32:04,927 --> 04:32:06,269
pull request if no one else

2291
04:32:06,269 --> 04:32:08,713
is going to know about it.

2292
04:32:08,713 --> 04:32:11,478
And if I break it, it's my job to fix it.

2293
04:32:11,478 --> 04:32:14,575
So I'm fine with that trade-off.

2294
04:32:14,575 --> 04:32:15,397
I guess if you're working

2295
04:32:15,397 --> 04:32:17,281
alone, the only reason to

2296
04:32:17,281 --> 04:32:19,385
use multiple branders at all is

2297
04:32:19,385 --> 04:32:21,048
if you are working on multiple

2298
04:32:21,048 --> 04:32:22,231
features at the same time.

2299
04:32:22,231 --> 04:32:25,337
And I guess maybe some

2300
04:32:25,337 --> 04:32:27,101
people work like that, but

2301
04:32:27,101 --> 04:32:29,927
I guess probably most people

2302
04:32:29,927 --> 04:32:31,029
will finish one thing before

2303
04:32:31,029 --> 04:32:32,372
they start another thing.

2304
04:32:32,372 --> 04:32:33,935
But yeah, it depends on

2305
04:32:33,935 --> 04:32:35,418
how you organize things.

2306
04:32:35,418 --> 04:32:35,959
Yeah, yeah.

2307
04:32:38,555 --> 04:32:40,036
Yeah, there's some reasons,

2308
04:32:40,036 --> 04:32:41,978
but I definitely say like some

2309
04:32:41,978 --> 04:32:43,200
other people in the notes

2310
04:32:43,200 --> 04:32:46,223
are saying the simpler, the

2311
04:32:46,223 --> 04:32:47,664
simplest thing that works for you

2312
04:32:47,664 --> 04:32:49,046
is the best for you.

2313
04:32:50,387 --> 04:32:50,567
Yeah.

2314
04:32:50,567 --> 04:32:51,348
Unless you just want to

2315
04:32:51,348 --> 04:32:54,751
learn stuff in which case, yeah, go try stuff.

2316
04:32:55,612 --> 04:32:58,295
But yeah.

2317
04:33:01,318 --> 04:33:03,220
What else is there to discuss?

2318
04:33:03,220 --> 04:33:04,461
What other practical stuff?

2319
04:33:05,420 --> 04:33:09,086
Well, the next topic that we've

2320
04:33:09,086 --> 04:33:13,011
got on the lesson is staging and committing.

2321
04:33:13,011 --> 04:33:18,580
Is that something we even

2322
04:33:18,580 --> 04:33:19,782
talked about today?

2323
04:33:19,782 --> 04:33:23,067
I think that's now mostly... Well, no,

2324
04:33:23,067 --> 04:33:25,110
I think it was... I

2325
04:33:25,110 --> 04:33:26,632
think that the committing was

2326
04:33:26,632 --> 04:33:27,694
discussed on day one.

2327
04:33:28,595 --> 04:33:29,196
Okay, yeah.

2328
04:33:29,196 --> 04:33:32,541
And we briefly mentioned that in the

2329
04:33:34,748 --> 04:33:38,572
in the, um, when we showed how to,

2330
04:33:38,572 --> 04:33:40,934
um, how to put a repository

2331
04:33:40,934 --> 04:33:42,976
on, on GitHub that you then

2332
04:33:42,976 --> 04:33:45,498
need to make you commit.

2333
04:33:47,480 --> 04:33:47,600
Yeah.

2334
04:33:47,600 --> 04:33:48,561
To make it, to put it,

2335
04:33:48,561 --> 04:33:50,643
put things into the repository.

2336
04:33:51,664 --> 04:33:54,326
But, um, yeah.

2337
04:33:54,326 --> 04:33:56,528
So how often do you

2338
04:33:56,528 --> 04:33:57,870
commit, Bridget, if you're

2339
04:33:57,870 --> 04:33:58,590
working on something?

2340
04:33:59,991 --> 04:34:01,633
Mm-hmm.

2341
04:34:04,246 --> 04:34:05,247
I guess it depends on if

2342
04:34:05,247 --> 04:34:08,032
it's a new project or an old project.

2343
04:34:08,032 --> 04:34:09,454
If it's a brand new project

2344
04:34:09,454 --> 04:34:10,555
and I don't know what I'm

2345
04:34:10,555 --> 04:34:13,520
doing yet, it might either be quickly

2346
04:34:13,520 --> 04:34:15,923
because I might break it at any time

2347
04:34:15,923 --> 04:34:18,246
or it might be not so

2348
04:34:18,246 --> 04:34:20,169
quickly, more like every day

2349
04:34:20,169 --> 04:34:21,571
or something once I get to

2350
04:34:21,571 --> 04:34:22,833
a good benchmark because I

2351
04:34:24,035 --> 04:34:26,519
figure smaller commits don't really

2352
04:34:26,519 --> 04:34:29,082
give me much.

2353
04:34:29,082 --> 04:34:30,304
I mean,

2354
04:34:32,090 --> 04:34:33,514
I'm probably going to break

2355
04:34:33,514 --> 04:34:35,481
it no matter what, but I'm

2356
04:34:35,481 --> 04:34:37,326
just right there so I can fix it.

2357
04:34:37,326 --> 04:34:38,671
I really want to start committing

2358
04:34:38,671 --> 04:34:39,754
when I'm worried I'll do

2359
04:34:39,754 --> 04:34:43,058
something that will break something else.

2360
04:34:43,058 --> 04:34:45,101
And then it would take me

2361
04:34:45,101 --> 04:34:47,304
days to go backwards and

2362
04:34:47,304 --> 04:34:49,066
figure out what happened.

2363
04:34:49,066 --> 04:34:51,549
I fix it, which definitely

2364
04:34:51,549 --> 04:34:52,791
has happened more times than

2365
04:34:52,791 --> 04:34:53,933
I'd like to admit.

2366
04:34:53,933 --> 04:34:55,755
I'm here working on my research code,

2367
04:34:55,755 --> 04:34:59,099
and suddenly there's some obvious

2368
04:34:59,099 --> 04:34:59,640
bug to it.

2369
04:35:00,822 --> 04:35:03,225
And I didn't commit in several days.

2370
04:35:03,225 --> 04:35:05,637
And I don't know where the bug started.

2371
04:35:05,637 --> 04:35:08,241
And it takes several more

2372
04:35:08,241 --> 04:35:11,867
days to figure out what I did

2373
04:35:11,867 --> 04:35:13,690
in an hour and undo that.

2374
04:35:15,473 --> 04:35:16,414
And that's enough to scare

2375
04:35:16,414 --> 04:35:20,020
anyone into committing often, if you ask me.

2376
04:35:22,304 --> 04:35:22,945
And for that, you know,

2377
04:35:22,945 --> 04:35:25,308
it doesn't matter what the commit message is,

2378
04:35:25,308 --> 04:35:27,051
you know, how small it is, as long

2379
04:35:27,051 --> 04:35:29,255
as there was anything before I

2380
04:35:29,255 --> 04:35:30,517
did this, I would be able

2381
04:35:30,517 --> 04:35:31,719
to go backwards to it.

2382
04:35:31,719 --> 04:35:31,999
So

2383
04:35:33,667 --> 04:35:33,987
Yeah.

2384
04:35:35,910 --> 04:35:39,114
To me, it's a bit, the

2385
04:35:39,114 --> 04:35:40,275
more people are involved in

2386
04:35:40,275 --> 04:35:42,418
the project, the more often I commit.

2387
04:35:44,781 --> 04:35:46,223
Like, if it's just me

2388
04:35:46,223 --> 04:35:49,667
doing something, it's like, okay,

2389
04:35:49,667 --> 04:35:51,029
yeah, I'll do, I'll commit at

2390
04:35:51,029 --> 04:35:52,330
the end of the day.

2391
04:35:52,330 --> 04:35:53,432
Or I try to commit, I

2392
04:35:53,432 --> 04:35:54,713
try to remember to commit at the

2393
04:35:54,713 --> 04:35:56,075
end of the day, let's put it like that.

2394
04:35:59,199 --> 04:36:01,462
But for things where we've

2395
04:36:01,462 --> 04:36:03,184
been working with others, yeah.

2396
04:36:04,345 --> 04:36:06,729
I did commit quite often.

2397
04:36:06,729 --> 04:36:06,969
Yeah.

2398
04:36:08,852 --> 04:36:14,540
In a way to have things to go back to.

2399
04:36:14,540 --> 04:36:16,924
If someone said, can you merge

2400
04:36:16,924 --> 04:36:19,227
now so I can see where you're at?

2401
04:36:19,227 --> 04:36:20,309
Yeah.

2402
04:36:20,309 --> 04:36:22,873
That I could quickly.

2403
04:36:22,873 --> 04:36:23,133
Yeah.

2404
04:36:24,375 --> 04:36:25,196
And it's like the way

2405
04:36:25,196 --> 04:36:26,398
to explain what happened.

2406
04:36:26,398 --> 04:36:28,321
So to tell people what I've

2407
04:36:28,321 --> 04:36:30,264
done to the code, I don't have

2408
04:36:30,264 --> 04:36:33,202
to go tell them I've changed this, that they can

2409
04:36:33,202 --> 04:36:36,545
look at the recent commits, see, okay,

2410
04:36:36,545 --> 04:36:38,027
yeah, X and Y and Z

2411
04:36:38,027 --> 04:36:40,349
has happened, and none of it

2412
04:36:40,349 --> 04:36:42,271
affects me, so I'm just going to go on.

2413
04:36:43,252 --> 04:36:46,055
And then they can ask more later if needed.

2414
04:36:46,055 --> 04:36:52,362
I think that's more or less

2415
04:36:52,362 --> 04:36:55,044
the topics of things.

2416
04:36:55,044 --> 04:36:56,866
And then we have one last

2417
04:36:56,866 --> 04:37:02,432
thing, which is what to avoid when using Git.

2418
04:37:06,091 --> 04:37:15,644
What to avoid when committing, right?

2419
04:37:15,644 --> 04:37:17,426
Don't add your SSH keys.

2420
04:37:18,368 --> 04:37:20,130
Yes.

2421
04:37:20,130 --> 04:37:22,193
So don't add private data.

2422
04:37:22,193 --> 04:37:22,874
Yes, yes.

2423
04:37:22,874 --> 04:37:25,337
Don't add private data.

2424
04:37:25,337 --> 04:37:27,219
Especially don't add sensitive

2425
04:37:27,219 --> 04:37:27,900
private data.

2426
04:37:28,742 --> 04:37:29,382
Yeah.

2427
04:37:29,382 --> 04:37:31,285
Because it is a real, real

2428
04:37:31,285 --> 04:37:33,040
hassle to get it out again.

2429
04:37:33,040 --> 04:37:35,083
Yeah, I think there was an

2430
04:37:35,083 --> 04:37:36,204
analysis done at some point

2431
04:37:36,204 --> 04:37:37,626
about how many secrets are

2432
04:37:37,626 --> 04:37:39,689
just public on GitHub.

2433
04:37:39,689 --> 04:37:44,855
And there's a lot of them.

2434
04:37:44,855 --> 04:37:45,056
Yes.

2435
04:37:45,857 --> 04:37:47,339
Because even if you delete

2436
04:37:47,339 --> 04:37:49,061
something, it won't be deleted

2437
04:37:49,061 --> 04:37:53,507
unless you retroactively delete

2438
04:37:53,507 --> 04:37:56,007
it from history as well.

2439
04:37:56,007 --> 04:37:59,192
Which is... For some things, it is just,

2440
04:37:59,192 --> 04:38:00,394
like, if you want to be

2441
04:38:00,394 --> 04:38:02,438
absolutely sure, it is impossible.

2442
04:38:02,438 --> 04:38:04,661
It is, like, actually, because

2443
04:38:04,661 --> 04:38:06,064
you don't know who cloned it

2444
04:38:06,064 --> 04:38:08,428
in the meantime, and all of those things.

2445
04:38:08,428 --> 04:38:10,271
So for those things, you just have to,

2446
04:38:10,271 --> 04:38:11,953
like, regenerate all secrets

2447
04:38:11,953 --> 04:38:14,558
and, like, invalidate them.

2448
04:38:14,558 --> 04:38:16,477
If it's a public repository.

2449
04:38:16,477 --> 04:38:18,219
Also if it's a private one.

2450
04:38:19,280 --> 04:38:20,621
There are exploits.

2451
04:38:21,982 --> 04:38:23,684
So while pushing stuff on

2452
04:38:23,684 --> 04:38:26,206
GitHub is not publishing it, it

2453
04:38:26,206 --> 04:38:27,948
is also no longer any more

2454
04:38:29,750 --> 04:38:33,273
secret in the sense that... Yeah, well,

2455
04:38:33,273 --> 04:38:35,676
but if it were, say, you

2456
04:38:35,676 --> 04:38:36,837
had something in a Git

2457
04:38:36,837 --> 04:38:38,819
repository on your computer just

2458
04:38:38,819 --> 04:38:42,582
to make the versioning, then you

2459
04:38:42,582 --> 04:38:45,873
can be pretty sure that no one else cloned it.

2460
04:38:45,873 --> 04:38:46,514
Yes.

2461
04:38:46,514 --> 04:38:47,536
Yeah, yeah, yeah.

2462
04:38:49,079 --> 04:38:50,882
So yeah, but it's still it is

2463
04:38:50,882 --> 04:38:53,527
I had to do that once when

2464
04:38:53,527 --> 04:38:56,773
I just started my, my first postdoc.

2465
04:38:58,055 --> 04:38:58,636
It's a hassle.

2466
04:38:59,558 --> 04:39:00,038
Don't do it.

2467
04:39:02,703 --> 04:39:06,971
So that is where the

2468
04:39:06,971 --> 04:39:09,315
gitignore file comes in.

2469
04:39:10,932 --> 04:39:12,434
Anything that needs to be

2470
04:39:12,434 --> 04:39:15,218
in the same folder as your Git repository

2471
04:39:15,218 --> 04:39:16,479
but should never, ever be

2472
04:39:16,479 --> 04:39:19,844
committed, you can put it

2473
04:39:19,844 --> 04:39:21,246
in the gitignore file.

2474
04:39:22,728 --> 04:39:25,432
And this also helps with

2475
04:39:26,533 --> 04:39:28,035
the generated files.

2476
04:39:28,035 --> 04:39:30,038
And if you're using IDEs,

2477
04:39:31,940 --> 04:39:35,024
they all create their own

2478
04:39:35,024 --> 04:39:41,003
workspace files or whatever they are called.

2479
04:39:41,003 --> 04:39:41,283
Nope.

2480
04:39:43,587 --> 04:39:46,351
They actually create a hidden folder

2481
04:39:46,351 --> 04:39:48,254
that has their settings and

2482
04:39:48,254 --> 04:39:50,217
everything and stuff for that workspace.

2483
04:39:51,518 --> 04:39:52,059
The IDE.

2484
04:39:52,961 --> 04:39:55,725
And you don't want to come across.

2485
04:39:55,725 --> 04:39:56,506
It's not going to be

2486
04:39:56,506 --> 04:39:57,667
useful for anyone else.

2487
04:39:57,667 --> 04:40:00,351
It's like your own stuff or something.

2488
04:40:01,493 --> 04:40:03,075
So that's something that you...

2489
04:40:03,075 --> 04:40:08,243
If you're using VS Code or RStudio or...

2490
04:40:09,657 --> 04:40:11,039
Yeah.

2491
04:40:11,039 --> 04:40:13,563
Maybe we could say, can

2492
04:40:13,563 --> 04:40:15,906
we define what generated files means?

2493
04:40:16,928 --> 04:40:17,989
What's a good example?

2494
04:40:17,989 --> 04:40:20,073
Maybe like LaTeX documents.

2495
04:40:20,073 --> 04:40:22,076
So if you're writing a paper in LaTeX

2496
04:40:22,076 --> 04:40:23,958
and you're using version control,

2497
04:40:23,958 --> 04:40:25,400
you have the source code for

2498
04:40:25,400 --> 04:40:27,764
the paper in LaTeX, and then

2499
04:40:27,764 --> 04:40:29,527
you have the PDF that comes out of it.

2500
04:40:30,468 --> 04:40:32,311
And there's no need to

2501
04:40:32,311 --> 04:40:34,935
commit the PDF because it

2502
04:40:35,856 --> 04:40:38,480
can automatically be made from the other stuff.

2503
04:40:38,480 --> 04:40:41,444
But also some intermediate files.

2504
04:40:41,444 --> 04:40:42,425
It also creates this dot

2505
04:40:42,425 --> 04:40:44,347
out and some... Right, yeah.

2506
04:40:44,347 --> 04:40:45,469
So all this other stuff.

2507
04:40:45,469 --> 04:40:48,252
And then you'll always get messages

2508
04:40:48,252 --> 04:40:49,434
that say all these files

2509
04:40:49,434 --> 04:40:52,297
have changed every time you rebuilt the paper.

2510
04:40:52,297 --> 04:40:54,440
But it's not really useful to see that.

2511
04:40:54,440 --> 04:40:56,282
And it just distracts you

2512
04:40:56,282 --> 04:40:59,706
from what's actually being changed.

2513
04:40:59,706 --> 04:41:04,012
Actually, sometimes, especially in

2514
04:41:04,012 --> 04:41:06,715
the writing paper case...

2515
04:41:07,555 --> 04:41:09,257
I would be tempted to say,

2516
04:41:09,257 --> 04:41:12,120
if you have a version that

2517
04:41:12,120 --> 04:41:14,803
you discussed with other collaborators

2518
04:41:14,803 --> 04:41:15,804
that you send to your

2519
04:41:18,147 --> 04:41:19,489
supervisor or something for

2520
04:41:19,489 --> 04:41:25,636
comments, save that as a permanent version.

2521
04:41:25,636 --> 04:41:26,797
I mean, you can get it

2522
04:41:26,797 --> 04:41:30,121
back, but maybe you want it permanently there.

2523
04:41:31,022 --> 04:41:31,663
I would tag that.

2524
04:41:32,564 --> 04:41:33,765
You can tag it, sure.

2525
04:41:37,238 --> 04:41:40,202
Then you need to have an

2526
04:41:40,202 --> 04:41:41,764
extra step if you want to go back to it.

2527
04:41:43,786 --> 04:41:46,930
If you want two versions at

2528
04:41:46,930 --> 04:41:49,053
the same time, you can put

2529
04:41:49,053 --> 04:41:52,117
them in there and they will stay.

2530
04:41:54,961 --> 04:41:56,883
But then I would also rename

2531
04:41:56,883 --> 04:41:58,445
the PDF files to something that's

2532
04:41:58,445 --> 04:42:02,490
not the same generated file.

2533
04:42:02,490 --> 04:42:03,031
Right.

2534
04:42:03,031 --> 04:42:04,313
Yeah.

2535
04:42:04,313 --> 04:42:04,473
Mm-hmm.

2536
04:42:04,473 --> 04:42:04,613
Mm-hmm.

2537
04:42:08,305 --> 04:42:10,329
But, yeah, that's, I

2538
04:42:10,329 --> 04:42:11,551
guess, personal preference.

2539
04:42:12,472 --> 04:42:12,733
Yeah.

2540
04:42:14,175 --> 04:42:15,358
Just compilation output.

2541
04:42:15,358 --> 04:42:16,099
So if you're writing in

2542
04:42:17,020 --> 04:42:19,665
the, like, old-school compiled

2543
04:42:19,665 --> 04:42:20,988
languages, then all of the

2544
04:42:21,829 --> 04:42:23,933
actual executables and libraries

2545
04:42:23,933 --> 04:42:27,579
and stuff would probably not be permitted.

2546
04:42:28,561 --> 04:42:29,723
Yes.

2547
04:42:31,660 --> 04:42:34,042
Then more things that you shouldn't commit.

2548
04:42:35,304 --> 04:42:36,325
I guess we already talked

2549
04:42:36,325 --> 04:42:39,107
about postponing commits before.

2550
04:42:39,107 --> 04:42:40,609
Yes.

2551
04:42:40,609 --> 04:42:40,889
Yeah.

2552
04:42:42,351 --> 04:42:45,073
But let's talk about huge files first.

2553
04:42:45,914 --> 04:42:47,296
Because these are files that

2554
04:42:47,296 --> 04:42:49,057
you don't always, you don't

2555
04:42:50,198 --> 04:42:53,902
ever want to commit, at least to GitHub.

2556
04:42:53,902 --> 04:42:55,804
That's probably your data files.

2557
04:42:59,328 --> 04:42:59,688
Mm-hmm.

2558
04:42:59,688 --> 04:42:59,828
Mm-hmm.

2559
04:43:01,867 --> 04:43:03,749
GitHub is for code and,

2560
04:43:06,353 --> 04:43:08,656
well, maybe paper writing and

2561
04:43:08,656 --> 04:43:09,918
that, but it's not for data.

2562
04:43:11,960 --> 04:43:17,728
Enrique, do we have any advice on

2563
04:43:17,728 --> 04:43:19,791
where to store data if you

2564
04:43:19,791 --> 04:43:21,673
want to have it version

2565
04:43:21,673 --> 04:43:23,737
controlled and published?

2566
04:43:23,737 --> 04:43:24,919
yeah this is actually something

2567
04:43:24,919 --> 04:43:26,763
that we will cover next week

2568
04:43:27,665 --> 04:43:29,108
on the kind of sharing

2569
04:43:29,108 --> 04:43:31,933
aspects and social aspects of

2570
04:43:31,933 --> 04:43:33,637
coding sharing code and sharing data

2571
04:43:33,637 --> 04:43:36,102
and there are different practices

2572
04:43:36,102 --> 04:43:38,046
but for example keeping the

2573
04:43:38,046 --> 04:43:40,550
data in one repository or with

2574
04:43:40,550 --> 04:43:42,595
one system we will mention this

2575
04:43:42,595 --> 04:43:45,320
type of other extensions to git like git-annex

2576
04:43:45,320 --> 04:43:47,264
and the code with the

2577
04:43:47,264 --> 04:43:48,888
different repository this is also

2578
04:43:48,888 --> 04:43:49,870
a good way to keep the

2579
04:43:49,870 --> 04:43:51,754
truly private stuff which could

2580
04:43:51,754 --> 04:43:53,618
still use a repository that

2581
04:43:53,618 --> 04:43:55,822
never leaves the computer and

2582
04:43:55,822 --> 04:43:58,628
the public stuff that can go to github

2583
04:43:58,628 --> 04:43:59,570
and so on but i don't want

2584
04:43:59,570 --> 04:44:01,675
to spoil the fun this is next

2585
04:44:01,675 --> 04:44:04,240
week and the week after stopping so yeah

2586
04:44:06,397 --> 04:44:11,002
By the way, there's feedback

2587
04:44:11,002 --> 04:44:12,003
in the bottom of the notes

2588
04:44:12,003 --> 04:44:14,505
that you can be editing while

2589
04:44:14,505 --> 04:44:16,527
we're doing stuff here.

2590
04:44:16,527 --> 04:44:17,929
Yeah.

2591
04:44:17,929 --> 04:44:20,591
And we have five minutes to wrap up.

2592
04:44:22,253 --> 04:44:26,357
So we already discussed

2593
04:44:26,357 --> 04:44:30,921
the postponing commits, committing

2594
04:44:30,921 --> 04:44:33,484
unrelated changes together.

2595
04:44:37,345 --> 04:44:39,429
I think it's better to, if

2596
04:44:39,429 --> 04:44:40,492
you don't have the time to

2597
04:44:40,492 --> 04:44:41,694
put them in separate commits,

2598
04:44:43,358 --> 04:44:45,282
it's better to commit them than

2599
04:44:45,282 --> 04:44:46,324
to not commit them at all.

2600
04:44:46,324 --> 04:44:47,045
So yeah.

2601
04:44:47,045 --> 04:44:47,466
Yeah.

2602
04:44:47,466 --> 04:44:50,292
Like, you know, a few times when I've

2603
04:44:51,537 --> 04:44:55,602
hurt myself by breaking

2604
04:44:55,602 --> 04:44:58,244
something has always been when it said,

2605
04:44:58,244 --> 04:44:59,125
I don't want to commit

2606
04:44:59,125 --> 04:45:00,066
now because they have to

2607
04:45:00,066 --> 04:45:02,509
separate out the different stuff I've done.

2608
04:45:02,509 --> 04:45:04,832
So I don't have time to do that now.

2609
04:45:04,832 --> 04:45:05,593
I'll do it later.

2610
04:45:05,593 --> 04:45:07,555
And then I add something

2611
04:45:07,555 --> 04:45:10,038
more and everything goes bad.

2612
04:45:10,038 --> 04:45:12,020
So yeah, I mean, definitely

2613
04:45:12,020 --> 04:45:15,143
if it's better to commit something,

2614
04:45:15,143 --> 04:45:17,466
then try to make it too perfect.

2615
04:45:19,368 --> 04:45:19,468
Okay.

2616
04:45:22,756 --> 04:45:25,354
Yeah.

2617
04:45:25,354 --> 04:45:27,570
And then what to avoid

2618
04:45:27,570 --> 04:45:29,472
when working with batches.

2619
04:45:29,472 --> 04:45:32,695
Who here has the problem?

2620
04:45:32,695 --> 04:45:35,558
Sometimes you begin doing some work

2621
04:45:35,558 --> 04:45:38,842
and then it comes time to commit it

2622
04:45:38,842 --> 04:45:40,363
and then share it to push

2623
04:45:40,363 --> 04:45:43,486
it, which we'll learn more about tomorrow.

2624
04:45:43,486 --> 04:45:46,550
And then you forgot to pull first.

2625
04:45:46,550 --> 04:45:48,371
So you're not working on the latest copy.

2626
04:45:49,653 --> 04:45:51,715
And then it's like so much

2627
04:45:51,715 --> 04:45:52,716
work to recover those.

2628
04:45:54,017 --> 04:45:55,158
Too often.

2629
04:45:55,158 --> 04:45:56,455
Which...

2630
04:45:56,455 --> 04:45:57,317
Well, it happens to me all

2631
04:45:57,317 --> 04:45:59,783
the time, but usually it's not that difficult.

2632
04:45:59,783 --> 04:46:01,347
You just try to push, and

2633
04:46:01,347 --> 04:46:02,670
then it tells you, no, you can't do that,

2634
04:46:02,670 --> 04:46:05,116
and you pull, and then you fix the... Yeah,

2635
04:46:05,116 --> 04:46:07,241
well, that's the best case,

2636
04:46:07,241 --> 04:46:08,344
but the few times when

2637
04:46:08,344 --> 04:46:11,002
it actually is difficult, then...

2638
04:46:11,002 --> 04:46:13,446
Yeah, I really am regretting my life then.

2639
04:46:16,391 --> 04:46:17,713
And I mean, it is not

2640
04:46:17,713 --> 04:46:19,315
like this is a problem with Git.

2641
04:46:19,315 --> 04:46:20,738
Basically, it's like saying

2642
04:46:20,738 --> 04:46:22,260
you start working on a document

2643
04:46:22,260 --> 04:46:23,883
before you ask the other

2644
04:46:23,883 --> 04:46:25,365
collaborators, can you send me

2645
04:46:25,365 --> 04:46:27,008
the latest version of it?

2646
04:46:27,008 --> 04:46:29,251
And then like, yeah.

2647
04:46:29,251 --> 04:46:30,193
Well, then I will also do

2648
04:46:30,193 --> 04:46:32,957
like a lot of duplicate work usually.

2649
04:46:32,957 --> 04:46:33,779
Yeah, yeah.

2650
04:46:33,779 --> 04:46:35,461
I guess for code that

2651
04:46:35,461 --> 04:46:36,583
doesn't happen that often.

2652
04:46:37,565 --> 04:46:37,785
Yeah.

2653
04:46:40,921 --> 04:46:46,046
Anyway, yeah.

2654
04:46:46,046 --> 04:46:47,127
Yeah, and these other

2655
04:46:47,127 --> 04:46:48,929
things, like overengineering stuff,

2656
04:46:48,929 --> 04:46:50,090
trying to make your little

2657
04:46:50,090 --> 04:46:54,655
project too advanced, most stuff is small.

2658
04:46:54,655 --> 04:46:59,860
So that's completely fine.

2659
04:46:59,860 --> 04:47:01,561
Don't make it more complicated

2660
04:47:01,561 --> 04:47:02,422
than it has to be.

2661
04:47:04,965 --> 04:47:08,308
That's a KISS principle, right?

2662
04:47:09,329 --> 04:47:09,629
Yeah.

2663
04:47:09,629 --> 04:47:10,270
KISS do everything.

2664
04:47:11,077 --> 04:47:16,122
Should we begin wrapping up for the day?

2665
04:47:16,122 --> 04:47:18,224
We can keep having more

2666
04:47:18,224 --> 04:47:21,748
comments or questions from people down below.

2667
04:47:21,748 --> 04:47:23,149
Change to the notes.

2668
04:47:26,913 --> 04:47:29,055
So what did we cover today?

2669
04:47:29,055 --> 04:47:30,537
Was it basically everything

2670
04:47:30,537 --> 04:47:31,958
in the schedule?

2671
04:47:31,958 --> 04:47:34,381
Yes, basically everything in the schedule.

2672
04:47:34,381 --> 04:47:38,805
So we started out by...

2673
04:47:42,110 --> 04:47:44,452
cloning a project from GitHub

2674
04:47:46,854 --> 04:47:50,398
to our local machine and looking at it locally.

2675
04:47:50,398 --> 04:47:52,980
Then we looked at how to,

2676
04:47:52,980 --> 04:47:54,682
once we've got it locally, how to

2677
04:47:54,682 --> 04:47:58,325
get it, to dig into it,

2678
04:47:58,325 --> 04:47:59,726
what's happened in the history.

2679
04:48:00,727 --> 04:48:03,069
Then after the lunch break,

2680
04:48:03,069 --> 04:48:06,252
we did the inverse version of

2681
04:48:06,252 --> 04:48:08,254
when we have a folder on our,

2682
04:48:08,254 --> 04:48:10,316
or a project on our machine and

2683
04:48:10,316 --> 04:48:11,557
want to put it on GitHub.

2684
04:48:11,557 --> 04:48:14,244
And then now we're discussing,

2685
04:48:14,244 --> 04:48:16,590
or for the last few minutes

2686
04:48:16,590 --> 04:48:20,781
we have been discussing, what we

2687
04:48:20,781 --> 04:48:22,004
actually do or not do.

2688
04:48:23,207 --> 04:48:25,333
And that's it.

2689
04:48:25,333 --> 04:48:27,338
So what's coming tomorrow?

2690
04:48:28,651 --> 04:48:29,773
Yes.

2691
04:48:29,773 --> 04:48:32,778
So tomorrow, day three, will

2692
04:48:32,778 --> 04:48:34,821
be about collaborative Git.

2693
04:48:35,723 --> 04:48:36,845
And in my opinion, it's the

2694
04:48:36,845 --> 04:48:39,369
best day of this day.

2695
04:48:39,369 --> 04:48:40,531
No offense to you.

2696
04:48:40,531 --> 04:48:42,454
You did an amazing day today.

2697
04:48:42,454 --> 04:48:43,556
But what I'm trying to say is

2698
04:48:43,556 --> 04:48:45,399
that you really see the power

2699
04:48:45,399 --> 04:48:48,665
of Git, that you can really...

2700
04:48:48,665 --> 04:48:51,709
After tomorrow, you can literally go out,

2701
04:48:51,709 --> 04:48:52,950
find the project that you

2702
04:48:52,950 --> 04:48:54,693
like, find a typo, find an

2703
04:48:54,693 --> 04:48:56,876
error, suggest an improvement

2704
04:48:56,876 --> 04:48:59,899
and start submitting pull requests

2705
04:48:59,899 --> 04:49:02,343
and help any software projects

2706
04:49:02,343 --> 04:49:03,624
or it doesn't even have to be software.

2707
04:49:03,624 --> 04:49:04,645
It can be web pages,

2708
04:49:04,645 --> 04:49:06,428
documentations that are hosted with Git.

2709
04:49:07,329 --> 04:49:10,052
So it's really the best that

2710
04:49:10,052 --> 04:49:11,294
you can get out of it.

2711
04:49:11,294 --> 04:49:12,496
and so because of this

2712
04:49:12,496 --> 04:49:14,279
there will actually be we

2713
04:49:14,279 --> 04:49:15,541
already mentioned this in the

2714
04:49:15,541 --> 04:49:18,606
email last evening afternoon there

2715
04:49:18,606 --> 04:49:19,928
will be also in this other

2716
04:49:19,928 --> 04:49:21,551
evening in this other in the

2717
04:49:21,551 --> 04:49:22,613
second email that will be sent

2718
04:49:22,613 --> 04:49:25,197
today so for those of you who

2719
04:49:25,197 --> 04:49:26,920
are not in an in-person room

2720
04:49:26,920 --> 04:49:29,084
and are planning to do this

2721
04:49:29,084 --> 04:49:32,049
type of you know collaborative work

2722
04:49:32,049 --> 04:49:34,172
with us on the stream you

2723
04:49:34,172 --> 04:49:36,456
will need to request access so

2724
04:49:36,456 --> 04:49:39,301
that then we can add you to the repository

2725
04:49:39,301 --> 04:49:40,223
so that you basically have

2726
04:49:40,223 --> 04:49:42,447
the rights to push changes

2727
04:49:43,348 --> 04:49:45,933
accept other people proposals and

2728
04:49:45,933 --> 04:49:47,315
so on so please follow the

2729
04:49:47,315 --> 04:49:48,537
instructions in the email

2730
04:49:48,537 --> 04:49:50,520
And we will also highlight them

2731
04:49:50,520 --> 04:49:52,984
here at the ends of the notes.

2732
04:49:52,984 --> 04:49:54,687
And thanks for the feedback.

2733
04:49:54,687 --> 04:49:57,010
This is fantastic.

2734
04:49:57,010 --> 04:49:58,553
It's really what we need.

2735
04:50:00,355 --> 04:50:00,756
Anything else?

2736
04:50:04,261 --> 04:50:06,645
We would be one minute over time.

2737
04:50:06,645 --> 04:50:09,970
Yeah, I guess we should call it good.

2738
04:50:09,970 --> 04:50:12,247
Any comments or feedback?

2739
04:50:12,247 --> 04:50:14,670
yes so well maybe wrapping

2740
04:50:14,670 --> 04:50:16,994
up the feedback is there thank you

2741
04:50:16,994 --> 04:50:21,400
so much to [name] [name] [name] [name]

2742
04:50:21,400 --> 04:50:23,503
and all the helpers visible

2743
04:50:23,503 --> 04:50:24,985
and invisible that have been

2744
04:50:24,985 --> 04:50:26,848
there answering all the

2745
04:50:26,848 --> 04:50:29,011
questions helping people in zoom

2746
04:50:29,011 --> 04:50:30,393
i think it was successful day

2747
04:50:30,393 --> 04:50:33,757
we will continue tomorrow the videos

2748
04:50:33,757 --> 04:50:35,119
as soon as we press stop

2749
04:50:35,119 --> 04:50:36,441
the video will be immediately

2750
04:50:36,441 --> 04:50:37,663
available twitch tv

2751
04:50:38,993 --> 04:50:41,617
And write all the feedback you want.

2752
04:50:41,617 --> 04:50:43,620
We always take feedback into account.

2753
04:50:45,843 --> 04:50:48,948
So I think we are good to go.

2754
04:50:50,831 --> 04:50:51,632
Yeah, great.

2755
04:50:51,632 --> 04:50:55,859
So see you tomorrow, we hope.

2756
04:50:55,859 --> 04:50:57,461
Okay, bye.

2757
04:50:57,461 --> 04:50:58,082
Bye, everyone.

