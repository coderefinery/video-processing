1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:55,000
Hello, with more, um, hopefully you can hear us now.

13
00:05:55,000 --> 00:05:56,000
Good morning everyone.

14
00:05:56,000 --> 00:05:56,960
Good morning, everyone.

15
00:06:04,240 --> 00:06:07,280
Yeah, hopefully you have a good day.

16
00:06:07,280 --> 00:06:09,440
I see one report saying [name] is low.

17
00:06:09,440 --> 00:06:10,800
Maybe let's do the proper test.

18
00:06:11,680 --> 00:06:14,640
Order me, [name], [name].

19
00:06:14,640 --> 00:06:22,320
One, two, three, four,

20
00:06:22,320 --> 00:06:23,320
Four.

21
00:06:23,320 --> 00:06:24,320
Five.

22
00:06:24,320 --> 00:06:25,320
Six.

23
00:06:25,320 --> 00:06:26,320
Seven.

24
00:06:26,320 --> 00:06:27,320
Eight.

25
00:06:27,320 --> 00:06:28,320
Nine.

26
00:06:28,320 --> 00:06:29,320
Okay.

27
00:06:29,320 --> 00:06:30,320
Yeah.

28
00:06:30,320 --> 00:06:37,160
I hear [name] a bit lower than.

29
00:06:37,160 --> 00:06:38,800
Now someone says it seems fine.

30
00:06:38,800 --> 00:06:42,320
So if there's no more comments, we can.

31
00:06:42,320 --> 00:06:43,320
Okay.

32
00:06:43,320 --> 00:06:46,840
[name] is still a bit lower, but okay.

33
00:06:46,840 --> 00:06:52,000
I'll see if I can adjust the audio.

34
00:06:52,000 --> 00:06:57,200
in practice, [name] could also go lower, since I won't be around.

35
00:06:57,200 --> 00:07:02,720
Yeah, he can also... I've set it to

36
00:07:02,720 --> 00:07:07,280
maximum input level, so no more gain there.

37
00:07:07,280 --> 00:07:11,840
I guess [name] should go down. Okay, I made it down a bit.

38
00:07:11,840 --> 00:07:18,640
Okay, in the meantime, welcome everyone to the last day.

39
00:07:18,640 --> 00:07:23,200
So I wonder if everyone is as excited as we are.

40
00:07:26,240 --> 00:07:30,560
There's a lot going on here, or a lot going to go on.

41
00:07:31,200 --> 00:07:33,040
And this is really my favorite day.

42
00:07:34,160 --> 00:07:41,200
Back when we did these in person and I saw my first code refinery workshop,

43
00:07:44,000 --> 00:07:47,120
once we got to the automated testing lesson, I was like

44
00:07:47,120 --> 00:07:47,620
Wow.

45
00:07:47,620 --> 00:07:55,480
This is some of the best exercises and demos I had seen.

46
00:07:55,480 --> 00:07:58,760
Unfortunately, since we're in demo mode now,

47
00:07:58,760 --> 00:08:00,840
you won't do that ourselves.

48
00:08:00,840 --> 00:08:05,080
But you will be able to do it yourself later on.

49
00:08:05,080 --> 00:08:07,160
So yeah.

50
00:08:09,800 --> 00:08:10,300
OK.

51
00:08:10,300 --> 00:08:20,380
Yeah, this is actually a good day, right, because you learned a lot about different

52
00:08:20,380 --> 00:08:26,060
topics and it's more like an hands-on thing, which you can see in more like in practice

53
00:08:26,060 --> 00:08:30,460
what's happening and what you should do, which is good.

54
00:08:30,460 --> 00:08:31,460
Yeah.

55
00:08:31,460 --> 00:08:32,460
Yeah.

56
00:08:32,460 --> 00:08:37,660
Everything we have gone through is kind of coming together in these lessons that we will

57
00:08:37,660 --> 00:08:38,660
have today.

58
00:08:38,660 --> 00:08:39,660
Yeah.

59
00:08:39,660 --> 00:08:49,420
Okay, should we talk about the icebreaker ourselves now? So what's the worst bug you've

60
00:08:49,420 --> 00:08:57,780
seen yourself? And I guess you get to choose, is it a life form bug like someone wrote there

61
00:08:57,780 --> 00:09:04,700
or software bug?

62
00:09:04,700 --> 00:09:18,860
I was working on a software system, a messaging system, and where the, what's it called?

63
00:09:18,860 --> 00:09:24,940
The year when you have 366 days in- Yeah, a leap year.

64
00:09:24,940 --> 00:09:26,660
A leap year, yes.

65
00:09:26,660 --> 00:09:34,680
So the algorithm for leap year wasn't fully, hadn't all the complexity with it.

66
00:09:34,680 --> 00:09:47,880
400 wasn't implemented. So, when the messaging system were tested for the year 2000, messages

67
00:09:47,880 --> 00:09:55,440
disappeared. Yeah. Okay.

68
00:09:55,440 --> 00:10:02,960
For me, it was, I was part of a team working on a robotic thing and the robot has six cameras

69
00:10:02,960 --> 00:10:06,680
as a feed of input and everything was working

70
00:10:06,680 --> 00:10:09,940
on Friday evening, went home, be back on Monday morning,

71
00:10:09,940 --> 00:10:11,080
nothing was working.

72
00:10:12,820 --> 00:10:16,840
And it took us two weeks to figure out the situation

73
00:10:16,840 --> 00:10:18,180
because everything was the same.

74
00:10:18,180 --> 00:10:21,540
No one was like, no changes has been made on the code,

75
00:10:21,540 --> 00:10:23,500
no pushes, nothing.

76
00:10:23,500 --> 00:10:28,500
And it was usually like a cloudy place.

77
00:10:28,780 --> 00:10:32,620
And on the weekend it was sunny and because of all the sun,

78
00:10:32,620 --> 00:10:36,820
the cameras were like 0.2 degrees down.

79
00:10:36,820 --> 00:10:39,740
So the feed of input was completely changed

80
00:10:39,740 --> 00:10:42,460
from the robot's perspective and nothing was working.

81
00:10:42,460 --> 00:10:44,580
Like 0.2 degrees.

82
00:10:44,580 --> 00:10:46,140
Exactly, and nothing, yeah.

83
00:10:46,140 --> 00:10:49,660
And we had to go and calibrate the cameras again.

84
00:10:49,660 --> 00:10:53,180
And from that day, we installed AC in that robotic room.

85
00:10:53,180 --> 00:10:54,020
Okay.

86
00:10:54,020 --> 00:10:54,860
Right.

87
00:10:56,380 --> 00:10:57,220
Yeah.

88
00:10:58,500 --> 00:11:00,180
More like a physical bug.

89
00:11:00,180 --> 00:11:01,020
Yeah.

90
00:11:01,020 --> 00:11:03,740
with. Yeah, that's good.

91
00:11:05,180 --> 00:11:06,700
Reality can be harsh.

92
00:11:07,060 --> 00:11:08,060
Yeah.

93
00:11:09,860 --> 00:11:12,220
When I think of this, I think there was

94
00:11:13,700 --> 00:11:15,780
once I was actually teaching a.

95
00:11:17,340 --> 00:11:19,020
Debugging or testing course

96
00:11:20,420 --> 00:11:23,120
and I had duplicate, I got given

97
00:11:23,140 --> 00:11:25,700
a test file for it and there was

98
00:11:26,220 --> 00:11:27,820
like a function and then another

99
00:11:27,820 --> 00:11:30,020
function and then the first function

100
00:11:30,020 --> 00:11:36,100
copy and paste it again. So everyone would try to debug the first function, but there

101
00:11:36,100 --> 00:11:43,940
was a second copy down below that was overriding it and no one noticed. And this is like, well,

102
00:11:43,940 --> 00:11:54,180
how did I do this? It's like such a bad thing. But yeah, like when the code not doing what

103
00:11:54,180 --> 00:11:57,900
I expect because of copying or something.

104
00:11:57,900 --> 00:11:59,500
That's always the worst.

105
00:12:00,780 --> 00:12:01,620
Oh, okay.

106
00:12:03,220 --> 00:12:05,420
Yeah, someone is mentioning about that.

107
00:12:05,420 --> 00:12:08,900
How the strike update and the mess in the airport

108
00:12:08,900 --> 00:12:12,020
and everywhere, the ATMs, banks, and yeah.

109
00:12:12,020 --> 00:12:14,060
That was a serious bug.

110
00:12:14,060 --> 00:12:15,020
Yeah.

111
00:12:15,020 --> 00:12:16,540
Yeah.

112
00:12:16,540 --> 00:12:18,380
I don't know if you noticed that the tweet

113
00:12:18,380 --> 00:12:20,540
of the responsible person or not,

114
00:12:20,540 --> 00:12:22,540
but there was a tweet from the responsible person

115
00:12:22,540 --> 00:12:30,940
who got hired, he made a picture of himself on the first day, and he did a mistake. And

116
00:12:30,940 --> 00:12:38,860
a couple of days after, unfortunately, he got fired. It wasn't, yeah, it was unfortunate.

117
00:12:38,860 --> 00:12:45,260
But that's really a problem in the processes more than any one person. As they say, if

118
00:12:45,260 --> 00:12:50,580
a person can do that, then it's, yeah.

119
00:12:50,580 --> 00:12:51,080
Yeah.

120
00:12:53,880 --> 00:12:55,760
There are some practices that you can follow,

121
00:12:55,760 --> 00:12:58,440
like not do any changes on Friday,

122
00:12:58,440 --> 00:13:01,920
or when no one is on call on these systems.

123
00:13:01,920 --> 00:13:04,560
But again, yeah, it's more about the processes

124
00:13:04,560 --> 00:13:09,520
and you shouldn't blame someone for these kind of things.

125
00:13:09,520 --> 00:13:12,520
Yeah.

126
00:13:12,520 --> 00:13:13,560
It's almost time.

127
00:13:13,560 --> 00:13:15,000
Should we get ready to start, or do

128
00:13:15,000 --> 00:13:19,080
want to answer any more of these questions.

129
00:13:19,080 --> 00:13:23,000
What about the last question? You just got an idea for how to change your code,

130
00:13:23,000 --> 00:13:27,400
how do you make sure it keeps working after the change?

131
00:13:28,360 --> 00:13:33,160
Yeah, lots of if and prints, that's typical.

132
00:13:34,120 --> 00:13:40,840
But does that solve it if it's changing?

133
00:13:40,840 --> 00:13:47,080
Is that more for debugging or for like, how do you use that to keep it working?

134
00:13:47,080 --> 00:13:48,080
Yeah.

135
00:13:48,080 --> 00:13:54,480
A lot of output to verify that the steps taken are correct.

136
00:13:54,480 --> 00:13:55,480
Yeah.

137
00:13:55,480 --> 00:13:59,440
It's like, it's like adding testing, right?

138
00:13:59,440 --> 00:14:06,040
Even outputs, because you're just testing like at some level that what is the expected

139
00:14:06,040 --> 00:14:09,040
output and you're trying to like test it manually.

140
00:14:09,040 --> 00:14:10,040
Right.

141
00:14:10,040 --> 00:14:12,640
So it's like a manual testing thing, and you're looking at it.

142
00:14:12,640 --> 00:14:15,680
OK, yeah, yeah.

143
00:14:15,680 --> 00:14:16,720
Yeah.

144
00:14:16,720 --> 00:14:17,800
OK.

145
00:14:17,800 --> 00:14:20,640
Well, with that said, I guess it is time now.

146
00:14:20,640 --> 00:14:25,400
So maybe I will disappear and leave you to testing.

147
00:14:28,240 --> 00:14:29,120
Is that good?

148
00:14:29,120 --> 00:14:31,240
Anything else you need?

149
00:14:31,240 --> 00:14:35,520
No, I think that's good.

150
00:14:35,520 --> 00:14:36,400
OK.

151
00:14:36,400 --> 00:14:45,760
Then I'll switch to your screen. Yeah. And see you later. See you later. Okay, bye.

152
00:14:46,560 --> 00:14:52,960
Good morning, everyone. I'm [name]. I'm sitting at the Norwegian University of Technology

153
00:14:52,960 --> 00:14:59,040
and Science, where I work in the HPC group. And together with me today, I have [name].

154
00:15:00,080 --> 00:15:05,280
A few words about you, [name]. Yes, good morning, everyone. I was here the other day as well,

155
00:15:05,280 --> 00:15:09,120
and one of the RSA's research software engineers at Aalto University. Happy to be here.

156
00:15:10,720 --> 00:15:16,400
So we'll discuss automated testing from now on in the next two hours.

157
00:15:17,520 --> 00:15:19,680
So you find the lesson under day six.

158
00:15:22,400 --> 00:15:30,320
So my experience, first experience with testing was when I worked in a software development

159
00:15:30,320 --> 00:15:38,960
company in the mid 90s and the process were very fast like we would develop

160
00:15:38,960 --> 00:15:46,680
code 8 to 12 weeks and then there was four weeks of intensive testing before

161
00:15:46,680 --> 00:15:55,560
we shipped the application so we were not exposed to any agile methods at that

162
00:15:55,560 --> 00:16:05,240
time. Those came much later after year 2000. So what's your experience with testing, [name]?

163
00:16:07,160 --> 00:16:13,880
So when I was starting, it was part of the agile and like test-driven development thing.

164
00:16:14,520 --> 00:16:20,520
And so I was familiar with the concept, but when I got hands experience, it was

165
00:16:20,520 --> 00:16:27,640
mainly in the industry experience that I had because sometimes in academia people think that

166
00:16:27,640 --> 00:16:35,160
okay my program is not that long or it's not very complicated so I can maybe get rid of the testing

167
00:16:35,160 --> 00:16:41,000
and forget about that part but when you are doing some production thing it's one of the necessary

168
00:16:41,000 --> 00:16:46,920
things that you had to do before you merge anything into the production. That's right,

169
00:16:46,920 --> 00:16:52,040
So have you experienced any of these problems that you change B and C and

170
00:16:53,400 --> 00:16:57,800
function A doesn't work anymore? I can say all the time.

171
00:16:59,000 --> 00:17:06,200
All the time, yes. Yeah, if it works, I would be more suspicious that, okay,

172
00:17:06,200 --> 00:17:10,680
like, is everything working correctly? Because it shouldn't, but yeah.

173
00:17:10,680 --> 00:17:15,680
Yeah, and writing tests sometimes seems like a long way

174
00:17:16,000 --> 00:17:17,280
to get a solution.

175
00:17:17,280 --> 00:17:22,280
So it's something that we are not always prioritize,

176
00:17:24,160 --> 00:17:27,600
but hopefully we'll see it with today's lesson

177
00:17:27,600 --> 00:17:32,600
is that it can be really useful to have tests

178
00:17:33,280 --> 00:17:36,200
and these can be automated.

179
00:17:36,200 --> 00:17:40,200
Yes, exactly.

180
00:17:40,200 --> 00:17:44,200
I would say that intensive test that you mentioned at the beginning

181
00:17:44,200 --> 00:17:48,200
is still a thing and some

182
00:17:48,200 --> 00:17:52,200
companies still do that, especially for security and to make

183
00:17:52,200 --> 00:17:56,200
sure that their application, their product is robust enough. But adding

184
00:17:56,200 --> 00:18:00,200
automated testing can do a lot in time of

185
00:18:00,200 --> 00:18:04,200
production and in time of software developing for the team.

186
00:18:04,200 --> 00:18:13,800
That's right. And the tests are very good when you get someone else's code. And especially

187
00:18:13,800 --> 00:18:20,240
code that you have written long ago. So, when you change something, you can see if things

188
00:18:20,240 --> 00:18:22,440
breaks or not.

189
00:18:22,440 --> 00:18:28,240
Correct. And also, like, at least for me, sometimes it really helps that when you get

190
00:18:28,240 --> 00:18:33,600
someone else's code, sometimes you don't understand what does a function do. And you look at a

191
00:18:33,600 --> 00:18:38,480
test and you get an idea that okay this function is supposed to do this because you can see

192
00:18:38,480 --> 00:18:42,320
what is the expected result of that specific function for example. Yes that's right.

193
00:18:44,800 --> 00:18:51,280
So today these lessons will discuss a little bit about motivation for tests.

194
00:18:52,320 --> 00:18:59,440
We are given some motivation now but we will go deeper into that. We will then show an example

195
00:18:59,440 --> 00:19:07,280
of where we test locally, just to have a local repository with some code and run tests.

196
00:19:09,760 --> 00:19:15,920
We will then move to GitHub and show how we can have automated testing as a part of

197
00:19:17,280 --> 00:19:26,400
doing pull requests or merges. Then we have a bunch of code where

198
00:19:26,400 --> 00:19:34,040
our tests that we will discuss under test designs before we conclude and come with some

199
00:19:34,040 --> 00:19:41,640
recommendations. Great, let's get into it.

200
00:19:41,640 --> 00:19:51,600
Yeah. We will focus on Python and use PyTest during the day. So there are examples with

201
00:19:51,600 --> 00:19:57,840
other languages, but we will not go into these. We will not demonstrate those. So those who

202
00:19:57,840 --> 00:20:08,480
are interested in R or C++ can take a look for themselves after the lesson.

203
00:20:08,480 --> 00:20:17,360
Okay, so let's see here about the motivation. Untested software can be compared to uncalibrated

204
00:20:17,360 --> 00:20:26,720
detectors yes that's something we know from the laboratory that if you have an instrument or a

205
00:20:26,720 --> 00:20:38,320
detector it should be calibrated with some known sample before being used for experiments and here

206
00:20:38,320 --> 00:20:48,600
Here we have the the statement that software should be treated equally that with tests

207
00:20:48,600 --> 00:21:00,280
we can use software are calibrated and then it shows that it's ready for being used for

208
00:21:00,280 --> 00:21:05,740
an experiment.

209
00:21:05,740 --> 00:21:14,060
There are some horror stories. We have two links to research software stories about research

210
00:21:14,060 --> 00:21:26,600
software where things have gone wrong. So we have this scientist's nightmare that a scientist

211
00:21:26,600 --> 00:21:31,600
had to retract papers because there was some tables

212
00:21:31,760 --> 00:21:33,220
that were mixed.

213
00:21:36,160 --> 00:21:40,960
And there are also this Python bug

214
00:21:40,960 --> 00:21:45,680
where results of an analysis

215
00:21:47,240 --> 00:21:50,080
were different on different operating system

216
00:21:51,640 --> 00:21:56,360
due to how the sorting mechanism of the file system

217
00:21:56,600 --> 00:22:04,360
worked. So the correction of the error was to implement a sort

218
00:22:04,360 --> 00:22:07,880
function that worked equally on across all platforms.

219
00:22:10,520 --> 00:22:14,040
Have you experienced anything like that [name]?

220
00:22:18,040 --> 00:22:21,400
Not on top of my mind but I was thinking maybe we can also

221
00:22:21,400 --> 00:22:25,480
add the CrowdStrike one that someone mentioned in the icebreaker for the future

222
00:22:25,480 --> 00:22:33,160
because it's something that affected a lot of people and everyone has heard of that so yeah.

223
00:22:33,720 --> 00:22:41,720
That's right. So how does a test look? Here we have a Python test, we have a function

224
00:22:42,840 --> 00:22:52,440
called Fahrenheit to Celsius and we have written a test of that function.

225
00:22:52,440 --> 00:23:04,000
So we have a temperature in Fahrenheit and calculate the expected is to calculate the

226
00:23:04,000 --> 00:23:15,880
temperature in Celsius and compare it to an expected result and here we see that we test

227
00:23:15,880 --> 00:23:20,880
for user numerical tests so that we,

228
00:23:23,440 --> 00:23:27,700
so that the results are within the expected tolerance.

229
00:23:32,800 --> 00:23:35,440
We will see an example later where we test

230
00:23:35,440 --> 00:23:39,640
with the user numerical test and use equal signs

231
00:23:39,640 --> 00:23:44,640
and then the test fails though the error is small.

232
00:23:45,880 --> 00:23:53,820
Of course, you can test the whole programs.

233
00:23:53,820 --> 00:24:03,980
So here is an example that we just test an application and get the message that this

234
00:24:03,980 --> 00:24:09,520
is correct.

235
00:24:09,520 --> 00:24:19,880
So what can head tests help you to do? It can preserve expected functionality. You check

236
00:24:19,880 --> 00:24:28,520
that all things don't break. As [name] talked about, it can help users of the code that

237
00:24:28,520 --> 00:24:38,340
you see that you, yeah, verify that the software is installed correctly. But also you see,

238
00:24:38,340 --> 00:24:48,260
the examples of what it should do. When we have installed software on high-performance

239
00:24:48,260 --> 00:24:56,960
computing systems, there is often test suites together with the software, and then we run

240
00:24:56,960 --> 00:25:06,720
this test suite to verify that the installation is correct.

241
00:25:06,720 --> 00:25:13,880
It can help other developers to modify the code, so that you verify that the change that

242
00:25:13,880 --> 00:25:20,560
you made to the code is not breaking anything.

243
00:25:20,560 --> 00:25:24,320
It can manage complexity.

244
00:25:24,320 --> 00:25:28,160
If code is easy to test, it's probably easier to maintain.

245
00:25:28,160 --> 00:25:30,860
So this will also be shown

246
00:25:30,860 --> 00:25:34,300
in a less modular code development.

247
00:25:35,740 --> 00:25:40,180
Okay, so let's have a discussion.

248
00:25:43,380 --> 00:25:48,380
We can have a discussion in the shared document.

249
00:25:48,380 --> 00:26:02,860
Let me add it to them.

250
00:26:02,860 --> 00:26:10,460
So we'll vote in the notes and we'll discuss the results.

251
00:26:10,460 --> 00:26:33,140
So, I added questions and feel free to add some O's and choose as many as you want.

252
00:26:40,460 --> 00:27:01,200
And we'll give you a few minutes to answer the questions.

253
00:27:01,200 --> 00:27:02,820
So what is your personal experience?

254
00:27:02,820 --> 00:27:07,100
Do you like add tests all the time or?

255
00:27:07,100 --> 00:27:11,940
I try to use test-driven development when I write code.

256
00:27:14,020 --> 00:27:16,420
I'm not always sticking to that principle,

257
00:27:16,420 --> 00:27:19,220
but mostly I try to.

258
00:27:19,220 --> 00:27:23,260
So we will give an example of that later, what that is.

259
00:27:23,260 --> 00:27:26,140
But then I'll write the test

260
00:27:26,140 --> 00:27:30,020
before I write the function or class.

261
00:27:34,540 --> 00:27:35,940
Yeah.

262
00:27:35,940 --> 00:27:40,020
So when I'm finished developing, then I have a set of,

263
00:27:41,000 --> 00:27:43,300
ideally, I have a set of tests

264
00:27:43,300 --> 00:27:45,520
and a set of soft functions.

265
00:27:49,340 --> 00:27:54,340
But it's ideally, it's not like that every time.

266
00:27:55,780 --> 00:27:56,620
What about you?

267
00:27:58,900 --> 00:28:03,500
I would try to like add enough tests, I would say,

268
00:28:03,500 --> 00:28:06,580
But by enough, I mean I would try

269
00:28:06,580 --> 00:28:10,700
to go with more complex functions that could go break

270
00:28:10,700 --> 00:28:13,780
and could go wrong in a way when the program gets

271
00:28:13,780 --> 00:28:15,460
more complicated.

272
00:28:15,460 --> 00:28:19,220
And if I'm just having one shorter script,

273
00:28:19,220 --> 00:28:21,140
I would skip doing the testings.

274
00:28:24,180 --> 00:28:27,140
But yeah, I was actually mentioning on the notes

275
00:28:27,140 --> 00:28:31,460
as well that these days, I'm getting

276
00:28:31,460 --> 00:28:34,560
more used to using this generative AI models

277
00:28:34,560 --> 00:28:36,900
to help me to write the tests.

278
00:28:36,900 --> 00:28:40,140
And yeah, the experience was good enough.

279
00:28:40,140 --> 00:28:40,640
Yeah.

280
00:28:45,220 --> 00:28:48,700
Because in the end, it's a program that has some tests.

281
00:28:48,700 --> 00:28:51,300
It's better than a program that doesn't have any.

282
00:28:51,300 --> 00:28:54,260
And the more you add, the more robust your program

283
00:28:54,260 --> 00:28:56,540
would be for the future changes.

284
00:28:56,540 --> 00:28:59,620
And yeah.

285
00:28:59,620 --> 00:29:08,260
Yeah, so let's see, take a look at the responses.

286
00:29:19,140 --> 00:29:21,820
So when is it okay not to add tests?

287
00:29:21,820 --> 00:29:34,080
jupyter or markdown notebook which produces a plot that can be hard to test yeah i think

288
00:29:34,080 --> 00:29:47,180
you will manually verify a plot by looking at it a short obvious correct python script

289
00:29:47,180 --> 00:29:50,100
which you never intend to reuse.

290
00:29:50,100 --> 00:29:53,220
Well, some things that is okay not to test.

291
00:29:54,300 --> 00:29:57,300
If it's very obvious and it's very short,

292
00:29:57,300 --> 00:30:00,160
I think it's very good to add a test really.

293
00:30:05,740 --> 00:30:07,940
What's here, once I heard that someone said,

294
00:30:07,940 --> 00:30:11,860
go to the library and find ungraded thesis.

295
00:30:11,860 --> 00:30:14,180
Under grad thesis, find the word obviously

296
00:30:14,180 --> 00:30:16,580
and you will always find an error.

297
00:30:16,580 --> 00:30:17,420
Okay.

298
00:30:24,960 --> 00:30:29,040
Let's see, is there any questions here

299
00:30:29,040 --> 00:30:31,580
that we should discuss?

300
00:30:34,400 --> 00:30:36,480
How do you recommend people test your code

301
00:30:36,480 --> 00:30:39,200
before publications?

302
00:30:39,200 --> 00:30:41,080
Like to make sure each line of code

303
00:30:41,080 --> 00:30:42,780
is doing what it's supposed to do.

304
00:30:47,060 --> 00:30:49,060
Yeah

305
00:30:50,820 --> 00:30:52,820
Yeah

306
00:30:55,300 --> 00:30:58,820
And we have some answers for this one, maybe we can address the second question

307
00:31:00,420 --> 00:31:03,140
Which there is no answer yet for it

308
00:31:05,940 --> 00:31:12,040
So the question is I mostly develop software to analyze my experiment or keep track of changes in variables in experiments

309
00:31:12,040 --> 00:31:17,480
I'm not sure how I should incorporate tests when developing this software.

310
00:31:17,480 --> 00:31:22,240
Would it be okay to just have a simpler check, for example, for reference samples and ensures

311
00:31:22,240 --> 00:31:25,360
that it gives the proper results?

312
00:31:25,360 --> 00:31:32,160
I think we will discuss it a bit in this session about a similar thing, like the factorial

313
00:31:32,160 --> 00:31:33,800
functions that we have.

314
00:31:33,800 --> 00:31:48,680
Yes, in the test design session, we will touch upon this. But the short answer is that you

315
00:31:48,680 --> 00:31:57,280
could use mocking for handling external references.

316
00:31:57,280 --> 00:31:58,920
Hm.

317
00:31:58,920 --> 00:32:01,000
Correct.

318
00:32:01,000 --> 00:32:02,120
Yeah.

319
00:32:02,120 --> 00:32:04,960
So my experience was just to add some sample tests

320
00:32:04,960 --> 00:32:08,520
that you want to make sure that the function works correctly.

321
00:32:08,520 --> 00:32:13,600
And also, the rule of thumb is to take care of the,

322
00:32:13,600 --> 00:32:16,720
how should I say, like the edges, like the barriers.

323
00:32:16,720 --> 00:32:17,640
Yeah, right.

324
00:32:17,640 --> 00:32:18,160
Yes.

325
00:32:18,160 --> 00:32:20,560
So that is something to keep in mind.

326
00:32:20,560 --> 00:32:24,120
And I guess if you add those ones, you are good to go.

327
00:32:27,280 --> 00:32:37,680
So, there's some questions about general generative IE.

328
00:32:37,680 --> 00:32:43,720
Are there any generative IE to integrate into your local computer?

329
00:32:43,720 --> 00:32:44,720
Yes.

330
00:32:44,720 --> 00:32:56,600
There, you often, you have to buy a license or a subscription, at least JetBrains editors

331
00:32:56,600 --> 00:33:01,600
have an AI agent incorporated which you can subscribe to?

332
00:33:05,400 --> 00:33:08,720
There are like some other models that you can use.

333
00:33:08,720 --> 00:33:13,280
For example, like Olama supports many of the models

334
00:33:13,280 --> 00:33:15,320
that you can run locally on your machine.

335
00:33:15,320 --> 00:33:19,360
And there are like some IDEs like cursor or even VS code

336
00:33:19,360 --> 00:33:21,600
that you can integrate these AI models

337
00:33:21,600 --> 00:33:26,360
into your development environment.

338
00:33:26,360 --> 00:33:28,820
So you don't have to necessarily buy a subscription,

339
00:33:28,820 --> 00:33:33,820
but usually those ones are more easy and plug and play.

340
00:33:34,940 --> 00:33:37,380
So if you don't afraid to get your hands a bit dirty,

341
00:33:37,380 --> 00:33:39,620
you can try to the open source ones

342
00:33:39,620 --> 00:33:43,020
and integrate it into your local machine, yeah.

343
00:33:43,020 --> 00:33:45,580
Okay, but I guess you have to get your hands dirty.

344
00:33:45,580 --> 00:33:49,020
A bit, nowadays it's more like developed,

345
00:33:49,020 --> 00:33:51,340
I would say like Oldama, for example,

346
00:33:51,340 --> 00:33:54,620
which I can add it here actually in the comments,

347
00:33:54,620 --> 00:33:56,140
has a lot of supported models.

348
00:33:56,140 --> 00:34:01,820
you can use it. Usually the problem is actually with the hardware because your personal laptop

349
00:34:01,820 --> 00:34:07,820
probably doesn't have enough memory or graphical memory to run more fancy models.

350
00:34:09,820 --> 00:34:11,100
But yeah, you can give it a try.

351
00:34:14,220 --> 00:34:19,260
So question four here, how to test code with random inputs. We will

352
00:34:20,300 --> 00:34:23,900
show an example with random numbers in the test design episode.

353
00:34:23,900 --> 00:34:33,660
We will not test, how to test a GUI code, we will not touch upon that.

354
00:34:33,660 --> 00:34:41,340
We are terminal based, we don't do much with the GUI.

355
00:34:41,340 --> 00:34:49,140
Okay so let's go back to the lesson.

356
00:34:49,140 --> 00:34:56,140
So there are a range of types of tests.

357
00:34:56,140 --> 00:35:03,660
What we gave an example of early on was a unit test.

358
00:35:03,660 --> 00:35:09,900
And that's typically what you develop together with your functions unit tests.

359
00:35:09,900 --> 00:35:18,740
Then you have integration tests where you put the parts together and verify that it works.

360
00:35:18,740 --> 00:35:21,460
end-to-end test where you see that the application

361
00:35:21,460 --> 00:35:24,900
produce the expected result.

362
00:35:28,300 --> 00:35:33,300
Regression tests, you collect a portfolio of old errors

363
00:35:34,980 --> 00:35:39,220
and implement tests for these that they are kept out

364
00:35:39,220 --> 00:35:43,080
of the, that they don't reappear in the code.

365
00:35:43,080 --> 00:35:52,840
You have test-driven development, where you write a test first and then development code

366
00:35:52,840 --> 00:35:57,160
to verify that the test works or breaks and then improve the code.

367
00:35:57,160 --> 00:36:05,880
I'll try to give a sample of that under test design.

368
00:36:05,880 --> 00:36:06,880
Continuous integration.

369
00:36:06,880 --> 00:36:11,880
You have a portfolio of tests that you run on GitLab

370
00:36:13,100 --> 00:36:17,820
or GitHub as a part of a merge or a pull request.

371
00:36:17,820 --> 00:36:20,540
That we'll see an example of that.

372
00:36:23,420 --> 00:36:26,260
You have code coverage, that's a report

373
00:36:26,260 --> 00:36:30,140
that tells you which lines are run or tested

374
00:36:30,140 --> 00:36:31,220
and which are not.

375
00:36:32,620 --> 00:36:36,520
And there are different frameworks for running a test.

376
00:36:36,880 --> 00:36:51,200
We use PyTest in these examples that we will show today.

377
00:36:51,200 --> 00:36:53,280
So what should you do?

378
00:36:53,280 --> 00:36:56,960
Well, not every code needs perfect test coverage.

379
00:36:56,960 --> 00:37:02,480
You don't have to go for 100% coverage of the tests.

380
00:37:02,480 --> 00:37:11,240
But a reasonably high coverage is good.

381
00:37:11,240 --> 00:37:22,360
An interactive Jupyter notebook that we saw yesterday is hard to test.

382
00:37:22,360 --> 00:37:24,600
End-to-end test is often easy.

383
00:37:24,600 --> 00:37:32,040
I find it often easy to write tests for functions, to isolate functions and write unit tests.

384
00:37:37,080 --> 00:37:42,200
Add tests of tricky functions, yes. And it's easy to have GitLab,

385
00:37:42,200 --> 00:37:45,480
GitRub run tests. We will show this today.

386
00:37:45,480 --> 00:38:02,360
Where do you start? Well start simple. Here the recommendation is start with an end-to-end

387
00:38:02,360 --> 00:38:12,000
test. I would say that as you get acquainted with the code you should try to add tests

388
00:38:12,000 --> 00:38:16,320
for functions that you after a while understands.

389
00:38:18,520 --> 00:38:19,360
Describe in words,

390
00:38:19,360 --> 00:38:21,600
how you check whether the code still works

391
00:38:23,000 --> 00:38:25,640
and translate the words into scripts

392
00:38:26,640 --> 00:38:30,840
and run these scripts automatically on every code change.

393
00:38:34,480 --> 00:38:35,880
Anything more to add?

394
00:38:37,240 --> 00:38:40,560
Or we go to local testing?

395
00:38:40,560 --> 00:38:41,400
Yeah, sure.

396
00:38:42,360 --> 00:38:44,400
Yeah, we can go to the next section, yeah.

397
00:38:45,720 --> 00:38:49,480
Then we'll start a demonstration

398
00:38:49,480 --> 00:38:52,640
of how we can have a local testing.

399
00:38:57,840 --> 00:39:02,360
So I'll show my terminal here.

400
00:39:02,360 --> 00:39:21,480
So, in this exercise we'll make a simple function and use pytest for testing that function.

401
00:39:21,480 --> 00:39:26,480
I'll make the directory local testing example

402
00:39:29,720 --> 00:39:31,640
and cd into that.

403
00:39:36,520 --> 00:39:40,560
The Python code shows here that we have a function add

404
00:39:42,220 --> 00:39:45,680
and in the same,

405
00:39:45,680 --> 00:39:58,680
Together with the add function we have a test function, test add, which uses the add function.

406
00:39:58,680 --> 00:40:09,240
So I'll copy this code.

407
00:40:09,240 --> 00:40:36,200
a file example.py here we have pasted the code into the file

408
00:40:36,200 --> 00:40:46,240
So I'll save it and I run this with PyTest, PyTest is if you install have installed the

409
00:40:46,240 --> 00:40:55,680
code refinery conda environment, PyTest is a part of the environment and then you can

410
00:40:55,680 --> 00:41:00,680
Just write PyTest example.py,

411
00:41:02,760 --> 00:41:06,200
and we see that the test passed.

412
00:41:06,200 --> 00:41:10,520
I'll have dash v there

413
00:41:10,520 --> 00:41:15,520
for getting for more verbose feedback from PyTest.

414
00:41:18,880 --> 00:41:21,800
Can you run it without the dash v and...

415
00:41:21,800 --> 00:41:24,080
Yeah, I can do that.

416
00:41:25,680 --> 00:41:31,480
Then there is less output it just.

417
00:41:31,480 --> 00:41:39,960
But how does PyTest understand like what functions to test and how does it work?

418
00:41:39,960 --> 00:41:50,920
PyTest looks for a functions that called does start with test underscore and so it understands

419
00:41:50,920 --> 00:41:55,920
that test add is a function that it needs to execute.

420
00:42:02,200 --> 00:42:04,240
Okay, great.

421
00:42:05,280 --> 00:42:10,280
So let's add a bug to the code.

422
00:42:12,960 --> 00:42:17,960
So if we modify add to do some shortcuts

423
00:42:20,920 --> 00:42:26,520
subtraction instead then we have an error in our code

424
00:42:30,520 --> 00:42:35,480
and PyTest will then give us a red warning

425
00:42:37,800 --> 00:42:39,640
minus v example

426
00:42:42,040 --> 00:42:44,040
so here we see that the test fails

427
00:42:44,040 --> 00:42:53,320
And it shows where in the test function that the error pops up.

428
00:42:53,320 --> 00:43:02,360
It runs assert add to command 3, supposed to be equal 5.

429
00:43:02,360 --> 00:43:07,480
But the function returns minus 1. And that's not equal to 5.

430
00:43:07,480 --> 00:43:31,080
the assert fails yes so so we have a question that i'm trying i'm answering on the note but

431
00:43:31,080 --> 00:43:33,900
but I think it's good for everyone to hear.

432
00:43:34,840 --> 00:43:35,940
Like someone asked,

433
00:43:37,200 --> 00:43:39,400
when you have like several functions to test,

434
00:43:39,400 --> 00:43:42,340
is it okay to put your test underscore functions

435
00:43:42,340 --> 00:43:44,880
for testing the functions in a different script

436
00:43:44,880 --> 00:43:46,780
so the original one is easier to read?

437
00:43:49,880 --> 00:43:54,880
Yes, that is a very good thing to do.

438
00:43:55,200 --> 00:43:57,760
Either have a subdirectory tests

439
00:43:57,760 --> 00:43:59,780
where you have the test functions

440
00:43:59,780 --> 00:44:04,540
and then import the functions from the source directory

441
00:44:04,540 --> 00:44:08,160
or have a source directory with separate files

442
00:44:08,160 --> 00:44:11,320
for the functions and the test of the functions.

443
00:44:14,300 --> 00:44:15,140
Yes, thanks.

444
00:44:17,220 --> 00:44:22,220
Okay, let's add a test which checks for being equal

445
00:44:22,220 --> 00:44:30,540
a test which checks for being equal to 0.3

446
00:44:33,900 --> 00:44:44,060
I'll and see how that goes

447
00:44:44,060 --> 00:45:06,340
I'll correct the add function and then we assert for okay oh just add the assert here

448
00:45:06,340 --> 00:45:25,660
So we have a third assert which checks for the addition of 0.1 and 0.2.

449
00:45:25,660 --> 00:45:43,900
And then we see that we get a floating point error or the floating point arithmetic plays

450
00:45:43,900 --> 00:45:48,220
as a puzzle.

451
00:45:48,220 --> 00:46:01,420
we add 0.1 and 0.2 we get 0.3, 0.0, 0, a lot of 0.4 which and the assert is that is not

452
00:46:01,420 --> 00:46:07,700
correct.

453
00:46:07,700 --> 00:46:13,580
Can you can you explain a bit like why it doesn't raise an error like why that where did that

454
00:46:13,580 --> 00:46:15,580
0004 api

455
00:46:16,780 --> 00:46:19,660
Why it does as a given error

456
00:46:20,540 --> 00:46:24,880
Uh, I mean like, uh in the function you're trying to add 0.1 and 0.2

457
00:46:25,900 --> 00:46:28,060
And the results should be 0.2, right but

458
00:46:29,100 --> 00:46:31,100
0.2 but 0.3

459
00:46:31,580 --> 00:46:33,980
Yes, sorry, like like the assert says but

460
00:46:34,700 --> 00:46:35,740
Yes

461
00:46:35,740 --> 00:46:37,760
So where did the 00004

462
00:46:39,260 --> 00:46:41,260
Appears out of nowhere

463
00:46:41,420 --> 00:46:43,260
Where did it appear?

464
00:46:43,260 --> 00:46:51,020
It comes from the presentation of the numbers. So this is how

465
00:46:54,700 --> 00:47:01,500
floating point numbers are represented digitally in the computer.

466
00:47:03,580 --> 00:47:11,180
We don't have a continuum of decimals or numbers. We just have

467
00:47:13,260 --> 00:47:29,220
discrete numbers and adding 0.1, 0.2, then give us 0.3, 0.0, 0.4 which is not equal to

468
00:47:29,220 --> 00:47:41,740
0.3. So we have to test for tolerance, numerical tolerance for this assert to go read through

469
00:47:41,740 --> 00:48:04,260
them. So how do you do that? Let's see. We need to modify the test and run PyTest import

470
00:48:04,260 --> 00:48:30,740
We assert that the add function approximates 0.3.

471
00:48:30,740 --> 00:48:45,340
I think this will do the trick, type pytest-vexample.py, yes and now the test passes.

472
00:48:45,340 --> 00:48:53,420
So there's a link there to what every programmer should know about floating point arithmetic.

473
00:48:53,420 --> 00:48:58,200
so that it gives further details of why this fails happens.

474
00:49:06,860 --> 00:49:11,860
Okay, so this is how we can test locally.

475
00:49:15,620 --> 00:49:18,100
Each test framework has its way of collecting

476
00:49:18,100 --> 00:49:19,620
and running all test functions.

477
00:49:19,620 --> 00:49:32,140
like here it's PyTest selects tests starting with test underscore. Python, Julia, C++ has

478
00:49:32,140 --> 00:49:42,140
better tools for automated tests than Fortran. So then you can use some of those tools for

479
00:49:42,140 --> 00:49:58,060
Fortran as well if you use ISO C bonding. Okay. Any more questions or any more thing to add?

480
00:49:59,660 --> 00:50:04,860
No everything is also answered in the notes. Okay. So we are good to go.

481
00:50:04,860 --> 00:50:15,340
Then we'll start with today's main lesson.

482
00:50:15,340 --> 00:50:16,340
Automatic testing.

483
00:50:16,340 --> 00:50:20,980
How we can do use continuous integration.

484
00:50:20,980 --> 00:50:27,580
So this will show how we can implement automatic testing and each time we push changes to our

485
00:50:27,580 --> 00:50:28,580
repository.

486
00:50:28,580 --> 00:50:45,300
And we will also use the auto-close mechanism when we commit messages.

487
00:50:45,300 --> 00:50:51,860
So what does continuous integration mean in general, because we see like CICD, what does

488
00:50:51,860 --> 00:50:56,700
it mean?

489
00:50:56,700 --> 00:51:10,300
means that you have actions or processes that runs when you do check-in that for every change you do

490
00:51:10,300 --> 00:51:23,660
to the code base that you verify that there is basic functionality or that the basic functionality

491
00:51:23,660 --> 00:51:38,460
is not broken. That the code can be used for whatever purpose it has. And this is a way

492
00:51:38,460 --> 00:51:46,420
to protect the main branch for instance. So that you always know that the main branch

493
00:51:46,420 --> 00:51:56,340
it's a working version of your software. Yes. Okay, yeah. It's something that

494
00:51:56,900 --> 00:52:01,220
in production they follow. So yeah, thanks for explaining.

495
00:52:03,780 --> 00:52:12,500
Yes, so it's very important in agile development because then you can have

496
00:52:12,500 --> 00:52:25,940
have continuous delivery or very short cycles for publishing or shipping your software.

497
00:52:25,940 --> 00:52:34,820
So like Google for instance, they are more or less updating the software, Gmail software

498
00:52:34,820 --> 00:52:45,140
continuously so you never know you don't you don't relate to any new versions of the software

499
00:52:45,140 --> 00:52:52,980
really you just use the code and you use the application and and it changes us that's from

500
00:52:52,980 --> 00:52:59,620
can change from time to time but you're not you're not involved in selecting the specific versions

501
00:52:59,620 --> 00:53:20,500
Okay. So I'll create a code repository on GitHub. And then I'll add some code to that

502
00:53:20,500 --> 00:53:34,180
repository. I will then set up a test with GitHub Actions and see how it plays out.

503
00:53:34,180 --> 00:53:44,380
We'll introduce a bug in the repository and then create an issue and you will

504
00:53:44,380 --> 00:53:53,820
helping me fixing the bug and we will see and how when you make all requests how the

505
00:53:53,820 --> 00:54:07,260
test is then executed and to verify that your changes is correct yeah and yeah as a last

506
00:54:07,260 --> 00:54:17,580
step will also introduce more tests to increase the coverage of the soft or of the function.

507
00:54:17,580 --> 00:54:25,820
Yeah so I would say this is a very interesting section and this is the basics of what's happened

508
00:54:25,820 --> 00:54:32,180
in collaboration when you are collaborating with others and you want to make sure that

509
00:54:32,180 --> 00:54:36,460
the latest version of your code is working and still you are working on fixing a bug

510
00:54:36,460 --> 00:54:39,940
or adding a new feature or adding some new experiments

511
00:54:39,940 --> 00:54:41,340
to the code.

512
00:54:41,340 --> 00:54:44,820
And yeah, this is the basics of what's happening

513
00:54:44,820 --> 00:54:46,580
actually both in industry and academia

514
00:54:46,580 --> 00:54:48,620
when you're collaborating with others.

515
00:54:48,620 --> 00:54:49,460
Yes.

516
00:54:49,460 --> 00:54:52,020
So yeah, let's go.

517
00:54:52,020 --> 00:54:56,580
So here I'll, here's my repost, no, here's my namespace.

518
00:54:57,900 --> 00:55:02,140
So I'll create a new repository

519
00:55:02,140 --> 00:55:22,980
called example-ci. It's available. This is an example of continuous integration. It's

520
00:55:22,980 --> 00:55:45,060
it's public. I read my file and add Python gitignore MIT license. Then I create my repository.

521
00:55:45,060 --> 00:56:06,020
I'll clone the repository to my local computer, git clone and git string, so I'm cloning the

522
00:56:06,020 --> 00:56:19,460
example CI. I step into the subdirectory example.CI. So what more should I do then? I'll add some

523
00:56:19,460 --> 00:56:35,740
code. Let's see here. So I'll add a file functions.py which then contains four functions. Add, substring,

524
00:56:35,740 --> 00:56:44,900
Subtract, multiply and convert Fahrenheit to Celsius.

525
00:56:44,900 --> 00:56:45,900
Copy.

526
00:56:45,900 --> 00:56:46,900
Vim-function.py.

527
00:56:46,900 --> 00:57:04,980
There I added the base of the function and I save the file.

528
00:57:04,980 --> 00:57:09,780
I'll do git status, so I'm on branch main,

529
00:57:09,780 --> 00:57:14,720
I'll commit this to do the main branch and then push it.

530
00:57:17,220 --> 00:57:20,620
Git add function.py.

531
00:57:23,060 --> 00:57:28,060
Git commit message, add functions.

532
00:57:34,980 --> 00:58:01,860
Git status, so I committed my changes and I have a commit add functions, git push origin

533
00:58:01,860 --> 00:58:21,860
domain. So let's push the changes to my repository. So this should be now updated with function.

534
00:58:21,860 --> 00:58:26,780
I added the function, but I haven't added the test function. So I need to go back and

535
00:58:26,780 --> 00:58:43,340
and add that from that file as well vim test function.py

536
00:58:43,340 --> 00:58:47,740
So here is the test function.

537
00:58:47,740 --> 00:58:48,740
I'll copy it.

538
00:58:48,740 --> 00:59:18,180
Right, right, quit, git status,

539
00:59:18,740 --> 00:59:25,220
git add test function

540
00:59:26,260 --> 00:59:32,820
it's staged git commit then

541
00:59:32,980 --> 00:59:35,940
add test

542
00:59:36,020 --> 00:59:38,500
oops

543
00:59:38,500 --> 01:00:06,620
git graph, I add a test, git push origin, main, so now both test function and add function

544
01:00:06,620 --> 01:00:22,660
is present yes so I'll test the that the test function works locally so I can just write

545
01:00:22,660 --> 01:00:35,700
pytest and then pytest will look for the file called test underscore and then there is an

546
01:00:35,700 --> 01:00:55,700
error because there's no module named functions I'll

547
01:00:55,700 --> 01:01:04,820
give this function so it's called from functions import add subtract and multiply and I've

548
01:01:04,820 --> 01:01:24,580
call it function so I need to rename the function. That means git move function to functions.py.

549
01:01:24,580 --> 01:01:39,540
git status. If I now run PyTest. It works, it's green. So I need to commit this change.

550
01:01:39,540 --> 01:01:49,460
let's commit rename function functions file

551
01:01:52,660 --> 01:01:53,780
like it graph

552
01:01:56,500 --> 01:02:03,700
so this become they can have more more commits than the original plan but we'll see

553
01:02:03,700 --> 01:02:18,540
So git push origin main.

554
01:02:18,540 --> 01:02:29,280
So now we should be set with the tests and the functions on GitHub.

555
01:02:29,280 --> 01:02:49,280
next will enable automated testing. Yes. So here functions are no function are

556
01:02:49,280 --> 01:03:11,080
We will now select the actions menu, it is on the upper line here.

557
01:03:11,080 --> 01:03:15,960
here under github actions there is a

558
01:03:17,400 --> 01:03:25,240
large set of actions but we will select the python application

559
01:03:25,240 --> 01:03:29,720
where you create a test for python application

560
01:03:29,720 --> 01:03:32,280
configure

561
01:03:32,280 --> 01:03:48,480
And we see here now that in the example-ci repository there's created a subdirectory

562
01:03:48,480 --> 01:03:58,600
called github with another subdirectory called workflows and here we have a yaml file that

563
01:03:58,600 --> 01:04:08,920
we will edit so we can enable actions and this

564
01:04:09,640 --> 01:04:17,080
dot github repository subdirectory was created when i pressed configure so if

565
01:04:17,080 --> 01:04:20,040
you look at the repository as it was

566
01:04:20,040 --> 01:04:25,640
called alone we see that there is no dot github there

567
01:04:25,640 --> 01:04:45,640
Okay, so I'll copy the YAML file from the instructions, copy and I'll paste them at

568
01:04:45,640 --> 01:04:50,640
the end here, then I'll remove the original code.

569
01:04:56,520 --> 01:04:59,980
And so let's see here what it says.

570
01:05:01,100 --> 01:05:03,020
It's given the name test.

571
01:05:05,720 --> 01:05:10,720
It's runs on push and pull requests.

572
01:05:15,640 --> 01:05:28,960
And here's the job description, it runs on the Ubuntu latest, the Linux Ubuntu version.

573
01:05:28,960 --> 01:05:44,480
And the steps taken are checkout, it's a setup of a Python environment, it runs installation

574
01:05:44,480 --> 01:05:54,560
of python packages. Then it does lint with flake 8.

575
01:05:54,560 --> 01:06:04,360
Flake 8 is a python package or python application that checks for python software errors or

576
01:06:04,360 --> 01:06:11,760
and python formatting. So it gives errors if there's syntax errors or deformatting of

577
01:06:11,760 --> 01:06:18,520
And the Python code is not according to the standard.

578
01:06:18,520 --> 01:06:20,520
This is called the linting.

579
01:06:20,520 --> 01:06:30,460
After the tool lint, which was used, which was developed for C code.

580
01:06:30,460 --> 01:06:39,320
After the linting, we'll run PyTest, and PyTest will also produce a coverage report, I guess.

581
01:06:39,320 --> 01:06:49,240
Yes, so before you did the commit change, I just want to add something that this workflow

582
01:06:49,240 --> 01:06:58,440
when we are using line 19 that you're using Ubuntu latest, it means we are creating some

583
01:06:58,440 --> 01:07:08,200
hooks on every changes, as you can see on line 8 and line 10, on every changes for push

584
01:07:08,200 --> 01:07:13,720
and pull request on main, there would something happening on GitHub side. And the things that

585
01:07:13,720 --> 01:07:18,280
happening is it actually create a container with the latest Ubuntu so the OS is running

586
01:07:18,280 --> 01:07:24,520
and it do the testing that we mentioned that. So all the things are happening on the GitHub side,

587
01:07:24,520 --> 01:07:30,760
not on your computer. Yeah, please go ahead, sorry. Yeah, that's right. So

588
01:07:30,760 --> 01:07:35,760
So commit the changes, create python-hub.yaml.

589
01:07:41,840 --> 01:07:42,960
I'll keep that.

590
01:07:42,960 --> 01:07:45,480
So I'll commit directly to the main branch.

591
01:07:50,680 --> 01:07:53,640
And now let's see what's happened.

592
01:07:55,160 --> 01:07:59,080
If we then go to actions,

593
01:07:59,080 --> 01:08:04,680
we see there's a workflow running

594
01:08:07,240 --> 01:08:15,160
and it's a kind of yellow or red there it turns to green

595
01:08:15,160 --> 01:08:21,160
so if i if i go into this

596
01:08:21,720 --> 01:08:25,720
uh yeah there i see that this is triggered while

597
01:08:25,720 --> 01:08:33,640
it the push with the commit that i just wrote create the python app.yaml

598
01:08:35,080 --> 01:08:39,560
and here we can go in and see the steps that are taken

599
01:08:41,880 --> 01:08:43,640
there's the setup of the job

600
01:08:48,600 --> 01:08:52,280
and there's the checkout of the source code

601
01:08:55,720 --> 01:09:00,720
There's the setup of the Python environment,

602
01:09:03,200 --> 01:09:05,560
installing dependencies.

603
01:09:05,560 --> 01:09:10,560
That's pip and flake eight, among other things.

604
01:09:10,600 --> 01:09:14,020
So there's a long list of dependencies that are installed.

605
01:09:16,120 --> 01:09:18,960
In this case, I didn't have a requirements.txt file,

606
01:09:18,960 --> 01:09:20,440
but if that was present,

607
01:09:20,440 --> 01:09:25,440
it could then install the requirements.txt file.

608
01:09:25,720 --> 01:09:35,240
So, it does the linting, check here, we see that my code is not up to the Python standard,

609
01:09:35,240 --> 01:09:43,160
so I have too many blank lines, and there are functions that are imported, but unused, that's

610
01:09:43,160 --> 01:09:52,000
part of the test function, so we get these error numbers from flake 8, so I have a job

611
01:09:52,000 --> 01:09:54,400
to do to improve this code then.

612
01:10:01,080 --> 01:10:04,800
Yes, and then we have the test itself.

613
01:10:04,800 --> 01:10:08,920
It runs test function.py and there is no error message.

614
01:10:08,920 --> 01:10:12,280
The test works fine.

615
01:10:14,680 --> 01:10:15,840
And after the Py test,

616
01:10:15,840 --> 01:10:18,520
then there is the tidying up of the job,

617
01:10:19,680 --> 01:10:21,040
cleaning up Python.

618
01:10:22,000 --> 01:10:29,200
post-run actions and the job is completed and the container goes out of scope or are

619
01:10:29,200 --> 01:10:46,280
terminated. So this is executed on the check-in and then the results are present until there

620
01:10:46,280 --> 01:10:49,740
there is a new pull request or check-in.

621
01:10:52,080 --> 01:10:53,960
So it doesn't run continuously,

622
01:10:53,960 --> 01:10:56,320
it just runs when there's an action

623
01:10:56,320 --> 01:10:57,920
or those actions that,

624
01:10:57,920 --> 01:11:00,740
under those actions that we have specified.

625
01:11:04,880 --> 01:11:09,400
Okay, I think we'll take a break now.

626
01:11:09,400 --> 01:11:10,720
Yes.

627
01:11:10,720 --> 01:11:13,400
10 minutes break and then we'll continue

628
01:11:13,400 --> 01:11:18,400
with the introducing errors and see how those are handled.

629
01:11:25,120 --> 01:11:30,120
If we then comments at the 10, at 10 over.

630
01:11:35,040 --> 01:11:36,440
0.8.

631
01:11:36,440 --> 01:11:39,560
0.8, yeah, we'll be back at 0.8, yeah.

632
01:11:39,560 --> 01:11:41,720
Yes.

633
01:11:41,720 --> 01:11:42,920
Yeah, thanks.

634
01:11:42,920 --> 01:11:43,680
See you.

635
01:11:43,680 --> 01:11:45,240
See you.

636
01:12:09,560 --> 01:12:11,620
you

637
01:12:39,560 --> 01:12:41,620
you

638
01:13:09,560 --> 01:13:11,620
you

639
01:13:39,560 --> 01:13:41,620
you

640
01:14:09,560 --> 01:14:11,620
you

641
01:14:39,560 --> 01:14:41,620
you

642
01:15:09,560 --> 01:15:11,620
you

643
01:15:39,560 --> 01:15:41,620
you

644
01:16:09,560 --> 01:16:11,620
you

645
01:16:39,560 --> 01:16:41,620
you

646
01:17:09,560 --> 01:17:11,620
you

647
01:17:39,560 --> 01:17:41,620
you

648
01:18:09,560 --> 01:18:11,620
you

649
01:18:39,560 --> 01:18:41,620
you

650
01:19:09,560 --> 01:19:11,620
you

651
01:19:39,560 --> 01:19:41,620
you

652
01:20:09,560 --> 01:20:11,620
you

653
01:20:39,560 --> 01:20:41,620
you

654
01:21:09,560 --> 01:21:11,620
you

655
01:21:39,560 --> 01:22:01,920
Hi, and welcome back.

656
01:22:01,920 --> 01:22:03,640
Welcome back.

657
01:22:03,640 --> 01:22:15,560
Okay, so we have a running action on GitHub. And the tests are green.

658
01:22:15,560 --> 01:22:21,920
So what happens when there is a bug or error in our code?

659
01:22:21,920 --> 01:22:25,720
Yes. Let's see.

660
01:22:25,720 --> 01:22:36,080
I'll update my local repository, since I have made a commit on GitHub, I committed the action

661
01:22:36,080 --> 01:22:50,720
file. And this is not on my local repository. So I'll do git pull origin. I'll first do

662
01:22:50,720 --> 01:23:02,880
the Git graph. So my last commit was rename functions file. And then I do git pull origin

663
01:23:02,880 --> 01:23:17,920
file, my main. And I get the last commit from GitHub. And then Git graph shows that the

664
01:23:17,920 --> 01:23:27,520
I've added the create Python app yaml file and if I inspect my subdirectory I'll see

665
01:23:27,520 --> 01:23:34,320
that now I have the github.github subdirectory locally as well.

666
01:23:37,680 --> 01:23:39,520
Okay so what's the next step?

667
01:23:39,520 --> 01:23:55,200
Yep, so I'll uncomment the code in the test functions and push it to github.

668
01:23:55,200 --> 01:24:15,000
test function.py. So we'll now add the test of the subtract function. And we'll see how

669
01:24:15,000 --> 01:24:20,000
This goes, git status, we have the test function,

670
01:24:20,980 --> 01:24:25,980
git add test function of i, git status,

671
01:24:27,880 --> 01:24:32,880
git commits, commits message, add test of subtract.

672
01:24:45,000 --> 01:25:01,100
And then I'll push, I'll search for the latest push command, git push origin main.

673
01:25:01,100 --> 01:25:02,660
And there we go.

674
01:25:02,660 --> 01:25:11,900
So I push directly to the main branch on GitHub.

675
01:25:11,900 --> 01:25:14,620
And let's see what happens on actions now.

676
01:25:17,020 --> 01:25:22,020
So, the GitHub has updated with the latest commit

677
01:25:25,780 --> 01:25:28,780
and here's something pending.

678
01:25:30,220 --> 01:25:31,980
What's happening here?

679
01:25:31,980 --> 01:25:34,140
All checks have failed it tells.

680
01:25:36,040 --> 01:25:38,180
Then we can go into details.

681
01:25:38,180 --> 01:25:40,780
I could also log on into actions and see the same thing,

682
01:25:40,780 --> 01:25:45,780
but the code view gives me the same information.

683
01:25:49,520 --> 01:25:50,360
Details.

684
01:25:52,560 --> 01:25:57,560
And we see that the test with, our test now fails.

685
01:26:03,200 --> 01:26:08,200
This test, I also get an email to my mailbox

686
01:26:08,200 --> 01:26:15,420
my mailbox that tells that the continuous integration job now fails.

687
01:26:15,420 --> 01:26:24,140
So GitHub do take actively steps to inform me that there is errors.

688
01:26:24,140 --> 01:26:27,940
Okay.

689
01:26:27,940 --> 01:26:29,940
So I'll create a issue.

690
01:26:39,740 --> 01:26:41,980
First issue, subtract test.

691
01:26:47,700 --> 01:26:49,620
Test of subtract fails.

692
01:26:55,700 --> 01:26:57,200
There is an error.

693
01:26:57,940 --> 01:26:59,940
Error somewhere

694
01:27:02,420 --> 01:27:04,420
Submit issue

695
01:27:05,460 --> 01:27:07,460
So then

696
01:27:08,980 --> 01:27:10,980
So now

697
01:27:11,700 --> 01:27:16,020
We have a broken software what do we do next

698
01:27:18,260 --> 01:27:25,860
Can you help me uh, yeah, so this is actually a very good demonstration of how collaboration works so when usually there's a

699
01:27:26,820 --> 01:27:27,860
uh

700
01:27:27,860 --> 01:27:35,860
There is a bug in open source software. Other people collaborating on that software can come and help and we want to demonstrate that.

701
01:27:35,860 --> 01:27:43,860
So, uh, let me maybe I can share my screen and I'll stop the share. Yeah, sure.

702
01:27:44,860 --> 01:27:48,860
And try to try to demonstrate that.

703
01:27:48,860 --> 01:28:09,060
that. Yes, give me a second and sharing. Yes, let me just resize this one. I hope now you

704
01:28:09,060 --> 01:28:14,060
I can see my Chrome browser without any issue.

705
01:28:17,020 --> 01:28:17,860
Okay.

706
01:28:19,980 --> 01:28:20,820
This is good.

707
01:28:21,820 --> 01:28:22,660
Okay.

708
01:28:23,660 --> 01:28:28,660
So let me first find the repository that you created.

709
01:28:30,400 --> 01:28:33,740
So this is the repository and I go and see, okay,

710
01:28:33,740 --> 01:28:35,160
there is an active issue.

711
01:28:35,160 --> 01:28:36,600
I will go and check and see, yeah,

712
01:28:36,600 --> 01:28:41,600
there's a problem with the subtraction test,

713
01:28:41,880 --> 01:28:45,840
and probably the subtraction function that it fails the test.

714
01:28:46,960 --> 01:28:49,800
So usually when I want to contribute this,

715
01:28:49,800 --> 01:28:54,160
contribute to solve this issue or add a feature,

716
01:28:54,160 --> 01:28:57,800
I would go and, because this repository is not mine,

717
01:28:57,800 --> 01:29:00,280
so I would go and fork the repository,

718
01:29:00,280 --> 01:29:04,400
which means some kind of cloning the repository online

719
01:29:04,400 --> 01:29:13,920
getting a new branch of it and then try to work it on my own. So I would go and create a fork out of

720
01:29:13,920 --> 01:29:27,440
it. Oh no, this is the branches. To get a fork I would go here with the forks or maybe here to get

721
01:29:27,440 --> 01:29:35,120
a new fork and then I'm the owner I would let it let it the example ci the name and everything is

722
01:29:35,120 --> 01:29:45,120
fine so I would create the fork so everything would be copied into my namespace and my github

723
01:29:45,120 --> 01:29:51,680
account and you can see this is under my name now and it also mentions that it has been forked

724
01:29:51,680 --> 01:29:55,720
from the original repository.

725
01:29:55,720 --> 01:29:57,200
It also shows you some banners

726
01:29:57,200 --> 01:30:00,120
that is it updated with the original repository or not.

727
01:30:00,120 --> 01:30:03,000
So if I try to change it and add some commits,

728
01:30:03,000 --> 01:30:04,000
this would be changed.

729
01:30:04,000 --> 01:30:07,040
And also if the original repository changes,

730
01:30:07,040 --> 01:30:09,080
this would be changes as well.

731
01:30:09,080 --> 01:30:12,040
Sometimes I can sync it with the original fork

732
01:30:12,040 --> 01:30:12,960
without any issues,

733
01:30:12,960 --> 01:30:15,840
but it depends on what kind of files I have changed

734
01:30:15,840 --> 01:30:17,480
and what kind of commits that I have.

735
01:30:17,480 --> 01:30:20,440
Sometimes there are some conflicts that you have to solve.

736
01:30:21,680 --> 01:30:25,160
But yeah, let's maybe continue from here.

737
01:30:25,160 --> 01:30:28,160
So I would go ahead and fork this repository

738
01:30:28,160 --> 01:30:31,000
on my local computer.

739
01:30:32,480 --> 01:30:37,240
Let's go to my local computer and let me,

740
01:30:40,400 --> 01:30:42,280
is the font okay?

741
01:30:42,280 --> 01:30:43,640
Yeah, the font is okay.

742
01:30:43,640 --> 01:30:45,920
Okay, so I would clone this repository

743
01:30:47,120 --> 01:30:50,320
and I would go to the, this is my VS code

744
01:30:50,320 --> 01:30:54,160
And you can see that the repository has been cloned here.

745
01:30:54,160 --> 01:30:59,200
So I know there is a problem probably in the function.

746
01:30:59,200 --> 01:31:03,240
So I would try to go and see either the problem is

747
01:31:03,240 --> 01:31:08,280
with the function, with the test, which the test is OK.

748
01:31:08,280 --> 01:31:11,480
So probably the problem is not coming from the test.

749
01:31:11,480 --> 01:31:14,680
I would go to the functions file and try

750
01:31:14,680 --> 01:31:17,680
to see if I can handle the bug or not.

751
01:31:17,680 --> 01:31:20,200
And I see that this is the bug coming from.

752
01:31:20,200 --> 01:31:23,280
So I would try to fix the bug, right?

753
01:31:23,280 --> 01:31:24,320
I want to fix the bug.

754
01:31:24,320 --> 01:31:27,880
But usually the best practice to do this

755
01:31:27,880 --> 01:31:29,360
is to create a branch

756
01:31:29,360 --> 01:31:33,080
and then try to do all the commits there.

757
01:31:33,080 --> 01:31:34,880
So I would go back to my terminal

758
01:31:35,780 --> 01:31:40,720
and I would do a branch, for example,

759
01:31:43,280 --> 01:31:47,120
let's call, usually to start with a name

760
01:31:47,120 --> 01:31:48,640
or username or something

761
01:31:48,640 --> 01:31:53,640
and then fix subtraction bug.

762
01:31:58,800 --> 01:32:00,840
You're not in the Git repository.

763
01:32:00,840 --> 01:32:01,680
Oh, yes.

764
01:32:01,680 --> 01:32:05,560
Sorry, I have to go to the Git repository first

765
01:32:05,560 --> 01:32:07,900
and then try to do it again.

766
01:32:07,900 --> 01:32:11,840
So I would create a new branch called my username

767
01:32:11,840 --> 01:32:14,640
and then name of the branch.

768
01:32:14,640 --> 01:32:19,640
So you can see that I'm currently in the new branch.

769
01:32:20,600 --> 01:32:21,840
If you're using VS Code,

770
01:32:21,840 --> 01:32:24,900
you can also see it here that I'm on the new branch.

771
01:32:25,760 --> 01:32:27,040
So in the new branch,

772
01:32:27,040 --> 01:32:32,040
I would go ahead and fix this issue and save the file.

773
01:32:33,200 --> 01:32:36,160
So if I now get a get a status,

774
01:32:36,160 --> 01:32:38,520
you can see in the new branch,

775
01:32:38,520 --> 01:32:41,040
this function has been changed.

776
01:32:41,040 --> 01:32:48,400
So I would go ahead and add this file, so the functions,

777
01:32:48,400 --> 01:32:50,240
and then create a commit.

778
01:32:50,240 --> 01:32:52,120
Usually, when you are fixing a bug,

779
01:32:52,120 --> 01:32:57,120
it's a good practice to mention the issue number

780
01:32:57,120 --> 01:32:58,560
that you fixed.

781
01:32:58,560 --> 01:33:00,340
So when you are trying to merge it

782
01:33:00,340 --> 01:33:03,760
and the owner wants to look at the pull request,

783
01:33:03,760 --> 01:33:05,760
it has a better understanding of how it results.

784
01:33:05,760 --> 01:33:08,320
But you can also mention it in the description.

785
01:33:08,320 --> 01:33:13,800
But let me mention the issue number here as well.

786
01:33:13,800 --> 01:33:25,800
So fix these subtraction bug on address on issue number one.

787
01:33:32,280 --> 01:33:37,560
Oh, I forgot the message command, the message.

788
01:33:37,560 --> 01:33:43,720
black okay so now everything is

789
01:33:43,880 --> 01:33:52,680
good and I can go with uh push it from origin

790
01:33:53,240 --> 01:34:01,240
to origin from the branch which was fix subtraction

791
01:34:01,240 --> 01:34:03,560
back

792
01:34:04,440 --> 01:34:06,440
OK, great.

793
01:34:06,440 --> 01:34:16,480
So if I go to the GitHub, you can see, if I refresh the page,

794
01:34:16,480 --> 01:34:20,000
you can see that there is a new branch has been created,

795
01:34:20,000 --> 01:34:23,320
which I pushed from my local machine.

796
01:34:23,320 --> 01:34:26,140
And if I go to that branch, you can

797
01:34:26,140 --> 01:34:29,200
see that this branch is one commit ahead,

798
01:34:29,200 --> 01:34:32,540
as I described before, from the original fork.

799
01:34:32,540 --> 01:34:36,020
And here you can see that we can create a pull request.

800
01:34:36,020 --> 01:34:39,340
And the pull request is to merge everything that we changed

801
01:34:39,340 --> 01:34:41,420
back to the original fork that we got

802
01:34:41,420 --> 01:34:45,420
from the original repository, which is a great thing.

803
01:34:45,420 --> 01:34:48,300
So we would go with compare and pull request.

804
01:34:49,580 --> 01:34:52,220
From GitHub site, there would be an automated,

805
01:34:53,740 --> 01:34:56,420
not testing, but automatic checkup.

806
01:34:56,420 --> 01:35:01,420
So if this commit and if this branch is easy to merge

807
01:35:01,420 --> 01:35:08,420
and you can see that it's very easy to merge because I only replace a file, but sometimes it's very hard.

808
01:35:08,420 --> 01:35:14,420
And you have to do a lot of different changes and solve the conflicts before the merge can happen.

809
01:35:14,420 --> 01:35:22,420
But GitHub would also help you with that and raise an issue that it raised an error that if it is not easy to merge.

810
01:35:22,420 --> 01:35:33,420
I think you need to have fixes in the in the description there, but I'm not sure it is enough to have it in the title.

811
01:35:33,420 --> 01:35:46,980
Yeah, I would add a description as well, that in this pull request, I solve the subtraction

812
01:35:46,980 --> 01:35:53,460
error address in issue number one.

813
01:35:53,460 --> 01:35:57,700
I think you need to add your word fixes.

814
01:35:57,700 --> 01:36:02,580
There are other words as well, but I don't think...

815
01:36:02,580 --> 01:36:04,580
The fixes, what do you mean?

816
01:36:04,580 --> 01:36:09,580
That it needs the word fixes, for instance.

817
01:36:16,140 --> 01:36:18,300
There are other word fixes as well.

818
01:36:18,300 --> 01:36:19,660
Okay, here you mean.

819
01:36:19,660 --> 01:36:22,580
No, I mean in front of the pull request.

820
01:36:23,980 --> 01:36:27,980
No, in front of the hash number one there,

821
01:36:27,980 --> 01:36:31,700
addressed in the description,

822
01:36:31,700 --> 01:36:36,700
In the body, not in the title, but in the body.

823
01:36:37,140 --> 01:36:38,260
Okay.

824
01:36:38,260 --> 01:36:43,260
Add fixes in front of the hash number one there.

825
01:36:43,500 --> 01:36:45,460
Okay, so.

826
01:36:45,460 --> 01:36:46,500
There, yes.

827
01:36:46,500 --> 01:36:47,500
You mean here?

828
01:36:47,500 --> 01:36:48,340
Yes.

829
01:36:50,060 --> 01:36:52,020
So you mean fixes, right?

830
01:36:52,020 --> 01:36:53,100
Like this, yes.

831
01:36:53,100 --> 01:36:53,940
Okay.

832
01:36:55,620 --> 01:36:58,540
So, okay.

833
01:36:58,540 --> 01:37:05,420
So this pull request, I would say, this pull request fixes,

834
01:37:05,420 --> 01:37:13,300
let me rephrase it, fixes number one on the subtraction error.

835
01:37:13,300 --> 01:37:14,740
Yeah, something like it, yes.

836
01:37:14,740 --> 01:37:22,620
And the error was caused from a bug in the function.

837
01:37:22,620 --> 01:37:29,700
So actions.py file, let me also add it like this, so it will be, okay.

838
01:37:29,700 --> 01:37:33,980
So I had it add a description, it's when you are usually contributing to an open source

839
01:37:33,980 --> 01:37:42,220
repository, there are some guidelines on how to contribute, you have to go read that because

840
01:37:42,220 --> 01:37:47,340
usually there are like some things that you have to check and you have to mention the

841
01:37:47,340 --> 01:37:51,700
number of the issues or the files that you had changed and you have to follow the guidelines.

842
01:37:51,700 --> 01:37:54,860
we don't have a guideline here and just want to demonstrate.

843
01:37:54,860 --> 01:37:59,300
So I would create the pull request.

844
01:38:00,420 --> 01:38:04,420
What it does, if we go back to

845
01:38:04,420 --> 01:38:10,460
the original repository that has been created from V-Run,

846
01:38:10,460 --> 01:38:15,500
you can see there is a tab on pull requests,

847
01:38:15,500 --> 01:38:19,460
and my pull request has been created here with

848
01:38:19,460 --> 01:38:23,220
the title and also with the description.

849
01:38:23,220 --> 01:38:25,500
This has not been merged,

850
01:38:25,500 --> 01:38:28,580
so the original repository has not changed yet.

851
01:38:28,580 --> 01:38:31,160
You can see the pull request is still open.

852
01:38:31,160 --> 01:38:34,580
You can create pull requests on a draft mode to

853
01:38:34,580 --> 01:38:37,500
showcase that I'm working on an issue,

854
01:38:37,500 --> 01:38:39,980
which is also a good practice.

855
01:38:40,060 --> 01:38:44,360
I'm still waiting for the original repository owner or

856
01:38:44,360 --> 01:38:47,200
for other editors that the original repository should

857
01:38:47,200 --> 01:38:51,480
had to review the case, and if they got an approval,

858
01:38:51,480 --> 01:38:53,800
they can manage it.

859
01:38:53,800 --> 01:38:56,600
Also, they can add some comments and everything,

860
01:38:56,600 --> 01:38:58,640
but I think [name] can showcase that.

861
01:38:58,640 --> 01:39:01,720
So maybe it's good to give the screen back to you,

862
01:39:01,720 --> 01:39:03,440
and you can continue from here.

863
01:39:06,800 --> 01:39:08,120
Yes.

864
01:39:08,120 --> 01:39:11,080
OK, so let me stop sharing, and we can continue.

865
01:39:17,200 --> 01:39:27,960
So there, now, let's look at the state of the, my repository.

866
01:39:27,960 --> 01:39:43,440
So now I have a pull request, listed on the pull request, picks this abstraction bug addressed

867
01:39:43,440 --> 01:39:44,440
in the number one.

868
01:39:44,440 --> 01:39:46,760
So let's have a look at what this is.

869
01:39:51,400 --> 01:39:53,040
And here, now you see

870
01:39:55,360 --> 01:39:58,200
[name] have written a pull request,

871
01:39:58,200 --> 01:40:01,520
stating that it fixes the error.

872
01:40:03,000 --> 01:40:03,840
And

873
01:40:06,320 --> 01:40:10,040
GitHub have now queued up a workflow

874
01:40:11,000 --> 01:40:12,640
waiting for,

875
01:40:12,640 --> 01:40:24,960
waiting for being run and this is our test of the of the software so I'll approve this

876
01:40:28,480 --> 01:40:37,120
and then the tests are running so it's yellow while it builds up the container and the environment

877
01:40:39,200 --> 01:40:40,960
and we can go to details and see

878
01:40:42,640 --> 01:40:57,240
So something, yes, so it doesn't, and there's a change here in GitHub as a part of the pull

879
01:40:57,240 --> 01:41:15,640
requested the coverage report is not created so this gives an error.

880
01:41:15,640 --> 01:41:22,660
So that was a little bit surprising but we'll go back.

881
01:41:22,660 --> 01:41:27,660
So the check did fail due to creating of the coverage report.

882
01:41:32,300 --> 01:41:33,140
Yeah.

883
01:41:35,060 --> 01:41:35,900
What was that?

884
01:41:38,460 --> 01:41:43,460
Yeah, I'm not sure whether there's permission we think

885
01:41:44,900 --> 01:41:49,900
that or why it's fails as a part of the coverage report.

886
01:41:52,660 --> 01:41:57,660
you know, part of the, what does it say here?

887
01:42:02,100 --> 01:42:02,940
Okay.

888
01:42:02,940 --> 01:42:07,940
For HTTP error, we search not accessible.

889
01:42:11,320 --> 01:42:13,020
Okay.

890
01:42:13,020 --> 01:42:17,780
Okay, then we'll learn something new today as well.

891
01:42:17,780 --> 01:42:37,500
So, it was supposed to run and be green, but that will, it will turn green when I'll merge.

892
01:42:37,500 --> 01:42:41,500
Confirm the merge.

893
01:42:41,500 --> 01:43:10,500
Um, yeah, maybe something that it's also good to showcase is, like, if you go to the files changed and tab, you can see all of the changes that has been made and you can also make comments before approving and, like, add, uh, maybe some comments to change some of the functions or some of the changes that there has been made so you can comment that there isn't like a more like a collaborative way before making the approval.

894
01:43:10,500 --> 01:43:12,500
making the approval.

895
01:43:12,500 --> 01:43:13,500
That's right.

896
01:43:13,500 --> 01:43:19,620
I'll I didn't do that now it's completely fine.

897
01:43:19,620 --> 01:43:21,960
How's actions now?

898
01:43:21,960 --> 01:43:28,340
So the merge goes green.

899
01:43:28,340 --> 01:43:37,220
So the build now works.

900
01:43:37,220 --> 01:43:40,860
I think the coverage error was coming from the fact that

901
01:43:40,860 --> 01:43:43,660
it was trying to create it on my repo probably

902
01:43:43,660 --> 01:43:45,540
or something like that.

903
01:43:45,540 --> 01:43:47,820
And that was the, it was a person.

904
01:43:47,820 --> 01:43:50,220
Which is strange, really.

905
01:43:50,220 --> 01:43:51,060
Yeah.

906
01:43:53,900 --> 01:43:54,740
Okay.

907
01:43:57,700 --> 01:44:00,300
Any questions to what we have done so far?

908
01:44:04,540 --> 01:44:06,020
No, the notes are good.

909
01:44:06,020 --> 01:44:09,940
So yeah, I think everything is good to go.

910
01:44:12,780 --> 01:44:16,900
So we accepted the pull requests.

911
01:44:16,900 --> 01:44:19,620
So now we'll increase the coverage.

912
01:44:20,660 --> 01:44:25,660
So I'll write a test for the multiply function

913
01:44:27,060 --> 01:44:29,440
and create a pull request.

914
01:44:29,440 --> 01:44:38,720
So we'll see how of this. Let's see if I can find a coverage report.

915
01:44:42,240 --> 01:44:42,800
Action.

916
01:44:46,080 --> 01:44:47,440
I'll pull requests.

917
01:44:53,360 --> 01:44:54,560
So here.

918
01:44:56,000 --> 01:44:58,800
No there's no coverage reporting either here.

919
01:44:59,440 --> 01:45:04,000
No, but if you go to the workflow and see the actions here on the build, you can see

920
01:45:04,000 --> 01:45:05,000
the coverage later.

921
01:45:05,000 --> 01:45:06,000
Coverage.

922
01:45:06,000 --> 01:45:07,000
Yes.

923
01:45:07,000 --> 01:45:17,240
So if you open the result, yeah, and if you go to the details of the build, and it create

924
01:45:17,240 --> 01:45:19,120
coverage if you open it.

925
01:45:19,120 --> 01:45:25,080
But I don't get the coverage XML.

926
01:45:25,080 --> 01:45:26,640
Okay.

927
01:45:26,640 --> 01:45:40,920
Okay, let's see, you search, because I, okay, let me see for the failed build one. I can see the coverage, but it doesn't create the, the file.

928
01:45:42,920 --> 01:45:52,440
Oh, okay. So, for example, if you open the failed one, we can see that it, it mentions the coverage of the, yeah.

929
01:45:56,640 --> 01:46:00,600
Yeah, but it just gives the error message.

930
01:46:00,600 --> 01:46:03,640
If on line 14, if you open the results.

931
01:46:03,640 --> 01:46:04,640
Okay.

932
01:46:04,640 --> 01:46:05,640
Yes.

933
01:46:05,640 --> 01:46:06,640
Results.

934
01:46:06,640 --> 01:46:07,640
Yeah.

935
01:46:07,640 --> 01:46:08,640
So you can see.

936
01:46:08,640 --> 01:46:17,720
Yeah, there it gives a report of coverage of 88%.

937
01:46:17,720 --> 01:46:24,680
We will see with the next pull request that I get the coverage as a part of the pull request

938
01:46:24,680 --> 01:46:28,180
when the test has been executed.

939
01:46:29,420 --> 01:46:30,260
Okay.

940
01:46:31,300 --> 01:46:36,300
So let's go back to the code.

941
01:46:37,860 --> 01:46:42,360
I'll implement the,

942
01:46:45,240 --> 01:46:47,520
I'll do git pull.

943
01:46:47,520 --> 01:46:58,920
So we get the latest changes, git graph.

944
01:46:58,920 --> 01:47:08,840
And then I'll add a test of the multiply function to the test function.

945
01:47:08,840 --> 01:47:14,840
If testMultiply

946
01:47:16,840 --> 01:47:21,840
assertMultiply

947
01:47:22,840 --> 01:47:27,840
5 and 5 equal 25

948
01:47:32,840 --> 01:47:34,840
Save

949
01:47:34,840 --> 01:48:03,040
Git starters, git add test function, git commit minus m, add, multiply, git graph, oh, I should

950
01:48:03,040 --> 01:48:16,080
have should have made this in a branch really. Oh it's fine. Yeah but now it will commit

951
01:48:16,080 --> 01:48:43,080
directly to git push, see if we get the, can we get a new test, new.

952
01:48:43,080 --> 01:48:45,080
Mm-hmm

953
01:48:46,840 --> 01:48:48,840
So it failed

954
01:48:49,080 --> 01:48:51,320
So I get a chance to correct this

955
01:48:52,840 --> 01:48:54,360
Okay

956
01:48:54,360 --> 01:49:00,680
We are also a bit behind the schedule. So we have to wrap this up, but maybe you can see uh, where it fell and

957
01:49:13,080 --> 01:49:15,080
So why did it fail?

958
01:49:15,960 --> 01:49:18,780
Uh, it was coming from the lint with flocate

959
01:49:24,100 --> 01:49:27,500
Okay, yeah, there's an l missing

960
01:49:31,560 --> 01:49:33,560
Did check out must be

961
01:49:40,600 --> 01:49:42,600
Um

962
01:49:43,080 --> 01:50:05,080
Then I created a branch, test function.py, multiply.

963
01:50:05,080 --> 01:50:06,080
That's what's there.

964
01:50:06,080 --> 01:50:07,080
Yeah.

965
01:50:07,080 --> 01:50:17,080
git add text function, git status, git commit mysql,

966
01:50:17,080 --> 01:50:46,080
It says git push setup stream origin [name]fix, so I'll copy that and paste it in here.

967
01:50:46,080 --> 01:51:00,880
Like this, and now we'll have, now we can compare and write pull requests.

968
01:51:00,880 --> 01:51:08,000
So that was my intention.

969
01:51:08,000 --> 01:51:14,240
pull requests so we say

970
01:51:15,440 --> 01:51:20,640
this branch has no conflicts but it's running

971
01:51:20,640 --> 01:51:27,120
the action and we will see that we get a coverage report as a part of the pull

972
01:51:27,120 --> 01:51:32,000
requests yeah here it is yes and if you remember

973
01:51:32,000 --> 01:51:37,600
from the details that we looked at we had a coverage report of 88 percent

974
01:51:37,600 --> 01:51:43,920
before and now we have a overall coverage of 94 percent

975
01:51:46,160 --> 01:51:51,520
so we improved the coverage of the of the code

976
01:51:54,480 --> 01:51:58,080
so i'll merge this confirm merge

977
01:51:58,080 --> 01:52:13,860
Yes, so this was automated testing. It can really protect your code from being

978
01:52:13,860 --> 01:52:22,360
broken. And as a code, but of course, as a code grows

979
01:52:22,360 --> 01:52:24,360
and you add more and more tests,

980
01:52:25,800 --> 01:52:28,200
these actions will take more and more time.

981
01:52:28,200 --> 01:52:30,840
We said, here's a simple test

982
01:52:30,840 --> 01:52:33,760
and it takes a while to complete.

983
01:52:33,760 --> 01:52:36,780
So if you get a large portfolio of tests,

984
01:52:38,840 --> 01:52:42,120
Apple request or check-in

985
01:52:42,120 --> 01:52:46,520
will then take several minutes to complete.

986
01:52:46,520 --> 01:52:49,640
Yeah, so you have to structure balance

987
01:52:49,640 --> 01:52:54,640
between how many tests you add to these actions.

988
01:53:06,000 --> 01:53:08,480
Yes, I hope you find it interesting

989
01:53:08,480 --> 01:53:11,720
and you can then redo the example

990
01:53:13,360 --> 01:53:16,760
from there as an exercise after the lesson.

991
01:53:16,760 --> 01:53:20,760
Anything more to add?

992
01:53:20,760 --> 01:53:22,760
No, everything was good.

993
01:53:22,760 --> 01:53:29,760
Maybe we can start the next section to be a bit, because we're a bit on behind the schedule.

994
01:53:29,760 --> 01:53:30,760
Yeah.

995
01:53:30,760 --> 01:53:37,760
We showed Python, but this can be done for other languages as well.

996
01:53:37,760 --> 01:53:38,760
Great.

997
01:53:38,760 --> 01:53:39,760
Yeah.

998
01:53:39,760 --> 01:53:40,760
Yeah.

999
01:53:40,760 --> 01:53:44,760
Then we'll go to test design.

1000
01:53:44,760 --> 01:53:47,480
And there's a lot of examples here.

1001
01:53:50,160 --> 01:53:55,160
So we'll dive into different tests and see how these are.

1002
01:54:02,120 --> 01:54:05,140
So let's get started with the first one.

1003
01:54:06,520 --> 01:54:10,260
We have the function factorial.

1004
01:54:10,260 --> 01:54:22,900
How would you test this one, [name]?

1005
01:54:22,900 --> 01:54:29,940
So it was also a bit, I think that the question was also asked in the beginning of the session

1006
01:54:29,940 --> 01:54:37,540
that if we have a function that it depends on the input what you want to do and what

1007
01:54:37,540 --> 01:54:46,180
do usually is to create some test cases, and usually take care of the edges or the barriers.

1008
01:54:46,180 --> 01:54:49,300
For example, if the number is too large or something like that.

1009
01:54:50,580 --> 01:54:54,740
Yeah, but for this I would like add some small number, some medium number probably,

1010
01:54:54,740 --> 01:54:57,460
and a large number to see if the function is working.

1011
01:54:58,980 --> 01:55:07,060
Well, here the numbers grow rapidly with small input. So you can easily get an

1012
01:55:07,060 --> 01:55:09,100
an overflow or.

1013
01:55:09,100 --> 01:55:09,940
Yes.

1014
01:55:13,460 --> 01:55:17,460
So let's see, we'll take a look at the solution here.

1015
01:55:17,460 --> 01:55:22,300
So here it's tested for zero, one and two.

1016
01:55:22,300 --> 01:55:27,300
There are no large values, simple values really.

1017
01:55:29,780 --> 01:55:33,140
And as I said, this is a pure function.

1018
01:55:33,140 --> 01:55:38,140
So it has, it's quite easy to test it.

1019
01:55:45,340 --> 01:55:49,660
In Python, Python has the pipe long.

1020
01:55:49,660 --> 01:55:54,660
So if you get really, you can get really large,

1021
01:55:55,740 --> 01:55:58,360
test really large numbers with Python.

1022
01:55:58,360 --> 01:56:09,520
The challenge is really to calculate a large factorial and have it ready for inserting

1023
01:56:09,520 --> 01:56:20,520
into a test.

1024
01:56:20,520 --> 01:56:27,960
Design a test for a function that receives two strings and returns a number.

1025
01:56:27,960 --> 01:56:30,280
This seems simple as well.

1026
01:56:33,880 --> 01:56:38,880
You can really add the documentation here as a test.

1027
01:56:48,200 --> 01:56:50,200
So if you step out of,

1028
01:56:50,200 --> 01:57:04,960
Step into a new subdirectory.

1029
01:57:04,960 --> 01:57:33,960
So we could create a function log pi, in the insert code, and in test function log pi.

1030
01:57:33,960 --> 01:57:55,640
It doesn't be from function import and the name of the function was countered occurrence.

1031
01:57:55,640 --> 01:57:56,640
There is thing.

1032
01:57:56,640 --> 01:58:02,120
There are two double R's in the occurrence.

1033
01:58:02,120 --> 01:58:26,240
So define test count word. Assert. And if we then say count word of currents in string

1034
01:58:26,240 --> 01:58:46,880
1, 2, 1, 2, 3, 4 and the argument, second argument would be 1, then assert that this

1035
01:58:46,880 --> 01:59:05,920
This is equal number two, take a join there, write quit, our PyTests work now.

1036
01:59:05,920 --> 01:59:06,920
So yes.

1037
01:59:06,920 --> 01:59:11,600
Yes, then we'd have tested the docstring really.

1038
01:59:18,000 --> 01:59:22,200
Under solutions, there are other strings

1039
01:59:24,020 --> 01:59:29,020
which could add this test to see how it may phase

1040
01:59:29,780 --> 01:59:34,780
with several, this is like, I don't know, border case.

1041
01:59:36,920 --> 01:59:57,240
And here, we get an error. So, either we have to change the test, or we have to change the

1042
01:59:57,240 --> 02:00:06,240
function. So, we are not sure here what's wrong here, whether we our specification of

1043
02:00:06,240 --> 02:00:11,160
the function is wrong or whether the test is wrong.

1044
02:00:11,160 --> 02:00:26,640
But the function returns zero and we have expected it to return one.

1045
02:00:26,640 --> 02:00:39,960
Okay, here is a design, something similar, we count the words occurrences in a file.

1046
02:00:39,960 --> 02:00:50,080
But here we're getting a more complex function, which are doing several things.

1047
02:00:50,080 --> 02:00:59,300
So one approach here could be that we didn't implement the opening of the file as a part

1048
02:00:59,300 --> 02:01:02,700
of the counting function.

1049
02:01:02,700 --> 02:01:14,040
But we rather used, had the file opening in a function for itself.

1050
02:01:14,040 --> 02:01:18,980
Which then could return a data object, like a list for instance.

1051
02:01:18,980 --> 02:01:31,980
And then we use the count word occurrence in string from the previous example instead.

1052
02:01:31,980 --> 02:01:40,300
As it is very similar to the previous example that we did, maybe it's better to bypass it

1053
02:01:40,300 --> 02:01:48,700
and then talk about how do we want to check if there is a dependency for the next one.

1054
02:01:48,700 --> 02:01:53,700
And we also have the question about that earlier today.

1055
02:01:55,560 --> 02:01:56,720
Exactly.

1056
02:01:56,720 --> 02:01:59,680
So here we have an external dependency

1057
02:02:02,240 --> 02:02:07,240
from reactor input to import max underscore temperature.

1058
02:02:11,500 --> 02:02:14,800
And how would you approach this function?

1059
02:02:14,800 --> 02:02:20,420
So usually when it's dependent on an external factor,

1060
02:02:20,420 --> 02:02:24,780
it can come in from a physical board or another library.

1061
02:02:24,780 --> 02:02:31,200
If that specific number is not available or it changes,

1062
02:02:31,200 --> 02:02:34,800
it's usually good to mark it,

1063
02:02:34,800 --> 02:02:37,580
which means you give it an arbitrary number and

1064
02:02:37,580 --> 02:02:40,100
then try it with that arbitrary number

1065
02:02:40,100 --> 02:02:43,780
instead of getting the actual number from the external source.

1066
02:02:44,800 --> 02:02:54,640
Yes, so let's see what's written under the solution here.

1067
02:02:54,640 --> 02:03:07,440
Here it says describes monkey patching that you then set the temperature from the external

1068
02:03:07,440 --> 02:03:09,520
to some, to a specific value.

1069
02:03:14,360 --> 02:03:17,720
Mocking is also doing the same thing.

1070
02:03:18,960 --> 02:03:19,800
Yes.

1071
02:03:23,280 --> 02:03:27,080
I'll skip the next,

1072
02:03:27,080 --> 02:03:28,520
I'll skip the design five

1073
02:03:28,520 --> 02:03:30,520
and we'll go to test-driven development.

1074
02:03:31,560 --> 02:03:34,520
I'll think I'll spend five minutes on that

1075
02:03:34,520 --> 02:03:39,520
And then, and we'll also touch upon testing randomness.

1076
02:03:40,320 --> 02:03:41,160
Okay.

1077
02:03:45,920 --> 02:03:50,320
So, in test-driven development,

1078
02:03:50,320 --> 02:03:54,380
you develop the test first.

1079
02:03:54,380 --> 02:03:59,380
So here, we have a function that takes an integer

1080
02:04:00,060 --> 02:04:04,500
and it returns this on three and five on bus.

1081
02:04:04,500 --> 02:04:07,580
And multiples of five returns bus.

1082
02:04:07,580 --> 02:04:10,780
And for arguments that are multiples of both three

1083
02:04:10,780 --> 02:04:15,020
and five returns fizz and bus together.

1084
02:04:17,880 --> 02:04:19,980
Fails in case of non-integral arguments

1085
02:04:19,980 --> 02:04:24,980
or arguments are negative or arguments zero or negative

1086
02:04:26,200 --> 02:04:29,260
or otherwise it returns the integral itself.

1087
02:04:29,260 --> 02:04:31,260
So that's the specification of the

1088
02:04:34,500 --> 02:05:02,580
So, I would then go on and create the, create the test first, test function.py.

1089
02:05:02,580 --> 02:05:10,580
So I'll write from function import.

1090
02:05:10,580 --> 02:05:17,060
This doesn't exist yet, but I'll write my function files as functions, I'll write import

1091
02:05:17,060 --> 02:05:28,660
FizzBuzz and then the final test of FizzBuzz

1092
02:05:28,660 --> 02:05:39,660
assert FizzBuzz3 equals Fizz

1093
02:05:39,660 --> 02:05:56,500
assert this bus five equal bus. So then I've written a simple test. So if I run this of

1094
02:05:56,500 --> 02:06:06,220
course now I'll get an error. So import the import statement false. So this is getting

1095
02:06:06,220 --> 02:06:13,220
Getting red, getting the state red is called under test tree development.

1096
02:06:13,220 --> 02:06:16,740
But I want to get to the state of green.

1097
02:06:16,740 --> 02:06:21,420
And I'll do that as fast as possible.

1098
02:06:21,420 --> 02:06:22,820
So how do I do that?

1099
02:06:22,820 --> 02:06:46,420
So I'll implement FizzBuzz in the function.py, FizzBuzz, and as a simple step, I'll just say

1100
02:06:46,420 --> 02:06:52,340
if and there's a number here should be number

1101
02:06:57,860 --> 02:06:58,360
if

1102
02:07:01,380 --> 02:07:08,420
if number number equals three return

1103
02:07:08,420 --> 02:07:38,380
Return this, else if number equal five, oops, return bus.

1104
02:07:38,380 --> 02:07:55,140
else return number okay so if I run pytest now it was wrong in the function

1105
02:07:55,140 --> 02:07:58,140
Yeah, with the else, yeah.

1106
02:07:58,140 --> 02:08:02,140
There was a column missing.

1107
02:08:02,140 --> 02:08:04,140
I test.

1108
02:08:04,140 --> 02:08:09,140
So now, the time has gotten to the state green.

1109
02:08:09,140 --> 02:08:17,140
But we know that the function that I've written is too simple for the specification.

1110
02:08:17,140 --> 02:08:21,140
But it's a first iteration of the function relayed.

1111
02:08:21,140 --> 02:08:30,420
So, as soon as I add more tests to the test function now, this function I have written

1112
02:08:30,420 --> 02:08:38,900
will fail. That's okay. Then I'll go another iteration and implement a new, a more complex

1113
02:08:38,900 --> 02:08:45,340
for fizzbuzz function. But I have started and I have got my feel of how the function

1114
02:08:45,340 --> 02:08:55,020
is used, how it's called, what the arguments are, so it's the an easy first step really.

1115
02:09:00,300 --> 02:09:10,540
Yes, so the solution then points to a complex solution which raises exceptions and

1116
02:09:10,540 --> 02:09:26,360
can enhance all border cases. So then after several iterations, I will gradually reach

1117
02:09:26,360 --> 02:09:34,740
something similar. Okay. I think that's what we will have time

1118
02:09:34,740 --> 02:09:40,820
for during test design, that will touch upon randomness. How would you test randomness?

1119
02:09:42,980 --> 02:09:49,780
So with the randomness, because the random generators are working with a seed, it's usually

1120
02:09:49,780 --> 02:09:55,700
good to set the seed and based on that seed you would get, it's not random anymore your program

1121
02:09:55,700 --> 02:10:02,980
because the seed is fixed, so the randomness would be some statistic again, like static,

1122
02:10:02,980 --> 02:10:05,220
so you don't have any randomness anymore.

1123
02:10:05,220 --> 02:10:07,940
So for testing a function that has some randomness,

1124
02:10:07,940 --> 02:10:11,140
set the seed, and then you have a static number,

1125
02:10:11,140 --> 02:10:13,940
and it would be very similar to what we already covered.

1126
02:10:15,060 --> 02:10:16,340
Yes.

1127
02:10:16,340 --> 02:10:19,700
So here there's two functions, rollDice and Yatsy.

1128
02:10:21,620 --> 02:10:26,620
And we will see that when you test these functions,

1129
02:10:28,860 --> 02:10:32,300
you set the random seed.

1130
02:10:32,980 --> 02:10:44,980
One and then you get a series of numbers that are equal each time.

1131
02:10:44,980 --> 02:11:01,980
Okay, I think we'll go to the checkout and really over to some conclusions and recommendations.

1132
02:11:01,980 --> 02:11:14,900
Yes. Learn one test framework well enough for the basics. For Python it's PyTest is

1133
02:11:14,900 --> 02:11:27,340
really simple. You have unit tests as well, but it's more complex. And that's my experience.

1134
02:11:27,340 --> 02:11:29,780
and use the good tools that exists.

1135
02:11:33,100 --> 02:11:37,980
Start with some basics, some simple things to test.

1136
02:11:39,220 --> 02:11:42,140
I think it's a good thing to automate these tests.

1137
02:11:42,140 --> 02:11:44,520
So add them to your Git repository.

1138
02:11:49,420 --> 02:11:51,700
Strike a healthy balance between unit tests

1139
02:11:51,700 --> 02:11:53,180
and integration tests.

1140
02:11:57,340 --> 02:12:07,100
As you grow your code, then tests should also should increase.

1141
02:12:07,100 --> 02:12:14,540
And as the example with test development, the test development cycle shows that you

1142
02:12:14,540 --> 02:12:24,700
can you can add tests as you add new functionality.

1143
02:12:24,700 --> 02:12:29,780
So when you fix a bug, it's a good thing to add a test against the bug.

1144
02:12:29,780 --> 02:12:39,540
So you get a volume of regression tests that can be used to verify your code.

1145
02:12:39,540 --> 02:12:47,220
And use code coverage to analyze what part of the code that are not executed.

1146
02:12:47,220 --> 02:12:49,100
Yes.

1147
02:12:49,100 --> 02:12:50,100
Yes.

1148
02:12:50,100 --> 02:12:51,100
Yeah.

1149
02:12:51,100 --> 02:12:55,100
I mean, if you make your code easier to test, it becomes also more modular.

1150
02:12:55,100 --> 02:13:08,700
And we'll see in the next lesson how to create code more modular.

1151
02:13:08,700 --> 02:13:12,500
Ways to start.

1152
02:13:12,500 --> 02:13:14,300
Perfect is the enemy of good.

1153
02:13:14,300 --> 02:13:21,260
So just start for something that's good, good enough.

1154
02:13:21,260 --> 02:13:30,060
There's always probably something you can isolate a test as a part of a function or

1155
02:13:30,060 --> 02:13:41,460
split the function in more in two or if you have data analysis or simulation of some sort

1156
02:13:41,460 --> 02:13:50,500
end-to-end tests with sample data and use local and testing frameworks and GitHub actions?

1157
02:13:54,740 --> 02:14:03,300
Yeah, I think one of the takeaways here is, as you said, the perfect is

1158
02:14:04,260 --> 02:14:09,700
the enemy of good. So doing a test-driven development and adding like a

1159
02:14:09,700 --> 02:14:16,660
test for all of your functions and getting a 100% test coverage can be a bit overwhelming,

1160
02:14:16,660 --> 02:14:22,820
but a code that has some tests is better than a code that doesn't have any. So start adding

1161
02:14:22,820 --> 02:14:28,900
tests to your most important functions and the things that really could go wrong, and

1162
02:14:28,900 --> 02:14:34,740
then in the future maybe you would get the habits of adding more tests and more tests.

1163
02:14:34,740 --> 02:14:44,740
Yes, so that was automated testing. Now we'll go for lunch and we will resume in an hour.

1164
02:14:44,740 --> 02:14:45,740
Okay.

1165
02:14:45,740 --> 02:14:46,740
Yes.

1166
02:14:46,740 --> 02:14:52,740
Thanks everyone for joining and yeah, see you after lunch break.

1167
02:14:52,740 --> 02:14:53,740
Yeah, bye bye.

1168
02:14:53,740 --> 02:14:54,740
Bye bye.

1169
02:15:04,740 --> 02:15:06,800
you

1170
02:15:34,740 --> 02:15:36,800
you

1171
02:16:04,740 --> 02:16:06,800
you

1172
02:16:34,740 --> 02:16:36,800
you

1173
02:17:04,740 --> 02:17:06,800
you

1174
02:17:34,740 --> 02:17:36,800
you

1175
02:18:04,740 --> 02:18:06,800
you

1176
02:18:34,740 --> 02:18:36,800
you

1177
02:19:04,740 --> 02:19:06,800
you

1178
02:19:34,740 --> 02:19:36,800
you

1179
02:20:04,740 --> 02:20:06,800
you

1180
02:20:34,740 --> 02:20:36,800
you

1181
02:21:04,740 --> 02:21:06,800
you

1182
02:21:34,740 --> 02:21:36,800
you

1183
02:22:04,740 --> 02:22:06,800
you

1184
02:22:34,740 --> 02:22:36,800
you

1185
02:23:04,740 --> 02:23:06,800
you

1186
02:23:34,740 --> 02:23:36,800
you

1187
02:24:04,740 --> 02:24:06,800
you

1188
02:24:34,740 --> 02:24:36,800
you

1189
02:25:04,740 --> 02:25:06,800
you

1190
02:25:34,740 --> 02:25:36,800
you

1191
02:26:04,740 --> 02:26:06,800
you

1192
02:26:34,740 --> 02:26:36,800
you

1193
02:27:04,740 --> 02:27:06,800
you

1194
02:27:34,740 --> 02:27:36,800
you

1195
02:28:04,740 --> 02:28:06,800
you

1196
02:28:34,740 --> 02:28:36,800
you

1197
02:29:04,740 --> 02:29:06,800
you

1198
02:29:34,740 --> 02:29:36,800
you

1199
02:30:04,740 --> 02:30:06,800
you

1200
02:30:34,740 --> 02:30:36,800
you

1201
02:31:04,740 --> 02:31:06,800
you

1202
02:31:34,740 --> 02:31:36,800
you

1203
02:32:04,740 --> 02:32:06,800
you

1204
02:32:34,740 --> 02:32:36,800
you

1205
02:33:04,740 --> 02:33:06,800
you

1206
02:33:34,740 --> 02:33:36,800
you

1207
02:34:04,740 --> 02:34:06,800
you

1208
02:34:34,740 --> 02:34:36,800
you

1209
02:35:04,740 --> 02:35:06,800
you

1210
02:35:34,740 --> 02:35:36,800
you

1211
02:36:04,740 --> 02:36:06,800
you

1212
02:36:34,740 --> 02:36:36,800
you

1213
02:37:04,740 --> 02:37:06,800
you

1214
02:37:34,740 --> 02:37:36,800
you

1215
02:38:04,740 --> 02:38:06,800
you

1216
02:38:34,740 --> 02:38:36,800
you

1217
02:39:04,740 --> 02:39:06,800
you

1218
02:39:34,740 --> 02:39:36,800
you

1219
02:40:04,740 --> 02:40:06,800
you

1220
02:40:34,740 --> 02:40:36,800
you

1221
02:41:04,740 --> 02:41:06,800
you

1222
02:41:34,740 --> 02:41:36,800
you

1223
02:42:04,740 --> 02:42:06,800
you

1224
02:42:34,740 --> 02:42:36,800
you

1225
02:43:04,740 --> 02:43:06,800
you

1226
02:43:34,740 --> 02:43:36,800
you

1227
02:44:04,740 --> 02:44:06,800
you

1228
02:44:34,740 --> 02:44:36,800
you

1229
02:45:04,740 --> 02:45:06,800
you

1230
02:45:34,740 --> 02:45:36,800
you

1231
02:46:04,740 --> 02:46:06,800
you

1232
02:46:34,740 --> 02:46:36,800
you

1233
02:47:04,740 --> 02:47:06,800
you

1234
02:47:34,740 --> 02:47:36,800
you

1235
02:48:04,740 --> 02:48:06,800
you

1236
02:48:34,740 --> 02:48:36,800
you

1237
02:49:04,740 --> 02:49:06,800
you

1238
02:49:34,740 --> 02:49:36,800
you

1239
02:50:04,740 --> 02:50:06,800
you

1240
02:50:34,740 --> 02:50:36,800
you

1241
02:51:04,740 --> 02:51:06,800
you

1242
02:51:34,740 --> 02:51:36,800
you

1243
02:52:04,740 --> 02:52:06,800
you

1244
02:52:34,740 --> 02:52:36,800
you

1245
02:53:04,740 --> 02:53:06,800
you

1246
02:53:34,740 --> 02:53:36,800
you

1247
02:54:04,740 --> 02:54:06,800
you

1248
02:54:34,740 --> 02:54:36,800
you

1249
02:55:04,740 --> 02:55:06,800
you

1250
02:55:34,740 --> 02:55:36,800
you

1251
02:56:04,740 --> 02:56:06,800
you

1252
02:56:34,740 --> 02:56:36,800
you

1253
02:57:04,740 --> 02:57:06,800
you

1254
02:57:34,740 --> 02:57:36,800
you

1255
02:58:04,740 --> 02:58:06,800
you

1256
02:58:34,740 --> 02:58:36,800
you

1257
02:59:04,740 --> 02:59:06,800
you

1258
02:59:34,740 --> 02:59:36,800
you

1259
03:00:04,740 --> 03:00:06,800
you

1260
03:00:34,740 --> 03:00:36,800
you

1261
03:01:04,740 --> 03:01:06,800
you

1262
03:01:34,740 --> 03:01:36,800
you

1263
03:02:04,740 --> 03:02:06,800
you

1264
03:02:34,740 --> 03:02:36,800
you

1265
03:03:04,740 --> 03:03:06,800
you

1266
03:03:34,740 --> 03:03:36,800
you

1267
03:04:04,740 --> 03:04:06,800
you

1268
03:04:34,740 --> 03:04:36,800
you

1269
03:05:04,740 --> 03:05:06,800
you

1270
03:05:34,740 --> 03:05:36,800
you

1271
03:06:04,740 --> 03:06:06,800
you

1272
03:06:34,740 --> 03:06:36,800
you

1273
03:07:04,740 --> 03:07:06,800
you

1274
03:07:34,740 --> 03:07:36,800
you

1275
03:08:04,740 --> 03:08:06,800
you

1276
03:08:34,740 --> 03:08:36,800
you

1277
03:09:04,740 --> 03:09:06,800
you

1278
03:09:34,740 --> 03:09:36,800
you

1279
03:10:04,740 --> 03:10:06,800
you

1280
03:10:34,740 --> 03:10:36,800
you

1281
03:11:04,740 --> 03:11:06,800
you

1282
03:11:34,740 --> 03:11:36,800
you

1283
03:12:04,740 --> 03:12:06,800
you

1284
03:12:34,740 --> 03:12:36,800
you

1285
03:13:04,740 --> 03:13:06,800
you

1286
03:13:34,740 --> 03:14:00,740
Hello, we are back and hopefully you can hear us out there.

1287
03:14:00,740 --> 03:14:05,700
Should we do an audio test?

1288
03:14:05,700 --> 03:14:06,700
One.

1289
03:14:06,700 --> 03:14:07,700
Yes.

1290
03:14:07,700 --> 03:14:08,700
Two.

1291
03:14:08,700 --> 03:14:09,700
Three.

1292
03:14:09,700 --> 03:14:10,700
Four.

1293
03:14:10,700 --> 03:14:11,700
Five.

1294
03:14:11,700 --> 03:14:12,700
Six.

1295
03:14:12,700 --> 03:14:17,060
Okay, let us know if the audio sounds okay.

1296
03:14:17,060 --> 03:14:26,300
So we are resuming now for the last lesson of the day with what is called modular code

1297
03:14:26,300 --> 03:14:28,040
development.

1298
03:14:28,040 --> 03:14:36,400
So this is sort of an example that puts together a lot of the topics of the workshop.

1299
03:14:36,400 --> 03:14:42,800
We'll see us using GIT and who knows, maybe some testing, but in particular, how we evolve

1300
03:14:42,800 --> 03:14:51,320
some code from being this small, what do you say, how we would actually evolve some code

1301
03:14:51,320 --> 03:14:56,200
from being this small, how do I say this?

1302
03:14:56,200 --> 03:15:04,920
have prepared a small script doing some typical scientific data analysis for us.

1303
03:15:05,800 --> 03:15:10,840
Yeah, let's see. We'll start from there, and let's see how it will evolve.

1304
03:15:11,480 --> 03:15:17,320
Yeah, exactly. Okay, so it's like the real or a realistic example of it.

1305
03:15:19,800 --> 03:15:25,240
In the meantime, we have some links here in the notes or some questions here in the notes

1306
03:15:25,240 --> 03:15:30,720
that you can start filling out while we begin our discussion. So please think

1307
03:15:30,720 --> 03:15:37,660
about that. In the meantime, [name], do you have the lesson opened or should I

1308
03:15:37,660 --> 03:15:42,960
open it? I can share my screen. Okay.

1309
03:15:42,960 --> 03:15:50,080
Can you see it?

1310
03:15:50,080 --> 03:15:52,800
That's the questions we put in the notes.

1311
03:15:52,800 --> 03:15:53,800
Yeah.

1312
03:15:53,800 --> 03:15:56,800
There we go.

1313
03:15:56,800 --> 03:15:57,800
Yes.

1314
03:15:57,800 --> 03:16:02,280
So when we start off, I guess we can discuss these questions ourselves.

1315
03:16:02,280 --> 03:16:07,600
So [name], what does modular code development mean for you?

1316
03:16:07,600 --> 03:16:12,600
Well, as a person with some medical education background,

1317
03:16:12,600 --> 03:16:17,920
to me modular is something that actually exists in the nature.

1318
03:16:17,920 --> 03:16:24,380
We humans are modular ourselves, I would say.

1319
03:16:24,380 --> 03:16:27,840
Because if you look at our body,

1320
03:16:27,840 --> 03:16:34,980
there are multiple systems like circulatory system,

1321
03:16:34,980 --> 03:16:39,380
the nervous system, and the respiratory system.

1322
03:16:39,380 --> 03:16:44,260
Each system actually performs its unique function,

1323
03:16:44,260 --> 03:16:47,660
and together they form our body.

1324
03:16:47,740 --> 03:16:53,860
At the same time, if you look at the microscopic level,

1325
03:16:53,860 --> 03:17:00,260
one single cell is also composed of various tiny,

1326
03:17:00,260 --> 03:17:04,380
tiny components, and those components

1327
03:17:04,380 --> 03:17:07,380
are all performing their own functions,

1328
03:17:07,380 --> 03:17:12,140
and together they will form a functional cell.

1329
03:17:12,140 --> 03:17:14,700
So it's not just about code,

1330
03:17:14,700 --> 03:17:16,620
it's in the nature.

1331
03:17:16,620 --> 03:17:18,380
Yeah, I never thought of that.

1332
03:17:18,380 --> 03:17:21,220
So I guess there's two types.

1333
03:17:21,220 --> 03:17:23,140
One is there's, from what you said,

1334
03:17:23,140 --> 03:17:26,300
there's different systems doing

1335
03:17:26,300 --> 03:17:28,100
different things and they're separate,

1336
03:17:28,100 --> 03:17:31,700
so they can be understood and, well,

1337
03:17:31,700 --> 03:17:41,060
I won't say developed about humans, but can be understood and function separately.

1338
03:17:41,060 --> 03:17:43,660
And then there's the hierarchy.

1339
03:17:43,660 --> 03:17:44,660
Yes, exactly.

1340
03:17:44,660 --> 03:17:54,100
And, you know, that matches up with what I think about code also.

1341
03:17:54,100 --> 03:18:01,680
And whenever the systems start interfering with each other is that when stuff goes bad.

1342
03:18:01,680 --> 03:18:06,920
the really difficult diseases start happening.

1343
03:18:06,920 --> 03:18:13,600
Yes, I think that's true for both human and the code.

1344
03:18:13,600 --> 03:18:20,080
Yeah. Okay. What does

1345
03:18:20,080 --> 03:18:23,440
modular code development mean for you then?

1346
03:18:23,440 --> 03:18:29,360
Well, I would say that's also a hierarchical concept.

1347
03:18:29,360 --> 03:18:41,360
In the lower level, I would split a functional block of code into functions or I will create classes for them.

1348
03:18:41,360 --> 03:18:55,360
If you look at a little bit upper level, then I will organize functions or classes that are related with each other to a single module.

1349
03:18:55,360 --> 03:19:06,760
module. The module could be reused in different projects. That's how I understand. How about

1350
03:19:06,760 --> 03:19:07,760
you?

1351
03:19:07,760 --> 03:19:14,080
Yeah, I mean, I guess it depends on the kind of project. But basically, I start off with

1352
03:19:14,080 --> 03:19:21,080
something and then usually it starts off a bit chaotic. But once I get parts that I think

1353
03:19:21,080 --> 03:19:23,360
are self-contained, I'll start splitting them off,

1354
03:19:23,360 --> 03:19:27,000
whether it's functions or other files or classes

1355
03:19:27,000 --> 03:19:28,160
or something like that.

1356
03:19:28,160 --> 03:19:31,760
But yeah, basically, like picking off

1357
03:19:31,760 --> 03:19:36,200
little bits that are standalone and other things

1358
03:19:36,200 --> 03:19:38,680
can use as an interface.

1359
03:19:38,680 --> 03:19:42,920
Yeah, I guess that has partially answered

1360
03:19:42,920 --> 03:19:45,800
a very natural second question, which

1361
03:19:45,800 --> 03:19:50,800
is why do we want modular code instead of a block of code

1362
03:19:53,440 --> 03:19:56,880
line after line to do our tasks?

1363
03:19:58,480 --> 03:20:01,280
So is there any other reasons we want

1364
03:20:01,280 --> 03:20:04,340
to develop modular code?

1365
03:20:08,520 --> 03:20:09,480
So let's see.

1366
03:20:10,920 --> 03:20:14,160
Well, the first thing comes to my mind is

1367
03:20:15,800 --> 03:20:24,800
If I want to share my code with the other person or put it to my paper,

1368
03:20:24,800 --> 03:20:28,800
I would like it's well-organized.

1369
03:20:28,800 --> 03:20:34,800
Then the other people can use part of it or use the,

1370
03:20:34,800 --> 03:20:38,800
if I make a whole Python package,

1371
03:20:38,800 --> 03:20:42,800
then they can import it or they can install it.

1372
03:20:42,800 --> 03:20:48,600
I would like a code in the package module.

1373
03:20:51,600 --> 03:20:57,400
Okay. We have seen some answers,

1374
03:20:57,400 --> 03:21:04,440
so please fill out the questions with your comments.

1375
03:21:05,120 --> 03:21:12,360
Maybe we can come back to this later and have a look at the material first.

1376
03:21:12,360 --> 03:21:20,920
Good idea. So what's next? Let's check out this. Okay, the learning outcomes.

1377
03:21:22,440 --> 03:21:32,440
So should we discuss this now or come back? Maybe we do some hands-on stuff and then come back to

1378
03:21:32,440 --> 03:21:40,840
this when we have a deeper understanding. Yeah, sounds good. Yeah, I guess the main

1379
03:21:40,840 --> 03:21:46,760
thing we might bring up is this first point about pure functions. So basically

1380
03:21:46,760 --> 03:21:54,280
we'll see which of our functions have side effects and don't. So basically if a

1381
03:21:54,280 --> 03:22:02,680
function is only evaluated by its arguments then that makes it easy to

1382
03:22:02,680 --> 03:22:10,360
write, and test, and understand. And we'll maybe get there. But okay.

1383
03:22:10,360 --> 03:22:19,000
Let me go back to the notes. Yeah, another thing I would like to emphasize is that

1384
03:22:19,000 --> 03:22:27,600
in this session, the main idea will be we will do the typing together. It's kind

1385
03:22:27,600 --> 03:22:32,240
of like a live tapping demo.

1386
03:22:32,240 --> 03:22:37,120
I will be using the keyboard, and [name] will be helping me,

1387
03:22:37,120 --> 03:22:38,120
giving me guides.

1388
03:22:38,120 --> 03:22:45,720
And also, you will participate via the notes,

1389
03:22:45,720 --> 03:22:52,840
giving us comments, suggestions, or questions in the notes.

1390
03:22:52,840 --> 03:22:55,800
So we will do this coding together,

1391
03:22:55,800 --> 03:22:59,160
but I'm the one using the keyboard.

1392
03:22:59,160 --> 03:22:59,660
OK.

1393
03:22:59,660 --> 03:23:00,160
Yes.

1394
03:23:00,160 --> 03:23:01,640
Sounds good.

1395
03:23:01,640 --> 03:23:04,560
So what is our task?

1396
03:23:04,560 --> 03:23:06,320
Let's have a look.

1397
03:23:11,520 --> 03:23:12,360
OK.

1398
03:23:12,360 --> 03:23:15,360
So this is our task.

1399
03:23:15,360 --> 03:23:22,160
We will use some data downloaded from FMIs open database.

1400
03:23:22,160 --> 03:23:28,600
It's some records of temperatures in year 2022.

1401
03:23:28,600 --> 03:23:30,840
It's the temperature measurements

1402
03:23:30,840 --> 03:23:37,120
from the observation station in Wanda Airport.

1403
03:23:37,120 --> 03:23:41,240
Yeah, FMI has the observation station there.

1404
03:23:41,240 --> 03:23:43,280
That's the data we are going to use.

1405
03:23:43,280 --> 03:23:49,640
And as I mentioned before, we have prepared some scripts

1406
03:23:49,640 --> 03:23:59,080
for our task. So we will use this as a starting point and try to make it more modular.

1407
03:24:01,080 --> 03:24:03,560
Yeah. So what does it do?

1408
03:24:06,440 --> 03:24:09,960
Should we move to a Jupyter notebook first?

1409
03:24:09,960 --> 03:24:13,880
Yeah, sure. I guess we can look at it as we copy it there.

1410
03:24:13,880 --> 03:24:23,400
Yeah. Or maybe while you're getting it set up I can talk about it some. So it's

1411
03:24:23,400 --> 03:24:31,920
a simple analysis that reads in data from the CSV file. It computes the

1412
03:24:31,920 --> 03:24:39,440
average temperature over the specified range and then makes some plots. So it's

1413
03:24:39,440 --> 03:24:49,920
a fairly typical, well, little analysis. So it starts off like it has the read, analyze,

1414
03:24:51,280 --> 03:24:58,720
write out results sections. So even though it's simple, it provides some good stuff that we can

1415
03:24:59,760 --> 03:25:03,600
use as a good example of the whole analysis workflow.

1416
03:25:03,600 --> 03:25:10,560
So, while we're doing this, we'll basically be doing it live.

1417
03:25:10,560 --> 03:25:17,240
So you can, and please do, write in the notes and make suggestions on what we should be

1418
03:25:17,240 --> 03:25:18,880
doing next.

1419
03:25:18,880 --> 03:25:25,760
So we won't really do stuff until someone suggests it.

1420
03:25:25,760 --> 03:25:28,440
And we'll just see where it goes.

1421
03:25:28,440 --> 03:25:29,960
So do you want to see if it runs first?

1422
03:25:29,960 --> 03:25:32,320
I guess that's the first step, right?

1423
03:25:32,320 --> 03:25:34,560
Yes, let's try it out.

1424
03:25:34,560 --> 03:25:39,360
I have already imported this package,

1425
03:25:40,700 --> 03:25:43,620
so I can run directly this one.

1426
03:25:43,620 --> 03:25:47,240
Oh, we got some fail not found.

1427
03:25:47,240 --> 03:25:49,740
Oh, I haven't downloaded the data.

1428
03:25:51,080 --> 03:25:54,600
It should be in this repo.

1429
03:25:54,600 --> 03:25:57,780
Yeah, we can see, we can have a glance here.

1430
03:25:57,780 --> 03:26:03,300
We can see that the record is there's

1431
03:26:03,300 --> 03:26:10,660
one record for each hour from 0, 1, 2.

1432
03:26:10,660 --> 03:26:12,660
We will download from here.

1433
03:26:16,380 --> 03:26:19,140
So you copied the link.

1434
03:26:19,140 --> 03:26:24,900
Yeah, I will use a Jupyter magic command.

1435
03:26:24,900 --> 03:26:27,740
That's clever.

1436
03:26:27,740 --> 03:26:33,900
So basically from the terminal you're using the wget program which downloads the file and saves it,

1437
03:26:33,900 --> 03:26:44,300
I guess. Yes, I think yes. Okay. It's running. And the exclamation mark there is the shell magic,

1438
03:26:44,300 --> 03:26:50,700
so it runs something. And yeah, we see it saved temperatures.csv.

1439
03:26:50,700 --> 03:26:59,260
All right, let's run this again. Okay, it works, so I will delete this.

1440
03:26:59,260 --> 03:27:05,260
You know, this is a question that's come up some past days, like how do you include data

1441
03:27:05,260 --> 03:27:10,860
along with an analysis? So there could be something that says if the data doesn't exist,

1442
03:27:10,860 --> 03:27:16,860
it runs this command to download and saves it. So just an idea.

1443
03:27:16,860 --> 03:27:23,500
Yeah, especially when you're working with a Jupyter Notebook, it's very convenient.

1444
03:27:23,500 --> 03:27:24,500
Yeah, okay.

1445
03:27:24,500 --> 03:27:25,500
And it works.

1446
03:27:25,500 --> 03:27:29,980
Yeah, should we go through this line by line?

1447
03:27:29,980 --> 03:27:31,260
Yes, please.

1448
03:27:31,260 --> 03:27:32,860
What do the parts mean?

1449
03:27:32,860 --> 03:27:40,100
Okay, so the first line is kind of a hard code.

1450
03:27:40,100 --> 03:27:45,300
It's number of measurements we want to analyze and visualize.

1451
03:27:45,300 --> 03:27:59,580
And then by using appenders, we read some data from a CSV file and then extract the one column.

1452
03:27:59,580 --> 03:28:08,800
We have done some computation, which is the mean of these temperatures and then some plot.

1453
03:28:08,800 --> 03:28:12,320
So very simple, but typical process.

1454
03:28:15,880 --> 03:28:19,400
But also, sorry.

1455
03:28:19,400 --> 03:28:21,920
In the notes, I put a question to the audience,

1456
03:28:21,920 --> 03:28:23,040
how is this not modular?

1457
03:28:25,760 --> 03:28:27,080
But there's no answers yet.

1458
03:28:27,080 --> 03:28:32,600
So maybe I can ask you, how is this not modular?

1459
03:28:32,600 --> 03:28:37,600
Well, we can see there's a file reading, data extracting,

1460
03:28:39,720 --> 03:28:42,440
and the calculation and the visualization,

1461
03:28:42,440 --> 03:28:44,680
all stuff together.

1462
03:28:44,680 --> 03:28:48,280
If next time I want to use just the plot,

1463
03:28:49,680 --> 03:28:50,760
what should I do?

1464
03:28:50,760 --> 03:28:52,960
I copy and paste?

1465
03:28:52,960 --> 03:28:56,380
That doesn't sound like a good idea.

1466
03:28:56,380 --> 03:29:01,380
So I would like some single functional unit.

1467
03:29:02,600 --> 03:29:09,920
of code that I can reuse. I don't need to copy-paste, just call that function.

1468
03:29:09,920 --> 03:29:17,440
Yeah. Yeah. Yeah, I guess that's right. So one of the first tasks suggested in the

1469
03:29:17,440 --> 03:29:28,080
workshop is to create plots for 25, 50, and 500 measurements. So if you want it

1470
03:29:28,080 --> 03:29:34,800
be very unmodular, you'd copy and paste the code block three times and then rerun it,

1471
03:29:35,440 --> 03:29:37,760
and that makes a lot of code duplication.

1472
03:29:40,480 --> 03:29:46,080
So you can just copy the cells. Yeah. So if we want to be slightly better than that,

1473
03:29:46,080 --> 03:29:54,400
how would we make three different plots? I will use a for loop that I don't need to

1474
03:29:54,400 --> 03:29:59,400
to repeat all this stuff, so three times, should we try that?

1475
03:30:03,920 --> 03:30:05,120
Yes, let's do it.

1476
03:30:06,440 --> 03:30:11,440
Okay, I will say, well, number of measurements in the list.

1477
03:30:11,440 --> 03:30:36,480
in the list. So 25, 100, and 500. Okay, let me run it. Okay, it works. It's better than

1478
03:30:36,480 --> 03:30:38,120
than three cells.

1479
03:30:38,120 --> 03:30:40,720
Yeah, OK.

1480
03:30:40,720 --> 03:30:44,920
But since it's not modular, we forgot

1481
03:30:44,920 --> 03:30:47,920
to change the file name it was saving to.

1482
03:30:47,920 --> 03:30:52,480
So this is always a risk.

1483
03:30:52,480 --> 03:30:59,200
So should we fix that first?

1484
03:30:59,200 --> 03:31:06,200
Maybe we can either define unique names for them

1485
03:31:06,200 --> 03:31:14,120
or we can use some other variable to generate the file name automatically.

1486
03:31:16,680 --> 03:31:23,480
Maybe we can use the number of measurements. That's exactly what is being used here, 25.

1487
03:31:23,480 --> 03:31:24,280
Yeah, makes sense.

1488
03:31:25,000 --> 03:31:26,600
Yeah, okay. Let's do that.

1489
03:31:36,200 --> 03:31:54,960
Okay, yes. So, use string formatting in the variable, make defining out file. And this

1490
03:31:54,960 --> 03:32:01,480
is also good because in the future when we need to, if we make it more modular, we have

1491
03:32:01,480 --> 03:32:08,840
variable already defined, so it's good. Yes. Okay, so what should we do next?

1492
03:32:08,840 --> 03:32:14,840
I'm waiting for chat messages. Let's see. Let's see if anyone suggests something.

1493
03:32:17,400 --> 03:32:23,000
Is there anything we should extract out and pull from here?

1494
03:32:24,760 --> 03:32:29,480
Well, I don't like the visualization and the calculations together.

1495
03:32:29,480 --> 03:32:36,860
So would you like to pull one of them out? Yeah, at least I would like to pull

1496
03:32:36,860 --> 03:32:43,140
the plot part out. Yeah, makes sense. And it really makes sense that once we have

1497
03:32:43,140 --> 03:32:48,920
all the plots working well, so we define all the axis labels and format and stuff

1498
03:32:48,920 --> 03:32:55,620
like that, we'd want to be able to use the same plot format in multiple cases.

1499
03:32:55,620 --> 03:33:02,260
Someone says we need an underscore and out file.

1500
03:33:02,260 --> 03:33:05,780
Oh, yes. Thank you so much.

1501
03:33:07,780 --> 03:33:11,940
So I will move this out.

1502
03:33:11,940 --> 03:33:13,460
Yes. Okay.

1503
03:33:13,460 --> 03:33:17,540
See, I will define a function for this.

1504
03:33:17,540 --> 03:33:26,420
It will be plot and temperatures.

1505
03:33:33,140 --> 03:33:42,900
So do we need some input? Yeah, so what should the inputs be? Well, outfail should be here, I guess.

1506
03:33:42,900 --> 03:33:43,400
I guess.

1507
03:33:49,580 --> 03:33:52,920
Should the temperatures be an input?

1508
03:33:52,920 --> 03:33:53,420
Yes.

1509
03:33:57,180 --> 03:34:00,420
And the mean, I guess.

1510
03:34:00,420 --> 03:34:01,420
Oh, right.

1511
03:34:01,420 --> 03:34:02,700
Yeah.

1512
03:34:02,700 --> 03:34:07,100
Should we give alt file some default value?

1513
03:34:07,100 --> 03:34:08,780
Yeah, why not?

1514
03:34:08,780 --> 03:34:11,340
So default to none.

1515
03:34:11,340 --> 03:34:15,300
Then we can use the number of measurements

1516
03:34:15,300 --> 03:34:26,380
as the output file name, or a different idea.

1517
03:34:29,740 --> 03:34:32,940
Yeah, what should or could it just

1518
03:34:32,940 --> 03:34:37,100
be something like plot.png, so not take any stand

1519
03:34:37,100 --> 03:34:42,520
and it basically always, like, it minimally works,

1520
03:34:42,520 --> 03:34:45,440
but always needs to be something.

1521
03:34:45,440 --> 03:34:47,280
Or maybe we should just call it good enough

1522
03:34:47,280 --> 03:34:50,020
and accept you need an output.

1523
03:34:50,020 --> 03:34:53,600
Otherwise, it doesn't make sense.

1524
03:34:53,600 --> 03:34:56,120
So we will use the out file.

1525
03:34:56,120 --> 03:35:00,620
What if the default was none, and then the save fig only

1526
03:35:00,620 --> 03:35:08,540
ran if there's a given out file.

1527
03:35:08,540 --> 03:35:09,660
Yes, yes.

1528
03:35:09,660 --> 03:35:16,500
If out file, then we save.

1529
03:35:16,500 --> 03:35:20,620
So now the function is usable both for interactive kind

1530
03:35:20,620 --> 03:35:25,620
of work, and then if you want to save stuff later.

1531
03:35:25,620 --> 03:35:28,260
Although there are still some problems with that,

1532
03:35:28,260 --> 03:35:30,700
But we can get there later.

1533
03:35:30,700 --> 03:35:31,740
Yes.

1534
03:35:31,740 --> 03:35:33,180
OK.

1535
03:35:33,180 --> 03:35:37,900
And now we need to put this back into num measurements.

1536
03:35:37,900 --> 03:35:40,100
Yes, we will.

1537
03:35:58,260 --> 03:36:05,260
Or we just this.

1538
03:36:05,260 --> 03:36:06,260
Okay.

1539
03:36:06,260 --> 03:36:07,260
Yeah.

1540
03:36:07,260 --> 03:36:08,260
And mean.

1541
03:36:08,260 --> 03:36:11,260
Oh, but it should specify the outfile.

1542
03:36:11,260 --> 03:36:12,260
Yeah.

1543
03:36:12,260 --> 03:36:14,260
If we want, then.

1544
03:36:14,260 --> 03:36:15,260
Oh, yeah.

1545
03:36:15,260 --> 03:36:18,260
But we could also not give it right now.

1546
03:36:18,260 --> 03:36:19,260
Yeah.

1547
03:36:19,260 --> 03:36:23,260
Yeah, we could comment this out.

1548
03:36:23,260 --> 03:36:24,260
Yeah.

1549
03:36:24,260 --> 03:36:25,260
Yeah.

1550
03:36:25,260 --> 03:36:26,260
Okay.

1551
03:36:26,260 --> 03:36:32,260
Should we try without saving firstly?

1552
03:36:32,260 --> 03:36:36,260
Yeah, let's try.

1553
03:36:36,260 --> 03:36:38,260
Then we don't need to specify this.

1554
03:36:38,260 --> 03:36:39,260
Okay.

1555
03:36:39,260 --> 03:36:43,260
It won't be saved.

1556
03:36:43,260 --> 03:36:45,260
Should I run it again?

1557
03:36:45,260 --> 03:36:46,260
Yeah, let's go.

1558
03:36:46,260 --> 03:36:47,260
Okay.

1559
03:36:47,260 --> 03:36:50,260
It's still working.

1560
03:36:50,260 --> 03:36:51,260
Yeah.

1561
03:36:51,260 --> 03:36:53,260
Okay.

1562
03:36:53,260 --> 03:37:11,100
So, what's next? Should we extract more functions out? So, something, one of the

1563
03:37:11,100 --> 03:37:24,540
files says one of these suggestions is to remove the compute statistics and

1564
03:37:24,540 --> 03:37:31,260
reading data functions out to set yeah move these two separate functions yeah

1565
03:37:31,260 --> 03:37:38,340
that sounds quite reasonable to me yeah okay so this part will go to another

1566
03:37:38,340 --> 03:37:54,120
function which will be let me name it get get data maybe so should we make the

1567
03:37:54,120 --> 03:38:06,740
input file we can we can flexibly use different input file yeah so the

1568
03:38:06,740 --> 03:38:14,340
function shouldn't, should be able to work on different inputs. Yep, okay. Yeah, see, then this

1569
03:38:14,340 --> 03:38:25,220
will be an input fail. Yeah. Number of measurements, maybe a second argument. Okay, yeah, I guess

1570
03:38:26,100 --> 03:38:33,460
that has to be specified from outside. Yes. So what if we didn't have it as an argument?

1571
03:38:33,460 --> 03:38:39,820
So I think the code would still work because of how Python goes, but is that

1572
03:38:39,820 --> 03:38:48,700
good? You mean, well, if we don't specify this number of rows, I think

1573
03:38:48,700 --> 03:38:55,220
it will read all the rows. Yeah. But if we leave it like this, then

1574
03:38:55,220 --> 03:38:58,260
And we probably will get an error.

1575
03:38:58,260 --> 03:39:00,380
Yeah.

1576
03:39:00,380 --> 03:39:03,020
So yeah.

1577
03:39:03,020 --> 03:39:04,380
OK.

1578
03:39:04,380 --> 03:39:04,980
That's good.

1579
03:39:04,980 --> 03:39:05,980
So we've got that.

1580
03:39:08,580 --> 03:39:10,700
So I'll put it back.

1581
03:39:10,700 --> 03:39:12,260
It runs successfully.

1582
03:39:22,980 --> 03:39:24,740
Is that the file name?

1583
03:39:24,740 --> 03:39:40,420
I think so, yes. Okay, is it still working? Okay, yeah, okay, good. Now we have two functions.

1584
03:39:41,140 --> 03:39:46,580
Is there too much data being plotted? Did it read the whole thing if you scroll down?

1585
03:39:46,580 --> 03:40:02,080
Sounds weird. What I would do usually is to restart the kernel because there might be some

1586
03:40:02,080 --> 03:40:07,520
variable names polluted. Good point, yeah.

1587
03:40:08,880 --> 03:40:13,520
Okay, there are some typos, I think.

1588
03:40:13,680 --> 03:40:17,280
Okay. Oh, yeah.

1589
03:40:17,440 --> 03:40:22,320
Yeah, okay, so we need to store the output of the getData function.

1590
03:40:22,320 --> 03:40:26,080
Yeah, we need to return.

1591
03:40:32,080 --> 03:40:48,000
Nasty. Okay, now it looks okay. Yeah, okay, this looks like it looked okay.

1592
03:40:48,000 --> 03:40:50,880
And then should we extract out the statistics function?

1593
03:40:52,640 --> 03:40:57,280
Yeah, I would love to do that in case I want to do something different.

1594
03:40:57,280 --> 03:41:15,280
So that means we will have a third function. I'll call it getName.

1595
03:41:15,280 --> 03:41:22,280
Someone points out that infile isn't specified.

1596
03:41:22,280 --> 03:41:27,280
Why do you specify it?

1597
03:41:27,280 --> 03:41:30,280
Oh no, it is specified, yeah, in git data.

1598
03:41:30,280 --> 03:41:32,280
Yeah, yeah.

1599
03:41:32,280 --> 03:41:33,280
Yeah.

1600
03:41:41,280 --> 03:41:43,280
Yeah, I think it is specified here.

1601
03:41:43,280 --> 03:41:45,120
I mean, it worked, so it had to be there.

1602
03:41:48,000 --> 03:41:52,000
When the question came up, though, I got confused.

1603
03:41:52,000 --> 03:41:54,560
So I wondered, how is this working?

1604
03:41:55,920 --> 03:42:02,240
Yeah, so the input will be temperatures.

1605
03:42:05,040 --> 03:42:09,280
But do we want to use this number of measurements,

1606
03:42:09,280 --> 03:42:15,120
or we can get it from the input temperatures.

1607
03:42:15,120 --> 03:42:18,280
Yeah, it should probably come from the input temperatures.

1608
03:42:18,280 --> 03:42:21,880
So we could pass it as an argument,

1609
03:42:21,880 --> 03:42:26,120
but then we have to basically pass redundant information

1610
03:42:26,120 --> 03:42:30,760
because the column knows how many rows are there, right?

1611
03:42:30,760 --> 03:42:32,880
Yeah, and there might be some risk

1612
03:42:32,880 --> 03:42:37,320
that we input a wrong number.

1613
03:42:37,320 --> 03:42:39,880
So this might be better, I think.

1614
03:42:39,880 --> 03:42:41,480
Yeah.

1615
03:42:41,480 --> 03:42:43,200
OK.

1616
03:42:43,200 --> 03:42:45,320
Let me rerun this.

1617
03:42:45,320 --> 03:42:47,560
OK, still working.

1618
03:42:47,560 --> 03:42:50,560
Yeah, OK, good.

1619
03:42:50,560 --> 03:42:54,200
So let's talk about which of these are pure functions

1620
03:42:54,200 --> 03:42:54,720
or not.

1621
03:42:54,720 --> 03:43:01,160
So is there any parameters other than the arguments?

1622
03:43:01,160 --> 03:43:05,000
And does it have any side effects?

1623
03:43:05,000 --> 03:43:13,080
So plotTemperatures, it's based only on the input arguments,

1624
03:43:13,080 --> 03:43:19,480
but it does have side effects, but only saving files.

1625
03:43:19,480 --> 03:43:23,600
So is this function easy to test?

1626
03:43:23,600 --> 03:43:26,960
I think, yes, at least for getMean,

1627
03:43:26,960 --> 03:43:32,240
we can easily test it by using test.

1628
03:43:32,240 --> 03:43:36,000
Oh, git mean, oh, it's talking about plot temperatures.

1629
03:43:36,000 --> 03:43:37,160
So let's start with git mean.

1630
03:43:37,160 --> 03:43:38,880
That's the easier one.

1631
03:43:38,880 --> 03:43:43,880
So for git mean, this is the easiest thing

1632
03:43:43,880 --> 03:43:46,880
to test because there's no side effects.

1633
03:43:46,880 --> 03:43:52,680
The only input is the, the only thing that affects

1634
03:43:52,680 --> 03:43:55,200
the output is the input.

1635
03:43:55,200 --> 03:43:58,520
Should we make a test now for it or later?

1636
03:43:58,520 --> 03:44:07,160
would like to, well, I usually test, I usually do unit tests in the Python script other than

1637
03:44:07,800 --> 03:44:12,600
Jupyter Notebook. Yeah, you're right. Like, if we did the test, then how would we know if it even

1638
03:44:13,320 --> 03:44:20,280
worked? Yeah. Okay, so let's not test it yet. But git main is easy to test. Is the function

1639
03:44:20,280 --> 03:44:23,600
get data easy to test?

1640
03:44:23,600 --> 03:44:30,560
Get data, I think there are several things we can test.

1641
03:44:30,560 --> 03:44:37,200
For example, we can test the size of data.

1642
03:44:37,200 --> 03:44:42,040
Is it matching with the number of measurements?

1643
03:44:42,040 --> 03:44:43,240
Something like that.

1644
03:44:48,280 --> 03:44:49,200
Can you say that again?

1645
03:44:49,200 --> 03:44:57,200
was reading the stats. I mean because the input is number of measurements and we pass that to the

1646
03:44:57,200 --> 03:45:09,280
read CSV method, we want to verify that the extracted data has the exact the same number of

1647
03:45:10,400 --> 03:45:18,240
records we want. That could be something we can test. That's a good idea. So start with like

1648
03:45:19,200 --> 03:45:30,000
Yeah, so include some sample data, like this one, and then we can, well, there's not that

1649
03:45:30,000 --> 03:45:34,720
much that can go wrong, but test that, okay, yeah.

1650
03:45:34,720 --> 03:45:43,520
Yeah, usually for computation functions, I would do some tests, like getMin.

1651
03:45:43,520 --> 03:45:48,480
Yeah, okay.

1652
03:45:48,480 --> 03:45:52,960
a question. Maybe it's better to put the get mean function call inside the plot

1653
03:45:52,960 --> 03:45:58,880
temperatures function. So should we compute the mean outside or inside the

1654
03:45:58,880 --> 03:46:14,040
plotting function? Well, usually I would make them stand alone instead of...

1655
03:46:14,040 --> 03:46:22,480
yeah it depends yeah like like what do you want the plot temperatures to only

1656
03:46:22,480 --> 03:46:27,960
plot means or maybe it could plot other statistics too like it's yeah right now

1657
03:46:27,960 --> 03:46:34,560
basically a general function that plots the temperatures and a line and the line

1658
03:46:34,560 --> 03:46:41,320
can be different things yeah let's imagine that we define a force function

1659
03:46:41,320 --> 03:46:51,640
that we'll get not an arithmetic mean, but a geometric mean, then we can plot a different thing.

1660
03:46:51,640 --> 03:46:58,280
Yeah. There's also a good suggestion, why not use statistics.mean instead of creating a custom

1661
03:46:58,280 --> 03:47:04,680
function? And yeah, I guess that would make sense, but this is a demo and this is an example of

1662
03:47:04,680 --> 03:47:09,960
something that would be more complex. So yeah, yeah, we want to go to a very,

1663
03:47:10,600 --> 03:47:18,200
very complex Python stuff. We want to make it more general. Yeah, someone suggests testing

1664
03:47:18,200 --> 03:47:24,760
if the column for air temperatures is numeric, and that sometimes they've done things and it

1665
03:47:24,760 --> 03:47:31,400
writes it as a different type of data. Yeah, yeah, yeah, true, true. Let's get to that later.

1666
03:47:31,400 --> 03:47:43,400
Okay, so we have the loop, we have means. So how modular is it now? So what benefit have we achieved so far?

1667
03:47:43,400 --> 03:47:56,400
I think so far we have split the whole block of code into three single purpose functions. All of them could be reused.

1668
03:47:56,400 --> 03:47:58,400
Yeah, you can

1669
03:48:00,240 --> 03:48:08,960
Well, if it's a Python script then you can import them to a different Python script or a different notebook

1670
03:48:10,480 --> 03:48:15,320
Yeah, that's I would say we have improved the code

1671
03:48:16,720 --> 03:48:18,720
Yeah

1672
03:48:19,240 --> 03:48:21,240
Okay, what should we do now

1673
03:48:24,280 --> 03:48:26,280
Should we

1674
03:48:26,400 --> 03:48:33,880
make it a Python script or is there anything else?

1675
03:48:35,680 --> 03:48:39,240
Yeah, I would like to make a Python script.

1676
03:48:39,240 --> 03:48:44,400
When I come to this point of coding,

1677
03:48:44,400 --> 03:48:47,720
I have done some interactive work.

1678
03:48:47,720 --> 03:48:51,640
I have seen some visualization of data.

1679
03:48:51,640 --> 03:48:55,360
A Python script will make it more convenient to

1680
03:48:55,360 --> 03:48:58,640
to do more exploration.

1681
03:48:58,640 --> 03:48:59,520
Yeah.

1682
03:48:59,520 --> 03:49:00,020
OK.

1683
03:49:02,720 --> 03:49:07,320
How do you make a Jupyter Notebook to a Python script

1684
03:49:07,320 --> 03:49:09,040
usually?

1685
03:49:09,040 --> 03:49:10,480
Hmm.

1686
03:49:10,480 --> 03:49:13,340
I haven't done it that many times.

1687
03:49:13,340 --> 03:49:16,840
I think you can use nbconvert or export it.

1688
03:49:16,840 --> 03:49:19,400
Or maybe in the end, I would just

1689
03:49:19,400 --> 03:49:25,160
copy what I need over since usually whenever I do something,

1690
03:49:25,160 --> 03:49:30,440
There's like, it's too messy for me to want to do everything.

1691
03:49:30,440 --> 03:49:31,840
This seems a bit cleaner.

1692
03:49:31,840 --> 03:49:33,240
So what do you recommend?

1693
03:49:33,240 --> 03:49:36,560
Yeah, this one is not very long.

1694
03:49:36,560 --> 03:49:40,520
So maybe we can use the simple way,

1695
03:49:40,520 --> 03:49:44,000
because Jupyter Notebook has this save and export

1696
03:49:44,000 --> 03:49:49,160
Notebook as executable script function.

1697
03:49:49,160 --> 03:49:52,880
So yeah, we can do this, I think.

1698
03:49:55,160 --> 03:50:02,160
Okay, I will save it.

1699
03:50:02,160 --> 03:50:11,160
Okay, temp visual.py, yep, okay.

1700
03:50:11,160 --> 03:50:17,160
Okay, let's see. I think it's here. Yes.

1701
03:50:17,160 --> 03:50:23,160
Yeah, okay. So, it looks like Python code.

1702
03:50:23,160 --> 03:50:28,160
So, yeah, how do we start fixing it up?

1703
03:50:28,160 --> 03:50:41,160
Well, I will remove this redundant stuff from Jupyter Notebook.

1704
03:50:41,160 --> 03:50:49,160
Then maybe we can simply run it to see if things go wrong.

1705
03:50:49,160 --> 03:51:02,680
Good idea. Yeah, so yeah. Yeah, I suppose it could work. Yeah, I mean, probably. So maybe

1706
03:51:02,680 --> 03:51:08,360
this is the first time, well, we've seen examples of command-line usage before,

1707
03:51:08,360 --> 03:51:17,520
but can you explain what it means to be running it on the command line now? Well,

1708
03:51:17,520 --> 03:51:28,240
it means you will use Python. You will use Python and specify the name of the py file, which is a

1709
03:51:28,240 --> 03:51:41,200
script. Then the Python interpreter will run the program. Yeah, okay, so we give it the program

1710
03:51:41,200 --> 03:51:47,440
name. And right now there's no argument, so it just runs it from top to bottom.

1711
03:51:47,440 --> 03:51:54,480
Yeah, everything is entered in the script itself. Let's see.

1712
03:51:58,320 --> 03:52:01,360
Okay, the importing will take time. Okay.

1713
03:52:02,160 --> 03:52:04,880
Okay, we are supposed to have...

1714
03:52:04,880 --> 03:52:13,920
It's showing. Okay, so now here the command line program is opening a graphical window.

1715
03:52:14,880 --> 03:52:22,320
Is this what we want? It depends. If we are working on HPC,

1716
03:52:23,680 --> 03:52:30,720
we don't want it to show because there's no display. But if it's locally, I don't quite

1717
03:52:30,720 --> 03:52:34,080
demanded to see it show.

1718
03:52:34,080 --> 03:52:38,640
Should we make it where, this is what we said before, right?

1719
03:52:38,640 --> 03:52:43,000
So if it, maybe we could say if you give it a file name,

1720
03:52:43,000 --> 03:52:44,680
it saves the file name.

1721
03:52:44,680 --> 03:52:46,320
If you don't give it a file name,

1722
03:52:46,320 --> 03:52:52,240
then it shows it with plot.show.

1723
03:52:52,240 --> 03:52:52,800
Yes.

1724
03:52:52,800 --> 03:52:54,760
Does that make sense?

1725
03:52:54,760 --> 03:52:55,880
Yes.

1726
03:52:55,880 --> 03:52:58,960
Yeah, I think if we don't want it to be shown,

1727
03:52:58,960 --> 03:53:01,520
then we probably want to save it.

1728
03:53:01,520 --> 03:53:03,720
Yeah.

1729
03:53:03,720 --> 03:53:07,360
So that would be around line 10 we adjust.

1730
03:53:07,360 --> 03:53:08,480
Yes.

1731
03:53:08,480 --> 03:53:12,120
So we can comment out this line.

1732
03:53:12,120 --> 03:53:14,240
Then it won't be shown.

1733
03:53:14,240 --> 03:53:19,320
But instead, we would like to input output file name.

1734
03:53:19,320 --> 03:53:22,120
Then it will be saved.

1735
03:53:22,120 --> 03:53:26,560
Should we say under the if out file then else

1736
03:53:26,560 --> 03:53:29,040
And then do plot dot show if there's nothing.

1737
03:53:29,040 --> 03:53:30,720
Oh, yeah, that's a good idea.

1738
03:53:39,560 --> 03:53:40,800
Yeah, I see.

1739
03:53:40,800 --> 03:53:41,300
OK.

1740
03:53:46,280 --> 03:53:48,640
So is it good that it does two different things

1741
03:53:48,640 --> 03:53:49,720
depending on the argument?

1742
03:53:52,840 --> 03:53:54,600
I guess.

1743
03:53:54,600 --> 03:53:56,520
It's good, I think.

1744
03:53:56,520 --> 03:53:59,800
Yeah, it's a reasonable compromise for now.

1745
03:53:59,800 --> 03:54:01,320
It's a pattern people might want.

1746
03:54:01,320 --> 03:54:04,920
Like, if the plotting function was actually

1747
03:54:04,920 --> 03:54:09,520
relatively difficult, then maybe this

1748
03:54:09,520 --> 03:54:14,760
would be a good way to use it two different ways.

1749
03:54:14,760 --> 03:54:15,400
Yeah.

1750
03:54:15,400 --> 03:54:21,720
OK, so if you run it now, does it show anything graphically?

1751
03:54:21,720 --> 03:54:25,760
Yeah, because we didn't input any output first.

1752
03:54:25,760 --> 03:54:30,120
So it goes to the else.

1753
03:54:30,120 --> 03:54:30,760
Right.

1754
03:54:30,760 --> 03:54:33,240
OK, so we need to give it the output file again.

1755
03:54:33,240 --> 03:54:34,360
OK.

1756
03:54:34,360 --> 03:54:37,040
Then we need to modify the script.

1757
03:54:37,040 --> 03:54:37,560
Yeah.

1758
03:54:37,560 --> 03:54:40,600
Is that something you want to do?

1759
03:54:40,600 --> 03:54:43,840
Yeah, should we give it a way to specify,

1760
03:54:43,840 --> 03:54:45,560
should we hard code the output file,

1761
03:54:45,560 --> 03:54:50,240
or should we make it a full script with arguments now?

1762
03:54:50,240 --> 03:54:52,840
Well, I'd like the argument idea.

1763
03:54:52,840 --> 03:54:53,360
OK.

1764
03:54:53,360 --> 03:54:59,520
don't want to touch the script that much. Yeah, okay, good idea. And someone here

1765
03:54:59,520 --> 03:55:06,480
suggests disconnecting the loop, so maybe we can do this at the same time. So before

1766
03:55:06,480 --> 03:55:10,760
the script would run it for all these measurements, now the number of

1767
03:55:10,760 --> 03:55:19,400
measurements should be an argument. Yes. Okay, so do we make a main function here?

1768
03:55:19,400 --> 03:55:25,960
is it? Yes. Okay. Let's make a main function that can take a number of

1769
03:55:25,960 --> 03:55:36,400
measurements as an input. Okay, yeah. Okay. And what other inputs should we give it?

1770
03:55:36,400 --> 03:55:46,740
Info, I would say. Yeah. The output file? Output file. Are those the three main

1771
03:55:46,740 --> 03:56:03,940
things I guess yeah yeah okay so whenever you make a command line program

1772
03:56:03,940 --> 03:56:09,820
what do you use for parsing the arguments there are several different

1773
03:56:09,820 --> 03:56:19,820
And tools, they are pretty much similar, like arg parse or click.

1774
03:56:19,820 --> 03:56:28,180
Well, the example solution says using click, so maybe we should do that.

1775
03:56:28,180 --> 03:56:29,180
Okay.

1776
03:56:29,180 --> 03:56:32,420
I can't remember all the commands, but...

1777
03:56:32,420 --> 03:56:35,260
Well, I'm reading here, so I can tell you.

1778
03:56:35,260 --> 03:56:42,260
So, okay, above death equals main, then at sign click dot command with parentheses.

1779
03:56:42,260 --> 03:56:54,460
I remember it's a click option.

1780
03:56:54,460 --> 03:56:58,180
Dot option, yeah.

1781
03:56:58,180 --> 03:57:05,220
And then dash dash the measurements.

1782
03:57:05,220 --> 03:57:10,420
Does the order matter? Should we specify infile firstly?

1783
03:57:10,420 --> 03:57:18,660
Oh, maybe we do infile first. I often do that also, so sort of go the input arguments first,

1784
03:57:18,660 --> 03:57:25,540
then the analysis ones, then the output ones, but it parses it in any order.

1785
03:57:27,380 --> 03:57:32,420
Yes, so it's required, I guess.

1786
03:57:35,220 --> 03:57:39,140
Ah, there's a good point here.

1787
03:57:39,140 --> 03:57:42,500
Is an infile an argument and not an option?

1788
03:57:42,500 --> 03:57:44,460
So it should be an argument.

1789
03:57:44,460 --> 03:57:46,540
So maybe we can say what's the difference here.

1790
03:57:46,540 --> 03:57:53,780
So option is usually something with the two dashes on it, and is optional.

1791
03:57:53,780 --> 03:58:00,260
But positional arguments don't need the dashed things, and you are just taking the first

1792
03:58:00,260 --> 03:58:04,500
one on the command line as the first one, and second one as the second one.

1793
03:58:04,500 --> 03:58:11,420
But our example we're following has everything as options, so maybe we should follow the

1794
03:58:11,420 --> 03:58:14,860
example rather than make things ourselves.

1795
03:58:14,860 --> 03:58:15,860
Okay.

1796
03:58:15,860 --> 03:58:21,500
But we should specify it's required, right?

1797
03:58:21,500 --> 03:58:22,500
Yes.

1798
03:58:22,500 --> 03:58:28,100
There's no default, but definitely some help.

1799
03:58:28,100 --> 03:58:30,660
Yeah, okay.

1800
03:58:30,660 --> 03:58:51,820
it's the input file name. Yes. So a second one is number of measurements. I think the

1801
03:58:51,820 --> 03:58:57,100
convention is dash instead of underscore.

1802
03:59:03,180 --> 03:59:10,220
This is also required and it must be a int.

1803
03:59:10,220 --> 03:59:12,940
Yes, okay.

1804
03:59:13,340 --> 03:59:16,300
And also when you specify the type like this,

1805
03:59:16,300 --> 03:59:20,300
it will automatically convert it to that type.

1806
03:59:20,300 --> 03:59:20,800
Yes.

1807
03:59:20,800 --> 03:59:22,300
And give a warning if it's not.

1808
03:59:25,140 --> 03:59:43,780
So help, that would be the number of methods to use.

1809
03:59:43,780 --> 04:00:05,620
Then, another one will be the output.

1810
04:00:05,620 --> 04:00:07,620
This is not required.

1811
04:00:07,620 --> 04:00:14,420
Okay, yeah. In the example it says it's required, but I guess we can leave it as

1812
04:00:14,420 --> 04:00:19,380
not required and it will show it on the screen, which is possibly nice.

1813
04:00:19,380 --> 04:00:26,340
Yes. So not required, right? Yeah, not required.

1814
04:00:26,340 --> 04:00:34,260
Okay, output file name, okay.

1815
04:00:44,900 --> 04:00:54,020
Yeah, but in the main function, we didn't reflect anything about the output file.

1816
04:00:54,020 --> 04:01:01,680
Okay, yeah, so we should add that to plotTemperatures, I guess. Is it the last

1817
04:01:01,680 --> 04:01:12,820
argument? Yes, I think so. Yes, it's the last argument.

1818
04:01:12,820 --> 04:01:23,140
So, it should be like this, I guess.

1819
04:01:23,140 --> 04:01:24,140
Yes.

1820
04:01:24,140 --> 04:01:25,140
Okay.

1821
04:01:25,140 --> 04:01:28,460
Do you think it will work?

1822
04:01:28,460 --> 04:01:31,780
We need to specify the namespace.

1823
04:01:31,780 --> 04:01:37,180
Yeah, it has to actually run main.

1824
04:01:37,180 --> 04:01:42,380
So what you're about to see is the typical pattern you see at the bottom of Python files.

1825
04:01:42,380 --> 04:01:50,060
So this means if it's imported, then it just imports it, and all the functions can be used.

1826
04:01:50,060 --> 04:01:56,180
But if it's run as a script from a command line, then name is equal to this main value

1827
04:01:56,180 --> 04:02:00,740
here, and then it should run the function.

1828
04:02:00,740 --> 04:02:05,060
So this is just basically the pattern you use all the time.

1829
04:02:05,060 --> 04:02:06,060
So let's see.

1830
04:02:06,060 --> 04:02:07,060
Does it work?

1831
04:02:07,060 --> 04:02:10,420
I think I forgot to import.

1832
04:02:10,420 --> 04:02:13,140
Yes, we have to import click.

1833
04:02:13,140 --> 04:02:14,580
Yes.

1834
04:02:14,580 --> 04:02:19,300
I'll guess you have it installed from the Code Refinery.

1835
04:02:19,300 --> 04:02:24,260
Oh, yeah. I haven't activated the environment.

1836
04:02:24,260 --> 04:02:33,140
I guess everyone has created this content environment for the workshop.

1837
04:02:33,140 --> 04:02:35,580
I also created it myself.

1838
04:02:35,580 --> 04:02:43,180
Activate. Yeah, but it worked before.

1839
04:02:43,180 --> 04:02:46,060
Yeah. Let's see.

1840
04:02:46,060 --> 04:02:46,700
Okay.

1841
04:02:46,700 --> 04:02:47,700
Okay.

1842
04:02:47,700 --> 04:02:49,800
Yeah, it should be better now.

1843
04:02:49,800 --> 04:02:56,100
Yeah. What if we run without arguments?

1844
04:02:56,100 --> 04:03:01,260
Can we see help text or something?

1845
04:03:01,260 --> 04:03:04,460
Yeah. Missing option, yeah.

1846
04:03:04,460 --> 04:03:07,980
Okay, so it basically will guide us through everything that's needed.

1847
04:03:09,420 --> 04:03:11,420
Yeah, but let's check out this.

1848
04:03:17,340 --> 04:03:17,840
Yeah.

1849
04:03:20,300 --> 04:03:23,100
Oh, we need Python on it. Yes. Yeah. Okay.

1850
04:03:25,260 --> 04:03:34,060
Yeah, we can see this help message reflects what we specified by using click.

1851
04:03:34,060 --> 04:03:41,020
Yeah, okay. So let's see, can we then run it with all the options?

1852
04:03:43,580 --> 04:03:50,860
Let's see, we give it an input file which is

1853
04:03:53,420 --> 04:04:00,380
temperatures.csv, if I remember that correctly. Yeah, I think so.

1854
04:04:00,380 --> 04:04:12,180
So number of measurements, that will be, let's say, 25.

1855
04:04:12,180 --> 04:04:16,340
Let's try without output file.

1856
04:04:16,340 --> 04:04:18,220
It's supposed to show.

1857
04:04:18,220 --> 04:04:20,220
Yes.

1858
04:04:20,220 --> 04:04:24,060
And if we change the number of measurements, does it do more?

1859
04:04:24,060 --> 04:04:24,580
Let's see.

1860
04:04:28,220 --> 04:04:29,220
Great.

1861
04:04:29,220 --> 04:04:31,220
That looks correct.

1862
04:04:31,220 --> 04:04:31,720
Yes.

1863
04:04:31,720 --> 04:04:32,940
OK.

1864
04:04:32,940 --> 04:04:35,220
Good.

1865
04:04:35,220 --> 04:04:36,820
OK.

1866
04:04:36,820 --> 04:04:40,940
And if we give an out file, does it save it to somewhere?

1867
04:04:40,940 --> 04:04:43,620
Let's have a look.

1868
04:04:43,620 --> 04:04:44,120
Out.

1869
04:04:48,780 --> 04:04:49,460
Let me see.

1870
04:04:49,460 --> 04:04:51,740
Just an example.

1871
04:04:51,740 --> 04:04:52,240
.png.

1872
04:04:55,420 --> 04:04:58,460
It won't show, I think.

1873
04:04:59,220 --> 04:05:09,340
Yeah, okay. Let's see if it's saved. Okay, it's saved here. Maybe I can open it. Okay.

1874
04:05:09,340 --> 04:05:18,420
Yeah, and it's there. Okay. Yeah, that looks good. Should we summarize and then go to the

1875
04:05:18,420 --> 04:05:26,300
break and then we can do a little bit more when we come back? Yeah, I think it's a good

1876
04:05:26,300 --> 04:05:34,220
point to break. Okay so what did we just accomplish and what's the benefit of what we've done? Also

1877
04:05:34,220 --> 04:05:42,540
people can comment in the notes about what you think. So there's a lot more code but

1878
04:05:43,420 --> 04:05:49,180
also to do different analyses we don't have to edit the code at all. The code is basically

1879
04:05:49,180 --> 04:05:52,260
Basically just that.

1880
04:05:52,260 --> 04:05:58,940
And if we save these command line lines we run, then we can reproduce our analysis in

1881
04:05:58,940 --> 04:06:05,360
different ways.

1882
04:06:05,360 --> 04:06:10,320
If we want to run this automatically, for example with what we learned for SnakeMake

1883
04:06:10,320 --> 04:06:17,760
on Tuesday, we could easily plug this

1884
04:06:17,760 --> 04:06:21,960
into a SnakeMake workflow that does things.

1885
04:06:21,960 --> 04:06:25,320
We can script it to run many, many times on the cluster.

1886
04:06:27,920 --> 04:06:31,080
We can send it to someone else, and we can tell them,

1887
04:06:31,080 --> 04:06:32,040
use these options.

1888
04:06:32,040 --> 04:06:33,840
And they don't have to understand the code.

1889
04:06:33,840 --> 04:06:36,920
They only have to understand the help text here.

1890
04:06:36,920 --> 04:06:44,480
So by making this more modular, do we call this modular?

1891
04:06:44,480 --> 04:06:47,160
Yeah, I would definitely call this modular.

1892
04:06:47,160 --> 04:06:48,920
It could be reused.

1893
04:06:48,920 --> 04:06:52,320
It could be reproduced.

1894
04:06:52,320 --> 04:06:55,400
It can be easily scaled up.

1895
04:06:55,400 --> 04:06:57,120
So it's modular.

1896
04:06:57,120 --> 04:06:57,840
Yeah.

1897
04:06:57,840 --> 04:07:02,240
And the outsider using it has this clear defined interface

1898
04:07:02,240 --> 04:07:04,640
for it.

1899
04:07:04,640 --> 04:07:07,080
So I guess let's take a break.

1900
04:07:07,080 --> 04:07:09,440
Please keep suggesting what to do next.

1901
04:07:09,440 --> 04:07:13,280
I can think of a few things, like adding the test to it.

1902
04:07:13,280 --> 04:07:19,520
And we can see what we do then.

1903
04:07:19,520 --> 04:07:24,680
So there will be maybe 15 or 20 more minutes of working

1904
04:07:24,680 --> 04:07:25,680
on this.

1905
04:07:25,680 --> 04:07:29,480
And then we'll have a quick wrap-up of the whole workshop.

1906
04:07:29,480 --> 04:07:37,480
Okay. When should we come back?

1907
04:07:37,480 --> 04:07:40,480
I guess four past hour.

1908
04:07:40,480 --> 04:07:41,480
Okay.

1909
04:07:41,480 --> 04:07:42,480
Okay.

1910
04:07:42,480 --> 04:07:44,480
So 10 minutes break.

1911
04:07:44,480 --> 04:07:45,480
Okay. Thank you.

1912
04:07:45,480 --> 04:07:46,480
Okay.

1913
04:07:46,480 --> 04:07:47,480
See you soon.

1914
04:07:47,480 --> 04:07:48,480
Thank you. See you soon. Bye.

1915
04:07:59,480 --> 04:08:01,540
you

1916
04:08:29,480 --> 04:08:31,540
you

1917
04:08:59,480 --> 04:09:01,540
you

1918
04:09:29,480 --> 04:09:31,540
you

1919
04:09:59,480 --> 04:10:01,540
you

1920
04:10:29,480 --> 04:10:31,540
you

1921
04:10:59,480 --> 04:11:01,540
you

1922
04:11:29,480 --> 04:11:31,540
you

1923
04:11:59,480 --> 04:12:01,540
you

1924
04:12:29,480 --> 04:12:31,540
you

1925
04:12:59,480 --> 04:13:01,540
you

1926
04:13:29,480 --> 04:13:31,540
you

1927
04:13:59,480 --> 04:14:01,540
you

1928
04:14:29,480 --> 04:14:31,540
you

1929
04:14:59,480 --> 04:15:01,540
you

1930
04:15:29,480 --> 04:15:31,540
you

1931
04:15:59,480 --> 04:16:01,540
you

1932
04:16:29,480 --> 04:16:31,540
you

1933
04:16:59,480 --> 04:17:01,540
you

1934
04:17:29,480 --> 04:17:31,540
you

1935
04:17:59,480 --> 04:18:15,640
Hello. We're back. So, the last half an hour. In the notes, we had votes for, the most votes

1936
04:18:15,640 --> 04:18:21,120
were for adding tests. So, we're thinking of doing that next. And that really does seem

1937
04:18:21,120 --> 04:18:29,360
to be about the right time to do it. But before you do that, would you like to make it a

1938
04:18:29,360 --> 04:18:37,040
Git repository, so we have some record before we start changing a lot of stuff and risk breaking.

1939
04:18:37,040 --> 04:18:43,200
Yes, yes, when it comes to this point, when you have a script like this,

1940
04:18:44,480 --> 04:18:55,440
we would like to do some check. You have learned in last week, so I guess we all have Git installed,

1941
04:18:55,440 --> 04:19:08,560
so and yeah okay so it's not yet a git repo so I will initialize it

1942
04:19:09,280 --> 04:19:18,960
so git init I usually will specify the branch name so okay now it's initialized

1943
04:19:18,960 --> 04:19:33,840
and so we can check out with the most commonly used command git status so we

1944
04:19:33,840 --> 04:19:39,740
can see all the files are unchecked okay yeah but we don't want to check all of

1945
04:19:39,740 --> 04:19:51,740
them. I will check the code, of course. So, git add temp pool.

1946
04:19:51,740 --> 04:20:19,380
Yes, it's frozen. Okay, that one has been added. Do we want to add the notebook?

1947
04:20:19,380 --> 04:20:20,380
Maybe.

1948
04:20:20,380 --> 04:20:21,380
Yeah.

1949
04:20:21,380 --> 04:20:22,380
Well, yeah.

1950
04:20:22,380 --> 04:20:23,380
Why not?

1951
04:20:23,380 --> 04:20:36,780
I mean, I guess maybe it's being replaced now, but for a development project, we may

1952
04:20:36,780 --> 04:20:44,540
as well keep track of it and we can do something different with it later if it was ever needed.

1953
04:20:44,540 --> 04:20:45,540
Yes.

1954
04:20:45,540 --> 04:20:46,540
Okay.

1955
04:20:46,540 --> 04:20:50,340
So I won't track the plot.

1956
04:20:53,500 --> 04:20:57,720
Yeah, because you probably will have plenty of them.

1957
04:20:58,940 --> 04:21:03,420
Maybe at some point, I'll track the most important ones.

1958
04:21:03,420 --> 04:21:04,380
That depends.

1959
04:21:05,820 --> 04:21:08,780
But the idea is to show how we use Git

1960
04:21:08,780 --> 04:21:10,380
for the version control.

1961
04:21:10,380 --> 04:21:13,820
So I will commit to the...

1962
04:21:13,820 --> 04:21:15,300
Yeah.

1963
04:21:15,300 --> 04:21:16,500
Yeah.

1964
04:21:16,500 --> 04:21:18,140
OK.

1965
04:21:18,140 --> 04:21:23,300
So this is, well, usually I will,

1966
04:21:23,300 --> 04:21:29,780
it's the initial commit.

1967
04:21:29,780 --> 04:21:35,620
Or you can use some other meaningful commit message.

1968
04:21:35,620 --> 04:21:40,620
Okay, now we have checked the files we want to check.

1969
04:21:44,860 --> 04:21:49,860
So that's a version control you have learned in last week.

1970
04:21:50,660 --> 04:21:51,500
Yeah.

1971
04:21:53,000 --> 04:21:53,840
Okay.

1972
04:21:57,180 --> 04:22:00,100
So what else we can try?

1973
04:22:02,340 --> 04:22:05,580
Should we add a gitignore for the things we don't want?

1974
04:22:05,580 --> 04:22:18,420
yes yes that's a good idea yeah if you list if you list the hidden files you

1975
04:22:18,420 --> 04:22:32,220
will see there's a .git but typically we will add a gitignore file it's also a

1976
04:22:32,220 --> 04:22:43,220
hidden file, gitignore. And we add in all the stuff we don't want, like should we

1977
04:22:43,220 --> 04:22:56,180
add asterisk.png? Yes. And what else things like the pycache and the ipynbcache?

1978
04:22:56,180 --> 04:23:18,020
Yes, pycache, is that correct? And dot ipy. What's the ipynb cache? I forgot it, but let's

1979
04:23:18,020 --> 04:23:35,060
check it. It's the ipy and b checkpoints. Checkpoints, yes. Okay, yeah. So ipy, checkpoints.

1980
04:23:38,020 --> 04:23:45,060
Okay, with this git ignore, if we run git status again.

1981
04:23:45,060 --> 04:23:57,300
Yeah, gitignore itself. But I guess we'll add gitignore. Yes. Yes. Okay. How about the data?

1982
04:23:58,100 --> 04:24:04,660
Yeah, should this data be included? Since it's open data, not something sensitive,

1983
04:24:04,660 --> 04:24:13,940
and it's a small data we use as an example, so I would say it's fine to add it.

1984
04:24:13,940 --> 04:24:17,140
It would be good data for our tests, basically.

1985
04:24:17,140 --> 04:24:17,940
Yeah, yeah.

1986
04:24:17,940 --> 04:24:19,100
OK, sounds good.

1987
04:24:19,100 --> 04:24:20,500
So let's add it.

1988
04:24:20,500 --> 04:24:21,740
Yeah.

1989
04:24:21,740 --> 04:24:23,420
OK.

1990
04:24:23,420 --> 04:24:27,220
Now everything should be there.

1991
04:24:27,220 --> 04:24:31,300
Yes, but we needed to make another commit.

1992
04:24:31,300 --> 04:24:31,800
Yeah.

1993
04:24:31,800 --> 04:24:50,640
Let's see. Add the test data. Okay. Now it should be clean.

1994
04:24:50,640 --> 04:25:03,320
Yes. Yes. Okay, great. Okay, but now tests. So, which of these three functions would you

1995
04:25:03,320 --> 04:25:10,000
like to test, or which do we test things that aren't in a function?

1996
04:25:10,000 --> 04:25:22,160
I would test a function, like, well, if the first function I want to test is getMin.

1997
04:25:22,160 --> 04:25:24,960
I don't want the calculation wrong.

1998
04:25:24,960 --> 04:25:26,900
Yeah, yeah.

1999
04:25:26,900 --> 04:25:33,280
That seems like the most likely to go wrong without us noticing it, so.

2000
04:25:33,280 --> 04:25:39,080
Okay, should we add the test to this file or another file?

2001
04:25:39,080 --> 04:25:44,480
If there's only one test and the file is not very long,

2002
04:25:44,480 --> 04:25:46,800
I will add it here.

2003
04:25:46,800 --> 04:25:51,280
Otherwise, I will use a separate file for multiple tests.

2004
04:25:51,280 --> 04:25:51,780
Yeah.

2005
04:25:54,680 --> 04:25:57,880
So should we use a separate one?

2006
04:25:57,880 --> 04:26:01,680
Yeah, I mean, whenever I start with one really small thing

2007
04:26:01,680 --> 04:26:04,160
like this, I'll also often start just

2008
04:26:04,160 --> 04:26:19,920
inside of the like yeah just inside because yeah yeah it's small enough yeah yeah okay okay then i

2009
04:26:19,920 --> 04:26:38,080
will, uh, we need to import pet test. Yes, okay. Yes, so test min,

2010
04:26:40,400 --> 04:26:48,880
so min will be something calculated by using this function. Yeah, okay, so we basically run

2011
04:26:48,880 --> 04:26:59,200
the function. Yeah, maybe just a list of floats? Yeah, that's a good idea. So we basically give

2012
04:26:59,200 --> 04:27:06,560
it some of our very own data, and we know what the mean should be, so we can see what it is.

2013
04:27:07,440 --> 04:27:14,800
And this is sort of the best possible case, so we write in some values.

2014
04:27:18,880 --> 04:27:28,360
maybe another one yeah and then we could do yeah there and then for pi test we

2015
04:27:28,360 --> 04:27:44,600
would write assert mean equals 3 I guess 3.0 yes okay and then to run it how do

2016
04:27:44,600 --> 04:27:55,520
do we do this? We use pytest. So pytest. And since this file isn't named test, we

2017
04:27:55,520 --> 04:28:05,280
need to give it the file name. So temp visual. Yes. Yeah. Let's see. Importing syntax error.

2018
04:28:05,280 --> 04:28:09,280
Ah, yeah. Is it saved?

2019
04:28:09,280 --> 04:28:13,280
Dev, lantern, table.

2020
04:28:13,280 --> 04:28:17,280
What's wrong with this? Maybe it needs to be saved.

2021
04:28:17,280 --> 04:28:21,280
Okay. Oh, yeah.

2022
04:28:21,280 --> 04:28:25,280
That's something Jupyter Notebook doesn't do for you.

2023
04:28:25,280 --> 04:28:29,280
Okay. Sometimes. Yeah. So now it says

2024
04:28:29,280 --> 04:28:33,280
there was

2025
04:28:33,280 --> 04:28:37,680
one test collected, so we know it actually found it. If it said zero tests collected,

2026
04:28:37,680 --> 04:28:45,600
we'd be a bit worried. And it worked. And this time it happened to work, and there wasn't any

2027
04:28:45,600 --> 04:28:53,760
floating point error, which caused it to make problems. So that is good. If there was this

2028
04:28:53,760 --> 04:29:01,120
floating point error, it would say error 3.0 is not equal to 3.0000 something.

2029
04:29:01,120 --> 04:29:18,320
PetTest has this proxy method to avoid this kind of accuracy problem. Maybe we can use that.

2030
04:29:18,320 --> 04:29:20,320
Ah, good idea.

2031
04:29:20,320 --> 04:29:21,360
Like this.

2032
04:29:22,320 --> 04:29:23,920
Yeah, good to demo anyway.

2033
04:29:25,200 --> 04:29:30,320
Let's see. I'm sure this will work.

2034
04:29:31,120 --> 04:29:37,360
because it's less strict than before. Okay, yes, okay.

2035
04:29:40,160 --> 04:29:46,640
Yeah, do we want to test some other things? Like should we test if it works with negative numbers?

2036
04:29:47,680 --> 04:29:50,880
Would we test if it worked with no inputs at all?

2037
04:29:52,880 --> 04:29:59,360
Would we test that it works with one input? Or maybe this is a good stopping point.

2038
04:30:01,120 --> 04:30:04,120
What do you think?

2039
04:30:04,120 --> 04:30:11,120
Yeah, there is something else we can test.

2040
04:30:11,120 --> 04:30:13,120
Oh.

2041
04:30:13,120 --> 04:30:16,120
But we're also almost out of time, so.

2042
04:30:16,120 --> 04:30:17,120
Oh, yes.

2043
04:30:17,120 --> 04:30:20,120
We can talk about how we would test other things.

2044
04:30:20,120 --> 04:30:24,120
So how would we test the getData function?

2045
04:30:24,120 --> 04:30:27,680
GetDataFunction, as I mentioned,

2046
04:30:27,680 --> 04:30:31,040
we can test if the size is correct.

2047
04:30:31,040 --> 04:30:33,960
As it's mentioned in the notes that we can

2048
04:30:33,960 --> 04:30:37,720
test the data type of temperatures.

2049
04:30:37,720 --> 04:30:41,040
We want it to be float.

2050
04:30:41,040 --> 04:30:42,120
Right. Yeah.

2051
04:30:42,120 --> 04:30:45,240
But sometimes from CSP file,

2052
04:30:45,240 --> 04:30:49,200
it might be stored as a string.

2053
04:30:49,200 --> 04:30:50,600
Yeah.

2054
04:30:50,600 --> 04:30:52,960
That's also something we can test.

2055
04:30:52,960 --> 04:30:55,560
And since we have some test data included,

2056
04:30:55,560 --> 04:30:59,760
it's easy to run or do test data or test test data

2057
04:30:59,760 --> 04:31:02,880
because we just give it this thing we have already.

2058
04:31:02,880 --> 04:31:03,380
Yes.

2059
04:31:06,760 --> 04:31:08,240
What about plot temperatures?

2060
04:31:08,240 --> 04:31:11,600
Is this easy to test?

2061
04:31:11,600 --> 04:31:16,800
I mean, I guess we can test if it runs and makes a file.

2062
04:31:16,800 --> 04:31:20,920
Yes, if the file exists.

2063
04:31:20,920 --> 04:31:27,640
Is it worth testing to see if the file is correct, or is that trying too hard?

2064
04:31:28,920 --> 04:31:33,720
That's not something I usually do, but it's definitely doable.

2065
04:31:34,920 --> 04:31:39,000
And yeah, it's valid, depends.

2066
04:31:41,560 --> 04:31:47,000
Like same for me, so I would usually not test the plot temperatures unless I know I really need it

2067
04:31:47,000 --> 04:31:53,160
to. I think there are things for testing matplotlib plotting, like you would define

2068
04:31:53,160 --> 04:31:59,000
what you expect it to have and can test it without saving the file. But I would usually

2069
04:31:59,000 --> 04:32:03,800
try to do all the stuff that needs testing outside of the plot function to make it easy

2070
04:32:03,800 --> 04:32:06,120
and plot just does the bare minimum.

2071
04:32:06,120 --> 04:32:30,120
Yes. Okay, should we move to the outro and wrap-up of the workshop, so people can keep asking questions here and we'll keep answering after the outro part?

2072
04:32:30,120 --> 04:32:34,120
Do you want to have a look at the learning outcomes?

2073
04:32:34,120 --> 04:32:36,080
Yes, yes, this one.

2074
04:32:36,080 --> 04:32:36,960
Let's go back there.

2075
04:32:36,960 --> 04:32:41,240
I think we have achieved most of them.

2076
04:32:41,240 --> 04:32:45,200
Yeah, so we talked some about pure functions,

2077
04:32:45,200 --> 04:32:47,480
not as much as some instances of the course.

2078
04:32:47,480 --> 04:32:51,760
But basically, when it doesn't have these side effects,

2079
04:32:51,760 --> 04:32:53,040
then it's easier to test.

2080
04:32:56,360 --> 04:33:00,480
The second one we didn't talk about too much.

2081
04:33:00,480 --> 04:33:04,280
A single-purpose function we talked about a bit.

2082
04:33:10,560 --> 04:33:13,360
So split apply combine is a different kind

2083
04:33:13,360 --> 04:33:15,680
of thing, which we haven't talked about.

2084
04:33:15,680 --> 04:33:25,240
It's another way of basically dividing and conquer.

2085
04:33:25,240 --> 04:33:29,360
The command line interface we did extensively talk about

2086
04:33:29,360 --> 04:33:34,640
And to me, that's when the code really starts getting reusable

2087
04:33:34,640 --> 04:33:37,520
and I start becoming proud of sharing it.

2088
04:33:37,520 --> 04:33:41,240
It becomes actually like a thing.

2089
04:33:41,240 --> 04:33:42,560
So, yeah.

2090
04:33:47,960 --> 04:33:51,160
And I think we saw how this connects to the other lessons.

2091
04:33:51,160 --> 04:33:54,400
So we did the tests, didn't really do documentation.

2092
04:33:54,400 --> 04:33:55,960
We talked about version control.

2093
04:33:55,960 --> 04:33:59,040
We talked about how the scripts, making the command line

2094
04:33:59,040 --> 04:34:03,040
interfaces lets us make it more reproducible later on.

2095
04:34:03,040 --> 04:34:06,760
So yeah.

2096
04:34:06,760 --> 04:34:10,320
Yeah, we have there's something we haven't covered,

2097
04:34:10,320 --> 04:34:14,080
but we can continue the discussion in the notes.

2098
04:34:14,080 --> 04:34:17,320
Yeah, and also I see some suggestions

2099
04:34:17,320 --> 04:34:20,840
regarding the code script.

2100
04:34:20,840 --> 04:34:23,160
Yeah, we use it as a demo.

2101
04:34:23,160 --> 04:34:28,800
It's not perfect, but the idea is the modular coding.

2102
04:34:34,600 --> 04:34:36,600
Yeah.

2103
04:34:36,600 --> 04:34:37,960
OK.

2104
04:34:37,960 --> 04:34:42,720
So I'm going to switch to my screen if I can.

2105
04:34:46,280 --> 04:34:47,240
Yes, it worked.

2106
04:34:50,200 --> 04:34:53,040
So we're going to the concluding remarks.

2107
04:34:53,040 --> 04:34:57,200
and where to go from here, also known as the workshop outro.

2108
04:34:59,840 --> 04:35:06,800
So thanks to everyone who was attending. This was a fun course to give. We had

2109
04:35:07,840 --> 04:35:15,920
a lot of new people and new instructors and we're getting closer to the sustainability

2110
04:35:15,920 --> 04:35:21,840
point of view. Thanks to everyone who attended. I don't know how many people were working in

2111
04:35:21,840 --> 04:35:28,800
teams here, so basically had people in an organized group together attending. But anyone

2112
04:35:28,800 --> 04:35:36,080
who was able to do that, thank you for coming. That's really good, exactly what we want.

2113
04:35:36,080 --> 04:35:41,040
We would like to thank all of the instructors who are listed on the workshop webpage.

2114
04:35:43,120 --> 04:35:49,760
I won't say their names again here, so I don't have to remove them from the videos. But yeah,

2115
04:35:49,760 --> 04:35:57,440
I mean, instructors have put in a lot of work to go and make this happen.

2116
04:35:58,400 --> 04:36:03,840
We also had a bunch of people answering questions in the notes, as you may have seen and found.

2117
04:36:05,520 --> 04:36:09,520
These people took a lot of time to do that, and the local partners who organized

2118
04:36:10,960 --> 04:36:14,080
any possible in-person things and so on.

2119
04:36:14,080 --> 04:36:22,920
We'd like you to keep giving us feedback, so in the notes, you can keep adding things.

2120
04:36:22,920 --> 04:36:28,720
It is in there now.

2121
04:36:28,720 --> 04:36:35,480
We see it's here, please keep adding stuff.

2122
04:36:35,480 --> 04:36:46,240
You can send us by email or you can join our chat if you wanted and say some things.

2123
04:36:46,240 --> 04:36:52,520
So you can always use Git itself by making issues or pull requests to help update our

2124
04:36:52,520 --> 04:36:53,520
lesson materials.

2125
04:36:53,520 --> 04:37:01,720
In fact, you could say that our whole course is a way, our whole course is a way, is teaching

2126
04:37:01,720 --> 04:37:10,520
you how to update our materials, because everything we use, we teach in the course.

2127
04:37:10,520 --> 04:37:14,240
And we keep developing based on your feedback, so let us know.

2128
04:37:14,240 --> 04:37:20,840
In about six months, you may get a post-workshop survey, which will basically ask how your

2129
04:37:20,840 --> 04:37:27,480
work has been changed and updated based on what you learned in this course.

2130
04:37:27,480 --> 04:37:31,800
is really important to fill out because it really provides the best indicator to

2131
04:37:31,800 --> 04:37:35,760
the people that fund us that we've done something useful and they will keep

2132
04:37:35,760 --> 04:37:43,560
funding it. So I'd really encourage you to keep studying and asking for support.

2133
04:37:43,560 --> 04:37:47,880
So this is a starting course but these are very applied and not theoretical

2134
04:37:47,880 --> 04:37:55,840
topics so most of what you'll learn will be on your own after this. So I would

2135
04:37:55,840 --> 04:38:03,120
say, starting off, you have the course and it gives you some ideas, lets you do some things.

2136
04:38:03,840 --> 04:38:10,800
But the next step is to work on things along with someone else. So someone who can be there

2137
04:38:10,800 --> 04:38:17,520
and help you answer your questions locally. We have these partners below we can talk about,

2138
04:38:17,520 --> 04:38:21,520
but even if it's just another colleague, do talk about the things you've learned here and

2139
04:38:21,520 --> 04:38:29,360
ask for help because it's new. And then, even after that's done, there's still plenty more

2140
04:38:29,360 --> 04:38:34,080
you'll be learning yourself. Never start doing web searches or whatever to find

2141
04:38:34,080 --> 04:38:37,440
new things that you can use based on what you've seen here.

2142
04:38:39,520 --> 04:38:44,960
We have these things called bring your own code sessions. And it's basically a way you can bring

2143
04:38:44,960 --> 04:38:51,440
your code or well I guess other questions and come talk to us instructors and we'll look at

2144
04:38:51,440 --> 04:38:57,040
things together with you and it's basically like a follow-up Q&A mentoring kind of session.

2145
04:38:57,760 --> 04:39:02,160
So this is a way we can help with the follow-up ourselves.

2146
04:39:05,840 --> 04:39:10,800
You can continue to review everything that we have here. The lessons stay available

2147
04:39:10,800 --> 04:39:17,440
indefinitely and get updates. As you know we have videos published. The main point of these videos

2148
04:39:17,440 --> 04:39:27,360
is for you, our learners now, to go and re-review things during yourself, afterwards. And you can

2149
04:39:27,360 --> 04:39:33,680
reuse these materials as much as you'd want. So there's a bunch of different partners that are

2150
04:39:33,680 --> 04:39:37,400
are part of the Code Refinery project.

2151
04:39:37,400 --> 04:39:40,320
I think, yeah, did we have, yeah,

2152
04:39:40,320 --> 04:39:44,440
I think we had people from all of these here.

2153
04:39:44,440 --> 04:39:47,000
Maybe not Denmark this time.

2154
04:39:47,000 --> 04:39:51,160
But anyway, the point is that locally in your country,

2155
04:39:51,160 --> 04:39:54,280
you have people that hopefully want

2156
04:39:54,280 --> 04:39:59,200
to answer questions about these things

2157
04:39:59,200 --> 04:40:00,800
and then help you follow up.

2158
04:40:00,800 --> 04:40:03,560
If you're at Aalto University, we have plenty of things.

2159
04:40:03,560 --> 04:40:08,880
basically come to our daily sessions anytime and we can follow up and help you do these

2160
04:40:08,880 --> 04:40:09,880
things.

2161
04:40:09,880 --> 04:40:16,760
And I think probably is the same for more of the stuff.

2162
04:40:16,760 --> 04:40:20,260
We just have listed the Nordic countries here because we're a Nordic project, but there's

2163
04:40:20,260 --> 04:40:25,480
more in other countries that you need to find yourself.

2164
04:40:25,480 --> 04:40:27,800
If you want a certificate, that's on the course webpage.

2165
04:40:27,800 --> 04:40:30,320
I don't really know much more other than what is there.

2166
04:40:30,320 --> 04:40:36,520
So please read it yourself if you're interested.

2167
04:40:36,520 --> 04:40:37,640
Tell people about us.

2168
04:40:37,640 --> 04:40:45,440
So let people know that it's a good workshop and they should come in the future.

2169
04:40:45,440 --> 04:40:51,680
Or even recommend to your institution or yourself, join us as either a team leader or become

2170
04:40:51,680 --> 04:40:55,320
part of a team, an instructor in the future, a supporter.

2171
04:40:55,320 --> 04:41:00,880
There's all kinds of people doing stuff in the background, which we need help with to

2172
04:41:00,880 --> 04:41:02,880
keep stuff working.

2173
04:41:02,880 --> 04:41:06,540
So, yeah.

2174
04:41:06,540 --> 04:41:07,760
We already talked about these things.

2175
04:41:07,760 --> 04:41:13,720
The newsletter is a good way to hear of what's going on, other interesting tidbits, and so

2176
04:41:13,720 --> 04:41:14,720
on.

2177
04:41:14,720 --> 04:41:20,120
And if you really like the kind of things that we're talking about now, you can look

2178
04:41:20,120 --> 04:41:23,840
into this thing called research software engineers,

2179
04:41:23,840 --> 04:41:27,240
which is basically people that are researchers,

2180
04:41:27,240 --> 04:41:29,960
but they're focused more on the technology.

2181
04:41:29,960 --> 04:41:31,280
So they're more interested

2182
04:41:31,280 --> 04:41:35,680
in making the research technology better

2183
04:41:35,680 --> 04:41:38,920
rather than getting as many citations

2184
04:41:38,920 --> 04:41:41,780
as they can for themselves.

2185
04:41:41,780 --> 04:41:43,620
So it's a different kind of career path

2186
04:41:43,620 --> 04:41:45,840
that has a different kind of focus.

2187
04:41:45,840 --> 04:41:49,280
So it's still sort of a new thing in some places

2188
04:41:49,280 --> 04:41:52,840
but it's something that would be worth reading about.

2189
04:41:55,000 --> 04:41:55,840
Okay.

2190
04:41:57,440 --> 04:42:00,560
Any other comments or things from the notes?

2191
04:42:00,560 --> 04:42:02,780
I will switch there.

2192
04:42:06,080 --> 04:42:06,920
Let's see.

2193
04:42:08,680 --> 04:42:09,660
Please give feedback.

2194
04:42:09,660 --> 04:42:13,520
This is not much feedback and we need more

2195
04:42:15,120 --> 04:42:17,220
in order to see how it went.

2196
04:42:19,280 --> 04:42:28,920
Yeah, okay, there's a question here.

2197
04:42:28,920 --> 04:42:35,120
Are there any good AI tools which can automatically generate a test code?

2198
04:42:35,120 --> 04:42:37,880
I think there are probably some, but I don't know them myself.

2199
04:42:37,880 --> 04:42:44,920
I think someone will probably come in and fill in the answer later.

2200
04:42:44,920 --> 04:42:51,160
Yeah. Is there anything else?

2201
04:42:51,160 --> 04:42:53,920
Are there any other instructors around who want to

2202
04:42:53,920 --> 04:42:58,240
join the studio and say any final words?

2203
04:43:05,720 --> 04:43:10,120
Yeah, I'm very happy I'm here today.

2204
04:43:10,120 --> 04:43:15,000
It's a very good time to learn from each other.

2205
04:43:15,000 --> 04:43:19,280
I saw quite good answers and comments,

2206
04:43:19,280 --> 04:43:21,600
suggestions in the notes.

2207
04:43:21,600 --> 04:43:24,200
I will read them through later.

2208
04:43:24,200 --> 04:43:28,240
Yeah. I think today went quite well overall.

2209
04:43:28,240 --> 04:43:33,880
So we had some good sessions.

2210
04:43:33,880 --> 04:43:44,840
And, yeah, the most sincere thanks to everyone who stuck with us all this time.

2211
04:43:44,840 --> 04:43:53,960
And yeah, I really hope that this will improve your work and that you can reteach these to

2212
04:43:53,960 --> 04:43:57,440
other people later on.

2213
04:43:57,440 --> 04:44:05,440
Okay. So, I guess I will turn it off for now.

2214
04:44:05,440 --> 04:44:11,440
Is there any final news? So, I think most of the news was in this outro session.

2215
04:44:11,440 --> 04:44:17,440
And there's no future session. So, yeah, that's that.

2216
04:44:17,440 --> 04:44:21,440
Okay. Thank you, everyone. Bye.

2217
04:44:21,440 --> 04:44:21,940
Bye.

2218
04:44:21,940 --> 04:44:22,980
Thank you.

2219
04:44:22,980 --> 04:44:24,520
Bye.

2220
04:44:51,440 --> 04:44:53,500
you

2221
04:45:21,440 --> 04:45:23,500
you

2222
04:45:51,440 --> 04:45:53,500
you

2223
04:46:21,440 --> 04:46:23,500
you

