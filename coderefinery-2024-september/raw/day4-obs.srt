1
00:00:00,000 --> 00:00:06,480
and how to do that, how to do collaborative and distributed version control, and what are the

2
00:00:06,480 --> 00:00:14,480
challenges there. You further have things like stabilizing your computing environment so that

3
00:00:14,480 --> 00:00:18,000
others can more easily reproduce what you have done, because they know what your

4
00:00:21,680 --> 00:00:25,200
environment actually looked like, and part of this is covered today.

5
00:00:25,200 --> 00:00:36,120
and other ways to do this are shown in more detail tomorrow and on Thursday and

6
00:00:36,120 --> 00:00:40,400
it's of course also about how you publish your research outputs,

7
00:00:40,400 --> 00:00:45,400
how you publish your code, your data, your documents that you need and social

8
00:00:45,400 --> 00:00:50,880
coding and open software will also be discussed later today. So, but let's jump

9
00:00:50,880 --> 00:01:00,000
into reproducible research and why we want to do that. And there's a nice PhD comic about this

10
00:01:00,000 --> 00:01:06,640
where Professor Smith has his PhD student in front of him and asks, well that's it. Well don't

11
00:01:06,640 --> 00:01:11,680
worry, you don't have to start your code from scratch. You can reuse the software that the

12
00:01:11,680 --> 00:01:18,480
previous person on the project wrote several years ago. And are there instructions for how to use it?

13
00:01:18,480 --> 00:01:20,480
I doubt it.

14
00:01:20,480 --> 00:01:22,480
Is the code commented?

15
00:01:22,480 --> 00:01:24,480
Not likely.

16
00:01:24,480 --> 00:01:26,480
And where are the files?

17
00:01:26,480 --> 00:01:28,480
Who knows?

18
00:01:28,480 --> 00:01:30,480
This is going to be painful, isn't it?

19
00:01:30,480 --> 00:01:32,480
Just a scratch.

20
00:01:32,480 --> 00:01:34,480
And

21
00:01:34,480 --> 00:01:36,480
I think this is

22
00:01:36,480 --> 00:01:38,480
at least to some extent

23
00:01:38,480 --> 00:01:40,480
very much what a lot of people

24
00:01:40,480 --> 00:01:42,480
in academia

25
00:01:42,480 --> 00:01:44,480
have experienced. I myself had

26
00:01:44,480 --> 00:01:46,480
a similar thing where I was told

27
00:01:46,480 --> 00:01:52,880
sold. Here is code that we want to have in our library. Please connect it to the library that

28
00:01:52,880 --> 00:01:57,920
we have." And there wasn't a lot of documentation and that was essentially my bachelor thesis

29
00:01:57,920 --> 00:02:10,240
in the end. So this happens all the time, unfortunately. And while that's bad, there's

30
00:02:10,240 --> 00:02:15,280
also the problem that's here in this anecdote where a group of researchers have obtained great

31
00:02:15,280 --> 00:02:21,680
results and submitted their work to a high-profile journal. The reviewers ask for a few more figures

32
00:02:21,680 --> 00:02:26,720
and some additional analysis, which is actually quite common. The researchers start working on

33
00:02:26,720 --> 00:02:32,400
those revisions, generate modified figures, but find inconsistencies with their old figures.

34
00:02:33,440 --> 00:02:38,160
And then the problems start because the researchers can't find some of the data they

35
00:02:38,160 --> 00:02:42,320
used to generate the original results and they can't figure out which parameters they used

36
00:02:42,320 --> 00:02:50,080
when running their original analysis. And well, that manuscript is likely to just end up in a

37
00:02:50,080 --> 00:02:55,200
drawer and never really be published because they don't know what they actually did.

38
00:02:57,280 --> 00:03:07,120
Yeah, this is actually the anecdote highlights the most, to me, the most important aspect of the

39
00:03:07,120 --> 00:03:17,240
the reproducibility and things we want to do for reproducibility, which is that you

40
00:03:17,240 --> 00:03:29,000
should make your own life easier, that you can reproduce your own results. And this graph

41
00:03:29,000 --> 00:03:32,400
also highlights that problem.

42
00:03:32,400 --> 00:03:41,040
Yeah, it's, and at least to me, it's somewhat understandable if there are some issues with

43
00:03:41,040 --> 00:03:49,440
reproducibility in experimental fields where there are so many confounding factors, where

44
00:03:49,440 --> 00:03:54,840
there have been examples where a changed water pipe changed the results because there was

45
00:03:54,840 --> 00:04:00,880
something coming from the water pipe that wasn't expected, that they didn't test for

46
00:04:00,880 --> 00:04:08,000
and that changed the results. But in a computational setting, this should not happen. Because we

47
00:04:08,000 --> 00:04:15,440
can a lot better control what we are doing. And this should be a lot more reproducible.

48
00:04:15,440 --> 00:04:20,920
And anything in a computational field that's not reproducible comes essentially down to

49
00:04:20,920 --> 00:04:29,160
badly documented steps for the experiment. And there are different levels of reproducibility.

50
00:04:29,160 --> 00:04:39,680
By the way, can we highlight that in the graph, the question that I have failed to reproduce

51
00:04:39,680 --> 00:04:43,720
an experiment and my own.

52
00:04:43,720 --> 00:04:44,720
And it's like...

53
00:04:44,720 --> 00:04:49,880
There isn't a big difference between your own and someone else's.

54
00:04:49,880 --> 00:04:52,080
Yeah, there isn't a big difference.

55
00:04:52,080 --> 00:04:57,880
And there is a huge amount of percentage, like in both cases.

56
00:04:57,880 --> 00:05:07,160
So yeah, and this was 2016, but basically in eight years, I don't think anything has

57
00:05:07,160 --> 00:05:09,360
fundamentally changed.

58
00:05:09,360 --> 00:05:15,220
One would hope that this has gone down a little bit, but yeah, I would also expect that it

59
00:05:15,220 --> 00:05:18,500
hasn't gone down substantially.

60
00:05:18,500 --> 00:05:24,660
And essentially, as I mentioned earlier, so you have different levels of reproducibility

61
00:05:24,660 --> 00:05:34,340
and you have a kind of pyramid on what can be reproduced and of course the environment in

62
00:05:34,340 --> 00:05:42,980
especially experimental settings can be something that is potentially very difficult to control

63
00:05:44,020 --> 00:05:50,100
but we can control it reasonably well in a computational setting and in a computational

64
00:05:50,100 --> 00:05:57,540
setting it's also we have code and data and that should be controllable because the data has been

65
00:05:58,420 --> 00:06:04,740
it's there it has been generated so and it shouldn't change and the code also has been there

66
00:06:04,740 --> 00:06:11,540
and shouldn't change then it comes to how has the code been used that's documentation what

67
00:06:11,540 --> 00:06:17,300
parameters have been used that's documentation and only in the end once we have all this we create

68
00:06:17,300 --> 00:06:25,220
we build an article and if if something below here fails then this article fails because it

69
00:06:25,220 --> 00:06:31,700
can't be reproduced because if we don't know what parameters we had well nice to have the code but

70
00:06:31,700 --> 00:06:37,940
how did the results actually get obtained we don't know so the whole basis of this article

71
00:06:37,940 --> 00:06:46,420
crumbles essentially and we have asked you uh in the collaborative document to post a few of your

72
00:06:46,420 --> 00:06:58,980
experiences with reproducibility of the things. And I actually want to highlight this first one

73
00:06:58,980 --> 00:07:05,860
that was in here, because this is something that happens both to the person writing it

74
00:07:07,460 --> 00:07:15,780
and to others coming there. You have stuff and you try to read it and think, well, yeah, it has

75
00:07:15,780 --> 00:07:22,100
been done but I don't get anything here because it's not well documented or it's not well written

76
00:07:22,100 --> 00:07:27,540
and you essentially have to redo things and that's something that's very very common.

77
00:07:33,140 --> 00:07:38,660
Here this is also the typical yeah a new version of the package has been

78
00:07:38,660 --> 00:07:46,820
been published and the old version doesn't work on the current system anymore, or you

79
00:07:46,820 --> 00:07:56,260
have to go to great length to go through this, which is a really huge issue.

80
00:07:56,260 --> 00:08:06,200
I can relate to all of these answers, and one thing I actually want to point out is

81
00:08:06,200 --> 00:08:13,480
that in the question it says that a script or a figure you created a few months ago.

82
00:08:13,480 --> 00:08:21,160
For me, I don't have to wait a few months, because like a day or two is completely enough.

83
00:08:21,160 --> 00:08:34,360
Because like I, if I don't document stuff for myself, in two days, it's basically, I

84
00:08:34,360 --> 00:08:35,840
may have to start over.

85
00:08:35,840 --> 00:08:40,320
So I completely know what people are

86
00:08:40,320 --> 00:08:44,040
coming from with these comments.

87
00:08:44,040 --> 00:08:44,800
Yeah.

88
00:08:44,800 --> 00:08:47,600
So I think all of these are really

89
00:08:47,600 --> 00:08:50,840
good examples of why we need reproducible research.

90
00:08:50,840 --> 00:08:54,480
And I hope we can show you a couple of things

91
00:08:54,480 --> 00:08:58,920
that help you in making your reproducibility

92
00:08:58,920 --> 00:09:02,240
or making your work more reproducible,

93
00:09:02,240 --> 00:09:04,760
either by others or yourself.

94
00:09:04,760 --> 00:09:05,760
Okay.

95
00:09:05,760 --> 00:09:14,120
And so just an overview of the next two hours.

96
00:09:14,120 --> 00:09:18,280
So we have four subtopics here.

97
00:09:18,280 --> 00:09:21,480
So first is organizing your projects.

98
00:09:21,480 --> 00:09:26,640
So files and folders, structure, basically.

99
00:09:26,640 --> 00:09:33,480
The next is recording computational steps.

100
00:09:33,480 --> 00:09:46,640
So what was run and when and how, then recording dependencies, which is that what is the software

101
00:09:46,640 --> 00:09:54,080
or what libraries and which versions of software and libraries your code is using to get the

102
00:09:54,080 --> 00:09:58,840
the results, and then recording environments, which is.

103
00:10:02,000 --> 00:10:05,360
What operating system, what system libraries?

104
00:10:05,360 --> 00:10:07,640
So it's actually going one step further

105
00:10:07,640 --> 00:10:10,120
down the environment chain.

106
00:10:10,120 --> 00:10:18,200
Yeah, one step further down the rabbit hole of reproducibility.

107
00:10:18,200 --> 00:10:18,800
Yeah.

108
00:10:18,800 --> 00:10:20,600
OK, yeah, sorry, go ahead.

109
00:10:20,600 --> 00:10:24,920
So let's get into organizing your projects.

110
00:10:24,920 --> 00:10:28,400
So yeah, it's really one of the first steps

111
00:10:28,400 --> 00:10:31,920
to make your work reputable is to organize your projects well,

112
00:10:31,920 --> 00:10:39,480
so to have a structure that you understand where you can

113
00:10:39,480 --> 00:10:41,520
actually find things again.

114
00:10:41,520 --> 00:10:43,560
Because even the finding the right function,

115
00:10:43,560 --> 00:10:47,160
finding the right piece of data can become difficult

116
00:10:47,160 --> 00:10:52,160
if your data and your project is not properly organized.

117
00:10:53,720 --> 00:10:55,880
So first of all, of course,

118
00:10:55,880 --> 00:10:58,520
have everything that belongs to a project

119
00:10:58,520 --> 00:10:59,840
in a single folder,

120
00:10:59,840 --> 00:11:04,840
because then you have something where you can have it

121
00:11:05,000 --> 00:11:07,440
or where you know, okay, this is what it is.

122
00:11:07,440 --> 00:11:09,360
And if that's not possible,

123
00:11:09,360 --> 00:11:11,940
because you have, for example,

124
00:11:11,940 --> 00:11:15,160
some big data that needs to be stored elsewhere,

125
00:11:15,160 --> 00:11:19,480
have links or indicators where that data can be found early on.

126
00:11:19,480 --> 00:11:23,960
That can be in a README or in some other way,

127
00:11:23,960 --> 00:11:27,160
how this can be stored.

128
00:11:27,160 --> 00:11:31,120
Use different projects in different folders.

129
00:11:31,120 --> 00:11:34,200
Don't mix.

130
00:11:34,200 --> 00:11:36,480
It will only lead to a mess, and you can't get out

131
00:11:36,480 --> 00:11:37,560
of that mess again.

132
00:11:37,560 --> 00:11:41,640
Because untangling mixed up projects

133
00:11:41,640 --> 00:11:43,520
will always be a problem.

134
00:11:43,520 --> 00:11:48,520
If you have things like code that you use in both projects,

135
00:11:48,640 --> 00:11:50,560
set up a Git repository for the code

136
00:11:51,440 --> 00:11:53,280
and clone it into both projects.

137
00:11:56,280 --> 00:11:58,560
And potentially have a branch for each project

138
00:11:58,560 --> 00:12:03,560
if they really do have different code in the end,

139
00:12:03,680 --> 00:12:08,680
but try to get the code in a way that both can use it.

140
00:12:08,680 --> 00:12:19,560
can use it. Use a consistent and informative directory structure. This, for example,

141
00:12:19,560 --> 00:12:26,200
this is an example of what you can do. Have data, process data. So data is the raw information. This

142
00:12:26,200 --> 00:12:33,080
is what you got from your experiments or what you got from an external partner or a partner.

143
00:12:33,080 --> 00:12:39,520
this is the raw data. Process data is anything that you have pre-processed or

144
00:12:39,520 --> 00:12:47,640
modified. The manuscript is everything that's connected with the with writing

145
00:12:47,640 --> 00:12:52,720
the article in the end or the articles if you have multiple for the same

146
00:12:52,720 --> 00:13:04,720
project. Results is essentially finished data, some tables, figures, and everything that you

147
00:13:04,720 --> 00:13:12,160
want to put into the manuscript potentially. Source is your code with a license, with requirements

148
00:13:12,160 --> 00:13:19,920
and information about it. And doc is the additional documentation. Your readme can already

149
00:13:19,920 --> 00:13:27,760
contain some of the docs or contain information on, okay, this is where you find the documentation

150
00:13:27,760 --> 00:13:37,840
for this. Also, I'd like to point out that in many, many, many cases, readme is enough.

151
00:13:37,840 --> 00:13:42,400
So you shouldn't be... A well-written readme is enough.

152
00:13:42,400 --> 00:13:48,800
Yeah, well-written readme is... Extensive readme is enough. But the point is that we shouldn't be

153
00:13:48,800 --> 00:13:52,760
be kind of intimidated by the thought

154
00:13:52,760 --> 00:14:02,680
that the documentation needs to be a whole HTML documentation

155
00:14:02,680 --> 00:14:04,640
web page.

156
00:14:04,640 --> 00:14:09,480
I think the simplest check is, once you've done your stuff

157
00:14:09,480 --> 00:14:11,480
and you're happy with me, ask a colleague that's

158
00:14:11,480 --> 00:14:14,200
not in the project, could you take this

159
00:14:14,200 --> 00:14:16,760
and reproduce the figures?

160
00:14:16,760 --> 00:14:18,520
And not help them by doing it.

161
00:14:18,520 --> 00:14:19,020
Yeah.

162
00:14:21,960 --> 00:14:26,200
One small thing, try to avoid spaces in directories and filenames.

163
00:14:26,200 --> 00:14:34,280
Yes, it's uglier to read, but a lot of times there are programs that don't handle spaces well.

164
00:14:35,480 --> 00:14:41,400
So not having spaces in there can make things a lot easier computational-wise.

165
00:14:41,960 --> 00:14:45,880
It's not absolutely necessary, but it's, I would say, good practice.

166
00:14:45,880 --> 00:14:55,400
If you need separate public and private parts, you can create a public and private Git repository.

167
00:14:56,680 --> 00:15:04,680
Make sure that they are not in the same Git network. I would really create separate

168
00:15:04,680 --> 00:15:10,120
repositories for it and not fork from the one to the other and then make it private.

169
00:15:10,120 --> 00:15:18,800
it. If you need to separate public and secret data, in the same repository, you can use

170
00:15:18,800 --> 00:15:25,600
gitignore, as was, I think, discussed last week. And having and setting up a gitignore

171
00:15:25,600 --> 00:15:34,640
early on always makes sense. And yes, and the rest, I think, we already mentioned.

172
00:15:34,640 --> 00:15:43,280
So about the project structure, does your project

173
00:15:43,280 --> 00:15:47,080
always look like this structure?

174
00:15:47,080 --> 00:15:50,040
Does it often look like this?

175
00:15:50,040 --> 00:15:53,160
Does it never look like this, this example?

176
00:15:55,760 --> 00:15:57,840
It looks similar.

177
00:15:57,840 --> 00:16:03,440
I don't really have these parts at the moment anymore,

178
00:16:03,440 --> 00:16:07,720
But I do have their source code data potential documentation.

179
00:16:07,720 --> 00:16:10,960
But as you mentioned, I'm actually mainly readmes

180
00:16:10,960 --> 00:16:16,840
that sometimes point to another to a second MD markdown

181
00:16:16,840 --> 00:16:20,360
file for a specific setup of development systems

182
00:16:20,360 --> 00:16:21,480
or something like that.

183
00:16:21,480 --> 00:16:24,400
But yeah, conceptually similar.

184
00:16:28,160 --> 00:16:29,640
It looks very standard.

185
00:16:29,640 --> 00:16:33,000
And it's always nice to use standard practices.

186
00:16:33,440 --> 00:16:45,480
Yep, so, um, sorry, um, yeah, um, the tracking, tracking your data and your project is also

187
00:16:45,480 --> 00:16:46,480
important.

188
00:16:46,480 --> 00:16:54,920
Well, all code should be version controlled and should be in the source code folder, have

189
00:16:54,920 --> 00:16:58,920
a license in there.

190
00:16:58,920 --> 00:17:04,240
You can also version control data files if they are not too large.

191
00:17:04,240 --> 00:17:09,120
If they are very large, you can still version control them with systems like Git Annex or

192
00:17:09,120 --> 00:17:12,120
Git LFS.

193
00:17:12,120 --> 00:17:18,200
Large file system.

194
00:17:18,200 --> 00:17:22,440
Where you can essentially, where the file is essentially placed somewhere else and it's

195
00:17:22,440 --> 00:17:26,360
just the version that's being tracked.

196
00:17:26,360 --> 00:17:31,640
GitAnnex essentially builds an additional network of repositories where it knows where

197
00:17:31,640 --> 00:17:41,880
the data is residing and you can get the data, but if you don't explicitly want it, you don't

198
00:17:41,880 --> 00:17:45,720
have to download it.

199
00:17:45,720 --> 00:17:54,360
You can also, if they are sensitive or too large for being tracked, put them into gitignore

200
00:17:54,360 --> 00:17:58,840
and provide them on a different system,

201
00:17:58,840 --> 00:17:59,920
which is perfectly fine,

202
00:17:59,920 --> 00:18:02,200
especially if it's research data

203
00:18:02,200 --> 00:18:03,600
that doesn't really change.

204
00:18:03,600 --> 00:18:07,480
So if you have all your experimental data done

205
00:18:07,480 --> 00:18:10,400
and you're not going to get more experimental data,

206
00:18:10,400 --> 00:18:13,400
you can essentially put this into a folder,

207
00:18:18,760 --> 00:18:21,000
put it onto some data server and yeah,

208
00:18:22,000 --> 00:18:24,120
and then just point to it in the README

209
00:18:24,120 --> 00:18:25,380
or somewhere else.

210
00:18:28,720 --> 00:18:33,600
Intermediate files don't really need to be tracked.

211
00:18:33,600 --> 00:18:35,520
Commonly, there might be situations

212
00:18:35,520 --> 00:18:37,680
where the pre-processing takes a long time

213
00:18:37,680 --> 00:18:41,440
and you actually want to keep that data stored

214
00:18:41,440 --> 00:18:43,520
and potentially tracked as well.

215
00:18:43,520 --> 00:18:46,860
But in general, I would say process data

216
00:18:46,860 --> 00:18:49,400
can be reproduced from the original data

217
00:18:49,400 --> 00:18:51,480
or should be reproducible from the original data

218
00:18:51,480 --> 00:18:53,520
and therefore doesn't need to be tracked.

219
00:18:54,120 --> 00:19:07,760
Well, using git tags to mark specific versions of results is always also a good idea, because

220
00:19:07,760 --> 00:19:15,200
you then know, okay, this is the version that was submitted for the thesis or for the paper,

221
00:19:15,200 --> 00:19:20,920
and people can, and you can essentially in the paper point to this version, because that's

222
00:19:20,920 --> 00:19:29,320
the data that was being used for the paper while your code could have developed on.

223
00:19:32,120 --> 00:19:38,600
Yeah, so we have two more questions here that we can also put into the

224
00:19:39,880 --> 00:19:45,480
that are already in the... Yeah, they are in the notes and everybody is welcome to.

225
00:19:45,480 --> 00:19:57,560
It's mainly questions about how, the first is mainly if you use version control for academic

226
00:19:57,560 --> 00:20:07,480
papers and the second is how if you do, how you handle collaborative issues.

227
00:20:07,480 --> 00:20:17,920
Unfortunately, I never used version control for manuscript writing, or rather, I never

228
00:20:17,920 --> 00:20:22,560
used Git for manuscript writing.

229
00:20:22,560 --> 00:20:34,720
The main reason for that is that writing collaboratively on Git is painful.

230
00:20:34,720 --> 00:20:42,240
There are tools like Overleaf or Google Docs or HackMD,

231
00:20:42,240 --> 00:20:43,880
what we are just using, where everyone can

232
00:20:43,880 --> 00:20:46,800
write in the same document.

233
00:20:46,800 --> 00:20:50,400
And these things can be used to easily create

234
00:20:50,400 --> 00:20:52,680
an academic paper.

235
00:20:55,760 --> 00:20:58,680
And I personally prefer those tools

236
00:20:58,680 --> 00:21:05,040
because they are especially suited for concurrent editing.

237
00:21:05,040 --> 00:21:10,800
While Git can solve concurrent editing issues,

238
00:21:10,800 --> 00:21:14,760
but depending on how many changes there are

239
00:21:14,760 --> 00:21:20,600
and how much stuff two people did on an article,

240
00:21:20,600 --> 00:21:22,840
you can easily end up with merging conflicts

241
00:21:22,840 --> 00:21:25,760
and it can become very painful.

242
00:21:25,760 --> 00:21:30,200
So personally, I have used Overleaf.

243
00:21:30,200 --> 00:21:33,480
I have used Google Docs.

244
00:21:33,480 --> 00:21:36,200
And HackMD is also for first draft.

245
00:21:36,200 --> 00:21:40,040
And then you need to put it into a form for the journal

246
00:21:40,040 --> 00:21:41,880
in the end anyways.

247
00:21:41,880 --> 00:21:48,240
So would you say that the Git is like a very powerful version

248
00:21:48,240 --> 00:21:50,680
control tool?

249
00:21:50,680 --> 00:22:02,920
But in this case, it's a bit maybe too generic because there are tools that are specifically

250
00:22:05,960 --> 00:22:11,560
designed for co-authoring papers or texts.

251
00:22:11,560 --> 00:22:21,640
Yes. What I would say is that Git is very good suited for code editing, where if you work on

252
00:22:21,640 --> 00:22:25,320
two different things, but you have some modifications, you then need to merge and then need to

253
00:22:25,320 --> 00:22:33,320
find out, okay, what happened and what changes can we let go in and how do we need to merge that,

254
00:22:33,320 --> 00:22:39,480
where you anyways need to think about this. But if you, for example, have two people who edited

255
00:22:41,560 --> 00:22:45,880
a relatively final version of an article

256
00:22:45,880 --> 00:22:51,560
and made spelling or changed spelling mistakes and stuff.

257
00:22:51,560 --> 00:22:55,520
You will get so many lines, because GitHub essentially

258
00:22:55,520 --> 00:23:03,440
goes line by line, where you have changes on both sides

259
00:23:03,440 --> 00:23:06,600
that it gets really messy.

260
00:23:06,600 --> 00:23:09,760
And you need to manually then select the right.

261
00:23:09,760 --> 00:23:14,240
And you essentially do double the work, if not more,

262
00:23:14,240 --> 00:23:20,760
when editing a document.

263
00:23:20,760 --> 00:23:27,720
And that's something that is unnecessary, in my opinion,

264
00:23:27,720 --> 00:23:35,000
because there are tools like Overleaf or Google Docs, which

265
00:23:35,000 --> 00:23:39,000
do exactly that and are exactly for this purpose, where

266
00:23:39,000 --> 00:23:48,680
can work together on a document and don't get into these kind of issues. So I would use those instead.

267
00:23:50,280 --> 00:23:55,960
From the notes, we have interesting distribution between are you using version control for

268
00:23:55,960 --> 00:24:01,720
academic papers. It's about 50-50, like yes or no. It is interesting.

269
00:24:01,720 --> 00:24:09,200
Yeah, I have used, well, I have used version control for academic papers, no question

270
00:24:09,200 --> 00:24:14,560
whatsoever, but I haven't used it for writing the manuscript.

271
00:24:14,560 --> 00:24:16,880
And I think that that's also, I think.

272
00:24:16,880 --> 00:24:17,880
Oh, okay.

273
00:24:17,880 --> 00:24:20,320
It's a distinction there, okay.

274
00:24:20,320 --> 00:24:21,320
Yeah.

275
00:24:21,320 --> 00:24:37,960
depends on how people see this. There is a comment on the how to handle collaborative issues,

276
00:24:38,840 --> 00:24:45,400
one author being responsible for merging everything. If they are lucky,

277
00:24:45,400 --> 00:24:48,240
If they are lucky, everything goes fine.

278
00:24:48,240 --> 00:24:52,320
If they are unlucky and you have concurrent edits or a lot

279
00:24:52,320 --> 00:24:55,320
of concurrent edits, they will spend a lot of time

280
00:24:55,320 --> 00:24:56,760
in merging them.

281
00:24:56,760 --> 00:25:01,480
And it's just, yeah, as I said, to me,

282
00:25:01,480 --> 00:25:05,360
writing the manuscript there is a waste of time.

283
00:25:05,360 --> 00:25:07,240
Having the code under version control

284
00:25:07,240 --> 00:25:12,600
and merging there, yeah, absolutely makes sense.

285
00:25:12,600 --> 00:25:19,160
Okay. Should we move on?

286
00:25:19,160 --> 00:25:27,960
Yes. There are other tools that help in making academic or scholarly output more reproducible.

287
00:25:29,000 --> 00:25:39,240
Jupyter Notebooks can be a good way to present the flow of your code more easily.

288
00:25:39,240 --> 00:25:47,000
Binder gives Jupyter notebooks and makes them available in an executable environment so

289
00:25:47,000 --> 00:25:53,160
that people don't even need to install the Jupyter stuff initially.

290
00:25:53,160 --> 00:26:04,520
And for R, there's also R tools or Research Compendia, which are nice tools to use to

291
00:26:04,520 --> 00:26:09,400
show your results and show how your code is being used.

292
00:26:10,200 --> 00:26:14,520
Okay so a key point here an organized project directory structure

293
00:26:14,520 --> 00:26:21,480
helps with reproducibility and makes it a lot more easy to later on

294
00:26:21,480 --> 00:26:24,440
redo what you have done.

295
00:26:25,400 --> 00:26:29,800
So the next is essentially then the question

296
00:26:29,800 --> 00:26:38,680
Okay, so you have your folder organized. How do we actually go about running our scripts?

297
00:26:39,480 --> 00:26:44,520
So you have some steps that need to be run to do your work and how do you actually run them?

298
00:26:45,480 --> 00:26:53,960
Does that rely on you remembering how you run them or is it reproducible for anyone else?

299
00:26:53,960 --> 00:27:00,520
How do you communicate these steps to others or in particular future you?

300
00:27:02,360 --> 00:27:06,680
And here we will also go into how we can create a reproducible workflow and

301
00:27:08,600 --> 00:27:11,880
what scientific workflow management systems are and when to use them.

302
00:27:13,400 --> 00:27:23,480
So as an example here we have an example project from the HPC Carpentry lessons

303
00:27:23,960 --> 00:27:41,760
which is essentially a small project that

304
00:27:41,760 --> 00:27:48,600
counts the frequencies of words in some books

305
00:27:48,600 --> 00:27:49,920
and then plots them.

306
00:27:53,960 --> 00:27:57,240
So, the example use of this is,

307
00:27:59,160 --> 00:28:03,800
let me just check something.

308
00:28:03,800 --> 00:28:07,200
So the example use is where you simply have Python code,

309
00:28:07,200 --> 00:28:12,200
code.py, and then plot the output file into an image.

310
00:28:19,880 --> 00:28:22,720
And Timo, do you want to explain

311
00:28:22,720 --> 00:28:25,520
what the problems with this kind of approach are?

312
00:28:27,520 --> 00:28:31,200
It is, so it's a very manual approach.

313
00:28:32,360 --> 00:28:40,280
And so if we want to, I would say that if we want to have multiple books,

314
00:28:41,040 --> 00:28:50,040
so let's say we have 100 or 1000 books, then we would have to

315
00:28:52,720 --> 00:29:03,720
We do all of those manually, and then there is no record of what books were processed.

316
00:29:03,720 --> 00:29:10,720
I think that's at least the first thing that comes to mind.

317
00:29:10,720 --> 00:29:16,720
Yeah, and we also, it's not really extendable.

318
00:29:16,720 --> 00:29:26,800
tendable. So if we have this, what do we do if we want to run this for 500 books? We could

319
00:29:26,800 --> 00:29:33,520
even have a small GUI or something, but then we would need to click like 500 times. And

320
00:29:33,520 --> 00:29:46,680
of course, you can essentially write a script that does essentially run everything, which

321
00:29:46,680 --> 00:29:55,160
would be something like this. This is now on Binder on JupyterHub. No, in a JupyterHub

322
00:29:55,160 --> 00:30:01,880
on Binder. And you could essentially run all of these and then you have your results. But

323
00:30:01,880 --> 00:30:10,680
that doesn't really help you when you have to extend that to 500 books. So this is more

324
00:30:10,680 --> 00:30:19,160
an imperative style. We tell it to do every single step in order and we can potentially

325
00:30:19,160 --> 00:30:29,720
also use something like a loop for this where we just indicate the name and then we can still

326
00:30:29,720 --> 00:30:33,880
run it for all of them. This is a bit better because we only have to put in the name

327
00:30:33,880 --> 00:30:38,880
but we are still explicitly telling it what to do.

328
00:30:38,880 --> 00:30:43,880
Yeah, and also the loop looks much better,

329
00:30:43,880 --> 00:30:51,880
but there is one problem is that if we want to rerun something,

330
00:30:51,880 --> 00:30:55,880
or we want to add some books and rerun the experiment,

331
00:30:55,880 --> 00:31:01,880
then all the books will be processed again.

332
00:31:01,880 --> 00:31:10,040
Yeah, and that's really not what we want to do, especially if the stuff that we are running

333
00:31:10,040 --> 00:31:12,080
takes a little bit longer.

334
00:31:12,080 --> 00:31:19,200
So if we are running something that takes half an hour for everything and we suddenly

335
00:31:19,200 --> 00:31:28,720
have to rerun 500 iterations of this, yeah, we really don't want to do that.

336
00:31:28,720 --> 00:31:35,120
So this scripted solution is reproducible.

337
00:31:35,120 --> 00:31:37,280
Yeah, definitely.

338
00:31:37,280 --> 00:31:41,040
But if we start to add more things,

339
00:31:41,040 --> 00:31:46,060
it starts to get problematic, as Timo mentioned.

340
00:31:46,060 --> 00:31:50,760
And that's actually the point where workflow tools come in.

341
00:31:50,760 --> 00:31:55,200
Workflow tools in more complex scenarios,

342
00:31:55,200 --> 00:31:57,600
so where it goes away from the simple,

343
00:31:57,600 --> 00:31:59,600
I have three things that I need to run,

344
00:31:59,600 --> 00:32:02,640
and I don't have more than these three things.

345
00:32:02,640 --> 00:32:07,480
But I always get additional things after some time,

346
00:32:07,480 --> 00:32:11,520
and I'm still producing my data, for example.

347
00:32:11,520 --> 00:32:15,360
And I need to do something for every data point.

348
00:32:15,360 --> 00:32:17,440
That's where workflow tools come in very handy.

349
00:32:17,440 --> 00:32:20,360
And we will give an example here with Snake Make,

350
00:32:20,360 --> 00:32:27,480
which is inspired by GNU Make and is a very popular tool

351
00:32:27,480 --> 00:32:32,480
in bioinformatics, but also in other computational fields.

352
00:32:36,100 --> 00:32:41,100
We also chose SnakeMake because it's very close to Python.

353
00:32:41,260 --> 00:32:46,260
So in the SnakeMake files or snake files,

354
00:32:46,580 --> 00:32:49,820
you can write code in Python essentially.

355
00:32:51,540 --> 00:32:56,400
And we have a demo here.

356
00:32:57,480 --> 00:33:03,480
in Binder that I will show you in a moment.

357
00:33:03,480 --> 00:33:11,480
But I would first like to go through the way that SnakeMake actually writes your

358
00:33:11,480 --> 00:33:19,480
or that SnakeMake files are actually created and how SnakeMake works on a logical basis.

359
00:33:19,480 --> 00:33:29,040
So, SnakeMake works with rules and rules have to be fulfilled for SnakeMake.

360
00:33:29,040 --> 00:33:37,120
So for a rule to be fulfilled, it needs to have all its inputs and then generates all

361
00:33:37,120 --> 00:33:45,200
its outputs by the command that's being called in Shell.

362
00:33:45,200 --> 00:33:56,660
And that's a bit unintuitive, because commonly what happens is you define in your rule all

363
00:33:56,660 --> 00:34:04,680
the inputs which are the endpoints of what you want to create.

364
00:34:04,680 --> 00:34:13,120
And in here we have in our all rule, we have, we want to create all the files in statistics

365
00:34:13,120 --> 00:34:19,460
book data, where the name of the book comes from the data field, which is essentially

366
00:34:19,460 --> 00:34:26,800
all file names in the data folder.

367
00:34:26,800 --> 00:34:29,360
And we also want to create all the plots.

368
00:34:29,360 --> 00:34:33,980
And this defines our final results.

369
00:34:33,980 --> 00:34:37,680
And then Snakemake starts to look, okay, how do I get these?

370
00:34:37,680 --> 00:34:41,320
Is there any other rule that creates these?

371
00:34:41,320 --> 00:34:48,000
And it looks on, so there is a rule countWords, which has as inputs a script code countedPy

372
00:34:48,000 --> 00:34:52,920
and a book data file txt.

373
00:34:52,920 --> 00:35:06,640
And these files come, and this file is just a placeholder again, which in the end comes

374
00:35:06,640 --> 00:35:15,840
from data because it knows that okay this entry comes from here then. And then you have

375
00:35:15,840 --> 00:35:24,080
a Python script that says okay well from the inputs I take the script and I take the book

376
00:35:24,080 --> 00:35:34,000
and I create the output and if we look back up this is exactly what we had here. So this

377
00:35:34,000 --> 00:35:42,120
is the first step. That's what the count rule essentially is doing, or the count words.

378
00:35:42,120 --> 00:35:54,500
And in the make plot, this is essentially the same structure, and again, as above. And

379
00:35:54,500 --> 00:35:59,880
I will show you this on Binder.

380
00:35:59,880 --> 00:36:10,440
So how the SnakeMech works, the rule works, is that each rule will take an input file

381
00:36:10,440 --> 00:36:15,600
and then it looks that if that input file doesn't exist on the disk, it will find a

382
00:36:15,600 --> 00:36:21,180
rule that has that input file as the output file.

383
00:36:21,180 --> 00:36:25,400
And then, and that's why we start from the end.

384
00:36:25,400 --> 00:36:27,920
It's yeah.

385
00:36:27,920 --> 00:36:37,300
And one thing I need to mention here, in this binder, the results are already there.

386
00:36:37,300 --> 00:36:44,920
So we already have these final results, and we also already have the statistics being

387
00:36:44,920 --> 00:36:45,920
processed.

388
00:36:45,920 --> 00:36:52,840
So the first thing I actually need to do is remove them, because otherwise it doesn't

389
00:36:52,840 --> 00:36:55,640
do anything, because it has everything already.

390
00:36:55,640 --> 00:36:58,120
So I delete all these files.

391
00:36:58,120 --> 00:37:05,560
And if I then start to, as you can see on the left, the statistics stuff is now gone.

392
00:37:05,560 --> 00:37:13,000
And if I then run this, what SnakeMIC does is it essentially checks, okay, what do I

393
00:37:13,000 --> 00:37:14,080
have to do?

394
00:37:14,080 --> 00:37:20,400
I have to create or I have to fulfill the all once.

395
00:37:20,400 --> 00:37:24,120
To do that, I have to count words four times and I have to make plots four times.

396
00:37:24,120 --> 00:37:28,920
So in total, I have nine things that I have to do.

397
00:37:28,920 --> 00:37:31,000
The all is once for each book.

398
00:37:31,000 --> 00:37:31,520
Yeah.

399
00:37:31,520 --> 00:37:37,400
The all is just a final check, so that's pretty simple.

400
00:37:37,400 --> 00:37:42,200
But the other code is something that needs to be changed.

401
00:37:42,200 --> 00:37:44,880
And there I have my data again.

402
00:37:44,880 --> 00:37:51,000
Now, the beauty of this is if I, for example,

403
00:37:51,000 --> 00:37:56,840
remove this last data and run it again

404
00:37:58,440 --> 00:38:04,120
it will notice that okay um i'm missing one count words

405
00:38:04,120 --> 00:38:08,280
um and since i'm missing that i also have to redo the plot because

406
00:38:08,280 --> 00:38:11,960
um yeah i don't know if this is if the data that

407
00:38:11,960 --> 00:38:16,120
uh is being created um will really lead to the same for

408
00:38:16,120 --> 00:38:20,680
the same picture or the same output here so i'm re-running this and i have to

409
00:38:20,680 --> 00:38:27,560
execute the all again, because yeah, I'm missing something from there. And one more thing that I

410
00:38:27,560 --> 00:38:39,000
think is very important and why we have these code pieces in our rule as inputs. If I change

411
00:38:39,000 --> 00:38:50,520
the count.py here and run this again, it doesn't know what was changed, but it knows, okay,

412
00:38:50,520 --> 00:38:56,760
the count has changed. Oops, this was too far up. The count has changed, so I need to rerun

413
00:38:56,760 --> 00:39:06,360
everything that depended on this input count.py. That creates me the statistics data information,

414
00:39:08,200 --> 00:39:13,800
which my make plot depends on. So I have to rerun the make plot because I don't know if that has

415
00:39:13,800 --> 00:39:20,040
changed. And it will essentially rerun everything that's necessary to keep in sync with all the

416
00:39:20,040 --> 00:39:29,240
inputs. And that's the real beauty of these things. So you can go through it and you can

417
00:39:30,840 --> 00:39:36,360
make sure that only the stuff is rerun that is necessary but everything that is necessary is

418
00:39:36,360 --> 00:39:43,480
rerun. And that's really something that allows you to keep all your results in sync

419
00:39:43,480 --> 00:39:55,880
and allows you to run additional code or additional inputs without rerunning everything.

420
00:39:59,560 --> 00:40:11,480
It also has the possibility to use containers or environments

421
00:40:13,480 --> 00:40:23,880
And you can visualize the graph that is being created here as well.

422
00:40:25,880 --> 00:40:29,880
Okay. Or not. At least not in this environment.

423
00:40:33,480 --> 00:40:37,480
It was a good example of unreproducible.

424
00:40:37,480 --> 00:40:41,880
Yep. So we would need to install the graph.

425
00:40:41,880 --> 00:40:45,960
Oh, well, we can probably just install it here as well.

426
00:40:45,960 --> 00:40:53,080
But I'm, that could take a bit of time.

427
00:40:53,080 --> 00:40:55,120
Yeah, that can take.

428
00:40:55,120 --> 00:40:59,000
So essentially, what's happening is for all,

429
00:40:59,000 --> 00:41:02,360
I need to create the count words with the input of the file

430
00:41:02,360 --> 00:41:02,860
Sierra.

431
00:41:05,400 --> 00:41:08,320
This is also the input for the make plot.

432
00:41:08,320 --> 00:41:11,840
And all needs to have make plot.

433
00:41:11,840 --> 00:41:15,340
and that's the same for all the other inputs.

434
00:41:15,340 --> 00:41:19,980
So all depends on all of these individual things

435
00:41:19,980 --> 00:41:22,040
and only then all is fulfilled.

436
00:41:25,100 --> 00:41:28,020
The reason why using SnakeMake

437
00:41:28,020 --> 00:41:30,780
or why we're representing SnakeMake and not other tools,

438
00:41:32,780 --> 00:41:34,000
I would say some people claim

439
00:41:34,000 --> 00:41:36,900
it has a relatively gentle learning curve.

440
00:41:36,900 --> 00:41:39,460
I think it depends a lot on your example

441
00:41:39,460 --> 00:41:43,420
or on your use case, whether it's gentle or not

442
00:41:43,420 --> 00:41:46,260
and how many features you actually need.

443
00:41:46,260 --> 00:41:47,900
If you don't need too many features from it,

444
00:41:47,900 --> 00:41:50,300
then yeah, it has a relatively gentle learning curve.

445
00:41:50,300 --> 00:41:53,380
If you need a lot of features, then well,

446
00:41:53,380 --> 00:41:55,860
like with any system, if you want to use all the features

447
00:41:55,860 --> 00:41:59,060
that it offers, it has quite a bit of stuff

448
00:41:59,060 --> 00:42:00,220
that you need to learn.

449
00:42:01,680 --> 00:42:04,860
I think for me mainly, it's free, it's open source

450
00:42:04,860 --> 00:42:08,820
and it installs pretty easily via Conda or via PIP

451
00:42:08,820 --> 00:42:13,060
and you can use it on both Windows or all Windows,

452
00:42:13,060 --> 00:42:15,040
Mac OS or Linux.

453
00:42:15,040 --> 00:42:18,500
And that's also a beauty,

454
00:42:18,500 --> 00:42:21,300
it is highly compatible with high performance computing.

455
00:42:22,180 --> 00:42:24,820
You can essentially tell SnakeMake

456
00:42:24,820 --> 00:42:29,020
that run these things on a cluster,

457
00:42:29,020 --> 00:42:33,920
run these things with the HPC scheduler.

458
00:42:33,920 --> 00:42:36,460
So don't run them on the local machine,

459
00:42:36,460 --> 00:42:44,140
run them elsewhere and run them as individual jobs, which lets you parallelize all of these

460
00:42:44,140 --> 00:42:46,220
parallelizable steps very easily.

461
00:42:52,460 --> 00:43:00,540
Yeah, it's, as I mentioned earlier, it's possible to define software, isolate software environments

462
00:43:00,540 --> 00:43:07,660
in Perlul, so essentially defining that we will now use a certain conda environment or even to

463
00:43:07,660 --> 00:43:13,020
use a certain container to run these things in. We'll come to containers later and what they are,

464
00:43:13,020 --> 00:43:21,420
how they work, and as we mentioned it's heavily used in bioinformatics and it's a nice functionality

465
00:43:21,420 --> 00:43:33,180
to archive your workflow and to properly archive it. You could, for example, put in the parameters

466
00:43:33,180 --> 00:43:40,940
that you were using in a SnakeMag file and then have everything that you were using in that

467
00:43:40,940 --> 00:43:47,420
SnakeMag file. And if you want to use a new parameter set, you could create a new SnakeMag

468
00:43:47,420 --> 00:43:52,540
file and keep the old one or if the SnakeMIC file is under version control you can simply

469
00:43:52,540 --> 00:44:00,140
go back to that version. So that helps a lot in also remembering what was being used in the past.

470
00:44:03,260 --> 00:44:09,740
There are additional similar tools like Make which is very heavily used in C compiling.

471
00:44:09,740 --> 00:44:20,920
There's Nextflow, Task, and other tools that help in doing this.

472
00:44:20,920 --> 00:44:21,920
And about 200 others.

473
00:44:21,920 --> 00:44:22,920
Yes.

474
00:44:22,920 --> 00:44:26,800
There are a lot of workflow managers.

475
00:44:26,800 --> 00:44:28,480
Yeah.

476
00:44:28,480 --> 00:44:32,840
And of course, computational steps can be recorded in many ways.

477
00:44:32,840 --> 00:44:36,200
A script can be perfectly sufficient.

478
00:44:36,200 --> 00:44:44,480
But make sure that when recording your computational steps, you also record input parameters.

479
00:44:44,480 --> 00:44:54,140
You also record what was, what input parameters, what stuff was used to run the analysis.

480
00:44:54,140 --> 00:45:02,760
And in snake make, I would put it in the snake file, in a bash script or any other script,

481
00:45:02,760 --> 00:45:07,560
I would try to put it into the pile there as well,

482
00:45:07,560 --> 00:45:10,440
because otherwise, you will forget it.

483
00:45:10,440 --> 00:45:12,400
I know that I would.

484
00:45:12,400 --> 00:45:14,080
Yeah.

485
00:45:14,080 --> 00:45:17,920
In the notes, there is a question about parallelization.

486
00:45:17,920 --> 00:45:22,560
So how does Snake make the parallelization happen?

487
00:45:22,560 --> 00:45:25,920
Does it require the user to set some parameters?

488
00:45:28,800 --> 00:45:32,080
The minus J, I think, is the number of jobs

489
00:45:32,080 --> 00:45:34,000
that you can run in parallel.

490
00:45:34,000 --> 00:45:35,000
Yes.

491
00:45:35,000 --> 00:45:42,680
So if you would run minus J20, it would try to run 20 things in parallel.

492
00:45:42,680 --> 00:45:54,640
So what SnakeMech does, it detects from your rules that, okay, these rules can be run in

493
00:45:54,640 --> 00:45:55,640
parallel.

494
00:45:55,640 --> 00:46:05,480
don't depend on each other. And then it checks from the minus J parameter or the option,

495
00:46:05,480 --> 00:46:15,120
the number of workers, that how many CPUs do you have available. And if you have more

496
00:46:15,120 --> 00:46:31,200
than one CPU available, then it can start running the rules in parallel. I think that's

497
00:46:31,200 --> 00:46:32,800
the short of it.

498
00:46:32,800 --> 00:46:39,840
Yeah, and on clusters, there is integration with Snake, MIG, and SLURM, but we won't go

499
00:46:39,840 --> 00:46:43,600
go into this in detail at the moment.

500
00:46:43,600 --> 00:46:49,400
If you think that you would benefit from using SnakeMake,

501
00:46:49,400 --> 00:46:52,160
I would highly recommend going through the documentation.

502
00:46:52,160 --> 00:46:55,520
Because what we have given here is a very small example

503
00:46:55,520 --> 00:46:57,200
and a very simple example.

504
00:46:57,200 --> 00:46:59,880
And like always with simple examples,

505
00:46:59,880 --> 00:47:04,640
they look easy to do on the surface.

506
00:47:04,640 --> 00:47:08,560
And once you actually want to use them for you,

507
00:47:08,560 --> 00:47:11,040
you have to go back to the documentation.

508
00:47:11,040 --> 00:47:14,920
This is mainly to show you this is something that's possible

509
00:47:14,920 --> 00:47:18,640
and that's available and how to find it.

510
00:47:23,600 --> 00:47:29,720
We are at the stage when we could have the break.

511
00:47:29,720 --> 00:47:32,320
Yep, and I would say we have a 10-minute break

512
00:47:32,320 --> 00:47:35,120
till 2 past the hour.

513
00:47:35,120 --> 00:47:36,920
Yes.

514
00:47:36,920 --> 00:47:41,400
Okay, keep posting your questions on the

515
00:47:41,400 --> 00:47:47,320
on the collaborative document. We can keep answering them or take your break

516
00:47:47,320 --> 00:47:50,840
and have a have a small walk around so that you

517
00:47:50,840 --> 00:47:59,000
can come back refreshed. Okay then, bye and see you in 10 minutes.

518
00:48:06,920 --> 00:48:08,980
you

519
00:48:36,920 --> 00:48:38,980
you

520
00:49:06,920 --> 00:49:08,980
you

521
00:49:36,920 --> 00:49:38,980
you

522
00:50:06,920 --> 00:50:08,980
you

523
00:50:36,920 --> 00:50:38,980
you

524
00:51:06,920 --> 00:51:08,980
you

525
00:51:36,920 --> 00:51:38,980
you

526
00:52:06,920 --> 00:52:08,980
you

527
00:52:36,920 --> 00:52:38,980
you

528
00:53:06,920 --> 00:53:08,980
you

529
00:53:36,920 --> 00:53:38,980
you

530
00:54:06,920 --> 00:54:08,980
you

531
00:54:36,920 --> 00:54:38,980
you

532
00:55:06,920 --> 00:55:08,980
you

533
00:55:36,920 --> 00:55:38,980
you

534
00:56:06,920 --> 00:56:08,980
you

535
00:56:36,920 --> 00:56:38,980
you

536
00:57:06,920 --> 00:57:14,360
Okay and welcome back. So we've talked about organizing your folders, organizing your code

537
00:57:14,360 --> 00:57:19,880
and recording the recording the steps and the next thing that we want to talk about

538
00:57:19,880 --> 00:57:26,440
is recording dependencies and how to communicate different versions of software dependencies.

539
00:57:28,120 --> 00:57:36,200
And well our code often depends on other codes or other libraries and that in turn depends on

540
00:57:36,200 --> 00:57:42,280
other codes, and so on. So for reproducibility reasons, we can version control our code with Git,

541
00:57:42,280 --> 00:57:47,960
but how can we version control dependencies? How can we capture and communicate them?

542
00:57:48,840 --> 00:57:56,760
And connected to that is that we can easily end up in a somewhat of a dependency hell,

543
00:57:56,760 --> 00:58:04,600
where different codes that need to be run for the same analysis actually have conflicting

544
00:58:04,600 --> 00:58:12,040
dependencies. The one depends on a different version of a library than the other and that

545
00:58:12,040 --> 00:58:20,040
starts to get really problematic. And there's this nice xkcd comic that shows very well how

546
00:58:20,600 --> 00:58:29,400
our modern computational infrastructure works and that it's a very complex pattern of libraries and

547
00:58:29,400 --> 00:58:37,000
libraries and libraries depending on other libraries and this on top here that might be

548
00:58:37,000 --> 00:58:44,680
your code and it depends on a lot of different things down below down to operating systems

549
00:58:44,680 --> 00:58:50,440
kernels and then it probably depends on some projects some random person Nebraska has been

550
00:58:50,440 --> 00:58:59,080
thanklessly maintaining since 2003 and if that piece of code breaks the whole thing tumbles down

551
00:58:59,080 --> 00:59:05,320
And there is actually a very recent example that came out, that happened way after this

552
00:59:07,160 --> 00:59:15,480
comic was created, where there wasn't a breakdown as such, but there almost happened to be a very,

553
00:59:15,480 --> 00:59:22,840
very, very severe security issue, because someone socially engineered themselves into a maintainer

554
00:59:22,840 --> 00:59:31,080
position of one of these tiny bits of codes that everything relies on and had managed to get some

555
00:59:31,080 --> 00:59:42,200
backdoors into the code and that was almost shipped to the stable versions of some operating systems.

556
00:59:42,200 --> 00:59:48,760
That was the XZ library which is essentially a compression library that is used in a lot of

557
00:59:48,760 --> 00:59:59,240
systems as an underlying library. So this picture is very accurate and yet unfortunately it's very

558
00:59:59,240 --> 01:00:10,680
accurate. So to make this whole thing a bit more understandable, a bit more tangible, we can also

559
01:00:10,680 --> 01:00:18,680
think of a kitchen analogy to your code and what you're doing. And essentially your software that

560
01:00:18,680 --> 01:00:27,320
you have, that's the recipe. That's the recipe on how to process the data, which are the ingredients,

561
01:00:28,440 --> 01:00:37,880
to get your results, so your dish. And to do that, you normally take some libraries, which are

562
01:00:37,880 --> 01:00:46,120
pots or tools. And now it's very simple to imagine that, okay, you have a recipe for a huge amount

563
01:00:46,120 --> 01:00:54,200
of pasta, because that recipe is supposed to feed 40 people. And your recipe says to

564
01:00:54,200 --> 01:01:05,800
take a 10 or 15 litre pot of water. Well, that wouldn't work, that whole recipe wouldn't

565
01:01:05,800 --> 01:01:11,560
work if the only pot that you have is a 1 litre pot. So if you only have the 1 litre

566
01:01:11,560 --> 01:01:18,360
version of that library so only the one liter pot you can't your recipe just doesn't work

567
01:01:19,640 --> 01:01:25,400
because you can't fill 10 kilos of spaghetti into a one liter pot

568
01:01:27,560 --> 01:01:35,960
so that's how you can think about how software data and libraries work together

569
01:01:35,960 --> 01:01:47,560
and there are plenty of tools that try to help you specify what tools you actually need

570
01:01:49,560 --> 01:01:59,080
and try to help you in specifying the specific library versions that are needed and handle all

571
01:01:59,080 --> 01:02:05,240
the dependencies that are underlying these libraries because you might be working with

572
01:02:05,240 --> 01:02:14,600
for example pandas but pandas needs other libraries to work and this kind of dependency

573
01:02:14,600 --> 01:02:22,680
tree is something that you don't want to care about yourself and so defining if having a tool

574
01:02:22,680 --> 01:02:30,840
that helps you there is very beneficial and common tools that have there are conda pip virtual

575
01:02:30,840 --> 01:02:43,320
environments, poetry for package building, the requirement.txt which lists the

576
01:02:43,320 --> 01:02:47,400
individual requirements, the environment.yaml which is the equivalent to conda and so on.

577
01:02:48,840 --> 01:02:53,480
And they try to help you in defining the specific set of dependencies,

578
01:02:53,480 --> 01:02:58,200
possibly with well-defined versions. They help you in installing those dependencies

579
01:02:58,200 --> 01:03:06,200
because they get the underlying dependencies, they help you with recording the versions for all these dependencies,

580
01:03:06,200 --> 01:03:13,200
and Virtualenv and Anaconda, for example, also help you in isolating environments,

581
01:03:13,200 --> 01:03:18,200
so that you can have multiple different sets of environments on one computer,

582
01:03:18,200 --> 01:03:23,200
so that if you have two pieces of code that have conflicting dependencies,

583
01:03:23,200 --> 01:03:27,200
you can still run both of them, you just need to change the environment for that.

584
01:03:27,200 --> 01:03:36,080
that. They even help you with changing the versions of R or Python per project or even

585
01:03:36,080 --> 01:03:41,200
within the same project if you have code that needs, if you have very old code that still needs

586
01:03:41,840 --> 01:03:50,960
Python 2, you can do that. If you have code that needs an R version below 4, yeah, you can do that.

587
01:03:50,960 --> 01:04:08,440
So, some of these tools or approaches are Python specific, and some are more general.

588
01:04:08,440 --> 01:04:16,120
So Konda, Anaconda, they are quite general.

589
01:04:16,120 --> 01:04:28,760
Yeah, while virtualenv is more a Python or pyenv, while renv is more R and so on.

590
01:04:28,760 --> 01:04:35,780
And one really beautiful thing with, for example, conda, yeah, mainly conda, mainly with actual

591
01:04:35,780 --> 01:04:44,320
or also pyenv, virtualenv, so with these whole things is that if something goes wrong or

592
01:04:44,320 --> 01:04:47,680
Or you want to try something out and it didn't work.

593
01:04:47,680 --> 01:04:51,960
You can delete the environment and recreate it from the environment file.

594
01:04:51,960 --> 01:04:58,960
So you can test, okay, I have found a library that seems to be solving a problem that I have.

595
01:04:58,960 --> 01:05:04,520
Let's add it to the environment, test it, didn't work, okay.

596
01:05:04,520 --> 01:05:09,520
Before I try to remove that library again, because there might have been other things

597
01:05:09,520 --> 01:05:13,360
that came along with it, that I didn't properly record yet,

598
01:05:13,360 --> 01:05:16,400
I just throw away the environment, recreate it,

599
01:05:16,400 --> 01:05:19,200
because it will be the same as I had before.

600
01:05:20,880 --> 01:05:25,840
And we have here five examples

601
01:05:25,840 --> 01:05:28,720
of students that wrote code,

602
01:05:29,760 --> 01:05:31,440
which depends on a couple of libraries.

603
01:05:31,440 --> 01:05:34,240
And the code was uploaded to GitHub.

604
01:05:34,240 --> 01:05:37,200
And let's assume we travel three years into the future

605
01:05:37,200 --> 01:05:38,720
and find the GitHub repositories

606
01:05:38,720 --> 01:05:48,320
and try to rerun the code before adapting it. There are a couple of questions in the

607
01:05:50,000 --> 01:05:54,720
in the collaborative document now which we would like to have your opinions and I would give that

608
01:05:54,720 --> 01:06:02,400
like three minutes or so or five minutes to read through it and answer that and just say okay well

609
01:06:02,400 --> 01:06:06,240
what do you think is this reproducible or isn't that reproducible?

610
01:06:08,720 --> 01:06:29,040
Okay, so see you in five minutes.

611
01:06:29,040 --> 01:06:34,160
You can also, if you have comments about it, write the comments there and what the issues

612
01:06:34,160 --> 01:06:55,240
So I think we will start discussing

613
01:06:55,240 --> 01:07:00,640
once we have a few comments for one of them.

614
01:07:00,640 --> 01:07:03,760
And you can go through it and just listen

615
01:07:03,760 --> 01:07:06,800
to what we say about it in general.

616
01:07:06,800 --> 01:07:09,520
Looks like A is starting to get some.

617
01:07:17,400 --> 01:07:22,720
Yeah, I think A, we already have a clear tendency.

618
01:07:22,720 --> 01:07:24,560
Yeah, consensus.

619
01:07:24,560 --> 01:07:26,720
That this is not reproducible.

620
01:07:26,720 --> 01:07:28,520
And yeah, absolutely.

621
01:07:28,520 --> 01:07:34,120
you just have imports you might not even know which libraries are actually being used because

622
01:07:34,120 --> 01:07:40,760
sometimes there are two libraries that provide the same imports and that essentially means that you

623
01:07:40,760 --> 01:07:47,640
can either load library A or library B and or you can have a dependency on library A or library B

624
01:07:47,640 --> 01:07:53,720
but in the code they have the same import statement because you have conflicting import that's

625
01:07:53,720 --> 01:08:01,720
absolutely possible. So, yeah, this is anything but reproducible. And also not very nice if you

626
01:08:01,720 --> 01:08:09,800
think about the workload you are putting on the next person trying to figure out. Or on yourself

627
01:08:09,800 --> 01:08:18,040
rerunning it. Yeah. B, we also already have a quite clear thing that, yeah, if you have a list

628
01:08:18,040 --> 01:08:24,200
of libraries that are used, that's at least helping. But if you don't have any versions,

629
01:08:25,800 --> 01:08:33,320
you sometimes have breaking changes in between versions and you don't necessarily know which

630
01:08:33,320 --> 01:08:37,960
version was being used. You can try to guess what version was being used, but

631
01:08:37,960 --> 01:08:41,720
if this was being created somewhere in the transition between, let's say,

632
01:08:41,720 --> 01:08:49,560
major version 2 and major version 3 of the same library, it's a whole lot of guesswork which

633
01:08:49,560 --> 01:08:57,960
version was actually used because very often published code is already older. So it was

634
01:08:57,960 --> 01:09:06,280
essentially developed a year ago or so and the version that was used back then was being used

635
01:09:06,280 --> 01:09:09,840
And, yeah, we just don't know.

636
01:09:09,840 --> 01:09:10,840
Yeah.

637
01:09:10,840 --> 01:09:17,440
For example, so this function uses, or this class uses a function that was introduced

638
01:09:17,440 --> 01:09:25,520
in version two, but was deprecated in version four, or say, deprecated in version six.

639
01:09:25,520 --> 01:09:31,720
So it must be somewhere between two, three, four, five, and then the subversions.

640
01:09:31,720 --> 01:09:38,200
And it's, again, it's not very nice thing to do to yourself or to the next person trying

641
01:09:38,200 --> 01:09:40,000
to figure out your code.

642
01:09:40,000 --> 01:09:46,880
And C, again, yeah, as people mentioned here, it's nice that you have an environment file

643
01:09:46,880 --> 01:09:51,960
that already helps quite a bit, but there is, of course, still missing version numbers.

644
01:09:51,960 --> 01:09:54,280
So you don't know which versions were actually being used.

645
01:09:54,280 --> 01:10:00,560
Is this now Python 3 or Python 2?

646
01:10:00,560 --> 01:10:02,840
and what this file is supposed to tell you.

647
01:10:02,840 --> 01:10:05,480
Okay, that's actually a good question here.

648
01:10:05,480 --> 01:10:10,480
So the environment YAML file is a file for Conda.

649
01:10:10,680 --> 01:10:15,320
Conda is a dependence management system

650
01:10:15,320 --> 01:10:18,200
that reads through this and says,

651
01:10:18,200 --> 01:10:19,880
okay, well, I'll create an environment

652
01:10:19,880 --> 01:10:22,400
with the following name,

653
01:10:23,560 --> 01:10:28,560
and then I'm using these channels,

654
01:10:28,560 --> 01:10:30,560
these channels, I'm using these sources.

655
01:10:30,560 --> 01:10:32,000
And in this case, it's conda-forge.

656
01:10:32,000 --> 01:10:37,000
Conda-forge is a pretty popular repository for packages.

657
01:10:37,160 --> 01:10:40,560
And the dependencies are then listed as scipy.

658
01:10:40,560 --> 01:10:45,560
So the scipy package, numpy, sympy, click, python, pip.

659
01:10:47,680 --> 01:10:51,640
And conda also allows you to do installs with pip

660
01:10:51,640 --> 01:10:54,320
because not every package is actually in conda.

661
01:10:55,240 --> 01:10:57,080
And it allows you to create an environment

662
01:10:57,080 --> 01:10:59,860
that has pip installations.

663
01:10:59,860 --> 01:11:04,860
And here, this indicates that, okay, this is git,

664
01:11:05,600 --> 01:11:09,480
this is a pip installation from this git repository

665
01:11:09,480 --> 01:11:12,000
at the master branch.

666
01:11:14,760 --> 01:11:17,120
And actually that's a problem in itself

667
01:11:17,120 --> 01:11:18,720
because master can have changed.

668
01:11:18,720 --> 01:11:20,920
There is no idea, there is no information

669
01:11:20,920 --> 01:11:23,360
on what master is nowadays.

670
01:11:23,360 --> 01:11:25,360
This can be completely different.

671
01:11:25,360 --> 01:11:26,400
So...

672
01:11:26,400 --> 01:11:31,400
And very likely is because the latest master...

673
01:11:31,520 --> 01:11:36,160
Well, yeah, most likely, assuming that this is

674
01:11:36,160 --> 01:11:39,320
from other users that actually still develop their code.

675
01:11:40,840 --> 01:11:43,280
4D, we...

676
01:11:43,280 --> 01:11:46,360
And the versions are...

677
01:11:46,360 --> 01:11:51,120
Okay, so how you fix that could be like in the nodes.

678
01:11:51,120 --> 01:11:51,960
In version D.

679
01:11:51,960 --> 01:11:59,920
where you essentially have a specific git commit or a specific tag that this project

680
01:11:59,920 --> 01:12:05,320
is being used at.

681
01:12:05,320 --> 01:12:11,960
There is the comment that there might be different builds.

682
01:12:11,960 --> 01:12:12,960
That's true.

683
01:12:12,960 --> 01:12:15,880
There is one problem with builds.

684
01:12:15,880 --> 01:12:20,680
Builds can be operating system specific.

685
01:12:20,680 --> 01:12:25,000
Oh, absolute reproducibility, yes, you need the build.

686
01:12:25,000 --> 01:12:28,480
But commonly, the version is sufficient.

687
01:12:28,480 --> 01:12:35,160
The version is sufficient to hopefully get the same results.

688
01:12:35,160 --> 01:12:37,720
If you really need to go down to the build number,

689
01:12:37,720 --> 01:12:42,240
it's very likely that something fishy is happening.

690
01:12:42,240 --> 01:12:47,880
And I wouldn't rely on my results too much, actually.

691
01:12:50,680 --> 01:12:55,480
But yes, for complete reproducibility, the build should be in there.

692
01:12:58,680 --> 01:13:02,760
For usability, I wouldn't put it in a place like that.

693
01:13:04,040 --> 01:13:14,120
And I'll come to that a bit later, actually, in the next demo, where we show the differences here.

694
01:13:14,120 --> 01:13:15,120
here.

695
01:13:15,120 --> 01:13:16,120
Yeah.

696
01:13:16,120 --> 01:13:17,120
Anything else?

697
01:13:17,120 --> 01:13:18,120
Yeah.

698
01:13:18,120 --> 01:13:36,000
This has the advantage, the E has the advantage over D that these projects that were referenced

699
01:13:36,000 --> 01:13:46,960
here have now been put onto conda but actually if that is you can be happy if that isn't well

700
01:13:46,960 --> 01:13:53,280
that's also something that's very common that you need some pip packages or that you need something

701
01:13:53,280 --> 01:13:59,200
from a different git repository and of course there is the problem that these git repositories

702
01:13:59,200 --> 01:14:07,680
could have been deleted. But if you want to make sure that you keep those git repositories

703
01:14:07,680 --> 01:14:13,200
and you need a specific version from a specific git repository, fork it and use your own fork.

704
01:14:13,200 --> 01:14:18,240
Because you are in control of your own fork and as long as you don't delete that fork, that stays.

705
01:14:19,040 --> 01:14:26,400
So this way is perfectly fine if you make sure that the repositories don't disappear.

706
01:14:29,200 --> 01:14:30,200
Okay.

707
01:14:30,200 --> 01:14:33,320
And that's essentially also what's listed in the solution.

708
01:14:33,320 --> 01:14:34,320
Yes.

709
01:14:34,320 --> 01:14:35,320
Are there...

710
01:14:35,320 --> 01:14:36,320
Yeah.

711
01:14:36,320 --> 01:14:39,000
So, what about pip packages and conda packages?

712
01:14:39,000 --> 01:14:43,040
Do they not disappear ever?

713
01:14:43,040 --> 01:14:53,640
They can, hopefully not, but even conda packages can disappear, especially in very fast moving

714
01:14:53,640 --> 01:15:06,520
fields, or if you use, let's say, more unstable channels, more developmental channels. I've

715
01:15:06,520 --> 01:15:13,560
seen some PyTorch versions no longer being supplied by some of the providers because they

716
01:15:13,560 --> 01:15:19,080
are too old and considered as not useful anymore. But that's, of course, a real problem for reproducibility.

717
01:15:19,080 --> 01:15:27,560
Yeah. So, in general, if you use well-known and widely used channels and packages from

718
01:15:27,560 --> 01:15:32,680
Conda or BIP, it is very unlikely that they will disappear.

719
01:15:33,880 --> 01:15:45,400
But yeah, they can. And how to solve that problem, we can come to, well, how to switch that problem

720
01:15:45,400 --> 01:15:50,760
to a different level, we'll come to in a bit.

721
01:15:50,760 --> 01:15:51,320
Yeah.

722
01:15:51,320 --> 01:15:57,880
So now, I will demo creating our own small time capsule for a

723
01:15:59,080 --> 01:16:02,200
environment and for the future world.

724
01:16:06,360 --> 01:16:10,440
Yeah, this is essentially, I have created this

725
01:16:10,440 --> 01:16:14,520
environment of YAML and as explained above, I can quickly

726
01:16:15,400 --> 01:16:20,400
show that this is essentially what's written in here.

727
01:16:21,420 --> 01:16:26,020
So conceptually, again, it wants to create an environment

728
01:16:26,020 --> 01:16:30,700
called myenv with the channels on the forge

729
01:16:30,700 --> 01:16:32,660
and in this case, defaults,

730
01:16:32,660 --> 01:16:35,140
which is the Anaconda environment.

731
01:16:36,500 --> 01:16:40,380
One mention here, this can become a bit problematic

732
01:16:40,380 --> 01:16:45,380
because Anaconda recently changed their policies

733
01:16:47,380 --> 01:16:50,140
that even academic institutions now have to pay

734
01:16:50,140 --> 01:16:53,740
if they have over a certain amount of users.

735
01:16:53,740 --> 01:16:57,580
And it might be good not to use defaults here.

736
01:17:01,180 --> 01:17:04,220
CondaForge normally has all the packages that you need

737
01:17:04,220 --> 01:17:08,660
and even has more packages than default

738
01:17:08,660 --> 01:17:10,100
than the Anaconda environment,

739
01:17:10,100 --> 01:17:12,860
but the under-conda moment is a bit better curated.

740
01:17:14,820 --> 01:17:17,800
Okay, and then it is the dependency.

741
01:17:17,800 --> 01:17:20,800
So this would be something that depends on Python 3.10,

742
01:17:22,420 --> 01:17:25,300
also wants to have mountain NumPy, pandas, and seaborn.

743
01:17:25,300 --> 01:17:27,200
And yes, it doesn't give any,

744
01:17:28,520 --> 01:17:33,520
it doesn't give any version numbers here at the moment.

745
01:17:34,860 --> 01:17:39,220
So I will be using mamba instead of conda.

746
01:17:39,220 --> 01:17:49,140
the reason is that otherwise conda can take quite a bit of time to actually create environments and

747
01:17:49,140 --> 01:17:56,980
I want to spare us all the time. Mamba is a drop-in replacement that's just faster because

748
01:17:56,980 --> 01:18:06,500
it uses C while conda is programmed entirely in Python. Okay, so this will essentially

749
01:18:06,500 --> 01:18:16,420
create this environment, check the sources that I indicated and start to then download the files.

750
01:18:28,180 --> 01:18:29,540
So it checks for these

751
01:18:29,540 --> 01:18:40,260
And I should have them already downloaded, so there's no, oh, it actually found something

752
01:18:40,260 --> 01:18:44,260
that probably has a newer version and it wants to take the newer version.

753
01:18:44,260 --> 01:18:47,140
So that's something which is actually quite nice to see.

754
01:18:47,140 --> 01:18:55,000
So if I had created that a little bit earlier, it would be slightly different now because

755
01:18:55,000 --> 01:18:57,140
this is a different version.

756
01:18:57,140 --> 01:19:09,060
So and if I then say conda activate myenv, I have my environment where in Python I can

757
01:19:09,060 --> 01:19:15,180
import Seaborn and have my Seaborn library and so on.

758
01:19:15,180 --> 01:19:21,420
So I can now also export this environment.

759
01:19:26,380 --> 01:19:34,460
And that's essentially what was mentioned earlier in the notes,

760
01:19:34,460 --> 01:19:38,820
that this lists everything, including the build number,

761
01:19:38,820 --> 01:19:40,060
the build ID.

762
01:19:40,060 --> 01:19:42,820
And if you look into this a bit, you

763
01:19:42,820 --> 01:19:52,740
notice things like this one where libplus is linux64 so yeah i'm on a linux system and this is

764
01:19:52,740 --> 01:20:01,380
a build that's specific for linux so if i would provide this this dependency file anyone who is

765
01:20:01,380 --> 01:20:09,460
on a windows system will have problems installing this environment because this is not available

766
01:20:09,460 --> 01:20:22,340
for Windows. That's why this kind of system where you have all the individual build numbers

767
01:20:22,340 --> 01:20:30,100
might not be the best thing. It's good to have and I would put it in as for reproducibility

768
01:20:30,100 --> 01:20:37,860
so that people can actually see what exact builds were being used. But for usability of your code,

769
01:20:37,860 --> 01:20:44,660
So if someone wants to use that library in a different project, this is questionable.

770
01:20:46,500 --> 01:20:54,420
There's the other option which is very convenient. You can say from history and if I

771
01:20:59,300 --> 01:21:04,820
check into that, this is exactly what I installed. This lists exactly, even if I

772
01:21:04,820 --> 01:21:10,820
later on would install something with mamba install whatever it would list exactly the

773
01:21:10,820 --> 01:21:18,180
right packages here there is a third option

774
01:21:28,180 --> 01:21:32,900
which is called no builds and that

775
01:21:35,780 --> 01:21:39,220
is the same as the environments file but without the builds.

776
01:21:40,580 --> 01:21:46,420
That can also be useful if you want to make a clearer specifications which underlying packages

777
01:21:46,420 --> 01:21:52,900
were being used without providing builds, but it still has the problem that there are things like

778
01:21:52,900 --> 01:21:58,420
the LD implementation in Linux. So yeah, that might still not work on a Windows system.

779
01:21:58,420 --> 01:22:00,820
system.

780
01:22:00,820 --> 01:22:05,940
So what is the recommendation here?

781
01:22:05,940 --> 01:22:10,220
What I personally would recommend for a project

782
01:22:10,220 --> 01:22:17,900
to provide is the export from history, so this.

783
01:22:17,900 --> 01:22:21,740
And for reproducibility reasons, I

784
01:22:21,740 --> 01:22:25,780
would put in the complete export.

785
01:22:25,780 --> 01:22:30,300
Because then if someone has the same operating system

786
01:22:30,300 --> 01:22:35,580
and so on, this should be really exactly the same environment

787
01:22:35,580 --> 01:22:39,660
that they get when creating that.

788
01:22:39,660 --> 01:22:42,540
While the FromHistory will create an environment

789
01:22:42,540 --> 01:22:47,900
that is as close to what I would recreate

790
01:22:47,900 --> 01:22:49,180
if I would start this now.

791
01:22:49,180 --> 01:23:00,300
And it's the one that solves on all operating systems, so it's more general.

792
01:23:00,300 --> 01:23:06,540
But at the same time, we have to admit that this is not a good initial environment file.

793
01:23:06,540 --> 01:23:09,540
Your initial environment file should have the NumPy version, should have the Pandas

794
01:23:09,540 --> 01:23:14,100
version, should have the Seaborn version that you want to use.

795
01:23:14,100 --> 01:23:31,080
So to summarize, in your initial environment file do have the version numbers, but then

796
01:23:31,080 --> 01:23:42,160
For completeness, it is OK to also include in your repo

797
01:23:42,160 --> 01:23:51,200
the complete export with the builds.

798
01:23:51,200 --> 01:23:56,120
I would even recommend it as an additional piece

799
01:23:56,120 --> 01:23:56,840
of information.

800
01:23:56,840 --> 01:23:58,160
Yeah.

801
01:23:58,160 --> 01:24:00,280
Because it doesn't hurt.

802
01:24:00,280 --> 01:24:01,360
OK, good.

803
01:24:01,360 --> 01:24:01,860
OK.

804
01:24:05,400 --> 01:24:07,320
We unfortunately don't have really time

805
01:24:07,320 --> 01:24:11,680
to go into details with R. But essentially, you

806
01:24:11,680 --> 01:24:15,360
can use Conda with R as well.

807
01:24:15,360 --> 01:24:19,920
Conda does have R, does support R.

808
01:24:19,920 --> 01:24:22,720
And I have created several environments with Conda

809
01:24:22,720 --> 01:24:25,760
OS for R with using Conda.

810
01:24:25,760 --> 01:24:38,080
So, but since we saw that an underlying library, a system library can cause problems.

811
01:24:38,080 --> 01:24:44,060
And up until now, we mainly considered non-system libraries, even though Conda already does

812
01:24:44,060 --> 01:24:48,280
some system library stuff.

813
01:24:48,280 --> 01:24:51,180
Let's go to recording the environments.

814
01:24:51,180 --> 01:24:58,740
And I think everyone has heard the, well, it works on my machine, comment from someone

815
01:24:58,740 --> 01:25:00,940
at some point.

816
01:25:00,940 --> 01:25:10,780
And this meme sums up the idea behind Docker or other containerization systems quite well.

817
01:25:10,780 --> 01:25:16,740
That it works on my machine, well, then we'll ship your machine.

818
01:25:16,740 --> 01:25:21,020
And yeah, that is how Docker was born, essentially.

819
01:25:21,020 --> 01:25:30,340
So we want to ship something or give something that provides as much as possible of the operating

820
01:25:30,340 --> 01:25:34,940
system to the user in the end.

821
01:25:34,940 --> 01:25:39,740
And to go back to our kitchen analogy, so as we said, our code scripts are the cooking

822
01:25:39,740 --> 01:25:46,240
recipes and then with containers you have container definition files and they are like

823
01:25:46,240 --> 01:25:53,600
blueprint to build a kitchen with all the utensils and stuff that the recipe needs to be prepared.

824
01:25:55,360 --> 01:26:00,880
The next thing is we have the container images and those are kind of showroom kitchens based

825
01:26:00,880 --> 01:26:06,480
on these container based on the blueprints that we have created before and a showroom

826
01:26:06,480 --> 01:26:11,120
kitchen is not connected so there there are electricity is not plugged in water is not

827
01:26:11,120 --> 01:26:14,840
not plugged in, you can't really use it.

828
01:26:14,840 --> 01:26:17,240
And a container is then essentially

829
01:26:17,240 --> 01:26:21,240
this showroom kitchen connected to everything.

830
01:26:21,240 --> 01:26:23,180
And in addition, there's a protective layer

831
01:26:23,180 --> 01:26:27,200
being put on everything so that you can work with it.

832
01:26:27,200 --> 01:26:32,600
And in the end, you remove this protective layer

833
01:26:32,600 --> 01:26:40,680
so that you still have the original container

834
01:26:40,680 --> 01:26:50,280
kind of. As we said, containers can be built to bundle all the necessary ingredients, data,

835
01:26:50,280 --> 01:26:59,400
code, environment, operating system, even though including data might be problematic,

836
01:26:59,400 --> 01:27:07,880
depending on your system. A container image is somewhat like, yeah, also like a piece

837
01:27:07,880 --> 01:27:13,000
of paper with all the operating system on it and when you run it, you put a transparent

838
01:27:13,000 --> 01:27:19,380
sheet on it to form essentially the container.

839
01:27:19,380 --> 01:27:23,520
Then that container runs and you write on that transparent sheet and do all the changes

840
01:27:23,520 --> 01:27:26,240
on this transparent sheet.

841
01:27:26,240 --> 01:27:33,200
And when you're done, you tear off that transparent sheet and you still have your original container

842
01:27:33,200 --> 01:27:37,520
and everything that was done on this transparent sheet is gone.

843
01:27:40,160 --> 01:27:45,440
And the definition files are essentially text files that contain a series of instructions

844
01:27:45,440 --> 01:27:47,320
on how to build these container images.

845
01:27:47,640 --> 01:27:53,000
So to recap here, we have three concepts.

846
01:27:53,840 --> 01:27:59,800
And first, kind of like a starting point would be the definition file.

847
01:27:59,800 --> 01:28:08,720
let's say a dockerfile or a similarity definition file and we use that definition file to create

848
01:28:08,720 --> 01:28:19,120
an image, a container image, or image for short, and that image and that definition

849
01:28:19,120 --> 01:28:27,080
file, of course, they are persistent, but then when we create a container out of that

850
01:28:27,080 --> 01:28:36,760
image, then that container is not persistent. So the container is what is actually being run,

851
01:28:37,560 --> 01:28:45,160
and when that container is stopped, it stops running, then it vanishes. But the image

852
01:28:45,800 --> 01:28:51,480
is still there on the disk. Then everything that was changed in the container vanishes, yes.

853
01:28:51,480 --> 01:29:00,440
Okay, yeah and why would you want to use these? There are two main reasons.

854
01:29:01,640 --> 01:29:07,960
One is installing a certain software is tricky or not supported on the system that you're using.

855
01:29:10,840 --> 01:29:19,960
That's very common on HPC systems. HPC systems in general have a very very

856
01:29:19,960 --> 01:29:31,480
minimalistic operating system with as little software installed as possible as to leave

857
01:29:31,480 --> 01:29:40,760
as much computational and memory available for a user to exploit and use. But that means that

858
01:29:40,760 --> 01:29:47,880
a lot of small libraries that code depends on are not there. So what you can do with a container,

859
01:29:47,880 --> 01:29:57,040
you can essentially put all the stuff in that container and run your code via that container.

860
01:29:57,040 --> 01:30:02,120
The other option is that you want to make sure that whoever is using the code uses it

861
01:30:02,120 --> 01:30:06,100
in the same kind of environment or same environment as you.

862
01:30:06,100 --> 01:30:11,720
And then you can provide them an image of your container because then you essentially

863
01:30:11,720 --> 01:30:24,040
have provided the whole environment. There might be a problem if people are using different

864
01:30:24,040 --> 01:30:31,440
architectures than you and there might be a problem if people are using a different

865
01:30:31,440 --> 01:30:34,080
operating system than use.

866
01:30:34,080 --> 01:30:42,960
There are, for, you can run Linux containers on Windows.

867
01:30:42,960 --> 01:30:44,720
That works reasonably well, because Windows

868
01:30:44,720 --> 01:30:46,760
has a Windows subsystem for Linux.

869
01:30:46,760 --> 01:30:49,760
But you can't really run Windows containers on Linux,

870
01:30:49,760 --> 01:30:51,360
unfortunately.

871
01:30:51,360 --> 01:30:56,200
So one way it works, the other, unfortunately, doesn't.

872
01:30:56,200 --> 01:31:04,360
Yeah, so the shipping the machine is a bit of an exaggeration.

873
01:31:07,080 --> 01:31:13,000
So let's have a look at one of these container recipes.

874
01:31:14,360 --> 01:31:19,640
This is a Singularity definition file and there's a link to the reference if you want to look into

875
01:31:19,640 --> 01:31:26,760
more detail. Singularity commonly starts with an information on where this is coming from.

876
01:31:29,320 --> 01:31:37,560
Singularity can use docker images to base your new images on. If it says a bootstrap,

877
01:31:37,560 --> 01:31:42,520
essentially indicates, okay, this is where it's coming from. This comes from the docker repository

878
01:31:42,520 --> 01:31:51,200
And from is the statement on what is the original image that we are using as a base for what

879
01:31:51,200 --> 01:31:53,240
we are doing here.

880
01:31:53,240 --> 01:31:58,440
And that's commonly some operating system or some programming language that you are

881
01:31:58,440 --> 01:32:06,320
using where essentially all the packages that you need for that base operating system or

882
01:32:06,320 --> 01:32:10,080
base programming language are already installed.

883
01:32:10,080 --> 01:32:13,940
And then you can start to do more things with it.

884
01:32:13,940 --> 01:32:22,340
And post is then essentially what happens after that basic installation.

885
01:32:22,340 --> 01:32:28,500
So what changes do we need to do to our system to make it do what we want the container to

886
01:32:28,500 --> 01:32:29,500
do?

887
01:32:29,500 --> 01:32:36,260
And, at least on any Linux or on any Ubuntu, this commonly starts with apt-get y-update,

888
01:32:36,260 --> 01:32:42,380
So just get the latest updates, which can in itself be a bit of a problem if you want

889
01:32:42,380 --> 01:32:44,020
to redo that.

890
01:32:44,020 --> 01:32:49,760
And then install the packages that we need.

891
01:32:49,760 --> 01:32:51,920
You can set some environment variables.

892
01:32:51,920 --> 01:32:55,160
You can potentially also copy over files and so on.

893
01:32:55,160 --> 01:33:01,080
And then you have a run script, which is the final command that is being run when this

894
01:33:01,080 --> 01:33:04,040
container is being run.

895
01:33:04,040 --> 01:33:08,720
So this container would run date, pipe to kawase, pipe to loghead.

896
01:33:08,720 --> 01:33:10,400
That's what this container would be doing.

897
01:33:10,400 --> 01:33:15,640
It's not very useful, but it's just an example.

898
01:33:15,640 --> 01:33:18,160
Yes.

899
01:33:18,160 --> 01:33:19,160
And yeah.

900
01:33:19,160 --> 01:33:29,480
And so does every image that we build, do they all run a script or?

901
01:33:29,480 --> 01:33:30,480
No.

902
01:33:30,480 --> 01:33:32,240
You don't necessarily need to run a script.

903
01:33:32,240 --> 01:33:39,980
You can also have a container that essentially doesn't do anything and just provides an environment.

904
01:33:39,980 --> 01:33:44,240
Or the way you need to tell it, okay, what do you want to execute in the container?

905
01:33:44,240 --> 01:33:45,920
Okay.

906
01:33:45,920 --> 01:33:52,960
So then it's kind of like a generic platform to run whatever script you want in that specific

907
01:33:52,960 --> 01:33:53,960
environment.

908
01:33:53,960 --> 01:33:54,960
Yes.

909
01:33:54,960 --> 01:33:55,960
Okay.

910
01:33:55,960 --> 01:34:04,920
different container platforms. There's Docker and Podman, which is more of a, which I would

911
01:34:04,920 --> 01:34:11,680
say more of a single user, particularly Docker is more of a single, or a container for a

912
01:34:11,680 --> 01:34:18,760
single user system, because Docker has the disadvantage that it essentially needs to

913
01:34:18,760 --> 01:34:29,880
to have administrative or pseudo rights and it will run essentially as a super user so

914
01:34:29,880 --> 01:34:37,920
it can do everything on your system. Singularity and Obtainer are pretty popular on high-performance

915
01:34:37,920 --> 01:34:43,120
computing systems because they essentially get rid of this requirement of running it

916
01:34:43,120 --> 01:34:53,740
as a super user, and you can still run these containers.

917
01:34:53,740 --> 01:34:56,820
Potman is very close to Docker.

918
01:34:56,820 --> 01:35:01,460
And yes, what's the default container engine

919
01:35:01,460 --> 01:35:04,620
on Red Hat systems, for example?

920
01:35:04,620 --> 01:35:11,420
So if you have a single machine, or like a single user,

921
01:35:11,420 --> 01:35:13,340
Or if you have a single machine, yeah.

922
01:35:13,340 --> 01:35:17,620
If you have a single machine, you can know super user rights.

923
01:35:17,620 --> 01:35:19,900
You can use singularity obtain apartment.

924
01:35:19,900 --> 01:35:22,420
If you have super user rights, you can use Docker.

925
01:35:22,420 --> 01:35:25,500
If you don't have super user rights, you can't use Docker.

926
01:35:25,500 --> 01:35:29,380
It's pretty simple.

927
01:35:29,380 --> 01:35:34,700
Someone can add you to the Docker users,

928
01:35:34,700 --> 01:35:37,900
but that would essentially give you super user rights.

929
01:35:37,900 --> 01:35:43,940
So they can as well just give you administrative rights then.

930
01:35:43,940 --> 01:35:46,340
So pros and cons of containers.

931
01:35:46,340 --> 01:35:49,260
Well, they allow you to move workflows

932
01:35:49,260 --> 01:35:54,260
across different platforms with the constraints

933
01:35:54,260 --> 01:35:56,740
that we mentioned earlier.

934
01:35:56,740 --> 01:35:59,740
They can definitely solve the works on my machine situation

935
01:35:59,740 --> 01:36:04,460
because you essentially ship the operating system

936
01:36:04,460 --> 01:36:06,300
or the underlying libraries.

937
01:36:09,300 --> 01:36:12,100
For software with many dependencies,

938
01:36:12,100 --> 01:36:14,020
they can offer the only way to preserve

939
01:36:14,020 --> 01:36:16,580
the computational environment future of usability.

940
01:36:18,220 --> 01:36:19,980
What we had previously,

941
01:36:19,980 --> 01:36:22,900
where this Konda environment had things,

942
01:36:22,900 --> 01:36:25,780
now we can create this image

943
01:36:25,780 --> 01:36:27,100
and we can actually ship this image

944
01:36:27,100 --> 01:36:29,620
because that image, regardless on whether

945
01:36:29,620 --> 01:36:33,860
the repositories are no longer in the,

946
01:36:33,860 --> 01:36:37,160
or the repositories no longer have these versions,

947
01:36:37,160 --> 01:36:39,080
they are in the image.

948
01:36:39,080 --> 01:36:41,760
If the image is created, they are in the image.

949
01:36:41,760 --> 01:36:44,240
So for reproducibility, you need the image.

950
01:36:44,240 --> 01:36:46,560
You don't necessarily need the definition file,

951
01:36:46,560 --> 01:36:49,860
but that is very, very useful to reproduce the image.

952
01:36:50,800 --> 01:36:55,120
But if you want to have it reproducible,

953
01:36:55,120 --> 01:36:56,860
you need to provide that image.

954
01:36:58,420 --> 01:37:01,440
It's also a mechanism to send the computer to the data

955
01:37:01,440 --> 01:37:07,040
your data set is either too large to transfer or if when your data set is in a secure environment

956
01:37:07,040 --> 01:37:14,160
and you just can't, you don't have an internet access so you can't just install conda packages

957
01:37:14,160 --> 01:37:19,520
or whatever but you can give the image file to the system administrator and they will put that

958
01:37:19,520 --> 01:37:25,040
image file onto that computer and then you can run the tools that your image provides.

959
01:37:25,040 --> 01:37:35,720
It's a further set of separation where you can install software into a file, so that

960
01:37:35,720 --> 01:37:41,920
image file, instead of onto your computer, separating again or essentially meaning that

961
01:37:41,920 --> 01:37:47,400
you don't have to change your computer setup to install something.

962
01:37:47,400 --> 01:37:53,720
There are, of course, also some drawbacks because containers can be used to hide away

963
01:37:53,720 --> 01:37:59,720
software installation problems and which should normally have been solved by better development

964
01:37:59,720 --> 01:38:06,440
practices. So yeah, it's too difficult to install. Yeah, we don't make the installation easier,

965
01:38:06,440 --> 01:38:10,840
which would be the right thing to do. We'll just provide a docker image so that people can use it.

966
01:38:11,640 --> 01:38:18,840
Yeah. You can run into the instead of works on my machine works only in this container,

967
01:38:18,840 --> 01:38:24,160
container, which again leads to the same question, why does it only work in this container?

968
01:38:24,160 --> 01:38:28,240
What's in this container that makes it possible?

969
01:38:28,240 --> 01:38:35,520
And if that is a specific version of a normally available software, then yeah, there might

970
01:38:35,520 --> 01:38:39,200
be problems with what you have actually.

971
01:38:39,200 --> 01:38:45,200
They can and are difficult and are somewhat difficult to modify.

972
01:38:45,200 --> 01:38:49,320
depending on what you package in there, they can become very large.

973
01:38:49,760 --> 01:38:55,680
So every bit of data that you would put into a container, that's why I said

974
01:38:56,480 --> 01:39:00,640
shipping the data or putting data into a container is a questionable thing,

975
01:39:01,440 --> 01:39:05,360
that will make that container larger.

976
01:39:05,360 --> 01:39:09,840
For example, if you have large language models, you don't really want to put

977
01:39:09,840 --> 01:39:14,840
those large language models into a container because you will just increase

978
01:39:14,840 --> 01:39:20,760
container size a lot and if you use that model in multiple different containers, imagine a 40

979
01:39:20,760 --> 01:39:28,600
40 gigabyte model and now all your containers are 40 gigabyte in size. Instead what you can do is

980
01:39:28,600 --> 01:39:37,560
you can have that image elsewhere or have the model elsewhere and load it into the container

981
01:39:37,560 --> 01:39:42,920
when it's run. That makes it a bit less reproducible because you're not chipping the

982
01:39:42,920 --> 01:39:46,840
data, but overall it's, I would say, the better choice.

983
01:39:48,200 --> 01:39:56,920
Yeah, so then we are assuming that hopefully the language model will be distributed

984
01:39:56,920 --> 01:40:00,760
in some other centralized place, for example, Hackingface or something.

985
01:40:01,320 --> 01:40:08,600
Yes, so there are different places where containers can be found.

986
01:40:08,600 --> 01:40:16,160
Docker Hub is very popular, Kuai is also quite popular, GitHub and GitLab container registries

987
01:40:16,160 --> 01:40:19,760
can also be used, or even Zenodo.

988
01:40:19,760 --> 01:40:26,940
So there was this warning about only use official and trusted images.

989
01:40:26,940 --> 01:40:33,840
So what is your definition for an official and trusted image?

990
01:40:33,840 --> 01:40:35,840
For me, it's the same as any other software

991
01:40:35,840 --> 01:40:38,260
that I use from the internet.

992
01:40:38,260 --> 01:40:41,020
If I want to use a container,

993
01:40:41,020 --> 01:40:43,660
it should be coming from the essentially creators

994
01:40:43,660 --> 01:40:45,700
of the software that I want to use.

995
01:40:46,660 --> 01:40:48,940
Not from some third party,

996
01:40:48,940 --> 01:40:53,180
whatever that provides me WinZip or whatever.

997
01:40:56,020 --> 01:40:57,020
Or if I want to have PuTTY,

998
01:40:57,020 --> 01:40:58,460
I'm going to the PuTTY webpage

999
01:40:58,460 --> 01:41:00,380
and download it from the PuTTY webpage

1000
01:41:00,380 --> 01:41:02,480
and not from some third party

1001
01:41:02,480 --> 01:41:04,360
where I don't know if this is actually put here

1002
01:41:04,360 --> 01:41:07,040
or just a Trojan that's trying to,

1003
01:41:07,040 --> 01:41:09,320
that I've been storing on my system.

1004
01:41:09,320 --> 01:41:14,320
Yeah, so if I want to use an image of Ubuntu,

1005
01:41:15,760 --> 01:41:20,760
then I will use an image provided by the,

1006
01:41:21,000 --> 01:41:23,880
what is it, the Linux Foundation

1007
01:41:23,880 --> 01:41:28,380
or whoever is responsible for Ubuntu development.

1008
01:41:28,380 --> 01:41:31,040
And similar to what we had earlier

1009
01:41:31,040 --> 01:41:36,160
the environments or the dependencies. We also here now have a

1010
01:41:37,680 --> 01:41:43,680
dockerfile and I want to quickly go through the dockerfile to see what is actually

1011
01:41:44,800 --> 01:41:49,680
how the dockerfile can be reproduced or if there are problems with this dockerfile

1012
01:41:49,680 --> 01:41:56,240
or reproducibility. One mention right at the beginning if you really want

1013
01:41:56,240 --> 01:41:59,920
to want it to be reproducible provide the image not just the dockerfile.

1014
01:42:01,040 --> 01:42:07,760
because only the image is what you actually used and the Dockerfile is only the way how this image

1015
01:42:07,760 --> 01:42:14,880
should be generated, but we'll mention why this is a bit problematic. So we have the

1016
01:42:14,880 --> 01:42:21,280
or the singularity file here. So again, we have a singularity that depends on Docker and it starts

1017
01:42:21,280 --> 01:42:30,080
from Ubuntu latest. Is that a good idea, Timo? Yeah, that's immediately a problem that the

1018
01:42:30,080 --> 01:42:38,000
Ubuntu latest is dependent on when you are building the image.

1019
01:42:38,000 --> 01:42:42,400
Yeah, three years ago, this was Ubuntu 21 or something.

1020
01:42:42,400 --> 01:42:44,800
Nowadays, it's 24 or something.

1021
01:42:44,800 --> 01:42:48,400
So yeah, it's building on a completely, not completely,

1022
01:42:48,400 --> 01:42:50,160
but a different operating system.

1023
01:42:50,160 --> 01:42:52,160
So this would definitely not be the same

1024
01:42:52,160 --> 01:42:54,000
if I run this now than three years ago.

1025
01:42:55,520 --> 01:42:58,400
Then we start with our post, so with our installations.

1026
01:42:58,400 --> 01:43:07,280
we export an environment for the, or an environment variable for the installation time,

1027
01:43:08,880 --> 01:43:17,840
we upgrade update as we mentioned before, we upgrade install with a couple of libraries

1028
01:43:17,840 --> 01:43:24,960
and this already, this is where this problem also comes back in. These libraries can have

1029
01:43:24,960 --> 01:43:30,240
changed. Even if we have a fixed version, these can change depending on whether the default

1030
01:43:30,240 --> 01:43:40,320
libraries have changed over time. Then this is some cleanup, which is fine. We create a virtual

1031
01:43:40,320 --> 01:43:50,320
environment. We upgrade pip and, well, install some requirements.txt. That, of course, depends

1032
01:43:50,320 --> 01:43:55,680
now a lot on the requirements.txt, how well defined the versions are in there,

1033
01:43:55,680 --> 01:43:59,600
but if they are not well defined, we again can run into easy problems.

1034
01:44:02,480 --> 01:44:06,080
This singularity file also has an additional section with files,

1035
01:44:06,080 --> 01:44:10,480
which indicates what files are copied over into the image.

1036
01:44:12,240 --> 01:44:16,880
So it copies over the requirements.txt and I would assume that this requirements.txt

1037
01:44:16,880 --> 01:44:21,440
is in the same repository as this file,

1038
01:44:21,440 --> 01:44:22,960
the same with the app.py.

1039
01:44:24,080 --> 01:44:25,860
So those files we probably have.

1040
01:44:27,100 --> 01:44:29,680
And then it copies something from home, myself data

1041
01:44:29,680 --> 01:44:30,680
into app data.

1042
01:44:32,880 --> 01:44:37,600
Yeah, home, myself is not something that we have.

1043
01:44:37,600 --> 01:44:42,600
So this is stuff that is probably not even in the repository

1044
01:44:43,320 --> 01:44:45,560
so we don't know what that is.

1045
01:44:45,560 --> 01:44:48,400
In that case, it's probably the data

1046
01:44:48,400 --> 01:44:50,200
that is to be used by the app.

1047
01:44:50,200 --> 01:44:53,760
And we said that we want to reuse it with our data.

1048
01:44:53,760 --> 01:44:56,200
So we can probably replace it with our data here.

1049
01:44:56,200 --> 01:45:01,320
But yeah, that's not very helpful.

1050
01:45:01,320 --> 01:45:05,000
And this is then a real problem, because this

1051
01:45:05,000 --> 01:45:08,880
has some fancy lip where we have no idea what that is.

1052
01:45:08,880 --> 01:45:13,680
And yeah, puts it into the libraries of this container.

1053
01:45:13,680 --> 01:45:22,680
So this makes the whole image not reproducible or even

1054
01:45:22,680 --> 01:45:26,320
not reusable, not reproducible.

1055
01:45:26,320 --> 01:45:31,360
So to recap the file section here,

1056
01:45:31,360 --> 01:45:35,880
so I think I read the instructions again.

1057
01:45:35,880 --> 01:45:43,240
And yeah, it doesn't say that this singularity file

1058
01:45:43,240 --> 01:45:51,160
is definition file is in a repo, but yeah, we are assuming that it's in a Git repo.

1059
01:45:51,800 --> 01:46:00,120
And there is in the Git repo with this definition file, there is the application code,

1060
01:46:00,120 --> 01:46:11,960
which is the app.py. And that we have a requirements text file there in that Git repo.

1061
01:46:11,960 --> 01:46:20,840
But like we talked earlier, then data is not usually integrable, especially if it's big data.

1062
01:46:22,680 --> 01:46:31,800
And so the first requirements line and the app line are fine.

1063
01:46:31,800 --> 01:46:45,880
the copy data line is quite iffy, and the last line highlighted now with the fancy lip is like

1064
01:46:45,880 --> 01:46:56,200
a definite no-no. These are the problems that you have with Docker definition files, which means

1065
01:46:56,200 --> 01:47:03,000
that essentially if you want to have your Docker file reproduce or your code reproducible by

1066
01:47:03,000 --> 01:47:09,640
providing in Docker, provide the image. Yes, it will be potentially big, but it's the only way

1067
01:47:09,640 --> 01:47:18,280
how you can actually have the environment that you used saved. And not to confuse people

1068
01:47:18,280 --> 01:47:23,960
any more than necessary, this is a singularity definition, right? Yes, sorry. Not Docker

1069
01:47:23,960 --> 01:47:29,400
Definition point. So, key points here is containers can be helpful if complex setups are needed

1070
01:47:29,400 --> 01:47:36,520
to running a specific software and they can also be helpful for prototyping without messing up

1071
01:47:36,520 --> 01:47:41,560
your own computing environment or to run software that requires a different operating system than

1072
01:47:41,560 --> 01:47:50,120
your own. Depends a bit. Okay, so we are coming towards the end and the question is where to

1073
01:47:50,120 --> 01:47:57,480
go from here and what to take away from this. So I think for me we have shown you workflow tools

1074
01:47:57,480 --> 01:48:03,880
and how and where to use it and we have hopefully given you an idea where they will make sense in

1075
01:48:03,880 --> 01:48:10,200
the future. In many cases these workflow tools are probably not needed and a proper script with

1076
01:48:10,200 --> 01:48:17,160
all the information is sufficient but you probably want to consider using them when you are processing

1077
01:48:17,160 --> 01:48:24,600
many files with many steps, if your steps or files may change, if you're still collecting

1078
01:48:24,600 --> 01:48:33,320
your input data, or if your main script connecting your steps starts to get very long, because then

1079
01:48:33,320 --> 01:48:39,320
it starts to get unreadable essentially and you start to want to make different parts of it.

1080
01:48:39,320 --> 01:48:48,160
it. Containers seem amazing, but do I have actual use for them? Well, maybe not, but

1081
01:48:48,160 --> 01:48:52,880
knowing that you can use them is already pretty useful, that you can run Linux tools on your

1082
01:48:52,880 --> 01:48:58,560
Windows computer, you can run different versions of the same software on your computer, that

1083
01:48:58,560 --> 01:49:04,000
you can follow the easy installation instructions for an operating system that is not your own,

1084
01:49:04,000 --> 01:49:09,760
you get a fully configured environment instead of installing just a tool and that you can share

1085
01:49:09,760 --> 01:49:14,480
your setup and configurations with others. So yeah, they can be very beneficial, but

1086
01:49:15,600 --> 01:49:23,040
as with workflow tools as well, you will need some additional read up on how to use them.

1087
01:49:24,000 --> 01:49:30,560
This was mainly to present that they are an option. And what we think is important for every

1088
01:49:30,560 --> 01:49:35,840
project that you create. Have a clear structure for your project. Have a clear file structure,

1089
01:49:35,840 --> 01:49:42,400
clear directory so that you find things again. Record your workflow and write it down in a script

1090
01:49:42,400 --> 01:49:50,000
file or if it's complex enough with a workflow manager. Create a dependency list and keep it

1091
01:49:50,000 --> 01:49:59,440
updated. Optimally in an environment file because that makes reinstallations a lot easier and makes

1092
01:49:59,440 --> 01:50:06,720
it a lot easier for others to follow what you have done. So software packages and their versions.

1093
01:50:06,720 --> 01:50:13,200
Yes. And consider the possibility that someone, maybe you, may want to reproduce your work.

1094
01:50:15,600 --> 01:50:21,680
Can you do something small to make it easier? Write down some more instructions or similar

1095
01:50:21,680 --> 01:50:28,320
things. If you have ideas what you can do in the future but no time, you can add an issue to the

1096
01:50:28,320 --> 01:50:34,720
repository that you're creating your code on and maybe someone else can help or you in a few years

1097
01:50:34,720 --> 01:50:40,000
time notice oh well i had this idea back then maybe i maybe now i have a bit of time i can

1098
01:50:40,000 --> 01:50:48,640
write i can actually implement that yeah so as i have mentioned a few times not everything in

1099
01:50:48,640 --> 01:50:54,240
this lesson it might be useful right now but it's good to know that these things exist if you ever

1100
01:50:54,240 --> 01:50:58,480
get into the situation where you would require such a solution and you can come either back to

1101
01:50:58,480 --> 01:51:05,840
these documentation documents or you can go to the of course to the respective documentation of

1102
01:51:05,840 --> 01:51:13,200
the individual software to see okay how do I actually use them. And caring about reproducibility

1103
01:51:14,000 --> 01:51:20,880
makes work easier for the next person that's working on the project and as likely as not

1104
01:51:20,880 --> 01:51:24,040
but that will be you.

1105
01:51:24,040 --> 01:51:26,360
So that's, I think, it for us.

1106
01:51:26,360 --> 01:51:28,720
[name], do you want to add anything?

1107
01:51:28,720 --> 01:51:32,600
No, good recap there.

1108
01:51:32,600 --> 01:51:34,320
OK, then.

1109
01:51:34,320 --> 01:51:36,560
I would thank you, and.

1110
01:51:36,560 --> 01:51:37,600
Excellent.

1111
01:51:37,600 --> 01:51:39,240
So.

1112
01:51:39,240 --> 01:51:41,480
I think we almost still have time.

1113
01:51:41,480 --> 01:51:42,280
Exactly.

1114
01:51:42,280 --> 01:51:45,600
Thank you, [name], and thank you, [name].

1115
01:51:45,600 --> 01:51:50,600
And I don't think there's anything to lift.

1116
01:51:50,600 --> 01:52:01,000
We still have four minutes. Should we consider some of the questions in the notes, but otherwise?

1117
01:52:01,000 --> 01:52:07,040
I'm looking at the notes and there is a comment about the future viewpoint is really important.

1118
01:52:07,040 --> 01:52:18,880
And I agree that I don't think it can be emphasized too much, that it is most probably the person

1119
01:52:18,880 --> 01:52:28,000
looking at your code later is you, yourself or your experiment setup and all these things

1120
01:52:28,640 --> 01:52:36,000
that we have discussed they may seem at first that okay this is again new learning curves

1121
01:52:37,520 --> 01:52:44,640
they will take time to get into but they will save you time and energy in the end

1122
01:52:44,640 --> 01:52:49,640
and also they help the scientific community at large

1123
01:52:51,080 --> 01:52:54,160
because you are making things more reproducible.

1124
01:52:58,200 --> 01:53:01,720
Yes, so we still have a couple of minutes,

1125
01:53:01,720 --> 01:53:03,560
but of course we can also end it here

1126
01:53:03,560 --> 01:53:05,480
if there's nothing to add.

1127
01:53:05,480 --> 01:53:09,120
I just reminded that now we will have one hour lunch break.

1128
01:53:09,120 --> 01:53:12,360
And after that, we will talk about social coding.

1129
01:53:12,360 --> 01:53:20,120
will be me and [name] talking about basically the social aspects of coding with other people,

1130
01:53:20,120 --> 01:53:26,040
sharing repositories, and that comes of course with some kind of legal requirements. And

1131
01:53:26,040 --> 01:53:35,040
so we will talk about licenses for code and software. All this in about one hour. So I

1132
01:53:35,040 --> 01:53:40,880
thank you, [name] and [name], for the great discussions. And I thank everyone for the

1133
01:53:40,880 --> 01:53:47,520
comments on the notes. You can keep on writing comments and answers. And so we see each other

1134
01:53:47,520 --> 01:53:52,560
in one hour. Thank you. Bye. Bye. Bye.

1135
01:54:10,880 --> 01:54:12,940
you

1136
01:54:40,880 --> 01:54:42,940
you

1137
01:55:10,880 --> 01:55:12,940
you

1138
01:55:40,880 --> 01:55:42,940
you

1139
01:56:10,880 --> 01:56:12,940
you

1140
01:56:40,880 --> 01:56:42,940
you

1141
01:57:10,880 --> 01:57:12,940
you

1142
01:57:40,880 --> 01:57:42,940
you

1143
01:58:10,880 --> 01:58:12,940
you

1144
01:58:40,880 --> 01:58:42,940
you

1145
01:59:10,880 --> 01:59:12,940
you

1146
01:59:40,880 --> 01:59:42,940
you

1147
02:00:10,880 --> 02:00:12,940
you

1148
02:00:40,880 --> 02:00:42,940
you

1149
02:01:10,880 --> 02:01:12,940
you

1150
02:01:40,880 --> 02:01:42,940
you

1151
02:02:10,880 --> 02:02:12,940
you

1152
02:02:40,880 --> 02:02:42,940
you

1153
02:03:10,880 --> 02:03:12,940
you

1154
02:03:40,880 --> 02:03:42,940
you

1155
02:04:10,880 --> 02:04:12,940
you

1156
02:04:40,880 --> 02:04:42,940
you

1157
02:05:10,880 --> 02:05:12,940
you

1158
02:05:40,880 --> 02:05:42,940
you

1159
02:06:10,880 --> 02:06:12,940
you

1160
02:06:40,880 --> 02:06:42,940
you

1161
02:07:10,880 --> 02:07:12,940
you

1162
02:07:40,880 --> 02:07:42,940
you

1163
02:08:10,880 --> 02:08:12,940
you

1164
02:08:40,880 --> 02:08:42,940
you

1165
02:09:10,880 --> 02:09:12,940
you

1166
02:09:40,880 --> 02:09:42,940
you

1167
02:10:10,880 --> 02:10:12,940
you

1168
02:10:40,880 --> 02:10:42,940
you

1169
02:11:10,880 --> 02:11:12,940
you

1170
02:11:40,880 --> 02:11:42,940
you

1171
02:12:10,880 --> 02:12:12,940
you

1172
02:12:40,880 --> 02:12:42,940
you

1173
02:13:10,880 --> 02:13:12,940
you

1174
02:13:40,880 --> 02:13:42,940
you

1175
02:14:10,880 --> 02:14:12,940
you

1176
02:14:40,880 --> 02:14:42,940
you

1177
02:15:10,880 --> 02:15:12,940
you

1178
02:15:40,880 --> 02:15:42,940
you

1179
02:16:10,880 --> 02:16:12,940
you

1180
02:16:40,880 --> 02:16:42,940
you

1181
02:17:10,880 --> 02:17:12,940
you

1182
02:17:40,880 --> 02:17:42,940
you

1183
02:18:10,880 --> 02:18:12,940
you

1184
02:18:40,880 --> 02:18:42,940
you

1185
02:19:10,880 --> 02:19:12,940
you

1186
02:19:40,880 --> 02:19:42,940
you

1187
02:20:10,880 --> 02:20:12,940
you

1188
02:20:40,880 --> 02:20:42,940
you

1189
02:21:10,880 --> 02:21:12,940
you

1190
02:21:40,880 --> 02:21:42,940
you

1191
02:22:10,880 --> 02:22:12,940
you

1192
02:22:40,880 --> 02:22:42,940
you

1193
02:23:10,880 --> 02:23:12,940
you

1194
02:23:40,880 --> 02:23:42,940
you

1195
02:24:10,880 --> 02:24:12,940
you

1196
02:24:40,880 --> 02:24:42,940
you

1197
02:25:10,880 --> 02:25:12,940
you

1198
02:25:40,880 --> 02:25:42,940
you

1199
02:26:10,880 --> 02:26:12,940
you

1200
02:26:40,880 --> 02:26:42,940
you

1201
02:27:10,880 --> 02:27:12,940
you

1202
02:27:40,880 --> 02:27:42,940
you

1203
02:28:10,880 --> 02:28:12,940
you

1204
02:28:40,880 --> 02:28:42,940
you

1205
02:29:10,880 --> 02:29:12,940
you

1206
02:29:40,880 --> 02:29:42,940
you

1207
02:30:10,880 --> 02:30:12,940
you

1208
02:30:40,880 --> 02:30:42,940
you

1209
02:31:10,880 --> 02:31:12,940
you

1210
02:31:40,880 --> 02:31:42,940
you

1211
02:32:10,880 --> 02:32:12,940
you

1212
02:32:40,880 --> 02:32:42,940
you

1213
02:33:10,880 --> 02:33:12,940
you

1214
02:33:40,880 --> 02:33:42,940
you

1215
02:34:10,880 --> 02:34:12,940
you

1216
02:34:40,880 --> 02:34:42,940
you

1217
02:35:10,880 --> 02:35:12,940
you

1218
02:35:40,880 --> 02:35:42,940
you

1219
02:36:10,880 --> 02:36:12,940
you

1220
02:36:40,880 --> 02:36:42,940
you

1221
02:37:10,880 --> 02:37:12,940
you

1222
02:37:40,880 --> 02:37:42,940
you

1223
02:38:10,880 --> 02:38:12,940
you

1224
02:38:40,880 --> 02:38:42,940
you

1225
02:39:10,880 --> 02:39:12,940
you

1226
02:39:40,880 --> 02:39:42,940
you

1227
02:40:10,880 --> 02:40:12,940
you

1228
02:40:40,880 --> 02:40:42,940
you

1229
02:41:10,880 --> 02:41:12,940
you

1230
02:41:40,880 --> 02:41:42,940
you

1231
02:42:10,880 --> 02:42:12,940
you

1232
02:42:40,880 --> 02:42:42,940
you

1233
02:43:10,880 --> 02:43:12,940
you

1234
02:43:40,880 --> 02:43:42,940
you

1235
02:44:10,880 --> 02:44:12,940
you

1236
02:44:40,880 --> 02:44:42,940
you

1237
02:45:10,880 --> 02:45:12,940
you

1238
02:45:40,880 --> 02:45:42,940
you

1239
02:46:10,880 --> 02:46:12,940
you

1240
02:46:40,880 --> 02:46:42,940
you

1241
02:47:10,880 --> 02:47:12,940
you

1242
02:47:40,880 --> 02:47:42,940
you

1243
02:48:10,880 --> 02:48:12,940
you

1244
02:48:40,880 --> 02:48:42,940
you

1245
02:49:10,880 --> 02:49:12,940
you

1246
02:49:40,880 --> 02:49:42,940
you

1247
02:50:10,880 --> 02:50:12,940
you

1248
02:50:40,880 --> 02:50:42,940
you

1249
02:51:10,880 --> 02:51:12,940
you

1250
02:51:40,880 --> 02:51:42,940
you

1251
02:52:10,880 --> 02:52:12,940
you

1252
02:52:40,880 --> 02:52:42,940
you

1253
02:53:10,880 --> 02:53:12,940
you

1254
02:53:40,880 --> 02:53:42,940
you

1255
02:54:10,880 --> 02:54:12,940
you

1256
02:54:40,880 --> 02:54:56,880
Hello. So we are back online. Quickly check with the people in the chat if they can hear

1257
02:54:56,880 --> 02:55:06,560
us and see us. Excellent. So everything is working. So we still have it's still our day

1258
02:55:06,560 --> 02:55:15,340
day four. And we are still going to cover topics somewhat related to the reproducibility

1259
02:55:15,340 --> 02:55:24,680
that was covered in the morning by [name] and [name]. And now here with me there is [name]

1260
02:55:24,680 --> 02:55:29,520
who works with me at Aalto University. Hello, [name].

1261
02:55:29,520 --> 02:55:35,280
Hello everyone. I'm [name], one of the RSEs at Aalto University. Happy to be here.

1262
02:55:35,280 --> 02:55:43,580
Yesterday was a special RSE, Research Software Engineers Day, because basically, except me,

1263
02:55:43,580 --> 02:55:52,060
all the others were Alto RSEs. RSE is actually a great profession if you want to stay in research

1264
02:55:52,060 --> 02:55:58,260
but not exactly becoming, you know, a professor or whatever you will become. But anyway, to

1265
02:55:58,260 --> 02:56:05,900
To the topic of this afternoon, it will be about social coding, this lesson used to be

1266
02:56:05,900 --> 02:56:13,500
called licensing, software licensing specifically, as you might know when you release something

1267
02:56:13,500 --> 02:56:19,400
you want to attach a license and that of course doesn't even, it's not just limited to software

1268
02:56:19,400 --> 02:56:25,380
because honestly anything you basically create, whether you want it or not, it comes with

1269
02:56:25,380 --> 02:56:31,700
license and the lack of license basically means copyright but sometimes you might not even know

1270
02:56:31,700 --> 02:56:37,380
that let's say what you write in social media has a certain license so that the owner of the

1271
02:56:37,380 --> 02:56:44,180
social media platform can do almost whatever they want with your content but today we will focus on

1272
02:56:44,180 --> 02:56:52,340
these coding aspects. So [name], what do you feel about social coding and open software?

1273
02:56:52,340 --> 02:56:59,940
I think it's a very important aspect because a collaboration happens all the time and you should

1274
02:56:59,940 --> 02:57:06,420
be able to understand the basics of it and how to share your code and what kind of licenses to add it

1275
02:57:07,060 --> 02:57:13,460
and to take care of all of these things. I remember reading this blog post from

1276
02:57:15,140 --> 02:57:20,500
a random blog, I don't remember the name, but it was about Google Docs and about the licensing

1277
02:57:20,500 --> 02:57:27,140
I think that you probably agree and you are giving almost the ownership of the work that

1278
02:57:27,140 --> 02:57:32,780
you are doing on Google Docs to Google because you don't read the licenses and you don't

1279
02:57:32,780 --> 02:57:33,780
take it seriously.

1280
02:57:33,780 --> 02:57:40,820
So I think it's very important to know about the licenses and how to, yeah, how to manage

1281
02:57:40,820 --> 02:57:41,820
them.

1282
02:57:41,820 --> 02:57:42,820
Yeah.

1283
02:57:42,820 --> 02:57:43,820
I agree.

1284
02:57:43,820 --> 02:57:49,940
And here for some motivational example that you find some great code, but then you are

1285
02:57:49,940 --> 02:57:55,700
unsure, can you actually, you know, use it? Can you actually cite them? Or you need to

1286
02:57:55,700 --> 02:58:01,540
modify the code a little bit, as we will call it later, like remixing, maybe, even with

1287
02:58:01,540 --> 02:58:08,100
some data. But then what happens, especially in academic journals, that they require you

1288
02:58:08,100 --> 02:58:13,380
these days to also publish the code. And the reason is not just the reproducibility reason

1289
02:58:13,380 --> 02:58:19,460
that we heard from the first part of today's, but it's also related to basically the research

1290
02:58:19,460 --> 02:58:24,860
integrity, the transparency principle of research, that you should be transparent in all the

1291
02:58:24,860 --> 02:58:32,300
steps of the scientific, of the research process. And being transparent with the code is getting

1292
02:58:32,300 --> 02:58:37,660
more and more popular. So you will see these type of code availability statements that

1293
02:58:37,660 --> 02:58:42,620
you need to attach to your paper that you submit or data availability statements for

1294
02:58:42,620 --> 02:58:47,860
the data part. And when it's time to write this statement, you need to basically have

1295
02:58:47,860 --> 02:58:52,820
a license to your code, attached to your code and attached to your data.

1296
02:58:52,820 --> 02:58:53,820
Yes.

1297
02:58:53,820 --> 02:59:01,820
So let's, hopefully this was motivational enough, all I'm saying is keep in a look at

1298
02:59:01,820 --> 02:59:08,620
the notes document, so please, if there's any questions and if you feel writing any

1299
02:59:08,620 --> 02:59:14,700
comment related to the topic, just write to the notes and then also please let me know

1300
02:59:14,700 --> 02:59:18,660
if there's anything interesting to highlight.

1301
02:59:18,660 --> 02:59:21,660
So as I mentioned earlier, at the beginning,

1302
02:59:21,660 --> 02:59:25,580
this lecture used to be called software licensing,

1303
02:59:25,580 --> 02:59:28,460
but then it expanded into social coding.

1304
02:59:28,460 --> 02:59:32,460
And the reason is that coding is not just something

1305
02:59:32,460 --> 02:59:35,180
that happens in isolation,

1306
02:59:36,300 --> 02:59:40,140
that especially in the topic that we are discussing here,

1307
02:59:40,140 --> 02:59:43,100
especially in the topic of research,

1308
02:59:43,100 --> 02:59:47,220
at some point you are asked to share the code with others.

1309
02:59:47,220 --> 02:59:50,540
And as we've seen during the first lecture

1310
02:59:50,540 --> 02:59:52,560
and also during the first week,

1311
02:59:52,560 --> 02:59:55,220
sometimes you wanna share the code with yourself.

1312
02:59:55,220 --> 02:59:58,440
So the social part is not just, you know,

1313
02:59:58,440 --> 03:00:00,820
me collaborating with those saying on a project

1314
03:00:00,820 --> 03:00:04,380
and I don't know, sharing the GitHub and so on,

1315
03:00:04,380 --> 03:00:07,140
but then it really goes, you know,

1316
03:00:07,140 --> 03:00:09,140
me collaborating with the future self

1317
03:00:09,140 --> 03:00:12,940
and more in general me trying to share what I wrote

1318
03:00:12,940 --> 03:00:17,940
as a code to create an impact on other papers.

1319
03:00:18,860 --> 03:00:21,280
So [name], what about you?

1320
03:00:21,280 --> 03:00:22,920
I guess maybe that in your work

1321
03:00:22,920 --> 03:00:26,520
as a research software engineer, you've been helping people

1322
03:00:26,520 --> 03:00:29,000
kind of reaching this objective

1323
03:00:29,000 --> 03:00:31,880
to basically be social with their code

1324
03:00:31,880 --> 03:00:34,360
and sharing it and make it citable.

1325
03:00:34,360 --> 03:00:35,200
Yes.

1326
03:00:36,960 --> 03:00:39,200
Was it a easy job or was it?

1327
03:00:39,200 --> 03:00:46,760
To my experience, people start it a bit late, they usually come when they have to publish

1328
03:00:46,760 --> 03:00:51,920
the code because of the publication or a specific requirement for a journal.

1329
03:00:51,920 --> 03:01:01,120
So they didn't start with social coding and like trying to have it online for more collaboration.

1330
03:01:01,120 --> 03:01:08,600
So yeah, I think maybe if you started from scratch, it would be easier in the end.

1331
03:01:08,600 --> 03:01:15,800
Yeah, this is a very good point. In a way, you could even pretend from the day zero when you

1332
03:01:15,800 --> 03:01:20,440
start the project, when you start your Git repository, even though it's a private repository,

1333
03:01:20,440 --> 03:01:26,360
even though you're not already sharing it with anybody else, you could still pretend that,

1334
03:01:26,360 --> 03:01:31,480
you know, you are actually, that it's already live, that it's already public,

1335
03:01:31,480 --> 03:01:36,680
that already will improve the way you relate to the repository, because maybe you will write

1336
03:01:36,680 --> 03:01:41,640
meaningful messages if you know that you're being watched, if you know what I mean, even though maybe

1337
03:01:41,640 --> 03:01:46,760
it's still a private repository, but that will also make your life easier when it's time to

1338
03:01:46,760 --> 03:01:52,040
open it and share it with your paper, that you don't need to, I don't know, go through the git

1339
03:01:52,040 --> 03:01:58,040
history trying to delete commit messages that you were not happy about because you were very angry

1340
03:01:58,040 --> 03:02:08,760
with your code on the day and so on. So in this social one think about if and how you share.

1341
03:02:09,400 --> 03:02:19,960
There's a question that can have multiple answers and I believe you have pasted it to them

1342
03:02:19,960 --> 03:02:20,960
Yes.

1343
03:02:20,960 --> 03:02:23,320
Or can you paste it to them?

1344
03:02:23,320 --> 03:02:25,600
Yes, I already did.

1345
03:02:25,600 --> 03:02:30,120
Someone had a problem with Twitch, but now it has been resolved.

1346
03:02:30,120 --> 03:02:34,160
So maybe we can go to the questions.

1347
03:02:34,160 --> 03:02:42,880
So basically, as we did in other polls, if you are able to write a, like an O, so that

1348
03:02:42,880 --> 03:02:48,600
we can get this type of ASCII, ASCII, ASCII histogram.

1349
03:02:48,600 --> 03:02:49,600
So

1350
03:02:49,600 --> 03:02:54,800
So for the first question, you can answer as many as you want, but for the next ones,

1351
03:02:54,800 --> 03:03:01,360
you can only choose one. So Sam, I'm gonna ask you the question. Why would you want to share

1352
03:03:02,480 --> 03:03:07,120
your scripts, code, and data? Which one would you pick of this?

1353
03:03:10,000 --> 03:03:18,560
So for me, it's very good for your reputation and for your CV. If you want to change your job or

1354
03:03:18,560 --> 03:03:26,440
or maybe in the future, which is a good thing because you can showcase what I was doing

1355
03:03:26,440 --> 03:03:29,920
in my previous job.

1356
03:03:29,920 --> 03:03:35,760
Another thing is, at least for me, when I start to publish my code, I'm a bit more careful

1357
03:03:35,760 --> 03:03:43,500
on the structure and try to be more clean, which is also a good thing.

1358
03:03:43,500 --> 03:03:53,540
Another thing that at least I use is, because the code is more clean, it's easily more reproducible

1359
03:03:53,540 --> 03:03:55,420
for me at least.

1360
03:03:55,420 --> 03:04:00,660
So I think these three are the main aspects of why I use social coding.

1361
03:04:00,660 --> 03:04:01,660
What about you?

1362
03:04:01,660 --> 03:04:03,180
Do you have any preference?

1363
03:04:03,180 --> 03:04:11,000
Yeah, I agree with you, especially that you mentioned this kind of CV idea, and this also

1364
03:04:11,000 --> 03:04:15,160
goes with the, in my opinion, what I like about the Code Refinery workshop, that the type of

1365
03:04:15,160 --> 03:04:20,920
skills that you learn here are skills that are reusable in other fields outside academia.

1366
03:04:20,920 --> 03:04:26,760
So if the majority of the people following this workshop right now are doctoral researchers or

1367
03:04:26,760 --> 03:04:35,880
postdocs or whatever, but already learning it and starting with whatever, little by little sharing,

1368
03:04:35,880 --> 03:04:41,800
it will also open doors for maybe other jobs in the future that might not be related to academia.

1369
03:04:43,240 --> 03:04:51,800
Me, of the options here, I really like the reproducibility part. I'm biased. I'm a

1370
03:04:51,800 --> 03:04:59,800
reproducibility fanatic so that other people can truly rerun my code. But sometimes I publish

1371
03:04:59,800 --> 03:05:04,680
code that was really ugly, but I still thought I'm going to put it out there because no one had

1372
03:05:04,680 --> 03:05:11,160
that type of function in whatever language I was publishing it. And then I saw that my ugly code

1373
03:05:11,160 --> 03:05:16,440
was actually reused by so many publications completely in different fields. Sorry to

1374
03:05:16,440 --> 03:05:23,080
interrupt. Someone is mentioning that. Oh no, sorry. Go ahead. There was a comment that they

1375
03:05:23,080 --> 03:05:30,280
cannot hear us, but it was from the computer. Sorry, go ahead. Yeah, that's good. Yeah. If

1376
03:05:30,280 --> 03:05:38,200
I was muted it wouldn't be nice. But basically let's have a look at what our people online are

1377
03:05:38,200 --> 03:05:45,000
answering. Looks like that to my eyes at least A and B seems to be very popular. So the reproducibility

1378
03:05:45,000 --> 03:05:53,880
and also the trustworthiness. Exactly. It's interesting that the H doesn't get any votes,

1379
03:05:53,880 --> 03:05:59,720
not for this year, also for previous years it didn't get any votes either. But yeah it's

1380
03:05:59,720 --> 03:06:05,480
interesting it's it's nice also this that maybe the kind of social thinking of the people here

1381
03:06:06,040 --> 03:06:11,960
is not that we are in a competition even though the grant system makes us believe that we are all

1382
03:06:11,960 --> 03:06:18,840
competing with each other another thing that i wanted to add is maybe another aspect that i

1383
03:06:18,840 --> 03:06:24,760
think about is being part of the community so there are like a lot of codes that you can use

1384
03:06:24,760 --> 03:06:31,560
and they're open source so you can try them and if you try to also publish your code you become

1385
03:06:31,560 --> 03:06:37,960
part of this community which is very very interesting to be part of and like you can create

1386
03:06:37,960 --> 03:06:43,960
like collaborate with others and after some time you will be known for some of your work

1387
03:06:45,480 --> 03:06:52,200
although they not might be exactly your expertise for example like I have this it's not exactly a

1388
03:06:52,200 --> 03:07:01,160
source code on GitHub, but it's about like how to do something like more of administrative work.

1389
03:07:01,160 --> 03:07:07,720
And at the moment, I'm known for that work among like non-expert people for like research software,

1390
03:07:07,720 --> 03:07:13,080
which is an interesting thing. Yeah. Yeah, that's great. And in my opinion, it's also,

1391
03:07:15,080 --> 03:07:21,160
I mean, it's exactly this that it's, even though we will talk about this later,

1392
03:07:21,160 --> 03:07:27,560
that sometimes maybe code, you might feel that you're not recognized in citation or whatever

1393
03:07:27,560 --> 03:07:34,360
impact is the measure in academia. But at the end of the day, people will notice it and people will

1394
03:07:34,360 --> 03:07:40,840
see it. Maybe you start getting new collaborators or reaching people that you would have not just

1395
03:07:40,840 --> 03:07:43,800
reach with your papers.

1396
03:07:43,800 --> 03:07:48,360
Yes, maybe we can go to the next question.

1397
03:07:49,240 --> 03:07:55,240
Yeah, so it also had some downfalls a bit, right?

1398
03:07:56,040 --> 03:07:58,760
So when you publish your code, do you have any concerns?

1399
03:08:01,000 --> 03:08:06,840
Well, I would say initially I felt this kind of B, that my code is ugly.

1400
03:08:06,840 --> 03:08:14,040
I was never really afraid of the A, because actually by publishing it with the timestamp,

1401
03:08:14,040 --> 03:08:21,160
I could eventually prove that, you know, you scooped my code, I have a timestamp that shows.

1402
03:08:21,160 --> 03:08:27,320
But then at the end of the day, would I really see you, someone else like me, or for what?

1403
03:08:27,320 --> 03:08:31,800
Just, I mean, at the end of the day, I'm happy if people scooped whatever I did,

1404
03:08:31,800 --> 03:08:37,320
means that it was something good. But what about you out of these answers, which one?

1405
03:08:40,440 --> 03:08:45,800
I think for me, B, like having an ugly code was the most concern.

1406
03:08:48,920 --> 03:08:56,440
I never thought about like A or F, about like a lower quality copy or even F, like the code

1407
03:08:56,440 --> 03:09:01,320
could be stolen because you can add licenses. And it's also true about your original paper,

1408
03:09:01,320 --> 03:09:06,280
right? When you're publishing your idea, it can be also stolen, but it's completely okay.

1409
03:09:07,480 --> 03:09:13,240
You have patents and everything to have this protection. And here I think it's

1410
03:09:13,240 --> 03:09:16,200
the equivalent is licenses, which we will talk about.

1411
03:09:17,480 --> 03:09:21,880
Yeah, it looks like B is also the most popular.

1412
03:09:21,880 --> 03:09:27,480
Exactly. Another thing that I have some concerns about, which is not here, is like,

1413
03:09:27,480 --> 03:09:32,120
because no software is complete, right? And as a perfectionist, I'm always thinking about is

1414
03:09:32,120 --> 03:09:40,200
it complete? Is it good enough to be published? Not from being ugly or not following the clean

1415
03:09:40,200 --> 03:09:47,320
code structures, but just as a whole, with all of the functions and is it complete to be published

1416
03:09:48,200 --> 03:09:56,840
or not? Yeah. I personally like the release early, release often. And so I rather just publish

1417
03:09:56,840 --> 03:10:03,800
something that is even half broken but already there's an idea out there and then I will improve

1418
03:10:03,800 --> 03:10:07,480
it and then maybe someone will try to reuse it and I realize that I completely missed

1419
03:10:08,120 --> 03:10:17,000
I don't know one exception in the conditions and so on. Yeah so like based on age I can see like

1420
03:10:17,000 --> 03:10:24,120
other people have this perfectionist idea as well and it's good that I like I had some votes on

1421
03:10:24,120 --> 03:10:28,680
about the licensing which we are going to talk about in this course in this section.

1422
03:10:30,360 --> 03:10:34,200
Then we have question three and question four which are kind of free form so please

1423
03:10:34,840 --> 03:10:40,280
expand on that and now we will have a look why software often treated differently than from

1424
03:10:40,280 --> 03:10:47,080
papers because some people for example also have a ugly english ugly way of writing why wouldn't

1425
03:10:47,080 --> 03:10:53,000
you be ashamed of your ugly paper rather than your ugly software and then the fourth question

1426
03:10:53,000 --> 03:11:01,360
is when you find a repository with a code or with a library that you would like to reuse,

1427
03:11:01,360 --> 03:11:08,640
what are the things that you look at to decide whether you will use it?

1428
03:11:08,640 --> 03:11:16,880
So let's have a look at question three. Yeah, I like the first answer because it's this

1429
03:11:16,880 --> 03:11:28,960
overly fixation with citations and metrics. It's also true about one of the comments is

1430
03:11:28,960 --> 03:11:34,080
it's usually seen just as a tool, not a scientific product. And it's kind of true,

1431
03:11:34,880 --> 03:11:41,840
right? Because in my opinion, papers are more about the results and the methodology that you

1432
03:11:41,840 --> 03:11:47,040
used and the code is just a tool that you did it although like there are some aspects about like

1433
03:11:47,040 --> 03:11:53,280
optimization of the code and how fast it is how much memory does it use but in the end

1434
03:11:53,920 --> 03:11:58,240
it's just a tool to achieve your goal right yeah it's true

1435
03:12:03,440 --> 03:12:08,720
it's nice too that now this or at least i think that it's nice i'm sorry for some people maybe

1436
03:12:08,720 --> 03:12:13,760
this would be more work, and maybe they don't have the resources to ask for help. But this

1437
03:12:14,640 --> 03:12:22,960
making, or I wouldn't say forcing, but at least trying to have the code attached with the paper,

1438
03:12:22,960 --> 03:12:29,440
with this software availability statement, is a little bit step towards this reproducibility and

1439
03:12:30,800 --> 03:12:36,640
transparency, so that it's clear that maybe the method section is more meaningful if I can just

1440
03:12:36,640 --> 03:12:43,200
read the code rather than try to infer from a very short paragraph in the method section

1441
03:12:43,200 --> 03:12:49,440
which filter was actually applied or which machine learning algorithm was used.

1442
03:12:51,040 --> 03:12:55,040
In question three, do you agree with the last comment, not peer-reviewed?

1443
03:12:56,400 --> 03:13:05,200
Well, kind of yes, unfortunately, because I often review papers and if there is a code,

1444
03:13:05,200 --> 03:13:11,280
I spend a bit of time in giving some feedback that, for example, usually the typical feedback

1445
03:13:11,280 --> 03:13:16,240
is that the license is missing. And so in my feedback, I say, please add the license to your

1446
03:13:16,240 --> 03:13:22,320
code. But then on the other end, I don't have the time to actually rerun unless they make it very

1447
03:13:22,320 --> 03:13:28,880
easy for you that it's just one Docker pool, whatever command that you can easily rerun the

1448
03:13:28,880 --> 03:13:35,600
whole pipeline and test it. But even though I would be kind of an expert to peer review the

1449
03:13:35,600 --> 03:13:39,840
code, there's just not enough time if I have to run fan review in the paper. But of course,

1450
03:13:39,840 --> 03:13:45,920
there are journals that are actually focused on this, like the Journal of Open Source Software,

1451
03:13:45,920 --> 03:13:51,840
JOS, where the peer review is actually on the code. The actual papers that come with JOS are

1452
03:13:51,840 --> 03:13:57,760
one or two pages. We are a bit behind time, so maybe we can continue. But

1453
03:13:57,760 --> 03:14:00,860
But a short comment that I wanted to add is,

1454
03:14:00,860 --> 03:14:02,460
it's a bit complicated than papers

1455
03:14:02,460 --> 03:14:06,800
because if your repository become popular enough,

1456
03:14:06,800 --> 03:14:11,060
other people would come and do contribute to it, right?

1457
03:14:11,060 --> 03:14:15,020
So it's not exactly peer reviewed, but somehow it is, right?

1458
03:14:15,020 --> 03:14:18,020
Because other people are trying to make it better.

1459
03:14:18,020 --> 03:14:19,340
But yeah, maybe we can-

1460
03:14:22,500 --> 03:14:24,300
Yeah, then the question four is about

1461
03:14:24,300 --> 03:14:26,640
when you find some code, you know,

1462
03:14:26,640 --> 03:14:29,040
I've seen that many are writing about the license,

1463
03:14:29,040 --> 03:14:31,440
which it seems that it's already clear

1464
03:14:31,440 --> 03:14:34,080
that the license might set the rules

1465
03:14:34,080 --> 03:14:36,260
of what you can do and what you cannot do.

1466
03:14:37,960 --> 03:14:41,320
And also this type of, not just the reusability,

1467
03:14:41,320 --> 03:14:45,080
but what we will talk soon is these changes

1468
03:14:45,080 --> 03:14:46,240
that you can do to the code.

1469
03:14:46,240 --> 03:14:49,080
So the so-called derivative work.

1470
03:14:49,080 --> 03:14:51,600
Do you have any comment on this, Orsan?

1471
03:14:51,600 --> 03:14:55,600
Personally, I see like the activity and the number of,

1472
03:14:55,600 --> 03:14:58,160
like when it has been updated recently

1473
03:14:58,160 --> 03:15:00,280
or is it deprecated already?

1474
03:15:00,280 --> 03:15:03,240
And also another thing which I usually look at

1475
03:15:03,240 --> 03:15:06,660
is the number of contributors that the repository had.

1476
03:15:08,360 --> 03:15:09,200
Yeah.

1477
03:15:09,200 --> 03:15:10,600
Yeah.

1478
03:15:10,600 --> 03:15:14,440
All right, so basically the rest of this

1479
03:15:14,440 --> 03:15:17,080
social coding part is what we just discussed

1480
03:15:17,080 --> 03:15:19,620
that compared to sharing papers,

1481
03:15:19,620 --> 03:15:21,280
sharing code is somewhat different

1482
03:15:21,280 --> 03:15:23,240
if the paper is just, you know,

1483
03:15:23,240 --> 03:15:26,960
sharing your ideas and maybe winning citations.

1484
03:15:26,960 --> 03:15:30,600
Code is a little bit more complex feature.

1485
03:15:30,600 --> 03:15:33,160
Sometimes people will just reuse your code ID.

1486
03:15:33,160 --> 03:15:37,640
Sometimes it will form some sort of base in basement

1487
03:15:37,640 --> 03:15:41,200
foundation for something else to build on top.

1488
03:15:42,060 --> 03:15:45,480
And so, you know, with this, of course,

1489
03:15:45,480 --> 03:15:47,200
this makes it a little bit more complicated

1490
03:15:47,200 --> 03:15:50,360
that papers to evaluate what could be the impact,

1491
03:15:50,360 --> 03:15:52,440
what could be the metrics.

1492
03:15:52,440 --> 03:15:58,520
Eventually there are some metrics that we will also mention later when you can actually

1493
03:15:58,520 --> 03:16:04,880
track the downloads of a package of a software for example.

1494
03:16:04,880 --> 03:16:09,080
And then another aspect that is covering this page is what we touched already that the journal

1495
03:16:09,080 --> 03:16:15,280
policies are basically going towards the, I wouldn't say forcing, but at least making

1496
03:16:15,280 --> 03:16:21,600
it clear that there should be a code availability statement attached with the paper.

1497
03:16:21,600 --> 03:16:26,760
as we have a data availability statement. Maybe sometimes you can't share the code because

1498
03:16:26,760 --> 03:16:31,880
you're, I don't know, working with a company or it's a dual use case or whatever is the

1499
03:16:31,880 --> 03:16:37,280
reason that you're not allowed to share the code. But it's clear that the journals and

1500
03:16:37,280 --> 03:16:43,640
not just the journals, even the organizations that are the funding organization, whether

1501
03:16:43,640 --> 03:16:50,200
it's the European Research Council or whatever country organization, they are clearly making

1502
03:16:50,200 --> 03:16:59,320
it's stronger that the scientific code should be published and public.

1503
03:16:59,320 --> 03:17:06,000
Maybe out of one last part that we can look from this page is also this aspect that we

1504
03:17:06,000 --> 03:17:12,720
touched on in the question above, that sharing software can also be scary. We touched a little

1505
03:17:12,720 --> 03:17:18,360
bit on this. We didn't really cover the aspect of bugs and mistakes. Of course, we might

1506
03:17:18,360 --> 03:17:25,480
be scared that what I did was wrong. But on the other hand, is it so bad? Maybe I should actually,

1507
03:17:25,480 --> 03:17:29,800
from the perspective of science, from the perspective of ethics, I would actually be

1508
03:17:29,800 --> 03:17:36,760
very happy that someone finds a bug in my code. Of course, it's sad for me that I need to ask for a

1509
03:17:36,760 --> 03:17:44,520
retraction of the paper if it really changes all the results. But in theory, if science should be

1510
03:17:44,520 --> 03:17:48,480
be, you know, what's the word, self-fixing.

1511
03:17:48,480 --> 03:17:56,560
Maybe this publishing the code will also improve this type of process.

1512
03:17:56,560 --> 03:17:59,800
True.

1513
03:17:59,800 --> 03:18:06,000
I would say like sometimes fixing a bug requires a lot of work and it's good that we can collaborate

1514
03:18:06,000 --> 03:18:08,880
and help each other on that aspect.

1515
03:18:08,880 --> 03:18:15,000
At the same time, it can be a bit overwhelming for the publisher of the code, that you kind

1516
03:18:15,000 --> 03:18:23,040
of feel that you're responsible for fixing those if they're just raising the bug, not

1517
03:18:23,040 --> 03:18:24,040
a solution.

1518
03:18:24,040 --> 03:18:26,560
Yeah, that's a very good point.

1519
03:18:26,560 --> 03:18:30,980
We don't have time to discuss this, but in the page, for those who want to spend some

1520
03:18:30,980 --> 03:18:37,360
time reading the whole page, there's also this question that, you know, how do you feel,

1521
03:18:37,360 --> 03:18:42,400
do you feel the pressure that in the moment that you put your code online now suddenly people will

1522
03:18:42,400 --> 03:18:48,800
start asking can you have this improvement can you make it work on this whatever older version

1523
03:18:48,800 --> 03:18:54,400
of this operating system maybe i actually think the other way around that at the moment that i

1524
03:18:54,400 --> 03:19:00,160
put it online i'm actually removing the responsibility that that i'm saying look i

1525
03:19:00,160 --> 03:19:05,840
managed to do this i don't have time to work on this anymore for whatever reason please continue

1526
03:19:05,840 --> 03:19:09,840
you make it better, or ask for help.

1527
03:19:09,840 --> 03:19:20,680
Basically, we're slowly moving towards the licenses, and we still have now 30 minutes

1528
03:19:20,680 --> 03:19:28,000
to talk about that, which is basically how our work connects to the works of others.

1529
03:19:28,000 --> 03:19:34,680
So I'm turning page now, and now it's the page dedicated to software licenses.

1530
03:19:34,680 --> 03:19:41,480
And I guess more or less everyone is familiar with the idea of copyright.

1531
03:19:41,480 --> 03:19:43,000
There are different types of copyright.

1532
03:19:43,000 --> 03:19:50,120
There are trademarks that protect the name of a brand, for example, from impersonation.

1533
03:19:50,120 --> 03:19:56,760
There are patents that patents usually are not related to software as an algorithm, but

1534
03:19:56,760 --> 03:20:02,080
you can patent a system, for example, or in general, so-called technical invention.

1535
03:20:02,080 --> 03:20:07,560
And then there's the copyright that is basically protecting the creative expression.

1536
03:20:07,560 --> 03:20:13,680
And this can include a little bit of everything, whether it's music or photographs or writings

1537
03:20:13,680 --> 03:20:15,440
and so on.

1538
03:20:15,440 --> 03:20:21,560
It's also nice what it says here that this copyright is practically forever because it

1539
03:20:21,560 --> 03:20:27,880
persists for 70 years after the lifetime of the author.

1540
03:20:27,880 --> 03:20:36,520
then maybe on the what you will hear as a term if copyright feels like you know protecting

1541
03:20:36,520 --> 03:20:43,400
your intellectual right i also see a point of having a copy left basically making sure that

1542
03:20:43,400 --> 03:20:49,640
other people can actually reuse your work and build on top of your work again in a in a in a

1543
03:20:49,640 --> 03:20:58,920
legal way. So this brings us to the topic of derivative work, which is a term to say that

1544
03:20:59,960 --> 03:21:05,560
from something, let's say Osain made something and put it in the open and I want to reuse bits

1545
03:21:05,560 --> 03:21:11,960
of it. I want to maybe reuse some bits as they are, some Python functions, because I don't really

1546
03:21:11,960 --> 03:21:21,560
have any improvements to go there or maybe I want to, you know, remix, resample, invent my own flavor

1547
03:21:21,560 --> 03:21:28,760
on some whatever visualization part of the script that Ossane did. And of course I can do this or

1548
03:21:28,760 --> 03:21:34,280
like the question that maybe would be for myself, am I actually able to do this? Would Ossane work

1549
03:21:34,280 --> 03:21:39,800
allow me to do this type of derivative work or is it that, you know, I can't actually even touch

1550
03:21:39,800 --> 03:21:48,600
or run on my computer or saying works. So this derivative work is actually when it comes to

1551
03:21:48,600 --> 03:21:55,320
software is not intuitive at all of what constitutes derivative work and me myself when

1552
03:21:55,320 --> 03:21:59,640
i was attending my first code refinery many years ago i was actually kind of surprised

1553
03:21:59,640 --> 03:22:06,440
that some of the options here are considered derivative work. So in this question for you

1554
03:22:06,440 --> 03:22:13,480
please don't spy to the to the solution box can can you try to answer in the notes document

1555
03:22:14,200 --> 03:22:20,520
which of these are derivative works so derivative you understand that you are basically

1556
03:22:20,520 --> 03:22:27,080
remixing reusing the existing code that you have found you have found online

1557
03:22:27,080 --> 03:22:38,920
Okay, so maybe we let some time to answer because we don't want to spoil the fun.

1558
03:22:38,920 --> 03:22:44,400
Yes, and we have some questions on the note I'm trying to answer.

1559
03:22:44,400 --> 03:22:47,280
Is there anything to highlight?

1560
03:22:47,280 --> 03:22:53,320
I think two of them are coming from previous sections and copy pasted here.

1561
03:22:53,320 --> 03:22:59,120
It's about Docker and Kubernetes and the Conda environment, which I think we can pass.

1562
03:22:59,120 --> 03:23:05,040
But a question is, when you license your code, does it belong to your employer or to you?

1563
03:23:05,040 --> 03:23:06,040
How does it work?

1564
03:23:06,040 --> 03:23:07,040
Yeah.

1565
03:23:07,040 --> 03:23:12,960
So, as usual, what I learned from the lawyers that the best answer is it depends.

1566
03:23:12,960 --> 03:23:20,120
It depends on what type of agreement do you have with your employer.

1567
03:23:20,120 --> 03:23:26,560
Actually it's flexible in a sense that sometimes I've seen, and I'm not specifically talking

1568
03:23:26,560 --> 03:23:31,240
about my university, my employer, but I've seen people writing, you know, copyright.

1569
03:23:31,240 --> 03:23:36,440
In my case would be [name]-Alto University.

1570
03:23:36,440 --> 03:23:43,360
At the end of the day, because software per se cannot be turned into patent unless you

1571
03:23:43,360 --> 03:23:50,760
build a system around it. The employer, at least this public organization like universities,

1572
03:23:50,760 --> 03:23:56,480
they don't really care much. But it's a different story if you would be working for a company

1573
03:23:56,480 --> 03:24:04,000
where you can clearly understand that you as a coder for a company, you don't own anything

1574
03:24:04,000 --> 03:24:07,720
and the employer clearly writes in the contract that whatever you produce.

1575
03:24:07,720 --> 03:24:11,760
But the same is also, and it's not intuitive, it's also for data. And this is a discussion

1576
03:24:11,760 --> 03:24:16,640
that I often have with our researchers, that they think, because they collected the data

1577
03:24:16,640 --> 03:24:21,880
in their views, measurements, whatever, that it's their data. And it's actually very rare

1578
03:24:21,880 --> 03:24:27,160
that it's their data in the specific context of Finnish universities. If you are on your

1579
03:24:27,160 --> 03:24:33,360
own money, on your own grant, then it is your data. But 99% of the time, it's actually

1580
03:24:33,360 --> 03:24:40,080
university owns the data. So yeah, in this sense, it's complicated.

1581
03:24:42,080 --> 03:24:48,320
Yep. I just want to add that it depends on the policy of the company that you are working.

1582
03:24:49,200 --> 03:24:56,160
And I know even for some companies, if you are an employee there, even if you develop some code

1583
03:24:56,160 --> 03:25:02,480
out of your working hours, still the code that you produce, it belongs to the company. So it

1584
03:25:02,480 --> 03:25:07,040
depends on the policy. Yeah, so you can't even code as a hobby.

1585
03:25:08,240 --> 03:25:12,240
Unfortunately, yes, it depends on the company's policy.

1586
03:25:12,240 --> 03:25:17,600
Yeah, well, fair enough. Maybe it's the same, you know, you can think of musician that if you're

1587
03:25:17,600 --> 03:25:23,280
making music outside of your contract with your record label, maybe the record label manager gets

1588
03:25:23,280 --> 03:25:34,320
Alright, but question 5, there's some answers here and basically A to D, they are all to

1589
03:25:34,320 --> 03:25:43,120
be considered derivative works, that you know, you download some code and then you donate

1590
03:25:43,120 --> 03:25:46,080
or you change the code and modify the code.

1591
03:25:46,080 --> 03:25:52,480
Maybe what kind of was surprised for me, and of course it depends, that E and F can also

1592
03:25:52,480 --> 03:25:58,960
be considered derivative work. So even though I'm taking our same repository that's on Python package

1593
03:25:58,960 --> 03:26:06,000
and I just rewrite it in R, I might still be doing derivative work you know if I follow the

1594
03:26:06,000 --> 03:26:11,680
same logic, the same function structure, the same. It would be different if I say would sit down with

1595
03:26:11,680 --> 03:26:18,560
me without showing any code, tell me what the package is doing and then I would try to you know

1596
03:26:18,560 --> 03:26:23,680
code it based on the description. So it would be like that I would read O'Sane's paper

1597
03:26:23,680 --> 03:26:29,040
on the description of this package and just put it in the paper and try to write my own version.

1598
03:26:30,800 --> 03:26:34,320
And so yeah, this was a bit unintuitive for me, but on the other hand,

1599
03:26:34,320 --> 03:26:37,680
it makes sense when things start to be kind of literal.

1600
03:26:40,080 --> 03:26:44,880
It's also interesting, we don't have the... I would add another option here that,

1601
03:26:44,880 --> 03:26:52,560
I don't know if you're using some chat GPT or co-pilot to generate code. Is it derivative

1602
03:26:52,560 --> 03:26:59,080
work? Because this chat GPT, large language models, they actually have ingested lots of

1603
03:26:59,080 --> 03:27:05,400
software from whatever open repositories, but then they don't tell you who originally

1604
03:27:05,400 --> 03:27:12,840
wrote a function very similar to the one that you asked. But then again, it's complicated.

1605
03:27:12,840 --> 03:27:23,460
Do you actually do or saying if you if you use copilot or GPT to get help let's say with the function would you start searching if.

1606
03:27:23,680 --> 03:27:30,260
That function if beats of that function would already exist on the internet that you would find.

1607
03:27:30,400 --> 03:27:40,320
Not not that you have to because this is also the thing that when you generate something with this large language models you are actually become the copyright owner of what is generated.

1608
03:27:40,320 --> 03:27:47,360
which is counterintuitive in a way because you feel that ethically it's not you that made those

1609
03:27:47,360 --> 03:27:54,480
things, but just some machine who has read many, many code scripts. But how do you feel as a user

1610
03:27:54,480 --> 03:27:59,680
of course, I guess you use now sometimes these copilots or... Yeah, all the time. Yeah.

1611
03:28:00,320 --> 03:28:07,040
Yeah. But I think it's something that as a society, we still have to think about it,

1612
03:28:07,040 --> 03:28:13,120
like what should what should we do because it's generally a new concept that we are

1613
03:28:13,840 --> 03:28:21,280
facing and I think it would resolve and we would come with a bit more macho ways on

1614
03:28:21,280 --> 03:28:27,280
how to cite it and how to use it. But personally if I use something and I get some ideas or like

1615
03:28:27,280 --> 03:28:33,520
use the whole functions that the generative AI generates, no I don't go and search like what is

1616
03:28:33,520 --> 03:28:39,520
the original repository that produced this one? Yeah. This is, of course, I don't have an answer

1617
03:28:39,520 --> 03:28:45,200
myself. And if people want to give their own opinion, in my opinion, it's nice anyway that

1618
03:28:45,200 --> 03:28:49,840
people discuss this use of these new tools, generative AI, and how people are using them,

1619
03:28:49,840 --> 03:28:56,000
because maybe then we can come up with a consensus on an ethical and responsible way of using them.

1620
03:28:57,440 --> 03:29:03,440
We also have a question about these generative AIs. You said if you generate something like

1621
03:29:03,440 --> 03:29:07,200
piece of code, you would become the owner of the code, right?

1622
03:29:07,200 --> 03:29:08,200
Is that correct?

1623
03:29:08,200 --> 03:29:09,200
Yeah.

1624
03:29:09,200 --> 03:29:12,440
The default policy is that whatever you generate with the large language model, you are the

1625
03:29:12,440 --> 03:29:13,960
copyright owner.

1626
03:29:13,960 --> 03:29:20,680
Do you add any citations or anything that I use generative AI for these codes I created?

1627
03:29:20,680 --> 03:29:27,960
So the journals have expanded on their policies on the use of generative AI, and so now publishers

1628
03:29:27,960 --> 03:29:34,520
like Nature or whatever, many publishers, they would now basically require you to add

1629
03:29:34,520 --> 03:29:42,840
a statement, how generative AI was used in the process. I'm not too strong. When I teach

1630
03:29:42,840 --> 03:29:47,080
about these things, I can tell that if you just used it for, I don't know, fixing your

1631
03:29:47,080 --> 03:29:53,400
English grammar, maybe. There's no point. But if it's clear that that work would have

1632
03:29:53,400 --> 03:29:57,560
not been able without the use of generative AI, then of course it must be mentioned.

1633
03:29:57,560 --> 03:30:02,920
so if i if my level of coding is very basic for whatever reason because i just started

1634
03:30:02,920 --> 03:30:08,440
and i get help from the generative ai and i'm basically not able to judge myself is this code

1635
03:30:08,440 --> 03:30:15,160
that the generative made right even though i see with the tests that i you know add that it feels

1636
03:30:15,160 --> 03:30:21,400
right at least i can be transparent that you know i got help or i used chat gpt for generating the

1637
03:30:21,400 --> 03:30:25,720
code for this and the code is published at this and that repository.

1638
03:30:28,920 --> 03:30:37,400
All right, so yeah, when it comes to software licenses, so now we are a bit focusing on

1639
03:30:37,400 --> 03:30:42,440
software. I've seen some people in the notes talking also about Creative Common. We will

1640
03:30:42,440 --> 03:30:50,920
touch a little bit on so-called data licensing later, but in general there is a taxonomy

1641
03:30:51,400 --> 03:30:57,680
of software licenses, this was from the European Commission, yes, so it's a publication that

1642
03:30:57,680 --> 03:31:04,640
basically talks about the EU public license, the European Union public license.

1643
03:31:04,640 --> 03:31:11,160
And so when it comes to software licenses, there are different, basically there's a continuum

1644
03:31:11,160 --> 03:31:18,320
of things that would basically, they are very dark green, that you could basically do whatever

1645
03:31:18,320 --> 03:31:24,160
you want with that type of license, so if you find a code and with that code in, I don't know,

1646
03:31:24,160 --> 03:31:31,600
GitHub, there is attached a license that says MIT or BST and so on, it means that most likely

1647
03:31:31,600 --> 03:31:36,560
you can reuse it and you can do anything you want, you can build on it. In some cases,

1648
03:31:36,560 --> 03:31:43,280
you don't even maybe need to tell who was the original author. On the other end of the spectrum,

1649
03:31:43,280 --> 03:31:54,640
we have the so-called strong copyleft licenses, and so here the idea is that if I find, let's say

1650
03:31:54,640 --> 03:32:01,280
that Ausen writes a package that I want to reuse, but it comes with a strong copyleft license,

1651
03:32:01,280 --> 03:32:07,520
it means that whatever I derive from AusenWord should also be released with that strong copyleft.

1652
03:32:07,520 --> 03:32:14,240
So I need to use the same license and in some cases, as they say, this license infects the rest

1653
03:32:14,240 --> 03:32:20,800
of my code. So it's not just the code that is using OSINT's StrongCopyLeft work that needs to

1654
03:32:21,520 --> 03:32:25,280
be released with that license. It might attach my whole project and now

1655
03:32:25,280 --> 03:32:33,040
I have to also release it with the StrongCopyLeft license. And in between there are this more kind of

1656
03:32:33,040 --> 03:32:40,880
sharealike. The idea of sharealike is that, okay, I make this software public with this license,

1657
03:32:40,880 --> 03:32:46,640
but I wouldn't mind that if you improve the software, you are kind of allowing me to

1658
03:32:47,280 --> 03:32:54,240
basically get your improvement so that I can also reuse. So it's kind of in between the two,

1659
03:32:54,880 --> 03:32:59,680
the very permissive one that lets anybody else to do whatever they want, and the very strict one

1660
03:32:59,680 --> 03:33:05,240
that forces everybody else to do as you decide to do.

1661
03:33:05,240 --> 03:33:09,640
What is your feeling from a research software engineer perspective?

1662
03:33:09,640 --> 03:33:14,480
Have you worked with the projects that have all sorts of licenses or do you feel that

1663
03:33:14,480 --> 03:33:18,600
in general it's more towards these permissive licenses?

1664
03:33:18,600 --> 03:33:31,160
Personally, I'm more like of the more open licenses like MIT or Creative Commons ones.

1665
03:33:31,160 --> 03:33:37,040
My idea is I'm using other people's code and if I'm able to publish the code, it's not

1666
03:33:37,040 --> 03:33:42,520
something confidential or it's not an ongoing project that I cannot publish yet, I would

1667
03:33:42,520 --> 03:33:45,120
go with more open licenses.

1668
03:33:45,120 --> 03:33:52,560
I totally understand, for some of the projects, it's better to have more copy-left licenses

1669
03:33:52,560 --> 03:33:57,560
or even a strong copy-left licenses.

1670
03:33:57,560 --> 03:34:03,680
An interesting thing is about this picture that we have, is about that arrows that we

1671
03:34:03,680 --> 03:34:04,680
have.

1672
03:34:04,680 --> 03:34:07,600
Can you also explain what are the arrows and how does it work?

1673
03:34:07,600 --> 03:34:13,780
Yeah, so here they talk about that the arrows represent compatibility.

1674
03:34:13,780 --> 03:34:21,140
And so that in some cases, you know, some licenses can kind of leave can be can be compatible

1675
03:34:21,140 --> 03:34:27,360
with other licenses, but in some other cases, the compatibility, you know, when the like,

1676
03:34:27,360 --> 03:34:33,300
for example, here, so if I remember correctly, this red block is more the proprietary licenses.

1677
03:34:33,300 --> 03:34:38,820
And so the very permissive licenses are compatible with proprietary licenses, meaning that you

1678
03:34:38,820 --> 03:34:42,180
can release a software that it's not going to be open source.

1679
03:34:42,180 --> 03:34:46,180
and inside it uses some of the permissive libraries,

1680
03:34:46,180 --> 03:34:49,340
but then here you see there's no compatibility

1681
03:34:49,340 --> 03:34:51,460
between if something is released

1682
03:34:51,460 --> 03:34:52,780
with a very strong compileft,

1683
03:34:52,780 --> 03:34:57,780
then nobody can use it in a proprietary software.

1684
03:34:58,980 --> 03:35:01,500
There's also here for those who want to explore more,

1685
03:35:01,500 --> 03:35:04,660
there are this nice set of links

1686
03:35:04,660 --> 03:35:06,300
that help you, for example,

1687
03:35:06,300 --> 03:35:09,880
comparing licenses and choosing licenses.

1688
03:35:09,880 --> 03:35:10,980
There are different,

1689
03:35:10,980 --> 03:35:20,980
There are many nice tools that given you might even answer some questionnaire or what you would like to do with your license and then they can recommend you

1690
03:35:20,980 --> 03:35:25,480
with whatever type of licenses.

1691
03:35:25,480 --> 03:35:40,480
All right. So maybe I think we agreed that we will not do this exercise for the sake of speed and we can now talk when should I add a license.

1692
03:35:40,480 --> 03:35:47,120
So the best, of course, is as early as possible, like with everything else, that if you agree

1693
03:35:47,120 --> 03:35:53,760
at the beginning that you want to choose a certain license, then you choose it at the beginning.

1694
03:35:54,320 --> 03:35:59,360
It's funny that with the GitHub interface, when you create a repository from the web interface,

1695
03:35:59,360 --> 03:36:06,160
immediately it asks you, which license do you want to attach with it? So it's clear.

1696
03:36:06,160 --> 03:36:18,160
Any year I can see citations to myself, what I was saying also earlier that if you work from the very beginning as if your project is already public and open,

1697
03:36:18,160 --> 03:36:25,160
then you can already think at the very beginning that there's a license, that there's a policy,

1698
03:36:25,160 --> 03:36:35,160
because of course in this social coding part we didn't really mention this earlier but you might also want to recommend how people can contribute to the improvements of your code,

1699
03:36:35,160 --> 03:36:40,040
of your code, you can create a community around your project

1700
03:36:40,040 --> 03:36:45,040
and tools like GitHub allow you easily to create issues,

1701
03:36:45,680 --> 03:36:48,620
create discussions around your code.

1702
03:36:50,600 --> 03:36:54,320
So basically, when should you add a license?

1703
03:36:54,320 --> 03:36:55,880
As early as possible.

1704
03:36:55,880 --> 03:36:59,480
And how to add a license if your work is derivative work?

1705
03:36:59,480 --> 03:37:01,720
So basically, these tools that I mentioned earlier

1706
03:37:01,720 --> 03:37:04,280
that could check the compatibility

1707
03:37:04,280 --> 03:37:12,760
would allow you to see that if you reuse some specific package that might have permissive

1708
03:37:12,760 --> 03:37:19,280
or strong copyleft licenses, then you can see what type of license you can basically

1709
03:37:19,280 --> 03:37:22,480
attach to the code.

1710
03:37:22,480 --> 03:37:28,240
In general, maybe one comment that at least when I was asking you or saying that you are

1711
03:37:28,240 --> 03:37:34,240
in favor of more permissive licenses. What I wanted to add is that sometimes you have

1712
03:37:34,240 --> 03:37:40,280
to think that the users of your software, those who will reuse, is there other people

1713
03:37:40,280 --> 03:37:46,480
like you. So the permissive licenses, even though you might feel you are donating your

1714
03:37:46,480 --> 03:37:53,400
code to the Google, Microsoft, Meta, whatever, at the end of the day, you're just making

1715
03:37:53,400 --> 03:37:58,740
it easier for other people like you to reuse your code if you have a permissive license.

1716
03:37:58,740 --> 03:38:03,920
With more copyleft licenses, they're of course very ethical and it's nice that some projects

1717
03:38:03,920 --> 03:38:12,060
are strong copyleft and they demand that whoever uses those projects also become strong copyleft.

1718
03:38:12,060 --> 03:38:16,840
But when it comes to researchers like us, sometimes we might just make the life more

1719
03:38:16,840 --> 03:38:22,600
complicated when the researchers need to publish their code with their papers. So at the end

1720
03:38:22,600 --> 03:38:28,840
the day. If you aren't sure which one to pick, go with the most permissive licenses. Do you have any

1721
03:38:28,840 --> 03:38:40,920
comment on this? No, it was perfect coverage. Thanks. Yeah. All right. So something that I

1722
03:38:40,920 --> 03:38:48,200
think I got to see, like it's not an exact questions on the HackMD, but I get a team that

1723
03:38:48,200 --> 03:38:56,360
it's happening. Let's say sorting algorithms, right? So do someone own the sorting algorithms

1724
03:38:56,360 --> 03:39:03,800
and have license on them, or only it depends on the implementation and the code has been published?

1725
03:39:04,680 --> 03:39:10,920
Yeah. As usual, I'm not a lawyer, so I don't take my words for legal advice.

1726
03:39:11,640 --> 03:39:15,240
But in my understanding and in my discussion with legal experts,

1727
03:39:15,240 --> 03:39:26,800
add the idea of the algorithm the pseudocode is not patentable so if i write a book with pseudocode on how to do this whatever sorting method,

1728
03:39:27,100 --> 03:39:30,900
nobody can patented but in the moment that i make an implementation.

1729
03:39:30,900 --> 03:39:40,740
as a system that is reusable, kind of as a standalone system, so not just writing the pseudocode into some code,

1730
03:39:40,740 --> 03:39:50,700
then it can be patentable. So let's say that I have a web application where you copy-paste your vector of numbers and then press a button,

1731
03:39:50,700 --> 03:39:57,660
and then my web application sorts your number in a very whatever fast way then this is a system and

1732
03:39:57,660 --> 03:40:02,780
I can patent this web application for sorting numbers but if I would just have the code that

1733
03:40:02,780 --> 03:40:07,420
does the sort I would not be able to patent that but I can still protect it with the license so

1734
03:40:07,420 --> 03:40:13,660
that I can say okay you want to use my sort fast sort algorithm then I don't know use I'm going to

1735
03:40:13,660 --> 03:40:17,740
attach a very copyleft license you have to make everything open if you use it.

1736
03:40:20,300 --> 03:40:21,660
Yep, thanks.

1737
03:40:23,260 --> 03:40:26,620
Let's see if there's any other question to bring up.

1738
03:40:27,980 --> 03:40:31,580
It's nice that there's many answers already so that we don't have to.

1739
03:40:32,220 --> 03:40:35,020
Yeah, that's why I was a bit silent. I was trying to

1740
03:40:35,020 --> 03:40:44,460
to rest of my knowledge, but our other contributors to thanks everyone.

1741
03:40:44,460 --> 03:40:52,140
In general, this there's also sometimes what could happen is that things might change in

1742
03:40:52,140 --> 03:40:58,380
time. So that may be a project start with a certain license, but then for whatever reason

1743
03:40:58,380 --> 03:41:04,420
you realize that, I don't know, you really need to adopt, change the license to a more

1744
03:41:04,420 --> 03:41:09,620
copy-left one because you started using some software that has a more copy-left license.

1745
03:41:09,620 --> 03:41:15,500
Of course, licensing can change in time. It's not preferable in a sense that if you would

1746
03:41:15,500 --> 03:41:20,660
really need to apply this, you would kind of need to contact, you know, your user base

1747
03:41:20,660 --> 03:41:26,020
and tell them, okay, you've been using my code as permissive license, but from today

1748
03:41:26,020 --> 03:41:35,540
license is not permissive anymore, it becomes copy left. So of course, you might be familiar

1749
03:41:35,540 --> 03:41:41,780
yourself that the terms and conditions of whatever service that you use change in time so often that

1750
03:41:41,780 --> 03:41:51,220
nobody even reads what is the new change. So the same would also go here. So changing the license

1751
03:41:51,220 --> 03:42:02,040
is not retroactive and if someone is still using the code, does it apply to them or how

1752
03:42:02,040 --> 03:42:03,040
does it work?

1753
03:42:03,040 --> 03:42:04,040
Yeah.

1754
03:42:04,040 --> 03:42:10,520
Well, again, it depends because I would hope that it's not retroactive in a sense that

1755
03:42:10,520 --> 03:42:17,560
if a release of a certain version of a certain tool was released with, let's say, a very

1756
03:42:17,560 --> 03:42:25,240
open permissive license that i can still allow to use that you know open version of the software

1757
03:42:25,240 --> 03:42:30,680
because maybe the company decided that from version 2.0 they went full copyright you know

1758
03:42:30,680 --> 03:42:36,760
so maybe i'm still allowed to use version 1.0 but 2.0 i need to buy whatever the license from

1759
03:42:36,760 --> 03:42:42,520
the company but then there are also some other aspects maybe this is more related to data

1760
03:42:42,520 --> 03:43:05,520
that can be changes to the license of data that can be retroactive and the general data protection regulation the GDPR is one example of this so that if I released open personal data 10 years ago actually GDPR would affect the license of that data and would not allow me to keep it open anymore.

1761
03:43:05,520 --> 03:43:12,640
So, again, it depends, but it's clear, for example, for those who really are into these

1762
03:43:12,640 --> 03:43:18,240
legal matters, I would really recommend reading this paper from the European Commission where

1763
03:43:18,240 --> 03:43:24,160
they describe this type of license, the European Union Public License.

1764
03:43:24,160 --> 03:43:28,880
It's a bit of a, it's a share-alike license, so it's not in the most permissive, but it's

1765
03:43:28,880 --> 03:43:31,940
also not in the most strong copy left.

1766
03:43:31,940 --> 03:43:39,380
And what is interesting is that whatever projects related to the European Commission, they are

1767
03:43:39,380 --> 03:43:44,900
being released with this license, so that it's clear that it's for the benefit of everyone

1768
03:43:44,900 --> 03:43:52,220
that those who will reuse this code kind of make also their code in this public licensure

1769
03:43:52,220 --> 03:43:54,300
like public license.

1770
03:43:54,300 --> 03:44:00,140
And then you can basically get what other people made with your code and improve your

1771
03:44:00,140 --> 03:44:01,140
code.

1772
03:44:01,140 --> 03:44:07,620
work of course to to make sure that also the new code that you release also follows this

1773
03:44:08,420 --> 03:44:14,580
the same type of share alike license but this is kind of the best balance between you know being

1774
03:44:14,580 --> 03:44:20,900
permissive and letting other people to use as much as possible and also being more ethical

1775
03:44:20,900 --> 03:44:29,060
to kind of you know also get back from from what you give. Yeah we also we have a comment from a

1776
03:44:29,060 --> 03:44:37,700
user that like the more open licenses cannot be closed retroactively and also like if you have

1777
03:44:37,700 --> 03:44:45,300
different versions or you release a new version you can change the license but as a standard for

1778
03:44:45,300 --> 03:44:50,900
the free software you cannot change the existing license without changing that version or the code.

1779
03:44:50,900 --> 03:44:56,020
Yeah so that's what I was saying as well. Yes and one thing that I wanted to ask is

1780
03:44:56,020 --> 03:45:05,220
Do you have any comments or thoughts on multi-licensing, or do you usually use one-line sense, or what

1781
03:45:05,220 --> 03:45:06,500
is the best practice here?

1782
03:45:06,500 --> 03:45:16,820
Well, I mean, I see the point of having multi-licenses, dual licenses, because sometimes some businesses,

1783
03:45:16,820 --> 03:45:23,220
maybe in the context of academic research, maybe there's not much point, but if some

1784
03:45:23,220 --> 03:45:28,580
of the research turns into a business idea or, you know, if companies want to have a

1785
03:45:28,580 --> 03:45:38,820
mixture of copyright, private code and public, there is a benefit that, you know, if something

1786
03:45:38,820 --> 03:45:48,460
is used for, I don't know, commercial purposes, then maybe you follow a certain license. But

1787
03:45:48,460 --> 03:45:53,580
But then again, I'm also a bit conflicted with these dual licenses, because if one really

1788
03:45:53,580 --> 03:46:01,620
looks at the open source and open source software licenses, it is clear that you can't really

1789
03:46:01,620 --> 03:46:07,540
impose what people can do with your code.

1790
03:46:07,540 --> 03:46:13,380
One of the advantages of the open source software licenses is that you're not liable yourself

1791
03:46:13,380 --> 03:46:17,100
with whatever people will do, but also you can't control if people, for example, will

1792
03:46:17,100 --> 03:46:23,420
use your code for doing something malicious. You can't block them with these licenses.

1793
03:46:24,940 --> 03:46:30,220
Yeah, but I guess that the takeaway here is like you can use multiple licenses and

1794
03:46:31,580 --> 03:46:37,020
which is a good, which can be a good practice if it's suitable for your case, for your data,

1795
03:46:37,020 --> 03:46:41,420
or for yourself files. You can add a different license than the general license that you have

1796
03:46:41,420 --> 03:46:50,540
for the whole repository. All right, I guess it's time for a little break. We can come back

1797
03:46:51,180 --> 03:47:00,220
and maybe we can come back at the 14 o'clock or 14.01, 14.02. Yeah, maybe 14.02.

1798
03:47:01,020 --> 03:47:05,340
All right, so let's have a little break and we will be back in 10 minutes.

1799
03:47:11,420 --> 03:47:13,480
you

1800
03:47:41,420 --> 03:47:43,480
you

1801
03:48:11,420 --> 03:48:13,480
you

1802
03:48:41,420 --> 03:48:43,480
you

1803
03:49:11,420 --> 03:49:13,480
you

1804
03:49:41,420 --> 03:49:43,480
you

1805
03:50:11,420 --> 03:50:13,480
you

1806
03:50:41,420 --> 03:50:43,480
you

1807
03:51:11,420 --> 03:51:13,480
you

1808
03:51:41,420 --> 03:51:43,480
you

1809
03:52:11,420 --> 03:52:13,480
you

1810
03:52:41,420 --> 03:52:43,480
you

1811
03:53:11,420 --> 03:53:13,480
you

1812
03:53:41,420 --> 03:53:43,480
you

1813
03:54:11,420 --> 03:54:13,480
you

1814
03:54:41,420 --> 03:54:43,480
you

1815
03:55:11,420 --> 03:55:13,480
you

1816
03:55:41,420 --> 03:55:43,480
you

1817
03:56:11,420 --> 03:56:13,480
you

1818
03:56:41,420 --> 03:57:11,380
How about one on welcome back?

1819
03:57:11,380 --> 03:57:17,300
to the social coding section. We already talked about social coding and sharing your code and

1820
03:57:17,300 --> 03:57:25,460
also a bit of about licensing. Now we want to talk about software citations. We talked about

1821
03:57:25,460 --> 03:57:30,100
how code is a bit different than papers and why there are different things that you have to

1822
03:57:30,100 --> 03:57:36,980
consider and citation is one of the things which maybe is more similar and also a bit different

1823
03:57:36,980 --> 03:57:42,980
then paper citations, I would say. So here in the screen, you can see we want to talk about

1824
03:57:42,980 --> 03:57:47,380
FAIR principles first. So [name], what is FAIR principles?

1825
03:57:48,020 --> 03:57:53,940
Yeah, so we touched on this FAIR principles also in the morning when it comes to the reproducibility.

1826
03:57:54,660 --> 03:58:00,580
And basically the FAIR principle is like, you know, the acronyms would be findable,

1827
03:58:00,580 --> 03:58:08,020
accessible interoperable and reusable and now while this maybe is kind of easy to understand

1828
03:58:08,020 --> 03:58:14,980
when it comes to data because of course you want your data set to be findable by whatever search

1829
03:58:14,980 --> 03:58:22,820
system accessible whether it is fully open or open on request so but at least there is a way

1830
03:58:22,820 --> 03:58:28,580
to access it interoperable which means that you can work with other tools it's in a format that

1831
03:58:28,580 --> 03:58:34,180
other softwares can open it and read it and reusable so that there is like we just discussed

1832
03:58:34,180 --> 03:58:40,820
a license that would give some principles on how to reuse this to reuse it the same

1833
03:58:42,020 --> 03:58:47,140
pair principle for data they can also be extended to software and so again that people can find

1834
03:58:47,140 --> 03:58:53,300
your software that they can access it they can download it interoperable so that it works with

1835
03:58:53,300 --> 03:59:01,460
data system and that there is a clear way on how to reuse it with clear licenses attached

1836
03:59:01,460 --> 03:59:03,980
to the software, for example.

1837
03:59:03,980 --> 03:59:12,220
So again, because sometimes people you might think, okay, I put my software, my scripts

1838
03:59:12,220 --> 03:59:17,500
that I've done for this paper, I put them in my university homepage or they are on GitHub

1839
03:59:17,500 --> 03:59:19,480
and that's it.

1840
03:59:19,480 --> 03:59:25,640
always need to think a little bit long term. And I have to mention actually that me, myself,

1841
03:59:25,640 --> 03:59:32,920
I decided to use some GitHub repository from the university and then that repository is

1842
03:59:32,920 --> 03:59:38,120
not there anymore. So now I have published paper that are pointed to some Git repository

1843
03:59:38,120 --> 03:59:44,080
hosted by a department that doesn't exist anymore. And so once in a while I get questions

1844
03:59:44,080 --> 03:59:48,960
where is the code now, you know. So there was a mistake on my side that I didn't actually

1845
03:59:48,960 --> 03:59:55,760
create a so-called DOI, Digital Object Identifier, or PID, Persistent Identifier,

1846
03:59:56,480 --> 04:00:02,240
because if I would have done that, another organization would have taken care of preserving

1847
04:00:02,240 --> 04:00:09,920
my software for as many years as we can think of. And so what we see here in this make your code

1848
04:00:09,920 --> 04:00:15,520
citable and persistent, the persistent part is exactly this. It's not enough to put it on your

1849
04:00:15,520 --> 04:00:22,400
web page or to put it on github because github maybe will change your account will be i don't

1850
04:00:22,400 --> 04:00:26,960
know maybe you decide to delete your account and with that all your repository or by accident you

1851
04:00:26,960 --> 04:00:33,920
even delete a repository because you thought that that was just a side project so there are services

1852
04:00:33,920 --> 04:00:42,480
like zenodo which is hosted by cern and with zenodo you can basically get a digital object

1853
04:00:42,480 --> 04:00:48,320
identifier for anything digital it can be the software release for example or it can also be

1854
04:00:48,320 --> 04:00:56,880
used for for data sets that can be published. And so what is nice about this Zenodo repository

1855
04:00:56,880 --> 04:01:04,720
is that it automatically can be linked with your open with your available GitHub repositories

1856
04:01:04,720 --> 04:01:12,240
so that whenever you create a release on your GitHub project repository Zenodo can actually

1857
04:01:12,240 --> 04:01:18,640
automatically basically pull the new release so that you can basically have a permanent copy of

1858
04:01:18,640 --> 04:01:28,960
your GitHub releases stored in the CERN data center. Have you ever published this type of

1859
04:01:28,960 --> 04:01:37,280
DOI or have you helped anyone with this type of getting a DOI for a software or SANE?

1860
04:01:37,280 --> 04:01:45,880
Yeah, we were helping a researcher to publish the code and we had to use that and also explain

1861
04:01:45,880 --> 04:01:54,640
the things that you already explained about why it's important to just have a DOI and

1862
04:01:54,640 --> 04:02:00,440
it's not enough to only host it on your personal GitHub account because in 10 years GitHub can

1863
04:02:00,440 --> 04:02:01,440
go down, right?

1864
04:02:01,440 --> 04:02:02,440
We don't know.

1865
04:02:02,440 --> 04:02:03,440
Yeah.

1866
04:02:03,440 --> 04:02:09,360
And people and researchers are already familiar with this because it's also a very similar

1867
04:02:09,360 --> 04:02:14,000
aspect in publishing your paper as well. It's not enough to publish your PDF or

1868
04:02:14,000 --> 04:02:19,760
PDF of your research on your personal website or Google Drive. You have to have a DOI

1869
04:02:21,200 --> 04:02:27,120
to make it persistent for the future. Yeah, it's also nice that the interface that

1870
04:02:27,120 --> 04:02:33,920
comes with the Zenodo website. If you see, if you search for some software, you can actually

1871
04:02:33,920 --> 04:02:39,120
look at some metrics. Again, we don't do this for the metrics, but sometimes the metrics help us,

1872
04:02:39,840 --> 04:02:48,960
whatever motivate our bosses, that you can look at metrics like number of downloads and number

1873
04:02:48,960 --> 04:02:55,360
of citations so that, you know, you can also kind of quantify a little bit impact that your

1874
04:02:55,360 --> 04:03:02,320
software or scripts might have. What is here now it is a checklist. Checklists are always useful

1875
04:03:02,320 --> 04:03:09,360
because they're practical and you can basically see what is needed to make your software citable

1876
04:03:10,880 --> 04:03:19,040
and so assigning appropriate license like we mentioned before the break then we want to

1877
04:03:19,040 --> 04:03:26,960
to have a description of the software so that there is appropriate metadata format, clear

1878
04:03:26,960 --> 04:03:34,200
version numbers, authors are credited, we get this persistent identifier like the DOI,

1879
04:03:34,200 --> 04:03:41,680
and then even sometimes we won't tell in the software which publication to cite, because

1880
04:03:41,680 --> 04:03:46,960
in some cases some publications might be related, the so-called software packages publications,

1881
04:03:46,960 --> 04:03:51,600
some other cases the main publication is about let's say some application of the software but

1882
04:03:51,600 --> 04:03:59,920
still you release the software along with the original publication. Recently there's

1883
04:04:02,400 --> 04:04:07,760
there's also the way that through your on your github repository you can also like a so-called

1884
04:04:07,760 --> 04:04:16,640
machine readable software citation file so cff citation file format and it basically looks

1885
04:04:16,640 --> 04:04:22,480
something like this. So machine readable means that a computer, another computer can automatically

1886
04:04:22,480 --> 04:04:28,000
read and you see that these are like variables with the names and the values and some can be

1887
04:04:28,000 --> 04:04:36,480
you know structure. It looks a bit like this yaml files and so this pre kind of fixed

1888
04:04:36,480 --> 04:04:43,120
metadata about the software makes it easier and makes especially if you have you know search

1889
04:04:43,120 --> 04:04:50,320
and genes or or specific publication and genes that it's easy for these other tools to basically

1890
04:04:50,320 --> 04:04:55,760
index your software and make it findable and accessible and so on with the FAIR principles.

1891
04:04:57,040 --> 04:05:02,720
GitHub now supports this citation cff files so if you name the file with this

1892
04:05:03,760 --> 04:05:11,040
exactly like a citation.cff it can already be automatically interpreted by by GitHub and here

1893
04:05:11,040 --> 04:05:17,360
there's some like a video how to create it and even a web but in practice if you are from if

1894
04:05:17,360 --> 04:05:23,040
you're fine with that with using some text editor it's you can even take just this template and

1895
04:05:24,400 --> 04:05:31,840
and reuse it so anything else to add was is there anything in the notes document worth

1896
04:05:32,480 --> 04:05:40,160
uh no we don't have any questions or comments till now all right well then in general also

1897
04:05:40,160 --> 04:05:44,100
So this is one way to get your citations with the software.

1898
04:05:44,100 --> 04:05:49,580
But in some cases, maybe your software, the contribution that you and your research group

1899
04:05:49,580 --> 04:05:55,560
add to the software can be substantial so that there can be papers that are truly about

1900
04:05:55,560 --> 04:05:56,960
software.

1901
04:05:56,960 --> 04:06:00,540
So full papers that they describe software packets.

1902
04:06:00,540 --> 04:06:05,320
And then there are specific journals that accept this type of software papers.

1903
04:06:05,320 --> 04:06:10,060
So then if I can kind of call back of someone was mentioning that sometimes software is

1904
04:06:10,060 --> 04:06:15,300
not peer-reviewed, with this type of work you can understand that it's the software

1905
04:06:15,300 --> 04:06:18,660
even more important than the actual paper.

1906
04:06:18,660 --> 04:06:24,860
And so it might go to more extensive peer-review and checks and compatibility and so on.

1907
04:06:24,860 --> 04:06:30,220
At the end of the day, like Jose mentioned earlier, it's maybe not the actual work of

1908
04:06:30,220 --> 04:06:32,060
the two or three peer reviewers,

1909
04:06:32,060 --> 04:06:33,660
but it's really the community

1910
04:06:33,660 --> 04:06:36,180
that is around the software project.

1911
04:06:36,180 --> 04:06:40,100
So if these larger packages,

1912
04:06:40,100 --> 04:06:42,660
they have a big community around

1913
04:06:42,660 --> 04:06:44,660
and we can all be part of that community,

1914
04:06:44,660 --> 04:06:47,940
whether it's just fixing a typo in the documentation

1915
04:06:47,940 --> 04:06:52,940
or working on a new release with the main developers,

1916
04:06:53,580 --> 04:06:57,260
so that the peer review is truly a dynamic process

1917
04:06:57,260 --> 04:06:58,820
that basically never ends.

1918
04:06:58,820 --> 04:07:04,820
not that when this software was published in 2021, it has not been touched. I'm sure that

1919
04:07:04,820 --> 04:07:09,460
it has improved in the meantime and it has evolved and gotten better and better.

1920
04:07:13,060 --> 04:07:20,580
One note that I wanted to add is like the papers that only talking about the software are becoming

1921
04:07:20,580 --> 04:07:29,620
more popular nowadays. And at least for a lot of Python libraries, all libraries, you can see

1922
04:07:29,620 --> 04:07:34,580
they publish the paper. And it's also good for the researchers as well, because they get

1923
04:07:34,580 --> 04:07:40,500
many, many citations, which is maybe not the case for your scientific papers. So consider

1924
04:07:40,500 --> 04:07:44,820
on publishing the paper for your code as well, which is becoming more popular nowadays.

1925
04:07:44,820 --> 04:07:52,260
Yeah, and it's true. And it's nice that maybe this type of metrics like, you know, maybe

1926
04:07:52,260 --> 04:07:58,980
right now in the CV, in some standard CV that might not yet be space for your software packages,

1927
04:07:58,980 --> 04:08:03,980
but these are catching up. So I can mention in Finland, there is the tank CV, which is

1928
04:08:03,980 --> 04:08:09,740
one format used by the Finnish grant agencies. And already they would have a section right

1929
04:08:09,740 --> 04:08:14,820
now they have a section right now that where one can add this type of extra non-typical

1930
04:08:14,820 --> 04:08:19,740
paper type of publications or like software.

1931
04:08:19,740 --> 04:08:24,960
All right so we still have 10 minutes left and then of course we will ask about the feedback

1932
04:08:24,960 --> 04:08:33,980
of the day. The last part is about sharing data. Now there are many and better and more

1933
04:08:33,980 --> 04:08:43,100
extensive talks online on sharing data because as you can understand when it comes we discussed

1934
04:08:43,100 --> 04:08:47,980
a lot about software sharing and contributing and reuse it but all the same could be said

1935
04:08:47,980 --> 04:08:55,580
about data that sometimes we might wanna have a data set that is truly copyrighted and so

1936
04:08:55,580 --> 04:09:00,540
nobody else can access and they need to ask you for a license or maybe they need to pay you

1937
04:09:00,540 --> 04:09:06,620
you. But some other times we might have a data set that you can fully release opening

1938
04:09:06,620 --> 04:09:13,020
whether because you decide to do so with your employer with your supervisor and of course

1939
04:09:13,020 --> 04:09:19,300
everything in between where you might want like we had this share alike for the software

1940
04:09:19,300 --> 04:09:25,380
the same would be for the data that you share the data but any derivative work done with

1941
04:09:25,380 --> 04:09:30,540
and the data should also be released with a similar license, for example.

1942
04:09:30,740 --> 04:09:35,980
So when it comes to this, where to actually share the data,

1943
04:09:36,180 --> 04:09:41,740
what type of options are there, this Zenodo repository is also mentioned in this case.

1944
04:09:41,940 --> 04:09:46,860
In Zenodo, it's not just about sharing the release of your software,

1945
04:09:47,060 --> 04:09:50,820
but you can share all sorts of data and it's really nice that you can also share

1946
04:09:50,820 --> 04:09:58,980
slides and white papers or anything that you feel like that can contribute to your scientific

1947
04:09:58,980 --> 04:10:06,020
community. But Zenodo is not the only one and so there are these other services. I'd like to at

1948
04:10:06,020 --> 04:10:14,420
least mention the Open Science Framework that allows to do this type of sharing of nice dataset.

1949
04:10:14,420 --> 04:10:20,420
But in international context, the Open Science Framework is hosted in the United States,

1950
04:10:20,420 --> 04:10:29,340
Ferrari members, Zenodo is in Switzerland, Figshare I think now is bought by Naturespringer,

1951
04:10:29,340 --> 04:10:38,340
EU.is basically EOSC or European platform, and Dryad is also, I don't think it's public

1952
04:10:38,340 --> 04:10:48,180
anymore, or they might give you a non-profit, like a small, how do you call, freemium license.

1953
04:10:48,180 --> 04:10:55,160
But here then we will not go through this, but different countries, at least in the Nordics

1954
04:10:55,160 --> 04:11:00,460
where most of you are right now, there are different national services for sharing the

1955
04:11:00,460 --> 04:11:10,300
data and there are also resources for the so-called data management. Now again we will not expand

1956
04:11:10,300 --> 04:11:17,820
much on here but if you think that if git was using for keeping versioning versions of your code

1957
04:11:17,820 --> 04:11:23,740
the same could be done with data so that you can version the version of the data set because you

1958
04:11:23,740 --> 04:11:30,140
had version 1.0 that had some I don't know outliers but then you have version 2.0 where

1959
04:11:30,140 --> 04:11:33,300
where you clean the data, remove the outliers and so on.

1960
04:11:33,300 --> 04:11:35,900
So these type of tools like Data Lad,

1961
04:11:35,900 --> 04:11:39,160
Data Stewardship Wizard, Git Annex,

1962
04:11:39,160 --> 04:11:41,540
that is not mentioned here, but it's Prattix Data Lad,

1963
04:11:41,540 --> 04:11:45,500
so they can help you basically keep also the versioning

1964
04:11:45,500 --> 04:11:49,320
of the data and not just of the code.

1965
04:11:49,320 --> 04:11:52,380
And then when it comes to the licensing of data sets

1966
04:11:52,380 --> 04:11:57,340
and databases which are a specific type of data set,

1967
04:11:57,340 --> 04:12:02,340
there are different legislation that can cover this.

1968
04:12:02,540 --> 04:12:06,300
And similarly, as we had for software,

1969
04:12:06,300 --> 04:12:08,980
we can have something that is in the full spectrum

1970
04:12:08,980 --> 04:12:12,100
from completely open public domain

1971
04:12:12,100 --> 04:12:15,980
to completely private copyright.

1972
04:12:17,040 --> 04:12:21,700
So the type of licenses that you hear about data,

1973
04:12:21,700 --> 04:12:23,820
there's so-called creative common licenses.

1974
04:12:23,820 --> 04:12:25,900
There are different flavors

1975
04:12:25,900 --> 04:12:29,260
with the CC0 being the so-called public domain

1976
04:12:29,260 --> 04:12:31,300
where it's as open as possible,

1977
04:12:31,300 --> 04:12:34,300
people can reuse and they don't even need to cite you.

1978
04:12:34,300 --> 04:12:36,660
And then more kind of restrictions

1979
04:12:36,660 --> 04:12:37,980
on the reuse of the data,

1980
04:12:37,980 --> 04:12:41,060
which could be that people need to cite you

1981
04:12:41,060 --> 04:12:45,380
or people cannot do commercial work with that

1982
04:12:45,380 --> 04:12:49,940
or this share alike that people need to re-share

1983
04:12:49,940 --> 04:12:51,300
what they did with the data

1984
04:12:51,300 --> 04:12:55,800
as you are doing with the data and basically so on.

1985
04:12:55,900 --> 04:13:02,240
When it comes to the machine learning and AI,

1986
04:13:02,240 --> 04:13:05,520
things are of course getting a little bit more complicated.

1987
04:13:05,520 --> 04:13:09,940
Machine learning models are impracticed data,

1988
04:13:09,940 --> 04:13:13,500
so the model, the weights on its own,

1989
04:13:13,500 --> 04:13:15,820
they can't really be,

1990
04:13:15,820 --> 04:13:18,420
you can't do much with those unless you

1991
04:13:18,420 --> 04:13:22,060
have a system to basically run the models and whether you

1992
04:13:22,060 --> 04:13:24,220
are generating data or

1993
04:13:24,220 --> 04:13:29,760
classifying whatever you're classifying but what is tricky and at least what is

1994
04:13:29,760 --> 04:13:34,480
a bit blurred right now here in the context of AI and machine learning

1995
04:13:34,480 --> 04:13:40,960
models is that sometimes you hear things like open source models or open source

1996
04:13:40,960 --> 04:13:45,840
language models but if one really would kind of look at the definition of open

1997
04:13:45,840 --> 04:13:51,040
source they are actually not open source they sometimes people call open weights

1998
04:13:51,040 --> 04:13:55,960
so that the models, the weights, the actual file,

1999
04:13:55,960 --> 04:13:57,520
you can download it and reuse it,

2000
04:13:57,520 --> 04:14:01,160
but you have no idea of how that model was done.

2001
04:14:01,160 --> 04:14:04,160
So everything else basically around the model

2002
04:14:04,160 --> 04:14:06,300
is actually not open at all.

2003
04:14:07,400 --> 04:14:11,260
Here, it mentions this Artificial Intelligence Act,

2004
04:14:11,260 --> 04:14:13,760
which was became entering into force

2005
04:14:13,760 --> 04:14:16,260
on the 1st of August of this year.

2006
04:14:16,260 --> 04:14:20,520
And the AI Act adds some basically restrictions

2007
04:14:20,520 --> 04:14:25,460
on what the researchers even can basically open.

2008
04:14:25,460 --> 04:14:27,800
If you're not planning to open anything

2009
04:14:27,800 --> 04:14:30,380
related to your AI models,

2010
04:14:30,380 --> 04:14:33,660
basically the AI act lets you do whatever you want.

2011
04:14:33,660 --> 04:14:36,560
But in the moment that you need to start sharing your model,

2012
04:14:36,560 --> 04:14:40,280
you need to basically see if your type

2013
04:14:40,280 --> 04:14:42,760
of machine learning model would fall inside

2014
04:14:42,760 --> 04:14:47,440
of this so-called high risk or prohibited AI systems.

2015
04:14:47,440 --> 04:14:52,760
And of course, there are different, how can I say, obligations. There are different legal

2016
04:14:52,760 --> 04:14:58,240
obligations depending on what type of artificial intelligence systems you might be working

2017
04:14:58,240 --> 04:15:06,760
on. In general, we have some material on these new topics that we will expand on this page.

2018
04:15:06,760 --> 04:15:14,680
But if you have questions, of course, please write them down in the chat. And then many

2019
04:15:14,680 --> 04:15:20,680
nice links here that would be nice to browse together, but our time is soon over.

2020
04:15:20,680 --> 04:15:27,680
I was saying, do you have any comments or is there anything to highlight from the notes?

2021
04:15:27,680 --> 04:15:38,160
No. In the notes, we don't have any direct question to sharing data. We had some questions

2022
04:15:38,160 --> 04:15:45,600
about software citations and some about like accounts, but not about sharing data.

2023
04:15:46,640 --> 04:15:53,600
And yeah, it was completely good. If you want to pick, if you need to choose one of these

2024
04:15:53,600 --> 04:15:59,600
further readings and you have time to go deeper into all this reproducible research, opening data

2025
04:15:59,600 --> 04:16:04,800
and opening software, I really recommend this Turing Way, which is an open book on all these

2026
04:16:04,800 --> 04:16:11,360
topics. It's a nice read. You can read it. It's open. You can read it on your mobile phone during

2027
04:16:11,360 --> 04:16:19,920
your commute. So if you really need to pick one, I recommend the first one. And in general,

2028
04:16:19,920 --> 04:16:25,760
I mean, it's nice that we are building a community together through Code Refinery.

2029
04:16:25,760 --> 04:16:32,560
If you explore our pages, you can also get access to a chat. And in the chats that we use,

2030
04:16:32,560 --> 04:16:38,320
is called Zulip and through the Zulip chat you can join discussions. We can continue discussions

2031
04:16:38,320 --> 04:16:46,640
on these topics and we have all sorts of discussions there so that is something nice.

2032
04:16:46,640 --> 04:16:51,680
We already saw some participants from this workshop have already joined the Code Refinery chat.

2033
04:16:52,640 --> 04:16:58,880
All right, so we still have eight minutes which is a good moment for asking for feedback.

2034
04:16:58,880 --> 04:17:06,240
so it would be great if on the notes we could paste the usual feedback for the day

2035
04:17:07,280 --> 04:17:09,680
if this was too fast too slow

2036
04:17:12,080 --> 04:17:15,200
and i see that they are already there i could actually switch

2037
04:17:16,240 --> 04:17:21,200
to the notes view with my movie director interface

2038
04:17:21,200 --> 04:17:38,640
And so yes, as usual, even though we give similar lessons over the years, they're never

2039
04:17:38,640 --> 04:17:44,680
exactly the same, the phases are changing, we might update the lesson a little bit, and

2040
04:17:44,680 --> 04:17:50,960
of course what makes this unique is your questions and your experience, so please give us feedback

2041
04:17:50,960 --> 04:17:56,320
and if there's something you want to you think that we could have covered more or

2042
04:17:56,320 --> 04:18:08,640
less please write it down. Then tomorrow we have we have the fifth day of the

2043
04:18:08,640 --> 04:18:15,920
workshop and tomorrow the topic will be documentation which is kind of somewhat

2044
04:18:15,920 --> 04:18:21,920
related with the topics of the day so because along with the license you also want to tell

2045
04:18:21,920 --> 04:18:28,640
people not just how to use your code but also how to maybe you know expand it, contribute to it

2046
04:18:28,640 --> 04:18:34,240
and so on. And then the second part of tomorrow will be about Jupyter notebooks. Maybe some of

2047
04:18:34,240 --> 04:18:41,280
you are already familiar with this way of interacting with code and data and hopefully

2048
04:18:41,280 --> 04:18:47,120
for those who have never experienced this, it's something you can try out. Again, tomorrow

2049
04:18:47,120 --> 04:18:57,380
will be like a demo day, so you're not expected to actually, you know, run things, but if

2050
04:18:57,380 --> 04:19:05,000
you want to actually do and see what people are doing, whether you want to build the documentation,

2051
04:19:05,000 --> 04:19:09,240
and it's not just about documentation, because with the same system that will be introduced

2052
04:19:09,240 --> 04:19:11,260
Tomorrow you can also, it's the same system

2053
04:19:11,260 --> 04:19:13,380
that we use to build our web pages,

2054
04:19:13,380 --> 04:19:15,060
our training materials,

2055
04:19:15,060 --> 04:19:18,180
they're all built with this same system.

2056
04:19:18,180 --> 04:19:21,700
And so, you can also learn how to create your website,

2057
04:19:21,700 --> 04:19:26,660
for example, under this github.io if you want.

2058
04:19:26,660 --> 04:19:29,180
And so, if you wanna test these things,

2059
04:19:29,180 --> 04:19:32,060
you please follow our installation instructions

2060
04:19:33,100 --> 04:19:35,740
if you're planning to do that.

2061
04:19:35,740 --> 04:19:48,740
All right. I think I see that people are commenting. Is there anything to highlight? Let me have a look at the chat.

2062
04:19:48,740 --> 04:19:57,900
Um, based on the feedback, uh, I think a place where that was on track,

2063
04:19:58,580 --> 04:20:01,580
if I was satisfied with the speed and although like some, we have some

2064
04:20:01,580 --> 04:20:06,020
comments that, uh, it was a bit too fast and there were like many topics

2065
04:20:06,020 --> 04:20:10,940
that we had to cover and, uh, unfortunately maybe it was a bit too

2066
04:20:10,940 --> 04:20:14,780
fast if you don't have the required background or if you're not familiar

2067
04:20:14,780 --> 04:20:17,980
with it, with the subject, it can be a bit overwhelming.

2068
04:20:17,980 --> 04:20:27,620
This is exactly why we decided almost a year ago to not having exercises in this week too,

2069
04:20:27,620 --> 04:20:32,980
because sometimes not only there's lots of new topics, on top of those try to run snake

2070
04:20:32,980 --> 04:20:43,300
make locally or building a Zenodo repository or how do you call it, getting a DOI through

2071
04:20:43,300 --> 04:20:49,700
there's another sandbox so we hopefully this is a little bit more digestible and useful

2072
04:20:49,700 --> 04:20:54,980
and of course we provide you with all these links and other resources that those who really

2073
04:20:54,980 --> 04:21:02,060
have time can can try themselves and please join our Zulip chat so that we can continue

2074
04:21:02,060 --> 04:21:06,540
discussing there and helping you there if you want to try these things and you need

2075
04:21:06,540 --> 04:21:11,540
further help.

2076
04:21:11,540 --> 04:21:16,540
All right.

2077
04:21:16,540 --> 04:21:21,540
So hopefully this was a good day for and

2078
04:21:21,540 --> 04:21:26,540
I can maybe add also a reminder that day six will be more about

2079
04:21:26,540 --> 04:21:31,540
coding related things. We will cover things like automated testing

2080
04:21:31,540 --> 04:21:40,580
and modular code development and then again if you want to do or if you want to try the exercises

2081
04:21:40,580 --> 04:21:47,140
that the instructors are going to show on the stream you can also you should basically also

2082
04:21:47,140 --> 04:21:53,220
install what we recommend in our installation pages but then again it's just fine to participate

2083
04:21:53,220 --> 04:22:00,740
through the questions and thank you again for the many questions there's almost 50 today so

2084
04:22:00,740 --> 04:22:06,340
it was great that you were so active. Also, thanks for the participants who

2085
04:22:06,340 --> 04:22:13,300
were active in answering other questions. Thanks. I see one question that is for me that is related

2086
04:22:13,300 --> 04:22:22,340
to the one ECTS credit. And so, yes, in this case, I tried to be as clear as possible on that page,

2087
04:22:22,340 --> 04:22:28,020
but if something is not clear, I'm happy to expand it. In practice, this means that if you

2088
04:22:28,020 --> 04:22:36,220
you are sure that your supervisor or study coordinator or whoever is able to accept a

2089
04:22:36,220 --> 04:22:42,220
kind of an official paper from me that says that this person has completed the Code Refinery

2090
04:22:42,220 --> 04:22:49,940
workshop, there are very simple homework to do for getting the certificate, then I will

2091
04:22:49,940 --> 04:22:55,700
give you this document and then you can convert that into a credit.

2092
04:22:55,700 --> 04:23:00,820
And if you are at Aalto University, you just need to give me your student number and I

2093
04:23:00,820 --> 04:23:06,660
will add the credit for you on our system.

2094
04:23:06,660 --> 04:23:13,660
But in general, we don't track if you were attending, you know, whatever days you were

2095
04:23:13,660 --> 04:23:14,660
attending.

2096
04:23:14,660 --> 04:23:21,780
As long as you do the homeworks, we can, you know, we can give you, we can give you the

2097
04:23:21,780 --> 04:23:22,780
credit.

2098
04:23:22,780 --> 04:23:34,860
Okay, so let's see if there's any other quick question to pick.

2099
04:23:34,860 --> 04:23:43,220
We still have one minute and a half.

2100
04:23:43,220 --> 04:23:58,060
Yeah, I think most of the things are uncertain.

2101
04:23:58,060 --> 04:24:04,580
All right, maybe we can call it a day, one minute earlier, and thank you for watching.

2102
04:24:04,580 --> 04:24:11,340
The recordings will appear immediately on Twitch TV and later on the week on our YouTube

2103
04:24:11,340 --> 04:24:16,020
channels and so see you tomorrow for day 5 of Code Refinery.

2104
04:24:16,020 --> 04:24:19,860
Thank you [name] for being here with me and thank you everyone for watching.

2105
04:24:19,860 --> 04:24:22,020
Thank you everyone for joining.

2106
04:24:22,020 --> 04:24:23,020
Bye.

2107
04:24:23,020 --> 04:24:23,520
Bye bye.

2108
04:24:41,340 --> 04:24:43,400
you

2109
04:25:11,340 --> 04:25:13,400
you

2110
04:25:41,340 --> 04:25:43,400
you

2111
04:26:11,340 --> 04:26:13,400
you

2112
04:26:41,340 --> 04:26:43,400
you

