1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,000
You

10
00:08:30,000 --> 00:08:35,000
♪

11
00:08:35,000 --> 00:08:40,000
♪

12
00:08:40,000 --> 00:08:45,020
♪

13
00:08:45,020 --> 00:08:50,020
♪

14
00:08:50,020 --> 00:08:55,020
♪

15
00:08:55,020 --> 00:08:58,180
Is it better now?

16
00:08:58,180 --> 00:09:01,300
Yeah, now I can hear myself.

17
00:09:01,300 --> 00:09:03,980
OK, so we were muted.

18
00:09:03,980 --> 00:09:06,500
Let's start again.

19
00:09:06,500 --> 00:09:11,620
Basically, hello, everybody, and welcome to the day four.

20
00:09:11,620 --> 00:09:14,340
Today is an exciting day for me, because for the first time,

21
00:09:14,340 --> 00:09:19,780
I will be the movie director controlling the streaming.

22
00:09:19,780 --> 00:09:21,700
And as you might have just noticed,

23
00:09:21,700 --> 00:09:29,420
I forgot to unmute ourselves, but I guess now you can hear us.

24
00:09:29,420 --> 00:09:35,620
And we were just chitchatting about reproducibility before we actually get started.

25
00:09:35,620 --> 00:09:41,740
The faces that you see here today are those who will talk about reproducibility and so-called

26
00:09:41,740 --> 00:09:45,580
social coding and licenses later in the day.

27
00:09:45,580 --> 00:09:51,020
So that's me, [name], and [name], and [name], and [name].

28
00:09:51,020 --> 00:09:56,860
We're all from Aalto University, and we're basically working together here at Aalto.

29
00:09:56,860 --> 00:09:57,860
Hello.

30
00:09:57,860 --> 00:09:58,860
Hey.

31
00:09:58,860 --> 00:10:04,260
So we still have a few minutes before...

32
00:10:04,260 --> 00:10:08,140
Should we make an audio level check?

33
00:10:08,140 --> 00:10:09,140
Yeah.

34
00:10:09,140 --> 00:10:13,020
If my audio is still up there.

35
00:10:13,020 --> 00:10:23,380
To me, you sound a bit loud, but I'm going to say 1, [name] says 2, [name] says 3 and

36
00:10:23,380 --> 00:10:25,140
Osain says 4.

37
00:10:25,140 --> 00:10:37,220
So 1, 2, 3, 4, 1, 2, 3, 4.

38
00:10:37,220 --> 00:10:40,540
So let's hear, let's see if anyone can give us feedback.

39
00:10:40,540 --> 00:10:43,460
So yeah, I would also say Tim was a little bit louder

40
00:10:43,460 --> 00:10:45,740
than [name] and [name].

41
00:10:45,740 --> 00:10:50,140
But yeah, we tried it earlier, and there

42
00:10:50,140 --> 00:10:54,860
wasn't any real change in the audio volumes from then.

43
00:10:54,860 --> 00:10:59,300
But that's interesting, because I basically

44
00:10:59,300 --> 00:11:02,260
halved my input gain.

45
00:11:02,260 --> 00:11:09,540
So I don't know if Zoom is kind of like compensating the maybe.

46
00:11:09,540 --> 00:11:13,980
Did you change it in Zoom, or did you change it on your system?

47
00:11:13,980 --> 00:11:15,860
Hardware.

48
00:11:15,860 --> 00:11:18,460
Because Zoom sometimes has its own gain changes.

49
00:11:25,420 --> 00:11:32,220
Well, but it's actually the Zoom doesn't let me.

50
00:11:34,820 --> 00:11:38,740
Yeah, and it's compensating.

51
00:11:38,740 --> 00:11:42,740
Yeah, basically, someone is writing in the notes that [name] is a little bit quiet.

52
00:11:42,740 --> 00:11:44,740
Should I try to...

53
00:11:44,740 --> 00:11:46,740
Oh, hey, there is an...

54
00:11:46,740 --> 00:11:48,740
Is this any better?

55
00:11:48,740 --> 00:11:50,740
Yeah.

56
00:11:50,740 --> 00:11:52,740
Yeah.

57
00:11:52,740 --> 00:11:54,740
Okay, now I can, because there was...

58
00:11:54,740 --> 00:11:56,740
Now [name] is getting quieter.

59
00:11:56,740 --> 00:11:58,740
Now you're quiet.

60
00:11:58,740 --> 00:12:00,740
Yeah, because the zoom was compensating.

61
00:12:00,740 --> 00:12:02,740
Yeah.

62
00:12:02,740 --> 00:12:06,740
Now you're, I think, a little bit too quiet, actually.

63
00:12:06,740 --> 00:12:10,100
Maybe now.

64
00:12:10,100 --> 00:12:11,100
Keep talking.

65
00:12:11,100 --> 00:12:12,100
I can.

66
00:12:12,100 --> 00:12:13,100
I can.

67
00:12:13,100 --> 00:12:14,100
Yeah.

68
00:12:14,100 --> 00:12:15,100
I can keep talking and I will.

69
00:12:15,100 --> 00:12:16,100
[name], could you say something?

70
00:12:16,100 --> 00:12:17,100
Check.

71
00:12:17,100 --> 00:12:18,100
Check.

72
00:12:18,100 --> 00:12:19,100
Hello.

73
00:12:19,100 --> 00:12:20,100
Hello.

74
00:12:20,100 --> 00:12:21,100
Check.

75
00:12:21,100 --> 00:12:22,100
Check.

76
00:12:22,100 --> 00:12:23,100
Check.

77
00:12:23,100 --> 00:12:24,100
Check.

78
00:12:24,100 --> 00:12:25,100
Yeah.

79
00:12:25,100 --> 00:12:26,100
I think it's quite balanced now.

80
00:12:26,100 --> 00:12:27,100
Yeah.

81
00:12:27,100 --> 00:12:28,100
And of course we can improve on the way.

82
00:12:28,100 --> 00:12:29,100
So before we actually start, we still have three minutes.

83
00:12:29,100 --> 00:12:35,180
So actually, actually in the, in the end or in the beginning, my settings were perfect.

84
00:12:35,180 --> 00:12:39,180
consume compensating. Of course, we always blame the technology.

85
00:12:42,460 --> 00:12:50,700
So there are three icebreakers in this notes document. So if you open the notes document that

86
00:12:50,700 --> 00:12:56,540
you at least receive in your emails when you register, which is the same notes document that

87
00:12:56,540 --> 00:13:02,700
we were using also last week during the Git part. So there are three questions related to the topic

88
00:13:02,700 --> 00:13:09,980
of the day, kind of reproducibility at large. And maybe specifically the way we talk today is

89
00:13:09,980 --> 00:13:17,020
the so-called computational reproducibility. So can you recreate, are you able to rerun the same

90
00:13:17,020 --> 00:13:24,140
software and hopefully re-obtain the same results? I don't know. How is your experience

91
00:13:24,140 --> 00:13:29,100
with reproducibility? Have you ever faced challenges, [name], for example?

92
00:13:29,100 --> 00:13:47,100
Yes, which started from not having any code for something and trying to do it from the paper and then noticing that there is a mixed up lower equal, which should be a larger equal sign, or having a data model that's provided as a PDF.

93
00:13:47,100 --> 00:13:55,100
Which is kind of, okay, this is almost completely useless, because you can't really parse that easily.

94
00:13:55,100 --> 00:13:59,100
Yeah, plenty of that.

95
00:13:59,100 --> 00:14:06,100
And then a code base without documentation.

96
00:14:06,100 --> 00:14:13,100
So it's really hard to do anything with just a code base.

97
00:14:13,100 --> 00:14:15,100
Yeah.

98
00:14:15,100 --> 00:14:21,100
Yeah, I share your pain in a sense that this has happened so many times that you read the

99
00:14:21,100 --> 00:14:40,100
And then the professor PI asks you, can you just do how they did, and there's just way too many options to just read the words and try to convert them into a code or procedures, protocols.

100
00:14:40,100 --> 00:14:51,780
All right, well, we start in one minute, so people can still keep on writing on this notes

101
00:14:51,780 --> 00:14:53,500
document your experiences.

102
00:14:53,500 --> 00:14:58,340
A quick reminder on how to do that.

103
00:14:58,340 --> 00:15:04,820
At the top of the document, there is an eye symbol, this kind of two table or two column

104
00:15:04,820 --> 00:15:05,820
symbol and a pen.

105
00:15:05,820 --> 00:15:12,780
pen and if you click on the pen you're in edit mode and you can simply write in there

106
00:15:12,780 --> 00:15:18,460
and give your comments, you ask your questions and so on.

107
00:15:18,460 --> 00:15:26,220
All right, so now it's 10 a.m. in Finland, let's start.

108
00:15:26,220 --> 00:15:34,580
I will first introduce you and then I will let you do the show.

109
00:15:34,580 --> 00:15:39,140
So let me switch to [name]' screen.

110
00:15:47,140 --> 00:15:48,100
All right.

111
00:15:48,100 --> 00:15:51,580
Welcome, everyone, to the fourth episode

112
00:15:51,580 --> 00:15:56,580
of this Code Refinery workshop, September 2024.

113
00:15:56,580 --> 00:16:00,060
I'm [name], and I will be the host for you,

114
00:16:00,060 --> 00:16:02,340
with you today.

115
00:16:02,340 --> 00:16:05,860
And today the topic is reproducibility,

116
00:16:05,860 --> 00:16:10,100
specifically more kind of the computational reproducibility.

117
00:16:10,100 --> 00:16:14,340
So trying to replicate the results of other people

118
00:16:14,340 --> 00:16:17,020
or even try to replicate what you did

119
00:16:17,020 --> 00:16:19,460
a few months or a few years ago.

120
00:16:19,460 --> 00:16:22,940
The first part of today,

121
00:16:22,940 --> 00:16:25,180
which will last for a couple of hours,

122
00:16:25,180 --> 00:16:27,860
will be presented by [name].

123
00:16:27,860 --> 00:16:30,900
[name], do you wanna say something about yourself?

124
00:16:30,900 --> 00:16:36,420
a research software engineer at Aalto, which is the scientific computing group, same as [name]

125
00:16:36,420 --> 00:16:43,620
essentially. And then [name] will be joined by [name]. [name], do you want to say something about

126
00:16:43,620 --> 00:16:51,220
yourself? Hello, I'm [name]. I'm also a research software engineer at Aalto. So we are basically

127
00:16:51,220 --> 00:16:59,540
all colleagues here now. Thanks. And then later after the lunch break, which will go from 12 to

128
00:16:59,540 --> 00:17:06,740
one finish time. There will be [name] and I talking about social coding and licensing.

129
00:17:06,740 --> 00:17:08,900
[name], do you want to introduce yourself?

130
00:17:10,180 --> 00:17:14,580
Yeah, sure. I'm [name]. I'm also one of the RSCs at Alto. Happy to be here.

131
00:17:16,020 --> 00:17:23,140
So it's a full Alto team this time, all based in Finland. So apologies if I will use the finish

132
00:17:23,140 --> 00:17:28,260
time zone as a reference, but I guess you can convert it to your central European or wherever

133
00:17:28,260 --> 00:17:37,620
you live. Just a reminder that the materials for today are linked in the main page of the workshop

134
00:17:38,340 --> 00:17:44,180
and if you keep the notes document open we will also post the links to the materials that

135
00:17:45,460 --> 00:17:52,660
the instructors are showing. This week compared to the first week is a week where we will not do

136
00:17:52,660 --> 00:17:59,060
actual exercises. But of course there will be lots of questions for you and discussions. So in

137
00:17:59,060 --> 00:18:07,060
practice the notes document is our main tool for interacting. We decided to do it like this for now

138
00:18:07,060 --> 00:18:13,540
a couple of times. The reason being that sometimes all the material that are presented in the second

139
00:18:13,540 --> 00:18:19,540
part of the week, in the second part of the workshop, it can be overwhelming to try to do

140
00:18:19,540 --> 00:18:25,620
the exercises and also understand what's going on. So there are exercises written in the materials,

141
00:18:25,620 --> 00:18:32,980
and of course you're welcome to try them later if you have time. But in general, try to follow

142
00:18:32,980 --> 00:18:37,700
our demos and our discussion and try to contribute with lots of questions,

143
00:18:38,260 --> 00:18:41,380
because that's the best that we can get out of this experience.

144
00:18:42,500 --> 00:18:48,260
So I think, yeah. I'd like to add one thing here. One of the reasons that we don't do the exercises

145
00:18:48,260 --> 00:18:54,580
also because some of the tools that we are showing this week are very specialized tools and not

146
00:18:54,580 --> 00:19:02,660
actually useful for everything and going through the exercises if you think yeah think it's useful

147
00:19:02,660 --> 00:19:07,140
for you yeah it's definitely a good idea but some of the tools can just be skipped

148
00:19:09,620 --> 00:19:16,820
yes all right i think this is all for the introduction so i'm gonna leave the scene

149
00:19:16,820 --> 00:19:23,460
and the screen to [name] and [name] and I'll be back later for the break.

150
00:19:26,020 --> 00:19:32,260
Okay so yeah this week and particularly today is about reproducible research

151
00:19:34,260 --> 00:19:41,620
and it essentially starts with getting files in order. You have already last week seen a lot about

152
00:19:41,620 --> 00:19:50,980
version control. No, sorry. It's about how to code, what to use as names for your functions

153
00:19:50,980 --> 00:19:56,580
and so on and this will be done. We'll mainly focus on tomorrow and on Thursday.

154
00:19:59,460 --> 00:20:08,260
As mentioned earlier, documentation is a very important part of reproducible research because

155
00:20:08,260 --> 00:20:13,780
without documentation it's very difficult to redo what others have done

156
00:20:13,780 --> 00:20:20,580
and that will be covered extensively tomorrow. The last week you've already

157
00:20:20,580 --> 00:20:26,380
had a version control of code of text and how to do that, how to do

158
00:20:26,380 --> 00:20:30,620
collaborative and distributed version control and what are the challenges

159
00:20:30,620 --> 00:20:37,460
there. You further have things like stabilizing your computing environment

160
00:20:37,460 --> 00:20:40,780
so that others can more easily reproduce what you have done

161
00:20:40,780 --> 00:20:46,460
because they know what your environment actually looked

162
00:20:46,460 --> 00:20:49,140
like, and part of this is covered today.

163
00:20:49,140 --> 00:20:56,580
And other ways to do this are shown in more detail

164
00:20:56,580 --> 00:20:59,260
tomorrow and on Thursday.

165
00:20:59,260 --> 00:21:03,660
And it's, of course, also about how you publish your research

166
00:21:03,660 --> 00:21:06,340
outputs, how you publish your code, your data,

167
00:21:06,340 --> 00:21:07,580
your documents that you need.

168
00:21:07,580 --> 00:21:10,460
And social coding and open software

169
00:21:10,460 --> 00:21:12,460
will also be discussed later today.

170
00:21:13,580 --> 00:21:17,100
So, but let's jump into reproducible research

171
00:21:17,100 --> 00:21:19,220
and why we want to do that.

172
00:21:19,220 --> 00:21:23,860
And there's a nice PhD comic about this

173
00:21:23,860 --> 00:21:28,120
where Professor Smith has his PhD student in front of him

174
00:21:28,120 --> 00:21:29,860
and asks, well, that's it.

175
00:21:29,860 --> 00:21:30,740
Well, don't, don't worry.

176
00:21:30,740 --> 00:21:33,620
You don't have to start your code from scratch.

177
00:21:33,620 --> 00:21:36,160
You can reuse the software that the previous person

178
00:21:36,160 --> 00:21:42,080
project wrote several years ago. And are there instructions for how to use it?

179
00:21:43,120 --> 00:21:46,240
I doubt it. Is the code commented?

180
00:21:47,600 --> 00:21:50,800
Not likely. And where are the files?

181
00:21:50,800 --> 00:21:54,320
Who knows? This is going to be painful, isn't it?

182
00:21:55,200 --> 00:22:04,240
Just a scratch. And I think this is, at least to some extent, very much what a lot of people

183
00:22:04,240 --> 00:22:12,800
in academia have experienced. I myself had a similar thing where I was told here is code that

184
00:22:12,800 --> 00:22:17,920
we want to have in our library, please connect it to the library that we have. And there wasn't a

185
00:22:17,920 --> 00:22:25,680
lot of documentation and that was essentially my bachelor thesis in the end. So this happens

186
00:22:25,680 --> 00:22:34,640
all the time, unfortunately. And while that's bad, there's also the problem

187
00:22:35,600 --> 00:22:39,920
that's here in this anecdote where a group of researchers have obtained great results and

188
00:22:39,920 --> 00:22:45,680
submitted their work to a high-profile journal. The reviewers ask for a few more figures and some

189
00:22:45,680 --> 00:22:50,480
additional analysis, which is actually quite common. The researchers start working on those

190
00:22:50,480 --> 00:22:56,000
revisions, generate modified figures, but find inconsistencies with their old figures.

191
00:22:57,040 --> 00:23:02,560
And then the problems start because the researchers can't find some of the data they used to generate

192
00:23:02,560 --> 00:23:06,720
the original results and they can't figure out which parameters they used when running their

193
00:23:06,720 --> 00:23:14,560
original analysis. And well, that manuscript is likely to just end up in a drawer and never

194
00:23:14,560 --> 00:23:18,800
really be published because they don't know what they actually did.

195
00:23:20,880 --> 00:23:30,720
Yeah, this is actually the anecdote highlights the most, to me, the most important aspect of the

196
00:23:31,440 --> 00:23:41,280
reproducibility and things we want to do for reproducibility, which is that you should make

197
00:23:41,280 --> 00:23:49,120
your own life easier, that you can reproduce your own results.

198
00:23:49,120 --> 00:23:56,720
And this graph also highlights that problem.

199
00:23:56,720 --> 00:24:02,000
Yeah, it's, at least to me, it's somewhat understandable

200
00:24:02,000 --> 00:24:06,480
if there are some issues with reproducibility

201
00:24:06,480 --> 00:24:10,320
in experimental fields, where there are so many confounding factors,

202
00:24:12,560 --> 00:24:18,160
where there have been examples where a changed water pipe changed the results, because there

203
00:24:18,160 --> 00:24:24,400
was something coming from the water pipe that wasn't expected, that they didn't test for,

204
00:24:24,400 --> 00:24:29,920
and that changed the results. But in a computational setting, this should not happen,

205
00:24:29,920 --> 00:24:35,840
on, because we can a lot better control what we are doing.

206
00:24:35,840 --> 00:24:38,720
And this should be a lot more reproducible.

207
00:24:38,720 --> 00:24:42,520
And anything in a computational field that's not reproducible

208
00:24:42,520 --> 00:24:46,760
comes essentially down to badly documented steps

209
00:24:46,760 --> 00:24:49,720
for the experiment.

210
00:24:49,720 --> 00:24:52,720
And there are different levels of reproducibility.

211
00:24:52,720 --> 00:24:59,200
By the way, can we highlight in the graph the question

212
00:24:59,200 --> 00:25:10,200
that I have failed to reproduce an experiment and my own, and it's like...

213
00:25:10,200 --> 00:25:13,520
There isn't a big difference between your own and someone else's.

214
00:25:13,520 --> 00:25:21,520
Yeah, there isn't a big difference, and there is a huge amount of percentage in both cases.

215
00:25:21,520 --> 00:25:30,800
So yeah, and this was 2016, but basically in eight years, I don't think anything has

216
00:25:30,800 --> 00:25:33,000
fundamentally changed.

217
00:25:33,000 --> 00:25:38,840
One would hope that this has gone down a little bit, but yeah, I would also expect that it

218
00:25:38,840 --> 00:25:42,120
hasn't gone down substantially.

219
00:25:42,120 --> 00:25:48,280
And essentially, as I mentioned earlier, so you have different levels of reproducibility

220
00:25:48,280 --> 00:25:57,960
and you have a kind of pyramid on what can be reproduced and of course the environment in

221
00:25:57,960 --> 00:26:06,600
especially experimental settings can be something that is potentially very difficult to control

222
00:26:07,640 --> 00:26:13,720
but we can control it reasonably well in a computational setting and in a computational

223
00:26:13,720 --> 00:26:21,160
setting it's also we have code and data and that should be controllable because the data has been

224
00:26:22,040 --> 00:26:28,360
it's there it has been generated so and it shouldn't change and the code also has been there

225
00:26:28,360 --> 00:26:35,160
and shouldn't change then it comes to how has the code been used that's documentation what

226
00:26:35,160 --> 00:26:40,920
parameters have been used that's documentation and only in the end once we have all this we create

227
00:26:40,920 --> 00:26:48,600
we build an article and if something below here fails then this article fails because

228
00:26:48,600 --> 00:26:54,920
it can't be reproduced because if we don't know what parameters we had well nice to have the code

229
00:26:54,920 --> 00:27:01,560
but how did the results actually get obtained we don't know so the whole basis of this article

230
00:27:01,560 --> 00:27:09,720
crumbles essentially and we have asked you in the collaborative document to post a few of your

231
00:27:10,920 --> 00:27:22,560
experiences with reproducibility of the things and I actually want to highlight this first

232
00:27:22,560 --> 00:27:31,400
one that was in here because this is something that happens both to the person writing it

233
00:27:31,400 --> 00:27:39,200
and to others coming there, but you have stuff and you try to read it and think well yeah

234
00:27:39,200 --> 00:27:44,960
has been done, but I don't get anything here because it's not well documented or it's not

235
00:27:44,960 --> 00:27:51,120
well written and you essentially have to redo things and that's something that's very, very common.

236
00:27:56,240 --> 00:28:04,000
Here, this is also the typical, yeah, a new version of the package has been

237
00:28:04,000 --> 00:28:10,400
been published and the old version doesn't work on the current system anymore, or you

238
00:28:10,400 --> 00:28:19,840
have to go to great length to go through this, which is a really huge issue.

239
00:28:19,840 --> 00:28:29,800
I can relate to all of these answers, and one thing I actually want to point out is

240
00:28:29,800 --> 00:28:37,080
that in the question it says that a script or a figure you created a few months ago.

241
00:28:37,080 --> 00:28:44,760
For me, I don't have to wait a few months, because like a day or two is completely enough.

242
00:28:44,760 --> 00:28:58,040
Because like I, if I don't document stuff for myself in two days, it's basically I may

243
00:28:58,040 --> 00:28:59,580
have to start over.

244
00:28:59,580 --> 00:29:06,580
So I completely know what people are coming from with these comments.

245
00:29:06,580 --> 00:29:07,580
Yeah.

246
00:29:07,580 --> 00:29:14,740
So I think all of these are really good examples of why we need reproducible research.

247
00:29:14,740 --> 00:29:22,540
And I hope we can show you a couple of things that help you in making your reproducibility

248
00:29:22,540 --> 00:29:27,740
or making your work more reproducible, either by others or yourself?

249
00:29:30,780 --> 00:29:40,380
Okay. So just an overview of the next two hours. So we have four subtopics here.

250
00:29:41,740 --> 00:29:51,260
So first is organizing your projects, so files and folders, structure basically. The next is

251
00:29:52,540 --> 00:30:05,340
recording computational steps. So what was run and when and how. Then recording dependencies,

252
00:30:05,340 --> 00:30:13,940
which is that what is the software or what libraries and which versions of software and

253
00:30:13,940 --> 00:30:22,380
libraries your code is using to get the results. And then recording environments, which is

254
00:30:22,380 --> 00:30:29,020
is what operating system, what system libraries.

255
00:30:29,020 --> 00:30:31,740
So essentially going one step further down

256
00:30:31,740 --> 00:30:33,780
the environment chain.

257
00:30:33,780 --> 00:30:36,860
Yeah.

258
00:30:36,860 --> 00:30:41,860
One step further down the rabbit hole of reproducibility.

259
00:30:41,860 --> 00:30:42,460
Yeah.

260
00:30:42,460 --> 00:30:43,180
OK, yeah.

261
00:30:43,180 --> 00:30:44,220
Sorry, go ahead.

262
00:30:44,220 --> 00:30:48,500
So let's get into organizing your projects.

263
00:30:48,500 --> 00:30:50,740
So yeah, it's really one of the first steps

264
00:30:50,740 --> 00:30:59,540
to make your work reproducible is to organize your projects well so to know to have a structure that

265
00:30:59,540 --> 00:31:05,700
you understand that you where you can actually find things again because even the

266
00:31:05,700 --> 00:31:11,700
finding the right function finding the right piece of data can become difficult if your

267
00:31:12,340 --> 00:31:19,780
data and your project is not properly organized so first of all of course have

268
00:31:19,780 --> 00:31:25,620
you have everything that belongs to a project in a single folder because then you have something

269
00:31:25,620 --> 00:31:33,220
where you can have it or where you know okay this is what it is and if that's not possible because

270
00:31:33,220 --> 00:31:40,340
you have for example some big data that needs to be stored elsewhere have links or indicators where

271
00:31:40,340 --> 00:31:47,460
that data can be found early on that can be in a readme or in some other or in some other way

272
00:31:47,460 --> 00:31:58,340
how this can be stored. Use different projects in different folders. Don't mix. It will only

273
00:31:58,340 --> 00:32:04,420
lead to a mess and you can't get out of that mess again because untangling mixed up projects

274
00:32:05,140 --> 00:32:12,100
will always be a problem. If you have things like code that you use in both projects,

275
00:32:12,100 --> 00:32:16,500
Set up a git repository for the code and clone it into both projects.

276
00:32:19,700 --> 00:32:25,140
And potentially have a branch for each project if they really do have different

277
00:32:26,340 --> 00:32:32,820
code in the end, but try to get the code in a way that both can use it.

278
00:32:36,580 --> 00:32:38,900
Use a consistent and informative directory structure.

279
00:32:42,100 --> 00:32:45,240
This, for example, this is an example of what you can do.

280
00:32:45,240 --> 00:32:47,400
Have data, process data.

281
00:32:47,400 --> 00:32:49,780
So data is the raw information.

282
00:32:49,780 --> 00:32:52,140
This is what you got from your experiments

283
00:32:52,140 --> 00:32:54,940
or what you got from an external partner,

284
00:32:57,420 --> 00:32:59,360
this is the raw data.

285
00:32:59,360 --> 00:33:01,860
Process data is anything that you have

286
00:33:01,860 --> 00:33:04,480
pre-processed or modified.

287
00:33:06,100 --> 00:33:09,420
The manuscript is everything that's connected

288
00:33:09,420 --> 00:33:14,420
with writing the article in the end or the articles

289
00:33:14,860 --> 00:33:17,060
if you have multiple for the same project.

290
00:33:18,460 --> 00:33:23,460
Results is essentially finished data,

291
00:33:24,100 --> 00:33:29,100
some tables, figures, and everything that you want to put

292
00:33:29,300 --> 00:33:31,060
into the manuscript potentially.

293
00:33:31,060 --> 00:33:34,720
Source is your code with a license,

294
00:33:34,720 --> 00:33:38,060
with requirements and information about it.

295
00:33:38,060 --> 00:33:42,460
And doc is the additional documentation.

296
00:33:42,460 --> 00:33:45,500
Your README can already contain some of the docs

297
00:33:45,500 --> 00:33:49,900
or contain information on, OK, this

298
00:33:49,900 --> 00:33:53,420
is where you find the documentation for this.

299
00:33:53,420 --> 00:33:59,620
Also, I'd like to point out that in many, many, many cases,

300
00:33:59,620 --> 00:34:01,580
README is enough.

301
00:34:01,580 --> 00:34:04,380
So you shouldn't be kind of, um,

302
00:34:04,380 --> 00:34:06,100
A well-written README is enough.

303
00:34:06,100 --> 00:34:10,500
Yeah, well-written README is, extensive README is enough.

304
00:34:10,500 --> 00:34:12,380
But the point is that we shouldn't

305
00:34:12,380 --> 00:34:16,380
be kind of intimidated by the thought

306
00:34:16,380 --> 00:34:26,260
that the documentation needs to be a whole HTML documentation

307
00:34:26,260 --> 00:34:27,460
web page.

308
00:34:27,460 --> 00:34:30,900
But I think the simplest check is,

309
00:34:30,900 --> 00:34:34,180
once you've done your stuff and you have your README,

310
00:34:34,180 --> 00:34:36,740
ask a colleague that's not in the project,

311
00:34:36,740 --> 00:34:40,380
could you take this and reproduce the figures

312
00:34:40,380 --> 00:34:42,060
and not help them by doing it?

313
00:34:42,060 --> 00:34:42,560
Yeah.

314
00:34:45,580 --> 00:34:48,700
One small thing, try to avoid spaces

315
00:34:48,700 --> 00:34:49,860
in directories and filenames.

316
00:34:49,860 --> 00:34:53,660
Yes, it's uglier to read, but a lot of times

317
00:34:53,660 --> 00:34:59,140
there are programs that don't handle spaces well.

318
00:34:59,140 --> 00:35:03,940
So not having spaces in there can make things a lot easier

319
00:35:03,940 --> 00:35:07,540
computational-wise. It's not absolutely necessary but

320
00:35:07,540 --> 00:35:15,140
it's, I would say, good practice. If you need separate public and private

321
00:35:15,140 --> 00:35:20,340
parts, you can create a public and a private git repository.

322
00:35:20,340 --> 00:35:23,380
Make sure that they are not in the same

323
00:35:23,380 --> 00:35:29,140
git network. I would really create separate repositories

324
00:35:29,140 --> 00:35:32,740
for it and not fork from the one to the other

325
00:35:32,740 --> 00:35:33,860
and then make it private.

326
00:35:36,660 --> 00:35:42,100
If you need to separate public and secret data in the same repository,

327
00:35:42,100 --> 00:35:46,580
you can use gitignore, as was, I think, discussed last week.

328
00:35:46,580 --> 00:35:51,300
And having and setting up a gitignore early on always makes sense.

329
00:35:53,380 --> 00:35:56,740
And yes, and the rest, I think, we already mentioned.

330
00:35:56,740 --> 00:36:10,860
Yeah. So about the project structure, does your project always look like this structure?

331
00:36:10,860 --> 00:36:19,580
Does it often look like this? Does it never look like this, this example?

332
00:36:19,580 --> 00:36:21,500
It looks similar.

333
00:36:21,500 --> 00:36:27,020
I don't really have these parts at the moment anymore,

334
00:36:27,020 --> 00:36:31,340
but I do have their source code data, potential documentation.

335
00:36:31,340 --> 00:36:34,580
But as you mentioned, I'm actually mainly readmes

336
00:36:34,580 --> 00:36:40,460
that sometimes point to a second MD markdown

337
00:36:40,460 --> 00:36:43,980
file for a specific setup of development systems

338
00:36:43,980 --> 00:36:45,020
or something like that.

339
00:36:45,020 --> 00:36:49,540
But yeah, conceptually similar.

340
00:36:49,540 --> 00:36:56,420
It looks very standard and it's always nice to use standard practices.

341
00:36:58,260 --> 00:37:09,700
Yeah, so, sorry, yeah, the tracking your data and your project is also important.

342
00:37:09,700 --> 00:37:17,060
Well, all code should be version controlled and should be in the source code folder.

343
00:37:17,060 --> 00:37:22,380
So I have a license in there.

344
00:37:22,380 --> 00:37:26,180
You can also version control data files

345
00:37:26,180 --> 00:37:27,800
if they are not too large.

346
00:37:27,800 --> 00:37:30,860
If they are very large, you can still version control them

347
00:37:30,860 --> 00:37:37,540
with systems like Git Annex or Git LFS.

348
00:37:37,540 --> 00:37:39,140
Large file.

349
00:37:39,140 --> 00:37:43,020
Large file system, where you can essentially,

350
00:37:43,020 --> 00:37:45,740
where the file is essentially placed somewhere else

351
00:37:45,740 --> 00:37:49,860
And it's just the version that's being tracked.

352
00:37:49,860 --> 00:37:53,380
And Git Annex essentially builds an additional network

353
00:37:53,380 --> 00:37:56,820
of repositories where it knows where the data is residing.

354
00:37:59,740 --> 00:38:05,220
And you can get the data, but if you don't explicitly want it,

355
00:38:05,220 --> 00:38:06,540
you don't have to download it.

356
00:38:09,300 --> 00:38:13,300
You can also, if they are sensitive or too large

357
00:38:13,300 --> 00:38:18,020
for being tracked, put them into gitignore

358
00:38:18,020 --> 00:38:22,500
and provide them on a different system,

359
00:38:22,500 --> 00:38:23,580
which is perfectly fine,

360
00:38:23,580 --> 00:38:25,860
especially if it's research data

361
00:38:25,860 --> 00:38:27,260
that doesn't really change.

362
00:38:27,260 --> 00:38:31,140
So if you have all your experimental data done

363
00:38:31,140 --> 00:38:34,060
and you're not going to get more experimental data,

364
00:38:34,060 --> 00:38:37,060
you can essentially put this into a folder,

365
00:38:37,060 --> 00:38:48,660
into a folder, put it onto some data server and then just point to it in the README or somewhere else.

366
00:38:52,180 --> 00:38:58,420
Intermediate files don't really need to be tracked. Commonly there might be

367
00:38:58,420 --> 00:39:03,220
situations where the pre-processing takes a long time and you actually want to keep that data

368
00:39:03,220 --> 00:39:11,540
stored and potentially tracked as well, but in general I would say process data can be reproduced

369
00:39:11,540 --> 00:39:15,940
from the original data or should be reproducible from the original data and therefore doesn't need

370
00:39:15,940 --> 00:39:27,300
to be tracked. Using git tags to mark specific versions of results is always also a good idea

371
00:39:27,300 --> 00:39:37,620
because you then know okay this is the version that was submitted for the thesis or for the paper

372
00:39:38,420 --> 00:39:44,580
and people can and you can essentially in the paper point to this version because that's the

373
00:39:44,580 --> 00:39:52,980
data that was being used for the paper while your code could have developed on.

374
00:39:52,980 --> 00:40:04,420
Yeah, so we have two more questions here that we can also put into the... that are already

375
00:40:04,420 --> 00:40:05,420
in the...

376
00:40:05,420 --> 00:40:11,500
Yeah, they are in the notes and everybody is welcome to...

377
00:40:11,500 --> 00:40:17,500
It's mainly questions about how...

378
00:40:17,500 --> 00:40:26,180
The first is mainly, if you use version control for academic papers, and the second is, if

379
00:40:26,180 --> 00:40:30,620
you do, how you handle collaborative issues.

380
00:40:30,620 --> 00:40:41,740
Personally, I never used version control for manuscript writing, or rather, I never used

381
00:40:41,740 --> 00:40:46,140
it for manuscript writing.

382
00:40:46,140 --> 00:40:54,500
The main reason for that is that writing collaboratively

383
00:40:54,500 --> 00:40:58,220
on Git is painful.

384
00:40:58,220 --> 00:41:04,580
There are tools like Overleaf or Google Docs where you can,

385
00:41:04,580 --> 00:41:06,700
or HackMD, what we are just using,

386
00:41:06,700 --> 00:41:10,540
where everyone can write in the same document.

387
00:41:10,540 --> 00:41:14,020
And these things can be used to easily create

388
00:41:14,020 --> 00:41:26,300
academic paper, and I personally prefer those tools because they are especially suited for

389
00:41:26,300 --> 00:41:37,420
concurrent editing. While Git can solve concurrent editing issues, but depending on how many

390
00:41:37,420 --> 00:41:45,460
changes there are and how much stuff two people did on an article, you can easily end up with

391
00:41:45,460 --> 00:41:49,540
smudging conflicts, and it can become very painful.

392
00:41:49,540 --> 00:41:59,380
So personally, I have used Overleaf, I have used Google Docs, and HackMD is also for first

393
00:41:59,380 --> 00:42:05,820
draft, and then you need to put it into a form for the journal in the end anyways.

394
00:42:05,820 --> 00:42:17,180
Would you say that the Git is a very powerful version control tool, but in this case, it's

395
00:42:17,180 --> 00:42:33,700
a bit maybe too generic because there are tools that are specifically designed for co-authoring

396
00:42:33,700 --> 00:42:44,340
papers or text? Yes, what I would say is that GIT is very good suited for code editing where

397
00:42:44,340 --> 00:42:48,580
if you work on two different things but you have some modifications you then need to merge and then

398
00:42:48,580 --> 00:42:56,340
need to find out okay what happened and what changes can be let go in and how do we need to

399
00:42:56,340 --> 00:43:02,660
merge that where you anyways need to think about this but if you for example have two people who

400
00:43:02,660 --> 00:43:14,340
edited a relatively final version of an article and made spelling or changed spelling mistakes

401
00:43:14,340 --> 00:43:20,100
and stuff. You will get so many lines, because GitHub essentially goes line by line, where

402
00:43:23,300 --> 00:43:32,260
you have changes on both sides that it gets really messy. And you need to manually then

403
00:43:32,260 --> 00:43:44,580
select the right and you essentially do double the work if not more when editing a document and

404
00:43:46,500 --> 00:43:53,380
that's something that is unnecessary in my opinion because there are tools like Overleaf

405
00:43:53,380 --> 00:44:01,540
or HackMD that or Google Docs which do exactly that and are exactly for this purpose

406
00:44:02,260 --> 00:44:08,500
where you can work together on a document and don't get into these kind of issues.

407
00:44:09,620 --> 00:44:17,540
So I would use those instead. We have from the notes, we have interesting distribution between

408
00:44:17,540 --> 00:44:23,540
are you using version control for academic papers? It's about 50-50, like yes and no.

409
00:44:23,540 --> 00:44:27,500
It is interesting.

410
00:44:27,500 --> 00:44:33,500
I have used, well, I have used version control for academic papers, no question whatsoever,

411
00:44:33,500 --> 00:44:38,160
but I haven't used it for writing the manuscript.

412
00:44:38,160 --> 00:44:39,740
And I think that's also...

413
00:44:39,740 --> 00:44:40,740
Okay.

414
00:44:40,740 --> 00:44:45,340
It's a distinction there, okay.

415
00:44:45,340 --> 00:45:00,820
It depends on how people see this, whether, yeah, there is a comment on the how to handle

416
00:45:00,820 --> 00:45:05,180
collaborative issues, one author being responsible for merging everything.

417
00:45:05,180 --> 00:45:11,580
Yeah, that author will, if they are lucky, everything goes fine.

418
00:45:11,580 --> 00:45:15,980
If they are unlucky and you have concurrent edits or a lot

419
00:45:15,980 --> 00:45:18,980
of concurrent edits, they will spend a lot of time

420
00:45:18,980 --> 00:45:20,580
in merging them.

421
00:45:20,580 --> 00:45:25,260
And it's just, yeah, as I said, to me,

422
00:45:25,260 --> 00:45:29,100
writing the manuscript there is a waste of time.

423
00:45:29,100 --> 00:45:31,020
Having the code under version control

424
00:45:31,020 --> 00:45:36,340
and merging there, yeah, absolutely makes sense.

425
00:45:36,340 --> 00:45:42,740
Okay. Yeah. Should we move on?

426
00:45:42,740 --> 00:45:51,540
Yes. So there are other tools that help in making academic or scholarly output more reproducible.

427
00:45:52,580 --> 00:46:03,940
Jupyter Notebooks can be a good way to present the flow of your code more easily. Binder

428
00:46:03,940 --> 00:46:11,060
gives Jupyter notebooks and makes them available in an executable environment so that people

429
00:46:11,060 --> 00:46:20,460
don't even need to install the Jupyter stuff initially. And for R, there's also R tools

430
00:46:20,460 --> 00:46:29,940
or Research Compendia, which are nice tools to use to show your results and show how your

431
00:46:29,940 --> 00:46:38,180
code is being used. Okay, so a key point here an organized project directory structure

432
00:46:38,180 --> 00:46:46,100
helps with reproducibility and makes it a lot more easy to later on redo what you have done.

433
00:46:49,060 --> 00:46:57,540
So the next is essentially then the question. Okay, so you have your structure, your folder

434
00:46:57,540 --> 00:47:05,300
organized. How do we actually go about running our scripts? So you have some steps that need to be

435
00:47:05,300 --> 00:47:12,500
run to do your work and how do you actually run them? Does that rely on you remembering how you

436
00:47:12,500 --> 00:47:20,420
run them? Or is it reproducible for anyone else? How do you communicate these steps to

437
00:47:20,420 --> 00:47:28,580
others or in particular future you. And here we will also go into how we can

438
00:47:28,580 --> 00:47:33,860
create a reproducible workflow and what scientific workflow management

439
00:47:33,860 --> 00:47:44,220
systems are and when to use them. So as an example here we have a example

440
00:47:44,220 --> 00:47:56,300
project from the HPC Carpentry lessons, which is essentially

441
00:47:56,300 --> 00:48:10,540
a small project that counts the frequencies of words

442
00:48:10,540 --> 00:48:13,420
in some books, and then plots them.

443
00:48:17,820 --> 00:48:26,540
So the example use of this is, let me just check something.

444
00:48:27,580 --> 00:48:36,620
So the example use is where you simply have Python code, code.py, and then plot the output

445
00:48:36,620 --> 00:48:43,980
file into an image.

446
00:48:43,980 --> 00:48:52,420
And [name], do you want to explain what the problems with this kind of approach are?

447
00:48:52,420 --> 00:48:56,300
So it's a very manual approach.

448
00:48:56,300 --> 00:49:04,860
And so if we want to, I would say that if we want to have multiple books.

449
00:49:04,860 --> 00:49:18,320
So let's say we have 100 or 1000 books, then we would have to...

450
00:49:18,320 --> 00:49:30,720
We do all of those manually, and then there is no record of what books were processed.

451
00:49:30,720 --> 00:49:35,320
I think that's at least the first thing that comes to mind.

452
00:49:35,320 --> 00:49:35,840
Yeah.

453
00:49:35,840 --> 00:49:41,360
And we also, it's not really extendable.

454
00:49:41,360 --> 00:49:46,640
So if we have this, what do we do if we

455
00:49:46,640 --> 00:49:49,960
want to run this for 500 books?

456
00:49:49,960 --> 00:49:52,400
We could even have a small GUI or something,

457
00:49:52,400 --> 00:49:56,840
but then we would need to click like 500 times.

458
00:49:56,840 --> 00:50:03,200
And of course, you can essentially

459
00:50:03,200 --> 00:50:10,100
write a script that does run or essentially run everything,

460
00:50:10,100 --> 00:50:11,560
which would be something like this.

461
00:50:11,560 --> 00:50:14,120
This is now on binder on the JupyterHub.

462
00:50:18,120 --> 00:50:20,360
In the JupyterHub on binder.

463
00:50:20,360 --> 00:50:22,640
And you could essentially run all of these.

464
00:50:22,640 --> 00:50:24,800
And then you have your results.

465
00:50:24,800 --> 00:50:30,520
But that doesn't really help you when you have to extend that

466
00:50:30,520 --> 00:50:33,280
to 500 books.

467
00:50:33,280 --> 00:50:36,400
So this is more of an imperative style.

468
00:50:36,400 --> 00:50:40,040
We tell it to do every single step in order.

469
00:50:40,040 --> 00:50:44,160
And we can potentially also use something

470
00:50:44,160 --> 00:50:51,560
like a loop for this, where we just indicate the name.

471
00:50:51,560 --> 00:50:55,160
And then we can still run it for all of them.

472
00:50:55,160 --> 00:50:58,640
This is a bit better, because we only have to put in the name.

473
00:50:58,640 --> 00:51:01,960
But we are still explicitly telling it what to do.

474
00:51:04,680 --> 00:51:07,800
Yeah, and also the loop looks much better.

475
00:51:07,800 --> 00:51:12,160
But there is one problem, is that if we

476
00:51:12,160 --> 00:51:18,240
want to rerun something, or we want to add some books

477
00:51:18,240 --> 00:51:25,040
and rerun the experiment, then all the books will be processed again.

478
00:51:27,600 --> 00:51:33,440
Yeah, and that's really not what we want to do, especially if the stuff that we are running

479
00:51:34,000 --> 00:51:41,040
takes a little bit longer. So if we are running something that takes half an hour for everything

480
00:51:41,040 --> 00:51:47,680
and we suddenly have to rerun 500 iterations of this.

481
00:51:47,680 --> 00:51:51,440
Yeah, we really don't want to do that.

482
00:51:52,160 --> 00:51:58,000
So this scripted solution is reproducible.

483
00:51:58,000 --> 00:52:04,800
Yeah, definitely. But if we start to add more things it

484
00:52:04,800 --> 00:52:09,680
starts to get problematic, as Timo mentioned.

485
00:52:09,680 --> 00:52:14,360
And that's actually the point where workflow tools come in.

486
00:52:14,360 --> 00:52:18,720
Workflow tools in more complex scenarios,

487
00:52:18,720 --> 00:52:21,200
so where it goes away from the simple,

488
00:52:21,200 --> 00:52:23,160
I have three things that I need to run,

489
00:52:23,160 --> 00:52:26,160
and I don't have more than these three things.

490
00:52:26,160 --> 00:52:31,080
But I always get additional things after some time,

491
00:52:31,080 --> 00:52:35,000
and I'm still producing my data, for example.

492
00:52:35,000 --> 00:52:38,840
And I need to do something for every data point.

493
00:52:38,840 --> 00:52:43,880
that's where workflow tools come in very handy. And we will give an example here with SnakeMake,

494
00:52:43,880 --> 00:52:52,840
which is inspired by GNU Make and is a very popular tool in bioinformatics,

495
00:52:52,840 --> 00:53:03,960
but also in other computational fields. We also chose SnakeMake because it's very close to Python.

496
00:53:03,960 --> 00:53:15,360
So, in the SnakeMake files, or Snake files, you can write code in Python essentially.

497
00:53:15,360 --> 00:53:28,120
And we have a demo here in Binder that I will show you in a moment, but I would first like

498
00:53:28,120 --> 00:53:38,280
to go through the way that SnakeMake actually writes your or that SnakeMake files are actually

499
00:53:38,280 --> 00:53:48,840
created and how SnakeMake works on a logical basis. So SnakeMake works with rules and rules

500
00:53:48,840 --> 00:53:56,920
have to be fulfilled for SnakeMake. So for a rule to be fulfilled it needs to have all

501
00:53:56,920 --> 00:54:08,840
its inputs and then generates all its outputs by the command that's being called in shell.

502
00:54:08,840 --> 00:54:20,280
And that's a bit unintuitive because commonly what happens is you define in your rule all

503
00:54:20,280 --> 00:54:28,300
the inputs, which are the endpoints of what you want to create.

504
00:54:28,300 --> 00:54:35,540
And in here we have in rule, in our all rule, we have, we want to create all the files in

505
00:54:35,540 --> 00:54:42,460
statistics book data, where the name of the book comes from this data, from the data field,

506
00:54:42,460 --> 00:54:50,460
which is essentially all file names in the data folder.

507
00:54:50,460 --> 00:54:53,020
And we also want to create all the plots.

508
00:54:53,020 --> 00:54:57,660
And this defines our final results.

509
00:54:57,660 --> 00:55:01,340
And then SnakeMix starts to look, okay, how do I get these?

510
00:55:01,340 --> 00:55:04,980
Is there any other rule that creates these?

511
00:55:04,980 --> 00:55:10,420
And it looks on, so there is a rule count words, which has as inputs a script called

512
00:55:10,420 --> 00:55:26,340
counted by and a book data file txt and these files come and these file this is just a placeholder

513
00:55:26,340 --> 00:55:33,740
again which comes which in the end comes from data because it knows that okay this entry

514
00:55:33,740 --> 00:55:36,940
comes from here then.

515
00:55:36,940 --> 00:55:42,420
And then you have a Python script that says,

516
00:55:42,420 --> 00:55:45,300
OK, well, from the inputs, I take the script,

517
00:55:45,300 --> 00:55:49,860
and I take the book, and I create the output.

518
00:55:49,860 --> 00:55:56,980
And if we look back up, this is exactly what we had here.

519
00:55:56,980 --> 00:55:59,060
So this is the first step.

520
00:55:59,060 --> 00:56:05,740
So that's what the rule, the count rule essentially is doing, or the count words.

521
00:56:05,740 --> 00:56:13,620
And in the make plot, this is essentially the same structure and again as above.

522
00:56:13,620 --> 00:56:23,500
And I will show you this on Binder.

523
00:56:23,500 --> 00:56:34,060
So how the SnakeMech works, the rule works, is that each rule will take an input file

524
00:56:34,060 --> 00:56:39,220
and then it looks that if that input file doesn't exist on the disk, it will find a

525
00:56:39,220 --> 00:56:45,740
rule that has that input file as the output file.

526
00:56:45,740 --> 00:56:49,020
And that's why we start from the end.

527
00:56:49,020 --> 00:56:51,300
is, yeah.

528
00:56:51,300 --> 00:56:56,860
And one thing I need to mention here, in our current,

529
00:56:56,860 --> 00:57:00,860
in this binder, the results are already there.

530
00:57:00,860 --> 00:57:03,780
So we already have these final results,

531
00:57:03,780 --> 00:57:09,220
and we also already have the statistics being processed.

532
00:57:09,220 --> 00:57:12,140
So the first thing I actually need to do

533
00:57:12,140 --> 00:57:16,180
is remove them, because otherwise it

534
00:57:16,180 --> 00:57:19,260
doesn't do anything, because it has everything already.

535
00:57:19,260 --> 00:57:21,760
So I delete all these files.

536
00:57:21,760 --> 00:57:29,200
And if I then start to, as you can see on the left, statistics stuff is now gone.

537
00:57:29,200 --> 00:57:36,620
And if I then run this, what SnakeMIC does is it essentially checks, okay, what do I

538
00:57:36,620 --> 00:57:37,700
have to do?

539
00:57:37,700 --> 00:57:44,020
I have to create, or I have to fulfill the all once.

540
00:57:44,020 --> 00:57:46,300
To do that, I have to count words four times

541
00:57:46,300 --> 00:57:47,700
and I have to make plots four times.

542
00:57:47,700 --> 00:57:51,280
So in total, I have nine things that I have to do.

543
00:57:52,580 --> 00:57:57,580
The all is just a final check.

544
00:57:57,780 --> 00:58:01,080
So that's pretty simple,

545
00:58:01,080 --> 00:58:05,060
but the other code is something that needs to be changed.

546
00:58:05,960 --> 00:58:08,620
And there I have my data again.

547
00:58:08,620 --> 00:58:13,620
Now, the beauty of this is if I, for example,

548
00:58:14,020 --> 00:58:19,700
remove this last data and run it again,

549
00:58:21,220 --> 00:58:24,020
it will notice that, okay,

550
00:58:24,020 --> 00:58:27,580
I'm missing one count words.

551
00:58:27,580 --> 00:58:29,900
Since I'm missing that,

552
00:58:29,900 --> 00:58:33,500
I also have to redo the plot because yeah,

553
00:58:33,500 --> 00:58:37,660
I don't know if the data that is being created

554
00:58:37,660 --> 00:58:42,660
will lead to the same picture or the same output here.

555
00:58:42,660 --> 00:58:47,460
So I'm rerunning this and I have to execute the all again because I'm missing something from there.

556
00:58:49,220 --> 00:58:56,500
And one more thing that I think is very important and why we have these code pieces in our

557
00:59:00,500 --> 00:59:03,780
rule as inputs. If I change the count.py here

558
00:59:06,500 --> 00:59:08,100
and run this again

559
00:59:08,100 --> 00:59:16,500
10. It doesn't know what was changed, but it knows, okay, the count has changed. Oops,

560
00:59:16,500 --> 00:59:21,940
this was too far up. The count has changed. So I need to rerun everything that depended

561
00:59:21,940 --> 00:59:32,540
on this input count.py. That creates me the data or statistics data information, which

562
00:59:32,540 --> 00:59:36,820
my make plot depends on. So I have to rerun the make plot because I don't know if that

563
00:59:36,820 --> 00:59:43,260
has changed and it will essentially rerun everything that's necessary to keep in sync

564
00:59:43,260 --> 00:59:45,180
with all the inputs.

565
00:59:45,180 --> 00:59:49,520
And that's the real beauty of these things.

566
00:59:49,520 --> 00:59:57,260
So you can go through it and you can make sure that only the stuff is rerun that is

567
00:59:57,260 --> 01:00:02,020
necessary but everything that is necessary is rerun.

568
01:00:02,020 --> 01:00:09,440
And that's really something that allows you to keep all your results in sync and allows

569
01:00:09,440 --> 01:00:23,400
you to run additional code or additional inputs without rerunning everything.

570
01:00:23,400 --> 01:00:37,520
It also has the possibility to use containers or environments.

571
01:00:37,520 --> 01:00:48,400
And you can visualize the graph that is being created here as well.

572
01:00:48,400 --> 01:00:57,520
Yeah. Okay. Or not. At least not in this environment.

573
01:00:57,520 --> 01:01:00,400
It was a good example of, like, un-reproducible.

574
01:01:00,400 --> 01:01:10,000
Yeah. So we would need to install the, well, we can probably just install it here as well.

575
01:01:10,000 --> 01:01:15,360
But I'm...

576
01:01:15,360 --> 01:01:16,840
That could take a bit of time.

577
01:01:16,840 --> 01:01:24,840
that can take. So essentially what's happening is for all I need to create the count words

578
01:01:24,840 --> 01:01:33,160
with the input of the file sierra. This is also the input for the make plot and all needs to have

579
01:01:33,160 --> 01:01:41,800
make plot and that's the same for all the other inputs. So the all depends on all of these

580
01:01:41,800 --> 01:01:47,400
individual things and only then all is fulfilled.

581
01:01:48,600 --> 01:01:53,400
The reason why using snake make and or why we're representing snake make and not

582
01:01:53,400 --> 01:01:57,960
other tools, I would say some people claim it has a

583
01:01:57,960 --> 01:02:00,840
relatively gentle learning curve. I think it

584
01:02:00,840 --> 01:02:06,120
depends a lot on your example or on your use case whether it's

585
01:02:06,120 --> 01:02:09,720
gentle or not and how many features you actually need.

586
01:02:09,720 --> 01:02:13,720
if you don't need too many features from it then yeah it has a relatively gentle learning curve

587
01:02:13,720 --> 01:02:19,320
if you need a lot of features then well like with any system if you want to use all the features

588
01:02:19,320 --> 01:02:27,080
that it offers it has quite a bit of stuff that you need to learn i think for me mainly it's

589
01:02:27,080 --> 01:02:33,720
it's free it's open source and it installs pretty easily via conda or via pip and you can use it on

590
01:02:33,720 --> 01:02:43,320
both Windows or all Windows, Mac OS or Linux. And that's also, it is highly compatible with

591
01:02:43,320 --> 01:02:52,600
high-performance computing. You can essentially tell SnakeMake that run these things on a cluster,

592
01:02:52,600 --> 01:02:59,880
run these things with the HPC scheduler. So don't run them on the local machine,

593
01:02:59,880 --> 01:03:07,720
but run them elsewhere and run them as individual jobs, which lets you parallelize all of these

594
01:03:07,720 --> 01:03:09,800
parallelizable steps very easily.

595
01:03:16,040 --> 01:03:24,120
Yeah, it's, as I mentioned earlier, it's possible to define software, isolate software environments

596
01:03:24,120 --> 01:03:31,240
in Perlul, so essentially defining that we will now use a certain conda environment or even to

597
01:03:31,240 --> 01:03:36,600
use a certain container to run these things in. We'll come to containers later and what they are,

598
01:03:36,600 --> 01:03:45,080
how they work, and as we mentioned it's heavily used in bioinformatics and it's a nice functionality

599
01:03:45,080 --> 01:03:56,840
to archive your workflow and to properly archive it. You could, for example, put in the parameters

600
01:03:56,840 --> 01:04:04,440
that you were using in a snakemeg file and then have everything that you were using in

601
01:04:04,440 --> 01:04:10,480
that snakemeg file. And if you want to use a new parameter set, you could create a new

602
01:04:10,480 --> 01:04:15,600
snake make file and keep the old one or if the snake make file is under version control you can

603
01:04:15,600 --> 01:04:23,360
simply go back to that version. So that helps a lot in also remembering what was being used in the

604
01:04:23,360 --> 01:04:33,360
past. There are additional similar tools like make which is very heavily used in C compiling.

605
01:04:33,360 --> 01:04:44,560
There's Nextflow, Task, and other tools that help in doing this.

606
01:04:44,560 --> 01:04:45,560
And about 200 others.

607
01:04:45,560 --> 01:04:46,560
Yes.

608
01:04:46,560 --> 01:04:50,360
There are a lot of workflow managers.

609
01:04:50,360 --> 01:04:52,120
Yeah.

610
01:04:52,120 --> 01:04:56,480
And of course, computational steps can be recorded in many ways.

611
01:04:56,480 --> 01:04:59,840
A script can be perfectly sufficient.

612
01:04:59,840 --> 01:05:08,080
But make sure that when recording your computational steps, you also record input parameters.

613
01:05:08,080 --> 01:05:17,720
You also record what was, what input parameters, what stuff was used to run the analysis.

614
01:05:17,720 --> 01:05:26,360
And in snake make, I would put it in the snake file, in a batch script or any other script,

615
01:05:26,360 --> 01:05:31,160
I would try to put it into the file there as well,

616
01:05:31,160 --> 01:05:34,040
because otherwise, you will forget it.

617
01:05:34,040 --> 01:05:36,000
I know that I would.

618
01:05:36,000 --> 01:05:37,680
Yeah.

619
01:05:37,680 --> 01:05:41,520
In the notes, there is a question about parallelization.

620
01:05:41,520 --> 01:05:46,160
So how does Snake make the parallelization happen?

621
01:05:46,160 --> 01:05:49,520
Does it require the user to set some parameters?

622
01:05:52,400 --> 01:05:55,680
The minus J, I think, is the number of jobs

623
01:05:55,680 --> 01:05:57,600
that you can run in parallel.

624
01:05:57,600 --> 01:05:58,600
Yes.

625
01:05:58,600 --> 01:06:06,280
So if you would run minus J20, it would try to run 20 things in parallel.

626
01:06:06,280 --> 01:06:18,240
So what SnakeMaker does, it detects from your rules that, okay, these rules can be run in

627
01:06:18,240 --> 01:06:19,240
parallel.

628
01:06:19,240 --> 01:06:22,040
they don't depend on each other.

629
01:06:22,040 --> 01:06:27,040
And then it checks from the minus J parameter

630
01:06:27,440 --> 01:06:32,040
or the option, the number of workers,

631
01:06:32,040 --> 01:06:36,260
that how many CPUs do you have available?

632
01:06:37,340 --> 01:06:42,340
And if you have more than one CPU available,

633
01:06:43,560 --> 01:06:48,560
then it can start running the rules.

634
01:06:49,240 --> 01:06:56,240
rules in parallel. I think that's the short of it.

635
01:06:56,240 --> 01:07:03,480
Yeah, and on clusters, there is integration with SnakeMake and Slurm, but we won't go

636
01:07:03,480 --> 01:07:12,680
into this in detail at the moment. If you think that you would benefit from using SnakeMake,

637
01:07:12,680 --> 01:07:16,760
I would highly recommend going through the documentation, because what we have given

638
01:07:16,760 --> 01:07:23,400
here is a very small example and a very simple example and like always with simple examples

639
01:07:23,400 --> 01:07:32,040
they look easy to do on the surface and once you actually want to do that want to use them for you

640
01:07:32,040 --> 01:07:37,240
you have to go back to the documentation. This is mainly to show you this is something that's

641
01:07:37,240 --> 01:07:42,320
is possible, and that's available, and how to find it.

642
01:07:47,280 --> 01:07:53,400
We are at the stage when we could have the break.

643
01:07:53,400 --> 01:07:54,120
Yep.

644
01:07:54,120 --> 01:07:55,960
And I would say we have a 10-minute break

645
01:07:55,960 --> 01:07:58,760
till 2 past the hour.

646
01:07:58,760 --> 01:08:00,600
Yes.

647
01:08:00,600 --> 01:08:02,880
OK.

648
01:08:02,880 --> 01:08:06,920
Keep posting your questions on the collaboration document.

649
01:08:06,920 --> 01:08:10,960
We can keep answering them or take your break

650
01:08:10,960 --> 01:08:14,560
and have a small walk around so that you

651
01:08:14,560 --> 01:08:17,040
can come back refreshed.

652
01:08:17,040 --> 01:08:18,720
OK, then.

653
01:08:18,720 --> 01:08:21,680
Bye and see you in 10 minutes.

654
01:08:36,920 --> 01:08:38,980
you

655
01:09:06,920 --> 01:09:08,980
you

656
01:09:36,920 --> 01:09:38,980
you

657
01:10:06,920 --> 01:10:08,980
you

658
01:10:36,920 --> 01:10:38,980
you

659
01:11:06,920 --> 01:11:08,980
you

660
01:11:36,920 --> 01:11:38,980
you

661
01:12:06,920 --> 01:12:08,980
you

662
01:12:36,920 --> 01:12:38,980
you

663
01:13:06,920 --> 01:13:08,980
you

664
01:13:36,920 --> 01:13:38,980
you

665
01:14:06,920 --> 01:14:08,980
you

666
01:14:36,920 --> 01:14:38,980
you

667
01:15:06,920 --> 01:15:08,980
you

668
01:15:36,920 --> 01:15:38,980
you

669
01:16:06,920 --> 01:16:08,980
you

670
01:16:36,920 --> 01:16:38,980
you

671
01:17:06,920 --> 01:17:32,920
Okay, and welcome back.

672
01:17:32,920 --> 01:17:41,440
So, we've talked about organizing your folders, organizing your code and recording the steps.

673
01:17:41,440 --> 01:17:47,920
And the next thing that we want to talk about is recording dependencies and how to communicate

674
01:17:47,920 --> 01:17:52,160
different versions of software dependencies.

675
01:17:52,160 --> 01:17:59,320
And well, our code often depends on other codes or other libraries and that in turn

676
01:17:59,320 --> 01:18:01,280
depends on other codes and so on.

677
01:18:01,280 --> 01:18:03,780
So for reproducibility reasons,

678
01:18:03,780 --> 01:18:06,100
we can version control our code with Git,

679
01:18:06,100 --> 01:18:09,440
but how can we version control dependencies?

680
01:18:09,440 --> 01:18:12,620
How can we capture and communicate them?

681
01:18:12,620 --> 01:18:17,620
And connected to that is that we can easily end up

682
01:18:18,140 --> 01:18:20,500
in a somewhat of a dependency hell

683
01:18:20,500 --> 01:18:23,660
where different codes that need to be run

684
01:18:23,660 --> 01:18:28,660
for the same analysis actually have conflicting dependencies

685
01:18:28,660 --> 01:18:35,420
the one depends on a different version of a library than the other and that

686
01:18:35,420 --> 01:18:41,940
starts to get really problematic. And there is this nice XKCD comic that

687
01:18:41,940 --> 01:18:48,140
shows very well how our modern computational infrastructure works and

688
01:18:48,140 --> 01:18:54,740
that it's a very complex pattern of libraries and libraries and libraries

689
01:18:54,740 --> 01:19:04,820
depending on other libraries and this on top here that might be your code and it depends on a lot of

690
01:19:04,820 --> 01:19:10,820
different things down below down to operating systems kernels and then it probably depends

691
01:19:10,820 --> 01:19:16,340
on some project some random person in Nebraska has been thanklessly maintaining since 2003

692
01:19:17,220 --> 01:19:24,500
and if that piece of code breaks the whole thing tumbles down and there is actually a very

693
01:19:24,500 --> 01:19:36,340
recent example that happened way after this comic was created, where there wasn't a breakdown

694
01:19:36,340 --> 01:19:42,900
as such, but there almost happened to be a very, very, very severe security issue because

695
01:19:42,900 --> 01:19:48,740
someone socially engineered themselves into a maintainer position of one of these tiny

696
01:19:48,740 --> 01:19:56,420
bits of codes that everything relies on. And had managed to get some backdoors into the code

697
01:19:58,180 --> 01:20:08,340
and that was almost shipped to the stable versions of some operating systems. That was the xz library

698
01:20:08,340 --> 01:20:14,580
which is essentially a compression library that is used in a lot of systems as an underlying library.

699
01:20:14,580 --> 01:20:25,860
So, this picture is very accurate, and yet, unfortunately, it's very accurate.

700
01:20:25,860 --> 01:20:35,060
So to make this whole thing a bit more understandable, a bit more tangible, we can also think of

701
01:20:35,060 --> 01:20:40,500
a kitchen analogy to your code and what you're doing.

702
01:20:40,500 --> 01:20:44,860
And essentially, your software that you have, that's the recipe.

703
01:20:44,860 --> 01:20:53,740
That's the recipe on how to process the data, which are the ingredients, to get your results,

704
01:20:53,740 --> 01:20:55,500
so your dish.

705
01:20:55,500 --> 01:21:04,260
And to do that, you normally take some libraries, which are pots or tools.

706
01:21:04,260 --> 01:21:09,840
And now it's very simple to imagine that, okay, you have a recipe for a huge amount

707
01:21:09,840 --> 01:21:15,400
of pasta, because that recipe is supposed to feed 40 people.

708
01:21:15,400 --> 01:21:28,640
And your recipe says to take a 10 or 15 liter pot of water, well that wouldn't work, that

709
01:21:28,640 --> 01:21:33,560
whole recipe wouldn't work if the only pot that you have is a 1 liter pot.

710
01:21:33,560 --> 01:21:39,440
So if you only have the 1 liter version of that library, so only the 1 liter pot, you

711
01:21:39,440 --> 01:21:48,800
can't your recipe just doesn't work because you can't fill 10 kilos of spaghetti into a one liter

712
01:21:48,800 --> 01:21:59,600
pot. So that's how you can think about how software data and libraries work together.

713
01:21:59,600 --> 01:22:11,120
and there are plenty of tools that try to help you specify what tools you actually need

714
01:22:13,120 --> 01:22:22,560
and try to help you in specifying the specific library versions that are needed and handle

715
01:22:22,560 --> 01:22:28,800
all the dependencies that are underlying these libraries because you might be working with,

716
01:22:28,800 --> 01:22:38,240
for example pandas but pandas needs other libraries to work and this kind of dependency

717
01:22:38,240 --> 01:22:46,320
tree is something that you don't want to care about yourself and so defining if having a tool

718
01:22:46,320 --> 01:22:54,400
that helps you there is very beneficial and common tools that have there are conda pip virtual

719
01:22:54,400 --> 01:23:06,880
environments, poetry for package building, the requirement.txt which lists the

720
01:23:06,880 --> 01:23:10,960
individual requirements, the environment.yaml which is the equivalent to conda and so on.

721
01:23:12,400 --> 01:23:17,040
And they try to help you in defining the specific set of dependencies,

722
01:23:17,040 --> 01:23:21,760
possibly with well-defined versions. They help you in installing those dependencies

723
01:23:21,760 --> 01:23:26,320
because they get the underlying dependencies. They help you with

724
01:23:26,320 --> 01:23:32,920
recording the versions for all these dependencies. And Virtualenv and

725
01:23:32,920 --> 01:23:37,080
Anaconda for example also help you in isolating environments so

726
01:23:37,080 --> 01:23:42,080
that you can have multiple different sets of environments on one computer so

727
01:23:42,080 --> 01:23:47,720
that if you have two pieces of code that have conflicting dependencies you can

728
01:23:47,720 --> 01:23:52,400
still run both of them, you just need to change the environment for that. They even help you

729
01:23:52,400 --> 01:24:00,800
with changing the versions of R or Python per project or even within the same project

730
01:24:00,800 --> 01:24:07,840
if you have code that needs, if you have very old code that still needs Python 2, you can

731
01:24:07,840 --> 01:24:16,640
do that. If you have code that needs an R version below 4, yeah, you can do that.

732
01:24:16,640 --> 01:24:32,040
So some of these tools or approaches are Python specific and some are more general.

733
01:24:32,040 --> 01:24:39,600
So Konda, Anaconda, they are quite general.

734
01:24:39,600 --> 01:24:52,400
Yeah, while virtualenv is more a Python or pyenv, while renv is more R and so on.

735
01:24:52,400 --> 01:24:59,400
And one really beautiful thing with, for example, conda, yeah, mainly conda, mainly with actual

736
01:24:59,400 --> 01:25:08,040
or also pyenv, virtualenv, so with these whole things is that if something goes wrong, or

737
01:25:08,040 --> 01:25:13,200
want to try something out and it didn't work, you can delete the environment and recreate

738
01:25:13,200 --> 01:25:19,880
it from the environment file. So you can test, okay, I have found a library that seems to

739
01:25:19,880 --> 01:25:26,880
be solving a problem that I have, let's add it to the environment, test it, didn't work,

740
01:25:26,880 --> 01:25:32,880
okay. Before I try to remove that library again, because there might have been other

741
01:25:32,880 --> 01:25:38,800
things that came along with it that I didn't properly record yet, I just throw away the

742
01:25:38,800 --> 01:25:46,720
environment, recreate it, because it will be the same as I had before. And we have here

743
01:25:48,160 --> 01:25:55,200
five examples of students that wrote code, which depends on a couple of libraries. And

744
01:25:55,920 --> 01:26:00,800
the code was uploaded to GitHub. And let's assume we travel three years into the future

745
01:26:00,800 --> 01:26:08,320
and find the github repositories and try to rerun the code before adapting it. There are

746
01:26:08,320 --> 01:26:16,640
a couple of questions in the collaborative document now which we would like to have

747
01:26:16,640 --> 01:26:22,000
your opinions and I would give that like three minutes or so or five minutes to read through it

748
01:26:22,000 --> 01:26:29,120
and answer that and just say okay well what do you think is this reproducible or isn't that

749
01:26:29,120 --> 01:26:40,240
reproducible. Okay, so see you in five minutes.

750
01:26:52,400 --> 01:26:55,840
You can also, if you have comments about it,

751
01:26:55,840 --> 01:26:58,080
write the comments there and what the issues are.

752
01:27:14,400 --> 01:27:24,480
I think we will start discussing once we have a few comments for one of them and

753
01:27:25,840 --> 01:27:30,400
you can go through it and just listen to what we say about it in general.

754
01:27:30,400 --> 01:27:32,960
Looks like A is starting to get some...

755
01:27:41,040 --> 01:27:45,600
Yeah, I think A, we already have a clear tendency.

756
01:27:46,320 --> 01:27:47,600
Yeah, consensus.

757
01:27:48,160 --> 01:27:52,080
That this is not reproducible and yeah, absolutely.

758
01:27:52,080 --> 01:27:57,120
if you just have imports you might not even know which libraries are actually being used

759
01:27:57,120 --> 01:28:03,840
because sometimes there are two libraries that provide the same imports and that essentially

760
01:28:03,840 --> 01:28:09,600
means that you can either load library A or library B and or you can have a dependency

761
01:28:09,600 --> 01:28:15,840
on library A or library B but in the code they have the same import statement because you have

762
01:28:15,840 --> 01:28:22,080
conflicting import. That's absolutely possible. So yeah, this is anything but reproducible.

763
01:28:22,960 --> 01:28:29,680
And also not very nice if you think about the workload you are putting on the

764
01:28:30,560 --> 01:28:34,480
next person trying to figure out. Or on yourself rerunning it.

765
01:28:34,480 --> 01:28:38,320
Yeah. B, we also already have a

766
01:28:38,960 --> 01:28:44,640
quite clear thing that, yeah, if you have a list of libraries that are used, that's at least helping,

767
01:28:44,640 --> 01:28:53,440
but if you don't have any versions you sometimes have breaking changes in between versions and

768
01:28:55,040 --> 01:29:00,240
you don't necessarily know which version was being used. You can try to guess what version

769
01:29:00,240 --> 01:29:05,360
was being used but if this was being created somewhere in the transition between let's say

770
01:29:05,360 --> 01:29:13,120
major version 2 and major version 3 of the same library it's a whole lot of guesswork which

771
01:29:13,120 --> 01:29:21,600
version was actually used, because very often published code is already older. So it was

772
01:29:21,600 --> 01:29:29,840
essentially developed a year ago or so, and the version that was used back then was being used.

773
01:29:31,040 --> 01:29:37,120
And yeah, we just don't know. Yeah, for example, so this function uses or this

774
01:29:37,120 --> 01:29:43,960
This class uses a function that was introduced in version two, but was deprecated in version

775
01:29:43,960 --> 01:29:49,160
four, or say, deprecated in version six.

776
01:29:49,160 --> 01:29:55,360
So it must be somewhere between two, three, four, five, and then the subversions.

777
01:29:55,360 --> 01:30:01,800
And it's, again, it's not very nice thing to do to yourself or to the next person trying

778
01:30:01,800 --> 01:30:03,640
to figure out your code.

779
01:30:03,640 --> 01:30:10,440
see, again, yeah, as people mentioned here, it's nice that you have an environment file

780
01:30:10,440 --> 01:30:15,400
that already helps quite a bit, but there is, of course, still missing version numbers,

781
01:30:15,400 --> 01:30:19,560
so you don't know which versions were actually being used. Is this now Python 3 or Python 2?

782
01:30:23,960 --> 01:30:28,440
So, and what this file is supposed to tell you. Okay, that's actually a good question here.

783
01:30:28,440 --> 01:30:33,440
So the environment.yaml file is a file for Conda.

784
01:30:34,280 --> 01:30:38,920
Conda is a dependency management system

785
01:30:38,920 --> 01:30:41,800
that reads through this and says,

786
01:30:41,800 --> 01:30:43,480
okay, well, I'll create an environment

787
01:30:43,480 --> 01:30:46,000
with the following name.

788
01:30:47,160 --> 01:30:52,160
And then I'm using these channels,

789
01:30:52,960 --> 01:30:54,200
I'm using these sources.

790
01:30:54,200 --> 01:30:55,640
And in this case, it's Conda Forge.

791
01:30:55,640 --> 01:31:00,640
conda-forge is a pretty popular repository for packages.

792
01:31:00,800 --> 01:31:04,160
And the dependencies are then listed as scipy.

793
01:31:04,160 --> 01:31:09,160
So the scipy package, numpy, sympy, click, python, pip.

794
01:31:11,280 --> 01:31:15,240
And conda also allows you to do installs with pip

795
01:31:15,240 --> 01:31:17,920
because not every package is actually in conda.

796
01:31:18,840 --> 01:31:20,720
And it allows you to create an environment

797
01:31:20,720 --> 01:31:23,480
that has pip installations.

798
01:31:23,480 --> 01:31:28,480
And here, this indicates that, okay, this is Git.

799
01:31:29,200 --> 01:31:33,120
This is a PIP installation from this Git repository

800
01:31:33,120 --> 01:31:35,620
at the master branch.

801
01:31:38,380 --> 01:31:40,720
And actually that's a problem in itself

802
01:31:40,720 --> 01:31:42,320
because master can have changed.

803
01:31:42,320 --> 01:31:44,520
There is no idea, there is no information

804
01:31:44,520 --> 01:31:47,000
on what master is nowadays.

805
01:31:47,000 --> 01:31:50,040
This can be completely different, so.

806
01:31:50,040 --> 01:31:55,040
And very likely is because the latest master.

807
01:31:55,160 --> 01:31:59,760
Well, yeah, most likely, assuming that this is

808
01:31:59,760 --> 01:32:02,920
from other users that actually still develop their code.

809
01:32:04,480 --> 01:32:07,720
4D, we have heard of the commit.

810
01:32:07,720 --> 01:32:11,800
And the versions are, okay, so how you fix that

811
01:32:11,800 --> 01:32:14,280
could be like in the nodes.

812
01:32:14,280 --> 01:32:17,880
In version D, where you essentially have

813
01:32:17,880 --> 01:32:22,240
a specific git commit or a specific tag

814
01:32:22,240 --> 01:32:24,540
that this project is being used at.

815
01:32:28,520 --> 01:32:33,520
There is the comment that there might be different builds.

816
01:32:35,440 --> 01:32:36,980
That's true.

817
01:32:36,980 --> 01:32:39,280
There's one problem with builds.

818
01:32:39,280 --> 01:32:41,580
Builds can be operating system specific.

819
01:32:41,580 --> 01:32:46,580
So for absolute reproducibility, yes, you need the build.

820
01:32:47,880 --> 01:32:51,640
But commonly, the version is sufficient.

821
01:32:51,640 --> 01:32:58,120
The version is sufficient to hopefully get the same results.

822
01:32:58,120 --> 01:33:01,280
If you really need to go down to the build number,

823
01:33:01,280 --> 01:33:05,840
it's very likely that something fishy is happening,

824
01:33:05,840 --> 01:33:12,520
and I wouldn't rely on my results too much actually.

825
01:33:13,440 --> 01:33:17,280
But yes, for complete reproducibility,

826
01:33:17,280 --> 01:33:26,400
the build should be in there, for usability I wouldn't put it in, a place like that.

827
01:33:27,680 --> 01:33:37,760
And I'll come to that a bit later actually, in the next demo where we show the differences here.

828
01:33:37,760 --> 01:33:45,440
Um, yeah, uh, anything else?

829
01:33:47,440 --> 01:33:55,920
Um, yeah, this has the advantage, the E has the advantage over D that, um,

830
01:33:57,680 --> 01:34:02,480
these projects that were referenced here have now been put onto Conda.

831
01:34:02,480 --> 01:34:11,680
But actually, if that is, you can be happy. If that isn't, well, that's also something that's

832
01:34:11,680 --> 01:34:17,680
very common, that you need some pip packages or that you need something from a different

833
01:34:17,680 --> 01:34:23,040
git repository. And of course, there is the problem that these git repositories could

834
01:34:23,040 --> 01:34:31,280
have been deleted. But if you want to make sure that you keep those git repositories

835
01:34:31,280 --> 01:34:36,800
and you need a specific version from a specific git repository, fork it and use your own fork.

836
01:34:36,800 --> 01:34:41,840
Because you are in control of your own fork and as long as you don't delete that fork, that stays.

837
01:34:42,720 --> 01:34:50,080
So this way is perfectly fine if you make sure that the repositories don't disappear.

838
01:34:52,960 --> 01:34:56,480
Okay, and that's essentially also what's listed in the solution.

839
01:34:56,480 --> 01:35:06,640
So, what about PIP packages and conda packages? Do they not disappear ever?

840
01:35:06,640 --> 01:35:17,240
They can. Hopefully not, but even conda packages can disappear, especially in very fast moving

841
01:35:17,240 --> 01:35:29,720
fields, or if you use, let's say, more unstable channels, more developmental channels.

842
01:35:29,720 --> 01:35:37,080
I have seen some PyTorch versions no longer being supplied by some of the providers because

843
01:35:37,080 --> 01:35:41,560
they are too old and considered as not useful anymore, but that's, of course, a real problem

844
01:35:41,560 --> 01:35:42,560
for reproducibility.

845
01:35:42,560 --> 01:35:43,560
Yeah.

846
01:35:43,560 --> 01:35:52,440
So in general, if you use well-known and widely used channels and packages from conda or pip,

847
01:35:52,440 --> 01:36:01,720
it is very unlikely that they will disappear. But yeah, they can. And how to solve that problem,

848
01:36:01,720 --> 01:36:10,840
we can come to, well, how to switch that problem to a different level,

849
01:36:10,840 --> 01:36:15,160
we will come to in a bit.

850
01:36:15,160 --> 01:36:25,360
So now, we will demo creating our own small time capsule for an environment and for the

851
01:36:25,360 --> 01:36:35,880
future world and yeah, this is essentially, I have created this environment.yaml and as

852
01:36:35,880 --> 01:36:45,120
As explained above, I can quickly show that this is essentially what's written in here.

853
01:36:45,120 --> 01:36:53,000
So conceptually, again, it wants to create an environment called myenv with the channels

854
01:36:53,000 --> 01:37:00,280
on the forge, and in this case, defaults, which is the Anaconda environment.

855
01:37:00,280 --> 01:37:05,640
One mention here, this can become a bit problematic, because Anaconda recently changed

856
01:37:05,640 --> 01:37:14,120
their change their policies for even that even academic institutions now have to pay if they

857
01:37:14,120 --> 01:37:21,000
have over a certain amount of users and it might be good not to use defaults here.

858
01:37:24,680 --> 01:37:31,480
CondaForge normally has all the packages that you need and even has more packages than default

859
01:37:31,480 --> 01:37:33,700
than the Anaconda environment,

860
01:37:33,700 --> 01:37:36,500
but the Anaconda environment is a bit better curated.

861
01:37:38,460 --> 01:37:41,420
Okay, and then it is the dependency.

862
01:37:41,420 --> 01:37:44,440
So this would be something that depends on Python 3.10,

863
01:37:46,060 --> 01:37:48,940
also wants to have mountain NumPy, pandas and seaborn.

864
01:37:48,940 --> 01:37:50,800
And yes, it doesn't give any,

865
01:37:52,140 --> 01:37:57,140
it doesn't give any version numbers here at the moment.

866
01:37:57,140 --> 01:38:06,940
moment. So I will be using Mamba instead of Conda and the reason is that otherwise Conda

867
01:38:06,940 --> 01:38:14,060
can take quite a bit of time to actually create environments and I want to spare us all the

868
01:38:14,060 --> 01:38:22,540
time. Mamba is a drop-in replacement that's just faster because it uses C while Conda

869
01:38:22,540 --> 01:38:26,860
is programmed entirely in Python.

870
01:38:26,860 --> 01:38:32,220
Okay, so this will essentially create this environment,

871
01:38:32,220 --> 01:38:36,380
check the sources that I indicated,

872
01:38:36,380 --> 01:38:42,060
and start to then download the files.

873
01:38:46,940 --> 01:38:49,740
Or it should.

874
01:38:49,740 --> 01:39:00,660
So it checks for these and I should have them already downloaded.

875
01:39:00,660 --> 01:39:05,700
So there's, oh, it actually found something that probably has a newer version and it wants

876
01:39:05,700 --> 01:39:07,860
to take the newer version.

877
01:39:07,860 --> 01:39:10,740
So that's something which is actually quite nice to see.

878
01:39:10,740 --> 01:39:18,620
So if I had created that a little bit earlier, it would be slightly different now because

879
01:39:18,620 --> 01:39:20,580
this is a different version.

880
01:39:20,580 --> 01:39:23,460
So, and if I then, let's say,

881
01:39:23,460 --> 01:39:27,620
conda activate myenv,

882
01:39:28,740 --> 01:39:31,980
I have my environment where in Python,

883
01:39:31,980 --> 01:39:36,980
I can import Seaborn and have my Seaborn library and so on.

884
01:39:38,580 --> 01:39:43,580
So, I can now also export this environment.

885
01:39:48,620 --> 01:40:00,580
And that's essentially what was mentioned earlier in the notes, that this lists everything

886
01:40:00,580 --> 01:40:03,720
including the build number, the build ID.

887
01:40:03,720 --> 01:40:12,020
And if you look into this a bit, you will notice things like this one, where libplus

888
01:40:12,020 --> 01:40:13,820
is Linux 64.

889
01:40:13,820 --> 01:40:20,100
So yeah, I'm on a Linux system and this is a build that's specific for Linux.

890
01:40:20,100 --> 01:40:28,920
So if I would provide this dependency file, anyone who is on a Windows system will have

891
01:40:28,920 --> 01:40:35,940
problems installing this environment because this is not available for Windows.

892
01:40:35,940 --> 01:40:46,520
That's why this kind of system, where you have all the individual build numbers, might

893
01:40:46,520 --> 01:40:49,300
not be the best thing.

894
01:40:49,300 --> 01:40:55,220
It's good to have, and I would put it in as for reproducibility, so that people can actually

895
01:40:55,220 --> 01:40:59,220
see what exact builds were being used.

896
01:40:59,220 --> 01:41:05,900
But for usability of your code, so if someone wants to use that library in a different project,

897
01:41:05,900 --> 01:41:08,180
This is questionable.

898
01:41:08,180 --> 01:41:14,260
There is the other option, which is very convenient.

899
01:41:14,260 --> 01:41:26,340
You can say from history, and if I check into that, this is exactly what I installed.

900
01:41:26,340 --> 01:41:33,460
This lists exactly, even if I later on would install something with mamba install whatever,

901
01:41:33,460 --> 01:41:55,260
would list exactly the right packages here. There is a third option, which is called nobuilds.

902
01:41:55,260 --> 01:42:04,460
And that is the same as the environments file, but without the builds.

903
01:42:04,460 --> 01:42:10,100
That can also be useful if you want to make a clear specification which underlying packages

904
01:42:10,100 --> 01:42:13,340
were being used without providing builds.

905
01:42:13,340 --> 01:42:18,860
But it still has the problem that there are things like the LD implementation in Linux.

906
01:42:18,860 --> 01:42:24,580
So yeah, that might still not work on a Windows system.

907
01:42:24,580 --> 01:42:29,460
So what is the recommendation here?

908
01:42:29,460 --> 01:42:30,260
Can you repeat that?

909
01:42:30,260 --> 01:42:33,820
What I personally would recommend for a project

910
01:42:33,820 --> 01:42:41,460
to provide is the export from history, so this.

911
01:42:41,460 --> 01:42:45,300
And for reproducibility reasons, I

912
01:42:45,300 --> 01:42:49,380
would put in the complete export.

913
01:42:49,380 --> 01:42:52,100
Because that shows, then if someone

914
01:42:52,100 --> 01:42:54,420
has the same operating system and so on,

915
01:42:54,420 --> 01:42:59,180
this should be really exactly the same environment

916
01:42:59,180 --> 01:43:03,260
that they get when creating that.

917
01:43:03,260 --> 01:43:06,140
While the FromHistory will create an environment

918
01:43:06,140 --> 01:43:11,500
that is as close to what I would recreate

919
01:43:11,500 --> 01:43:17,060
if I would start this now, and is

920
01:43:17,060 --> 01:43:20,580
the one that solves on all operating systems,

921
01:43:20,580 --> 01:43:23,660
so is more general.

922
01:43:23,660 --> 01:43:29,820
But at the same time, we have to admit that this is not a good initial environment file.

923
01:43:29,820 --> 01:43:33,420
Your initial environment file should have the NumPy version, should have the Pandas version,

924
01:43:33,420 --> 01:43:35,660
should have the Seaborn version that you want to use.

925
01:43:37,100 --> 01:43:37,580
Okay.

926
01:43:37,580 --> 01:43:38,220
So, yeah.

927
01:43:39,260 --> 01:43:40,540
So, yeah.

928
01:43:40,540 --> 01:43:43,180
So, to summarize, because this is...

929
01:43:45,500 --> 01:43:52,780
So, in your initial environment file do have the version numbers.

930
01:43:53,660 --> 01:44:14,780
But then for completeness, it is OK to also include in your repo the complete export with the builds.

931
01:44:14,780 --> 01:44:20,460
I would even recommend it as an additional piece of information.

932
01:44:20,460 --> 01:44:23,500
Yeah, because it doesn't hurt.

933
01:44:23,500 --> 01:44:24,000
Yeah.

934
01:44:24,000 --> 01:44:25,060
OK, good.

935
01:44:25,060 --> 01:44:25,560
OK.

936
01:44:29,100 --> 01:44:30,940
We unfortunately don't have really time

937
01:44:30,940 --> 01:44:35,260
to go into details with R. But essentially, you

938
01:44:35,260 --> 01:44:39,020
can use Conda with R as well.

939
01:44:39,020 --> 01:44:43,620
Conda does have R, does support R.

940
01:44:43,620 --> 01:44:46,340
And I have created several environments with Conda

941
01:44:46,340 --> 01:44:49,380
OS for R with using Conda.

942
01:44:49,380 --> 01:45:01,700
So, but since we saw that an underlying library, a system library can cause problems.

943
01:45:01,700 --> 01:45:07,780
And up until now, we mainly considered non-system libraries, even though Conda already does

944
01:45:07,780 --> 01:45:11,900
some system library stuff.

945
01:45:11,900 --> 01:45:14,780
Let's go to recording the environments.

946
01:45:14,780 --> 01:45:22,340
And I think everyone has heard the, well, it works on my machine, comment from someone

947
01:45:22,340 --> 01:45:24,540
at some point.

948
01:45:24,540 --> 01:45:34,380
And this meme sums up the idea behind Docker or other containerization systems quite well.

949
01:45:34,380 --> 01:45:40,340
That it works on my machine, well, then we'll ship your machine.

950
01:45:40,340 --> 01:45:44,620
And yeah, that is how Docker was born, essentially.

951
01:45:44,620 --> 01:45:53,940
So we want to ship something or give something that provides as much as possible of the operating

952
01:45:53,940 --> 01:45:58,560
system to the user in the end.

953
01:45:58,560 --> 01:46:03,360
And to go back to our kitchen analogy, so as we said, our code scripts are the cooking

954
01:46:03,360 --> 01:46:09,860
recipes and then with containers you have container definition files and they are like

955
01:46:09,860 --> 01:46:17,300
blueprint to build a kitchen with all the utensils and stuff that the recipe needs to be prepared.

956
01:46:19,060 --> 01:46:24,660
The next thing is we have the container images and those are kind of showroom kitchens based on

957
01:46:24,660 --> 01:46:30,820
these container, based on the blueprints that we have created before and a showroom kitchen is not

958
01:46:30,820 --> 01:46:35,220
connected. So there they are, electricity is not plugged in, water is not plugged in,

959
01:46:35,220 --> 01:46:38,460
and you can't really use it.

960
01:46:38,460 --> 01:46:40,860
And a container is then essentially

961
01:46:40,860 --> 01:46:44,860
this showroom kitchen connected to everything.

962
01:46:44,860 --> 01:46:46,820
And in addition, there's a protective layer

963
01:46:46,820 --> 01:46:50,820
being put on everything so that you can work with it.

964
01:46:50,820 --> 01:46:56,260
And in the end, you remove this protective layer

965
01:46:56,260 --> 01:47:04,300
so that you still have the original container

966
01:47:04,300 --> 01:47:13,860
kind of. As we said, containers can be built to bundle all the necessary ingredients, data,

967
01:47:13,860 --> 01:47:23,020
code, environment, operating system, even though including data might be problematic,

968
01:47:23,020 --> 01:47:31,500
depending on your system. A container image is somewhat like, yeah, also like a piece

969
01:47:31,500 --> 01:47:36,620
of paper with all the operating system on it and when you run it, you put a transparent

970
01:47:36,620 --> 01:47:42,980
sheet on it to form essentially the container.

971
01:47:42,980 --> 01:47:47,140
Then that container runs and you write on that transparent sheet and do all the changes

972
01:47:47,140 --> 01:47:49,860
on this transparent sheet.

973
01:47:49,860 --> 01:47:56,820
And when you're done, you pair off that transparent sheet and you still have your original container

974
01:47:56,820 --> 01:48:01,060
and everything that was done on this transparent sheet is gone.

975
01:48:03,620 --> 01:48:06,420
And the definition files are essentially text files that

976
01:48:07,540 --> 01:48:11,220
contain a series of instructions on how to build these container images.

977
01:48:11,220 --> 01:48:16,420
So to recap here, we have three concepts.

978
01:48:17,380 --> 01:48:23,700
And first, kind of like a starting point would be the definition file,

979
01:48:23,700 --> 01:48:31,060
let's say a docker file or a similarity definition file. And we use that definition file

980
01:48:31,060 --> 01:48:42,980
to create an image, a container image, or image for short. And that image and that definition file,

981
01:48:42,980 --> 01:48:51,140
of course, they are persistent. But then when we create a container out of that image,

982
01:48:51,140 --> 01:49:00,180
image, then that container is not persistent. So the container is what is actually being

983
01:49:00,180 --> 01:49:09,520
run. And when that container is stopped, it stops running, then it vanishes. But the image

984
01:49:09,520 --> 01:49:12,680
is still there on the disk.

985
01:49:12,680 --> 01:49:20,420
Then everything that was changed in the container vanishes. Yes. Okay. Yeah. And why would you

986
01:49:20,420 --> 01:49:27,860
want to use these? There are two main reasons. One is installing a certain software is tricky

987
01:49:27,860 --> 01:49:39,540
or not supported on the system that you're using. That's very common on HPC systems. HPC systems

988
01:49:41,540 --> 01:49:46,660
in general have a very very minimalistic operating system with as little

989
01:49:46,660 --> 01:49:57,540
with as little software installed as possible as to leave as much computational and memory

990
01:49:57,540 --> 01:50:07,140
available for a user to exploit and use. But that means that a lot of small libraries that

991
01:50:07,140 --> 01:50:13,500
code depends on are not there. So what you can do with a container, you can essentially

992
01:50:13,500 --> 01:50:15,620
put all the stuff in that container

993
01:50:15,620 --> 01:50:18,940
and run your code via that container.

994
01:50:20,580 --> 01:50:23,260
The other option is that you want to make sure

995
01:50:23,260 --> 01:50:25,380
that whoever is using the code

996
01:50:25,380 --> 01:50:27,740
use it in the same kind of environment

997
01:50:27,740 --> 01:50:29,620
or same environment as you.

998
01:50:29,620 --> 01:50:33,460
And then you can provide them an image of your container

999
01:50:33,460 --> 01:50:35,460
because then you essentially

1000
01:50:35,460 --> 01:50:37,700
have provided the whole environment.

1001
01:50:37,700 --> 01:50:51,540
There might be a problem if people are using different architectures than you.

1002
01:50:51,540 --> 01:51:01,860
And there might be a problem if people are using different operating system menus.

1003
01:51:01,860 --> 01:51:06,780
You can run Linux containers on Windows.

1004
01:51:06,780 --> 01:51:10,900
That works reasonably well because Windows has a Windows subsystem for Linux, but you

1005
01:51:10,900 --> 01:51:15,140
can't really run Windows containers on Linux, unfortunately.

1006
01:51:15,140 --> 01:51:19,900
So one way it works, the other, unfortunately, doesn't.

1007
01:51:19,900 --> 01:51:20,900
Yeah.

1008
01:51:20,900 --> 01:51:30,940
So the shipping the machine is a bit of an exaggeration.

1009
01:51:30,940 --> 01:51:38,140
So let's have a look at one of these container recipes.

1010
01:51:38,140 --> 01:51:40,380
This is a Singularity definition file,

1011
01:51:40,380 --> 01:51:42,140
and there's a link to the reference

1012
01:51:42,140 --> 01:51:44,780
if you want to look into it in more detail.

1013
01:51:44,780 --> 01:51:48,580
And Singularity commonly starts with an information

1014
01:51:48,580 --> 01:51:53,700
on where this is coming from, and Singularity

1015
01:51:53,700 --> 01:51:59,300
can use Docker images to base your new images on.

1016
01:51:59,300 --> 01:52:02,100
And if it says a bootstrap essentially indicates,

1017
01:52:02,100 --> 01:52:04,200
okay, this is where it's coming from.

1018
01:52:04,200 --> 01:52:06,820
So this comes from the Docker repository.

1019
01:52:06,820 --> 01:52:11,820
And from is the statement on what is the original image

1020
01:52:12,760 --> 01:52:15,660
that we are using as a base for what we are doing here.

1021
01:52:16,620 --> 01:52:19,460
And that's commonly some operating system

1022
01:52:19,460 --> 01:52:22,900
or some programming language that you're using

1023
01:52:22,900 --> 01:52:26,380
where essentially all the packages that you need

1024
01:52:26,380 --> 01:52:35,100
for that base operating system or base programming language are already installed and then you can

1025
01:52:35,100 --> 01:52:44,300
start to do more things with it. And POST is then essentially what happens after that

1026
01:52:44,300 --> 01:52:51,020
basic installation. So what changes do we need to do to our system to make it do what we want

1027
01:52:51,020 --> 01:52:58,220
the container to do. And at least on any Linux or on any Ubuntu, this commonly starts with

1028
01:52:58,220 --> 01:53:05,740
apt-get y-update, so just get the latest updates, which can in itself be a bit of a problem if you

1029
01:53:05,740 --> 01:53:14,460
want to redo that. And then install the packages that we need. You can set some environment

1030
01:53:14,460 --> 01:53:20,620
variables. You can potentially also copy over files and so on. And then you have a run script,

1031
01:53:20,620 --> 01:53:26,220
which is the final command that is being run when this container is being run.

1032
01:53:27,420 --> 01:53:32,540
So this container would run date pipe to kawase pipe to locket. That's what this

1033
01:53:32,540 --> 01:53:37,180
container would be doing. It's not very useful, but it's just an example.

1034
01:53:37,180 --> 01:53:53,020
Yeah, and so does every image that we build, do they all like run a script or?

1035
01:53:53,020 --> 01:53:55,820
No, you don't necessarily need to run a script.

1036
01:53:55,820 --> 01:54:03,620
You can also have a container that essentially doesn't do anything and just provides an environment.

1037
01:54:03,620 --> 01:54:07,220
the way you need to tell it, okay, what do you want to execute in the container?

1038
01:54:07,220 --> 01:54:15,220
Okay. So then it's kind of like a generic platform to run whatever script you want

1039
01:54:15,220 --> 01:54:19,940
in that specific environment. Okay. And there are a couple of different

1040
01:54:22,900 --> 01:54:28,660
container platforms. There's Docker and Podman, which is more of a, which are, I would say,

1041
01:54:28,660 --> 01:54:35,540
more of a single user. In particular, Docker is more of a single or a container for a single

1042
01:54:35,540 --> 01:54:44,820
user system because Docker has the disadvantage that it essentially needs to have administered

1043
01:54:44,820 --> 01:54:55,460
for pseudo rights and it will run essentially as a super user, so it can do everything on

1044
01:54:55,460 --> 01:55:02,500
your system. Singularity and Obtainer are pretty popular on high-performance computing systems

1045
01:55:02,500 --> 01:55:07,540
because they essentially get rid of this requirement of running it as a super user.

1046
01:55:10,980 --> 01:55:15,140
And you can run and you can still run these containers.

1047
01:55:15,140 --> 01:55:26,300
Potman is very close to Docker and yes, what's the default container engine on Red Hat systems,

1048
01:55:26,300 --> 01:55:27,300
for example.

1049
01:55:27,300 --> 01:55:28,300
Okay.

1050
01:55:28,300 --> 01:55:35,340
So, if you have a single machine or like a single user or multi-user.

1051
01:55:35,340 --> 01:55:37,100
If you have a single machine, yeah.

1052
01:55:37,100 --> 01:55:42,260
If you have a single machine, you can, no super user rights, you can use singularity

1053
01:55:42,260 --> 01:55:43,660
obtainer Potman.

1054
01:55:43,660 --> 01:55:46,100
If you have super user rights, you can use Docker.

1055
01:55:46,100 --> 01:55:49,260
If you don't have super user rights, you can't use Docker.

1056
01:55:49,260 --> 01:55:51,320
It's pretty simple.

1057
01:55:53,100 --> 01:55:58,100
Someone can add you to the Docker users,

1058
01:55:58,420 --> 01:56:01,580
but that would essentially give you super user rights.

1059
01:56:01,580 --> 01:56:04,420
So they can as well just give you

1060
01:56:04,420 --> 01:56:05,940
administrative rights then.

1061
01:56:07,660 --> 01:56:10,060
So pros and cons of containers.

1062
01:56:10,060 --> 01:56:12,900
Well, they allow you to move workflows

1063
01:56:12,900 --> 01:56:17,900
across different platforms with the constraints

1064
01:56:17,920 --> 01:56:19,220
that we mentioned earlier.

1065
01:56:20,460 --> 01:56:23,420
They can definitely solve the works on my machine situation

1066
01:56:23,420 --> 01:56:28,100
because you essentially ship the operating system

1067
01:56:28,100 --> 01:56:29,940
or the underlying libraries.

1068
01:56:32,940 --> 01:56:35,780
For software with many dependencies,

1069
01:56:35,780 --> 01:56:37,660
they can offer the only way to preserve

1070
01:56:37,660 --> 01:56:40,220
the computational environment future of usability.

1071
01:56:40,220 --> 01:56:49,540
What we had previously where this conda environment had things, now we can create this image and

1072
01:56:49,540 --> 01:56:54,820
we can actually ship this image because that image, regardless on whether the repositories

1073
01:56:54,820 --> 01:57:01,220
are no longer in the, or the repositories no longer have these versions, they are in

1074
01:57:01,220 --> 01:57:02,800
the image.

1075
01:57:02,800 --> 01:57:05,460
If the image is created, they are in the image.

1076
01:57:05,460 --> 01:57:07,900
So for reproducibility, you need the image.

1077
01:57:07,900 --> 01:57:12,580
You don't necessarily need the definition file, but that is very, very useful to reproduce

1078
01:57:12,580 --> 01:57:22,120
the image, but if you want to have it reproducible, you need to provide that image.

1079
01:57:22,120 --> 01:57:26,660
It's also a mechanism to send the computer to the data when your dataset is either too

1080
01:57:26,660 --> 01:57:33,620
large to transfer or when your dataset is in a secure environment and you just can't,

1081
01:57:33,620 --> 01:57:34,700
you don't have an internet access,

1082
01:57:34,700 --> 01:57:39,020
so you can't just install conda packages or whatever,

1083
01:57:39,020 --> 01:57:42,340
but you can give the image file to the system administrator

1084
01:57:42,340 --> 01:57:45,580
and they will put that image file onto that computer

1085
01:57:45,580 --> 01:57:49,020
and then you can run the tools that your image provides.

1086
01:57:52,340 --> 01:57:56,420
It's a further set of separation

1087
01:57:56,420 --> 01:57:58,860
where you can install software into a file,

1088
01:57:58,860 --> 01:58:02,220
so that image file instead of onto your computer,

1089
01:58:02,220 --> 01:58:08,060
separating again or essentially meaning that you don't have to change your computer setup

1090
01:58:08,060 --> 01:58:16,700
to install something. There are of course also some drawbacks because containers can be used

1091
01:58:16,700 --> 01:58:22,540
to hide away software installation problems and which should normally have been solved by

1092
01:58:22,540 --> 01:58:29,260
better development practices. So yeah it's too difficult to install, yeah we don't make the

1093
01:58:29,260 --> 01:58:33,420
installation easier, which would be the right thing to do, we'll just provide a Docker image

1094
01:58:33,420 --> 01:58:41,180
so that people can use it. Yeah. You can run into the, instead of works on my machine,

1095
01:58:41,180 --> 01:58:46,780
works only in this container, which again leads to the same question, why does it only work in

1096
01:58:46,780 --> 01:58:53,420
this container? What's in this container that makes it possible? And if that is, yeah,

1097
01:58:53,420 --> 01:58:59,580
a specific version of a normally available software then yeah there might be problems

1098
01:58:59,580 --> 01:59:07,180
with what you have actually. They can and are difficult and are somewhat difficult to modify

1099
01:59:08,380 --> 01:59:17,100
and depending on what you package in there they can become very large. So every bit of data that

1100
01:59:17,100 --> 01:59:22,380
you would put into a container that's why I said shipping the data in there or putting data into

1101
01:59:22,380 --> 01:59:30,060
a container is a questionable thing that will make that container larger. For example, if you have

1102
01:59:30,060 --> 01:59:35,820
large language models, you don't really want to put those large language models into a container

1103
01:59:36,700 --> 01:59:41,660
because you will just increase the container size a lot and if you use that model in multiple

1104
01:59:41,660 --> 01:59:49,340
different containers, imagine a 40 gigabyte model and now all your containers are 40 gigabyte in size

1105
01:59:49,340 --> 02:00:00,020
Instead, what you can do is you can have that image elsewhere or have the model elsewhere

1106
02:00:00,020 --> 02:00:03,460
and load it into the container when it's run.

1107
02:00:03,460 --> 02:00:08,620
That makes it a bit less reproducible because you're not shipping the data, but overall,

1108
02:00:08,620 --> 02:00:11,220
it's I would say the better choice.

1109
02:00:11,220 --> 02:00:20,940
Yeah, so then we are assuming that hopefully the language model will be distributed in

1110
02:00:20,940 --> 02:00:26,060
some other centralized place, for example, Hackingface or something.

1111
02:00:26,060 --> 02:00:27,060
Yes.

1112
02:00:27,060 --> 02:00:33,260
So, there are different places where containers can be found.

1113
02:00:33,260 --> 02:00:39,740
Docker Hub is very popular, KUAI is also quite popular, GitHub and GitLab container registries

1114
02:00:39,740 --> 02:00:42,700
can also be used, or even Zenodo.

1115
02:00:42,700 --> 02:00:50,520
So there was this warning about only use official and trusted images.

1116
02:00:50,520 --> 02:00:57,420
So what is your definition for an official and trusted image?

1117
02:00:57,420 --> 02:01:01,900
To me, it's the same as any other software that I use from the internet.

1118
02:01:01,900 --> 02:01:07,380
If I want to use a container, it should be coming from the essentially creators of the

1119
02:01:07,380 --> 02:01:12,540
the software that I want to use, not from some third party,

1120
02:01:12,540 --> 02:01:18,300
whatever, that provides me WinZip or whatever.

1121
02:01:18,300 --> 02:01:20,780
Yeah, if I want to have PuTTY, I'm

1122
02:01:20,780 --> 02:01:22,660
going to the PuTTY web page and download it

1123
02:01:22,660 --> 02:01:26,300
from the PuTTY web page, and not from some third party where

1124
02:01:26,300 --> 02:01:29,620
I don't know if this is actually PuTTY or just a Trojan that's

1125
02:01:29,620 --> 02:01:32,860
trying to, that I've been installing on my system.

1126
02:01:32,860 --> 02:01:45,900
Yeah, so if I want to use an image of Ubuntu, then I will use an image provided by the Linux

1127
02:01:46,620 --> 02:01:51,900
Foundation or whoever is responsible for Ubuntu development.

1128
02:01:51,900 --> 02:01:59,180
And similar to what we had earlier with the environments or the dependencies, we also here

1129
02:01:59,180 --> 02:02:06,700
now have a dockerfile and I want to quickly go through the dockerfile to see what is actually

1130
02:02:08,460 --> 02:02:13,260
how the dockerfile can be reproduced or if there are problems with this dockerfile

1131
02:02:13,260 --> 02:02:20,780
or reproducibility. One mention right at the beginning, if you really want it to be

1132
02:02:20,780 --> 02:02:26,620
reproducible provide the image not just the dockerfile because only the image is what you

1133
02:02:26,620 --> 02:02:33,260
actually used. And the Dockerfile is only the way how this image should be generated, but

1134
02:02:33,260 --> 02:02:40,220
we'll mention why this is a bit problematic. So we have the, or the singularity file here.

1135
02:02:40,780 --> 02:02:46,460
So again, we have a singularity that depends on Docker and it starts from Ubuntu latest.

1136
02:02:48,940 --> 02:02:54,780
Is that a good idea, Timo? Yeah, that's immediately a problem that the Ubuntu latest

1137
02:02:54,780 --> 02:03:01,700
just is dependent on when you are building the image.

1138
02:03:01,700 --> 02:03:06,140
Yeah, three years ago, this was Ubuntu 21 or something.

1139
02:03:06,140 --> 02:03:08,500
Nowadays, it's 24 or something.

1140
02:03:08,500 --> 02:03:12,220
So yeah, it's building on a completely, not completely,

1141
02:03:12,220 --> 02:03:13,980
but a different operating system.

1142
02:03:13,980 --> 02:03:15,980
So this would definitely not be the same

1143
02:03:15,980 --> 02:03:19,220
if I run this now than three years ago.

1144
02:03:19,220 --> 02:03:22,780
Then we start with our post, so with our installations.

1145
02:03:22,780 --> 02:03:30,940
we export an environment for the or environment variable for the installation and time

1146
02:03:32,540 --> 02:03:41,500
we upgrade update as we mentioned before we upgrade install with a couple of libraries

1147
02:03:41,500 --> 02:03:49,020
and this already this is where this problem also comes back in these libraries can have changed

1148
02:03:49,020 --> 02:03:50,020
changed.

1149
02:03:50,020 --> 02:03:54,540
Even if we have a fixed version, these can change depending on whether the default libraries

1150
02:03:54,540 --> 02:03:59,340
have changed over time.

1151
02:03:59,340 --> 02:04:03,300
Then this is some cleanup, which is fine.

1152
02:04:03,300 --> 02:04:13,260
We create a virtual environment, we upgrade pip, and, well, install some requirements.txt.

1153
02:04:13,260 --> 02:04:18,980
That of course depends now a lot on the requirements.txt, how well defined the versions are in there,

1154
02:04:18,980 --> 02:04:24,700
there, but if they are not well-defined, we again can run into easy problems.

1155
02:04:24,700 --> 02:04:31,020
This singularity file also has an additional section with files, which indicates what files

1156
02:04:31,020 --> 02:04:36,140
are copied over into the image.

1157
02:04:36,140 --> 02:04:40,500
So it copies over the requirements.txt, and I would assume that this requirements.txt

1158
02:04:40,500 --> 02:04:47,800
is in the same repository as this file, the same with the app.py.

1159
02:04:47,800 --> 02:04:50,820
So those files we probably have.

1160
02:04:50,820 --> 02:04:55,920
And then it copies something from Home, Myself, Data into AppData.

1161
02:04:55,920 --> 02:05:01,380
Yeah, Home, Myself is not something that we have.

1162
02:05:01,380 --> 02:05:07,060
So this is stuff that is probably not even in the repository.

1163
02:05:07,060 --> 02:05:09,340
So we don't know what that is.

1164
02:05:09,340 --> 02:05:14,140
In that case, it's probably the data that is to be used by the app.

1165
02:05:14,140 --> 02:05:18,980
And we said that we want to reuse it with our data, so we can probably replace it with

1166
02:05:18,980 --> 02:05:19,980
our data here.

1167
02:05:19,980 --> 02:05:25,160
But yeah, that's not very helpful.

1168
02:05:25,160 --> 02:05:31,120
And this is then a real problem, because this has some fancy lip where we have no idea what

1169
02:05:31,120 --> 02:05:32,800
that is.

1170
02:05:32,800 --> 02:05:37,360
And yeah, puts it into the libraries of this container.

1171
02:05:37,360 --> 02:05:50,120
So this makes the whole image not reproducible, or even not reusable, not only not reproducible.

1172
02:05:50,120 --> 02:06:00,240
So to recap the file section here, so I think I read the instructions again, and yeah, it

1173
02:06:00,240 --> 02:06:05,240
doesn't say that this singularity file is,

1174
02:06:07,880 --> 02:06:11,040
definition file is in a repo,

1175
02:06:11,040 --> 02:06:15,600
but yeah, we are assuming that it's in a git repo,

1176
02:06:15,600 --> 02:06:20,600
and there is in the git repo with this definition file,

1177
02:06:20,800 --> 02:06:23,920
there is the application code,

1178
02:06:23,920 --> 02:06:28,920
which is the app slash, no, app.py,

1179
02:06:28,920 --> 02:06:37,240
and that we have a requirements text file there in that Git repo. But like we talked earlier,

1180
02:06:37,240 --> 02:06:46,840
then data is not usually in the Git repo, especially if it's big data. And

1181
02:06:48,840 --> 02:06:55,320
so the first requirements line and the app line are fine.

1182
02:06:55,320 --> 02:07:08,080
line, the copy data line is quite iffy, and the last line highlighted now with the fancy

1183
02:07:08,080 --> 02:07:11,360
lip is like a definite no-no.

1184
02:07:11,360 --> 02:07:12,360
Yeah.

1185
02:07:12,360 --> 02:07:13,360
Yeah.

1186
02:07:13,360 --> 02:07:14,360
Yeah.

1187
02:07:14,360 --> 02:07:19,840
But so these are the problems that you have with Docker definition files, which means

1188
02:07:19,840 --> 02:07:26,480
that essentially, if you want to have your Docker file reproduced or your code reproducible

1189
02:07:26,480 --> 02:07:29,800
by providing a Docker, provide the image.

1190
02:07:29,800 --> 02:07:36,240
Yes, it will be potentially big, but it's the only way how you can actually have the

1191
02:07:36,240 --> 02:07:39,520
environment that you used saved.

1192
02:07:39,520 --> 02:07:45,720
And not to confuse people any more than necessary, this is a singularity definition, right?

1193
02:07:45,720 --> 02:07:46,720
Yes, sorry.

1194
02:07:46,720 --> 02:07:48,880
Not Docker definition.

1195
02:07:48,880 --> 02:07:53,840
So key points here is containers can be helpful if complex setups are needed to running a

1196
02:07:53,840 --> 02:08:00,920
specific software and they can also be helpful for prototyping without messing up your own

1197
02:08:00,920 --> 02:08:05,200
computing environment or to run software that requires a different operating system than

1198
02:08:05,200 --> 02:08:06,200
your own.

1199
02:08:06,200 --> 02:08:10,440
It depends a bit.

1200
02:08:10,440 --> 02:08:14,600
Okay so we are coming towards the end and the question is where to go from here and

1201
02:08:14,600 --> 02:08:17,120
what to take away from this.

1202
02:08:17,120 --> 02:08:23,880
So I think for me, we have shown you workflow tools and how and where to use it.

1203
02:08:23,880 --> 02:08:29,000
And we have hopefully given you an idea where they will make sense in the future.

1204
02:08:29,000 --> 02:08:34,160
In many cases, these workflow tools are probably not needed and a proper script with all the

1205
02:08:34,160 --> 02:08:36,520
information is sufficient.

1206
02:08:36,520 --> 02:08:42,080
But you probably want to consider using them when you are processing many files with many

1207
02:08:42,080 --> 02:08:43,560
steps.

1208
02:08:43,560 --> 02:08:52,440
your steps or files may change, if you're still collecting your input data or if your main script

1209
02:08:52,440 --> 02:08:59,560
connecting your steps starts to get very long because then it starts to get unreadable essentially

1210
02:08:59,560 --> 02:09:07,960
and you start to want to make different parts of it. Containers seem amazing but do I have

1211
02:09:07,960 --> 02:09:14,760
actually use for them? Well, maybe not, but knowing that you can use them is already pretty useful,

1212
02:09:14,760 --> 02:09:19,240
that you can run Linux tools on your Windows computer, you can run different versions of the

1213
02:09:19,240 --> 02:09:24,200
same software on your computer, that you can follow the easy installation instructions for

1214
02:09:24,200 --> 02:09:29,960
an operating system that is not your own, that you get a fully configured environment instead

1215
02:09:29,960 --> 02:09:35,240
of installing just a tool, and that you can share your setup and configurations with others.

1216
02:09:35,240 --> 02:09:43,120
So, yeah, they can be very beneficial, but as with workflow tools as well, you will need

1217
02:09:43,120 --> 02:09:47,960
some additional read up on how to use them.

1218
02:09:47,960 --> 02:09:52,200
This was mainly to present that they are an option.

1219
02:09:52,200 --> 02:09:57,800
And what we think is important for every project that you create, have a clear structure for

1220
02:09:57,800 --> 02:10:03,720
your project, have a clear file structure, clear directory, so that you find things again.

1221
02:10:03,720 --> 02:10:07,280
your workflow and write it down in a script file,

1222
02:10:07,280 --> 02:10:11,960
or if it's complex enough with a workflow manager.

1223
02:10:11,960 --> 02:10:14,640
Create a dependency list and keep it updated,

1224
02:10:14,640 --> 02:10:19,280
optimally in an environment file,

1225
02:10:19,280 --> 02:10:22,880
because that makes reinstallations a lot easier

1226
02:10:22,880 --> 02:10:24,360
and makes it a lot easier for others

1227
02:10:24,360 --> 02:10:27,840
to follow what you have done.

1228
02:10:27,840 --> 02:10:30,320
So software packages and their versions.

1229
02:10:30,320 --> 02:10:31,400
Yes.

1230
02:10:31,400 --> 02:10:36,840
and consider the possibility that someone, maybe you, may want to reproduce your work.

1231
02:10:39,240 --> 02:10:45,640
Can you do something small to make it easier? Write down some more instructions or similar things.

1232
02:10:46,520 --> 02:10:52,600
If you have ideas what you can do in the future but no time, you can add an issue to the repository

1233
02:10:52,600 --> 02:10:58,360
that you're creating your code on and maybe someone else can help or you in a few years

1234
02:10:58,360 --> 02:11:04,680
time noticed, oh well, I had this idea back then. Maybe now I have a bit of time I can actually

1235
02:11:04,680 --> 02:11:13,320
implement that. Yeah, so as I've mentioned a few times, not everything in this lesson

1236
02:11:13,320 --> 02:11:18,440
might be useful right now, but it's good to know that these things exist. If you ever get into the

1237
02:11:18,440 --> 02:11:23,080
situation where you would require such a solution, then you can come either back to these documentation

1238
02:11:23,080 --> 02:11:30,680
and documents or you can go to the of course to the respective documentation of the individual

1239
02:11:30,680 --> 02:11:38,760
software to see okay how do I actually use them and caring about reproducibility makes work easier

1240
02:11:38,760 --> 02:11:45,800
for the next person that's working on the project and as likely as not that will be you.

1241
02:11:47,560 --> 02:11:51,160
So that's I think it for us. Timo do you want to add anything?

1242
02:11:51,160 --> 02:11:59,400
Okay. No, good recap there. Okay, then. I would say thank you, and...

1243
02:11:59,400 --> 02:12:00,400
Excellent.

1244
02:12:00,400 --> 02:12:05,280
I think we almost ran out of time.

1245
02:12:05,280 --> 02:12:14,200
Exactly. Thank you, [name], and thank you, [name]. I don't think there's anything to lift.

1246
02:12:14,200 --> 02:12:22,040
still have four minutes. Should we consider some of the questions in the notes, but otherwise...

1247
02:12:24,520 --> 02:12:30,440
I'm looking at the notes and there is a comment about the future viewpoint is really important,

1248
02:12:30,440 --> 02:12:41,400
and I agree that I don't think it can be emphasized too much, that it is most probably

1249
02:12:41,400 --> 02:12:51,080
the person looking at your code later is you, yourself, or your experiment setup. And all these

1250
02:12:51,080 --> 02:12:59,080
things that we have discussed, they may seem at first that, okay, this is, again, new learning

1251
02:12:59,080 --> 02:13:08,200
curves. They will take time to get into, but they will save you time and energy in the end.

1252
02:13:08,200 --> 02:13:13,200
and also they help the scientific community at large

1253
02:13:14,680 --> 02:13:17,780
because you are making things more reproducible.

1254
02:13:21,800 --> 02:13:25,320
Yes, so we still have a couple of minutes,

1255
02:13:25,320 --> 02:13:27,180
but of course we can also end it here

1256
02:13:27,180 --> 02:13:29,100
if there's nothing to add.

1257
02:13:29,100 --> 02:13:30,880
I just remind you that now we will have

1258
02:13:30,880 --> 02:13:32,720
one hour lunch break.

1259
02:13:32,720 --> 02:13:36,000
And after that, we will talk about social coding.

1260
02:13:36,000 --> 02:13:43,760
will be me and [name] talking about basically the social aspects of coding with other people,

1261
02:13:43,760 --> 02:13:49,720
sharing repositories and that comes of course with some kind of legal requirements and so

1262
02:13:49,720 --> 02:13:59,640
we will talk about licenses for code and software. All this in about one hour. So I thank you

1263
02:13:59,640 --> 02:14:05,120
[name] and [name] for the great discussions and I thank everyone for the comments on the

1264
02:14:05,120 --> 02:14:11,840
notes. You can keep on writing comments and answers. And so we see each other in one hour.

1265
02:14:12,800 --> 02:14:16,160
Thank you. Bye. Bye. Bye.

1266
02:14:35,120 --> 02:14:37,180
you

1267
02:15:05,120 --> 02:15:07,180
you

1268
02:15:35,120 --> 02:15:37,180
you

1269
02:16:05,120 --> 02:16:07,180
you

1270
02:16:35,120 --> 02:16:37,180
you

1271
02:17:05,120 --> 02:17:07,180
you

1272
02:17:35,120 --> 02:17:37,180
you

1273
02:18:05,120 --> 02:18:07,180
you

1274
02:18:35,120 --> 02:18:37,180
you

1275
02:19:05,120 --> 02:19:07,180
you

1276
02:19:35,120 --> 02:19:37,180
you

1277
02:20:05,120 --> 02:20:07,180
you

1278
02:20:35,120 --> 02:20:37,180
you

1279
02:21:05,120 --> 02:21:07,180
you

1280
02:21:35,120 --> 02:21:37,180
you

1281
02:22:05,120 --> 02:22:07,180
you

1282
02:22:35,120 --> 02:22:37,180
you

1283
02:23:05,120 --> 02:23:07,180
you

1284
02:23:35,120 --> 02:23:37,180
you

1285
02:24:05,120 --> 02:24:07,180
you

1286
02:24:35,120 --> 02:24:37,180
you

1287
02:25:05,120 --> 02:25:07,180
you

1288
02:25:35,120 --> 02:25:37,180
you

1289
02:26:05,120 --> 02:26:07,180
you

1290
02:26:35,120 --> 02:26:37,180
you

1291
02:27:05,120 --> 02:27:07,180
you

1292
02:27:35,120 --> 02:27:37,180
you

1293
02:28:05,120 --> 02:28:07,180
you

1294
02:28:35,120 --> 02:28:37,180
you

1295
02:29:05,120 --> 02:29:07,180
you

1296
02:29:35,120 --> 02:29:37,180
you

1297
02:30:05,120 --> 02:30:07,180
you

1298
02:30:35,120 --> 02:30:37,180
you

1299
02:31:05,120 --> 02:31:07,180
you

1300
02:31:35,120 --> 02:31:37,180
you

1301
02:32:05,120 --> 02:32:07,180
you

1302
02:32:35,120 --> 02:32:37,180
you

1303
02:33:05,120 --> 02:33:07,180
you

1304
02:33:35,120 --> 02:33:37,180
you

1305
02:34:05,120 --> 02:34:07,180
you

1306
02:34:35,120 --> 02:34:37,180
you

1307
02:35:05,120 --> 02:35:07,180
you

1308
02:35:35,120 --> 02:35:37,180
you

1309
02:36:05,120 --> 02:36:07,180
you

1310
02:36:35,120 --> 02:36:37,180
you

1311
02:37:05,120 --> 02:37:07,180
you

1312
02:37:35,120 --> 02:37:37,180
you

1313
02:38:05,120 --> 02:38:07,180
you

1314
02:38:35,120 --> 02:38:37,180
you

1315
02:39:05,120 --> 02:39:07,180
you

1316
02:39:35,120 --> 02:39:37,180
you

1317
02:40:05,120 --> 02:40:07,180
you

1318
02:40:35,120 --> 02:40:37,180
you

1319
02:41:05,120 --> 02:41:07,180
you

1320
02:41:35,120 --> 02:41:37,180
you

1321
02:42:05,120 --> 02:42:07,180
you

1322
02:42:35,120 --> 02:42:37,180
you

1323
02:43:05,120 --> 02:43:07,180
you

1324
02:43:35,120 --> 02:43:37,180
you

1325
02:44:05,120 --> 02:44:07,180
you

1326
02:44:35,120 --> 02:44:37,180
you

1327
02:45:05,120 --> 02:45:07,180
you

1328
02:45:35,120 --> 02:45:37,180
you

1329
02:46:05,120 --> 02:46:07,180
you

1330
02:46:35,120 --> 02:46:37,180
you

1331
02:47:05,120 --> 02:47:07,180
you

1332
02:47:35,120 --> 02:47:37,180
you

1333
02:48:05,120 --> 02:48:07,180
you

1334
02:48:35,120 --> 02:48:37,180
you

1335
02:49:05,120 --> 02:49:07,180
you

1336
02:49:35,120 --> 02:49:37,180
you

1337
02:50:05,120 --> 02:50:07,180
you

1338
02:50:35,120 --> 02:50:37,180
you

1339
02:51:05,120 --> 02:51:07,180
you

1340
02:51:35,120 --> 02:51:37,180
you

1341
02:52:05,120 --> 02:52:07,180
you

1342
02:52:35,120 --> 02:52:37,180
you

1343
02:53:05,120 --> 02:53:07,180
you

1344
02:53:35,120 --> 02:53:37,180
you

1345
02:54:05,120 --> 02:54:07,180
you

1346
02:54:35,120 --> 02:54:37,180
you

1347
02:55:05,120 --> 02:55:07,180
you

1348
02:55:35,120 --> 02:55:37,180
you

1349
02:56:05,120 --> 02:56:07,180
you

1350
02:56:35,120 --> 02:56:37,180
you

1351
02:57:05,120 --> 02:57:07,180
you

1352
02:57:35,120 --> 02:57:37,180
you

1353
02:58:05,120 --> 02:58:07,180
you

1354
02:58:35,120 --> 02:58:37,180
you

1355
02:59:05,120 --> 02:59:07,180
you

1356
02:59:35,120 --> 02:59:37,180
you

1357
03:00:05,120 --> 03:00:07,180
you

1358
03:00:35,120 --> 03:00:37,180
you

1359
03:01:05,120 --> 03:01:07,180
you

1360
03:01:35,120 --> 03:01:37,180
you

1361
03:02:05,120 --> 03:02:07,180
you

1362
03:02:35,120 --> 03:02:37,180
you

1363
03:03:05,120 --> 03:03:07,180
you

1364
03:03:35,120 --> 03:03:37,180
you

1365
03:04:05,120 --> 03:04:07,180
you

1366
03:04:35,120 --> 03:04:37,180
you

1367
03:05:05,120 --> 03:05:07,180
you

1368
03:05:35,120 --> 03:05:37,180
you

1369
03:06:05,120 --> 03:06:07,180
you

1370
03:06:35,120 --> 03:06:37,180
you

1371
03:07:05,120 --> 03:07:07,180
you

1372
03:07:35,120 --> 03:07:37,180
you

1373
03:08:05,120 --> 03:08:07,180
you

1374
03:08:35,120 --> 03:08:37,180
you

1375
03:09:05,120 --> 03:09:07,180
you

1376
03:09:35,120 --> 03:09:37,180
you

1377
03:10:05,120 --> 03:10:07,180
you

1378
03:10:35,120 --> 03:10:37,180
you

1379
03:11:05,120 --> 03:11:07,180
you

1380
03:11:35,120 --> 03:11:37,180
you

1381
03:12:05,120 --> 03:12:07,180
you

1382
03:12:35,120 --> 03:12:37,180
you

1383
03:13:05,120 --> 03:13:07,180
you

1384
03:13:35,120 --> 03:13:37,120
You

1385
03:23:35,120 --> 03:23:36,120
a

1386
03:23:36,120 --> 03:23:37,120
little

1387
03:23:37,120 --> 03:23:38,120
more

1388
03:23:38,120 --> 03:23:39,120
ah

1389
03:23:39,120 --> 03:23:40,120
so

1390
03:23:40,120 --> 03:23:41,120
easy

1391
03:23:41,120 --> 03:23:42,120
huh

1392
03:23:42,120 --> 03:23:43,120
so

1393
03:23:43,120 --> 03:23:44,120
easy

1394
03:23:44,120 --> 03:23:45,120
i

1395
03:23:45,120 --> 03:23:46,120
love

1396
03:23:46,120 --> 03:23:47,120
it

1397
03:23:47,120 --> 03:23:48,120
so

1398
03:23:48,120 --> 03:23:49,120
easy

1399
03:23:49,120 --> 03:23:50,120
huh

1400
03:23:50,120 --> 03:23:51,120
so

1401
03:23:51,120 --> 03:23:52,120
easy

1402
03:23:52,120 --> 03:23:53,120
i

1403
03:23:53,120 --> 03:23:54,120
love

1404
03:23:54,120 --> 03:23:55,120
it

1405
03:23:55,120 --> 03:23:56,120
so

1406
03:23:56,120 --> 03:23:57,120
easy

1407
03:23:57,120 --> 03:23:58,120
i

1408
03:23:58,120 --> 03:23:59,120
love

1409
03:23:59,120 --> 03:24:00,120
it

1410
03:24:00,120 --> 03:24:01,120
this

1411
03:24:01,120 --> 03:24:02,120
is

1412
03:24:02,120 --> 03:24:03,120
the

1413
03:24:03,120 --> 03:24:04,120
country

1414
03:24:04,120 --> 03:24:15,120
also a good thing. Another thing that at least I use is because the code is more clean, it's

1415
03:24:15,120 --> 03:24:21,680
easily more reproducible for me at least. So I think these three are the main aspects

1416
03:24:21,680 --> 03:24:26,840
that I use in social coding. What about you? Do you have any preference?

1417
03:24:26,840 --> 03:24:33,600
Yeah, I agree with you, especially like that you mentioned this kind of CV idea.

1418
03:24:33,600 --> 03:24:38,400
And this also goes with, in my opinion, what I like about the Code Refinery workshop, that

1419
03:24:38,400 --> 03:24:43,200
the type of skills that you learn here are skills that are reusable in other fields outside

1420
03:24:43,200 --> 03:24:44,200
academia.

1421
03:24:44,200 --> 03:24:50,200
So if the majority of the people following this workshop right now are doctoral researchers

1422
03:24:50,200 --> 03:24:58,920
or postdocs or whatever, but already learning it and starting with whatever, little by little

1423
03:24:58,920 --> 03:25:04,440
sharing, it will also open doors for maybe other jobs in the future that might not be

1424
03:25:04,440 --> 03:25:05,760
related to academia.

1425
03:25:05,760 --> 03:25:06,760
Yeah.

1426
03:25:06,760 --> 03:25:14,360
Me, of the options here, I really like the kind of reproducibility part.

1427
03:25:14,360 --> 03:25:21,680
I'm biased, I'm a reproducibility fanatic, so that other people can truly rerun my code.

1428
03:25:21,680 --> 03:25:26,800
But sometimes I publish code that was really ugly, but I still thought I'm going to put

1429
03:25:26,800 --> 03:25:32,680
it out there because no one had that type of function in whatever language I was publishing

1430
03:25:32,680 --> 03:25:33,680
it.

1431
03:25:33,680 --> 03:25:37,800
And then I saw that my ugly code was actually reused by so many publications completely in

1432
03:25:37,800 --> 03:25:38,800
different fields.

1433
03:25:38,800 --> 03:25:50,800
Sorry to interrupt, there was a comment that they cannot hear us but apparently it was from the computer.

1434
03:25:50,800 --> 03:25:51,800
Sorry, go ahead.

1435
03:25:51,800 --> 03:25:55,800
Yeah, that's good. Yeah, if I was muted it wouldn't be nice.

1436
03:25:55,800 --> 03:26:01,800
But basically let's have a look at what our people online are answering.

1437
03:26:01,800 --> 03:26:08,600
answering looks like that to my eyes at least A and B seems to be very popular. So the reproducibility

1438
03:26:08,600 --> 03:26:17,560
and also the trustworthiness. Exactly. It's interesting that the H doesn't get any votes,

1439
03:26:17,560 --> 03:26:23,320
not for this year, also for previous years it didn't get any votes either. But yeah, it's

1440
03:26:23,320 --> 03:26:30,520
interesting. It's nice also this that maybe the kind of social thinking of the people here is not

1441
03:26:30,520 --> 03:26:35,640
that we are in a competition even though the grant system makes us believe that we are all

1442
03:26:35,640 --> 03:26:42,680
competing with each other. Another thing that I wanted to add is maybe another aspect that I think

1443
03:26:42,680 --> 03:26:48,760
about is being part of the community. So there are like a lot of codes that you can use and are

1444
03:26:48,760 --> 03:26:55,880
open source so you can try them and if you try to also publish your code you become part of this

1445
03:26:55,880 --> 03:27:03,720
community, which is very, very interesting to be part of. You can collaborate with others and

1446
03:27:04,600 --> 03:27:11,800
after some time you will be known for some of your work, although they might not be exactly

1447
03:27:11,800 --> 03:27:17,720
your expertise. For example, I have this. It's not exactly a source code on GitHub, but it's about

1448
03:27:17,720 --> 03:27:26,440
like a, like how to do something like more of administrative work. And at the moment I'm known

1449
03:27:26,440 --> 03:27:32,680
for that work among like non-expert people for like research software, which is, which is an

1450
03:27:32,680 --> 03:27:39,240
interesting thing. Yeah. Yeah. That's, that's great. And in my opinion, it's also, I mean,

1451
03:27:39,240 --> 03:27:44,920
it's, it's, it's exactly this that it's, even though we will talk about this later, that

1452
03:27:44,920 --> 03:27:51,720
sometimes maybe code you might feel that you're not recognized in citation or whatever impact

1453
03:27:51,720 --> 03:27:58,200
is the measure in academia. But at the end of the day, people will notice it and people will see

1454
03:27:58,200 --> 03:28:04,520
it. Maybe you start getting new collaborators or reaching people that you would have not just

1455
03:28:04,520 --> 03:28:07,560
reach with your papers.

1456
03:28:07,560 --> 03:28:08,560
Yeah.

1457
03:28:08,560 --> 03:28:12,960
Maybe we can go to the next question.

1458
03:28:12,960 --> 03:28:13,960
Yeah.

1459
03:28:13,960 --> 03:28:19,880
So it also had some downfalls a bit, right?

1460
03:28:19,880 --> 03:28:23,800
So when you publish your code, do you have any concerns or?

1461
03:28:23,800 --> 03:28:30,560
Well, I would say initially I felt this kind of B, that my code is ugly.

1462
03:28:30,560 --> 03:28:37,680
I was never really afraid of the A, because actually by publishing it with the timestamp

1463
03:28:37,680 --> 03:28:45,100
I could eventually prove that, you know, you scooped my code, I have a timestamp that shows.

1464
03:28:45,100 --> 03:28:51,280
But then at the end of the day, would I really see you, someone else like me, or for what?

1465
03:28:51,280 --> 03:28:56,160
Just at the end of the day, I'm happy if people scooped whatever I did, it means that it was

1466
03:28:56,160 --> 03:28:58,360
something good.

1467
03:28:58,360 --> 03:29:04,160
But what about you, out of these answers, which one?

1468
03:29:04,160 --> 03:29:12,680
I think for me, B, like having an ugly code, was the most concern.

1469
03:29:12,680 --> 03:29:20,160
I never thought about like A or F, about like a lower quality copy or even F, like the code

1470
03:29:20,160 --> 03:29:24,800
could be stolen because you can add licenses and it's also true about your original paper,

1471
03:29:24,800 --> 03:29:25,800
right?

1472
03:29:25,800 --> 03:29:31,040
publishing your idea, it can be also stolen, but it's completely okay.

1473
03:29:31,040 --> 03:29:35,680
Like you have like patents and everything to have this protection.

1474
03:29:35,680 --> 03:29:40,640
And here I think it's the equivalent is licenses, which we will talk about.

1475
03:29:40,640 --> 03:29:41,640
Yeah.

1476
03:29:41,640 --> 03:29:45,400
It looks like B is also the most popular.

1477
03:29:45,400 --> 03:29:46,400
Exactly.

1478
03:29:46,400 --> 03:29:52,160
Another thing that I have some concerns about, which is not here, is like, because no software

1479
03:29:52,160 --> 03:29:53,480
is complete, right?

1480
03:29:53,480 --> 03:29:58,760
as a perfectionist, I'm always thinking about is it complete? Is it good enough to be published?

1481
03:29:58,760 --> 03:30:07,720
Not from like being ugly or like not following the clean code structures, but just as a whole,

1482
03:30:07,720 --> 03:30:12,760
like with all of the functions and like, is it complete to be published or not?

1483
03:30:12,760 --> 03:30:20,520
Yeah, I personally like the release early, release often. And so I rather just publish

1484
03:30:20,520 --> 03:30:27,480
something that is even half broken, but already there's an idea out there and then I will improve

1485
03:30:27,480 --> 03:30:31,160
and then maybe someone will try to reuse it and I realize that I completely missed,

1486
03:30:31,800 --> 03:30:36,040
I don't know, one exception in the conditions and so on.

1487
03:30:37,400 --> 03:30:43,400
So like based on age I can see like other people have this perfectionist idea as well

1488
03:30:44,200 --> 03:30:49,560
and it's good that I had some votes about the licensing which we are going to

1489
03:30:49,560 --> 03:30:52,640
to talk about in this course, in this section.

1490
03:30:54,200 --> 03:30:55,920
Then we have question three and question four,

1491
03:30:55,920 --> 03:30:57,440
which are kind of free form.

1492
03:30:57,440 --> 03:30:59,560
So please expand on that.

1493
03:30:59,560 --> 03:31:01,480
And now we will have a look,

1494
03:31:01,480 --> 03:31:05,200
why software often treated differently than from papers,

1495
03:31:05,200 --> 03:31:06,760
because some people, for example,

1496
03:31:06,760 --> 03:31:10,160
also have a ugly English, ugly way of writing.

1497
03:31:10,160 --> 03:31:13,280
Why wouldn't you be ashamed of your ugly paper

1498
03:31:13,280 --> 03:31:15,240
rather than your ugly software?

1499
03:31:15,240 --> 03:31:17,240
And then the fourth question is,

1500
03:31:17,240 --> 03:31:24,680
you find a repository with a code or with a library that you would like to reuse,

1501
03:31:24,680 --> 03:31:29,480
what are the things that you look at to decide whether you will use it?

1502
03:31:32,040 --> 03:31:34,840
So let's have a look at question three.

1503
03:31:37,960 --> 03:31:43,720
Yeah, I like the first answer because it's this overly fixation with citations and metrics.

1504
03:31:47,240 --> 03:31:55,120
It's also true about like one of the comments is it's usually seen just as a tool not a

1505
03:31:55,120 --> 03:32:02,600
scientific product and it's kind of true right because in my opinion like papers are more

1506
03:32:02,600 --> 03:32:08,040
about the results and the methodology that you used and the code is just a tool that

1507
03:32:08,040 --> 03:32:09,040
you did it.

1508
03:32:09,040 --> 03:32:13,560
Although like there are some aspects about like optimization of the code and how fast

1509
03:32:13,560 --> 03:32:20,600
it is, how much memory does it use, but in the end, it's just a tool to achieve your goal, right?

1510
03:32:21,240 --> 03:32:21,880
Yeah, it's true.

1511
03:32:27,080 --> 03:32:32,120
It's nice though that now this, or at least I think that it's nice. I'm sorry for some people,

1512
03:32:32,120 --> 03:32:35,960
maybe this would be more work and maybe they don't have the resources to ask for help,

1513
03:32:35,960 --> 03:32:45,520
But this making, or I wouldn't say forcing, but at least trying to have the code attached

1514
03:32:45,520 --> 03:32:51,880
with the paper, with this software availability statement, is a little bit step towards this

1515
03:32:51,880 --> 03:32:59,240
reproducibility and transparency so that it's clear that maybe the method section is more

1516
03:32:59,240 --> 03:33:05,760
meaningful if I can just read the code rather than try to infer from a very short paragraph

1517
03:33:05,760 --> 03:33:12,800
the method section, which filter was actually applied or which machine learning algorithm was

1518
03:33:12,800 --> 03:33:18,640
used. In question three, do you agree with the last comment, not peer-reviewed?

1519
03:33:20,080 --> 03:33:28,800
Well, kind of yes, unfortunately, because I often review papers and if there is a code,

1520
03:33:28,800 --> 03:33:34,880
I spend a bit of time in giving some feedback that, for example, usually the typical feedback

1521
03:33:34,880 --> 03:33:39,840
is that the license is missing and so in my feedback I say please add the license to your

1522
03:33:39,840 --> 03:33:45,600
code but then on the other end I don't have the time to actually rerun unless they make

1523
03:33:45,600 --> 03:33:52,320
it very easy for you that it's just one docker pull whatever command that you can easily rerun

1524
03:33:52,320 --> 03:33:58,720
the whole pipeline and test it but even even though I would be kind of a expert to peer

1525
03:33:58,720 --> 03:34:02,960
review the code there's just not enough time if I have to run fan review in the paper

1526
03:34:02,960 --> 03:34:07,600
But of course there are journals that are actually focused on this, like the Journal

1527
03:34:07,600 --> 03:34:13,600
of Open Source Software, JOS, where the peer review is actually on the code. The actual

1528
03:34:13,600 --> 03:34:20,720
papers that come with JOS are one or two pages. We are a bit behind time, so maybe we can

1529
03:34:20,720 --> 03:34:26,560
continue. But a short comment that I wanted to add is it's a bit complicated on papers, because

1530
03:34:26,560 --> 03:34:34,560
if your repository become popular enough other people would come and do contribute to it right

1531
03:34:34,560 --> 03:34:40,160
so it's not exactly peer-reviewed but somehow it is right because other people are trying to

1532
03:34:40,720 --> 03:34:48,960
make it better but yeah maybe we can yeah then the question four is about when you find some code

1533
03:34:49,520 --> 03:34:55,440
you know i've seen that many are writing about the license which it seems that it's already clear that

1534
03:34:55,440 --> 03:35:02,880
the license might set the rules of what you can do and what you cannot do and also this type of

1535
03:35:02,880 --> 03:35:09,440
not just the reusability but what we will talk soon is these changes that you can do to the

1536
03:35:09,440 --> 03:35:16,960
code so the so-called derivative work. Do you have any comment on this? Personally I see like

1537
03:35:16,960 --> 03:35:22,160
the activity and the number of like when it has been updated recently or is it

1538
03:35:22,160 --> 03:35:27,840
deprecated already and also another thing which I usually look at is the number of

1539
03:35:27,840 --> 03:35:38,320
contributors that the repository had. Yeah. All right so basically the rest of this social

1540
03:35:38,320 --> 03:35:43,920
coding part is what we just discussed that compared to sharing papers sharing code is

1541
03:35:43,920 --> 03:35:49,840
somewhat different if the paper is just you know sharing your ideas and maybe winning citations

1542
03:35:49,840 --> 03:36:04,840
Code is a little bit more complex feature. Sometimes people will just reuse your code, sometimes it will form some sort of base in basement foundation for something else to build on top.

1543
03:36:04,840 --> 03:36:15,840
And so, you know, with this, of course, this makes it a bit more complicated that papers to evaluate what could be the impact, what could be the metrics.

1544
03:36:15,840 --> 03:36:27,000
Eventually there are some metrics through that we will also mention later when you can actually track the downloads of a package of a software for example.

1545
03:36:28,160 --> 03:36:36,560
And then another aspects that is covering this page is what we touched already that the journal policies are basically going towards them.

1546
03:36:36,560 --> 03:36:47,780
I wouldn't say forcing but at least make it clear that there should be a code availability statement attached with the with the paper similarly as we have a date availability statement

1547
03:36:47,780 --> 03:36:58,040
maybe sometimes you can share the code because you're working with the company or it's a dual use case or whatever is the reason that you're not allowed to share the code

1548
03:36:58,040 --> 03:37:05,240
But it's clear that the journals, and not just the journals, even the organizations that are

1549
03:37:05,240 --> 03:37:10,840
the funding organization, whether it's the European Research Council or whatever country

1550
03:37:10,840 --> 03:37:17,720
organization, they are clearly making it stronger that the scientific code should be published and

1551
03:37:17,720 --> 03:37:28,440
public. Maybe out of one last part that we can look from this page is that it's also this aspect

1552
03:37:29,160 --> 03:37:34,120
that we touched in the question above, that sharing software can also be scary.

1553
03:37:35,400 --> 03:37:40,040
And we touched a little bit on this. We didn't really cover the aspect of bugs

1554
03:37:40,040 --> 03:37:46,680
and mistakes. Of course, we might be scared that what I did was wrong. But on the other hand,

1555
03:37:46,680 --> 03:37:51,560
is it so bad? Maybe I should actually, from the perspective of science, from the perspective of

1556
03:37:51,560 --> 03:37:57,560
ethics, would be actually very happy that someone finds a bug in my code. And maybe, you know,

1557
03:37:57,560 --> 03:38:02,840
of course, it's sad for me that I need to ask for a retraction of the paper if it really,

1558
03:38:02,840 --> 03:38:08,600
you know, changes all the results. But in theory, if science should be, you know,

1559
03:38:09,160 --> 03:38:14,920
what's the word, self-fixing, maybe this publishing the code will also improve this type of…

1560
03:38:16,680 --> 03:38:18,360
this type of process.

1561
03:38:22,200 --> 03:38:29,000
True. I would say like sometimes fixing a bug requires a lot of work and it's good that we can

1562
03:38:29,000 --> 03:38:34,520
collaborate and help each other on that aspect. At the same time, it can be a bit overwhelming

1563
03:38:34,520 --> 03:38:43,320
for the publisher of the code that you kind of feel that you're responsible for fixing those

1564
03:38:43,320 --> 03:38:47,320
if they are just raising the bug, not a solution.

1565
03:38:48,360 --> 03:38:52,680
Yeah, that's a very good point. We don't have time to discuss this, but in the page,

1566
03:38:52,680 --> 03:38:58,760
for those who want to spend some time reading the whole page, there's also this question that,

1567
03:38:58,760 --> 03:39:03,560
you know, how do you feel, like, do you feel the pressure that in the moment that you put your

1568
03:39:03,560 --> 03:39:09,080
code online, now suddenly people will start asking, can you add this improvement? Can you make it

1569
03:39:09,080 --> 03:39:16,520
work on this whatever older version of this operating system maybe i actually think the

1570
03:39:16,520 --> 03:39:21,240
other way around that at the moment that i put it online i'm actually removing the responsibility

1571
03:39:21,240 --> 03:39:27,080
that i'm saying look i managed to do this i don't have time to work on this anymore

1572
03:39:27,080 --> 03:39:31,480
for whatever reason please continue make it better or ask for help

1573
03:39:31,480 --> 03:39:44,280
Basically, we're slowly moving towards the licenses and we still have now 30 minutes

1574
03:39:44,280 --> 03:39:51,600
to talk about that, which is basically how our work connects to the works of others.

1575
03:39:51,600 --> 03:39:59,980
So I'm turning page now and now it's the page dedicated to software licenses and I guess

1576
03:39:59,980 --> 03:40:12,780
More or less everyone is familiar with the idea of copyright there are different types of copyright there are trademarks that protect the name of a brand from it for example from impersonation.

1577
03:40:13,460 --> 03:40:24,860
There are patents that patents usually are not related to software as an algorithm but you can patent a system for example or in general so-called technical invention.

1578
03:40:24,860 --> 03:40:37,860
And then there's the copyright that is basically protecting the creative expression, and this can include a little bit of everything, whether it's music or photographs or writings and so on.

1579
03:40:37,860 --> 03:40:49,860
It's also nice what it says here that this copyright is practically forever because it persists for 70 years after the lifetime of the author.

1580
03:40:49,860 --> 03:41:04,860
But then maybe on what you will hear as a term, if copyright feels like protecting your intellectual right, I also see a point of having a copyleft.

1581
03:41:04,860 --> 03:41:13,860
Basically making sure that other people can actually reuse your work and build on top of your work again in a legal way.

1582
03:41:13,860 --> 03:41:24,560
Okay, so this brings us to the topic of derivative work, which is a term to say that from something,

1583
03:41:24,560 --> 03:41:29,920
let's say Osain made something and put it in the open and I want to reuse bits of it.

1584
03:41:29,920 --> 03:41:35,640
I want to maybe reuse some bits as they are, some Python functions, because I don't really

1585
03:41:35,640 --> 03:41:44,040
have any improvements to go there, or maybe I want to, you know, remix, resample, invent

1586
03:41:44,040 --> 03:41:50,460
my own flavor on some whatever visualization part of the script that Ossane did.

1587
03:41:50,460 --> 03:41:55,360
And of course I can do this, or like the question that maybe would be for myself, am I actually

1588
03:41:55,360 --> 03:41:56,600
able to do this?

1589
03:41:56,600 --> 03:42:01,880
Would Ossane work allow me to do this type of derivative work, or is it that, you know,

1590
03:42:01,880 --> 03:42:08,000
I can't actually even touch or run on my computer or say it works.

1591
03:42:08,000 --> 03:42:13,800
So this derivative work is actually, when it comes to software, it's not intuitive

1592
03:42:13,800 --> 03:42:20,240
at all of what constitutes derivative work and me myself, when I was attending my first

1593
03:42:20,240 --> 03:42:24,340
code refinery many years ago, I was actually kind of surprised that some of the options

1594
03:42:24,340 --> 03:42:28,240
here are considered derivative work.

1595
03:42:28,240 --> 03:42:36,080
So in this question file for you, please don't spy to the solution box, can you try to answer

1596
03:42:36,080 --> 03:42:41,560
in the notes document which of these ARC derivative works.

1597
03:42:41,560 --> 03:42:48,480
So derivative you understand that you are basically remixing, reusing the existing code

1598
03:42:48,480 --> 03:42:55,920
that you have found online.

1599
03:42:55,920 --> 03:43:02,360
So maybe we let some time to answer because we don't want to spoil the fun.

1600
03:43:02,360 --> 03:43:03,360
Yes.

1601
03:43:03,360 --> 03:43:08,040
And we have some questions on the note I'm trying to answer.

1602
03:43:08,040 --> 03:43:10,920
Is there anything to highlight?

1603
03:43:10,920 --> 03:43:16,960
I think two of them are coming from previous sections and copy pasted here.

1604
03:43:16,960 --> 03:43:22,720
It's about Docker and Kubernetes and the Conda environment, which I think we can pass.

1605
03:43:22,720 --> 03:43:28,640
But a question is, when you license your code, does it belong to your employer or to you?

1606
03:43:28,640 --> 03:43:29,640
How does it work?

1607
03:43:29,640 --> 03:43:30,640
Yeah.

1608
03:43:30,640 --> 03:43:36,560
So, as usual, what I learned from the lawyers that the best answer is it depends.

1609
03:43:36,560 --> 03:43:43,720
It depends on what type of agreement do you have with your employer.

1610
03:43:43,720 --> 03:43:50,200
Usually it's flexible in a sense that sometimes I've seen, and I'm not specifically talking

1611
03:43:50,200 --> 03:43:54,880
about my university, my employer, but I've seen people writing, you know, copyright,

1612
03:43:54,880 --> 03:44:04,000
in my case would be [name]-Alto University. At the end of the day, because software per

1613
03:44:04,000 --> 03:44:10,160
se cannot be turned into patent unless you build a system around it, the employer, at

1614
03:44:10,160 --> 03:44:16,880
least this public organization like universities, they don't really care much. But it's a different

1615
03:44:16,880 --> 03:44:23,160
story if you would be working for a company where you can clearly understand that you

1616
03:44:23,160 --> 03:44:29,760
as a coder for a company you don't own anything and the employer clearly writes in the contract

1617
03:44:29,760 --> 03:44:31,320
that whatever you produce.

1618
03:44:31,320 --> 03:44:34,280
But the same is also, and it's not intuitive, it's also for data.

1619
03:44:34,280 --> 03:44:39,040
And this is a discussion that I often have with our researchers that they think because

1620
03:44:39,040 --> 03:44:44,520
they collected the data, interviews, measurement, whatever, that it's their data.

1621
03:44:44,520 --> 03:44:50,120
And it's actually very rare that it's their data in the specific context of Finnish universities.

1622
03:44:50,120 --> 03:44:54,400
If you are on your own money, on your own grant, then it is your data.

1623
03:44:54,400 --> 03:44:59,840
But 99% of the time, it's actually the university owns the data.

1624
03:44:59,840 --> 03:45:03,640
So yeah, in this sense, it's complicated.

1625
03:45:03,640 --> 03:45:04,640
Yep.

1626
03:45:04,640 --> 03:45:13,400
I just want to add that it depends on the policy of the company that you are working.

1627
03:45:13,400 --> 03:45:19,160
And I know even for some companies, if you are an employee there, even if you develop

1628
03:45:19,160 --> 03:45:25,040
some code out of your working hours, still the code that you produce, it belongs to the

1629
03:45:25,040 --> 03:45:26,040
company.

1630
03:45:26,040 --> 03:45:28,600
So it depends on the policy.

1631
03:45:28,600 --> 03:45:31,320
So you can't even code as a hobby.

1632
03:45:31,320 --> 03:45:36,080
Unfortunately, yes, it depends on the company's policy.

1633
03:45:36,080 --> 03:45:38,160
Yeah, well, fair enough.

1634
03:45:38,160 --> 03:45:42,320
Maybe it's the same, you know, you can think of musician that if you're making music outside

1635
03:45:42,320 --> 03:45:47,760
of your contract with your record label, maybe the record label manager gets angry.

1636
03:45:47,760 --> 03:45:48,760
Yep.

1637
03:45:48,760 --> 03:45:49,760
All right.

1638
03:45:49,760 --> 03:45:58,840
But question five, there's some answers here and basically A to D, they are all to be considered

1639
03:45:58,840 --> 03:46:07,560
derivative works that you know, you download some code and then you donate or you change

1640
03:46:07,560 --> 03:46:09,700
the code and modify the code.

1641
03:46:09,700 --> 03:46:16,820
what kind of was surprised for me, and of course it depends, that E and F can also be considered

1642
03:46:16,820 --> 03:46:22,580
derivative work. So even though I'm taking our same repository, that's some Python package,

1643
03:46:22,580 --> 03:46:29,940
and I just rewrite it in R, I might still be doing derivative work, you know, if I follow the same

1644
03:46:29,940 --> 03:46:35,060
logic, the same function structure, the same. It would be different if, say, it would sit down

1645
03:46:35,060 --> 03:46:41,780
with me without showing any code, tell me what the package is doing, and then I would try to,

1646
03:46:41,780 --> 03:46:47,300
you know, code it based on the description. So it would be like that I would read O'Sane's paper

1647
03:46:47,300 --> 03:46:52,660
on the description of this package and just put it in the paper I try to write my own version.

1648
03:46:54,420 --> 03:46:56,820
And so yeah, this was a bit unintuitive for me,

1649
03:46:56,820 --> 03:47:01,300
but on the other hand it makes sense when things start to be kind of literal.

1650
03:47:01,300 --> 03:47:10,240
Well, it's also interesting, I would add another option here that, I don't know, you're using

1651
03:47:10,240 --> 03:47:18,860
some ChatGPT or Copilot to generate code. Is it derivative work? Because these ChatGPT

1652
03:47:18,860 --> 03:47:25,580
large language models, they actually have ingested lots of software from whatever open

1653
03:47:25,580 --> 03:47:30,660
repositories, but then they don't tell you who originally wrote a function very similar

1654
03:47:30,660 --> 03:47:36,660
to the one that you asked, but then again it's complicated.

1655
03:47:36,660 --> 03:47:43,580
Do you actually do, or saying, if you use Copilot or ChargeGPT to get help, let's say

1656
03:47:43,580 --> 03:47:49,420
with a function, would you start searching if that function, if bits of that function

1657
03:47:49,420 --> 03:47:54,820
would already exist on the internet that then you would find?

1658
03:47:54,820 --> 03:47:58,200
Not that you have to, because this is also the thing that when you generate something

1659
03:47:58,200 --> 03:48:05,160
with this large language models, you are actually become the copyright owner of what is generated,

1660
03:48:05,160 --> 03:48:10,440
which is counterintuitive in a way, because you feel that ethically, it's not you that

1661
03:48:10,440 --> 03:48:16,360
made those things, but just some machine who has read many, many code scripts.

1662
03:48:16,360 --> 03:48:21,000
But how do you feel as a user of, because I guess you use now sometimes these copilots

1663
03:48:21,000 --> 03:48:22,000
or...

1664
03:48:22,000 --> 03:48:23,000
Yeah.

1665
03:48:23,000 --> 03:48:24,000
All the time.

1666
03:48:24,000 --> 03:48:25,000
Yeah.

1667
03:48:25,000 --> 03:48:26,000
Yeah.

1668
03:48:26,000 --> 03:48:31,840
But I think it's something that, as a society, we still have to think about it.

1669
03:48:31,840 --> 03:48:33,280
What should we do?

1670
03:48:33,280 --> 03:48:39,980
Because it's generally a new concept that we are facing, and I think it would resolve

1671
03:48:39,980 --> 03:48:47,440
and we would come with a bit more macho ways on how to cite it and how to use it.

1672
03:48:47,440 --> 03:48:52,240
But personally, if I use something and I get some ideas or use the whole functions that

1673
03:48:52,240 --> 03:48:58,480
the generative AI generates, no, I don't go and search what is the original repository

1674
03:48:58,480 --> 03:49:01,720
that produced this one.

1675
03:49:01,720 --> 03:49:04,880
This is of course, I don't have an answer myself.

1676
03:49:04,880 --> 03:49:09,120
And if people want to give their own opinion, in my opinion, it's nice anyway, that people

1677
03:49:09,120 --> 03:49:13,760
discuss this use of these new tools, generative AI and how people are using them, because

1678
03:49:13,760 --> 03:49:19,600
maybe then we can come up with a consensus on an ethical and responsible way of using them.

1679
03:49:21,120 --> 03:49:27,120
We also have a question about these generative AIs. You said if you generate something like a

1680
03:49:27,120 --> 03:49:31,040
piece of code, you would become then the owner of the code, right? Is that correct?

1681
03:49:31,040 --> 03:49:35,520
Yeah, the default policy is that whatever you generate with the large language model,

1682
03:49:35,520 --> 03:49:36,800
you are the copyright owner.

1683
03:49:37,360 --> 03:49:43,360
Do you add any citations or anything that I use generative AI for these codes I created?

1684
03:49:43,760 --> 03:49:51,560
So, the journals have expanded on their policies on the use of generative AI, and so now publishers

1685
03:49:51,560 --> 03:49:58,160
like Nature or whatever, many publishers, they would now basically require you to add

1686
03:49:58,160 --> 03:50:03,360
a statement, how generative AI was used in the process.

1687
03:50:03,360 --> 03:50:08,360
I don't have, like I'm not too strong, when I teach about these things I can tell that

1688
03:50:08,360 --> 03:50:14,440
If you just used it for, I don't know, fixing your English grammar, maybe, there's no point.

1689
03:50:14,440 --> 03:50:19,640
But if it's clear that that work would have not been able without the use of generative AI,

1690
03:50:19,640 --> 03:50:25,080
then of course it must be mentioned. So if my level of coding is very basic for whatever reason,

1691
03:50:25,080 --> 03:50:30,440
because I just started, and I get help from the generative AI, and I'm basically not able to

1692
03:50:30,440 --> 03:50:36,600
judge myself, is this code that the generative AI made right, even though I see with the tests that

1693
03:50:36,600 --> 03:50:39,800
that I, you know, add that it feels right.

1694
03:50:39,800 --> 03:50:41,720
At least I can be transparent that, you know,

1695
03:50:41,720 --> 03:50:45,480
I got help or I used ChatGPT for generating the code

1696
03:50:45,480 --> 03:50:47,840
for this and the code is published

1697
03:50:47,840 --> 03:50:49,640
at this and that repository.

1698
03:50:52,720 --> 03:50:57,720
All right, so yeah, when it comes to software licenses,

1699
03:50:58,920 --> 03:51:01,640
so now we are a bit focusing on software.

1700
03:51:01,640 --> 03:51:03,640
I've seen some people in the notes

1701
03:51:03,640 --> 03:51:06,000
talking also about Creative Common.

1702
03:51:06,000 --> 03:51:11,600
We will touch a little bit on so-called data licensee later.

1703
03:51:11,600 --> 03:51:16,480
But in general, there is a taxonomy of software licenses.

1704
03:51:16,480 --> 03:51:23,600
This was from the European Commission, yes, so it's a publication that basically talks

1705
03:51:23,600 --> 03:51:28,260
about the EU public license, the European Union public license.

1706
03:51:28,260 --> 03:51:34,760
And so when it comes to software licenses, there are different, basically there's a continuum

1707
03:51:34,760 --> 03:51:41,960
of things that would basically, they are very dark green, that you could basically do whatever

1708
03:51:41,960 --> 03:51:44,000
you want with that type of license.

1709
03:51:44,000 --> 03:51:49,640
So if you find a code and with that code in, I don't know, GitHub, there is attached a

1710
03:51:49,640 --> 03:51:56,480
license that says MIT or BST and so on, it means that most likely you can reuse it and

1711
03:51:56,480 --> 03:51:58,760
you can do anything, anything you want.

1712
03:51:58,760 --> 03:51:59,800
You can build on it.

1713
03:51:59,800 --> 03:52:05,120
In some cases, you don't even maybe need to tell who was the original author.

1714
03:52:05,120 --> 03:52:14,320
On the other end of the spectrum, we have the so-called strong copyleft licenses.

1715
03:52:14,320 --> 03:52:21,360
So here, the idea is that if I find, let's say that [name] writes a package that I want

1716
03:52:21,360 --> 03:52:27,560
to reuse, but it comes with a strong copyleft license, it means that whatever I derive from

1717
03:52:27,560 --> 03:52:33,480
Ossaint work should also be released with that strong copyleft. So I need to use the same license

1718
03:52:33,480 --> 03:52:39,400
and in some cases, as they say, this license infects the rest of my code. So it's not just

1719
03:52:39,400 --> 03:52:46,520
the code that is using Ossaint's strong copyleft work that needs to be released with that license,

1720
03:52:46,520 --> 03:52:52,920
it might attach my whole project and now I have to also release it with the strong copyleft license.

1721
03:52:52,920 --> 03:53:13,920
And in between there are this more kind of share-alike. The idea of share-alike is that okay, I make this software public with this license, but I wouldn't mind that if you improve the software, you are kind of allowing me to basically get your improvement so that I can also reuse.

1722
03:53:13,920 --> 03:53:21,440
use. So it's kind of in between the two, the very permissive one that lets anybody else to do

1723
03:53:21,440 --> 03:53:27,440
whatever they want and the very strict one that forces everybody else to do as you decide to do.

1724
03:53:28,560 --> 03:53:35,440
What is your feeling also from a research software engineer perspective? Have you worked with the

1725
03:53:35,440 --> 03:53:39,920
projects that have all sorts of licenses or do you feel that in general it's more towards these

1726
03:53:39,920 --> 03:53:52,640
permissive licenses? Personally, I'm more of the more open licenses like MIT or Creative Common

1727
03:53:52,640 --> 03:54:00,320
ones. And my idea is I'm using other people's code and if I'm able to publish the code,

1728
03:54:00,320 --> 03:54:05,760
it's not something confidential or it's not an ongoing project that I cannot publish yet,

1729
03:54:05,760 --> 03:54:10,880
I would go with that more open licenses. But I can totally understand like for some of the

1730
03:54:10,880 --> 03:54:18,560
projects it's whether to have more copy left licenses or even a strong copy left licenses.

1731
03:54:20,960 --> 03:54:24,640
An interesting thing is about like this picture that we have is about

1732
03:54:26,320 --> 03:54:30,480
that arrows that we have. Can you also explain what are the arrows and how does it work?

1733
03:54:30,480 --> 03:54:38,240
Yes, so here they talk about that the arrows represent compatibility, and so that in some

1734
03:54:38,240 --> 03:54:46,000
cases, you know, some licenses can kind of leave, can be compatible with other licenses,

1735
03:54:46,000 --> 03:54:52,240
but in some other cases the compatibility, you know, when the, like for example here,

1736
03:54:52,240 --> 03:54:57,160
so if I remember correctly, this red block is more the proprietary licenses, and so the

1737
03:54:57,160 --> 03:55:00,160
the very permissive licenses are compatible

1738
03:55:00,160 --> 03:55:01,440
with proprietary licenses,

1739
03:55:01,440 --> 03:55:03,800
meaning that you can release a software

1740
03:55:03,800 --> 03:55:05,720
that is not going to be open source

1741
03:55:05,720 --> 03:55:09,760
and inside it uses some of the permissive libraries,

1742
03:55:09,760 --> 03:55:12,960
but then here you see there's no compatibility

1743
03:55:12,960 --> 03:55:15,080
between if something is released

1744
03:55:15,080 --> 03:55:16,400
with a very strong compi left,

1745
03:55:16,400 --> 03:55:21,400
then nobody can use it in a proprietary software.

1746
03:55:22,600 --> 03:55:25,120
There's also here for those who want to explore more,

1747
03:55:25,120 --> 03:55:29,920
there are this nice set of links that help you, for example,

1748
03:55:29,920 --> 03:55:33,480
comparing licenses and choosing licenses.

1749
03:55:33,480 --> 03:55:37,240
There are different, there are many nice tools that given,

1750
03:55:37,240 --> 03:55:39,360
you might even answer some questionnaire

1751
03:55:39,360 --> 03:55:42,440
or what you would like to do with your license

1752
03:55:42,440 --> 03:55:44,640
and then they can recommend you

1753
03:55:44,640 --> 03:55:47,120
that whatever type of licenses.

1754
03:55:49,120 --> 03:55:52,960
All right, so maybe I think we agreed

1755
03:55:52,960 --> 03:55:57,960
that we will not do this exercise for the sake of speed,

1756
03:55:59,000 --> 03:56:04,000
and we can now talk when should I add a license.

1757
03:56:04,160 --> 03:56:08,400
So the best of course is as early as possible,

1758
03:56:08,400 --> 03:56:09,880
like with everything else,

1759
03:56:09,880 --> 03:56:11,980
that if you agree at the beginning

1760
03:56:11,980 --> 03:56:15,640
that you wanna choose a certain license,

1761
03:56:15,640 --> 03:56:18,080
then you choose it at the beginning.

1762
03:56:18,080 --> 03:56:20,520
It's funny that with the GitHub interface,

1763
03:56:20,520 --> 03:56:25,920
you create a repository from the web interface, immediately it asks you which license do you

1764
03:56:25,920 --> 03:56:31,800
want to attach with it. So, you know, it's clear, you know.

1765
03:56:31,800 --> 03:56:37,520
And here I can see citations to myself. What I was saying also earlier that if you work

1766
03:56:37,520 --> 03:56:43,880
from the very beginning as if your project is already public and open, then, you know,

1767
03:56:43,880 --> 03:56:49,400
you can already think at the very beginning that there's a license, that there's a policy.

1768
03:56:49,400 --> 03:56:55,240
of course, in this social coding part, we didn't really mention this earlier, but you might also

1769
03:56:55,240 --> 03:57:01,400
want to recommend how people can contribute to the improvements of your code. You can create

1770
03:57:01,400 --> 03:57:09,160
a community around your project and tools like GitHub allow you easily to create issues,

1771
03:57:10,280 --> 03:57:18,440
create discussions around your code. So basically, when should you add a license? As early as

1772
03:57:18,440 --> 03:57:24,440
possible, and how to add a license if your work is derivative work. So basically these tools that

1773
03:57:24,440 --> 03:57:30,760
I mentioned earlier that could check the compatibility would allow you to see that if you

1774
03:57:30,760 --> 03:57:38,680
reuse some specific package that might have permissive or strong copyleft licenses, then you

1775
03:57:38,680 --> 03:57:47,400
can see what type of license you can basically attach to the code. In general, maybe one comment

1776
03:57:47,400 --> 03:57:54,800
And that, at least when I was asking you saying that you are in favor of more permissive licenses,

1777
03:57:54,800 --> 03:58:02,040
what I wanted to add is that sometimes you have to think that the users of your software,

1778
03:58:02,040 --> 03:58:04,880
those who will reuse it, they are other people like you.

1779
03:58:04,880 --> 03:58:11,000
So the permissive licenses, even though you might feel you are donating your code to the

1780
03:58:11,000 --> 03:58:17,520
Google, Microsoft, Meta, whatever, at the end of the day, you're just making it easier

1781
03:58:17,520 --> 03:58:22,600
for other people like you to reuse your code if you have a permissive license. With more

1782
03:58:22,600 --> 03:58:27,680
copyleft licenses, they're of course very ethical and it's nice that some projects are

1783
03:58:27,680 --> 03:58:35,680
strong copyleft and they demand that whoever uses those projects also become strong copyleft.

1784
03:58:35,680 --> 03:58:40,440
But when it comes to researchers like us, sometimes we might just make the life more

1785
03:58:40,440 --> 03:58:45,840
complicated when the researchers need to publish their code with their papers.

1786
03:58:45,840 --> 03:58:50,400
So at the end of the day, if you aren't sure which one to pick, go with the most permissive

1787
03:58:50,400 --> 03:58:51,400
licenses.

1788
03:58:51,400 --> 03:58:55,360
Do you have any comment on this, I was saying?

1789
03:58:55,360 --> 03:58:58,880
No, it was perfect coverage.

1790
03:58:58,880 --> 03:58:59,880
Thanks.

1791
03:58:59,880 --> 03:59:00,880
Yeah.

1792
03:59:00,880 --> 03:59:12,760
It's not an exact question on the HackMD, but I get a team that it's happening, like

1793
03:59:12,760 --> 03:59:16,280
let's say sorting algorithms, right?

1794
03:59:16,280 --> 03:59:23,040
So do someone own the sorting algorithms and have license on them, or only it depends on

1795
03:59:23,040 --> 03:59:27,360
the implementation and the code has been published?

1796
03:59:27,360 --> 03:59:39,360
Yeah I'm not a lawyer so I can't don't take my words for a legal advice but in my understanding and in my discussion with legal experts

1797
03:59:39,360 --> 03:59:50,760
the idea the algorithm the pseudocode is not patentable so if I write a book with pseudocode on how to do this whatever sorting method

1798
03:59:50,760 --> 04:00:01,540
nobody can patented but in the moment that i make an implementation as a system that is reusable kind of as a stand alone system so not just writing

1799
04:00:01,540 --> 04:00:11,260
the pseudo code into some code then it can be patented so let's say that i have a web application where you copy paste your

1800
04:00:11,260 --> 04:00:19,500
vector of numbers and then press a button and then my web application so what's your number in a very whatever fast way

1801
04:00:19,500 --> 04:00:24,580
then this is a system and i can't attend this web application for sorting numbers

1802
04:00:24,580 --> 04:00:34,820
but if i would just have the code that does the sort i would not be able to pretend that but i can still protect it with the license so that i can say ok you wanna use my short fast sort algorithm

1803
04:00:34,820 --> 04:00:40,100
then, I don't know, I'm going to attach a very copyleft license and you have to make everything

1804
04:00:40,100 --> 04:00:52,420
open if you use it. Let's see if there's any other question to bring up. It's nice that there's

1805
04:00:52,420 --> 04:00:58,420
many answers already so that we don't have to. Yeah, that's why I was a bit silent. I was trying

1806
04:00:58,420 --> 04:01:05,940
to blast the rest of my knowledge. But there are other contributors too. Thanks, everyone.

1807
04:01:07,780 --> 04:01:16,020
In general, there's also sometimes what could happen is that things might change in time.

1808
04:01:16,980 --> 04:01:22,740
So that maybe a project starts with a certain license, but then for whatever reason you realize

1809
04:01:22,740 --> 04:01:29,300
that I don't know you really need to adopt change the license to a more copyleft one because you

1810
04:01:29,300 --> 04:01:34,500
started using some software that has a more copyleft license of course license you can change

1811
04:01:34,500 --> 04:01:41,300
in time it's not preferable in a sense that if you would really need to apply this you would kind of

1812
04:01:41,300 --> 04:01:47,460
need to contact you know your user base and tell them okay you've been using my code as permissive

1813
04:01:47,460 --> 04:01:53,860
license, but from today, the license is not permissive anymore. It becomes copy left.

1814
04:01:54,660 --> 04:02:02,020
So of course, you might be familiar yourself that the terms and condition of whatever

1815
04:02:02,660 --> 04:02:08,260
service that you use change in time so often that nobody even reads what is the new change.

1816
04:02:08,900 --> 04:02:11,460
So the same would also go here.

1817
04:02:11,460 --> 04:02:24,140
So, changing the license is not retroactive, and if someone is still using the code, does

1818
04:02:24,140 --> 04:02:27,020
it apply to them, or how does it work?

1819
04:02:27,020 --> 04:02:33,980
Yeah, well, again, it depends, because I would hope that it's not retroactive in a sense

1820
04:02:33,980 --> 04:02:40,460
that if a release of a certain version of a certain tool was released with, let's say,

1821
04:02:40,460 --> 04:02:48,940
very open permissive license that I'm still allowed to use that open version of the software

1822
04:02:48,940 --> 04:02:54,540
because maybe the company decided that from version 2.0 they went full copyright.

1823
04:02:54,540 --> 04:03:00,300
So maybe I'm still allowed to use version 1.0 but 2.0 I need to buy whatever the license

1824
04:03:00,300 --> 04:03:01,940
from the company.

1825
04:03:01,940 --> 04:03:07,420
But then there are also some other aspects, maybe this is more related to data, that can

1826
04:03:07,420 --> 04:03:14,140
be changes to the license of data that can be retroactive. And the general data protection

1827
04:03:14,940 --> 04:03:20,860
regulation, the GDPR, is one example of this. So that if I released open personal data 10 years

1828
04:03:20,860 --> 04:03:28,700
ago, actually GDPR would affect the license of that data and would not allow me to keep it open

1829
04:03:28,700 --> 04:03:36,620
anymore. So again, it depends. But it's clear, for example, for those who really are into these legal

1830
04:03:36,620 --> 04:03:42,060
matters, I would really recommend reading this paper from the European Commission where they

1831
04:03:42,060 --> 04:03:48,620
describe this type of license, the European Union Public License. It's a bit of a, it's a

1832
04:03:48,620 --> 04:03:53,820
share-alike license, so it's not in the most permissive, but it's also not in the most strong

1833
04:03:53,820 --> 04:04:00,620
copy left. And what is interesting is then the European, whatever projects related to the

1834
04:04:00,620 --> 04:04:06,220
European Commission, they are being released with this license, so that it's clear that it's for the

1835
04:04:06,220 --> 04:04:15,180
benefit of everyone that those who will reuse this code kind of make also their code in this public

1836
04:04:15,180 --> 04:04:20,860
licensure like public license and then you know you can basically get what other people

1837
04:04:21,820 --> 04:04:25,660
made with your code and improve your code it's a little bit more work of course to

1838
04:04:26,380 --> 04:04:32,940
to make sure that also the new code that you release also follows this the same type of

1839
04:04:32,940 --> 04:04:39,820
share alike license, but this is kind of the best balance between being permissive and letting other

1840
04:04:39,820 --> 04:04:48,140
people to use as much as possible and also being more ethical to kind of also get back from what

1841
04:04:48,140 --> 04:04:57,820
you give. Yeah, we also have a comment from a user that the more open licenses cannot be closed

1842
04:04:57,820 --> 04:05:05,260
retroactively and also like if you have different versions or you release a new version you can

1843
04:05:05,260 --> 04:05:12,460
change the license but as a standard for the free software you cannot change the existing license

1844
04:05:12,460 --> 04:05:17,180
without changing that version or the code. Yeah, so that's what I was saying as well. Yes,

1845
04:05:17,900 --> 04:05:23,740
another thing that I wanted to ask is do you have any comments or thoughts on multi-licensing or

1846
04:05:23,740 --> 04:05:30,100
Or do you usually use one-line sentence or what is the best practice here?

1847
04:05:30,100 --> 04:05:40,420
Well, I mean, I see the point of having multi-licenses, dual licenses, because sometimes some businesses,

1848
04:05:40,420 --> 04:05:45,420
maybe in the context of academic research, maybe there's not much point.

1849
04:05:45,420 --> 04:05:52,820
But if some of the research turns into a business idea or if companies want to have a mixture

1850
04:05:52,820 --> 04:06:04,740
of copyright, private code, and public, there is a benefit that if something is used for,

1851
04:06:04,740 --> 04:06:13,020
I don't know, commercial purposes, then maybe you follow a certain license. But then again,

1852
04:06:13,020 --> 04:06:18,620
I'm also a bit conflicted with these dual licenses, because if one really looks at the

1853
04:06:18,620 --> 04:06:27,740
open source software licenses, it is clear that you can't really impose what people can do with

1854
04:06:29,980 --> 04:06:33,900
your code. One of the advantages of the open source software licenses is that

1855
04:06:35,260 --> 04:06:39,980
you're not liable yourself with whatever people will do, but also you can't control if people,

1856
04:06:39,980 --> 04:06:45,020
for example, will use your code for doing something malicious. You can't block them

1857
04:06:45,020 --> 04:06:53,660
with these licenses. Yeah, but I guess that the takeaway here is like you can use multiple licenses

1858
04:06:56,060 --> 04:07:00,780
which can be a good practice if it's suitable for your case, for your data,

1859
04:07:00,780 --> 04:07:05,180
for your some files. You can add a different license than the general license that you have for

1860
04:07:05,180 --> 04:07:06,820
for the whole repository.

1861
04:07:08,340 --> 04:07:11,020
All right, I guess it's time for a little break.

1862
04:07:11,020 --> 04:07:15,020
We can come back,

1863
04:07:15,020 --> 04:07:17,220
and maybe we can go back at the 14 o'clock,

1864
04:07:18,860 --> 04:07:21,300
or 14.01, 14.02.

1865
04:07:21,300 --> 04:07:22,980
Yeah, I mean, it's break.

1866
04:07:22,980 --> 04:07:24,860
Yeah, maybe 14.02.

1867
04:07:24,860 --> 04:07:27,260
All right, so let's have a little break

1868
04:07:27,260 --> 04:07:29,380
and we will be back in 10 minutes.

1869
04:07:29,380 --> 04:07:30,220
Okay.

1870
04:07:35,180 --> 04:07:37,240
you

1871
04:08:05,180 --> 04:08:07,240
you

1872
04:08:35,180 --> 04:08:37,240
you

1873
04:09:05,180 --> 04:09:07,240
you

1874
04:09:35,180 --> 04:09:37,240
you

1875
04:10:05,180 --> 04:10:07,240
you

1876
04:10:35,180 --> 04:10:37,240
you

1877
04:11:05,180 --> 04:11:07,240
you

1878
04:11:35,180 --> 04:11:37,240
you

1879
04:12:05,180 --> 04:12:07,240
you

1880
04:12:35,180 --> 04:12:37,240
you

1881
04:13:05,180 --> 04:13:07,240
you

1882
04:13:35,180 --> 04:13:37,240
you

1883
04:14:05,180 --> 04:14:07,240
you

1884
04:14:35,180 --> 04:14:37,240
you

1885
04:15:05,180 --> 04:15:07,240
you

1886
04:15:35,180 --> 04:15:37,240
you

1887
04:16:05,180 --> 04:16:07,240
you

1888
04:16:35,180 --> 04:16:37,240
you

1889
04:17:05,180 --> 04:17:35,020
Hello, everyone, and welcome back.

1890
04:17:35,020 --> 04:17:41,420
the social coding section. We already talked about social coding and sharing your code and also

1891
04:17:41,420 --> 04:17:49,100
a bit about licensing. Now we want to talk about software citations. We talked about

1892
04:17:49,100 --> 04:17:54,700
how code is a bit different than papers and why there are different things that you have to consider

1893
04:17:54,700 --> 04:18:00,780
and citation is one of the things which maybe is more similar and also a bit different than

1894
04:18:00,780 --> 04:18:04,180
and paper citations, I would say.

1895
04:18:04,180 --> 04:18:05,940
So here in the screen, you can see,

1896
04:18:05,940 --> 04:18:08,460
we want to talk about FAIR principles first.

1897
04:18:08,460 --> 04:18:11,780
So [name], what is FAIR principles?

1898
04:18:11,780 --> 04:18:14,500
Yeah, so we touched on this FAIR principles

1899
04:18:14,500 --> 04:18:18,540
also in the morning when it comes to the reproducibility.

1900
04:18:18,540 --> 04:18:20,780
And basically the FAIR principle is like,

1901
04:18:22,100 --> 04:18:25,320
the acronyms would be findable, accessible,

1902
04:18:25,320 --> 04:18:27,400
interoperable and reusable.

1903
04:18:27,400 --> 04:18:39,960
And now while this maybe is kind of easy to understand when it comes to data because of course you want your data set to be findable by whatever search system

1904
04:18:39,960 --> 04:18:52,240
accessible whether it's fully open or open on request so but at least there is a way to access it interoperable which means that it can work with other tools it's in a format that

1905
04:18:52,240 --> 04:18:57,760
other softwares can open it and read it, and reusable so that there is, like we just discussed,

1906
04:18:57,760 --> 04:19:04,400
a license that would give some principles on how to reuse it. To reuse it, the same

1907
04:19:05,600 --> 04:19:10,240
fair principles for data, they can also be extended to software. And so again, that people

1908
04:19:10,240 --> 04:19:16,080
can find your software, that they can access it, they can download it, interoperable so that it

1909
04:19:16,080 --> 04:19:23,640
works with other systems and that there is a clear way on how to reuse it with the clear

1910
04:19:23,640 --> 04:19:27,600
licenses attached to the software, for example.

1911
04:19:27,600 --> 04:19:35,840
So again, because sometimes people, you might think, okay, I put my software, my scripts

1912
04:19:35,840 --> 04:19:41,120
that I've done for this paper, I put them in my university homepage or they are on GitHub

1913
04:19:41,120 --> 04:19:47,360
and that's it. We always need to think a little bit long term and I have to mention actually that

1914
04:19:47,360 --> 04:19:55,440
me myself, I decided to use some GitHub repository from the university and then that repository

1915
04:19:56,320 --> 04:20:01,600
is not there anymore so now I have published paper that are pointed to some Git repository

1916
04:20:01,600 --> 04:20:08,160
hosted by a department that doesn't exist anymore and so once in a while I get questions where is

1917
04:20:08,160 --> 04:20:13,760
the code now, you know. So there was a mistake on my side that I didn't actually create a so-called

1918
04:20:13,760 --> 04:20:21,520
DOI, digital object identifier, or PID, persistent identifier, because if I would have done that,

1919
04:20:22,400 --> 04:20:28,800
another organization would have taken care of preserving my software for as many years as we

1920
04:20:28,800 --> 04:20:36,240
can think of. And so what we see here in this make your code citable and persistent, the persistent

1921
04:20:36,240 --> 04:20:42,560
part is exactly this. It's not enough to put it on your web page or to put it on github because

1922
04:20:42,560 --> 04:20:47,840
github maybe will change your account will be i don't know maybe you decide to delete your account

1923
04:20:47,840 --> 04:20:52,720
and with that all your repository or by accident you even delete a repository because you thought

1924
04:20:52,720 --> 04:21:00,480
that that was just a side project. So there are services like Zenodo which is hosted by CERN

1925
04:21:00,480 --> 04:21:08,320
and with Zenodo you can basically get a digital object identifier for anything digital. It can be

1926
04:21:08,320 --> 04:21:14,960
the software release for example or it can also be used for data sets that can be published.

1927
04:21:16,080 --> 04:21:25,200
And so what is nice about this Zenodo repository is that it automatically can be linked with your

1928
04:21:25,200 --> 04:21:31,440
open with your available GitHub repositories so that whenever you create a release on your

1929
04:21:31,440 --> 04:21:38,320
GitHub project repository, Zenodo can actually automatically basically pull the new release

1930
04:21:38,320 --> 04:21:47,200
so that you can basically have a permanent copy of your GitHub releases stored in the CERN

1931
04:21:47,200 --> 04:21:56,080
data center. Have you ever published this type of DOI or have you helped anyone with this type of

1932
04:21:57,120 --> 04:22:06,160
getting a DOI for a software? Yeah, we were helping a researcher to publish their code and

1933
04:22:06,720 --> 04:22:13,600
we had to use that and also explain the things that you already explained about why it's important

1934
04:22:13,600 --> 04:22:19,840
to just have a DOI and it's not enough to only host it on your

1935
04:22:20,560 --> 04:22:25,520
personal github account because in 10 years github can go down, right? We don't know.

1936
04:22:26,080 --> 04:22:31,760
People and researchers are already familiar with this because it's also

1937
04:22:31,760 --> 04:22:37,680
a very similar aspect in publishing your paper as well. It's not enough to publish your PDF or

1938
04:22:37,680 --> 04:22:43,440
PDF of your research on your personal website or Google Drive, you have to have a DOI

1939
04:22:44,800 --> 04:22:50,720
to make it persistent for the future. Yeah, it's also nice that the interface that

1940
04:22:50,720 --> 04:22:57,520
comes with the Zenodo website, if you see, if you search for some software, you can actually

1941
04:22:57,520 --> 04:23:02,720
look at some metrics. Again, we don't do this for the metrics, but sometimes the metrics help us,

1942
04:23:02,720 --> 04:23:12,120
us, whatever motivate our bosses, that you can look at metrics like number of downloads

1943
04:23:12,120 --> 04:23:19,000
and number of citations so that you can also quantify a little bit the impact that your

1944
04:23:19,000 --> 04:23:22,760
software or scripts might have.

1945
04:23:22,760 --> 04:23:25,160
What is here now, it is a checklist.

1946
04:23:25,160 --> 04:23:30,120
Checklists are always useful because they're practical and you can basically see what is

1947
04:23:30,120 --> 04:23:33,320
is needed to make your software citable.

1948
04:23:34,680 --> 04:23:38,220
And so assigning appropriate license,

1949
04:23:38,220 --> 04:23:41,360
like we mentioned before the break,

1950
04:23:41,360 --> 04:23:45,720
then we want to have a description of the software

1951
04:23:45,720 --> 04:23:50,400
so that there is appropriate metadata format,

1952
04:23:50,400 --> 04:23:53,760
clear version numbers, authors are credited,

1953
04:23:53,760 --> 04:23:57,680
we get this persistent identifier like the DOI,

1954
04:23:57,680 --> 04:24:01,160
And then even, you know, sometimes we won't tell

1955
04:24:01,160 --> 04:24:04,300
in the software which publication to cite

1956
04:24:04,300 --> 04:24:08,040
because in some cases, some publications might be related.

1957
04:24:08,040 --> 04:24:10,480
There are so-called software packages publications,

1958
04:24:10,480 --> 04:24:13,400
but in some other cases, the main publication is about,

1959
04:24:13,400 --> 04:24:15,200
let's say, some application of the software,

1960
04:24:15,200 --> 04:24:17,500
but still you release the software

1961
04:24:17,500 --> 04:24:20,020
along with the original publication.

1962
04:24:22,160 --> 04:24:27,160
Recently, there's also the way that through your

1963
04:24:27,680 --> 04:24:29,840
or on your GitHub repository,

1964
04:24:29,840 --> 04:24:32,740
you can also like a so-called machine-readable

1965
04:24:32,740 --> 04:24:34,460
software citation file,

1966
04:24:34,460 --> 04:24:39,420
so CFF, software citation file format.

1967
04:24:39,420 --> 04:24:41,340
And it basically looks something like this.

1968
04:24:41,340 --> 04:24:44,140
So machine-readable means that a computer,

1969
04:24:44,140 --> 04:24:46,820
another computer can automatically read,

1970
04:24:46,820 --> 04:24:49,140
and you see that these are like variables

1971
04:24:49,140 --> 04:24:50,700
with the names and the values,

1972
04:24:50,700 --> 04:24:53,180
and some can be, you know, structure.

1973
04:24:53,180 --> 04:24:57,380
It looks a bit like this YAML, YAML files.

1974
04:24:57,380 --> 04:25:02,380
And so this pre kind of fixed metadata about the software

1975
04:25:02,440 --> 04:25:05,520
makes it easier and makes it especially

1976
04:25:05,520 --> 04:25:07,520
if you have, you know, search engines

1977
04:25:07,520 --> 04:25:10,640
or specific publication engines

1978
04:25:10,640 --> 04:25:13,440
that it's easy for these other tools

1979
04:25:13,440 --> 04:25:15,440
to basically index your software

1980
04:25:15,440 --> 04:25:18,400
and make it findable and accessible and so on

1981
04:25:18,400 --> 04:25:19,720
with the fair principles.

1982
04:25:20,800 --> 04:25:24,600
GitHub now supports this citation CFF files.

1983
04:25:24,600 --> 04:25:31,520
So if you name the file with this, exactly like a citation.cff, it can already be automatically

1984
04:25:31,520 --> 04:25:39,440
interpreted by GitHub and here there's some like a video how to create it and even a web.

1985
04:25:39,440 --> 04:25:46,100
But in practice, if you are fine with using some text editor, you can even take just this

1986
04:25:46,100 --> 04:25:50,480
template and reuse it.

1987
04:25:50,480 --> 04:25:55,280
So anything else to add? Is there anything in the notes document worth?

1988
04:25:55,280 --> 04:26:00,880
No, we don't have any questions or comments till now.

1989
04:26:00,880 --> 04:26:07,080
All right. Well then, in general also, this is one way to get your citations with the

1990
04:26:07,080 --> 04:26:12,640
software, but in some cases, maybe your software, the contribution that you and your research

1991
04:26:12,640 --> 04:26:18,840
group add to the software can be substantial so that there can be papers that are truly

1992
04:26:18,840 --> 04:26:25,400
about software. So full papers that they describe the software package and then there are specific

1993
04:26:25,400 --> 04:26:31,080
journals that accept this type of software papers. So then if I can kind of call back

1994
04:26:31,080 --> 04:26:36,680
of someone was mentioning that sometimes software is not peer-reviewed with this type of work,

1995
04:26:36,680 --> 04:26:40,920
you can understand that it's the software even more important than the actual paper.

1996
04:26:42,040 --> 04:26:47,720
And so it might go to more extensive peer review and checks and compatibility and so on.

1997
04:26:47,720 --> 04:26:59,720
At the end of the day, like I mentioned earlier, it's maybe not the actual work of the two or three peer reviewers, but it's really the community that is around the software project.

1998
04:26:59,720 --> 04:27:16,720
So if these larger packages, they have a big community around, and we can all be part of that community, whether it's just fixing a typo in the documentation or working on a new release with the main developers,

1999
04:27:16,720 --> 04:27:22,520
So that the peer review is truly a dynamic process that basically never ends.

2000
04:27:22,520 --> 04:27:27,840
It's not that when this software was published in 2021, it has not been touched.

2001
04:27:27,840 --> 04:27:37,000
I'm sure that it has improved in the meantime and it has evolved and gotten better and better.

2002
04:27:37,000 --> 04:27:44,240
One note that I wanted to add is the papers that only talking about the software are becoming

2003
04:27:44,240 --> 04:27:53,280
more popular nowadays. And for, at least for a lot of Python libraries, all libraries, you can see

2004
04:27:53,280 --> 04:27:58,240
they publish the paper. And it's also good for the researchers as well, because they get

2005
04:27:58,240 --> 04:28:04,320
many, many citations, which is maybe not the case for your scientific papers. So consider on

2006
04:28:04,880 --> 04:28:08,480
publishing the paper for your code as well, which is becoming more popular nowadays.

2007
04:28:08,480 --> 04:28:15,880
Yeah, and it's true. And it's nice that maybe this type of metrics like, you know, maybe

2008
04:28:15,880 --> 04:28:22,620
right now in the CV, in some standard CV that might not yet be space for your software packages,

2009
04:28:22,620 --> 04:28:27,600
but these are catching up. So I can mention in Finland, there is the tank CV, which is

2010
04:28:27,600 --> 04:28:33,380
one format used by the Finnish grant agencies. And already they would have a section right

2011
04:28:33,380 --> 04:28:38,460
now they have a section right now that where one can add this type of extra non-typical

2012
04:28:38,460 --> 04:28:43,340
paper type of publications or like software.

2013
04:28:43,340 --> 04:28:48,580
All right so we still have 10 minutes left and then of course we will ask about the feedback

2014
04:28:48,580 --> 04:28:57,580
of the day. The last part is about sharing data. Now there are many and better and more

2015
04:28:57,580 --> 04:29:06,780
extensive talks online on sharing data because as you can understand when it comes we discussed a

2016
04:29:06,780 --> 04:29:12,300
lot about software sharing and contributing and reuse it but all the same could be said about data

2017
04:29:13,020 --> 04:29:19,900
that sometimes we might wanna have a data set that is truly copyrighted and so nobody else

2018
04:29:19,900 --> 04:29:25,900
can access and they need to ask you for a license or maybe they need to pay you but some other times

2019
04:29:25,900 --> 04:29:32,620
we might have a data set that you can fully release opening whether because you decide to do so with

2020
04:29:32,620 --> 04:29:40,540
your employer with your supervisor and of course everything in between where you might want like

2021
04:29:40,540 --> 04:29:46,940
we had this share alike for the software the same would be for the data that you share the data but

2022
04:29:46,940 --> 04:29:53,020
any derivative work done with the data should also be released with a similar license for example.

2023
04:29:53,020 --> 04:30:01,680
So, when it comes to this, where to actually share the data, what type of options are there,

2024
04:30:01,680 --> 04:30:05,800
this Zenodo repository is also mentioned in this case.

2025
04:30:05,800 --> 04:30:11,080
In Zenodo, it's not just about sharing the release of your software, but you can share

2026
04:30:11,080 --> 04:30:12,640
all sorts of data.

2027
04:30:12,640 --> 04:30:19,440
And it's really nice that you can also share slides and white papers or anything that you

2028
04:30:19,440 --> 04:30:26,560
feel like that can contribute to your scientific community. But Zenodo is not the only one and so

2029
04:30:26,560 --> 04:30:32,480
there are these other services. I'd like to at least mention the Open Science Framework

2030
04:30:32,480 --> 04:30:41,440
that allows to do this type of sharing of nice dataset. In international context,

2031
04:30:41,440 --> 04:30:46,720
the Open Science Framework is hosted in the United States. If I remember, Zenodo is in Switzerland.

2032
04:30:46,720 --> 04:30:58,400
Figshare I think now is bought by Naturespringer, Eudat is basically EOSC or European platform

2033
04:30:58,400 --> 04:31:06,700
and Dryad is also, I don't think it's public anymore or they might give you a non-profit

2034
04:31:06,700 --> 04:31:15,840
like a small, how do you call, freemium license, but here then we will not go through this

2035
04:31:15,840 --> 04:31:20,640
but different countries, at least in the Nordics, where most of you are right now,

2036
04:31:20,640 --> 04:31:24,480
there are different national services for sharing the data.

2037
04:31:26,640 --> 04:31:33,920
And there are also resources for the so-called data management. Now, again, we will not expand

2038
04:31:33,920 --> 04:31:41,440
much on here, but if you think that if Git was used for keeping versions of your code,

2039
04:31:41,440 --> 04:31:50,560
the same could be done with data so that you can version the version of the data set because you had version 1.0 that had some

2040
04:31:50,560 --> 04:32:01,520
i don't know outliers but then you have version 2.0 where you clean the data remove the outliers and so on so this type of tools like data lad data stewardship wizard

2041
04:32:01,520 --> 04:32:06,080
githanex that is not mentioned here but it's Prattix DataLabs so they can help you

2042
04:32:06,880 --> 04:32:13,200
basically keep also the versioning of the of the data and not just of the code and then when it

2043
04:32:13,200 --> 04:32:21,200
comes to the licensing of data sets and databases with our specific type of of data set there are

2044
04:32:21,200 --> 04:32:29,760
different um there are different legislation that can cover this and similarly as we had for software

2045
04:32:29,760 --> 04:32:39,520
we can have something that is in the full spectrum from completely open public domain to completely private copyright.

2046
04:32:39,520 --> 04:32:48,800
So the type of licenses that you hear about data, there's so-called creative common licenses, there are different flavors.

2047
04:32:48,800 --> 04:32:57,360
With the CC0 being the so-called public domain, where it's as open as possible, people can reuse it, they don't even need to cite you.

2048
04:32:57,360 --> 04:33:19,360
And then more kind of restrictions on the reuse of the data, which could be that people need to cite you, or people cannot do commercial work with that, or this share alike that people need to re-share what they did with the data as you are doing with the data, and basically so on.

2049
04:33:19,360 --> 04:33:29,360
When it comes to the machine learning and AI, things are, of course, getting a little bit more complicated.

2050
04:33:29,360 --> 04:33:41,360
Machine learning models are impractical data, so the model, the weights on its own, they can't really be, you can't do much with those,

2051
04:33:41,360 --> 04:33:45,000
unless you have a system to basically run the models

2052
04:33:45,000 --> 04:33:48,920
and whether you are generating data or classifying

2053
04:33:48,920 --> 04:33:51,020
whatever you're classifying.

2054
04:33:51,020 --> 04:33:54,320
But what is tricky and at least what is a bit blurred

2055
04:33:54,320 --> 04:33:57,640
right now here in the context of AI

2056
04:33:57,640 --> 04:34:00,680
and machine learning models is that sometimes

2057
04:34:00,680 --> 04:34:03,800
you hear things like open source models

2058
04:34:03,800 --> 04:34:06,280
or open source language models.

2059
04:34:06,280 --> 04:34:08,440
But if one really would kind of look

2060
04:34:08,440 --> 04:34:09,960
at the definition of open source,

2061
04:34:09,960 --> 04:34:18,600
are actually not open source. Sometimes people call open weights so that the models, the weights,

2062
04:34:18,600 --> 04:34:24,680
the actual file, you can download it and reuse it but you have no idea of how that model was done,

2063
04:34:24,680 --> 04:34:29,640
so everything else basically around the model is actually not open at all.

2064
04:34:30,920 --> 04:34:37,960
Here it mentions this Artificial Intelligence Act which was entering into force on the 1st of

2065
04:34:37,960 --> 04:34:45,400
August of this year and the AI act adds some basically restrictions on what the researchers

2066
04:34:45,400 --> 04:34:54,040
even can basically open if you're not planning to open anything related to your AI models

2067
04:34:54,040 --> 04:34:58,840
basically the AI act lets you do whatever you want but in the moment that you need to start

2068
04:34:58,840 --> 04:35:04,920
sharing your model you need to basically see if you would if your type of machine learning model

2069
04:35:04,920 --> 04:35:11,920
would fall inside of these so-called high-risk or prohibited AI systems. And of course there

2070
04:35:11,920 --> 04:35:17,640
are different, how can I say, obligations, there are different legal obligations depending

2071
04:35:17,640 --> 04:35:24,080
on what type of artificial intelligence systems you might be working on. In general, we have

2072
04:35:24,080 --> 04:35:30,680
some material on these new topics that we will expand on this page. But if you have

2073
04:35:30,680 --> 04:35:38,920
questions of course let them please write them down in the in the chat and then many nice links

2074
04:35:38,920 --> 04:35:45,880
here that would be nice to browse together but our time is soon over. I was saying do you have

2075
04:35:45,880 --> 04:35:56,040
any comments or is there anything to highlight from the notes? No, in the notes we don't have any

2076
04:35:56,040 --> 04:36:01,040
any direct question to sharing data.

2077
04:36:01,040 --> 04:36:03,320
We had some questions about software citations

2078
04:36:03,320 --> 04:36:08,320
and some about like accounts, but not about sharing data.

2079
04:36:10,360 --> 04:36:14,120
And yeah, it was completely good.

2080
04:36:14,120 --> 04:36:15,720
If you want to pick,

2081
04:36:15,720 --> 04:36:18,200
if you need to choose one of these further readings

2082
04:36:18,200 --> 04:36:19,560
and you have time to go deeper

2083
04:36:19,560 --> 04:36:22,640
into all this reproducible research,

2084
04:36:22,640 --> 04:36:24,280
opening data and opening software,

2085
04:36:24,280 --> 04:36:31,240
really recommend this Turing Way, which is an open book on all these topics. It's a nice read,

2086
04:36:31,240 --> 04:36:35,720
you can read it, it's open, you can read it on your mobile phone during your commute.

2087
04:36:36,520 --> 04:36:45,000
So if you really need to pick one, I recommend the first one. And in general, I mean, it's nice

2088
04:36:45,000 --> 04:36:51,240
that we are building a community together through CodeRefinery. If you explore our pages, you can

2089
04:36:51,240 --> 04:36:58,600
also get access to a chat and in the chats that we use it's called Zulip and through the Zulip

2090
04:36:58,600 --> 04:37:04,520
chat you can join discussions. We can continue discussions on these topics and we have all sorts

2091
04:37:04,520 --> 04:37:12,440
of discussions there so that is something nice. We already saw some participants from

2092
04:37:12,440 --> 04:37:18,680
this workshop have already joined the Code Refinery chat. All right so we still have eight minutes

2093
04:37:18,680 --> 04:37:26,520
which is a good moment for asking for feedback so it would be great if on the notes we could

2094
04:37:26,520 --> 04:37:33,320
paste the usual feedback for the day if this was too fast too slow

2095
04:37:35,720 --> 04:37:38,840
and i see that they are already there i could actually switch

2096
04:37:39,880 --> 04:37:44,840
to the notes view with my movie directory interface

2097
04:37:48,680 --> 04:38:02,280
And so yes, as usual, even though we give similar lessons over the years, they're never

2098
04:38:02,280 --> 04:38:08,320
exactly the same, the phases are changing, we might update the lesson a little bit and

2099
04:38:08,320 --> 04:38:15,540
of course what makes this unique is your questions and your experience, so please give us feedback

2100
04:38:15,540 --> 04:38:24,540
And if there's something you want to, you think that we could have covered more or less, please write it down.

2101
04:38:24,540 --> 04:38:33,540
Then tomorrow we have the fifth day of the workshop.

2102
04:38:33,540 --> 04:38:41,540
And tomorrow the topic will be documentation, which is kind of somewhat related with the topics of the day.

2103
04:38:41,540 --> 04:38:47,940
so because along with the license you also want to tell people not just how to use your code but also

2104
04:38:47,940 --> 04:38:55,140
how to maybe you know expand it contribute to it and so on and then the second part of tomorrow

2105
04:38:55,140 --> 04:39:01,540
will be about Jupyter notebooks maybe some of you are already familiar with this way of interacting

2106
04:39:01,540 --> 04:39:08,100
with code and data and hopefully for those who have never experienced this it's it's something

2107
04:39:08,100 --> 04:39:10,060
that you can try out.

2108
04:39:10,060 --> 04:39:13,660
Again, tomorrow will be like a demo day,

2109
04:39:13,660 --> 04:39:20,780
so you're not expected to actually run things.

2110
04:39:20,780 --> 04:39:25,620
But if you want to actually do and see what people are doing,

2111
04:39:25,620 --> 04:39:28,460
whether you want to build a documentation.

2112
04:39:28,460 --> 04:39:30,740
And it's not just about documentation,

2113
04:39:30,740 --> 04:39:32,100
because with the same system that

2114
04:39:32,100 --> 04:39:34,100
will be introduced tomorrow, you can also,

2115
04:39:34,100 --> 04:39:36,980
it's the same system that we use to build our web pages,

2116
04:39:36,980 --> 04:39:41,820
Our training materials, they're all built with this same system.

2117
04:39:41,820 --> 04:39:45,940
And so you can also learn how to create your website, for example,

2118
04:39:45,940 --> 04:39:50,260
under this github.io if you want.

2119
04:39:50,260 --> 04:39:52,780
And so if you want to test these things,

2120
04:39:52,780 --> 04:39:56,740
you please follow our installation instructions

2121
04:39:56,740 --> 04:40:01,340
if you're planning to do that.

2122
04:40:01,340 --> 04:40:02,140
All right.

2123
04:40:02,140 --> 04:40:07,940
I think I see that people are commenting.

2124
04:40:07,940 --> 04:40:10,140
Is there anything to highlight?

2125
04:40:10,140 --> 04:40:12,300
Let me have a look at the chat.

2126
04:40:15,300 --> 04:40:22,300
Based on the feedback, I think at least there was on track.

2127
04:40:22,300 --> 04:40:23,980
People were satisfied with the speed.

2128
04:40:23,980 --> 04:40:28,500
And although we have some comments that it was a bit too fast,

2129
04:40:28,500 --> 04:40:30,940
and there were many topics that we had to cover.

2130
04:40:30,940 --> 04:40:35,000
And unfortunately, maybe it was a bit too fast.

2131
04:40:35,000 --> 04:40:37,360
If you don't have the required background

2132
04:40:37,360 --> 04:40:40,480
or if you're not familiar with the subject,

2133
04:40:40,480 --> 04:40:42,120
it can be a bit overwhelming.

2134
04:40:42,120 --> 04:40:42,960
Yeah.

2135
04:40:42,960 --> 04:40:46,200
This is exactly why we decided almost a year ago

2136
04:40:46,200 --> 04:40:51,000
to not having exercises in this week too,

2137
04:40:51,000 --> 04:40:54,080
because sometimes not only there's lots of new topics

2138
04:40:54,080 --> 04:40:57,920
on top of those, try to run snake make locally

2139
04:40:57,920 --> 04:41:02,920
or building a Zenodo repository or what do you call it?

2140
04:41:05,400 --> 04:41:07,880
DOI, getting a DOI through the Zenodo Sandbox.

2141
04:41:07,880 --> 04:41:12,360
So we, hopefully this is a little bit more digestible

2142
04:41:12,360 --> 04:41:13,360
and useful.

2143
04:41:13,360 --> 04:41:16,280
And of course we provide you with all these links

2144
04:41:16,280 --> 04:41:19,880
and other resources that those who really have time

2145
04:41:19,880 --> 04:41:24,580
can try themselves and please join our Zulip chat

2146
04:41:24,580 --> 04:41:26,720
so that we can continue discussing there

2147
04:41:26,720 --> 04:41:32,720
helping you there if you want to try these things and you need further help.

2148
04:41:32,720 --> 04:41:46,840
All right, so hopefully this was a good day four and I can maybe add also a reminder that

2149
04:41:46,840 --> 04:41:54,800
day six will be more about coding related things. We will cover things like automated

2150
04:41:54,800 --> 04:41:57,760
testing and modular code development.

2151
04:41:58,960 --> 04:42:02,160
And then again, if you want to do,

2152
04:42:02,160 --> 04:42:04,280
or if you want to try the exercises

2153
04:42:04,280 --> 04:42:08,120
that the instructors are gonna show on the stream,

2154
04:42:08,120 --> 04:42:11,560
you can also, you should basically also install

2155
04:42:11,560 --> 04:42:14,560
what we recommend in our installation pages.

2156
04:42:14,560 --> 04:42:16,040
But then again, it's just fine

2157
04:42:16,040 --> 04:42:19,200
to participate through the questions.

2158
04:42:19,200 --> 04:42:21,120
And thank you again for the many questions.

2159
04:42:21,120 --> 04:42:23,920
There's almost 50 today.

2160
04:42:23,920 --> 04:42:30,400
so it was a great they were so active. Also thanks for the participants who are

2161
04:42:30,400 --> 04:42:37,440
active in answering other questions. Thanks. I see one question that is for me that is related to the

2162
04:42:37,440 --> 04:42:46,320
one ECT credit and so yes in this case I try to be as clear as possible on that page but if

2163
04:42:46,320 --> 04:42:53,760
something is not clear I'm happy to expand it. In practice this means that if you are sure that

2164
04:42:53,760 --> 04:43:01,120
your supervisor or study coordinator or whoever is able to accept a kind of an official paper from

2165
04:43:01,120 --> 04:43:09,040
me that says that this person has completed the Code Refinery workshop. There are very simple

2166
04:43:09,040 --> 04:43:15,520
homework to do for getting the certificate then I will give you this document and then you can

2167
04:43:15,520 --> 04:43:22,880
convert that into into a credit. And if you are at Aalto University you don't you just need to

2168
04:43:22,880 --> 04:43:30,400
to give me your student number and I will add the credit for you on our system but in

2169
04:43:30,400 --> 04:43:37,880
general we don't track the if you were attending you know whatever days you were attending

2170
04:43:37,880 --> 04:43:46,400
as long as you do the homeworks we can you know we can give you we can give you the credit

2171
04:43:46,400 --> 04:43:58,480
Okay, so let's see if there's any other quick question to pick.

2172
04:43:58,480 --> 04:44:01,960
We still have one minute and a half.

2173
04:44:01,960 --> 04:44:09,360
Yeah, I think you're good.

2174
04:44:09,360 --> 04:44:21,680
Yeah, I think most of the things are uncertain.

2175
04:44:21,680 --> 04:44:28,200
All right, maybe we can call it a day, one minute earlier, and thank you for watching.

2176
04:44:28,200 --> 04:44:34,960
The recordings will appear immediately on Twitch TV and later on the week on our YouTube

2177
04:44:34,960 --> 04:44:40,440
channels and so see you tomorrow for day five of Code Refinery. Thank you [name] for being

2178
04:44:40,440 --> 04:44:42,760
here with me and thank you everyone for watching.

2179
04:44:42,760 --> 04:44:45,640
Thank you everyone for joining.

2180
04:44:45,640 --> 04:44:46,640
Bye.

2181
04:44:46,640 --> 04:44:47,140
Bye bye.

