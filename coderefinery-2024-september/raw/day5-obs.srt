1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:06:00,000 --> 00:06:02,000
Hello.

10
00:06:02,000 --> 00:06:07,000
.

11
00:06:07,000 --> 00:06:10,000
.

12
00:06:10,000 --> 00:06:12,000
.

13
00:06:12,000 --> 00:06:15,000
.

14
00:06:15,000 --> 00:06:17,000
.

15
00:06:17,000 --> 00:06:19,000
.

16
00:06:19,000 --> 00:06:21,000
.

17
00:06:21,000 --> 00:06:23,000
.

18
00:06:23,000 --> 00:06:25,000
.

19
00:06:25,000 --> 00:06:28,000
.

20
00:06:28,000 --> 00:06:31,500
There we go.

21
00:06:31,500 --> 00:06:38,500
So I guess if you're here today, you probably know how it works, and if not, you'll figure

22
00:06:38,500 --> 00:06:40,740
out pretty soon.

23
00:06:40,740 --> 00:06:50,500
So yeah, this is our shared notes, and everyone writes questions in the bottom, and we have

24
00:06:50,500 --> 00:06:54,540
a bunch of people that are answering.

25
00:06:54,540 --> 00:07:03,740
the suggested window layout so we have a twitch stream that's portrait mode not to be a video

26
00:07:03,740 --> 00:07:12,460
short but to take off half your screen so you have half the screen to work. But let's

27
00:07:12,460 --> 00:07:21,300
assume y'all know. So what do we do now? Or what's our icebreakers? Everyone can click

28
00:07:21,300 --> 00:07:28,660
pencil icon at the top to edit this. So, [name] and [name], so if you had to explain your job

29
00:07:28,660 --> 00:07:34,260
to someone from the year 1700, what would you say or how would you explain it?

30
00:07:36,900 --> 00:07:41,460
Yeah, I don't remember how I thought about this, but I don't remember my answer.

31
00:07:42,820 --> 00:07:50,980
But it depends a lot on who it is, because if it's an average Finnish person

32
00:07:50,980 --> 00:08:04,580
of the 1700s, then I think I would go with like an agricultural metaphor, like taking care of

33
00:08:04,580 --> 00:08:15,700
windmills maybe, like some machinery. So like you're the, ah okay, yeah. So I'm not necessarily

34
00:08:15,700 --> 00:08:19,700
the one operating the windmill, but rather the person you call when it doesn't work.

35
00:08:20,580 --> 00:08:24,100
Yeah. Okay. As you would expect. Makes sense.

36
00:08:27,700 --> 00:08:34,020
Yeah. To me, it feels like, I mean, I don't know if electricity was invented by then, probably not.

37
00:08:35,060 --> 00:08:42,420
So I'll have to say something like, I come from the future and then there are, you know,

38
00:08:42,420 --> 00:08:52,020
machines which run on lightning, I guess. And they, you know, they are able to write books

39
00:08:52,020 --> 00:09:03,060
and read books instead of, you know, data. And I do many things with it. Like, yeah,

40
00:09:03,620 --> 00:09:08,500
that could be something. The challenging part is getting the computer part out.

41
00:09:08,500 --> 00:09:18,340
Yeah. Yeah. So computers process information. Yeah. So are we like librarians or something?

42
00:09:18,340 --> 00:09:27,100
Or calculators? But did people have to do calculations in the 1700s?

43
00:09:27,100 --> 00:09:29,300
I mean, some, I would think.

44
00:09:29,300 --> 00:09:31,200
They did build buildings and,

45
00:09:39,740 --> 00:09:42,900
so probably the job of a calculator didn't exist yet,

46
00:09:43,780 --> 00:09:48,780
but there were people doing some mechanical things.

47
00:09:51,880 --> 00:09:52,720
Yeah.

48
00:09:54,300 --> 00:09:55,520
Anyway, okay.

49
00:09:57,100 --> 00:10:03,100
Oh, where are we in here?

50
00:10:03,100 --> 00:10:06,100
So, yeah, please open up an answer here.

51
00:10:06,100 --> 00:10:09,100
So I'll write in my answer while we're talking.

52
00:10:09,100 --> 00:10:14,100
Let's see if we get some better answers than what we could come up with.

53
00:10:14,100 --> 00:10:16,100
Hopefully.

54
00:10:16,100 --> 00:10:28,980
So, what's the best documented project you've seen?

55
00:10:28,980 --> 00:10:37,580
Should we wait for some answers?

56
00:10:37,580 --> 00:10:38,580
Yeah.

57
00:10:38,580 --> 00:10:44,780
I mean, I have a go-to example that I might bring up in the documentation section, and

58
00:10:44,780 --> 00:10:46,780
I think we have a different example now.

59
00:10:46,780 --> 00:10:55,820
I don't always have to bring up the same one, but it's NumPy, and it's mainly just that

60
00:10:55,820 --> 00:11:01,660
it has all of the sections that we talk about, but it is useful.

61
00:11:01,660 --> 00:11:11,580
You can actually find what you are looking for, and there are good tutorials.

62
00:11:11,580 --> 00:11:16,540
describes to a complete beginner, it describes pretty well what the library is, yeah.

63
00:11:17,420 --> 00:11:23,500
Can we call it predictable? Like, if you need to know something, you can both find it with a web

64
00:11:23,500 --> 00:11:29,020
search, and then you find the thing, and you know whatever function you need is probably going to

65
00:11:29,020 --> 00:11:36,460
have good documentation. It will definitely say what goes in, what comes out, and all.

66
00:11:36,460 --> 00:11:41,460
It's relatively consistent in how it looks.

67
00:11:41,460 --> 00:11:46,460
It's on the web, so it's actually available.

68
00:11:46,460 --> 00:11:49,460
Yeah.

69
00:11:49,460 --> 00:11:57,460
On the context of NumPy, the popularity helps with these things, because people are using it a lot.

70
00:11:57,460 --> 00:12:04,180
lot. But like we were looking at the readme of Nump by that day.

71
00:12:04,220 --> 00:12:07,820
So even the best libraries can have, you know, gaps when it

72
00:12:07,820 --> 00:12:17,180
comes to onboarding, let's say, or getting started stuff. So,

73
00:12:18,140 --> 00:12:23,460
so there might not exist a perfect project, but sometimes

74
00:12:23,460 --> 00:12:25,340
good enough is all you need.

75
00:12:25,700 --> 00:12:26,620
Yeah, yeah.

76
00:12:28,740 --> 00:12:32,100
Yeah, I should actually come up with a good example of something

77
00:12:32,100 --> 00:12:36,900
that only has a readme and nothing else that is where that's

78
00:12:36,900 --> 00:12:41,780
good enough or where it's a good readme.

79
00:12:42,260 --> 00:12:42,580
Yeah.

80
00:12:44,020 --> 00:12:48,340
And then there's some projects which seem like they're pretty

81
00:12:48,340 --> 00:12:52,140
good, but it's just not very user friendly.

82
00:12:52,140 --> 00:12:56,140
Like, you have to already know a lot in order to navigate the docs.

83
00:12:59,180 --> 00:13:03,100
So it's essentially only documentation for programmers who already use the project,

84
00:13:05,260 --> 00:13:10,300
which is understandable. That's the first thing you write, because that's what you yourself need.

85
00:13:10,300 --> 00:13:18,060
Yeah. Like for here, I think SQLite. So it has quite good docs, but

86
00:13:18,060 --> 00:13:26,220
But, man, it seems, and like these good figures and so on and everything I know will be in

87
00:13:26,220 --> 00:13:33,700
a page roughly where I know it'll look, but, man, it doesn't seem very friendly for users.

88
00:13:33,700 --> 00:13:38,500
And if you don't already know how the docs are organized, you're not going to find what

89
00:13:38,500 --> 00:13:42,100
you need very easily.

90
00:13:42,100 --> 00:13:43,100
So yeah.

91
00:13:43,100 --> 00:13:45,300
But I guess it's time to start.

92
00:13:45,300 --> 00:13:50,700
So should I introduce you all?

93
00:13:50,700 --> 00:13:51,700
I guess may as well.

94
00:13:51,700 --> 00:13:54,140
So today we have two lessons.

95
00:13:54,140 --> 00:13:59,820
First is documentation taught by [name] and [name] here.

96
00:13:59,820 --> 00:14:04,460
So it's the first two hours before lunch.

97
00:14:04,460 --> 00:14:09,060
And then after that, we have an hour-long lunch break, and then there's Jupyter.

98
00:14:09,060 --> 00:14:15,500
So I guess many people know about Jupyter already, and for some people it's not relevant,

99
00:14:15,500 --> 00:14:21,160
like if you're using the R equivalent or Julia equivalents or whatever.

100
00:14:21,160 --> 00:14:22,940
But there are still some good lessons here.

101
00:14:22,940 --> 00:14:28,880
So it's not only basic Jupyter, but we say how to use these kind of notebooks and to share

102
00:14:28,880 --> 00:14:34,180
things using version control, and to make them a little bit more reproducible.

103
00:14:34,180 --> 00:14:41,800
So some of these lessons are still going to be useful to others.

104
00:14:41,800 --> 00:14:43,680
And even those that know Jupyter.

105
00:14:43,680 --> 00:14:50,840
So with that, maybe I will start to disappear, and I'll leave it up to you all.

106
00:14:50,840 --> 00:14:53,320
Does that sound good?

107
00:14:53,320 --> 00:14:57,080
Yeah, once I've done copying.

108
00:14:57,080 --> 00:14:58,080
Yeah.

109
00:14:58,080 --> 00:14:59,080
Okay.

110
00:14:59,080 --> 00:15:07,080
So, yeah, I'll switch to your screen once it's shared and see you later.

111
00:15:07,080 --> 00:15:10,080
Okay.

112
00:15:10,080 --> 00:15:19,080
Um, so, actually, do you want to share your screen.

113
00:15:19,080 --> 00:15:23,080
Right. I can. Yeah.

114
00:15:23,080 --> 00:15:26,080
Just to show the.

115
00:15:26,080 --> 00:15:29,080
the main page of the documentation lesson and

116
00:15:29,080 --> 00:15:32,080
and we can

117
00:15:32,080 --> 00:15:35,080
go to the demonstrations.

118
00:15:35,080 --> 00:15:38,080
So

119
00:15:38,080 --> 00:15:41,080
So

120
00:15:41,080 --> 00:15:44,080
Okay. Yeah. Does that look good?

121
00:15:44,080 --> 00:15:47,080
Yes.

122
00:15:47,080 --> 00:15:50,080
Works for me. Yeah.

123
00:15:50,080 --> 00:15:53,080
Okay. So yeah.

124
00:15:53,080 --> 00:16:00,840
Let's get started. We'll talk about documentation today or in this lesson like [name] mentioned.

125
00:16:06,040 --> 00:16:11,480
Let's start with a really broad question. Why do you need documentation? What's the point?

126
00:16:11,480 --> 00:16:20,600
Can you take us?

127
00:16:22,440 --> 00:16:23,160
Yeah.

128
00:16:23,160 --> 00:16:24,600
Why do you need good documentation?

129
00:16:30,360 --> 00:16:32,920
Probably the most important reason to write good documentation,

130
00:16:32,920 --> 00:16:36,680
at least when you're working on your own project, when you're starting out,

131
00:16:36,680 --> 00:16:44,040
It might seem that you know how everything works in your code when you're writing it,

132
00:16:44,040 --> 00:16:46,040
and you probably do.

133
00:16:46,040 --> 00:16:51,640
But then a month later or even a week later or sometimes even a day later, you come back

134
00:16:51,640 --> 00:16:58,040
to it and it is very much not clear what is doing what.

135
00:16:58,040 --> 00:17:04,080
So that is – we said about version control, one of the main reasons you need version control

136
00:17:04,080 --> 00:17:05,720
is for yourself.

137
00:17:05,720 --> 00:17:13,400
same goes for documentation. One of the main reasons is for yourself. Probably also a good

138
00:17:13,400 --> 00:17:18,280
rule of thumb of when your documentation is good is when you think you could actually read it and

139
00:17:18,280 --> 00:17:32,040
figure out what's going on. That's a big reason. Of course, another big reason is that it helps

140
00:17:32,040 --> 00:17:39,800
other people use your project and therefore it helps other people then make contributions and

141
00:17:39,800 --> 00:17:47,480
makes your project more useful. Shall we go into this lesson but?

142
00:17:50,280 --> 00:17:54,840
Yes, I think the icebreaker is covered essentially.

143
00:17:57,240 --> 00:18:00,360
Like the introduction, so let's go to motivation and wishlist.

144
00:18:00,360 --> 00:18:01,360
Yeah.

145
00:18:01,360 --> 00:18:02,360
Sure.

146
00:18:02,360 --> 00:18:17,480
I mean, we already started talking a bit about motivation, why is it important.

147
00:18:17,480 --> 00:18:29,840
So should we start, so there is now a documentation section at the bottom of the notes.

148
00:18:29,840 --> 00:18:33,960
So should we start a quick question here?

149
00:18:33,960 --> 00:18:35,480
I'll write down the question.

150
00:18:39,800 --> 00:18:41,680
And then a lot of the lesson will

151
00:18:41,680 --> 00:18:44,560
be these kind of discussions in the notes.

152
00:18:44,560 --> 00:18:48,400
So I will write, why documenting code?

153
00:18:48,400 --> 00:18:50,240
Or why should you document your code?

154
00:18:54,840 --> 00:18:58,160
And just, yeah, please write some answers.

155
00:18:58,160 --> 00:19:03,840
So write down why you think documentation is useful.

156
00:19:03,840 --> 00:19:11,320
And also, what do you need for good documentation?

157
00:19:11,320 --> 00:19:17,840
So what do you think would be useful for yourself

158
00:19:17,840 --> 00:19:21,480
if you are working in your own code?

159
00:19:21,480 --> 00:19:24,880
And what would you actually want from someone else's code,

160
00:19:24,880 --> 00:19:27,840
someone else's project in their documentation.

161
00:19:33,640 --> 00:19:38,040
And assuming you are working with a research group

162
00:19:38,040 --> 00:19:38,960
who's using the code,

163
00:19:38,960 --> 00:19:41,520
how do you motivate your colleagues

164
00:19:41,520 --> 00:19:43,760
to contribute to the documentation?

165
00:19:43,760 --> 00:19:45,460
That's also an important question.

166
00:19:49,880 --> 00:19:53,600
So let's wait a few minutes

167
00:19:53,600 --> 00:19:58,000
Before we go into this, some answers we have already given,

168
00:19:58,000 --> 00:20:03,200
but these are now by no means correct answers.

169
00:20:03,200 --> 00:20:05,240
Your answers will be more correct.

170
00:20:05,240 --> 00:20:09,680
So please go ahead and write down in the notes.

171
00:20:09,680 --> 00:20:10,480
Indeed, everyone's.

172
00:20:10,480 --> 00:20:16,440
We'll wait a minute or so to see what answers come up.

173
00:20:16,440 --> 00:20:16,940
Yes.

174
00:20:23,600 --> 00:20:46,840
I got a video.

175
00:20:46,840 --> 00:20:48,840
You

176
00:21:16,840 --> 00:21:29,400
A lot of good answers.

177
00:21:29,400 --> 00:21:34,080
So what do we have to make it possible for other people to use the code?

178
00:21:34,080 --> 00:21:36,900
That is important.

179
00:21:36,900 --> 00:21:39,440
That includes of course your colleagues.

180
00:21:39,440 --> 00:21:46,480
So one option is if you have a normal average-sized research group, what would that be, five people

181
00:21:46,480 --> 00:21:53,360
using your code to some extent. One option is to write down the answers to the most obvious

182
00:21:53,360 --> 00:21:58,880
questions in the beginning. The other option is to tell everybody one by one, probably a couple of

183
00:21:58,880 --> 00:22:06,800
times. That is a big reason to write documentation. But then also, of course, not just your

184
00:22:06,800 --> 00:22:14,000
colleagues, but if you publish it, then other people might also benefit. That is, of course,

185
00:22:14,000 --> 00:22:20,960
was good. To know what it's doing, what is needed, or the outputs, it needs to be sufficiently

186
00:22:20,960 --> 00:22:24,360
clear so that I'm able to tweak it, yeah.

187
00:22:24,360 --> 00:22:25,840
That's true.

188
00:22:25,840 --> 00:22:26,840
Yeah.

189
00:22:26,840 --> 00:22:27,840
Sometimes.

190
00:22:27,840 --> 00:22:36,440
Yeah, so this is, I see a function, it's several lines of code, 20 lines of code. It's nice

191
00:22:36,440 --> 00:22:40,960
if it has good documentation so that I don't actually have to try to read the code to figure

192
00:22:40,960 --> 00:22:49,040
what it's doing. Yeah, so that it's usable. What's the point if it's not?

193
00:22:50,560 --> 00:22:58,080
Yeah, if you're not only writing for yourself. I hear a bit of an echo again. Did something

194
00:22:58,080 --> 00:23:02,640
change the microphone settings? Oh, well. Yeah.

195
00:23:02,640 --> 00:23:07,640
Yeah, so if you're only writing for yourself,

196
00:23:10,560 --> 00:23:11,880
well, even then you should document

197
00:23:11,880 --> 00:23:13,080
because you will forget,

198
00:23:13,080 --> 00:23:18,080
but it is your kind of in a way wasting effort

199
00:23:19,600 --> 00:23:23,720
because someone else could also be using the same code

200
00:23:24,560 --> 00:23:26,160
and that would be more efficient.

201
00:23:27,840 --> 00:23:30,040
Remind myself what the functions did, yeah.

202
00:23:30,040 --> 00:23:33,040
like putting frozen food in the freezer.

203
00:23:33,040 --> 00:23:35,600
It's not labeled, it's hard to figure out what it is, right?

204
00:23:35,600 --> 00:23:37,960
So you come back in a month or a year

205
00:23:37,960 --> 00:23:41,720
and it is pretty much impossible to figure out

206
00:23:41,720 --> 00:23:48,200
what your code is doing unless the functions

207
00:23:48,200 --> 00:23:51,040
and all the parts are properly labeled and explained.

208
00:23:51,040 --> 00:24:02,880
Prevent having to rewrite, yeah.

209
00:24:02,880 --> 00:24:04,660
So yeah, that's true.

210
00:24:04,660 --> 00:24:08,960
If you don't know what the code is doing, then you probably need to just rewrite it

211
00:24:08,960 --> 00:24:09,960
later.

212
00:24:09,960 --> 00:24:10,960
That happens.

213
00:24:10,960 --> 00:24:19,080
Explain the code to myself and others.

214
00:24:19,080 --> 00:24:25,000
people in the research group do not have the same skill levels. Essentially, either you write

215
00:24:25,560 --> 00:24:33,400
documentation for the people in your research group to use your code or you end up teaching

216
00:24:33,400 --> 00:24:38,840
them probably a few times before they are confident in how to use your code.

217
00:24:40,680 --> 00:24:47,800
That is a big reason for documentation. That covers way more than what we had.

218
00:24:49,080 --> 00:24:59,240
then what we had in our short answer. So that last point, shield your limited time, is essentially

219
00:24:59,240 --> 00:25:06,440
that you don't have to keep re-explaining the same thing to your colleagues and other people.

220
00:25:07,560 --> 00:25:17,240
Okay, so what is documentation and what would you actually want it to look like?

221
00:25:17,240 --> 00:25:27,320
This is pretty much the same question really. There's a few different types of documentations

222
00:25:27,320 --> 00:25:39,320
that are useful. There's tutorials. These show a new user how to do a thing with the code and

223
00:25:39,960 --> 00:25:47,160
these are kind of like the exercises we have in these lessons for example. You have a specific

224
00:25:47,160 --> 00:25:54,520
goal and then the tutorial gives you some lines of code to run. It's not necessarily the goal that

225
00:25:54,520 --> 00:25:59,240
the user actually has, it's more there to show how to do things. So these are

226
00:26:02,280 --> 00:26:08,760
learning oriented. Sometimes they look a lot like lecture materials.

227
00:26:08,760 --> 00:26:21,920
Then, you can have how-to guides, goal-oriented, well, I just said that the tutorials kind

228
00:26:21,920 --> 00:26:27,280
of usually have a specific goal, but they are doing a specific thing in order to show

229
00:26:27,280 --> 00:26:29,920
you how the code works.

230
00:26:29,920 --> 00:26:36,720
Goal-oriented here means how-to guides show you how you should do a specific thing that

231
00:26:36,720 --> 00:26:43,680
is probably something you might want to do. A tutorial is how to train a machine learning

232
00:26:43,680 --> 00:26:50,240
model to recognize handwritten digits. You wouldn't probably actually need a code that

233
00:26:50,240 --> 00:26:55,920
does that because that's been written a million times. But a how-to guide would be how to

234
00:26:56,720 --> 00:27:01,280
train a actual big large language model, how to fine-tune it. That's something you might actually

235
00:27:01,280 --> 00:27:08,280
be doing in your real life, in your work.

236
00:27:08,280 --> 00:27:13,280
Explanations, just essentially telling you what the code is

237
00:27:13,280 --> 00:27:16,280
doing and how things work.

238
00:27:16,280 --> 00:27:18,280
That's maybe the most straightforward.

239
00:27:18,280 --> 00:27:21,280
When you say documentation, that might come to mind first.

240
00:27:21,280 --> 00:27:26,280
Then there's a reference.

241
00:27:26,280 --> 00:27:29,280
Something like a list of functions, a list of classes,

242
00:27:29,280 --> 00:27:33,600
is and what each of those does, why they exist.

243
00:27:33,600 --> 00:27:38,480
So there's a lot more here, but these are the basic parts.

244
00:27:38,480 --> 00:27:42,920
If you know what these are and figure out

245
00:27:42,920 --> 00:27:46,640
which ones you actually need in your project and write those,

246
00:27:46,640 --> 00:27:50,600
that is a pretty good place to be at.

247
00:27:50,600 --> 00:27:52,320
But it all depends on the project.

248
00:27:52,320 --> 00:27:55,720
So a small project, just a readme file

249
00:27:55,720 --> 00:28:00,000
that contains some explanation of what the code is

250
00:28:00,000 --> 00:28:03,640
and maybe some very short example

251
00:28:03,640 --> 00:28:08,400
that's basically a tutorial and how to guide in one.

252
00:28:08,400 --> 00:28:11,840
That is probably enough.

253
00:28:11,840 --> 00:28:13,760
Maybe some in code documentation

254
00:28:13,760 --> 00:28:19,280
that kind of functions as a reference as well.

255
00:28:19,280 --> 00:28:22,400
So, yeah, in a small project, you don't need much.

256
00:28:22,400 --> 00:28:33,280
but in a bigger project, in something like NumPy or something big that thousands of people use,

257
00:28:33,280 --> 00:28:37,040
you probably want all of those and you want to think about them separately.

258
00:28:39,600 --> 00:28:46,400
Let's go back to the collaborative document and let's make a wish list.

259
00:28:46,400 --> 00:28:57,880
So, what would you like to see in documentation when you open, when you go looking at a piece

260
00:28:57,880 --> 00:29:04,040
of software, in research software, that you might want to use?

261
00:29:04,040 --> 00:29:08,480
It sounds like a library that would do the thing you want it to do, but you don't know

262
00:29:08,480 --> 00:29:09,840
yet.

263
00:29:09,840 --> 00:29:10,840
What would you like to see?

264
00:29:10,840 --> 00:29:37,960
Oh, maybe I'll copy this to the, to the notes.

265
00:29:37,960 --> 00:29:44,760
So does it make sense to say that now the question is how do we write and maintain it,

266
00:29:44,760 --> 00:29:46,840
like where do we store the documentation?

267
00:29:49,880 --> 00:29:53,800
I guess this is still more about content, like what would you like to see in,

268
00:29:55,480 --> 00:29:59,960
I mean, I guess someone else's work in this case, that's at least how I think about the question.

269
00:30:03,800 --> 00:30:04,360
Okay.

270
00:30:04,360 --> 00:30:12,040
It's talking about research software. It could be about a big library, but I guess what I have in

271
00:30:12,040 --> 00:30:24,200
mind is you have a relatively obscure research problem and you do some searching and you find

272
00:30:24,200 --> 00:30:29,640
a Python library or some library that sounds like it could do the job.

273
00:30:29,640 --> 00:30:35,480
job. What would you want there to be in the documentation so that you would actually use

274
00:30:35,480 --> 00:30:42,640
that code rather than just write it yourself? Because quite often you still end up writing

275
00:30:42,640 --> 00:30:52,720
it yourself. This could be about a bigger project. It could be about something like

276
00:30:52,720 --> 00:30:58,640
what would you want to see in Torch documentation or some other really big library behind us?

277
00:31:09,840 --> 00:31:15,360
Do you have any comments? I think I'm talking a lot, but that's just me.

278
00:31:15,360 --> 00:31:24,760
No, but here we have like very good answers from the learners.

279
00:31:24,760 --> 00:31:33,640
So there are talking about assumptions of the nitty-gritty details.

280
00:31:33,640 --> 00:31:39,840
And then there is someone saying that one should add a detailed way of the code so that

281
00:31:39,840 --> 00:31:40,840
with examples.

282
00:31:40,840 --> 00:31:42,880
So examples are often very useful.

283
00:31:47,880 --> 00:31:53,160
So yeah, dependencies can help when

284
00:31:53,160 --> 00:31:57,520
someone is installing the code for the first time.

285
00:32:01,120 --> 00:32:04,040
Gallery with examples, yeah, sometimes

286
00:32:04,040 --> 00:32:10,000
adding a lot of some images, which shows what it does.

287
00:32:10,000 --> 00:32:18,800
quite useful so that it's not a lot of text. That's true. What else do we have here?

288
00:32:22,240 --> 00:32:29,440
So examples, examples, yeah. Yeah, there's two big things. I mean, there's like the details of

289
00:32:29,440 --> 00:32:35,200
how you use it, inputs and outputs of functions and so on. And then there's this under the hood.

290
00:32:35,200 --> 00:32:47,500
code. What are the assumptions? What is it intended to do? What's the big picture? Those

291
00:32:47,500 --> 00:32:58,440
should be there. Those should be easy to find. That's a good point. Where is the code? How

292
00:32:58,440 --> 00:33:04,640
do you actually get the live? How do you install it? How do you get it to run? That's a very

293
00:33:04,640 --> 00:33:05,760
One part of it, of course.

294
00:33:11,360 --> 00:33:13,680
And yeah, dependencies kind of goes to the same thing.

295
00:33:15,800 --> 00:33:16,000
Yeah.

296
00:33:16,840 --> 00:33:18,320
Easy to find good points.

297
00:33:19,000 --> 00:33:19,840
Good structure.

298
00:33:19,880 --> 00:33:20,120
Yeah.

299
00:33:20,120 --> 00:33:20,960
That's useful.

300
00:33:23,320 --> 00:33:23,640
Okay.

301
00:33:24,600 --> 00:33:30,320
So we have a lot of points in the answer in the lecture materials.

302
00:33:31,560 --> 00:33:32,040
Um,

303
00:33:32,040 --> 00:33:41,080
that are mainly taken from years of answers to this question from the notes, so that's

304
00:33:41,080 --> 00:33:55,960
a good read. But I think we shouldn't go through all of this. Mostly, this is repeating what

305
00:33:55,960 --> 00:34:00,360
we've said or something that we will go into later.

306
00:34:03,160 --> 00:34:07,720
We will talk about licensing later, but one important point is including a license file

307
00:34:07,720 --> 00:34:13,960
and making sure that people know you can actually use the code. It's not there just for show.

308
00:34:17,000 --> 00:34:20,360
Actually, that is one of the answers. That is the last answer in the notes.

309
00:34:20,360 --> 00:34:24,360
So, am I allowed to use it? That's a very good point.

310
00:34:28,360 --> 00:34:30,360
So, okay.

311
00:34:31,360 --> 00:34:34,360
Should we go to the next section?

312
00:34:34,360 --> 00:34:36,360
Yes, you can do that.

313
00:34:36,360 --> 00:34:38,360
License.

314
00:34:42,360 --> 00:34:44,360
Oh yeah, there's a next button.

315
00:34:44,360 --> 00:34:49,360
Next button at the bottom of the page usually.

316
00:34:49,360 --> 00:35:06,520
Okay, so in code documentation, this is probably the easiest thing to maybe in readme file

317
00:35:06,520 --> 00:35:13,420
is equally easy to add because it's just adding a file, but yeah, essentially this is writing

318
00:35:13,420 --> 00:35:18,700
something into the file that the code is in, writing some comments, doc strings.

319
00:35:26,220 --> 00:35:28,620
Sorry. Okay.

320
00:35:28,620 --> 00:35:50,460
Okay, so what is the upside – sorry, I was coughing and then I lost my train of thought.

321
00:35:50,460 --> 00:35:57,660
So the big upside is, when you look at the function,

322
00:35:57,660 --> 00:35:59,260
you see the documentation.

323
00:35:59,260 --> 00:36:01,380
If you're a programmer and you take

324
00:36:01,380 --> 00:36:05,540
a look at what there's a function you want to run,

325
00:36:05,540 --> 00:36:07,620
you can immediately see the documentation.

326
00:36:07,620 --> 00:36:26,900
Then, so it's version controlled with the code itself, so you can commit it into Git.

327
00:36:26,900 --> 00:36:30,940
It will then follow the code around.

328
00:36:30,940 --> 00:36:36,360
And if the doc string or the comment is in the beginning of the function, it will actually

329
00:36:36,360 --> 00:36:41,400
just follow the function around wherever it is in the code, so you can always find it.

330
00:36:43,080 --> 00:36:46,920
But if you're a new user and you see just a bunch of code files,

331
00:36:48,280 --> 00:36:55,880
then that is not the best starting point. That's the disadvantage, which is fixed by readme files.

332
00:36:56,840 --> 00:37:04,840
So a readme file is something that's obvious to look at and often automatically opened

333
00:37:04,840 --> 00:37:10,280
side-by-side with the code. If you look at the code on GitHub, it will display the readme file

334
00:37:10,280 --> 00:37:23,320
directly, for example, and GitLab, I think, as well. Readme files are also version-controlled

335
00:37:23,320 --> 00:37:29,400
in the same way. It's a file, so you have to add it and commit it separately. It doesn't

336
00:37:29,400 --> 00:37:33,240
code directly with the code, but it's text, it works the same way.

337
00:37:37,080 --> 00:37:45,640
So what are the disadvantages? It doesn't, essentially the opposite of in-code documentation

338
00:37:45,640 --> 00:37:48,920
and also it cannot be very complicated or long because it's a single file.

339
00:37:50,200 --> 00:37:53,880
It doesn't have structure in the same sense as a website might.

340
00:37:53,880 --> 00:38:14,120
Okay, so we suggest that you use either RST rich text, restructured text or markdown

341
00:38:15,400 --> 00:38:20,520
to write documentation. These are mostly automatically rendered by different tools.

342
00:38:23,880 --> 00:38:34,880
You can use them relatively easily.

343
00:38:34,880 --> 00:38:36,880
You don't have to generate anything.

344
00:38:36,880 --> 00:38:43,880
And you get some nice structure that you get a good looking documentation out of it.

345
00:38:43,880 --> 00:38:47,880
Some headers and subsections and so on.

346
00:38:47,880 --> 00:38:52,880
And of course you are currently using Markdown to write the notes.

347
00:38:52,880 --> 00:38:56,880
So, you roughly know how it works.

348
00:38:56,880 --> 00:38:58,880
Okay.

349
00:38:58,880 --> 00:39:03,880
So, we don't have to go much into this because we'll come back to it later.

350
00:39:03,880 --> 00:39:07,880
In fact, we'll come back to everything about here.

351
00:39:07,880 --> 00:39:10,880
Everything here we'll come back to in a moment.

352
00:39:10,880 --> 00:39:16,880
So, here's some.

353
00:39:16,880 --> 00:39:18,880
So, HTML static site generators.

354
00:39:18,880 --> 00:39:27,760
generators. That's another option. So, if a README file is not enough, if you want something

355
00:39:27,760 --> 00:39:35,960
bigger, so you want multiple pages or you want more structure into the documentation,

356
00:39:35,960 --> 00:39:43,160
it's a big enough project that you need that. Then static site generators are a good tool.

357
00:39:43,160 --> 00:39:54,680
they can turn this RST or Markdown code into nice looking websites. So we will demonstrate with

358
00:39:54,680 --> 00:40:05,480
Sphinx and it can use Markdown or RST. It's well demonstrating it because we know how

359
00:40:05,480 --> 00:40:11,640
to use it but also it is very general and relatively easy to use. But there are other

360
00:40:11,640 --> 00:40:22,280
options too and so there's package down which is popular in our community. These often are tied to

361
00:40:22,280 --> 00:40:29,400
the language for understandable reasons like it comes with the language or it's written for that

362
00:40:29,400 --> 00:40:35,800
language so that it's easy to use in that language. Sphinx is very general though it's not limited

363
00:40:35,800 --> 00:40:38,760
It runs on Python, but it's not limited to Python in any way.

364
00:40:41,640 --> 00:40:45,080
But yeah, there's lots of good options here that you can check out.

365
00:40:47,480 --> 00:40:52,920
Also, Zola is what we use to build our project website, so it's another option that we like.

366
00:40:52,920 --> 00:41:07,620
At least the popular Git repositories all allow you to directly serve static HTML and

367
00:41:07,620 --> 00:41:20,700
actually build your HTML sites using Sphinx or something else. You don't have to have

368
00:41:20,700 --> 00:41:25,820
a web server to post your documentation pages.

369
00:41:25,820 --> 00:41:30,740
But okay, so there's also wikis,

370
00:41:30,740 --> 00:41:34,740
which are very similar to a static website.

371
00:41:34,740 --> 00:41:37,460
The wikis would exist outside.

372
00:41:37,460 --> 00:41:44,740
So a static website is written in Markdown and restructures text.

373
00:41:44,740 --> 00:41:50,140
It will be in your code base and version control with your code.

374
00:41:50,140 --> 00:41:52,140
So that's nice.

375
00:41:52,140 --> 00:41:54,140
And wikis tend to exist separately.

376
00:41:54,140 --> 00:41:56,140
But also wikis allow a kind of

377
00:41:56,140 --> 00:41:58,140
collaborative editing

378
00:41:58,140 --> 00:42:00,140
that doesn't require

379
00:42:00,140 --> 00:42:02,140
the users to know Git. It requires

380
00:42:02,140 --> 00:42:04,140
them to know wikis, so

381
00:42:04,140 --> 00:42:06,140
that's a trade-off.

382
00:42:06,140 --> 00:42:08,140
But they are also useful.

383
00:42:08,140 --> 00:42:10,140
So yeah, the barrier

384
00:42:10,140 --> 00:42:12,140
to write and edit is very low.

385
00:42:12,140 --> 00:42:14,140
There's

386
00:42:14,140 --> 00:42:16,140
people often use LaTeX

387
00:42:16,140 --> 00:42:18,140
and PDFs.

388
00:42:18,140 --> 00:42:21,660
You can also version control that with your code, it later is code.

389
00:42:22,460 --> 00:42:29,420
A PDF format though is harder to share and it is not something you would probably

390
00:42:29,420 --> 00:42:31,260
want to version control with your code.

391
00:42:35,660 --> 00:42:40,860
Yeah, so the ODE oxygen is a way of generating API documentation which I

392
00:42:40,860 --> 00:42:44,540
will demonstrate with Sphinx how to do API documentation if we have time.

393
00:42:44,540 --> 00:42:59,760
time. I saw quickly, yeah, there was a point in the notes. Can you use the documentation

394
00:42:59,760 --> 00:43:08,480
that's included in your code, the in-code documentation, to automatically generate this sort of API

395
00:43:08,480 --> 00:43:14,520
documentation? That's what Doxygen is for. There is also a tool in Sphinx to do that.

396
00:43:14,520 --> 00:43:24,960
So, yeah, I mean, one upside with using in-code documentation is that you can then automatically

397
00:43:24,960 --> 00:43:30,200
also extract it into a separate website.

398
00:43:30,200 --> 00:43:38,160
It's much harder to go the other way around, right, to go from a website to having documentation

399
00:43:38,160 --> 00:43:40,360
that kind of links to your code.

400
00:43:40,360 --> 00:43:50,600
So this is, it's a nice way of essentially getting both at once.

401
00:43:50,600 --> 00:43:54,400
And the good thing is like, it's always up to date with the code.

402
00:43:54,400 --> 00:44:03,340
So if you change the function or take it away, the documentation is often kept updated.

403
00:44:03,340 --> 00:44:06,680
So it doesn't go old.

404
00:44:06,680 --> 00:44:14,480
Yeah, so whenever you change the function, you hopefully also remember to change the

405
00:44:14,480 --> 00:44:21,200
documentation because it's right there, whereas if the documentation is separate in some other

406
00:44:21,200 --> 00:44:28,360
markdown file, you might forget to do it or you might not do it at the same time, and then

407
00:44:28,360 --> 00:44:29,360
it will not be up-to-date.

408
00:44:29,360 --> 00:44:33,000
That's a good point.

409
00:44:33,000 --> 00:44:34,000
Yeah.

410
00:44:34,000 --> 00:44:52,560
Okay, so we have a bit more detail in the next section about in code documentation.

411
00:44:52,560 --> 00:45:00,080
So we have already talked a good bit about this and about, well, all of the other sections

412
00:45:00,080 --> 00:45:08,800
I think let's do the exercise so that everybody gets to chip in but then I think we'll move

413
00:45:08,800 --> 00:45:18,080
relatively quickly. So I will add a poll on the notes.

414
00:45:30,080 --> 00:45:38,800
And the question is, which one of these comments is more useful documentation or is which one

415
00:45:38,800 --> 00:45:40,240
of these is better?

416
00:45:40,240 --> 00:45:42,640
And you can also say why.

417
00:45:42,640 --> 00:45:48,320
So, info block here.

418
00:45:48,320 --> 00:45:59,520
And we'll vote for either comment A. So, maybe can you share the notes so that I can

419
00:45:59,520 --> 00:46:06,520
So, I will explain what I'm typing in.

420
00:46:06,520 --> 00:46:09,520
So, like in the polls that we've had before,

421
00:46:09,520 --> 00:46:13,520
either vote for comment A or comment B

422
00:46:13,520 --> 00:46:18,520
by adding some character in there.

423
00:46:18,520 --> 00:46:23,520
At least in the edit view,

424
00:46:23,520 --> 00:46:26,520
it will be clear which one has more votes.

425
00:46:26,520 --> 00:46:32,360
has more votes. It's kind of a bar graph.

426
00:46:32,360 --> 00:46:40,240
And then I'll also add the question why, so that you get a chance to explain yourself

427
00:46:40,240 --> 00:46:47,080
if you want to. I think people are pretty clear on this question, but why is the second

428
00:46:47,080 --> 00:46:49,080
one better.

429
00:47:17,080 --> 00:47:24,080
And I guess, what are the good, in what way is the first one good, in what way is the second one good?

430
00:47:24,080 --> 00:47:48,920
Yeah, so essentially in the first one, if you know Python or if you know, I mean, it's

431
00:47:48,920 --> 00:47:53,240
two lines of code is relatively clear. If you know almost any programming language,

432
00:47:54,040 --> 00:47:58,520
you can figure out that these two lines are checking if the temperature is below

433
00:47:58,520 --> 00:48:05,480
minus 50 and printing an error. So the comment is not giving any new information really,

434
00:48:07,240 --> 00:48:11,800
unless you are completely new to coding and you don't know what this smaller than sign

435
00:48:11,800 --> 00:48:17,240
of what this if statement means.

436
00:48:17,240 --> 00:48:23,040
In the second one, it tells you why it's checking that the temperature is, if the temperature

437
00:48:23,040 --> 00:48:27,760
is smaller than 50.

438
00:48:27,760 --> 00:48:32,640
So it is actually providing useful information in that case.

439
00:48:32,640 --> 00:48:40,080
It's telling, so if you are thinking of changing those two lines of code, you know what you're

440
00:48:40,080 --> 00:48:43,200
doing if you read that line of comment.

441
00:48:43,200 --> 00:48:46,440
So it's actually useful in that sense.

442
00:48:46,440 --> 00:48:49,200
OK.

443
00:48:49,200 --> 00:48:55,800
Now in the next part, a couple of ways to not use comments.

444
00:49:00,480 --> 00:49:04,920
These are something that, well, OK, I'll just

445
00:49:04,920 --> 00:49:07,640
say ways to not use comments.

446
00:49:07,640 --> 00:49:12,920
So often you'll see someone comment out

447
00:49:12,920 --> 00:49:14,160
a couple of lines of code.

448
00:49:14,160 --> 00:49:17,280
You don't need that check anymore.

449
00:49:17,280 --> 00:49:22,280
It's for some reason it existed in an old version of the code,

450
00:49:22,280 --> 00:49:26,600
but it really shouldn't be done anymore.

451
00:49:26,600 --> 00:49:29,400
You can just delete those lines of code

452
00:49:29,400 --> 00:49:32,200
and use version control instead.

453
00:49:32,200 --> 00:49:33,880
If you need those lines back or you

454
00:49:33,880 --> 00:49:36,720
need to see what happened there in the previous version,

455
00:49:36,720 --> 00:49:43,720
then you can check out the previous version of the code and actually look at what it was

456
00:49:43,720 --> 00:49:51,720
doing. Whereas in this one, it often happens that then the code around those commented

457
00:49:51,720 --> 00:49:57,840
outlines evolves so much that uncommenting those will just break the code. So, there's

458
00:49:57,840 --> 00:50:04,760
no point in keeping them around in the later version. So, yeah, comments should not be

459
00:50:04,760 --> 00:50:07,160
used instead of version control.

460
00:50:11,400 --> 00:50:18,520
Another one is emulating comment messages. You are telling people why you are making a change,

461
00:50:19,880 --> 00:50:24,600
which could equally well be a comment message. This might actually be slightly more akin to

462
00:50:24,600 --> 00:50:29,720
documentation. You're telling people what the lines of code are doing, but

463
00:50:29,720 --> 00:50:38,720
but this could be written differently to be better documentation and you could use the

464
00:50:38,720 --> 00:50:45,520
comment message to have your name attached to the change and tell people when you did

465
00:50:45,520 --> 00:50:55,520
it and why.

466
00:50:55,520 --> 00:50:58,120
I was a bit hesitant of saying that you shouldn't do this

467
00:50:58,120 --> 00:51:02,640
because sometimes you might end up making a small change

468
00:51:02,640 --> 00:51:07,080
and going back, and then you know you do want to actually

469
00:51:07,080 --> 00:51:08,880
comment the code later, for example.

470
00:51:12,240 --> 00:51:15,160
Yeah, using comments to replace version control

471
00:51:15,160 --> 00:51:17,660
is usually not a good idea.

472
00:51:19,440 --> 00:51:20,280
Okay.

473
00:51:20,280 --> 00:51:26,280
Then there's some examples here of docstrings.

474
00:51:26,280 --> 00:51:30,520
So why should we go into this?

475
00:51:30,520 --> 00:51:33,340
Because we already talked a good bit about this.

476
00:51:33,340 --> 00:51:37,440
Let's just leave this to the level of an example then.

477
00:51:37,440 --> 00:51:42,080
So here are examples

478
00:51:42,080 --> 00:51:45,080
of how you write docstrings in different languages.

479
00:51:45,080 --> 00:51:58,760
So in Python the first one is of course in each of these examples in all of these languages

480
00:51:58,760 --> 00:52:05,480
the first one is a regular comment and it doesn't exactly attach to the function.

481
00:52:05,480 --> 00:52:11,800
It's useful to have when you look at the code but then the second one is a doc string

482
00:52:11,800 --> 00:52:18,680
docstring. That's something that will be a property of the function in a way. You can

483
00:52:18,680 --> 00:52:27,520
extract it from – if you have the function, you can use some command to extract this docstring.

484
00:52:27,520 --> 00:52:36,760
You can use this to build and automatically create API documentation. This is kind of

485
00:52:36,760 --> 00:52:43,720
In each of these languages, this is a point about syntax.

486
00:52:43,720 --> 00:52:49,880
How do you write a doc string versus a comment?

487
00:52:49,880 --> 00:52:50,880
Is that clear?

488
00:52:50,880 --> 00:52:57,000
I think to myself, I don't sound clear.

489
00:52:57,000 --> 00:53:05,040
Maybe I can also add, when it comes to comments, it's mainly meant for the user and the programming

490
00:53:05,040 --> 00:53:12,720
language, the compiler or the interpreter usually skips it. And doc strings are like special comments

491
00:53:12,720 --> 00:53:20,160
which has some sort of standard attached to the programming language. So there is one way to write

492
00:53:20,160 --> 00:53:28,240
it. So it tends to be useful for the user, but there might be a tool which can understand it and

493
00:53:30,320 --> 00:53:34,720
process it in a way when you're writing in code documentation.

494
00:53:35,040 --> 00:53:47,840
Yeah, so something like Doxygen or Sphinx or some other automated thing can pick up

495
00:53:47,840 --> 00:53:54,720
this doc string and build a website that displays all the functions and all of the doc strings

496
00:53:54,720 --> 00:54:02,440
for those functions, whereas the first example is a comment and, well, it doesn't have the

497
00:54:02,440 --> 00:54:05,080
the same structure, it cannot be used in the same way.

498
00:54:07,880 --> 00:54:09,920
So for example, in Julia,

499
00:54:09,920 --> 00:54:14,120
you would write a long multi-line comment

500
00:54:14,120 --> 00:54:16,240
in Markdown format,

501
00:54:16,240 --> 00:54:19,580
and that is understood by the Julia's Markdown library.

502
00:54:20,560 --> 00:54:23,040
Whereas let's say in Python,

503
00:54:23,040 --> 00:54:28,040
there are certain formats of writing the doc strings,

504
00:54:28,320 --> 00:54:30,480
and you'll have headings, which for example,

505
00:54:30,480 --> 00:54:35,080
say, parameters, which refers to the input,

506
00:54:35,080 --> 00:54:40,200
and the returns block, which tells you what the output is.

507
00:54:40,200 --> 00:54:46,160
So there are some standards which dictate this.

508
00:54:46,160 --> 00:54:51,440
And when it comes to Fortran and C++,

509
00:54:51,440 --> 00:54:54,680
it has some things which has, there

510
00:54:54,680 --> 00:55:00,600
are some special keywords, which are specific to Doxygen,

511
00:55:00,600 --> 00:55:03,960
which is widely used for documenting such code,

512
00:55:03,960 --> 00:55:06,440
Fortran and C++ codes.

513
00:55:06,440 --> 00:55:08,040
OK.

514
00:55:08,040 --> 00:55:11,960
I've been babbling on, and we are a bit behind schedule.

515
00:55:11,960 --> 00:55:16,200
We should go get to the Read Me section

516
00:55:16,200 --> 00:55:18,040
and then talk a bit about Markdown

517
00:55:18,040 --> 00:55:22,120
before we get to Sphinx, maybe after the break.

518
00:55:22,120 --> 00:55:24,160
But there is a good question.

519
00:55:24,160 --> 00:55:28,000
Did you write the docstring entirely yourself?

520
00:55:28,000 --> 00:55:30,360
I don't know, of course, who wrote this example,

521
00:55:30,360 --> 00:55:38,240
but when I write code, I have an extension to my editor

522
00:55:38,240 --> 00:55:44,960
that actually fills in a template almost entirely.

523
00:55:44,960 --> 00:55:48,840
So it takes in the parameters and adds in.

524
00:55:48,840 --> 00:55:51,640
So here, for example, in the Python docstring,

525
00:55:54,880 --> 00:56:07,760
there is the temperature that's defined as a float. You could use a tool to extract that

526
00:56:07,760 --> 00:56:16,000
information and write everything except this actual comment line. The temperature in Fahrenheit

527
00:56:16,000 --> 00:56:22,640
is this. Something you would write yourself. There are tools that take care of the syntax.

528
00:56:25,040 --> 00:56:27,040
That is true.

529
00:56:27,040 --> 00:56:29,520
But at the very least, like a single sentence

530
00:56:29,520 --> 00:56:31,400
is also a valid docstring.

531
00:56:31,400 --> 00:56:32,400
So sometimes.

532
00:56:32,400 --> 00:56:33,320
Yeah, yeah, true.

533
00:56:33,320 --> 00:56:36,280
You don't have to list all the parameters, the return values.

534
00:56:39,920 --> 00:56:41,320
OK, so readme files.

535
00:56:44,200 --> 00:56:47,480
Oh, so yeah, OK, so in the readme files section,

536
00:56:47,480 --> 00:56:49,240
we don't really talk much about syntax.

537
00:56:49,240 --> 00:56:51,640
And we have talked about what you need in documentation.

538
00:56:51,640 --> 00:57:01,320
So this is mostly an exercise or a discussion.

539
00:57:01,320 --> 00:57:07,200
So let's quickly think, which one of these do we do?

540
00:57:07,200 --> 00:57:14,600
We probably don't have time for that, multiple.

541
00:57:14,600 --> 00:57:15,600
There is one.

542
00:57:15,600 --> 00:57:19,960
So the first one would be a pure demonstration.

543
00:57:19,960 --> 00:57:22,840
We have had some discussions.

544
00:57:22,840 --> 00:57:24,440
Okay, let's just do the first one

545
00:57:24,440 --> 00:57:27,600
because the other ones would require people

546
00:57:27,600 --> 00:57:29,760
to pick up their own readme files

547
00:57:29,760 --> 00:57:33,840
and then have a discussion probably in the notes,

548
00:57:33,840 --> 00:57:34,680
but with someone.

549
00:57:37,320 --> 00:57:42,320
Okay, so this is some more markdown syntax essentially,

550
00:57:45,040 --> 00:57:48,600
something that you can do in readme files

551
00:57:48,600 --> 00:58:00,840
most environments. Do you have a GitHub account logged in where you can easily create a new

552
00:58:00,840 --> 00:58:12,840
repository or just a readme file that you can show or make edits? I guess it's probably best

553
00:58:12,840 --> 00:58:14,880
just to create a new repository quickly.

554
00:58:21,880 --> 00:58:26,880
So let's say readme demo, and it's me.

555
00:58:35,960 --> 00:58:40,960
And I create one empty readme.

556
00:58:40,960 --> 00:58:41,960
Okay.

557
00:58:41,960 --> 00:58:54,560
And then we edit the readme file.

558
00:58:54,560 --> 00:59:00,880
So there are a couple of effects in the notes.

559
00:59:00,880 --> 00:59:05,520
So let's take a look.

560
00:59:05,520 --> 00:59:18,400
So there is a note, which highlights information, I think not especially strongly, I think it's

561
00:59:18,400 --> 00:59:19,400
a blue box.

562
00:59:19,400 --> 00:59:22,400
Oh, preview probably works for that.

563
00:59:22,400 --> 00:59:23,400
Yeah.

564
00:59:23,400 --> 00:59:26,400
It's a blue box.

565
00:59:26,400 --> 00:59:32,520
Then if you do essentially the same, but write important instead of note, it will be a different

566
00:59:32,520 --> 00:59:38,440
color slightly more visible and warning I think is then red I think important is maybe yellow

567
00:59:39,400 --> 00:59:46,040
oh it's okay um and then yeah then there's import a warning which is yellow

568
00:59:47,400 --> 00:59:54,520
uh sorry warning which is red so this is something like this is meant to draw people's attention of

569
00:59:54,520 --> 01:00:07,720
course. Okay, then let's try these description tags. So this is details and then summary.

570
01:00:11,720 --> 01:00:15,560
So details here, these are like, if you know HTML,

571
01:00:16,520 --> 01:00:20,680
the section goes from the details tag to this end of slash details.

572
01:00:20,680 --> 01:00:30,080
But it contains a summary section.

573
01:00:30,080 --> 01:00:34,000
So details, I guess the idea is that you don't necessarily need to read this part.

574
01:00:34,000 --> 01:00:37,280
This is like extra details.

575
01:00:37,280 --> 01:00:43,040
So it's not showing it by default.

576
01:00:43,040 --> 01:00:46,840
And then when you click on it, you'll see.

577
01:00:46,840 --> 01:00:55,120
So it could be like read more to find out kind of section, yes.

578
01:00:55,120 --> 01:01:01,840
And then there are also batches that you will see in a lot of projects.

579
01:01:01,840 --> 01:01:05,840
So let's just try one.

580
01:01:05,840 --> 01:01:11,920
So the idea here is that a batch is an image you get from some website.

581
01:01:11,920 --> 01:01:16,640
They would usually be at the top, but they show something about the current state of

582
01:01:16,640 --> 01:01:28,680
the project. Actually, when you load the page, it will check a website, and that website

583
01:01:28,680 --> 01:01:35,960
will return this image. It could, for example, depend on whether your tests have passed.

584
01:01:35,960 --> 01:01:46,440
It might show that tests are currently failing.

585
01:01:46,440 --> 01:01:49,440
and can add also hyperlinks to the bench.

586
01:01:49,440 --> 01:01:49,920
Yeah.

587
01:01:49,920 --> 01:01:50,840
Or, yeah.

588
01:01:56,280 --> 01:01:59,360
Right, so the first one, the example,

589
01:01:59,360 --> 01:02:02,160
I think you copied is with a link.

590
01:02:02,160 --> 01:02:03,640
It's with a link, yeah.

591
01:02:03,640 --> 01:02:07,120
Yes, so it has, in parentheses at the end,

592
01:02:07,120 --> 01:02:10,960
it has a link that goes to example.org.

593
01:02:10,960 --> 01:02:13,840
And you can also do the same without a link.

594
01:02:13,840 --> 01:02:15,840
Yes.

595
01:02:15,840 --> 01:02:18,040
Yeah, it looked the same, but then, yeah.

596
01:02:20,440 --> 01:02:22,240
Yes, so those are some tricks

597
01:02:24,640 --> 01:02:25,540
that you can do.

598
01:02:26,340 --> 01:02:29,040
Does anybody know any more good tips and tricks on

599
01:02:30,040 --> 01:02:33,140
or readme files on different systems or different

600
01:02:34,440 --> 01:02:36,140
different repository websites?

601
01:02:39,240 --> 01:02:42,640
Okay, let's do one more at the very bottom of the page.

602
01:02:42,740 --> 01:02:45,340
There's the table of contents.

603
01:02:45,840 --> 01:02:54,600
Oh, oh, sorry. So you're on GitHub. GitHub actually automatically creates a table of

604
01:02:54,600 --> 01:03:04,120
contents for README.md files. You just need to add some sections and then it will have

605
01:03:04,120 --> 01:03:06,160
a table of contents.

606
01:03:06,160 --> 01:03:12,800
Let's try something like installation and then

607
01:03:12,800 --> 01:03:16,000
contribute.

608
01:03:16,000 --> 01:03:24,600
Contributing license, something here.

609
01:03:24,600 --> 01:03:28,440
MIT license, let's say.

610
01:03:28,440 --> 01:03:29,640
Does it show up here?

611
01:03:29,640 --> 01:03:30,520
I don't know.

612
01:03:30,520 --> 01:03:33,960
Maybe we need to commit this.

613
01:03:33,960 --> 01:03:37,400
Yeah, I think you need to commit, and then

614
01:03:37,400 --> 01:03:38,920
to the preview, it doesn't actually

615
01:03:38,920 --> 01:03:40,240
generate the table of contents.

616
01:03:46,080 --> 01:03:48,320
Unsafe changes?

617
01:03:48,320 --> 01:03:48,960
That's strange.

618
01:03:52,120 --> 01:03:53,040
Because in the preview.

619
01:03:55,920 --> 01:03:57,400
OK.

620
01:03:57,400 --> 01:04:00,480
That was probably a previous commit, then, or?

621
01:04:00,480 --> 01:04:02,080
No, this is a new.

622
01:04:02,080 --> 01:04:03,200
OK.

623
01:04:03,200 --> 01:04:08,200
maybe copy everything and go back to the, so that's weird.

624
01:04:08,720 --> 01:04:11,960
Yeah, maybe it's, yeah, okay.

625
01:04:11,960 --> 01:04:14,080
Oh, okay, yeah, you did save.

626
01:04:14,080 --> 01:04:14,920
It did save.

627
01:04:18,040 --> 01:04:21,600
But yeah, this is the library.

628
01:04:21,600 --> 01:04:23,120
Yeah, good.

629
01:04:23,120 --> 01:04:23,960
Okay.

630
01:04:26,960 --> 01:04:31,960
Okay, now we could do the break now

631
01:04:31,960 --> 01:04:34,960
now and then go on to Sphinx.

632
01:04:34,960 --> 01:04:35,460
Yeah.

633
01:04:39,960 --> 01:04:42,180
Could you explain why one wants to use patches?

634
01:04:45,560 --> 01:04:50,600
So yeah, it's mainly, so if you would want to, for example,

635
01:04:50,600 --> 01:04:58,240
show on, have in your read me just a section that says,

636
01:04:58,240 --> 01:04:59,800
all the tests currently pass.

637
01:04:59,800 --> 01:05:02,800
so this version of the program works.

638
01:05:09,320 --> 01:05:14,320
So you could do it as just something that checks a website

639
01:05:17,560 --> 01:05:19,800
that returns whether tests have passed or not.

640
01:05:20,860 --> 01:05:22,640
And that's essentially what we're doing here,

641
01:05:22,640 --> 01:05:26,920
but what it returns is an image instead of a piece of text.

642
01:05:26,920 --> 01:05:33,880
So, when you go to a project, the batches will tell you that this version that's currently in

643
01:05:33,880 --> 01:05:41,640
this master branch, that should work, for example. It can also have other information,

644
01:05:41,640 --> 01:05:52,120
like the digital object identifier. So, it's a link to a Zenodo, for example,

645
01:05:52,120 --> 01:05:57,160
a link to some place that actually stores the object

646
01:05:57,160 --> 01:05:57,880
identifier.

647
01:06:02,000 --> 01:06:08,840
So that DOI is essentially for citing your code,

648
01:06:08,840 --> 01:06:11,760
citing your work.

649
01:06:11,760 --> 01:06:17,560
Another thing is to show the most stable latest

650
01:06:17,560 --> 01:06:20,760
version of the code, which is uploaded in some index

651
01:06:20,760 --> 01:06:28,080
like PyPI, for example, so that you know which

652
01:06:28,080 --> 01:06:29,200
is the current version.

653
01:06:29,200 --> 01:06:32,760
And because often the code on the GitHub

654
01:06:32,760 --> 01:06:34,960
would be a development version.

655
01:06:38,440 --> 01:06:42,640
So we are going to static site generators,

656
01:06:42,640 --> 01:06:45,440
I think, after the break.

657
01:06:45,440 --> 01:06:50,840
But since the section title is writing good README files,

658
01:06:50,840 --> 01:06:56,400
maybe we can go back just mentally for a moment

659
01:06:56,400 --> 01:06:59,600
in your mind, go back to the beginning of this hour.

660
01:06:59,600 --> 01:07:04,120
And we talked about what we would

661
01:07:04,120 --> 01:07:07,080
want to see in good documentation, so

662
01:07:07,080 --> 01:07:09,560
the wish list.

663
01:07:09,560 --> 01:07:11,920
So essentially, if all you have is a README file

664
01:07:11,920 --> 01:07:15,400
and in code documentation, then a good README file

665
01:07:15,400 --> 01:07:21,400
is short, but it includes all of those sections.

666
01:07:21,400 --> 01:07:25,840
It includes a summary of what the code is,

667
01:07:25,840 --> 01:07:29,240
like a top level headline summary

668
01:07:29,240 --> 01:07:30,880
at the very top of the readme file.

669
01:07:30,880 --> 01:07:35,880
This project is for x, and then it

670
01:07:35,880 --> 01:07:41,840
has steps of how to use it, how to reproduce some.

671
01:07:41,840 --> 01:07:43,160
So a tutorial.

672
01:07:43,160 --> 01:07:44,520
This is how you install it.

673
01:07:44,520 --> 01:07:52,280
this is how you run it to reproduce the results in my paper or if it's research software then

674
01:07:52,280 --> 01:08:00,200
probably reproduce my paper is the first thing or a simpler example but something that gets

675
01:08:00,200 --> 01:08:09,080
people running the code and shows them how to use it and then some more detailed description of

676
01:08:09,080 --> 01:08:13,680
of how the whole thing works,

677
01:08:14,640 --> 01:08:17,160
however much detail you want to have there.

678
01:08:17,160 --> 01:08:19,360
And the rest would be in code documentation.

679
01:08:21,620 --> 01:08:24,200
I think that would be a good readme file.

680
01:08:24,200 --> 01:08:25,880
I mean, of course, all of this,

681
01:08:27,840 --> 01:08:31,120
giving the information visually makes it nicer,

682
01:08:31,120 --> 01:08:32,020
makes it quicker.

683
01:08:33,360 --> 01:08:34,960
But as long as the information is there,

684
01:08:34,960 --> 01:08:36,560
that's the most important thing.

685
01:08:36,560 --> 01:08:42,560
Do you have anything to add before we go on break?

686
01:08:42,560 --> 01:08:45,560
No, that sounds good.

687
01:08:45,560 --> 01:08:56,560
Okay, so after the break we'll come back to static site generators and especially Sphinx.

688
01:08:56,560 --> 01:09:05,840
Sphinx, so we will essentially be writing an example documentation website using Sphinx.

689
01:09:07,280 --> 01:09:15,680
So, let's see after the break. Let's do, well, 10 minutes, but it's 57, so let's just do 11.10.

690
01:09:15,680 --> 01:09:26,280
10, is that? That makes sense. So, yeah, see you back at 11.10 or whatever your time zone

691
01:09:26,280 --> 01:09:32,880
is, 10 past the hour. Bye.

692
01:09:45,680 --> 01:09:47,740
you

693
01:10:15,680 --> 01:10:17,740
you

694
01:10:45,680 --> 01:10:47,740
you

695
01:11:15,680 --> 01:11:17,740
you

696
01:11:45,680 --> 01:11:47,740
you

697
01:12:15,680 --> 01:12:17,740
you

698
01:12:45,680 --> 01:12:47,740
you

699
01:13:15,680 --> 01:13:17,740
you

700
01:13:45,680 --> 01:13:47,740
you

701
01:14:15,680 --> 01:14:17,740
you

702
01:14:45,680 --> 01:14:47,740
you

703
01:15:15,680 --> 01:15:17,740
you

704
01:15:45,680 --> 01:15:47,740
you

705
01:16:15,680 --> 01:16:17,740
you

706
01:16:45,680 --> 01:16:47,740
you

707
01:17:15,680 --> 01:17:17,740
you

708
01:17:45,680 --> 01:17:47,740
you

709
01:18:15,680 --> 01:18:17,740
you

710
01:18:45,680 --> 01:18:47,740
you

711
01:19:15,680 --> 01:19:17,740
you

712
01:19:45,680 --> 01:19:47,740
you

713
01:20:15,680 --> 01:20:17,740
you

714
01:20:45,680 --> 01:20:47,740
you

715
01:21:15,680 --> 01:21:17,740
you

716
01:21:45,680 --> 01:21:47,740
you

717
01:22:15,680 --> 01:22:17,740
you

718
01:22:45,680 --> 01:22:47,740
you

719
01:23:15,680 --> 01:23:30,360
Okay, hello, welcome back.

720
01:23:30,360 --> 01:23:37,640
So now we're going to static site generators and specifically a Sphinx example.

721
01:23:37,640 --> 01:23:42,840
Oops, I did not scroll back up.

722
01:23:42,840 --> 01:23:45,660
Okay, Sphinx and Markdown.

723
01:23:45,660 --> 01:23:52,620
you can in the how to document your research software you can find this in the sidebar and

724
01:23:53,820 --> 01:24:02,700
okay so let's go so yeah so the idea of this is mainly a demonstration it will be a relatively

725
01:24:02,700 --> 01:24:10,380
long demonstration and the idea is to understand what these static site generators are what they

726
01:24:10,380 --> 01:24:18,220
do and know how to build a documentation website with these text files that you can then

727
01:24:22,540 --> 01:24:30,380
version control. And along the way, we'll create an example of Swing documentation using Markdown.

728
01:24:31,820 --> 01:24:36,380
So, I'm going to assume that you're just watching essentially the demonstration,

729
01:24:36,380 --> 01:24:47,660
but you can also try it yourself and I mean if it's hard to keep up then I would maybe recommend

730
01:24:48,300 --> 01:24:53,660
watching first. Of course the video is also available later but the

731
01:24:53,660 --> 01:24:59,420
notes and the questions are available now. Okay, so let's get into it.

732
01:24:59,420 --> 01:25:12,220
it. So before we start, I will actually move this notes window out of the way to show a

733
01:25:12,220 --> 01:25:22,900
terminal window. Actually resize it a little bit. There we go. And there's some unnecessary

734
01:25:22,900 --> 01:25:30,020
test here that I was doing previously, so let's get rid of that. Okay,

735
01:25:30,180 --> 01:25:36,660
rid of that as well. Okay, so the first thing we do is conda

736
01:25:36,660 --> 01:25:42,420
activate code refinery. This is the environment you may have installed

737
01:25:42,420 --> 01:25:47,140
following the installation instructions for week two.

738
01:25:47,140 --> 01:25:50,580
Okay, so now we have the code refinery environment active.

739
01:25:50,580 --> 01:25:56,580
we'll check the python version this is essentially checking we have python 3.12 is the latest

740
01:25:56,580 --> 01:26:06,260
version and then let's check that we have sphinx build oops build okay and check the version so we

741
01:26:06,260 --> 01:26:14,900
have sphinx build and the so the the notes the lecture materials have relatively older versions

742
01:26:14,900 --> 01:26:20,340
but I think everything should work. We'll figure it out as we go if something

743
01:26:20,340 --> 01:26:23,780
fails. So there should also be a Sphinx quick start.

744
01:26:27,060 --> 01:26:34,580
And yes, it exists. Okay. Finally, we are going to use mist parser.

745
01:26:36,580 --> 01:26:42,340
So what I'm doing here is I'm running some Python code that I write in the terminal. That's Python

746
01:26:42,340 --> 01:26:50,740
minus c and then I'm going to import mistparser. So this checks that the library is there.

747
01:26:51,380 --> 01:26:56,980
If you import something and it doesn't print anything like it didn't, then the library is

748
01:26:56,980 --> 01:27:05,460
there. Okay, so we have everything we need for the demonstration. Now I'm in an empty folder.

749
01:27:05,460 --> 01:27:16,580
It's my CodeRefinery folder, so I'll create a new folder called doc.example, documentation.example,

750
01:27:16,580 --> 01:27:21,580
and go into it, and then run Sphinx Quickstart.

751
01:27:21,580 --> 01:27:25,060
And it will ask me a bunch of questions.

752
01:27:25,060 --> 01:27:29,740
So the first thing, do I want separate source and build directories within the root path?

753
01:27:29,740 --> 01:27:31,740
I will say no.

754
01:27:37,740 --> 01:27:39,580
So it's asking for a project name.

755
01:27:42,140 --> 01:27:45,340
Let's just call it test. I'm not being, I'm not feeling creative right now.

756
01:27:47,100 --> 01:27:55,660
Author's name. That's my name. Project release. So which version of the project is this?

757
01:27:55,660 --> 01:28:02,860
This is 0.1. This is the first one. And project language. Let's keep English as the default

758
01:28:02,860 --> 01:28:12,940
option. Okay. Now it has created a bunch of files. Let's see. There is a underscore build directory.

759
01:28:15,100 --> 01:28:21,740
Underscore often in Python means that you ignore it. You don't print it and

760
01:28:21,740 --> 01:28:29,740
well, you ignore it in a lot of contexts. So, it's something that Python will often not look at.

761
01:28:30,860 --> 01:28:37,020
Same goes for templates and static. Sorry. Okay.

762
01:28:39,980 --> 01:28:47,420
So, I think the most important ones at first are index. This is the main page of your website.

763
01:28:47,420 --> 01:28:58,260
I keep mixing that up, it's in the restructured text format, RST.

764
01:28:58,260 --> 01:29:03,260
So we'll see a little bit of that, but mainly we'll be working with Markdown.

765
01:29:03,260 --> 01:29:08,260
Then there is this conf.py that includes the configuration for the documentation website

766
01:29:08,260 --> 01:29:11,260
and for the building process.

767
01:29:11,260 --> 01:29:15,220
Build is where the actual website will go when you build it.

768
01:29:15,220 --> 01:29:25,520
MIG contains files, images, static files that you don't build every time and that are essentially

769
01:29:25,520 --> 01:29:27,120
served with the website.

770
01:29:27,120 --> 01:29:33,000
If you have done web development, then this is very familiar, but images go there mostly,

771
01:29:33,000 --> 01:29:34,240
some other files.

772
01:29:34,240 --> 01:29:40,320
Templates, you might want to create your own templates for these HTML files, but we probably

773
01:29:40,320 --> 01:29:44,240
will not go to that here.

774
01:29:44,240 --> 01:29:49,920
file is the instructions to actually build the website, which you can essentially just invoke

775
01:29:51,360 --> 01:29:58,000
or make.bat for Windows. Okay, so the main things though that we will be looking at are

776
01:29:58,000 --> 01:30:05,680
index.rst and conv.py. Okay, so let's take a look at index.rst first.

777
01:30:14,240 --> 01:30:26,800
a second. Okay. So what do we see here? Do you see the whole page? This D, does it cut

778
01:30:26,800 --> 01:30:40,280
away? Okay, good. It's cut away a little bit, but not by much. So, yeah. So this contains

779
01:30:40,280 --> 01:30:47,240
a table of contents or defines a table of contents and then it defines some indices

780
01:30:47,240 --> 01:30:54,200
and tables that are a default there. We will not use the indices and tables section.

781
01:30:56,920 --> 01:30:58,280
So let's remove that one.

782
01:31:03,320 --> 01:31:06,680
Then these top four lines here starting with two dots that's a comment.

783
01:31:06,680 --> 01:31:15,720
Sorry, restructured text has this interesting syntax where dot dot means a command, but

784
01:31:15,720 --> 01:31:22,440
then if it doesn't start with or doesn't have this format of a comment with these double

785
01:31:22,440 --> 01:31:30,680
colons at the end, then it's a comment. So this is a comment. And then this section is

786
01:31:30,680 --> 01:31:40,040
title and this is a special pre-structured text command that generates the table of contents.

787
01:31:41,240 --> 01:31:46,040
Okay, so one more change that we will make is

788
01:31:48,440 --> 01:31:58,120
add a section to the table of contents called somefeature.md. So this is a file name

789
01:31:58,120 --> 01:32:00,920
And we don't currently have this file. We'll need to create it in a moment.

790
01:32:04,600 --> 01:32:08,680
It needs to be on the same level as this caption section. Okay, it seems to be.

791
01:32:10,600 --> 01:32:18,920
Okay, let's save this and go back to the command line. And in order to use markdown, we will need

792
01:32:18,920 --> 01:32:27,560
to use this missed parser that we checked that it exists. So let's go to conf.py and make sure

793
01:32:27,560 --> 01:32:36,600
sure that we're using that. This has essentially the information that we added in the

794
01:32:36,600 --> 01:32:41,640
in the auto generation when it was asking questions. And here we have extensions. So

795
01:32:41,640 --> 01:32:47,720
MistParser is an extension that allows us to use markdown files. So we will add it here.

796
01:32:47,720 --> 01:33:02,000
Okay, so here we use MistParser and I think that's the only change we need to make to

797
01:33:02,000 --> 01:33:19,200
the configuration, so let's go back and then we can create this sumfeature.md and add some

798
01:33:19,200 --> 01:33:21,600
contents to it.

799
01:33:21,600 --> 01:33:31,160
So the title, this will also be the title in the table of contents, so it will actually

800
01:33:31,160 --> 01:33:35,760
get it from the file itself and not just the file name or the title will not just be the

801
01:33:35,760 --> 01:34:00,000
file name. There can be subsections.

802
01:34:00,000 --> 01:34:05,320
So we document some useful and exciting functionality.

803
01:34:12,800 --> 01:34:14,800
Let's make a list.

804
01:34:19,680 --> 01:34:24,160
You do need the empty line here for the list to work.

805
01:34:24,160 --> 01:34:27,240
Item one, you can have nested items in lists.

806
01:34:30,000 --> 01:34:40,080
But then you do need the, I don't think you need an empty line here, but the example has

807
01:34:40,080 --> 01:34:41,080
some.

808
01:34:41,080 --> 01:34:46,360
So just to make sure, I will add it.

809
01:34:46,360 --> 01:34:51,360
So if you are currently typing in the notes or looking at the notes, that is also using

810
01:34:51,360 --> 01:34:52,360
Markdown.

811
01:34:52,360 --> 01:34:56,040
It has exactly the same syntax.

812
01:34:56,040 --> 01:34:57,680
This one is using this Mist parser.

813
01:34:57,680 --> 01:34:59,240
There's many flavors of Markdown.

814
01:34:59,240 --> 01:35:02,680
it has some special syntax for some special things,

815
01:35:02,680 --> 01:35:05,640
but mostly it has the same syntax.

816
01:35:05,640 --> 01:35:09,640
OK, so now I exited the file and saved it.

817
01:35:09,640 --> 01:35:13,000
And now we can build the site.

818
01:35:13,000 --> 01:35:16,720
So first, let's check what files we have.

819
01:35:16,720 --> 01:35:18,800
Just what we had before.

820
01:35:18,800 --> 01:35:22,880
Nothing in the folders, in the build folder.

821
01:35:22,880 --> 01:35:34,000
And then let's do Sphinx build dot and so dot is the current folder and that contains

822
01:35:34,000 --> 01:35:43,640
this index.rst and count.py and we will place the results in the underscore build folder.

823
01:35:43,640 --> 01:35:58,540
Okay. And again, let's look at, actually, nope. Okay. So, I was thinking I could make

824
01:35:58,540 --> 01:36:06,300
a list of all the, like a tree structure of what is in each of the subfolders, but it's

825
01:36:06,300 --> 01:36:20,220
only lists of all the names, so let's look directly at the build folder.

826
01:36:20,220 --> 01:36:35,020
We have some new files in the build folder, mainly index.html and then somefeature.html.

827
01:36:35,020 --> 01:36:43,980
are the pages we wrote and then there's some useful extra features that are included in this

828
01:36:43,980 --> 01:36:52,380
page. So okay, let's then go ahead and open this. It should open in this

829
01:36:52,940 --> 01:36:55,740
web browser when I type in the code. So let's see.

830
01:36:55,740 --> 01:37:09,820
So when I type in the command so xtg open and let's go to build and find index.html.

831
01:37:09,820 --> 01:37:19,580
Okay let's open that and here is the whole website. So it includes the sum feature in the table of

832
01:37:19,580 --> 01:37:27,020
contents and then it actually lists the subsection as well and if you click through here you will get

833
01:37:27,020 --> 01:37:33,740
you will see what we wrote it has the list and the main text so it's all there

834
01:37:37,340 --> 01:37:47,340
you can so it has used a default option for what it looks like for the theme of the website

835
01:37:47,340 --> 01:37:52,940
but there's multiple teams to choose from, some extensions that add additional themes.

836
01:37:52,940 --> 01:37:59,100
You can also build your own if you want to, although of course that's more work.

837
01:38:00,220 --> 01:38:05,180
Okay, so let's go back and continue.

838
01:38:11,500 --> 01:38:15,740
Okay, so actually we have finished the first section of the exercise.

839
01:38:17,340 --> 01:38:21,820
and we have one page in the documentation. So

840
01:38:21,820 --> 01:38:28,060
any comments, questions so far? Let's give some time for that

841
01:38:30,140 --> 01:38:33,740
and decide where we go next.

842
01:38:47,340 --> 01:38:55,220
Is there a specific document generator that's used for PyPy?

843
01:38:55,220 --> 01:39:01,620
I think PyPy just takes the README file, actually you need to tell it where the README file

844
01:39:01,620 --> 01:39:07,020
is, and then it renders it on the main page.

845
01:39:07,020 --> 01:39:18,300
So mostly you can add a link to your documentation, whichever way you generate it.

846
01:39:18,300 --> 01:39:24,100
So why do you want the Sphinx page rather than just a readme file, that's a good question.

847
01:39:24,100 --> 01:39:29,660
Mainly because then you can have multiple pages, if I show this again.

848
01:39:29,660 --> 01:39:34,100
So I could have a second feature here, and each of these has their own page.

849
01:39:34,100 --> 01:39:44,020
I only have one feature or one subpage here, but you can have a whole collection of pages

850
01:39:44,020 --> 01:39:49,300
explaining different parts of the software.

851
01:39:49,300 --> 01:39:58,460
So just a readme file is often enough, but if the readme file is way too long and it's

852
01:39:58,460 --> 01:40:08,940
hard to find the information you want, then you can use something to build a more extensive

853
01:40:08,940 --> 01:40:13,180
documentation with multiple pages that's easier to read and it's easier to find the stuff you're

854
01:40:13,180 --> 01:40:22,060
looking for. It does also have a search feature. So if I search here for feature go, I find the

855
01:40:22,060 --> 01:40:28,300
some feature page. I don't really have a lot of pages here so it's found the same

856
01:40:28,300 --> 01:40:36,260
page twice essentially. Someone also added that things can also do API

857
01:40:36,260 --> 01:40:41,540
reference so that's a good point. It's the in code documentation part which we

858
01:40:41,540 --> 01:40:48,140
talked about previously using doc strings to generate documentation. Yes, so

859
01:40:48,140 --> 01:40:53,980
So there's a section here with some more, essentially,

860
01:40:53,980 --> 01:40:59,460
markdown syntax and misspecific syntax.

861
01:40:59,460 --> 01:41:01,060
We could experiment with that.

862
01:41:01,060 --> 01:41:07,060
Or we could actually do the auto-documentation section next.

863
01:41:07,060 --> 01:41:09,340
That might be because people have talked about it.

864
01:41:09,340 --> 01:41:11,780
Maybe we should do that.

865
01:41:11,780 --> 01:41:16,220
And then we go to a different section.

866
01:41:16,220 --> 01:41:26,300
let's do that next. That seems like people are interested in it. Okay, because unfortunately,

867
01:41:26,300 --> 01:41:33,980
we don't have time to go through everything, but if you want to, you can do this Sphinx,

868
01:41:33,980 --> 01:41:42,060
adding more Sphinx content section to learn more about mist syntax and markdown syntax.

869
01:41:42,060 --> 01:41:49,420
so it's adding you can show this again just for a moment so in addition to lists and different

870
01:41:49,420 --> 01:41:58,460
levels of headings and so on or you can add images links to websites and code blocks

871
01:41:59,180 --> 01:42:02,620
so this is of course very useful when you're documenting code

872
01:42:05,660 --> 01:42:06,160
okay

873
01:42:06,160 --> 01:42:17,240
So, but now I will go through this Sphinx auto-documentation section.

874
01:42:17,240 --> 01:42:23,080
So in order to generate auto-documentation, the first thing we need is some Python code

875
01:42:23,080 --> 01:42:31,000
or some code that has in-code documentation.

876
01:42:31,000 --> 01:42:35,440
So let's create that first, and I'll just create it directly in this folder, which is

877
01:42:35,440 --> 01:42:40,160
usually not quite what you would have. You would usually have a separate documentation folder

878
01:42:42,720 --> 01:42:51,120
and a separate code folder but let's keep it simple for now. So we will call this multiply.py

879
01:42:54,400 --> 01:43:05,040
and it will contain a single function called multiply. It takes in a which is a float

880
01:43:06,320 --> 01:43:11,440
and b which is also float and it returns a float.

881
01:43:13,360 --> 01:43:18,800
Okay so this will add the docstring. First let's do the implementation

882
01:43:20,240 --> 01:43:24,080
which it will multiply these two functions so a return a times b.

883
01:43:25,600 --> 01:43:32,560
Okay and then the docstring. So this will be extensive for this function but this is

884
01:43:32,560 --> 01:43:43,600
an example. So, I want an extensive docstring that documents all the parameters and so on.

885
01:43:44,240 --> 01:43:48,160
Okay, so we multiply two numbers that tells you exactly what the function does.

886
01:43:49,840 --> 01:43:51,680
We have a parameter a

887
01:43:54,560 --> 01:43:58,080
which is the first number to multiply.

888
01:43:58,080 --> 01:44:04,400
we have another parameter B

889
01:44:10,560 --> 01:44:25,560
multiply okay and then it returns so return the product of A and B okay

890
01:44:26,280 --> 01:44:36,120
That's probably enough. So I save it and exit and then I will need to add a new file called

891
01:44:36,120 --> 01:44:44,040
api.md markdown file that will actually this will be the main page of the API reference.

892
01:44:47,640 --> 01:44:50,280
So let's give it a title API reference.

893
01:44:50,280 --> 01:45:08,400
then it will contain, oh, this is, yeah, so the module in the demonstration was called

894
01:45:08,400 --> 01:45:15,600
example, but I called it multiply. This doesn't matter. This is just the title of the section

895
01:45:15,600 --> 01:45:24,080
but I want it to be correct, so make it lowercase because it is the name of the module and the

896
01:45:24,080 --> 01:45:29,600
name of the module is lowercase.

897
01:45:29,600 --> 01:45:38,600
Then we add a command that will create this auto-documentation, so three ticks like that

898
01:45:38,600 --> 01:45:45,240
to start a a command section in this mist flavored markdown

899
01:45:47,240 --> 01:45:54,040
and we'll call it eval I mean the command is evaluate rst restructured text

900
01:45:56,120 --> 01:45:58,280
the reason for this is that

901
01:45:58,280 --> 01:46:13,760
that there is an auto-module extension to Sphinx, an auto-documentation extension, that

902
01:46:13,760 --> 01:46:21,040
will actually generate this API documentation, but it needs to be invoked in restructured

903
01:46:21,040 --> 01:46:22,040
text.

904
01:46:22,040 --> 01:46:28,960
But as far as I know, there's still no way of directly invoking it from Markdown.

905
01:46:28,960 --> 01:46:35,480
So let's write some restructured text here, auto module.

906
01:46:35,480 --> 01:46:37,800
And the name of the module was multiply.

907
01:46:37,800 --> 01:46:38,800
Okay.

908
01:46:38,800 --> 01:46:42,640
So now it's looking for a Python module called multiply.

909
01:46:42,640 --> 01:46:49,440
And then I will tell it to document all the members of this function or of this module.

910
01:46:49,440 --> 01:46:50,440
Okay.

911
01:46:50,440 --> 01:46:53,440
It's called multiply with a Y.

912
01:46:53,440 --> 01:46:55,440
Oh, yes, it is.

913
01:46:55,440 --> 01:46:56,440
Yeah.

914
01:46:56,440 --> 01:46:58,440
So that would have caused an error.

915
01:46:58,440 --> 01:46:59,440
Okay.

916
01:46:59,440 --> 01:47:02,440
And I guess I'll fix that one as well.

917
01:47:02,440 --> 01:47:03,440
Okay.

918
01:47:03,440 --> 01:47:06,440
It is called multiply with a Y here.

919
01:47:06,440 --> 01:47:07,440
Okay.

920
01:47:07,440 --> 01:47:11,440
Then we will need to add something to the configuration to

921
01:47:11,440 --> 01:47:12,440
conf.py.

922
01:47:12,440 --> 01:47:15,440
So we now have this missed parser extension here.

923
01:47:15,440 --> 01:47:19,440
We will also add Sphinx.

924
01:47:19,440 --> 01:47:24,440
It's spelled correctly, yes, .extextensions.autodoc.

925
01:47:26,220 --> 01:47:28,900
So this is included in Sphinx,

926
01:47:28,900 --> 01:47:33,360
but it is not automatically included in the project.

927
01:47:33,360 --> 01:47:38,360
So you need to add it to the configuration here.

928
01:47:38,900 --> 01:47:40,380
Another thing we'll need to do

929
01:47:42,180 --> 01:47:46,860
is a trick to get it to look into this current directory,

930
01:47:46,860 --> 01:47:49,720
because we added the module in the current directory.

931
01:47:49,720 --> 01:47:52,480
So we will add it to the Python path.

932
01:47:52,480 --> 01:47:54,080
I guess we need to import.

933
01:47:57,800 --> 01:48:00,800
Import OS and system.

934
01:48:00,800 --> 01:48:04,880
And then add it to path, insert.

935
01:48:12,080 --> 01:48:14,180
So this gets the current path.

936
01:48:16,860 --> 01:48:21,380
and then adds it to where item looks for modules.

937
01:48:29,060 --> 01:48:33,860
Finally, we'll go to index.rst,

938
01:48:33,860 --> 01:48:39,020
and we have some feature that markdown here in the table of contents,

939
01:48:39,020 --> 01:48:44,260
we will add this API.md, API documentation.

940
01:48:46,860 --> 01:48:57,100
So that's all. Now I need to run sphinx build current folder and the results go to build folder.

941
01:49:00,860 --> 01:49:06,380
And the changes should be visible here. So I need to reload the page probably.

942
01:49:06,380 --> 01:49:08,220
Oh I need to go to the main page. Okay.

943
01:49:12,380 --> 01:49:13,180
What went wrong?

944
01:49:13,180 --> 01:49:24,140
any ideas? I think we are showing the search feature but you can try to open it again.

945
01:49:24,140 --> 01:49:31,500
Oh, I was looking at the search page. Yes, okay. So this is the main page, sorry. So yeah,

946
01:49:31,500 --> 01:49:39,020
so now it has the API reference section and that section contains this multiply module.

947
01:49:39,020 --> 01:49:47,500
so let's go there this shows the multiply module and the multiply module contains a multiply

948
01:49:47,500 --> 01:49:56,700
function and it has a much more nicely structured view of this of the text that I wrote these

949
01:49:56,700 --> 01:50:05,500
parameters and return value okay and you can from this link you can go directly to the multiply

950
01:50:05,500 --> 01:50:12,940
module although I think we are there already oh no sorry this copies a link that um highlights

951
01:50:12,940 --> 01:50:23,900
this section okay yes okay so now sorry there is also a comment on the notes that someone

952
01:50:23,900 --> 01:50:30,460
pointed out that there is a mismarkdown equivalent of writing the same okay so maybe yeah maybe

953
01:50:30,460 --> 01:50:40,540
there yeah maybe let's test that so in the api.markdown instead of evaluating rst here we can do

954
01:50:48,860 --> 01:50:51,340
so this is a section

955
01:50:51,340 --> 01:51:00,340
call author module and then we have multiply here and members.

956
01:51:00,340 --> 01:51:01,340
Okay, let's see.

957
01:51:01,340 --> 01:51:03,340
One thing should be intended.

958
01:51:03,340 --> 01:51:04,340
Sorry?

959
01:51:04,340 --> 01:51:06,340
Should not be intended.

960
01:51:06,340 --> 01:51:07,340
Yeah.

961
01:51:07,340 --> 01:51:09,340
And then there was.

962
01:51:12,340 --> 01:51:14,340
Yeah, that looks good.

963
01:51:14,340 --> 01:51:15,340
We can try that.

964
01:51:15,340 --> 01:51:22,340
Okay, let's reload the page.

965
01:51:22,340 --> 01:51:23,340
Seems to work.

966
01:51:23,340 --> 01:51:28,340
Okay, good.

967
01:51:28,340 --> 01:51:30,340
Okay, that was actually good to know.

968
01:51:30,340 --> 01:51:36,340
I guess we'll update the website with that.

969
01:51:36,340 --> 01:51:42,340
Now let's go to a related but somewhat different topic.

970
01:51:42,340 --> 01:51:58,740
topic. GitHub pages and how to get your documentation easily visible to everyone so that they don't

971
01:51:58,740 --> 01:52:03,460
have to get your code and use things to build it and then look at the website, but rather

972
01:52:03,460 --> 01:52:09,540
that they can just go to a single website and take a look at the documentation.

973
01:52:13,300 --> 01:52:20,660
Okay, so we've been using GitHub for a few things so far, so we'll use GitHub here, but you can also

974
01:52:20,660 --> 01:52:29,060
of course do this, basically the same thing or very similar things on almost all of these,

975
01:52:29,060 --> 01:52:33,300
at least all of these popular repository websites.

976
01:52:35,860 --> 01:52:42,500
Okay so let's just go into it so that we have about 10 minutes to do this that should be

977
01:52:42,500 --> 01:52:52,980
enough. I'm sorry not quite showing the whole because I want to also show where I'm going to

978
01:52:52,980 --> 01:53:02,180
to the GitHub website. Okay, so there is this documentation example project template which

979
01:53:02,180 --> 01:53:11,300
I'm opening here and this will create essentially a copy of this documentation template repository

980
01:53:11,300 --> 01:53:20,340
but it will be my repository. I will call it doc example. Okay, and make it public and that's all.

981
01:53:20,340 --> 01:53:23,780
So let's see what's included here.

982
01:53:29,380 --> 01:53:38,340
Okay, so here we have a license, a README file, we have some example Python code.

983
01:53:38,900 --> 01:53:42,020
No, actually we don't. We just have a README file on this page as well.

984
01:53:43,540 --> 01:53:45,540
Here could be some source code for your project.

985
01:53:45,540 --> 01:53:57,540
and then we have, in the documentation, we have some feature, another feature, and the configuration

986
01:53:57,540 --> 01:54:04,500
file. So we have everything we need to build the documentation locally, but we want to actually

987
01:54:04,500 --> 01:54:18,500
do it automatically on this github page. Okay, just a second because I haven't actually opened

988
01:54:18,500 --> 01:54:28,980
this on the side. Okay, now I have so then so the next step is okay browse to this repository and

989
01:54:28,980 --> 01:54:34,020
I showed you what the contents are so now to get this to happen automatically we need to do

990
01:54:34,500 --> 01:54:42,260
a couple of things. First is we need a recipe or essentially a program that GitHub follows to build

991
01:54:42,260 --> 01:54:53,060
the Sphinx website and that's called an action on GitHub. So we'll create a new file

992
01:54:56,100 --> 01:54:59,380
and it needs to be in .github

993
01:54:59,380 --> 01:55:19,700
and then we can give it whatever name, so documentation.yml, it needs to be a YAML file.

994
01:55:19,700 --> 01:55:36,380
And then I will mainly just copy the workflow file from the lecture notes to this file.

995
01:55:36,380 --> 01:55:45,880
So there are a couple of things that I will look at and possibly change, but mostly this

996
01:55:45,880 --> 01:55:55,960
is just copy paste so I essentially would never write this on my own I would just copy it from

997
01:55:55,960 --> 01:56:05,880
somewhere so the name obviously you want whatever the workflow name is you might want to change that

998
01:56:05,880 --> 01:56:12,280
this will run every time you push to the repository every time there's a new pull request and

999
01:56:12,280 --> 01:56:17,280
and also it can be, you can decide manually to rerun it.

1000
01:56:20,240 --> 01:56:21,960
And then well, there's some like system,

1001
01:56:21,960 --> 01:56:24,440
it runs on Ubuntu, it does some,

1002
01:56:24,440 --> 01:56:26,080
it checks out your repository,

1003
01:56:27,080 --> 01:56:29,560
installs Python, installs dependencies.

1004
01:56:29,560 --> 01:56:33,080
And here we see missed parser.

1005
01:56:33,080 --> 01:56:35,440
And we actually have a theme that we're using,

1006
01:56:35,440 --> 01:56:37,960
read-to-docs theme, which is nice.

1007
01:56:37,960 --> 01:56:39,960
It's a nice looking theme.

1008
01:56:39,960 --> 01:56:48,280
and of course swings and then we run build command and then there's an information on

1009
01:56:48,280 --> 01:56:56,520
how to actually deploy it how to get github to actually display it on the github pages

1010
01:56:57,960 --> 01:57:01,480
okay so we'll save this file commit changes

1011
01:57:07,880 --> 01:57:08,380
okay

1012
01:57:09,960 --> 01:57:19,080
So now I wonder if the workflow is actually running.

1013
01:57:19,080 --> 01:57:20,280
So I hit this actions here.

1014
01:57:20,280 --> 01:57:21,080
Yes.

1015
01:57:21,080 --> 01:57:24,000
So we made a new commit so it should run.

1016
01:57:24,000 --> 01:57:24,840
It is running.

1017
01:57:24,840 --> 01:57:25,760
Okay.

1018
01:57:25,760 --> 01:57:30,800
And you can get some more details from here.

1019
01:57:30,800 --> 01:57:34,120
So it is following a set of steps here.

1020
01:57:34,120 --> 01:57:35,840
It's actually done now.

1021
01:57:35,840 --> 01:57:41,240
Okay, let's do it in this order.

1022
01:57:41,240 --> 01:57:49,320
So what it has done is it has created a new branch called githubpages or ghpages and that

1023
01:57:49,320 --> 01:57:52,200
just contains the website.

1024
01:57:52,200 --> 01:57:58,000
So everything needed for the website is there and it will automatically update whenever

1025
01:57:58,000 --> 01:58:00,720
you push to the repository.

1026
01:58:00,720 --> 01:58:06,640
more important thing we need to actually turn github pages on so i went from here to settings

1027
01:58:06,640 --> 01:58:14,640
and then to pages deploy from a branch and then we select github pages here and save

1028
01:58:16,400 --> 01:58:20,400
okay and now it should work i think it has

1029
01:58:24,240 --> 01:58:27,200
somewhere here it usually tells you what the

1030
01:58:27,200 --> 01:58:39,760
URL to your website is. It is always the same so I know it off the top of my head but

1031
01:58:41,920 --> 01:58:43,360
of course you might not remember.

1032
01:58:46,000 --> 01:58:55,440
Oh well, I usually also add it here so there is this about section and it is actually

1033
01:58:55,440 --> 01:59:06,560
it is your username dot github dot io not com but io and then the repository name

1034
01:59:07,120 --> 01:59:13,760
doc example okay so it is always the same structure oh okay

1035
01:59:15,760 --> 01:59:23,200
use your github pages website is it's an option here so you can it it can automatically fill in

1036
01:59:23,200 --> 01:59:32,640
the URL. Okay. So slightly changed interface, but it is still at least as convenient as before.

1037
01:59:32,640 --> 01:59:36,960
Okay. So now I have the link here and I don't have to remember what exactly it is.

1038
01:59:38,720 --> 01:59:45,600
Okay. And it displays. So this is not exactly what we wrote locally because I copied it from

1039
01:59:45,600 --> 01:59:52,400
the template. If we had done exercise two instead of exercise four, then it would look like this.

1040
01:59:53,200 --> 01:59:55,580
So it has the documentation,

1041
01:59:55,580 --> 01:59:59,380
it has a nice sidebar here because we're using

1042
01:59:59,380 --> 02:00:04,380
the read-to-docs theme instead of the default theme,

1043
02:00:04,380 --> 02:00:07,660
and then it has the actual contents of the page here.

1044
02:00:07,660 --> 02:00:11,380
So this is what we wrote in the example.

1045
02:00:13,340 --> 02:00:16,580
So now it is online for everyone to see,

1046
02:00:16,580 --> 02:00:20,740
and this works as long as your repository is public.

1047
02:00:20,740 --> 02:00:22,380
If you have a private repository,

1048
02:00:22,380 --> 02:00:28,860
then I guess you probably wouldn't want it to be displayed here anyway, the documentation.

1049
02:00:29,500 --> 02:00:37,660
But then I don't think it's a free feature. But in any case, as long as it's public, this works.

1050
02:00:39,580 --> 02:00:44,140
And yeah, you can do the same thing on GitLab. The steps are different,

1051
02:00:44,140 --> 02:00:48,540
the interface is different, but the principle is the same.

1052
02:00:48,540 --> 02:00:57,980
I think we have a list here of alternatives. GitLab CI and GitLab Pages. Read-to-Docs is a

1053
02:00:57,980 --> 02:01:06,780
commonly used hosting alternative. This is separate from these repository websites so it will

1054
02:01:07,580 --> 02:01:11,100
need to have access to your repository. It needs to be able to clone it

1055
02:01:11,100 --> 02:01:13,020
and then it will build the documentation for you.

1056
02:01:13,020 --> 02:01:21,900
So, yeah, and you can, of course, build them manually or create your own workflow to build

1057
02:01:21,900 --> 02:01:25,020
them and host them anywhere.

1058
02:01:25,020 --> 02:01:26,660
Sorry.

1059
02:01:26,660 --> 02:01:37,340
Okay, so here's some steps for migrating to Sphinx if you already have some documentation

1060
02:01:37,340 --> 02:01:39,060
to migrate.

1061
02:01:39,060 --> 02:01:44,060
I think we should go to the wrap-up section,

1062
02:01:44,900 --> 02:01:45,740
to the summary.

1063
02:01:48,960 --> 02:01:51,260
Yeah, let's take a look at the notes quickly.

1064
02:01:52,380 --> 02:01:56,480
There's some questions that were answered, I think.

1065
02:01:57,860 --> 02:02:00,980
There are a couple of them.

1066
02:02:00,980 --> 02:02:03,060
Does Sphinx work with GitLab?

1067
02:02:03,060 --> 02:02:04,380
Of course it does.

1068
02:02:04,380 --> 02:02:08,340
So you can do the same approach using GitLab API.

1069
02:02:09,060 --> 02:02:18,280
GitHub CI is essentially the same as GitHub Actions and GitLab Pages is the same as GitHub

1070
02:02:18,280 --> 02:02:20,340
Pages essentially.

1071
02:02:20,340 --> 02:02:25,760
So you can do essentially the same thing.

1072
02:02:25,760 --> 02:02:31,700
And then there is this question, how do you connect or link the Sphinx documentation

1073
02:02:31,700 --> 02:02:34,920
you report to your repo on GitHub?

1074
02:02:34,920 --> 02:02:42,800
So I think there is a Sphinx setting somewhere in the conf.py, I can't collect it from the

1075
02:02:42,800 --> 02:02:50,040
top of my head, but it specifies where the repositories or where do you actually intend

1076
02:02:50,040 --> 02:02:51,040
to publish.

1077
02:02:51,040 --> 02:02:56,800
So then when you render it, it links to the source.

1078
02:02:56,800 --> 02:02:59,680
But this is very specific to the theme.

1079
02:02:59,680 --> 02:03:03,320
Am I right, [name]?

1080
02:03:03,320 --> 02:03:14,480
Yeah, so there is a setting, if you look at the config file, config.py, I think there's

1081
02:03:14,480 --> 02:03:18,200
a setting for the URL somewhere in here.

1082
02:03:18,200 --> 02:03:19,200
Oh, I guess not.

1083
02:03:19,200 --> 02:03:21,200
I guess you have to add it.

1084
02:03:21,200 --> 02:03:22,200
Okay.

1085
02:03:22,200 --> 02:03:29,040
Well, then I don't know off the top of my head how to do it exactly.

1086
02:03:29,040 --> 02:03:32,360
I wonder if that is what the question was about, though.

1087
02:03:32,360 --> 02:03:36,680
I guess the same, it's this edit button which comes up.

1088
02:03:36,680 --> 02:03:37,840
Yeah.

1089
02:03:37,840 --> 02:03:49,920
So one thing I did just show here is, so in one direction,

1090
02:03:49,920 --> 02:03:52,400
it's straightforward.

1091
02:03:52,400 --> 02:03:56,400
So it's straightforward to add the link from the GitHub

1092
02:03:56,400 --> 02:03:58,720
to these GitHub pages.

1093
02:03:58,720 --> 02:04:01,120
Going the other way is less straightforward.

1094
02:04:01,120 --> 02:04:06,800
But you can, of course, manually add this is the recommendation.

1095
02:04:07,000 --> 02:04:11,120
So you can manually add on the main page a link to your code.

1096
02:04:11,320 --> 02:04:14,120
Oh, there is a view page source.

1097
02:04:14,320 --> 02:04:16,440
Seems to know where it is.

1098
02:04:17,280 --> 02:04:20,560
I wonder, actually, where it got the information.

1099
02:04:23,240 --> 02:04:27,240
Yeah, Sphinx actually saves a copy of the.

1100
02:04:27,240 --> 02:04:37,240
That's why it comes in the generated version, so it's actually there, but there is actually a way.

1101
02:04:37,240 --> 02:04:48,240
You can always add it as text here, the repository is at an URL, so that's always a solution, although not automated.

1102
02:04:48,240 --> 02:05:03,360
Okay. Let's go to wrap up. Oh, hosting websites. So, I mean, yeah, I just, I did show you this

1103
02:05:03,360 --> 02:05:09,440
very quickly. There is, there's a branch called GitHub pages where it actually pushes the

1104
02:05:09,440 --> 02:05:18,960
new version or the most recent version of the documentation. So you can also use GitHub pages

1105
02:05:18,960 --> 02:05:28,720
to just directly write HTML and host it there. So if you're using GitHub anyway this is a

1106
02:05:28,720 --> 02:05:35,840
straightforward way of hosting a website. Same goes for GitLab and all the other alternatives.

1107
02:05:39,440 --> 02:05:45,440
but probably not spend more time on that unfortunately because we don't have that much

1108
02:05:46,080 --> 02:05:53,840
and we want to go for lunch in time so yeah just the general wrap-up for documentation

1109
02:05:56,240 --> 02:06:01,040
and yeah I guess the most important takeaway is you well you should have documentation

1110
02:06:01,680 --> 02:06:06,000
for yourself and for others in your team and for other users outside your team

1111
02:06:06,000 --> 02:06:12,840
him. But there is no one right way to do it. Like for a small enough project, a readme

1112
02:06:12,840 --> 02:06:18,580
file is enough. You probably want some in code documentation. For a bigger project,

1113
02:06:18,580 --> 02:06:24,200
the in code documentation should be really, especially if it's meant to be used by users.

1114
02:06:24,200 --> 02:06:28,000
If you're talking about a function that's meant to be used by actual users, then it

1115
02:06:28,000 --> 02:06:34,160
should be really well documented. And you should also have some sort of static website

1116
02:06:34,160 --> 02:06:37,160
at least for the documentation.

1117
02:06:37,160 --> 02:06:39,600
But then there's everything in between, right?

1118
02:06:39,600 --> 02:06:45,680
And it's really up to you to decide where you

1119
02:06:45,680 --> 02:06:48,360
go from one option to another.

1120
02:06:48,360 --> 02:06:53,680
If that readme feels too long, then it probably is too long.

1121
02:06:53,680 --> 02:06:56,280
But yeah, I mean, there's no one right way to do it.

1122
02:07:04,160 --> 02:07:10,160
So, any final thoughts?

1123
02:07:10,160 --> 02:07:19,080
Yeah, and then there's always progressively different ways to improve it, like adding

1124
02:07:19,080 --> 02:07:24,480
more user-friendly sections and yeah.

1125
02:07:24,480 --> 02:07:31,320
Yeah, of course, whatever decision you take, you're not stuck with it.

1126
02:07:31,320 --> 02:07:40,680
can always at least add more. So you can add a static website and copy stuff from the README

1127
02:07:40,680 --> 02:07:47,560
to the website and have a nicer structure with a table of contents.

1128
02:07:50,040 --> 02:07:53,800
Well, the README does have a table of contents, so you can create one.

1129
02:07:53,800 --> 02:08:05,240
But the main thing is that the readme shows all of it at once and you have to scroll or hyperlink

1130
02:08:05,240 --> 02:08:10,840
to different sections of it. On a static website you can split it into multiple pages

1131
02:08:11,800 --> 02:08:19,480
and it should be easier to read in that sense. Yeah another consideration is like

1132
02:08:19,480 --> 02:08:26,280
ask yourself who you are targeting this and is it someone who is new to the

1133
02:08:26,280 --> 02:08:32,520
code or is someone who is already into the code and needs to know the

1134
02:08:32,520 --> 02:08:38,200
nitty-gritty details so you should have something for both and it can even be a

1135
02:08:38,200 --> 02:08:45,400
future maintainer who should know how to publish the code and keep it updated.

1136
02:08:45,400 --> 02:08:53,740
To me, that's kind of the minimum. If you want the code to be usable or maintainable

1137
02:08:53,740 --> 02:09:00,320
in the future, then you should have at least enough documentation for the future maintainer,

1138
02:09:00,320 --> 02:09:08,600
which is likely, it might be you. But still, you will not remember. So, that's kind of

1139
02:09:08,600 --> 02:09:16,280
minimum. But then if it's really a big library and you want it to be user-friendly then you

1140
02:09:16,280 --> 02:09:23,800
should have a lot more than that. Is anyone rethinking how they're doing documentation

1141
02:09:23,800 --> 02:09:31,160
right now? Is anyone not doing documentation but is thinking of how to do it?

1142
02:09:31,160 --> 02:09:44,560
You could add your thoughts in the final summary section in the notes, you're very welcome

1143
02:09:44,560 --> 02:09:47,560
to do that.

1144
02:09:47,560 --> 02:10:00,720
Okay, well, there is a good amount of recap, of course, on the page that I'm showing.

1145
02:10:00,720 --> 02:10:05,720
So there's, we talked about readmes and static websites.

1146
02:10:05,760 --> 02:10:09,680
We talked about in code documentation

1147
02:10:09,680 --> 02:10:14,680
and how API documentation, how those two work together.

1148
02:10:14,680 --> 02:10:17,840
And of course, there's several options.

1149
02:10:20,200 --> 02:10:22,480
We didn't really talk about how to write tutorials,

1150
02:10:22,480 --> 02:10:25,120
but that's also a very good addition.

1151
02:10:25,120 --> 02:10:30,120
If you have slightly bigger program,

1152
02:10:30,720 --> 02:10:33,120
or just examples of how to run the code.

1153
02:10:40,240 --> 02:10:47,760
So yeah that is the general summary of the documentation section. So next we'll talk

1154
02:10:47,760 --> 02:10:54,880
about Jupyter but before that let's have a lunch break. So we will see you in one hour

1155
02:10:54,880 --> 02:11:11,520
on the hour and yeah, have a good break, find something to eat and see you. Bye. Bye.

1156
02:11:24,880 --> 02:11:26,940
you

1157
02:11:54,880 --> 02:11:56,940
you

1158
02:12:24,880 --> 02:12:26,940
you

1159
02:12:54,880 --> 02:12:56,940
you

1160
02:13:24,880 --> 02:13:26,940
you

1161
02:13:54,880 --> 02:13:56,940
you

1162
02:14:24,880 --> 02:14:26,940
you

1163
02:14:54,880 --> 02:14:56,940
you

1164
02:15:24,880 --> 02:15:26,940
you

1165
02:15:54,880 --> 02:15:56,940
you

1166
02:16:24,880 --> 02:16:26,940
you

1167
02:16:54,880 --> 02:16:56,940
you

1168
02:17:24,880 --> 02:17:26,940
you

1169
02:17:54,880 --> 02:17:56,940
you

1170
02:18:24,880 --> 02:18:26,940
you

1171
02:18:54,880 --> 02:18:56,940
you

1172
02:19:24,880 --> 02:19:26,940
you

1173
02:19:54,880 --> 02:19:56,940
you

1174
02:20:24,880 --> 02:20:26,940
you

1175
02:20:54,880 --> 02:20:56,940
you

1176
02:21:24,880 --> 02:21:26,940
you

1177
02:21:54,880 --> 02:21:56,940
you

1178
02:22:24,880 --> 02:22:26,940
you

1179
02:22:54,880 --> 02:22:56,940
you

1180
02:23:24,880 --> 02:23:26,940
you

1181
02:23:54,880 --> 02:23:56,940
you

1182
02:24:24,880 --> 02:24:26,940
you

1183
02:24:54,880 --> 02:24:56,940
you

1184
02:25:24,880 --> 02:25:26,940
you

1185
02:25:54,880 --> 02:25:56,940
you

1186
02:26:24,880 --> 02:26:26,940
you

1187
02:26:54,880 --> 02:26:56,940
you

1188
02:27:24,880 --> 02:27:26,940
you

1189
02:27:54,880 --> 02:27:56,940
you

1190
02:28:24,880 --> 02:28:26,940
you

1191
02:28:54,880 --> 02:28:56,940
you

1192
02:29:24,880 --> 02:29:26,940
you

1193
02:29:54,880 --> 02:29:56,940
you

1194
02:30:24,880 --> 02:30:26,940
you

1195
02:30:54,880 --> 02:30:56,940
you

1196
02:31:24,880 --> 02:31:26,940
you

1197
02:31:54,880 --> 02:31:56,940
you

1198
02:32:24,880 --> 02:32:26,940
you

1199
02:32:54,880 --> 02:32:56,940
you

1200
02:33:24,880 --> 02:33:26,940
you

1201
02:33:54,880 --> 02:33:56,940
you

1202
02:34:24,880 --> 02:34:26,940
you

1203
02:34:54,880 --> 02:34:56,940
you

1204
02:35:24,880 --> 02:35:26,940
you

1205
02:35:54,880 --> 02:35:56,940
you

1206
02:36:24,880 --> 02:36:26,940
you

1207
02:36:54,880 --> 02:36:56,940
you

1208
02:37:24,880 --> 02:37:26,940
you

1209
02:37:54,880 --> 02:37:56,940
you

1210
02:38:24,880 --> 02:38:26,940
you

1211
02:38:54,880 --> 02:38:56,940
you

1212
02:39:24,880 --> 02:39:26,940
you

1213
02:39:54,880 --> 02:39:56,940
you

1214
02:40:24,880 --> 02:40:26,940
you

1215
02:40:54,880 --> 02:40:56,940
you

1216
02:41:24,880 --> 02:41:26,940
you

1217
02:41:54,880 --> 02:41:56,940
you

1218
02:42:24,880 --> 02:42:26,940
you

1219
02:42:54,880 --> 02:42:56,940
you

1220
02:43:24,880 --> 02:43:26,940
you

1221
02:43:54,880 --> 02:43:56,940
you

1222
02:44:24,880 --> 02:44:26,940
you

1223
02:44:54,880 --> 02:44:56,940
you

1224
02:45:24,880 --> 02:45:26,940
you

1225
02:45:54,880 --> 02:45:56,940
you

1226
02:46:24,880 --> 02:46:26,940
you

1227
02:46:54,880 --> 02:46:56,940
you

1228
02:47:24,880 --> 02:47:26,940
you

1229
02:47:54,880 --> 02:47:56,940
you

1230
02:48:24,880 --> 02:48:26,940
you

1231
02:48:54,880 --> 02:48:56,940
you

1232
02:49:24,880 --> 02:49:26,940
you

1233
02:49:54,880 --> 02:49:56,940
you

1234
02:50:24,880 --> 02:50:26,940
you

1235
02:50:54,880 --> 02:50:56,940
you

1236
02:51:24,880 --> 02:51:26,940
you

1237
02:51:54,880 --> 02:51:56,940
you

1238
02:52:24,880 --> 02:52:26,940
you

1239
02:52:54,880 --> 02:52:56,940
you

1240
02:53:24,880 --> 02:53:26,940
you

1241
02:53:54,880 --> 02:53:56,940
you

1242
02:54:24,880 --> 02:54:26,940
you

1243
02:54:54,880 --> 02:54:56,940
you

1244
02:55:24,880 --> 02:55:26,940
you

1245
02:55:54,880 --> 02:55:56,940
you

1246
02:56:24,880 --> 02:56:26,940
you

1247
02:56:54,880 --> 02:56:56,940
you

1248
02:57:24,880 --> 02:57:26,940
you

1249
02:57:54,880 --> 02:57:56,940
you

1250
02:58:24,880 --> 02:58:26,940
you

1251
02:58:54,880 --> 02:58:56,940
you

1252
02:59:24,880 --> 02:59:26,940
you

1253
02:59:54,880 --> 02:59:56,940
you

1254
03:00:24,880 --> 03:00:26,940
you

1255
03:00:54,880 --> 03:00:56,940
you

1256
03:01:24,880 --> 03:01:26,940
you

1257
03:01:54,880 --> 03:01:56,940
you

1258
03:02:24,880 --> 03:02:26,940
you

1259
03:02:54,880 --> 03:02:56,940
you

1260
03:03:24,880 --> 03:03:26,940
you

1261
03:03:54,880 --> 03:03:56,940
you

1262
03:04:24,880 --> 03:04:26,940
you

1263
03:04:54,880 --> 03:04:56,940
you

1264
03:05:24,880 --> 03:05:26,940
you

1265
03:05:54,880 --> 03:05:56,940
you

1266
03:06:24,880 --> 03:06:26,940
you

1267
03:06:54,880 --> 03:06:56,940
you

1268
03:07:24,880 --> 03:07:26,940
you

1269
03:07:54,880 --> 03:07:56,940
you

1270
03:08:24,880 --> 03:08:26,940
you

1271
03:08:54,880 --> 03:08:56,940
you

1272
03:09:24,880 --> 03:09:26,940
you

1273
03:09:54,880 --> 03:09:56,940
you

1274
03:10:24,880 --> 03:10:26,940
you

1275
03:10:54,880 --> 03:10:56,940
you

1276
03:11:24,880 --> 03:11:26,940
you

1277
03:11:54,880 --> 03:12:10,880
Okay.

1278
03:12:10,880 --> 03:12:14,880
Welcome back, everyone.

1279
03:12:14,880 --> 03:12:19,880
Yeah, welcome back. Hope you all had a refreshing break.

1280
03:12:19,880 --> 03:12:23,880
And you are ready to continue with Jupiter.

1281
03:12:23,880 --> 03:12:25,120
I'm [name].

1282
03:12:25,120 --> 03:12:29,760
I'm going to be teaching this lesson together with [name],

1283
03:12:29,760 --> 03:12:32,560
which you've already heard earlier today.

1284
03:12:32,560 --> 03:12:35,640
We'll go through Jupyter Notebooks.

1285
03:12:35,640 --> 03:12:41,320
And yeah, hope you're all ready.

1286
03:12:41,320 --> 03:12:42,400
Yeah.

1287
03:12:42,400 --> 03:12:48,040
OK, so the idea is this session is, again,

1288
03:12:48,040 --> 03:12:49,800
a good number of demonstrations.

1289
03:12:49,800 --> 03:12:52,600
We'll look at Jupyter and JupyterLab

1290
03:12:52,600 --> 03:12:55,760
and talk about notebooks in general.

1291
03:12:55,760 --> 03:13:00,760
So you might already know what notebooks are,

1292
03:13:01,040 --> 03:13:02,800
how they are used.

1293
03:13:02,800 --> 03:13:06,880
They're a common way of sharing research software

1294
03:13:06,880 --> 03:13:09,440
and sharing the results of that software.

1295
03:13:09,440 --> 03:13:14,440
So they are a good way of doing,

1296
03:13:15,040 --> 03:13:18,040
of implementing reproducibility and collaboration

1297
03:13:18,040 --> 03:13:19,600
for usability of code.

1298
03:13:19,600 --> 03:13:26,600
Exactly. And if I may add, I mean, for those of you who are already very familiar with

1299
03:13:26,600 --> 03:13:31,960
Jupyter notebooks, you might find this very basic. So, [name], if you scroll down a little

1300
03:13:31,960 --> 03:13:41,960
bit on this page, so under optional episodes, you'll see some examples of more advanced

1301
03:13:41,960 --> 03:13:47,760
Jupyter features, which you may find interesting. So again, if you know a lot about Jupyter,

1302
03:13:47,760 --> 03:13:52,760
and you might find that still interesting enough.

1303
03:13:55,480 --> 03:13:58,520
But yeah, so, I mean, we'll see relatively basic usage,

1304
03:13:58,520 --> 03:14:02,400
but the thing, I think the main take-home message

1305
03:14:02,400 --> 03:14:05,040
is more about how would notebooks work,

1306
03:14:05,040 --> 03:14:08,240
how they are useful and how they're not useful,

1307
03:14:08,240 --> 03:14:09,580
like what are the caveats?

1308
03:14:09,580 --> 03:14:12,120
And it also, this is about Jupyter,

1309
03:14:12,120 --> 03:14:13,800
we'll be demonstrating with Jupyter,

1310
03:14:13,800 --> 03:14:19,800
But these points mostly apply to all other notebook interfaces as well.

1311
03:14:19,800 --> 03:14:21,800
Yeah, exactly.

1312
03:14:21,800 --> 03:14:26,800
So maybe, I mean, we are going to demonstrate Python codes in this lesson,

1313
03:14:26,800 --> 03:14:30,800
but if you're working with other programming languages,

1314
03:14:30,800 --> 03:14:35,800
it's still possible to use Jupyter and we'll talk a little bit about that.

1315
03:14:35,800 --> 03:14:40,800
And maybe one comment, so let's address the big elephant in the room.

1316
03:14:40,800 --> 03:14:51,400
why actually use JupyterLab instead of other codes like Visual Studio Code that we've already touched a bit upon earlier.

1317
03:14:51,400 --> 03:14:55,000
So, I would say it's really a matter of preference.

1318
03:14:55,000 --> 03:15:02,000
If you are coding in Python, then JupyterLab is fairly common.

1319
03:15:02,000 --> 03:15:06,800
You can use it again with other programming languages as well,

1320
03:15:06,800 --> 03:15:13,600
but in the end it's really up to you what you have available on your computer. You might even

1321
03:15:13,600 --> 03:15:19,280
like to try different tools and see which one you like the most and you find most useful.

1322
03:15:22,240 --> 03:15:30,080
Okay, so yeah, I'm not 100% sure this is true. I think I've heard it actually in

1323
03:15:30,080 --> 03:15:40,800
code refinery somewhere, so maybe it is. What I've heard is that Jupyter, the name comes from

1324
03:15:40,800 --> 03:15:47,520
Julia, Python, and R. So Jupyter definitely supports Julia, Python, and R.

1325
03:15:48,560 --> 03:15:49,060
Exactly.

1326
03:15:49,840 --> 03:15:56,160
So the kernels exist for those languages, and you can run any general commands in Jupyter,

1327
03:15:56,160 --> 03:16:02,960
but it is designed around those languages. Yeah, I mean now there are also kernels available for

1328
03:16:04,080 --> 03:16:10,160
Fortran and C and Mathematica, whatever. There are really like more than 100 different kernels

1329
03:16:10,160 --> 03:16:21,920
they may use, but some, I mean, Jupyter notebooks may be more useful for Python or in Julia,

1330
03:16:21,920 --> 03:16:27,040
if I may choose. But again, there are lots of different options.

1331
03:16:28,080 --> 03:16:32,880
Okay. So, what is Jupyter then? And what are notebooks?

1332
03:16:37,120 --> 03:16:46,400
So, I'm not sure how visible this is. Well, you don't need to actually see the code,

1333
03:16:46,400 --> 03:16:50,400
but which one is easier to follow?

1334
03:16:50,400 --> 03:16:54,400
Here's a description

1335
03:16:54,400 --> 03:16:58,400
and then example one here

1336
03:16:58,400 --> 03:17:02,400
that gives the code to follow this

1337
03:17:02,400 --> 03:17:06,400
gives the code

1338
03:17:06,400 --> 03:17:10,400
that does runs this example

1339
03:17:10,400 --> 03:17:14,400
or here another option where instead of essentially a script

1340
03:17:14,400 --> 03:17:33,680
script with some comments. You have some formatted text explaining each of the sections of code.

1341
03:17:33,680 --> 03:17:37,600
This is a rhetorical question. I mean, almost certainly, this is easier for most people

1342
03:17:37,600 --> 03:17:46,840
to follow, it looks nicer, it has some formatting, and the code is still displayed as code and

1343
03:17:46,840 --> 03:17:56,520
runnable as code, but it's interposed with these formatted text blocks that explain what's

1344
03:17:56,520 --> 03:17:57,520
happening.

1345
03:17:57,520 --> 03:18:04,560
Exactly. I mean, I like a lot the syntax highlighting. Well, now you have it in both examples, but

1346
03:18:04,560 --> 03:18:11,040
sometimes you need to do some additional things in order to enable code syntax highlighting in your

1347
03:18:11,600 --> 03:18:18,720
regular editor. So JupyterLab does already that for you and I do like that a lot. Also,

1348
03:18:18,720 --> 03:18:26,320
I like the fact that you can really add documentation to your code together with the

1349
03:18:29,040 --> 03:18:33,600
code lines and also the fact that you can break it a little bit into pieces. It makes it much

1350
03:18:33,600 --> 03:18:35,520
much more readable, in my opinion.

1351
03:18:35,520 --> 03:18:38,880
So it's great for, definitely for, well,

1352
03:18:38,880 --> 03:18:43,880
for shorter scripts or programs.

1353
03:18:45,880 --> 03:18:48,240
Okay, so that is the basic idea.

1354
03:18:48,240 --> 03:18:52,960
There's, it renders text and then includes your code

1355
03:18:52,960 --> 03:18:55,840
and the results of that code in between.

1356
03:18:55,840 --> 03:18:56,840
So it's like a notebook.

1357
03:18:56,840 --> 03:19:01,760
You write down, actually, I think, is there,

1358
03:19:01,760 --> 03:19:04,600
Do we have that image of the notebook?

1359
03:19:04,600 --> 03:19:05,280
No.

1360
03:19:05,280 --> 03:19:09,640
Oh, well, I mean, if you're doing this old-fashioned way,

1361
03:19:09,640 --> 03:19:12,320
you would be looking through a telescope, for example,

1362
03:19:12,320 --> 03:19:14,080
and scribbling notes in a notebook,

1363
03:19:14,080 --> 03:19:16,400
and then maybe drawing a picture,

1364
03:19:16,400 --> 03:19:20,080
and then writing some equations and so on,

1365
03:19:20,080 --> 03:19:23,040
like solving the equations as you go.

1366
03:19:23,040 --> 03:19:24,880
So this is the same idea.

1367
03:19:24,880 --> 03:19:28,240
You can write text, and then you can do computational stuff

1368
03:19:28,240 --> 03:19:30,760
and display the results of that computational stuff

1369
03:19:30,760 --> 03:19:33,280
in between the text.

1370
03:19:33,280 --> 03:19:36,440
It really looks like a notebook and behaves like a notebook.

1371
03:19:36,440 --> 03:19:47,900
OK, so this interface, this notebook-like interface

1372
03:19:47,900 --> 03:19:51,600
has been used in a lot of other places.

1373
03:19:51,600 --> 03:19:58,200
Jupyter doesn't have any sort of exclusive right to it

1374
03:19:58,200 --> 03:19:58,720
or anything.

1375
03:19:58,720 --> 03:20:07,920
So there's plenty of places that use that, and it really works quite nicely.

1376
03:20:07,920 --> 03:20:14,880
I know you can edit Jupyter Notebooks directly in VS Code, so I'm not sure if this means

1377
03:20:14,880 --> 03:20:16,480
that or something else.

1378
03:20:16,480 --> 03:20:17,480
Yeah.

1379
03:20:17,480 --> 03:20:26,240
So you need to install an extension, but it's easy, I would say, or it's well-documented

1380
03:20:26,240 --> 03:20:33,440
as well. And in principle you can do the same thing we are doing in this lesson in VS Code.

1381
03:20:33,440 --> 03:20:40,240
So it's again a matter of preference and what you have available to you. Because in VS Code

1382
03:20:40,240 --> 03:20:44,720
essentially everything works by extensions. Installing another extension is not a problem.

1383
03:20:47,200 --> 03:20:52,560
Okay, so there's some case examples here. You can look through these also in your own time.

1384
03:20:52,560 --> 03:21:06,360
but for example, is it true here, you can take a look at an existing notebook.

1385
03:21:06,360 --> 03:21:14,960
Here is this binder link. So we will actually have a section where we

1386
03:21:14,960 --> 03:21:20,600
demonstrate creating a repository and then looking at it through

1387
03:21:20,600 --> 03:21:26,760
binder, but here you can quickly take a look once it, not quickly because it takes a while to start

1388
03:21:26,760 --> 03:21:32,840
the kernel, but it will install all the requirements from the requirements.txt or

1389
03:21:33,480 --> 03:21:40,920
in other languages as environments and runtime.txt. Yeah, and I think this is

1390
03:21:42,600 --> 03:21:47,720
yeah, this is actually one of the strengths I see when it comes to working with Jupyter

1391
03:21:47,720 --> 03:21:53,800
notebooks, the fact that it's easily shareable to other people. You can make sure that you can

1392
03:21:53,800 --> 03:22:00,200
ship your code together with the requirements that you need for that to work and you can

1393
03:22:00,200 --> 03:22:07,400
easily show it to someone else and you don't even have to have your own computer with you.

1394
03:22:07,400 --> 03:22:13,000
You can just grab it from GitHub or some other place where you have your code. So that

1395
03:22:13,000 --> 03:22:17,080
It makes your code very accessible.

1396
03:22:19,080 --> 03:22:20,840
Okay, let's check back on that later.

1397
03:22:21,560 --> 03:22:24,240
But yeah, so they have actually, they've created these notebooks

1398
03:22:24,240 --> 03:22:27,440
and then they have set up a repository on GitHub

1399
03:22:27,440 --> 03:22:35,480
so that you can essentially, you can repeat their results

1400
03:22:35,480 --> 03:22:37,400
and you can read through their description

1401
03:22:37,400 --> 03:22:39,200
while you are repeating those results.

1402
03:22:39,800 --> 03:22:42,040
So that's really nice reproducibility.

1403
03:22:43,000 --> 03:22:52,800
Here's another example, so you can also launch this in Binder and a gallery of more examples.

1404
03:22:52,800 --> 03:22:56,400
There's a lot of these.

1405
03:22:56,400 --> 03:23:01,400
So what is Jupyter good for?

1406
03:23:01,400 --> 03:23:05,840
What are notebooks good for?

1407
03:23:05,840 --> 03:23:12,880
So if you're describing a linear workflow where you want to describe it and at the same

1408
03:23:12,880 --> 03:23:16,880
and demonstrate what's going on.

1409
03:23:16,880 --> 03:23:19,880
You want to display your results, your research results.

1410
03:23:19,880 --> 03:23:24,040
That's a very good showcase or a script that

1411
03:23:24,040 --> 03:23:27,000
reproduces your research results.

1412
03:23:27,000 --> 03:23:29,120
It's also really good for experimenting.

1413
03:23:29,120 --> 03:23:31,920
So you can go and change a piece of a part of the code

1414
03:23:31,920 --> 03:23:33,480
and rerun parts of it without having

1415
03:23:33,480 --> 03:23:35,960
to do the entire analysis from the beginning.

1416
03:23:42,880 --> 03:23:48,880
And yeah, it can also be an interactive development environment for code and visualization and so on.

1417
03:23:48,880 --> 03:24:00,880
It can also be, you can now have it running on a server, or you can run a server and then multiple people can edit at the same time, which is really nice.

1418
03:24:00,880 --> 03:24:08,080
So yeah, it's great for sharing your code, sharing your workflow, sharing your results,

1419
03:24:08,080 --> 03:24:09,080
teaching and so on.

1420
03:24:09,080 --> 03:24:12,560
So students can go and change the code and see what happens.

1421
03:24:12,560 --> 03:24:13,560
That's also really nice.

1422
03:24:13,560 --> 03:24:14,560
Yeah.

1423
03:24:14,560 --> 03:24:19,760
I especially like it when producing figures because I always find it takes a lot of time

1424
03:24:19,760 --> 03:24:24,600
to find good settings for a figure and the fact that it's so interactive makes it very

1425
03:24:24,600 --> 03:24:27,400
useful.

1426
03:24:27,400 --> 03:24:31,480
So now this example is done.

1427
03:24:31,480 --> 03:24:35,560
There is an index.ipython notebook, which I'm opening.

1428
03:24:35,560 --> 03:24:41,240
Yeah, so maybe you can comment a bit how you actually got to this window.

1429
03:24:41,240 --> 03:24:50,040
Well, I mean, once I, I mean, I clicked through here and clicked the Binder link, and once

1430
03:24:50,040 --> 03:24:53,080
it was done, it actually automatically went into this window.

1431
03:24:53,080 --> 03:24:55,360
Okay, so now you are having...

1432
03:24:55,360 --> 03:24:56,920
I'm on Binder now.

1433
03:24:56,920 --> 03:25:05,640
Okay. So, I mean, yeah, it kind of did it automatically. So, I will open my own local

1434
03:25:05,640 --> 03:25:13,480
version of this interface. This is JupyterLab in a moment. But now, I guess the point is to

1435
03:25:13,480 --> 03:25:20,600
mainly to display this, to show everybody this notebook about gravitational waves.

1436
03:25:20,600 --> 03:25:24,440
So, I'm not going to run anything here, but the results are already there.

1437
03:25:26,920 --> 03:25:35,320
So, you can have, there's some titles, some description, and then you can see the data,

1438
03:25:35,320 --> 03:25:46,920
the raw data, and how they progressively, they work on the data and get a final result.

1439
03:25:46,920 --> 03:25:54,800
So, okay, I'm leaving that.

1440
03:25:54,800 --> 03:26:03,120
So this is the first gravitational wave discovery, looking at the original data and the result.

1441
03:26:03,120 --> 03:26:10,560
So from the raw data, you can reproduce the plot in the paper, which is really nice.

1442
03:26:10,560 --> 03:26:11,560
Okay.

1443
03:26:11,560 --> 03:26:15,200
So some pitfalls.

1444
03:26:15,200 --> 03:26:20,880
So if you have nonlinear code flow, which basically means calling functions and for loops and

1445
03:26:20,880 --> 03:26:24,800
functions calling functions and so on, something complicated,

1446
03:26:24,800 --> 03:26:31,120
then Jupyter is probably not going to be very clear.

1447
03:26:31,120 --> 03:26:33,760
So I mean, you can still use Jupyter,

1448
03:26:33,760 --> 03:26:37,440
and you can define most of the functions

1449
03:26:37,440 --> 03:26:41,320
outside in a module that you import.

1450
03:26:41,320 --> 03:26:45,200
And I mean, we will do that, I think, in this demonstration.

1451
03:26:45,200 --> 03:26:54,660
So the main thing there of course is to explain what the function is doing and have a good

1452
03:26:54,660 --> 03:26:58,880
readable name for the function so that people reading the notebook understand what's going

1453
03:26:58,880 --> 03:26:59,880
on.

1454
03:26:59,880 --> 03:27:04,880
It doesn't really work well with large codebases.

1455
03:27:04,880 --> 03:27:08,800
Essentially when you're running one Jupyter notebook it does not interact with another

1456
03:27:08,800 --> 03:27:14,480
so you have essentially just one file and everything else you need to import as a module.

1457
03:27:17,440 --> 03:27:23,120
Tomorrow we'll actually have an example during the modular code development

1458
03:27:24,000 --> 03:27:30,640
lesson on how you actually at some point need to leave the Jupyter notebook interface and move to

1459
03:27:31,360 --> 03:27:38,400
something else, be it running in the command line or using other tools which make larger codes.

1460
03:27:38,800 --> 03:27:52,840
Yeah. So, for Jupyter notebooks specifically, they are JSON files and they include images

1461
03:27:52,840 --> 03:27:57,720
and so on. So, it's not straightforward to write one in a text editor. And of course,

1462
03:27:57,720 --> 03:28:05,080
you cannot run the cells in the pure text editor. The text editor has to support running

1463
03:28:05,080 --> 03:28:12,920
well, Jupyter notebooks directly. So that can be a limitation.

1464
03:28:15,960 --> 03:28:21,000
Notebooks can be version controlled, but if it includes images or big data files,

1465
03:28:23,240 --> 03:28:26,920
there are some limitations for version controlling notebooks.

1466
03:28:26,920 --> 03:28:35,280
And specifically for Jupyter, JupyterLab, notebooks are not named by default, you need

1467
03:28:35,280 --> 03:28:42,840
to remember to name them, otherwise you just have unnamed.ipython notebook, which is unclear.

1468
03:28:42,840 --> 03:28:47,080
So yeah, there's a bunch of, there's a bit more pitfalls listed here.

1469
03:28:47,080 --> 03:28:54,620
I think the biggest one though is that you can run cells out of order, which does make

1470
03:28:54,620 --> 03:28:59,580
development easier so if you change something in the beginning you don't necessarily have to run

1471
03:28:59,580 --> 03:29:06,140
all the cells but it means that the state of execution is not clear or the state of your

1472
03:29:06,140 --> 03:29:13,020
program is not clear from the text what that you see especially if you while you are developing it

1473
03:29:13,820 --> 03:29:20,540
so that can always cause problems if you run if you write a bunch of cells and then you run them

1474
03:29:20,540 --> 03:29:24,460
in some random order, you will get weird results. And you can do that.

1475
03:29:27,340 --> 03:29:35,180
Okay, so it is a good idea to, before saving your notebook and before sharing any results,

1476
03:29:35,180 --> 03:29:42,380
it's a good idea to run all the cells in order and then save, so that when someone else opens

1477
03:29:42,380 --> 03:29:47,980
the notebook and tries to run stuff, they will get the same results as you get. And if there's

1478
03:29:47,980 --> 03:29:56,780
a problem, you will notice. Okay, so should we go to start? Yeah, and maybe I can comment that,

1479
03:29:56,780 --> 03:30:02,860
I mean, this will become a bit clearer during the lesson. It's a bit hard for newcomers to

1480
03:30:02,860 --> 03:30:09,980
understand what cells are and so on, but we'll demonstrate this, so bear with us a little bit.

1481
03:30:09,980 --> 03:30:15,180
Yeah, we'll come back to it and clarify. Okay, so I will

1482
03:30:15,180 --> 03:30:27,660
go to the terminal and start JupyterLab. So first, let's make a new folder,

1483
03:30:32,300 --> 03:30:33,340
JupyterLab demo,

1484
03:30:37,180 --> 03:30:41,740
and then I am in the CodeRefinery environment, so I have everything installed already,

1485
03:30:41,740 --> 03:30:49,100
so I can run the command jupyter lab oh there's many of these okay jupyter lab

1486
03:30:57,500 --> 03:31:05,580
now it opened okay I do not want to receive news so it opened automatically in the browser window

1487
03:31:06,540 --> 03:31:11,420
that's most recently open it will do whatever your system's default is to open a browser

1488
03:31:11,420 --> 03:31:23,900
window. Let's look through the interface. I will get the notes to the side again because I

1489
03:31:23,900 --> 03:31:34,540
again forgot to do that. So here we are. JupyterLab is here displaying in the browser.

1490
03:31:35,340 --> 03:31:40,060
There is a notebook server that's running essentially the process that's running in

1491
03:31:40,060 --> 03:31:46,220
the terminal here and you can see it's printing out some information that I cannot read.

1492
03:31:50,300 --> 03:31:59,820
But yeah, that is not so important to understand. So the main focus is the browser interface.

1493
03:31:59,820 --> 03:32:06,940
Yeah, so yeah, essentially it's running on my, everything's running on my laptop here,

1494
03:32:06,940 --> 03:32:15,660
but yeah this you see you interact with it through the browser um okay so now what do we have here

1495
03:32:15,660 --> 03:32:21,740
we have a file manager we don't have any files currently but uh this it lists all the files here

1496
03:32:23,580 --> 03:32:30,540
there's also um a list of well i guess list of kernels maybe we'll come back to what that means

1497
03:32:30,540 --> 03:32:38,060
There's a tab for git, so if it's a git repository, you will see some information here.

1498
03:32:38,060 --> 03:32:45,500
You can initialize a git repository, or clone one into this folder.

1499
03:32:45,500 --> 03:32:49,580
Table of contents of the currently open notebook can be useful.

1500
03:32:49,580 --> 03:32:54,460
And then extensions, which we will use at some point later.

1501
03:32:54,460 --> 03:32:57,700
But I think the first thing to do is to create a notebook.

1502
03:32:57,700 --> 03:33:00,460
So let's go create a notebook.

1503
03:33:00,460 --> 03:33:03,020
OK, the plus button just creates a new launcher tab here.

1504
03:33:03,020 --> 03:33:04,980
So we already have one.

1505
03:33:04,980 --> 03:33:08,420
So let's then start a notebook.

1506
03:33:08,420 --> 03:33:10,740
OK, and this has no name.

1507
03:33:10,740 --> 03:33:14,180
So what would be a better name for this?

1508
03:33:14,180 --> 03:33:17,660
Example, demo, demo.

1509
03:33:17,660 --> 03:33:20,540
It's always best to rename your notebooks the first thing

1510
03:33:20,540 --> 03:33:23,100
you do when you open them.

1511
03:33:23,100 --> 03:33:25,300
Who doesn't have lots of, well, who

1512
03:33:25,300 --> 03:33:28,540
once the untitled file is on the computer.

1513
03:33:28,540 --> 03:33:32,300
Yeah, and it's easy to forget because it doesn't even

1514
03:33:32,300 --> 03:33:35,300
ask you for a name by default.

1515
03:33:35,300 --> 03:33:38,380
OK, so now we can type stuff into these cells.

1516
03:33:38,380 --> 03:33:42,620
So let's start with a markdown cell.

1517
03:33:42,620 --> 03:33:48,300
So this is a cell, first of all, and I can type stuff in.

1518
03:33:48,300 --> 03:33:50,180
So I'll type some markdown in.

1519
03:33:50,180 --> 03:34:00,180
So how do you choose whether it's Markdown or if it's a code cell?

1520
03:34:00,180 --> 03:34:05,180
So actually this is currently code, but I'm typing in Markdown.

1521
03:34:05,180 --> 03:34:09,180
So I need to go and click through here and select Markdown.

1522
03:34:09,180 --> 03:34:12,180
So now it is a Markdown cell.

1523
03:34:12,180 --> 03:34:19,060
Okay, I'm not going to repeat the entire example notebook. I think we get it from

1524
03:34:19,060 --> 03:34:24,820
a repository later. So I'll just write some random equations here, not random.

1525
03:34:30,180 --> 03:34:34,020
I'm not actually sure how to write an equation here, but it doesn't matter that much.

1526
03:34:34,020 --> 03:34:38,020
So, dollar signs, in between dollar signs.

1527
03:34:38,020 --> 03:34:39,020
Okay.

1528
03:34:39,020 --> 03:34:44,300
Okay, I'll just run this.

1529
03:34:44,300 --> 03:34:51,260
So to run this, I can press play here and it creates a new cell below.

1530
03:34:51,260 --> 03:34:54,120
So when you run a Markdown cell, it renders it.

1531
03:34:54,120 --> 03:34:58,180
It displays the result of this Markdown code.

1532
03:34:58,180 --> 03:35:00,980
And then I can run Python code or write Python code.

1533
03:35:00,980 --> 03:35:17,040
So let's do, what should I do, import a module, import random, and what should I do, random.

1534
03:35:17,040 --> 03:35:18,040
Let's get some results from this.

1535
03:35:18,040 --> 03:35:20,600
Yeah, I would copy paste from our lesson material.

1536
03:35:20,600 --> 03:35:28,960
I would suggest this to our participants as well if they want to play around later on.

1537
03:35:28,960 --> 03:35:35,280
So you don't necessarily have to understand everything that is in the code lines but just

1538
03:35:35,280 --> 03:35:36,960
the general idea.

1539
03:35:36,960 --> 03:35:39,500
Again you can use it later.

1540
03:35:39,500 --> 03:35:40,500
We have Markdown cells.

1541
03:35:40,500 --> 03:35:46,260
So yeah, there is an example of Markdown cells here and so I'm going to just paste into this

1542
03:35:46,260 --> 03:35:50,160
but we have already talked a good bit about Markdown.

1543
03:35:50,160 --> 03:35:54,800
Here's again examples of Markdown equations.

1544
03:35:54,800 --> 03:36:04,080
understands this format for equations, this format that is, and some more

1545
03:36:04,080 --> 03:36:10,520
formatting. So let's run that one. It's nice you can also include figures, I mean

1546
03:36:10,520 --> 03:36:16,000
images of any kind. Yeah. That's cool if you want to present something for

1547
03:36:16,000 --> 03:36:23,080
others and you just want to show... Well yeah, let's just do a

1548
03:36:23,080 --> 03:36:30,680
hello world here that's a good example okay okay so that cell is now a code

1549
03:36:30,680 --> 03:36:37,800
cell can you show again I mean how you change well when you create a new cell

1550
03:36:37,800 --> 03:36:47,280
it will by default be code so yeah you can again go from here and make it a

1551
03:36:47,280 --> 03:36:52,280
markdown cell, or you can make it a code cell.

1552
03:36:52,280 --> 03:36:56,280
Yeah, and in this case, our interpreter is Python.

1553
03:36:56,280 --> 03:37:00,280
If we use some other extension, then we could

1554
03:37:00,280 --> 03:37:04,280
write code in, I don't know, Julia or R,

1555
03:37:04,280 --> 03:37:08,280
but right now we are using Python as an interpreter. Yeah, so I started

1556
03:37:08,280 --> 03:37:12,280
this from Python, installed it from PyPI,

1557
03:37:12,280 --> 03:37:16,280
so it is by default, it's defaulting to Python.

1558
03:37:16,280 --> 03:37:21,240
But yeah, you can also have other kernels and choose other languages.

1559
03:37:24,600 --> 03:37:27,480
Okay, so is there anything more on this?

1560
03:37:30,440 --> 03:37:32,600
Anything else that's important in here?

1561
03:37:36,680 --> 03:37:43,480
There's a keyboard shortcuts that are, if you start using notebooks extensively, Jupyter notebooks

1562
03:37:43,480 --> 03:37:51,240
extensively, then these are useful shortcuts that you will probably learn sooner or later.

1563
03:37:52,360 --> 03:38:01,080
And then we have some tools for debugging, testing, and writing code in notebooks are useful.

1564
03:38:02,680 --> 03:38:07,080
Yeah, I only know a couple of shortcuts which I use all the time, and then

1565
03:38:07,080 --> 03:38:15,880
then many other things I do by clicking, which is not optimal, but then again, I mean, it's

1566
03:38:15,880 --> 03:38:24,480
maybe I don't use JupyterLab enough so that it's super useful. But yeah, creating new

1567
03:38:24,480 --> 03:38:31,600
cells and running things, that's good to have shortcuts for.

1568
03:38:31,600 --> 03:38:37,600
So, yeah, essentially, I know one shortcut, which is Ctrl-Enter to run a cell.

1569
03:38:37,600 --> 03:38:38,600
Yeah.

1570
03:38:38,600 --> 03:38:44,160
And maybe it's good to point out that this may be different on different operating systems.

1571
03:38:44,160 --> 03:38:45,160
Right.

1572
03:38:45,160 --> 03:38:47,960
So, it may be Ctrl-Enter or Shift-Enter.

1573
03:38:47,960 --> 03:38:48,960
Yeah, so it's...

1574
03:38:48,960 --> 03:38:54,680
If you don't know, you can check the settings you have on JupyterLab, and I think they will

1575
03:38:54,680 --> 03:38:57,400
be listed there.

1576
03:38:57,400 --> 03:39:06,800
At least here we have command in parenthesis, but here we don't, so I'm not sure which it

1577
03:39:06,800 --> 03:39:07,800
is.

1578
03:39:07,800 --> 03:39:13,680
But it is either control or command, depending on your system.

1579
03:39:13,680 --> 03:39:14,680
Okay.

1580
03:39:14,680 --> 03:39:21,040
But I suppose we can move forward.

1581
03:39:21,040 --> 03:39:25,800
So in this example, we essentially do what the notebooks are good for.

1582
03:39:25,800 --> 03:39:33,800
write a narrative and we get some results and then later we publish this so that everyone

1583
03:39:33,800 --> 03:39:44,680
else can view it and run the same code. Okay, so should we explain this or how much should

1584
03:39:44,680 --> 03:39:52,600
we explain this? So this is a way of calculating pi, but it is more useful as a demonstration

1585
03:39:52,600 --> 03:39:59,360
than it is as an actually fast way of computing pi.

1586
03:39:59,360 --> 03:40:07,560
So we're essentially on the computer we're throwing dice on a square and then we are

1587
03:40:07,560 --> 03:40:11,320
checking if they land inside the circle or not.

1588
03:40:11,320 --> 03:40:18,480
And use the area of the square compared to the area of the circle to figure out what

1589
03:40:18,480 --> 03:40:31,680
Pi is. Okay, so we start JupyterLab. We already did that. We created a notebook, which we also did.

1590
03:40:34,000 --> 03:40:44,800
And right, okay, so you can also start JupyterLab without automatically opening it in a browser.

1591
03:40:44,800 --> 03:40:52,800
and then what you would do to open it in a browser is go to this address, localhost 888.

1592
03:40:52,800 --> 03:40:58,800
Yeah, so the moment you add this option, no browser, then you're going to get as an output,

1593
03:40:58,800 --> 03:41:05,800
well, among the output lines, a line with a URL that you can then open in your favorite browser.

1594
03:41:05,800 --> 03:41:10,800
If you do not specify the no browser option, it's going to take your default browser,

1595
03:41:10,800 --> 03:41:18,160
but if you want to have control over the window in which it opens, then that's a good option to use.

1596
03:41:18,800 --> 03:41:23,360
Okay, but yeah, let's go in the demo. So the first thing I'll do to make things easier is

1597
03:41:24,080 --> 03:41:30,400
copy this iframe display, and this is the address that I'm currently looking at.

1598
03:41:31,520 --> 03:41:38,800
So I will basically open this current website in a Jupyter notebook. Let's get rid of this

1599
03:41:38,800 --> 03:41:49,520
hello world cell and also this cell oh um i guess that one test will cut let's make it a

1600
03:41:51,040 --> 03:41:58,560
code cell yes and then run okay so now we have a browser in jupyter lab in a browser

1601
03:41:59,600 --> 03:42:06,320
great and uh start recreating a cell below that so and this is where we were

1602
03:42:06,320 --> 03:42:18,120
Okay, so the first thing we do, well, we have a header in Markdown, so let's make a Markdown

1603
03:42:18,120 --> 03:42:19,120
cell.

1604
03:42:19,120 --> 03:42:23,560
We have a cell, but turn it into a Markdown cell.

1605
03:42:23,560 --> 03:42:25,960
So calculating pi using Monte Carlo methods.

1606
03:42:25,960 --> 03:42:26,960
Okay.

1607
03:42:26,960 --> 03:42:34,960
Yeah, so now you're basically copy pasting from the content of the cell above.

1608
03:42:34,960 --> 03:42:35,960
Yes.

1609
03:42:35,960 --> 03:42:50,960
Okay, so and here are some the relevant formulas, I think we can put them in the same cell if you don't mind and an image that explains the concept which we had on the website.

1610
03:42:50,960 --> 03:42:54,960
Yeah, I would put them in different cells, but that's just my preference.

1611
03:42:54,960 --> 03:42:56,960
Okay, we can do that.

1612
03:42:56,960 --> 03:43:02,960
I think maybe at the beginning it's better to use different cells and then if you want

1613
03:43:02,960 --> 03:43:06,800
to condensate a bit your...

1614
03:43:06,800 --> 03:43:09,360
So I made a mistake.

1615
03:43:09,360 --> 03:43:12,120
What was the mistake?

1616
03:43:12,120 --> 03:43:17,600
I'm asking more the audience.

1617
03:43:17,600 --> 03:43:21,960
It's actually like, this is not a very useful error message, I guess.

1618
03:43:21,960 --> 03:43:28,960
Well, it looks like, let's see if anyone answers actually in the notes.

1619
03:43:28,960 --> 03:43:35,960
Should we give them a minute so that they get the chance to tell us what the mistake is in the notes?

1620
03:43:35,960 --> 03:43:38,960
The error message is really not useful.

1621
03:43:38,960 --> 03:43:40,960
I guess this is the key.

1622
03:43:40,960 --> 03:43:43,960
Syntax error.

1623
03:43:43,960 --> 03:43:49,960
Unexpected token.

1624
03:43:49,960 --> 03:43:57,000
Right. Yeah, exactly. So someone did tell us it interpreted this as a code cell. So basically,

1625
03:43:57,000 --> 03:44:04,600
it's trying to interpret that using Python and that is... Yeah. I don't know why this is the

1626
03:44:04,600 --> 03:44:12,360
first error. Is this Python? Okay, fine. The first part is interpreted as comment,

1627
03:44:12,360 --> 03:44:19,720
right? Yeah, this is a comment, but then there's this exclamation mark and it's trying to take

1628
03:44:19,960 --> 03:44:22,040
darts of that explanation.

1629
03:44:22,040 --> 03:44:23,960
Well, okay. For some reason,

1630
03:44:23,960 --> 03:44:26,280
this is the first mistake it found.

1631
03:44:26,280 --> 03:44:28,560
That's not proper Python code.

1632
03:44:28,560 --> 03:44:32,240
Okay. Well, let's turn it into a Markdown cell and try again.

1633
03:44:32,240 --> 03:44:34,560
So here's the image.

1634
03:44:34,560 --> 03:44:39,480
So we're actually taking this square and then

1635
03:44:39,480 --> 03:44:44,400
throwing random coordinates inside the square.

1636
03:44:44,400 --> 03:44:47,560
If it is inside the square,

1637
03:44:47,560 --> 03:44:55,780
than it is in the area of this quarter of a circle and otherwise it's only in the square.

1638
03:44:55,780 --> 03:45:03,580
So the area of the quarter of a circle is, so the area of the quarter of a circle divided

1639
03:45:03,580 --> 03:45:11,100
by the area of the circle is pi over four, is that right? I think so, yeah.

1640
03:45:11,100 --> 03:45:20,020
Okay, now we are far enough down that I no longer see the examples. I will start

1641
03:45:20,020 --> 03:45:27,320
copying from the side, but I think you still know what's going on.

1642
03:45:27,320 --> 03:45:33,080
So I will copy some. Now this is supposed to be Python code? Yes, this is Python

1643
03:45:33,080 --> 03:45:37,320
code. So what we're doing is importing modules that we need. We need random

1644
03:45:37,320 --> 03:45:41,480
because we want random numbers, and then we also want to be plotting things.

1645
03:45:41,480 --> 03:45:46,600
So let's import matplotlib, and I run that.

1646
03:45:46,600 --> 03:45:50,120
Yes, and if you're working in the code refinery environment,

1647
03:45:50,680 --> 03:45:55,800
then you will have matplotlib installed as a dependency.

1648
03:45:55,800 --> 03:46:10,480
Yeah, okay, and then we, well, okay, we decide how many points we will create for this test

1649
03:46:10,480 --> 03:46:15,800
or for this example, and then we start throwing darts.

1650
03:46:15,800 --> 03:46:22,680
So let's, there's a comment first, we'll throw darts, which means we draw two random numbers,

1651
03:46:22,680 --> 03:46:25,680
an X coordinate and a Y coordinate.

1652
03:46:25,680 --> 03:46:29,360
So first, initial list of points and the number of hits.

1653
03:46:32,160 --> 03:46:38,520
Then we do a for loop that just runs the same thing as many

1654
03:46:38,520 --> 03:46:41,800
times as the number of points is.

1655
03:46:41,800 --> 03:46:44,320
We draw two random numbers, x and y.

1656
03:46:44,320 --> 03:46:47,600
So x and y equals random and random.

1657
03:46:47,600 --> 03:46:49,800
And then if it is inside the circle,

1658
03:46:49,800 --> 03:46:54,680
so if the sum of the squares, which

1659
03:46:54,680 --> 03:47:02,680
the distance from the origin is smaller than one, then it's a hit, and we append a point.

1660
03:47:02,680 --> 03:47:09,880
The reason for appending these points is to create this plot. So we are keeping track of

1661
03:47:09,880 --> 03:47:16,280
the x-coordinate, y-coordinate of the point, and also the color. So inside the circle it's red,

1662
03:47:16,280 --> 03:47:27,640
otherwise it's blue. If you cannot follow this, then it's not very critical. Basically, we are

1663
03:47:28,680 --> 03:47:37,880
copying different parts of the Python script that we have and interpreting these different cells.

1664
03:47:38,920 --> 03:47:44,680
The main point is not exactly what we are doing with the code, but rather how we are explaining

1665
03:47:44,680 --> 03:47:52,120
the code and displaying the code. So the code is divided in these cells and we are,

1666
03:47:52,680 --> 03:47:57,000
right now we only have these comments here between them, but we could have much more

1667
03:47:58,200 --> 03:48:02,120
formatted text and description between them. Yeah, exactly. I mean, I could, in principle,

1668
03:48:02,120 --> 03:48:09,000
add a cell at the top of this one where I exemplify more in a markdown cell what I'm

1669
03:48:09,000 --> 03:48:14,040
actually achieving or trying to do with these different cells.

1670
03:48:14,040 --> 03:48:18,040
So turn it into a markdown cell and then we could have more explanation.

1671
03:48:18,600 --> 03:48:24,280
So something like this comment, but much more detail or more formatting at least.

1672
03:48:25,400 --> 03:48:28,440
This is especially useful if I'm going to share this later on

1673
03:48:30,040 --> 03:48:33,640
with people that don't actually understand Python.

1674
03:48:33,640 --> 03:48:41,240
they still know more or less what this code does and what are the different steps.

1675
03:48:41,960 --> 03:48:48,360
Yeah. Okay, so yeah, I also added this that adds a blue point when it doesn't hit,

1676
03:48:48,360 --> 03:48:52,200
but it doesn't count it as a hit. Okay, and I run it.

1677
03:48:55,800 --> 03:48:59,640
And finally, we have another section that plots the results.

1678
03:49:03,640 --> 03:49:10,640
So we take the x, y points and colors and we create a plot and show it.

1679
03:49:10,640 --> 03:49:13,640
Well, actually this actually finally creates the plot.

1680
03:49:13,640 --> 03:49:20,640
So this will actually return a plot and that plot then will be displayed here.

1681
03:49:20,640 --> 03:49:25,640
Okay, so it has the points inside the circle and outside the circle.

1682
03:49:25,640 --> 03:49:32,640
And then one final step we haven't done yet, we haven't actually calculated the pi.

1683
03:49:32,640 --> 03:49:39,760
So, to do that, according to the equation above, you take the fraction of hits to the

1684
03:49:39,760 --> 03:49:43,680
whole number of points and multiply by 4.

1685
03:49:43,680 --> 03:49:44,680
Okay.

1686
03:49:44,680 --> 03:49:55,200
So, pi is 3.14 something, I don't know actually so many digits, but this is fairly close.

1687
03:49:55,200 --> 03:49:59,640
It's 3.14 at least, so close enough.

1688
03:49:59,640 --> 03:50:00,640
So how can I improve?

1689
03:50:00,640 --> 03:50:01,640
You can always rerun and see.

1690
03:50:01,640 --> 03:50:05,240
How could I improve on this number, for example?

1691
03:50:05,240 --> 03:50:06,800
Oh, you'd make it more accurate?

1692
03:50:06,800 --> 03:50:09,800
Yeah.

1693
03:50:09,800 --> 03:50:12,400
Increasing the number of points, I guess, is the best thing.

1694
03:50:19,240 --> 03:50:24,520
So this ran fairly quickly, so I suppose we can add a zero.

1695
03:50:24,520 --> 03:50:28,240
But then, well, now if I just run this, nothing happens.

1696
03:50:28,240 --> 03:50:31,080
So at least I need to run everything below.

1697
03:50:31,080 --> 03:50:35,560
So what should I do now?

1698
03:50:35,560 --> 03:50:38,840
And I could run all of these cells below,

1699
03:50:38,840 --> 03:50:41,960
and that will work, right? So now I've made a big plot,

1700
03:50:41,960 --> 03:50:50,600
and lots of circles. This is closer, but I don't know if it does.

1701
03:50:50,600 --> 03:50:54,120
But, I mean, it's a bit of oscillation

1702
03:50:54,120 --> 03:51:00,600
until you get this number converged, so to say.

1703
03:51:00,600 --> 03:51:07,560
But really I guess what I would recommend doing, if I add another zero here, is clicking on this

1704
03:51:08,280 --> 03:51:13,560
restart kernel and run all cells. So this will run the whole notebook from the beginning to the end.

1705
03:51:14,920 --> 03:51:21,320
Yeah and also it's especially useful to also restart the kernel and not just running all

1706
03:51:21,320 --> 03:51:27,400
the cells from the top to bottom. In case you have some variables that you have defined but

1707
03:51:27,400 --> 03:51:31,520
but then you remove the cells where they were defined.

1708
03:51:31,520 --> 03:51:33,320
They may still be kept in the memory

1709
03:51:33,320 --> 03:51:35,120
unless you actually restart the kernel.

1710
03:51:35,120 --> 03:51:40,120
So restarting means erase all variables from memory

1711
03:51:40,680 --> 03:51:42,800
and run the cells in order.

1712
03:51:44,160 --> 03:51:46,400
And it's very good practice to do this

1713
03:51:46,400 --> 03:51:50,960
before you share your notebook with anyone else.

1714
03:51:52,240 --> 03:51:56,160
Yeah, so essentially I consider this now essentially done,

1715
03:51:56,160 --> 03:51:59,840
although you could add a lot more story in between here

1716
03:51:59,840 --> 03:52:01,440
to actually explain what's going on.

1717
03:52:01,440 --> 03:52:03,200
But at least the code is done.

1718
03:52:03,200 --> 03:52:08,360
So at this point, it makes sense to rerun the entire code again

1719
03:52:08,360 --> 03:52:09,920
from a fresh state.

1720
03:52:20,160 --> 03:52:21,480
So what do we get?

1721
03:52:21,480 --> 03:52:23,120
What's the point?

1722
03:52:23,120 --> 03:52:30,080
We get the plot, so we could send that to someone, or we can send the entire notebook

1723
03:52:30,080 --> 03:52:32,760
as a single file to someone.

1724
03:52:32,760 --> 03:52:36,800
If they know how to run JupyterLab, then they know what to do with that file, and they can

1725
03:52:36,800 --> 03:52:38,800
reproduce everything.

1726
03:52:38,800 --> 03:52:47,360
They can even tweak the analysis a bit and then send us back the notebook, or even better,

1727
03:52:47,360 --> 03:52:51,960
use version control, and then we can edit it together to get some final result.

1728
03:52:51,960 --> 03:52:55,800
Exactly, and that is what we are going to be doing in the following,

1729
03:52:55,800 --> 03:52:59,720
see how we can actually version control our notebooks.

1730
03:53:01,640 --> 03:53:08,200
Yeah, so the essential point is this is the whole story, this is not just a code,

1731
03:53:08,200 --> 03:53:12,760
and this is not just a plot, and also it's not just a description we write in the email,

1732
03:53:12,760 --> 03:53:18,520
it contains all of those in one place, so that's a useful thing.

1733
03:53:18,520 --> 03:53:33,560
Okay, so here I have the materials open and the next section is notebooks and version control.

1734
03:53:40,360 --> 03:53:41,160
Okay, sorry.

1735
03:53:41,160 --> 03:53:50,360
Okay, so I'm guessing we will then use version control to put this notebook into version

1736
03:53:50,360 --> 03:53:56,000
control and then maybe put it on GitHub or similar.

1737
03:53:56,000 --> 03:54:11,200
Exactly, and in order to be able to show different, I mean, sorry, to show the differences among

1738
03:54:11,200 --> 03:54:19,920
different plots, then it's very important that we do have some packages, additional

1739
03:54:19,920 --> 03:54:28,560
package installed, and that is nbdime, which is a dependency in our code refinery environment,

1740
03:54:29,200 --> 03:54:34,160
and that is the reason why we have it, so that we can show these different

1741
03:54:35,360 --> 03:54:44,160
changes in the notebooks in a meaningful way. Yeah, so the notebook is stored as a JSON file.

1742
03:54:44,160 --> 03:54:48,960
You don't necessarily exactly need to know what that is, but it's a text file. So it is a text

1743
03:54:48,960 --> 03:54:54,960
file. You can version it, but let's just take this notebook and open it in a text editor.

1744
03:54:55,920 --> 03:55:00,720
So this is what it looks like and mostly it looks fine. It looks like something that would

1745
03:55:00,720 --> 03:55:05,040
go to version control, although you probably, maybe you still wouldn't want to look at this

1746
03:55:05,760 --> 03:55:13,520
changes in this. You would rather look at changes in this format, but this is the bad part.

1747
03:55:13,520 --> 03:55:23,520
This is the image. It's this image and changes here will just be one huge bunch of changes.

1748
03:55:24,720 --> 03:55:28,320
That makes it quite unclear. Of course, there's a lot of metadata and all of that.

1749
03:55:31,040 --> 03:55:36,960
Looking at changes here might look very unclear and you do want a better interface.

1750
03:55:36,960 --> 03:55:43,960
So, should we try the nbdime interface, or do we just look at the comparison?

1751
03:55:43,960 --> 03:55:51,160
So, at least I think we should show how we can initialize this directory as a git repository

1752
03:55:51,160 --> 03:55:52,160
in JupyterLab.

1753
03:55:52,160 --> 03:55:59,160
Yes, so here is JupyterLab again, and here where we have this folder view, we also have

1754
03:55:59,160 --> 03:56:03,960
the git section, and I guess we click initialize repository.

1755
03:56:03,960 --> 03:56:04,960
Exactly.

1756
03:56:04,960 --> 03:56:06,000
So let's see what happens.

1757
03:56:08,720 --> 03:56:09,360
Yes, I do.

1758
03:56:11,520 --> 03:56:15,360
Okay, there's a checkpoint file. I don't know what that is.

1759
03:56:15,360 --> 03:56:20,320
Yeah, so checkpoint is a temporary file that Jupyter Notebook uses,

1760
03:56:20,320 --> 03:56:22,480
and I would actually ignore that file.

1761
03:56:22,480 --> 03:56:28,000
So there is an option just to click on that and add it to git ignore.

1762
03:56:29,680 --> 03:56:32,560
So right click and add to git ignore.

1763
03:56:32,560 --> 03:56:33,360
Okay, that's nice.

1764
03:56:33,360 --> 03:56:34,360
Yes.

1765
03:56:34,360 --> 03:56:35,360
That's convenient.

1766
03:56:35,360 --> 03:56:36,360
Okay.

1767
03:56:36,360 --> 03:56:44,360
So, I've created a new file, because I didn't have a gitignore file before, and added it

1768
03:56:44,360 --> 03:56:45,360
here.

1769
03:56:45,360 --> 03:56:46,360
Exactly.

1770
03:56:46,360 --> 03:56:47,360
Okay, so that's nice.

1771
03:56:47,360 --> 03:56:48,360
We'll close the gitignore file for now.

1772
03:56:48,360 --> 03:56:49,360
Okay.

1773
03:56:49,360 --> 03:56:52,360
And then what we'll want is to track this change.

1774
03:56:52,360 --> 03:56:53,360
Yeah.

1775
03:56:53,360 --> 03:56:54,360
To demo.

1776
03:56:54,360 --> 03:56:57,960
So, now these are both untracked, so I guess, is it this one?

1777
03:56:57,960 --> 03:56:58,960
No.

1778
03:56:58,960 --> 03:56:59,960
This one.

1779
03:56:59,960 --> 03:57:00,960
Plus.

1780
03:57:00,960 --> 03:57:01,960
Button.

1781
03:57:01,960 --> 03:57:02,960
And also, I suppose, this one.

1782
03:57:02,960 --> 03:57:08,560
yes for an initial commit okay so now we can write our commit message

1783
03:57:12,560 --> 03:57:17,680
and the description if we want yeah i'm doing two changes at the same time but

1784
03:57:17,680 --> 03:57:21,280
also this is the first commit so it this is the whole repository

1785
03:57:23,600 --> 03:57:29,520
okay okay so now there's nothing staged nothing changed nothing untracked it's all there

1786
03:57:29,520 --> 03:57:35,120
Okay, so we have our very first commit on the master branch.

1787
03:57:35,120 --> 03:57:36,120
Yes.

1788
03:57:36,120 --> 03:57:39,640
It may be the main branch for you.

1789
03:57:39,640 --> 03:57:40,640
Yeah.

1790
03:57:40,640 --> 03:57:41,640
Okay.

1791
03:57:41,640 --> 03:57:44,640
Is that all?

1792
03:57:44,640 --> 03:57:49,680
I know I should make a change to the notebook.

1793
03:57:49,680 --> 03:57:50,960
So what should I change?

1794
03:57:50,960 --> 03:57:54,040
I guess like this is a big plot.

1795
03:57:54,040 --> 03:57:55,040
There's too many points.

1796
03:57:55,040 --> 03:57:56,040
Yeah.

1797
03:57:56,040 --> 03:57:59,360
I want to make it smaller before I...

1798
03:57:59,360 --> 03:58:07,560
do that. And then rerun the whole thing. You share this with someone else, you don't want

1799
03:58:07,560 --> 03:58:17,520
it unnecessarily heavy. Yeah. I could also remove this iframe. Let's do that too. And

1800
03:58:17,520 --> 03:58:24,440
I didn't change the code, but still I do want to rerun the whole thing. Yeah. Oops. It's

1801
03:58:24,440 --> 03:58:33,880
always a good idea before saving. Yeah, then save and yeah it looks nice. Okay, so now

1802
03:58:33,880 --> 03:58:48,560
I have some changes and here is div this file. So what does this look like? Maybe, okay.

1803
03:58:48,560 --> 03:58:51,880
So one difference is that the iframe is gone.

1804
03:58:51,880 --> 03:58:53,040
Yeah.

1805
03:58:53,040 --> 03:58:57,400
So what is this saying?

1806
03:58:57,400 --> 03:59:00,840
So it's the difference between your current version

1807
03:59:00,840 --> 03:59:02,720
to the right and then the head, which

1808
03:59:02,720 --> 03:59:05,280
was your previous commit.

1809
03:59:05,280 --> 03:59:06,520
So that is what we are doing.

1810
03:59:06,520 --> 03:59:09,200
I wonder if it was wider, would this look better up here?

1811
03:59:09,200 --> 03:59:09,760
I don't know.

1812
03:59:09,760 --> 03:59:12,960
Yeah, it's always tricky with narrow windows.

1813
03:59:12,960 --> 03:59:15,200
Yeah.

1814
03:59:15,200 --> 03:59:17,520
OK.

1815
03:59:17,520 --> 03:59:22,720
now. And then there's the change in the number of points. Everything else looks roughly the same,

1816
03:59:23,360 --> 03:59:26,560
but then there is this plot that has changed.

1817
03:59:28,640 --> 03:59:37,040
Yeah. And also the result. Exactly. So the green one is the current version and the red one,

1818
03:59:37,040 --> 03:59:40,560
the red labeled one is the one of our previous commit.

1819
03:59:42,720 --> 03:59:46,080
Because that is what we are comparing against in this case.

1820
03:59:46,080 --> 03:59:46,580
Yeah.

1821
03:59:47,600 --> 03:59:51,200
Useful, useful to have this embedime for plots.

1822
03:59:52,400 --> 03:59:52,900
Okay.

1823
03:59:54,400 --> 04:00:01,120
So now here's the Git interface.

1824
04:00:01,120 --> 04:00:02,480
Let's add this.

1825
04:00:04,960 --> 04:00:11,440
Reduce the number of points and commit.

1826
04:00:12,160 --> 04:00:12,660
Okay.

1827
04:00:13,120 --> 04:00:15,040
So yeah, now we're tracking this on Git.

1828
04:00:15,040 --> 04:00:26,240
and we have a nice interface for looking at the changes in the files. Okay. There's also

1829
04:00:26,240 --> 04:00:34,640
a point here in the notes. Well, first the point about GitHub. So, do I have a GitHub page open?

1830
04:00:34,640 --> 04:00:43,200
Not right now. I will open one. So, GitHub has a feature. Oh, no. Not there.

1831
04:00:43,200 --> 04:00:47,840
No, it's on your picture, so if you click on your picture.

1832
04:00:47,840 --> 04:00:55,360
And then you need to go to Feature Preview and reach Jupyter Notebook diffs.

1833
04:00:55,360 --> 04:01:03,000
Yeah, so this is uncommented by default. I mean, no, sorry, it is disabled by default

1834
04:01:03,000 --> 04:01:09,360
and then you can activate it if you have reference containing notebooks.

1835
04:01:09,360 --> 04:01:15,240
So if you don't have this active, it will look like a diff of the JSON file, which is

1836
04:01:15,240 --> 04:01:17,800
not easy to read.

1837
04:01:17,800 --> 04:01:30,640
If you have it enabled, then it will use the nbdime to display the difference.

1838
04:01:30,640 --> 04:01:35,120
So yeah, it's good to enable this one.

1839
04:01:35,120 --> 04:01:45,000
is also here. We have an example in our lesson material. Just higher up. I think it would

1840
04:01:45,000 --> 04:01:51,320
be nice to show it. So yeah. Right. Just above the Jupyter notebooks. Notebook diff.

1841
04:01:51,320 --> 04:02:00,800
This one. A bit higher up. A bit higher up. Yeah. So I mean you have the link there where

1842
04:02:00,800 --> 04:02:11,200
you have this comparison between the two. Okay. No bits, just 35% from the top. Yes. Okay.

1843
04:02:12,000 --> 04:02:19,280
So this goes to a GitHub, a comparison of two different notebooks

1844
04:02:21,520 --> 04:02:28,640
and they have changed red to orange and changed the size of the plot and then the plot does look

1845
04:02:28,640 --> 04:02:40,320
different. Should I demonstrate this with the rich diff off? It might look like this.

1846
04:02:43,040 --> 04:02:49,280
If you see a difference between notebooks looking like this and it's hard to read,

1847
04:02:49,280 --> 04:02:56,280
Then, this is a big one, loads of image data.

1848
04:02:56,280 --> 04:02:57,280
Okay.

1849
04:02:57,280 --> 04:03:01,280
Imagine if you had several of these fingers.

1850
04:03:01,280 --> 04:03:02,280
Yeah.

1851
04:03:02,280 --> 04:03:07,280
So I'm turning it back on.

1852
04:03:07,280 --> 04:03:08,280
Okay.

1853
04:03:08,280 --> 04:03:13,280
So that's a useful feature.

1854
04:03:13,280 --> 04:03:21,480
So you can turn the same thing on in Git on your command line by default or I think this

1855
04:03:21,480 --> 04:03:26,500
essentially applies to most places where you use Git as long as it is Git that's actually

1856
04:03:26,500 --> 04:03:31,560
opening the difference and displaying the difference.

1857
04:03:31,560 --> 04:03:40,400
So you can run this command on the command line and it will use nbdime when you do differences

1858
04:03:40,400 --> 04:03:41,760
of notebooks.

1859
04:03:41,760 --> 04:03:45,840
I will not demonstrate this, though, because I have nbdime in the code refinery environment,

1860
04:03:45,840 --> 04:03:51,360
but it might break git otherwise. So, you need to have nbdime installed for this to work,

1861
04:03:51,360 --> 04:03:55,440
and I don't. Okay.

1862
04:03:59,200 --> 04:04:07,040
So, yeah, there's also this git-friendly Jupyter notebooks from the nbdev, which is a nice

1863
04:04:07,040 --> 04:04:18,320
option, a different way of essentially achieving the same thing, and this JupyterLab extension

1864
04:04:18,320 --> 04:04:29,600
that records history. So that's also useful. Okay. Should we, what do you think, should

1865
04:04:29,600 --> 04:04:32,120
we have the break before the sharing?

1866
04:04:32,120 --> 04:04:43,020
Yeah, I think now it's a good time to have a break, and then we can go into sharing notebooks

1867
04:04:43,020 --> 04:04:46,220
and working with Binder just after the break.

1868
04:04:46,220 --> 04:04:55,140
So I suggest 10 minutes, and then three past the hour, then we are back with that.

1869
04:04:55,140 --> 04:04:58,740
So there was just a question of what is NBDIME, which I guess...

1870
04:04:58,740 --> 04:05:07,780
So we showed this difference in Notebooks, but we did say that it's nbdime, but most

1871
04:05:07,780 --> 04:05:09,380
of the time it's hidden.

1872
04:05:09,380 --> 04:05:16,100
So nbdime is what is actually creating this difference between the Notebooks so that it

1873
04:05:16,100 --> 04:05:21,980
looks like this and it looks like this rather than looking like this.

1874
04:05:21,980 --> 04:05:22,980
So this is nbdime.

1875
04:05:22,980 --> 04:05:23,980
Yeah.

1876
04:05:23,980 --> 04:05:27,420
So it's actually a PyPy package,

1877
04:05:27,420 --> 04:05:29,420
but in this case, actually, you can also install it

1878
04:05:29,420 --> 04:05:30,260
with Conda.

1879
04:05:30,260 --> 04:05:34,340
So it's one, a dependency that we have in our environment,

1880
04:05:34,340 --> 04:05:39,340
which allows us to show these differences in the plots

1881
04:05:39,980 --> 04:05:44,980
in a easy to view way.

1882
04:05:47,820 --> 04:05:50,460
Visually nice way of doing the differences.

1883
04:05:51,980 --> 04:05:52,820
Okay.

1884
04:05:53,980 --> 04:06:01,660
Should we say, well, let's do 10 minutes, so back at four past, or five past?

1885
04:06:01,660 --> 04:06:02,660
Why not five past?

1886
04:06:02,660 --> 04:06:03,660
11 minutes.

1887
04:06:03,660 --> 04:06:04,660
That's fine.

1888
04:06:04,660 --> 04:06:05,660
Okay then, let's give them an extra minute.

1889
04:06:05,660 --> 04:06:06,660
Yes.

1890
04:06:06,660 --> 04:06:07,660
I'll do that.

1891
04:06:07,660 --> 04:06:08,660
All right.

1892
04:06:08,660 --> 04:06:09,660
So, have a good break.

1893
04:06:09,660 --> 04:06:10,160
Bye.

1894
04:06:23,980 --> 04:06:26,040
you

1895
04:06:53,980 --> 04:06:56,040
you

1896
04:07:23,980 --> 04:07:26,040
you

1897
04:07:53,980 --> 04:07:56,040
you

1898
04:08:23,980 --> 04:08:26,040
you

1899
04:08:53,980 --> 04:08:56,040
you

1900
04:09:23,980 --> 04:09:26,040
you

1901
04:09:53,980 --> 04:09:56,040
you

1902
04:10:23,980 --> 04:10:26,040
you

1903
04:10:53,980 --> 04:10:56,040
you

1904
04:11:23,980 --> 04:11:26,040
you

1905
04:11:53,980 --> 04:11:56,040
you

1906
04:12:23,980 --> 04:12:26,040
you

1907
04:12:53,980 --> 04:12:56,040
you

1908
04:13:23,980 --> 04:13:26,040
you

1909
04:13:53,980 --> 04:13:56,040
you

1910
04:14:23,980 --> 04:14:26,040
you

1911
04:14:53,980 --> 04:14:56,040
you

1912
04:15:23,980 --> 04:15:26,040
you

1913
04:15:53,980 --> 04:15:56,040
you

1914
04:16:23,980 --> 04:16:26,040
you

1915
04:16:53,980 --> 04:16:56,040
you

1916
04:17:23,980 --> 04:17:40,980
I will come back hope you had a good break so anything to bring up in the notes so go

1917
04:17:40,980 --> 04:17:41,980
ahead.

1918
04:17:41,980 --> 04:17:52,900
Yes I mean we do need a couple of dependencies to make this lesson material work so as we

1919
04:17:52,900 --> 04:18:06,900
mentioned we have JupyterLab and also the nbdynmi package that allows us to do the diffs between

1920
04:18:07,620 --> 04:18:17,220
different plots and maybe you do not have that installed and then we recommend that you just

1921
04:18:17,220 --> 04:18:20,620
just watch this as a demo later on.

1922
04:18:20,620 --> 04:18:24,180
Maybe you want to set that up if you work a lot with Python,

1923
04:18:24,180 --> 04:18:27,220
and then you can try again on your own.

1924
04:18:30,340 --> 04:18:34,500
So essentially, what you might be missing

1925
04:18:34,500 --> 04:18:39,900
is jupyterlab-git, and then nbdime.

1926
04:18:39,900 --> 04:18:50,940
so you can try installing those later and then redoing the demonstration yourself.

1927
04:18:53,100 --> 04:18:59,900
Okay, so the next section is sharing Jupyter notebooks or sharing notebooks.

1928
04:19:07,020 --> 04:19:07,980
When have you shared code?

1929
04:19:09,900 --> 04:19:15,900
you think of situations where you have had to share some code

1930
04:19:18,300 --> 04:19:24,620
so have you shared code to yourself so that you can work on two different computers

1931
04:19:26,060 --> 04:19:28,060
that's of course a common issue

1932
04:19:30,380 --> 04:19:36,460
have you maybe shared to a larger audience on a website or in some other way

1933
04:19:36,460 --> 04:19:42,380
or to a colleague where you possibly both want to make some changes.

1934
04:19:48,460 --> 04:19:51,420
So, of course, last week, the whole week, we were talking about Git

1935
04:19:52,060 --> 04:19:56,220
and that solves exactly this problem in all of those situations, right?

1936
04:19:59,580 --> 04:20:03,100
And nbdime is helpful and you can use Git with Jupyter notebooks.

1937
04:20:03,100 --> 04:20:11,100
But one thing that Git doesn't allow you to do is editing the same file at the same time.

1938
04:20:11,100 --> 04:20:17,100
You will at least need to be editing on your side offline and then sharing, committing and sharing.

1939
04:20:17,100 --> 04:20:27,100
And yeah, there's a bunch of, a number of different ways of sharing these notebooks that might be useful in some of these situations.

1940
04:20:27,100 --> 04:20:36,140
So what should we say about this?

1941
04:20:36,140 --> 04:20:42,300
So I think there are many different options and different ways to share a notebook and

1942
04:20:42,300 --> 04:20:47,420
we have listed the ones we know about in the lesson material.

1943
04:20:47,420 --> 04:20:53,420
I would say that my preferred way is putting it on GitHub, but of course you can put it

1944
04:20:53,420 --> 04:21:06,380
on other platforms that you prefer. And then I would like to use that in connection to Binder

1945
04:21:06,380 --> 04:21:11,980
and share notebooks that way. Yeah. So we'll demonstrate Binder. That's nice.

1946
04:21:13,900 --> 04:21:20,140
There's also Notebook Viewer, very similar. And yeah, JupyterLab now does support this

1947
04:21:20,140 --> 04:21:24,060
collaborative shared editing, so you can edit the same notebook at the same time.

1948
04:21:24,060 --> 04:21:26,300
Yeah, that's also nice. That is useful.

1949
04:21:28,780 --> 04:21:33,420
But yeah, for long term, definitely a good repository with Binder is also what I do.

1950
04:21:34,620 --> 04:21:39,580
But yeah, there's a bunch of options that you can look through and see what works for you.

1951
04:21:41,580 --> 04:21:46,540
Okay. Oh, here's some other options, the commercial options that have free plans.

1952
04:21:46,540 --> 04:21:58,300
Okay. But let's go to Binder. So, the first thing, if you want to share your code so that

1953
04:21:58,300 --> 04:22:02,700
people can edit it on Binder, I think the first thing you have to do is you have to

1954
04:22:02,700 --> 04:22:09,500
share the code. You have to get it online. So, let's do that.

1955
04:22:09,500 --> 04:22:27,820
Yeah, so we'll use GitHub to create a repository and track this Jupyter Notebook, yeah.

1956
04:22:27,820 --> 04:22:35,220
I guess I will go, oh, there I can create a new repository, okay.

1957
04:22:35,220 --> 04:22:41,620
So the idea is that I share my new notebook that I wrote in the last hour.

1958
04:22:41,620 --> 04:22:44,620
I will share it to this repository.

1959
04:22:44,620 --> 04:22:45,620
Okay.

1960
04:22:45,620 --> 04:22:47,620
So what should I call it?

1961
04:22:47,620 --> 04:22:55,260
Let's just, this was called, oh, the notebook I just created was called demo.ipythonnotebook.

1962
04:22:55,260 --> 04:22:56,260
So.

1963
04:22:56,260 --> 04:22:57,260
Yeah.

1964
04:22:57,260 --> 04:23:01,260
But you can have binder demo or whatever.

1965
04:23:01,260 --> 04:23:02,260
Yeah.

1966
04:23:02,260 --> 04:23:07,220
Yeah, bind to demo makes sense, and I'll add a readme file.

1967
04:23:09,620 --> 04:23:12,740
I already have a gitignore file in the repository, so I don't want that one.

1968
04:23:15,780 --> 04:23:21,460
I'll just use MIT license. I'm not going to keep this for very long, I think, so

1969
04:23:22,660 --> 04:23:26,420
adding a license may be a bit extra, but I like to do it.

1970
04:23:26,420 --> 04:23:38,020
Okay, so then we upload the files that we already have, the notebook files, if I find here.

1971
04:23:39,140 --> 04:23:45,380
Yeah, so we click on that plus button next to code and upload files, because we already have

1972
04:23:45,380 --> 04:23:53,700
these saved on our local computers. Otherwise, you can edit it on GitHub as well. Yeah.

1973
04:23:53,700 --> 04:23:55,460
Yeah.

1974
04:23:55,460 --> 04:23:59,220
OK, then choose files.

1975
04:23:59,220 --> 04:24:04,220
And then I have to find source, code refinery, JupyterLab

1976
04:24:04,220 --> 04:24:06,620
demo, demo notebook.

1977
04:24:06,620 --> 04:24:07,980
It doesn't list the gitignore.

1978
04:24:07,980 --> 04:24:09,220
Oh, what is happening?

1979
04:24:09,220 --> 04:24:10,580
OK.

1980
04:24:10,580 --> 04:24:11,380
It's a hidden file.

1981
04:24:11,380 --> 04:24:13,540
Because it starts with a dot, so it's a hidden file.

1982
04:24:13,540 --> 04:24:14,180
So here we go.

1983
04:24:14,180 --> 04:24:15,460
There's also a dot git and dot.

1984
04:24:15,460 --> 04:24:17,220
OK.

1985
04:24:17,220 --> 04:24:18,220
Can I upload two files?

1986
04:24:18,220 --> 04:24:19,820
I think you can only do one at a time.

1987
04:24:19,820 --> 04:24:20,420
I'm not sure.

1988
04:24:20,420 --> 04:24:21,260
Yeah.

1989
04:24:21,260 --> 04:24:23,580
Let's try.

1990
04:24:23,580 --> 04:24:27,580
Okay. Very good.

1991
04:24:32,580 --> 04:24:36,580
Upload demo notebook.

1992
04:24:37,580 --> 04:24:41,580
Okay.

1993
04:24:42,580 --> 04:24:45,580
And now we have the two files, demo notebook and gitignore.

1994
04:24:45,580 --> 04:24:49,580
And a pretty empty readme file.

1995
04:24:49,580 --> 04:24:52,580
Okay, so what do we need?

1996
04:24:52,580 --> 04:24:58,580
Well, what do we need? We need a requirements file, right?

1997
04:24:58,580 --> 04:24:59,580
Exactly.

1998
04:24:59,580 --> 04:25:03,580
So that Binder knows what packages to install.

1999
04:25:03,580 --> 04:25:06,580
So let's create a new file.

2000
04:25:06,580 --> 04:25:13,580
And in this case, we'll create a normal text file and not upload.

2001
04:25:13,580 --> 04:25:25,740
Okay and at matplotlib the specific version for actually I don't know if this is the version I

2002
04:25:25,740 --> 04:25:29,100
have there. I guess in the code refinery environment I assume we have this version

2003
04:25:29,660 --> 04:25:36,700
because this is in the nodes but probably the exact version doesn't matter.

2004
04:25:36,700 --> 04:25:42,700
Oh, this needs to be called requirements.txt.

2005
04:25:42,700 --> 04:25:51,700
Yes, or you can also work with environment.yaml, but then the syntax is a bit different.

2006
04:25:51,700 --> 04:25:59,700
Yeah, so if Binder sees a requirements.txt file in the repository, it knows this is Python code,

2007
04:25:59,700 --> 04:26:02,700
and then it will install the libraries mentioned in the file.

2008
04:26:02,700 --> 04:26:15,700
In an environment of YAML, for example, you can add Python as a dependency or you can add R or whichever you want, as long as it's available on Conda.

2009
04:26:15,700 --> 04:26:33,300
And I'll quickly show in the notes, so for Python Jupyter Notebooks, this is what you

2010
04:26:33,300 --> 04:26:41,300
need or environment.yaml, but there is also R Markdown, RStudio Notebooks, and there you

2011
04:26:41,300 --> 04:26:48,420
have this runtime.txt instead. So otherwise it's similar. There are some different requirements

2012
04:26:48,420 --> 04:26:54,420
for the notebook because it would use different plotting libraries, our libraries. Okay.

2013
04:26:58,260 --> 04:27:01,940
This is the notebook. This is the github page. Okay, so comment changes.

2014
04:27:01,940 --> 04:27:14,980
okay is that all we need i think so it is so now the question is how then how can we

2015
04:27:15,540 --> 04:27:23,940
link this to binder or how we can use uh to show this uh this notebook in binder yeah so for that

2016
04:27:23,940 --> 04:27:34,260
we need to go to, I'll start opening a new browser, a new tab, and go to mybinder.org.

2017
04:27:35,380 --> 04:27:40,500
It's trying to fill in something, another repository, but I'll just go to mybinder.org.

2018
04:27:42,820 --> 04:27:50,500
Okay, and then here you can fill in your GitHub repository name or URL.

2019
04:27:50,500 --> 04:27:58,260
So, maybe you could show that you can actually work with other platforms.

2020
04:27:58,260 --> 04:28:06,100
If you click on the down arrow next to GitHub, yeah, so you can choose from different ones

2021
04:28:06,100 --> 04:28:07,660
where you have your notebooks.

2022
04:28:07,660 --> 04:28:15,500
There's another ones are nice because you also have a DOI, a digital object identifier,

2023
04:28:15,500 --> 04:28:20,060
that may be useful, especially if you want to refer to them in papers.

2024
04:28:22,380 --> 04:28:29,180
Yeah, but we'll use GitHub today. Yeah. Yeah, right. Okay. Yes. It's good that you can connect

2025
04:28:29,180 --> 04:28:34,380
to a lot of things. Even a general Git repository, you just need to have an HTTP server

2026
04:28:35,420 --> 04:28:43,900
at that point to that Git repository. Okay. So, I will use the URL from here.

2027
04:28:45,500 --> 04:28:48,500
Let's go to the main page first.

2028
04:28:48,500 --> 04:28:53,500
Okay. So then you just copy paste the main page of the repository.

2029
04:28:53,500 --> 04:28:55,500
Yeah.

2030
04:28:55,500 --> 04:28:59,500
Please make sure that you don't have the branch name.

2031
04:28:59,500 --> 04:29:02,500
Yeah. Right. That comes later.

2032
04:29:02,500 --> 04:29:05,500
Yeah. Sometimes, especially if you create a new file,

2033
04:29:05,500 --> 04:29:10,500
it actually goes to where I just was, which is tree slash main.

2034
04:29:10,500 --> 04:29:14,500
And that I think will not work.

2035
04:29:14,500 --> 04:29:19,780
Because that is actually defined in the next...

2036
04:29:19,780 --> 04:29:20,780
Right.

2037
04:29:20,780 --> 04:29:29,700
Yes, you can give a branch name or a tag here or even a commit ID, anything committee, anything

2038
04:29:29,700 --> 04:29:31,940
that points to a commit.

2039
04:29:31,940 --> 04:29:36,940
By default it will take whatever happens to be the default when you clone it, which is

2040
04:29:36,940 --> 04:29:37,940
the main branch.

2041
04:29:37,940 --> 04:29:38,940
Yeah, exactly.

2042
04:29:38,940 --> 04:29:45,820
Exactly. You can define the default branch, but in our case, it's the main branch on GitHub.

2043
04:29:47,660 --> 04:29:49,500
And the head is just the latest commit.

2044
04:29:50,380 --> 04:29:56,700
Yeah. And then you can give the path of the notebook file that you want it to open by default.

2045
04:29:56,700 --> 04:29:59,580
You can have multiple notebook files, and it will have a file browser.

2046
04:30:00,300 --> 04:30:04,540
But in this case, we have a single notebook file, so we want to open it by default.

2047
04:30:04,540 --> 04:30:16,580
default. So demo.ipythonnotebook. Okay. And I can launch it from here.

2048
04:30:16,580 --> 04:30:22,960
And then also, so exactly. So this URL that you get is very useful actually if you want

2049
04:30:22,960 --> 04:30:29,960
to share it with others. And I suggest that we also add it to our readme on the GitHub

2050
04:30:29,960 --> 04:30:38,920
repository and that way whomever is going through your code can also see an instance of this.

2051
04:30:39,480 --> 04:30:44,360
Let's go back to GitHub and we can edit the readme here.

2052
04:30:47,720 --> 04:30:48,220
Yes.

2053
04:30:52,200 --> 04:30:57,240
There is also a badge that does the same thing because in the previous session we were talking

2054
04:30:57,240 --> 04:31:03,080
about batches a little bit. So this is for Markdown.

2055
04:31:05,080 --> 04:31:11,960
So let's add it again. And this is a URL.

2056
04:31:11,960 --> 04:31:15,880
And the batch is actually a link that points to the same URL,

2057
04:31:15,880 --> 04:31:18,680
but it's an image.

2058
04:31:18,680 --> 04:31:27,900
Okay. So now it looks like this. Both of these are links, so it doesn't really matter. They

2059
04:31:27,900 --> 04:31:33,120
point to the same thing. This is just, this looks a bit nicer. Well, it depends on what

2060
04:31:33,120 --> 04:31:42,140
you prefer. But yeah, so from here you can then directly launch. So I could click the

2061
04:31:42,140 --> 04:31:47,280
launch button here, fill in the information, but instead I'm going to click the launch

2062
04:31:47,280 --> 04:31:55,400
button from here. There we go. And again, it might take a while. Now, it only has one

2063
04:31:55,400 --> 04:32:05,040
dependency to install, but it actually sets up the whole system. Actually, it's pretty

2064
04:32:05,040 --> 04:32:09,920
quick. Now, it's installing Matplotlib, so it's pretty far already.

2065
04:32:09,920 --> 04:32:17,800
So this will fire up a container on the cloud with the vJupyter

2066
04:32:17,800 --> 04:32:21,960
and vJupyterLab and the dependencies

2067
04:32:21,960 --> 04:32:25,960
that you have in your requirements file.

2068
04:32:30,720 --> 04:32:33,400
It also has a preview of the file here.

2069
04:32:33,400 --> 04:32:35,080
Yes, for the impatient ones.

2070
04:32:35,080 --> 04:32:38,000
That's very useful that you know.

2071
04:32:38,000 --> 04:32:40,400
I just can't run it yet.

2072
04:32:40,400 --> 04:32:46,280
Yeah, you know what to expect when it's going to fire up.

2073
04:32:46,280 --> 04:33:00,280
OK, so what do we do while we wait?

2074
04:33:00,280 --> 04:33:02,000
Am I also too impatient?

2075
04:33:02,000 --> 04:33:06,480
Well, we can check the preview.

2076
04:33:06,480 --> 04:33:08,920
Yeah, this one.

2077
04:33:08,920 --> 04:33:10,680
Yeah.

2078
04:33:10,680 --> 04:33:16,680
So it's basically what we had in our local notebook.

2079
04:33:16,680 --> 04:33:17,180
Yeah.

2080
04:33:22,640 --> 04:33:24,320
Any questions, comments?

2081
04:33:24,320 --> 04:33:42,960
So they are all answered, but I mean, of course, the question is when to just have the notebooks

2082
04:33:42,960 --> 04:33:47,200
on your own computer and when you actually want to have them on Binder.

2083
04:33:47,200 --> 04:33:58,240
And I think that it is always good to have your codes or notebooks saved on some other

2084
04:33:58,240 --> 04:34:01,080
platform.

2085
04:34:01,080 --> 04:34:09,920
And maybe you are not ready to share them with your colleagues yet, but it's good for

2086
04:34:09,920 --> 04:34:13,000
you to reference later on.

2087
04:34:13,000 --> 04:34:19,360
And when you are ready to share them with others, then you can do that.

2088
04:34:19,360 --> 04:34:20,360
Yeah.

2089
04:34:20,360 --> 04:34:26,920
I guess essentially, of course, I've been using these tools for a while, but at this

2090
04:34:26,920 --> 04:34:35,240
point I would never really have a code that's at least more than an hour old that's only

2091
04:34:35,240 --> 04:34:42,480
on my laptop that feels very insecure, like it might crash at any moment and I might lose

2092
04:34:42,480 --> 04:34:46,320
all of that hour of work. So, I will push it to some online repository.

2093
04:34:47,200 --> 04:34:51,440
Now, there are options for private repositories.

2094
04:34:54,800 --> 04:35:04,560
Many institutions will have their own GitLab instance, for example. So, it's a good option

2095
04:35:04,560 --> 04:35:08,560
to check that out. And GitHub does have private repositories, and so does GitLab.

2096
04:35:08,560 --> 04:35:11,560
So those are also options.

2097
04:35:11,560 --> 04:35:17,560
Or you can run a server and push your changes to that server.

2098
04:35:17,560 --> 04:35:19,560
That's always also an option.

2099
04:35:21,560 --> 04:35:26,560
Yeah, so now what's opened is a browser window

2100
04:35:26,560 --> 04:35:32,560
and the backbone of this is actually the cloud instance that you have on Binder.

2101
04:35:32,560 --> 04:35:41,920
It's just that it's using your browser interface to visualize the notebook.

2102
04:35:41,920 --> 04:35:48,480
So we can inspect this notebook, and what happens if we make changes to this notebook?

2103
04:35:48,480 --> 04:35:53,840
Let's say that one of the collaborators comes, he or she got this URL from you and wants

2104
04:35:53,840 --> 04:36:00,320
to make changes to the notebook or just play around, and maybe, I don't know.

2105
04:36:00,320 --> 04:36:06,600
So yeah, I mean, it's the big thing in Binder is that you can run the code, first of all.

2106
04:36:06,600 --> 04:36:10,800
So I can go through and run the process.

2107
04:36:10,800 --> 04:36:15,640
It's somewhere, running somewhere on the cloud, and now I'm just redoing the same thing.

2108
04:36:15,640 --> 04:36:19,440
Yeah, so the advantage is that they don't even need to have JupyterLab installed on

2109
04:36:19,440 --> 04:36:20,440
their computer.

2110
04:36:20,440 --> 04:36:25,120
They can just run it on the cloud.

2111
04:36:25,120 --> 04:36:26,240
So that's fun.

2112
04:36:26,240 --> 04:36:36,240
went wrong. Something went wrong in the plotting.

2113
04:36:36,240 --> 04:36:41,800
Could we miss dependencies?

2114
04:36:41,800 --> 04:36:54,120
It's complaining about NumPy infinities somehow. It happens every time though. Oh, so here

2115
04:36:54,120 --> 04:36:57,380
There's a deprecated thing.

2116
04:36:57,380 --> 04:37:03,900
So I think the dependencies we have installed are conflicting with each other, the matplotlib

2117
04:37:03,900 --> 04:37:04,900
and the numpy.

2118
04:37:04,900 --> 04:37:05,900
Yeah.

2119
04:37:05,900 --> 04:37:12,100
Well, we have not really listed numpy as a dependency, so we would need to go back to

2120
04:37:12,100 --> 04:37:15,500
our requirements file and add that.

2121
04:37:15,500 --> 04:37:16,500
Yeah.

2122
04:37:16,500 --> 04:37:20,860
So we don't really have time to do that, I think.

2123
04:37:20,860 --> 04:37:28,980
But this will clearly demonstrate that we did run this on the cloud.

2124
04:37:28,980 --> 04:37:36,100
And interestingly, it didn't actually work, but we did get the result in the end.

2125
04:37:36,100 --> 04:37:43,780
I can try to add something to the code.

2126
04:37:43,780 --> 04:37:46,740
And the advantage, what?

2127
04:37:46,740 --> 04:37:49,380
And then run it.

2128
04:37:49,380 --> 04:37:52,500
So yeah, it is actually, you can make changes to the code

2129
04:37:52,500 --> 04:37:54,700
and it will run the code that you see.

2130
04:37:56,820 --> 04:37:58,540
Exactly, and this is not going to change

2131
04:37:58,540 --> 04:38:01,380
your original file on GitHub.

2132
04:38:01,380 --> 04:38:03,640
So this is all done in this cloud instance

2133
04:38:03,640 --> 04:38:07,980
and you may modify it as much as you want.

2134
04:38:11,220 --> 04:38:16,180
But if you do want to save changes to this notebook,

2135
04:38:16,180 --> 04:38:17,460
how can you do that?

2136
04:38:17,460 --> 04:38:20,460
If I do want to save the changes.

2137
04:38:20,460 --> 04:38:27,460
I have a great idea and then you want to save it.

2138
04:38:27,460 --> 04:38:29,460
It looks like I can do something with GitHub.

2139
04:38:29,460 --> 04:38:32,460
I think there is a file.

2140
04:38:32,460 --> 04:38:37,460
If you go to file, the top menu and then save as.

2141
04:38:37,460 --> 04:38:38,460
Okay.

2142
04:38:38,460 --> 04:38:40,460
Or download.

2143
04:38:40,460 --> 04:38:42,460
You can also click on download.

2144
04:38:42,460 --> 04:38:43,460
Yes.

2145
04:38:43,460 --> 04:38:46,460
And that will actually save it.

2146
04:38:46,460 --> 04:38:48,460
almost certainly actually downloads the notebook.

2147
04:38:48,460 --> 04:38:49,460
Yes.

2148
04:38:49,460 --> 04:38:50,460
Yes.

2149
04:38:50,460 --> 04:38:54,460
So that is one way of saving it to your computer.

2150
04:38:54,460 --> 04:39:01,460
And then you will still have to open that notebook in an environment which has the dependencies that you need.

2151
04:39:01,460 --> 04:39:03,460
Right. So I only get the notebook.

2152
04:39:03,460 --> 04:39:08,460
I don't get the environment when I download the notebook.

2153
04:39:08,460 --> 04:39:09,460
I mean, really.

2154
04:39:09,460 --> 04:39:10,460
Yeah.

2155
04:39:10,460 --> 04:39:13,460
This is restore from browser storage.

2156
04:39:13,460 --> 04:39:24,000
So actually, I can save it to browser storage, which means it will be saved in this web browser

2157
04:39:24,000 --> 04:39:26,660
and then I can get it from there.

2158
04:39:26,660 --> 04:39:32,780
So I can save it locally relatively easily.

2159
04:39:32,780 --> 04:39:37,940
Then I can reload the page, my changes are gone, but then I can pick up this one and

2160
04:39:37,940 --> 04:39:40,220
get the notebook.

2161
04:39:40,220 --> 04:39:42,980
The download option is also here.

2162
04:39:42,980 --> 04:39:48,100
visible so it downloads the currently visible notebook.

2163
04:39:48,420 --> 04:39:51,940
Although if you only store it in the browser storage and then you

2164
04:39:51,940 --> 04:39:57,220
clean up your browser data every once in a while then

2165
04:39:57,220 --> 04:40:01,140
you are going to lose that.

2166
04:40:02,260 --> 04:40:07,780
Yeah so it's not permanent storage. One thing that I would really like actually

2167
04:40:07,780 --> 04:40:11,460
is to be able to just save this to a GitHub repository but that's

2168
04:40:11,460 --> 04:40:22,580
not here yet. Yeah, so of course you can visit the GitHub repository and you have a link

2169
04:40:22,580 --> 04:40:32,180
to that from the top menu and you may clone that repository or fork it to an instance,

2170
04:40:32,180 --> 04:40:40,740
is to fork it to a repository in your own GitHub.

2171
04:40:40,740 --> 04:40:48,580
So then you can change it and version control it as you need.

2172
04:40:48,580 --> 04:40:49,460
OK.

2173
04:40:49,460 --> 04:40:54,900
Well, we are running out of time very quickly.

2174
04:40:54,900 --> 04:40:59,780
So I think that's all for the Jupyter lesson.

2175
04:40:59,780 --> 04:41:03,560
and feedback is already happening in the notes.

2176
04:41:03,560 --> 04:41:08,560
So let's go to outro and talk about what's up tomorrow.

2177
04:41:12,600 --> 04:41:14,080
Thank you all for all the questions

2178
04:41:14,080 --> 04:41:16,680
and sorry we didn't bring all of them up,

2179
04:41:16,680 --> 04:41:21,320
but we are very, very glad that you're active.

2180
04:41:23,880 --> 04:41:25,600
Yeah, I think this went.

2181
04:41:25,600 --> 04:41:26,880
[name]?

2182
04:41:26,880 --> 04:41:28,480
Hi, can you hear me?

2183
04:41:29,780 --> 04:41:32,020
Now you can hear me.

2184
04:41:32,020 --> 04:41:35,380
Yeah, I think this went very well.

2185
04:41:35,380 --> 04:41:40,220
Yeah, so hopefully you enjoyed this day.

2186
04:41:40,220 --> 04:41:43,820
I guess you saw a lot more ways to use version control

2187
04:41:43,820 --> 04:41:44,860
in different things.

2188
04:41:44,860 --> 04:41:47,300
So I guess the pattern here is basically

2189
04:41:47,300 --> 04:41:51,740
once you're using Git or really any version control,

2190
04:41:51,740 --> 04:41:55,500
there's all these other things you can build on top of it.

2191
04:41:55,500 --> 04:41:58,060
And tomorrow, this continues.

2192
04:41:58,060 --> 04:42:01,740
So it's sort of the capstone days, I guess you could say.

2193
04:42:01,740 --> 04:42:05,100
The first lesson is automated testing,

2194
04:42:05,100 --> 04:42:10,100
where we see how we can write things in the code,

2195
04:42:10,220 --> 04:42:12,260
which will automatically check the code

2196
04:42:12,260 --> 04:42:15,260
and see if it works for other,

2197
04:42:19,540 --> 04:42:21,700
like see if it works,

2198
04:42:21,700 --> 04:42:24,580
like basically find problems automatically,

2199
04:42:24,580 --> 04:42:25,660
which is really useful,

2200
04:42:25,660 --> 04:42:27,740
especially when we're scientists and stuff

2201
04:42:27,740 --> 04:42:29,740
really needs to work.

2202
04:42:29,740 --> 04:42:32,660
And the last one is modular code development,

2203
04:42:32,660 --> 04:42:39,820
where we'll basically take one of the simple toy problem,

2204
04:42:39,820 --> 04:42:41,380
and we'll go through a whole process

2205
04:42:41,380 --> 04:42:42,880
of we start with Jupyter, and then

2206
04:42:42,880 --> 04:42:45,260
we make it a little bit more modular with functions

2207
04:42:45,260 --> 04:42:47,020
and discuss why.

2208
04:42:47,020 --> 04:42:49,180
We do a little bit more.

2209
04:42:49,180 --> 04:42:52,740
We move to the command line, and so on.

2210
04:42:52,740 --> 04:43:04,180
Yeah, and this sort of is a summary of many of these things.

2211
04:43:04,180 --> 04:43:12,540
So again, tomorrow is demo-based, so I see one of the feedback things says more hands-on

2212
04:43:12,540 --> 04:43:13,860
things would be nice.

2213
04:43:13,860 --> 04:43:18,780
Unfortunately, there's so many different variables here, we can't make an exercise

2214
04:43:18,780 --> 04:43:24,300
that would work in a short enough time just by answering our things. But we really recommend

2215
04:43:24,300 --> 04:43:30,460
you take the afternoon now and go work on some of these different exercises. You can even write your

2216
04:43:30,460 --> 04:43:37,260
questions in the notes and we'll keep seeing it by tomorrow at least if not already today when we're

2217
04:43:37,260 --> 04:43:41,740
answering it. Or ask your colleagues and so on to be the mentors to do these things.

2218
04:43:44,220 --> 04:43:45,020
Is there anything else?

2219
04:43:45,020 --> 04:43:59,220
Yeah, okay. Someone's writing in the news there. Yeah, is there anything else? Or should

2220
04:43:59,220 --> 04:44:01,500
we call it good?

2221
04:44:01,500 --> 04:44:09,700
No, not really. I mean, just mentioning again that if you have another tool which is your

2222
04:44:09,700 --> 04:44:16,340
favorite, you can do most of it using that tool. I mean, be it Visual Studio Code or be it

2223
04:44:19,220 --> 04:44:26,820
Pluto, I think it is for Julia. I mean, there are many different tools and you don't have to

2224
04:44:30,500 --> 04:44:37,860
use our Python examples. You can work with your Fortran code or you can work with a workflow

2225
04:44:37,860 --> 04:44:45,220
that you want to develop, so it's very flexible in that sense when it comes to the language that

2226
04:44:45,220 --> 04:44:54,260
you're using. Yeah, following up on that, it's like this question number 46 down below,

2227
04:44:54,260 --> 04:45:00,580
are there any tutorials for these things? So we're basically inspiring you for what you can look at,

2228
04:45:00,580 --> 04:45:06,100
and for most of these tools they have their own tutorials, and probably other tutorials around

2229
04:45:06,100 --> 04:45:15,860
you can find and you can, yeah, just look and see what you find that fits your needs and all.

2230
04:45:15,860 --> 04:45:23,300
And exactly. So both JupyterLab and Binder have good documentation. So I would, I think

2231
04:45:23,300 --> 04:45:28,900
the first thing to do if you don't know something is to Google for it and see what you get and

2232
04:45:28,900 --> 04:45:33,700
And then, or ask your colleagues,

2233
04:45:33,700 --> 04:45:37,340
but Google is a very good friend most of the times.

2234
04:45:37,340 --> 04:45:38,180
Yeah.

2235
04:45:40,180 --> 04:45:41,020
Okay.

2236
04:45:41,020 --> 04:45:43,580
So should we call the day done?

2237
04:45:43,580 --> 04:45:45,900
Is there anything else we need to address here?

2238
04:45:47,260 --> 04:45:48,100
I think it's good.

2239
04:45:48,100 --> 04:45:50,300
Thank you all for being with us

2240
04:45:50,300 --> 04:45:52,260
and thank you for the feedback

2241
04:45:52,260 --> 04:45:56,340
and hopefully you're going to join us tomorrow.

2242
04:45:56,340 --> 04:45:58,020
Yeah.

2243
04:45:58,020 --> 04:46:01,060
OK, sounds good.

2244
04:46:01,060 --> 04:46:03,900
See you tomorrow.

2245
04:46:03,900 --> 04:46:04,400
Bye.

2246
04:46:04,400 --> 04:46:05,300
See you.

2247
04:46:05,300 --> 04:46:06,860
Bye-bye.

2248
04:46:28,020 --> 04:46:30,080
you

2249
04:46:58,020 --> 04:47:00,080
you

2250
04:47:28,020 --> 04:47:30,080
you

2251
04:47:58,020 --> 04:48:00,080
you

