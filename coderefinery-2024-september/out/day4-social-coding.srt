1
00:00:00,000 --> 00:00:12,880
Hello. So we are back online. Quickly check with the people in the chat if they can hear

2
00:00:12,880 --> 00:00:22,560
us and see us. Excellent. So everything is working. So we still have it's still our day

3
00:00:22,560 --> 00:00:31,340
day four. And we are still going to cover topics somewhat related to the reproducibility

4
00:00:31,340 --> 00:00:40,680
that was covered in the morning by [name] and [name]. And now here with me there is [name]

5
00:00:40,680 --> 00:00:45,520
who works with me at Aalto University. Hello, [name].

6
00:00:45,520 --> 00:00:51,280
Hello everyone. I'm [name], one of the RSEs at Aalto University. Happy to be here.

7
00:00:51,280 --> 00:00:59,580
Yesterday was a special RSE, Research Software Engineers Day, because basically, except me,

8
00:00:59,580 --> 00:01:08,060
all the others were Alto RSEs. RSE is actually a great profession if you want to stay in research

9
00:01:08,060 --> 00:01:14,260
but not exactly becoming, you know, a professor or whatever you will become. But anyway, to

10
00:01:14,260 --> 00:01:21,900
To the topic of this afternoon, it will be about social coding, this lesson used to be

11
00:01:21,900 --> 00:01:29,500
called licensing, software licensing specifically, as you might know when you release something

12
00:01:29,500 --> 00:01:35,400
you want to attach a license and that of course doesn't even, it's not just limited to software

13
00:01:35,400 --> 00:01:41,380
because honestly anything you basically create, whether you want it or not, it comes with

14
00:01:41,380 --> 00:01:47,700
license and the lack of license basically means copyright but sometimes you might not even know

15
00:01:47,700 --> 00:01:53,380
that let's say what you write in social media has a certain license so that the owner of the

16
00:01:53,380 --> 00:02:00,180
social media platform can do almost whatever they want with your content but today we will focus on

17
00:02:00,180 --> 00:02:08,340
these coding aspects. So [name], what do you feel about social coding and open software?

18
00:02:08,340 --> 00:02:15,940
I think it's a very important aspect because a collaboration happens all the time and you should

19
00:02:15,940 --> 00:02:22,420
be able to understand the basics of it and how to share your code and what kind of licenses to add it

20
00:02:23,060 --> 00:02:29,460
and to take care of all of these things. I remember reading this blog post from

21
00:02:31,140 --> 00:02:36,500
a random blog, I don't remember the name, but it was about Google Docs and about the licensing

22
00:02:36,500 --> 00:02:43,140
I think that you probably agree and you are giving almost the ownership of the work that

23
00:02:43,140 --> 00:02:48,780
you are doing on Google Docs to Google because you don't read the licenses and you don't

24
00:02:48,780 --> 00:02:49,780
take it seriously.

25
00:02:49,780 --> 00:02:56,820
So I think it's very important to know about the licenses and how to, yeah, how to manage

26
00:02:56,820 --> 00:02:57,820
them.

27
00:02:57,820 --> 00:02:58,820
Yeah.

28
00:02:58,820 --> 00:02:59,820
I agree.

29
00:02:59,820 --> 00:03:05,940
And here for some motivational example that you find some great code, but then you are

30
00:03:05,940 --> 00:03:11,700
unsure, can you actually, you know, use it? Can you actually cite them? Or you need to

31
00:03:11,700 --> 00:03:17,540
modify the code a little bit, as we will call it later, like remixing, maybe, even with

32
00:03:17,540 --> 00:03:24,100
some data. But then what happens, especially in academic journals, that they require you

33
00:03:24,100 --> 00:03:29,380
these days to also publish the code. And the reason is not just the reproducibility reason

34
00:03:29,380 --> 00:03:35,460
that we heard from the first part of today's, but it's also related to basically the research

35
00:03:35,460 --> 00:03:40,860
integrity, the transparency principle of research, that you should be transparent in all the

36
00:03:40,860 --> 00:03:48,300
steps of the scientific, of the research process. And being transparent with the code is getting

37
00:03:48,300 --> 00:03:53,660
more and more popular. So you will see these type of code availability statements that

38
00:03:53,660 --> 00:03:58,620
you need to attach to your paper that you submit or data availability statements for

39
00:03:58,620 --> 00:04:03,860
the data part. And when it's time to write this statement, you need to basically have

40
00:04:03,860 --> 00:04:08,820
a license to your code, attached to your code and attached to your data.

41
00:04:08,820 --> 00:04:09,820
Yes.

42
00:04:09,820 --> 00:04:17,820
So let's, hopefully this was motivational enough, all I'm saying is keep in a look at

43
00:04:17,820 --> 00:04:24,620
the notes document, so please, if there's any questions and if you feel writing any

44
00:04:24,620 --> 00:04:30,700
comment related to the topic, just write to the notes and then also please let me know

45
00:04:30,700 --> 00:04:34,660
if there's anything interesting to highlight.

46
00:04:34,660 --> 00:04:37,660
So as I mentioned earlier, at the beginning,

47
00:04:37,660 --> 00:04:41,580
this lecture used to be called software licensing,

48
00:04:41,580 --> 00:04:44,460
but then it expanded into social coding.

49
00:04:44,460 --> 00:04:48,460
And the reason is that coding is not just something

50
00:04:48,460 --> 00:04:51,180
that happens in isolation,

51
00:04:52,300 --> 00:04:56,140
that especially in the topic that we are discussing here,

52
00:04:56,140 --> 00:04:59,100
especially in the topic of research,

53
00:04:59,100 --> 00:05:03,220
at some point you are asked to share the code with others.

54
00:05:03,220 --> 00:05:06,540
And as we've seen during the first lecture

55
00:05:06,540 --> 00:05:08,560
and also during the first week,

56
00:05:08,560 --> 00:05:11,220
sometimes you wanna share the code with yourself.

57
00:05:11,220 --> 00:05:14,440
So the social part is not just, you know,

58
00:05:14,440 --> 00:05:16,820
me collaborating with those saying on a project

59
00:05:16,820 --> 00:05:20,380
and I don't know, sharing the GitHub and so on,

60
00:05:20,380 --> 00:05:23,140
but then it really goes, you know,

61
00:05:23,140 --> 00:05:25,140
me collaborating with the future self

62
00:05:25,140 --> 00:05:28,940
and more in general me trying to share what I wrote

63
00:05:28,940 --> 00:05:33,940
as a code to create an impact on other papers.

64
00:05:34,860 --> 00:05:37,280
So [name], what about you?

65
00:05:37,280 --> 00:05:38,920
I guess maybe that in your work

66
00:05:38,920 --> 00:05:42,520
as a research software engineer, you've been helping people

67
00:05:42,520 --> 00:05:45,000
kind of reaching this objective

68
00:05:45,000 --> 00:05:47,880
to basically be social with their code

69
00:05:47,880 --> 00:05:50,360
and sharing it and make it citable.

70
00:05:50,360 --> 00:05:51,200
Yes.

71
00:05:52,960 --> 00:05:55,200
Was it a easy job or was it?

72
00:05:55,200 --> 00:06:02,760
To my experience, people start it a bit late, they usually come when they have to publish

73
00:06:02,760 --> 00:06:07,920
the code because of the publication or a specific requirement for a journal.

74
00:06:07,920 --> 00:06:17,120
So they didn't start with social coding and like trying to have it online for more collaboration.

75
00:06:17,120 --> 00:06:24,600
So yeah, I think maybe if you started from scratch, it would be easier in the end.

76
00:06:24,600 --> 00:06:31,800
Yeah, this is a very good point. In a way, you could even pretend from the day zero when you

77
00:06:31,800 --> 00:06:36,440
start the project, when you start your Git repository, even though it's a private repository,

78
00:06:36,440 --> 00:06:42,360
even though you're not already sharing it with anybody else, you could still pretend that,

79
00:06:42,360 --> 00:06:47,480
you know, you are actually, that it's already live, that it's already public,

80
00:06:47,480 --> 00:06:52,680
that already will improve the way you relate to the repository, because maybe you will write

81
00:06:52,680 --> 00:06:57,640
meaningful messages if you know that you're being watched, if you know what I mean, even though maybe

82
00:06:57,640 --> 00:07:02,760
it's still a private repository, but that will also make your life easier when it's time to

83
00:07:02,760 --> 00:07:08,040
open it and share it with your paper, that you don't need to, I don't know, go through the git

84
00:07:08,040 --> 00:07:14,040
history trying to delete commit messages that you were not happy about because you were very angry

85
00:07:14,040 --> 00:07:24,760
with your code on the day and so on. So in this social one think about if and how you share.

86
00:07:25,400 --> 00:07:35,960
There's a question that can have multiple answers and I believe you have pasted it to them

87
00:07:35,960 --> 00:07:36,960
Yes.

88
00:07:36,960 --> 00:07:39,320
Or can you paste it to them?

89
00:07:39,320 --> 00:07:41,600
Yes, I already did.

90
00:07:41,600 --> 00:07:46,120
Someone had a problem with Twitch, but now it has been resolved.

91
00:07:46,120 --> 00:07:50,160
So maybe we can go to the questions.

92
00:07:50,160 --> 00:07:58,880
So basically, as we did in other polls, if you are able to write a, like an O, so that

93
00:07:58,880 --> 00:08:04,600
we can get this type of ASCII, ASCII, ASCII histogram.

94
00:08:04,600 --> 00:08:05,600
So

95
00:08:05,600 --> 00:08:10,800
So for the first question, you can answer as many as you want, but for the next ones,

96
00:08:10,800 --> 00:08:17,360
you can only choose one. So Sam, I'm gonna ask you the question. Why would you want to share

97
00:08:18,480 --> 00:08:23,120
your scripts, code, and data? Which one would you pick of this?

98
00:08:26,000 --> 00:08:34,560
So for me, it's very good for your reputation and for your CV. If you want to change your job or

99
00:08:34,560 --> 00:08:42,440
or maybe in the future, which is a good thing because you can showcase what I was doing

100
00:08:42,440 --> 00:08:45,920
in my previous job.

101
00:08:45,920 --> 00:08:51,760
Another thing is, at least for me, when I start to publish my code, I'm a bit more careful

102
00:08:51,760 --> 00:08:59,500
on the structure and try to be more clean, which is also a good thing.

103
00:08:59,500 --> 00:09:09,540
Another thing that at least I use is, because the code is more clean, it's easily more reproducible

104
00:09:09,540 --> 00:09:11,420
for me at least.

105
00:09:11,420 --> 00:09:16,660
So I think these three are the main aspects of why I use social coding.

106
00:09:16,660 --> 00:09:17,660
What about you?

107
00:09:17,660 --> 00:09:19,180
Do you have any preference?

108
00:09:19,180 --> 00:09:27,000
Yeah, I agree with you, especially that you mentioned this kind of CV idea, and this also

109
00:09:27,000 --> 00:09:31,160
goes with the, in my opinion, what I like about the Code Refinery workshop, that the type of

110
00:09:31,160 --> 00:09:36,920
skills that you learn here are skills that are reusable in other fields outside academia.

111
00:09:36,920 --> 00:09:42,760
So if the majority of the people following this workshop right now are doctoral researchers or

112
00:09:42,760 --> 00:09:51,880
postdocs or whatever, but already learning it and starting with whatever, little by little sharing,

113
00:09:51,880 --> 00:09:57,800
it will also open doors for maybe other jobs in the future that might not be related to academia.

114
00:09:59,240 --> 00:10:07,800
Me, of the options here, I really like the reproducibility part. I'm biased. I'm a

115
00:10:07,800 --> 00:10:15,800
reproducibility fanatic so that other people can truly rerun my code. But sometimes I publish

116
00:10:15,800 --> 00:10:20,680
code that was really ugly, but I still thought I'm going to put it out there because no one had

117
00:10:20,680 --> 00:10:27,160
that type of function in whatever language I was publishing it. And then I saw that my ugly code

118
00:10:27,160 --> 00:10:32,440
was actually reused by so many publications completely in different fields. Sorry to

119
00:10:32,440 --> 00:10:39,080
interrupt. Someone is mentioning that. Oh no, sorry. Go ahead. There was a comment that they

120
00:10:39,080 --> 00:10:46,280
cannot hear us, but it was from the computer. Sorry, go ahead. Yeah, that's good. Yeah. If

121
00:10:46,280 --> 00:10:54,200
I was muted it wouldn't be nice. But basically let's have a look at what our people online are

122
00:10:54,200 --> 00:11:01,000
answering. Looks like that to my eyes at least A and B seems to be very popular. So the reproducibility

123
00:11:01,000 --> 00:11:09,880
and also the trustworthiness. Exactly. It's interesting that the H doesn't get any votes,

124
00:11:09,880 --> 00:11:15,720
not for this year, also for previous years it didn't get any votes either. But yeah it's

125
00:11:15,720 --> 00:11:21,480
interesting it's it's nice also this that maybe the kind of social thinking of the people here

126
00:11:22,040 --> 00:11:27,960
is not that we are in a competition even though the grant system makes us believe that we are all

127
00:11:27,960 --> 00:11:34,840
competing with each other another thing that i wanted to add is maybe another aspect that i

128
00:11:34,840 --> 00:11:40,760
think about is being part of the community so there are like a lot of codes that you can use

129
00:11:40,760 --> 00:11:47,560
and they're open source so you can try them and if you try to also publish your code you become

130
00:11:47,560 --> 00:11:53,960
part of this community which is very very interesting to be part of and like you can create

131
00:11:53,960 --> 00:11:59,960
like collaborate with others and after some time you will be known for some of your work

132
00:12:01,480 --> 00:12:08,200
although they not might be exactly your expertise for example like I have this it's not exactly a

133
00:12:08,200 --> 00:12:17,160
source code on GitHub, but it's about like how to do something like more of administrative work.

134
00:12:17,160 --> 00:12:23,720
And at the moment, I'm known for that work among like non-expert people for like research software,

135
00:12:23,720 --> 00:12:29,080
which is an interesting thing. Yeah. Yeah, that's great. And in my opinion, it's also,

136
00:12:31,080 --> 00:12:37,160
I mean, it's exactly this that it's, even though we will talk about this later,

137
00:12:37,160 --> 00:12:43,560
that sometimes maybe code, you might feel that you're not recognized in citation or whatever

138
00:12:43,560 --> 00:12:50,360
impact is the measure in academia. But at the end of the day, people will notice it and people will

139
00:12:50,360 --> 00:12:56,840
see it. Maybe you start getting new collaborators or reaching people that you would have not just

140
00:12:56,840 --> 00:12:59,800
reach with your papers.

141
00:12:59,800 --> 00:13:04,360
Yes, maybe we can go to the next question.

142
00:13:05,240 --> 00:13:11,240
Yeah, so it also had some downfalls a bit, right?

143
00:13:12,040 --> 00:13:14,760
So when you publish your code, do you have any concerns?

144
00:13:17,000 --> 00:13:22,840
Well, I would say initially I felt this kind of B, that my code is ugly.

145
00:13:22,840 --> 00:13:30,040
I was never really afraid of the A, because actually by publishing it with the timestamp,

146
00:13:30,040 --> 00:13:37,160
I could eventually prove that, you know, you scooped my code, I have a timestamp that shows.

147
00:13:37,160 --> 00:13:43,320
But then at the end of the day, would I really see you, someone else like me, or for what?

148
00:13:43,320 --> 00:13:47,800
Just, I mean, at the end of the day, I'm happy if people scooped whatever I did,

149
00:13:47,800 --> 00:13:53,320
means that it was something good. But what about you out of these answers, which one?

150
00:13:56,440 --> 00:14:01,800
I think for me, B, like having an ugly code was the most concern.

151
00:14:04,920 --> 00:14:12,440
I never thought about like A or F, about like a lower quality copy or even F, like the code

152
00:14:12,440 --> 00:14:17,320
could be stolen because you can add licenses. And it's also true about your original paper,

153
00:14:17,320 --> 00:14:22,280
right? When you're publishing your idea, it can be also stolen, but it's completely okay.

154
00:14:23,480 --> 00:14:29,240
You have patents and everything to have this protection. And here I think it's

155
00:14:29,240 --> 00:14:32,200
the equivalent is licenses, which we will talk about.

156
00:14:33,480 --> 00:14:37,880
Yeah, it looks like B is also the most popular.

157
00:14:37,880 --> 00:14:43,480
Exactly. Another thing that I have some concerns about, which is not here, is like,

158
00:14:43,480 --> 00:14:48,120
because no software is complete, right? And as a perfectionist, I'm always thinking about is

159
00:14:48,120 --> 00:14:56,200
it complete? Is it good enough to be published? Not from being ugly or not following the clean

160
00:14:56,200 --> 00:15:03,320
code structures, but just as a whole, with all of the functions and is it complete to be published

161
00:15:04,200 --> 00:15:12,840
or not? Yeah. I personally like the release early, release often. And so I rather just publish

162
00:15:12,840 --> 00:15:19,800
something that is even half broken but already there's an idea out there and then I will improve

163
00:15:19,800 --> 00:15:23,480
it and then maybe someone will try to reuse it and I realize that I completely missed

164
00:15:24,120 --> 00:15:33,000
I don't know one exception in the conditions and so on. Yeah so like based on age I can see like

165
00:15:33,000 --> 00:15:40,120
other people have this perfectionist idea as well and it's good that I like I had some votes on

166
00:15:40,120 --> 00:15:44,680
about the licensing which we are going to talk about in this course in this section.

167
00:15:46,360 --> 00:15:50,200
Then we have question three and question four which are kind of free form so please

168
00:15:50,840 --> 00:15:56,280
expand on that and now we will have a look why software often treated differently than from

169
00:15:56,280 --> 00:16:03,080
papers because some people for example also have a ugly english ugly way of writing why wouldn't

170
00:16:03,080 --> 00:16:09,000
you be ashamed of your ugly paper rather than your ugly software and then the fourth question

171
00:16:09,000 --> 00:16:17,360
is when you find a repository with a code or with a library that you would like to reuse,

172
00:16:17,360 --> 00:16:24,640
what are the things that you look at to decide whether you will use it?

173
00:16:24,640 --> 00:16:32,880
So let's have a look at question three. Yeah, I like the first answer because it's this

174
00:16:32,880 --> 00:16:44,960
overly fixation with citations and metrics. It's also true about one of the comments is

175
00:16:44,960 --> 00:16:50,080
it's usually seen just as a tool, not a scientific product. And it's kind of true,

176
00:16:50,880 --> 00:16:57,840
right? Because in my opinion, papers are more about the results and the methodology that you

177
00:16:57,840 --> 00:17:03,040
used and the code is just a tool that you did it although like there are some aspects about like

178
00:17:03,040 --> 00:17:09,280
optimization of the code and how fast it is how much memory does it use but in the end

179
00:17:09,920 --> 00:17:14,240
it's just a tool to achieve your goal right yeah it's true

180
00:17:19,440 --> 00:17:24,720
it's nice too that now this or at least i think that it's nice i'm sorry for some people maybe

181
00:17:24,720 --> 00:17:29,760
this would be more work, and maybe they don't have the resources to ask for help. But this

182
00:17:30,640 --> 00:17:38,960
making, or I wouldn't say forcing, but at least trying to have the code attached with the paper,

183
00:17:38,960 --> 00:17:45,440
with this software availability statement, is a little bit step towards this reproducibility and

184
00:17:46,800 --> 00:17:52,640
transparency, so that it's clear that maybe the method section is more meaningful if I can just

185
00:17:52,640 --> 00:17:59,200
read the code rather than try to infer from a very short paragraph in the method section

186
00:17:59,200 --> 00:18:05,440
which filter was actually applied or which machine learning algorithm was used.

187
00:18:07,040 --> 00:18:11,040
In question three, do you agree with the last comment, not peer-reviewed?

188
00:18:12,400 --> 00:18:21,200
Well, kind of yes, unfortunately, because I often review papers and if there is a code,

189
00:18:21,200 --> 00:18:27,280
I spend a bit of time in giving some feedback that, for example, usually the typical feedback

190
00:18:27,280 --> 00:18:32,240
is that the license is missing. And so in my feedback, I say, please add the license to your

191
00:18:32,240 --> 00:18:38,320
code. But then on the other end, I don't have the time to actually rerun unless they make it very

192
00:18:38,320 --> 00:18:44,880
easy for you that it's just one Docker pool, whatever command that you can easily rerun the

193
00:18:44,880 --> 00:18:51,600
whole pipeline and test it. But even though I would be kind of an expert to peer review the

194
00:18:51,600 --> 00:18:55,840
code, there's just not enough time if I have to run fan review in the paper. But of course,

195
00:18:55,840 --> 00:19:01,920
there are journals that are actually focused on this, like the Journal of Open Source Software,

196
00:19:01,920 --> 00:19:07,840
JOS, where the peer review is actually on the code. The actual papers that come with JOS are

197
00:19:07,840 --> 00:19:13,760
one or two pages. We are a bit behind time, so maybe we can continue. But

198
00:19:13,760 --> 00:19:16,860
But a short comment that I wanted to add is,

199
00:19:16,860 --> 00:19:18,460
it's a bit complicated than papers

200
00:19:18,460 --> 00:19:22,800
because if your repository become popular enough,

201
00:19:22,800 --> 00:19:27,060
other people would come and do contribute to it, right?

202
00:19:27,060 --> 00:19:31,020
So it's not exactly peer reviewed, but somehow it is, right?

203
00:19:31,020 --> 00:19:34,020
Because other people are trying to make it better.

204
00:19:34,020 --> 00:19:35,340
But yeah, maybe we can-

205
00:19:38,500 --> 00:19:40,300
Yeah, then the question four is about

206
00:19:40,300 --> 00:19:42,640
when you find some code, you know,

207
00:19:42,640 --> 00:19:45,040
I've seen that many are writing about the license,

208
00:19:45,040 --> 00:19:47,440
which it seems that it's already clear

209
00:19:47,440 --> 00:19:50,080
that the license might set the rules

210
00:19:50,080 --> 00:19:52,260
of what you can do and what you cannot do.

211
00:19:53,960 --> 00:19:57,320
And also this type of, not just the reusability,

212
00:19:57,320 --> 00:20:01,080
but what we will talk soon is these changes

213
00:20:01,080 --> 00:20:02,240
that you can do to the code.

214
00:20:02,240 --> 00:20:05,080
So the so-called derivative work.

215
00:20:05,080 --> 00:20:07,600
Do you have any comment on this, Orsan?

216
00:20:07,600 --> 00:20:11,600
Personally, I see like the activity and the number of,

217
00:20:11,600 --> 00:20:14,160
like when it has been updated recently

218
00:20:14,160 --> 00:20:16,280
or is it deprecated already?

219
00:20:16,280 --> 00:20:19,240
And also another thing which I usually look at

220
00:20:19,240 --> 00:20:22,660
is the number of contributors that the repository had.

221
00:20:24,360 --> 00:20:25,200
Yeah.

222
00:20:25,200 --> 00:20:26,600
Yeah.

223
00:20:26,600 --> 00:20:30,440
All right, so basically the rest of this

224
00:20:30,440 --> 00:20:33,080
social coding part is what we just discussed

225
00:20:33,080 --> 00:20:35,620
that compared to sharing papers,

226
00:20:35,620 --> 00:20:37,280
sharing code is somewhat different

227
00:20:37,280 --> 00:20:39,240
if the paper is just, you know,

228
00:20:39,240 --> 00:20:42,960
sharing your ideas and maybe winning citations.

229
00:20:42,960 --> 00:20:46,600
Code is a little bit more complex feature.

230
00:20:46,600 --> 00:20:49,160
Sometimes people will just reuse your code ID.

231
00:20:49,160 --> 00:20:53,640
Sometimes it will form some sort of base in basement

232
00:20:53,640 --> 00:20:57,200
foundation for something else to build on top.

233
00:20:58,060 --> 00:21:01,480
And so, you know, with this, of course,

234
00:21:01,480 --> 00:21:03,200
this makes it a little bit more complicated

235
00:21:03,200 --> 00:21:06,360
that papers to evaluate what could be the impact,

236
00:21:06,360 --> 00:21:08,440
what could be the metrics.

237
00:21:08,440 --> 00:21:14,520
Eventually there are some metrics that we will also mention later when you can actually

238
00:21:14,520 --> 00:21:20,880
track the downloads of a package of a software for example.

239
00:21:20,880 --> 00:21:25,080
And then another aspect that is covering this page is what we touched already that the journal

240
00:21:25,080 --> 00:21:31,280
policies are basically going towards the, I wouldn't say forcing, but at least making

241
00:21:31,280 --> 00:21:37,600
it clear that there should be a code availability statement attached with the paper.

242
00:21:37,600 --> 00:21:42,760
as we have a data availability statement. Maybe sometimes you can't share the code because

243
00:21:42,760 --> 00:21:47,880
you're, I don't know, working with a company or it's a dual use case or whatever is the

244
00:21:47,880 --> 00:21:53,280
reason that you're not allowed to share the code. But it's clear that the journals and

245
00:21:53,280 --> 00:21:59,640
not just the journals, even the organizations that are the funding organization, whether

246
00:21:59,640 --> 00:22:06,200
it's the European Research Council or whatever country organization, they are clearly making

247
00:22:06,200 --> 00:22:15,320
it's stronger that the scientific code should be published and public.

248
00:22:15,320 --> 00:22:22,000
Maybe out of one last part that we can look from this page is also this aspect that we

249
00:22:22,000 --> 00:22:28,720
touched on in the question above, that sharing software can also be scary. We touched a little

250
00:22:28,720 --> 00:22:34,360
bit on this. We didn't really cover the aspect of bugs and mistakes. Of course, we might

251
00:22:34,360 --> 00:22:41,480
be scared that what I did was wrong. But on the other hand, is it so bad? Maybe I should actually,

252
00:22:41,480 --> 00:22:45,800
from the perspective of science, from the perspective of ethics, I would actually be

253
00:22:45,800 --> 00:22:52,760
very happy that someone finds a bug in my code. Of course, it's sad for me that I need to ask for a

254
00:22:52,760 --> 00:23:00,520
retraction of the paper if it really changes all the results. But in theory, if science should be

255
00:23:00,520 --> 00:23:04,480
be, you know, what's the word, self-fixing.

256
00:23:04,480 --> 00:23:12,560
Maybe this publishing the code will also improve this type of process.

257
00:23:12,560 --> 00:23:15,800
True.

258
00:23:15,800 --> 00:23:22,000
I would say like sometimes fixing a bug requires a lot of work and it's good that we can collaborate

259
00:23:22,000 --> 00:23:24,880
and help each other on that aspect.

260
00:23:24,880 --> 00:23:31,000
At the same time, it can be a bit overwhelming for the publisher of the code, that you kind

261
00:23:31,000 --> 00:23:39,040
of feel that you're responsible for fixing those if they're just raising the bug, not

262
00:23:39,040 --> 00:23:40,040
a solution.

263
00:23:40,040 --> 00:23:42,560
Yeah, that's a very good point.

264
00:23:42,560 --> 00:23:46,980
We don't have time to discuss this, but in the page, for those who want to spend some

265
00:23:46,980 --> 00:23:53,360
time reading the whole page, there's also this question that, you know, how do you feel,

266
00:23:53,360 --> 00:23:58,400
do you feel the pressure that in the moment that you put your code online now suddenly people will

267
00:23:58,400 --> 00:24:04,800
start asking can you have this improvement can you make it work on this whatever older version

268
00:24:04,800 --> 00:24:10,400
of this operating system maybe i actually think the other way around that at the moment that i

269
00:24:10,400 --> 00:24:16,160
put it online i'm actually removing the responsibility that that i'm saying look i

270
00:24:16,160 --> 00:24:21,840
managed to do this i don't have time to work on this anymore for whatever reason please continue

271
00:24:21,840 --> 00:24:25,840
you make it better, or ask for help.

272
00:24:25,840 --> 00:24:36,680
Basically, we're slowly moving towards the licenses, and we still have now 30 minutes

273
00:24:36,680 --> 00:24:44,000
to talk about that, which is basically how our work connects to the works of others.

274
00:24:44,000 --> 00:24:50,680
So I'm turning page now, and now it's the page dedicated to software licenses.

275
00:24:50,680 --> 00:24:57,480
And I guess more or less everyone is familiar with the idea of copyright.

276
00:24:57,480 --> 00:24:59,000
There are different types of copyright.

277
00:24:59,000 --> 00:25:06,120
There are trademarks that protect the name of a brand, for example, from impersonation.

278
00:25:06,120 --> 00:25:12,760
There are patents that patents usually are not related to software as an algorithm, but

279
00:25:12,760 --> 00:25:18,080
you can patent a system, for example, or in general, so-called technical invention.

280
00:25:18,080 --> 00:25:23,560
And then there's the copyright that is basically protecting the creative expression.

281
00:25:23,560 --> 00:25:29,680
And this can include a little bit of everything, whether it's music or photographs or writings

282
00:25:29,680 --> 00:25:31,440
and so on.

283
00:25:31,440 --> 00:25:37,560
It's also nice what it says here that this copyright is practically forever because it

284
00:25:37,560 --> 00:25:43,880
persists for 70 years after the lifetime of the author.

285
00:25:43,880 --> 00:25:52,520
then maybe on the what you will hear as a term if copyright feels like you know protecting

286
00:25:52,520 --> 00:25:59,400
your intellectual right i also see a point of having a copy left basically making sure that

287
00:25:59,400 --> 00:26:05,640
other people can actually reuse your work and build on top of your work again in a in a in a

288
00:26:05,640 --> 00:26:14,920
legal way. So this brings us to the topic of derivative work, which is a term to say that

289
00:26:15,960 --> 00:26:21,560
from something, let's say Osain made something and put it in the open and I want to reuse bits

290
00:26:21,560 --> 00:26:27,960
of it. I want to maybe reuse some bits as they are, some Python functions, because I don't really

291
00:26:27,960 --> 00:26:37,560
have any improvements to go there or maybe I want to, you know, remix, resample, invent my own flavor

292
00:26:37,560 --> 00:26:44,760
on some whatever visualization part of the script that Ossane did. And of course I can do this or

293
00:26:44,760 --> 00:26:50,280
like the question that maybe would be for myself, am I actually able to do this? Would Ossane work

294
00:26:50,280 --> 00:26:55,800
allow me to do this type of derivative work or is it that, you know, I can't actually even touch

295
00:26:55,800 --> 00:27:04,600
or run on my computer or saying works. So this derivative work is actually when it comes to

296
00:27:04,600 --> 00:27:11,320
software is not intuitive at all of what constitutes derivative work and me myself when

297
00:27:11,320 --> 00:27:15,640
i was attending my first code refinery many years ago i was actually kind of surprised

298
00:27:15,640 --> 00:27:22,440
that some of the options here are considered derivative work. So in this question for you

299
00:27:22,440 --> 00:27:29,480
please don't spy to the to the solution box can can you try to answer in the notes document

300
00:27:30,200 --> 00:27:36,520
which of these are derivative works so derivative you understand that you are basically

301
00:27:36,520 --> 00:27:43,080
remixing reusing the existing code that you have found you have found online

302
00:27:43,080 --> 00:27:54,920
Okay, so maybe we let some time to answer because we don't want to spoil the fun.

303
00:27:54,920 --> 00:28:00,400
Yes, and we have some questions on the note I'm trying to answer.

304
00:28:00,400 --> 00:28:03,280
Is there anything to highlight?

305
00:28:03,280 --> 00:28:09,320
I think two of them are coming from previous sections and copy pasted here.

306
00:28:09,320 --> 00:28:15,120
It's about Docker and Kubernetes and the Conda environment, which I think we can pass.

307
00:28:15,120 --> 00:28:21,040
But a question is, when you license your code, does it belong to your employer or to you?

308
00:28:21,040 --> 00:28:22,040
How does it work?

309
00:28:22,040 --> 00:28:23,040
Yeah.

310
00:28:23,040 --> 00:28:28,960
So, as usual, what I learned from the lawyers that the best answer is it depends.

311
00:28:28,960 --> 00:28:36,120
It depends on what type of agreement do you have with your employer.

312
00:28:36,120 --> 00:28:42,560
Actually it's flexible in a sense that sometimes I've seen, and I'm not specifically talking

313
00:28:42,560 --> 00:28:47,240
about my university, my employer, but I've seen people writing, you know, copyright.

314
00:28:47,240 --> 00:28:52,440
In my case would be [name]-Alto University.

315
00:28:52,440 --> 00:28:59,360
At the end of the day, because software per se cannot be turned into patent unless you

316
00:28:59,360 --> 00:29:06,760
build a system around it. The employer, at least this public organization like universities,

317
00:29:06,760 --> 00:29:12,480
they don't really care much. But it's a different story if you would be working for a company

318
00:29:12,480 --> 00:29:20,000
where you can clearly understand that you as a coder for a company, you don't own anything

319
00:29:20,000 --> 00:29:23,720
and the employer clearly writes in the contract that whatever you produce.

320
00:29:23,720 --> 00:29:27,760
But the same is also, and it's not intuitive, it's also for data. And this is a discussion

321
00:29:27,760 --> 00:29:32,640
that I often have with our researchers, that they think, because they collected the data

322
00:29:32,640 --> 00:29:37,880
in their views, measurements, whatever, that it's their data. And it's actually very rare

323
00:29:37,880 --> 00:29:43,160
that it's their data in the specific context of Finnish universities. If you are on your

324
00:29:43,160 --> 00:29:49,360
own money, on your own grant, then it is your data. But 99% of the time, it's actually

325
00:29:49,360 --> 00:29:56,080
university owns the data. So yeah, in this sense, it's complicated.

326
00:29:58,080 --> 00:30:04,320
Yep. I just want to add that it depends on the policy of the company that you are working.

327
00:30:05,200 --> 00:30:12,160
And I know even for some companies, if you are an employee there, even if you develop some code

328
00:30:12,160 --> 00:30:18,480
out of your working hours, still the code that you produce, it belongs to the company. So it

329
00:30:18,480 --> 00:30:23,040
depends on the policy. Yeah, so you can't even code as a hobby.

330
00:30:24,240 --> 00:30:28,240
Unfortunately, yes, it depends on the company's policy.

331
00:30:28,240 --> 00:30:33,600
Yeah, well, fair enough. Maybe it's the same, you know, you can think of musician that if you're

332
00:30:33,600 --> 00:30:39,280
making music outside of your contract with your record label, maybe the record label manager gets

333
00:30:39,280 --> 00:30:50,320
Alright, but question 5, there's some answers here and basically A to D, they are all to

334
00:30:50,320 --> 00:30:59,120
be considered derivative works, that you know, you download some code and then you donate

335
00:30:59,120 --> 00:31:02,080
or you change the code and modify the code.

336
00:31:02,080 --> 00:31:08,480
Maybe what kind of was surprised for me, and of course it depends, that E and F can also

337
00:31:08,480 --> 00:31:14,960
be considered derivative work. So even though I'm taking our same repository that's on Python package

338
00:31:14,960 --> 00:31:22,000
and I just rewrite it in R, I might still be doing derivative work you know if I follow the

339
00:31:22,000 --> 00:31:27,680
same logic, the same function structure, the same. It would be different if I say would sit down with

340
00:31:27,680 --> 00:31:34,560
me without showing any code, tell me what the package is doing and then I would try to you know

341
00:31:34,560 --> 00:31:39,680
code it based on the description. So it would be like that I would read O'Sane's paper

342
00:31:39,680 --> 00:31:45,040
on the description of this package and just put it in the paper and try to write my own version.

343
00:31:46,800 --> 00:31:50,320
And so yeah, this was a bit unintuitive for me, but on the other hand,

344
00:31:50,320 --> 00:31:53,680
it makes sense when things start to be kind of literal.

345
00:31:56,080 --> 00:32:00,880
It's also interesting, we don't have the... I would add another option here that,

346
00:32:00,880 --> 00:32:08,560
I don't know if you're using some chat GPT or co-pilot to generate code. Is it derivative

347
00:32:08,560 --> 00:32:15,080
work? Because this chat GPT, large language models, they actually have ingested lots of

348
00:32:15,080 --> 00:32:21,400
software from whatever open repositories, but then they don't tell you who originally

349
00:32:21,400 --> 00:32:28,840
wrote a function very similar to the one that you asked. But then again, it's complicated.

350
00:32:28,840 --> 00:32:39,460
Do you actually do or saying if you if you use copilot or GPT to get help let's say with the function would you start searching if.

351
00:32:39,680 --> 00:32:46,260
That function if beats of that function would already exist on the internet that you would find.

352
00:32:46,400 --> 00:32:56,320
Not not that you have to because this is also the thing that when you generate something with this large language models you are actually become the copyright owner of what is generated.

353
00:32:56,320 --> 00:33:03,360
which is counterintuitive in a way because you feel that ethically it's not you that made those

354
00:33:03,360 --> 00:33:10,480
things, but just some machine who has read many, many code scripts. But how do you feel as a user

355
00:33:10,480 --> 00:33:15,680
of course, I guess you use now sometimes these copilots or... Yeah, all the time. Yeah.

356
00:33:16,320 --> 00:33:23,040
Yeah. But I think it's something that as a society, we still have to think about it,

357
00:33:23,040 --> 00:33:29,120
like what should what should we do because it's generally a new concept that we are

358
00:33:29,840 --> 00:33:37,280
facing and I think it would resolve and we would come with a bit more macho ways on

359
00:33:37,280 --> 00:33:43,280
how to cite it and how to use it. But personally if I use something and I get some ideas or like

360
00:33:43,280 --> 00:33:49,520
use the whole functions that the generative AI generates, no I don't go and search like what is

361
00:33:49,520 --> 00:33:55,520
the original repository that produced this one? Yeah. This is, of course, I don't have an answer

362
00:33:55,520 --> 00:34:01,200
myself. And if people want to give their own opinion, in my opinion, it's nice anyway that

363
00:34:01,200 --> 00:34:05,840
people discuss this use of these new tools, generative AI, and how people are using them,

364
00:34:05,840 --> 00:34:12,000
because maybe then we can come up with a consensus on an ethical and responsible way of using them.

365
00:34:13,440 --> 00:34:19,440
We also have a question about these generative AIs. You said if you generate something like

366
00:34:19,440 --> 00:34:23,200
piece of code, you would become the owner of the code, right?

367
00:34:23,200 --> 00:34:24,200
Is that correct?

368
00:34:24,200 --> 00:34:25,200
Yeah.

369
00:34:25,200 --> 00:34:28,440
The default policy is that whatever you generate with the large language model, you are the

370
00:34:28,440 --> 00:34:29,960
copyright owner.

371
00:34:29,960 --> 00:34:36,680
Do you add any citations or anything that I use generative AI for these codes I created?

372
00:34:36,680 --> 00:34:43,960
So the journals have expanded on their policies on the use of generative AI, and so now publishers

373
00:34:43,960 --> 00:34:50,520
like Nature or whatever, many publishers, they would now basically require you to add

374
00:34:50,520 --> 00:34:58,840
a statement, how generative AI was used in the process. I'm not too strong. When I teach

375
00:34:58,840 --> 00:35:03,080
about these things, I can tell that if you just used it for, I don't know, fixing your

376
00:35:03,080 --> 00:35:09,400
English grammar, maybe. There's no point. But if it's clear that that work would have

377
00:35:09,400 --> 00:35:13,560
not been able without the use of generative AI, then of course it must be mentioned.

378
00:35:13,560 --> 00:35:18,920
so if i if my level of coding is very basic for whatever reason because i just started

379
00:35:18,920 --> 00:35:24,440
and i get help from the generative ai and i'm basically not able to judge myself is this code

380
00:35:24,440 --> 00:35:31,160
that the generative made right even though i see with the tests that i you know add that it feels

381
00:35:31,160 --> 00:35:37,400
right at least i can be transparent that you know i got help or i used chat gpt for generating the

382
00:35:37,400 --> 00:35:41,720
code for this and the code is published at this and that repository.

383
00:35:44,920 --> 00:35:53,400
All right, so yeah, when it comes to software licenses, so now we are a bit focusing on

384
00:35:53,400 --> 00:35:58,440
software. I've seen some people in the notes talking also about Creative Common. We will

385
00:35:58,440 --> 00:36:06,920
touch a little bit on so-called data licensing later, but in general there is a taxonomy

386
00:36:07,400 --> 00:36:13,680
of software licenses, this was from the European Commission, yes, so it's a publication that

387
00:36:13,680 --> 00:36:20,640
basically talks about the EU public license, the European Union public license.

388
00:36:20,640 --> 00:36:27,160
And so when it comes to software licenses, there are different, basically there's a continuum

389
00:36:27,160 --> 00:36:34,320
of things that would basically, they are very dark green, that you could basically do whatever

390
00:36:34,320 --> 00:36:40,160
you want with that type of license, so if you find a code and with that code in, I don't know,

391
00:36:40,160 --> 00:36:47,600
GitHub, there is attached a license that says MIT or BST and so on, it means that most likely

392
00:36:47,600 --> 00:36:52,560
you can reuse it and you can do anything you want, you can build on it. In some cases,

393
00:36:52,560 --> 00:36:59,280
you don't even maybe need to tell who was the original author. On the other end of the spectrum,

394
00:36:59,280 --> 00:37:10,640
we have the so-called strong copyleft licenses, and so here the idea is that if I find, let's say

395
00:37:10,640 --> 00:37:17,280
that Ausen writes a package that I want to reuse, but it comes with a strong copyleft license,

396
00:37:17,280 --> 00:37:23,520
it means that whatever I derive from AusenWord should also be released with that strong copyleft.

397
00:37:23,520 --> 00:37:30,240
So I need to use the same license and in some cases, as they say, this license infects the rest

398
00:37:30,240 --> 00:37:36,800
of my code. So it's not just the code that is using OSINT's StrongCopyLeft work that needs to

399
00:37:37,520 --> 00:37:41,280
be released with that license. It might attach my whole project and now

400
00:37:41,280 --> 00:37:49,040
I have to also release it with the StrongCopyLeft license. And in between there are this more kind of

401
00:37:49,040 --> 00:37:56,880
sharealike. The idea of sharealike is that, okay, I make this software public with this license,

402
00:37:56,880 --> 00:38:02,640
but I wouldn't mind that if you improve the software, you are kind of allowing me to

403
00:38:03,280 --> 00:38:10,240
basically get your improvement so that I can also reuse. So it's kind of in between the two,

404
00:38:10,880 --> 00:38:15,680
the very permissive one that lets anybody else to do whatever they want, and the very strict one

405
00:38:15,680 --> 00:38:21,240
that forces everybody else to do as you decide to do.

406
00:38:21,240 --> 00:38:25,640
What is your feeling from a research software engineer perspective?

407
00:38:25,640 --> 00:38:30,480
Have you worked with the projects that have all sorts of licenses or do you feel that

408
00:38:30,480 --> 00:38:34,600
in general it's more towards these permissive licenses?

409
00:38:34,600 --> 00:38:47,160
Personally, I'm more like of the more open licenses like MIT or Creative Commons ones.

410
00:38:47,160 --> 00:38:53,040
My idea is I'm using other people's code and if I'm able to publish the code, it's not

411
00:38:53,040 --> 00:38:58,520
something confidential or it's not an ongoing project that I cannot publish yet, I would

412
00:38:58,520 --> 00:39:01,120
go with more open licenses.

413
00:39:01,120 --> 00:39:08,560
I totally understand, for some of the projects, it's better to have more copy-left licenses

414
00:39:08,560 --> 00:39:13,560
or even a strong copy-left licenses.

415
00:39:13,560 --> 00:39:19,680
An interesting thing is about this picture that we have, is about that arrows that we

416
00:39:19,680 --> 00:39:20,680
have.

417
00:39:20,680 --> 00:39:23,600
Can you also explain what are the arrows and how does it work?

418
00:39:23,600 --> 00:39:29,780
Yeah, so here they talk about that the arrows represent compatibility.

419
00:39:29,780 --> 00:39:37,140
And so that in some cases, you know, some licenses can kind of leave can be can be compatible

420
00:39:37,140 --> 00:39:43,360
with other licenses, but in some other cases, the compatibility, you know, when the like,

421
00:39:43,360 --> 00:39:49,300
for example, here, so if I remember correctly, this red block is more the proprietary licenses.

422
00:39:49,300 --> 00:39:54,820
And so the very permissive licenses are compatible with proprietary licenses, meaning that you

423
00:39:54,820 --> 00:39:58,180
can release a software that it's not going to be open source.

424
00:39:58,180 --> 00:40:02,180
and inside it uses some of the permissive libraries,

425
00:40:02,180 --> 00:40:05,340
but then here you see there's no compatibility

426
00:40:05,340 --> 00:40:07,460
between if something is released

427
00:40:07,460 --> 00:40:08,780
with a very strong compileft,

428
00:40:08,780 --> 00:40:13,780
then nobody can use it in a proprietary software.

429
00:40:14,980 --> 00:40:17,500
There's also here for those who want to explore more,

430
00:40:17,500 --> 00:40:20,660
there are this nice set of links

431
00:40:20,660 --> 00:40:22,300
that help you, for example,

432
00:40:22,300 --> 00:40:25,880
comparing licenses and choosing licenses.

433
00:40:25,880 --> 00:40:26,980
There are different,

434
00:40:26,980 --> 00:40:36,980
There are many nice tools that given you might even answer some questionnaire or what you would like to do with your license and then they can recommend you

435
00:40:36,980 --> 00:40:41,480
with whatever type of licenses.

436
00:40:41,480 --> 00:40:56,480
All right. So maybe I think we agreed that we will not do this exercise for the sake of speed and we can now talk when should I add a license.

437
00:40:56,480 --> 00:41:03,120
So the best, of course, is as early as possible, like with everything else, that if you agree

438
00:41:03,120 --> 00:41:09,760
at the beginning that you want to choose a certain license, then you choose it at the beginning.

439
00:41:10,320 --> 00:41:15,360
It's funny that with the GitHub interface, when you create a repository from the web interface,

440
00:41:15,360 --> 00:41:22,160
immediately it asks you, which license do you want to attach with it? So it's clear.

441
00:41:22,160 --> 00:41:34,160
Any year I can see citations to myself, what I was saying also earlier that if you work from the very beginning as if your project is already public and open,

442
00:41:34,160 --> 00:41:41,160
then you can already think at the very beginning that there's a license, that there's a policy,

443
00:41:41,160 --> 00:41:51,160
because of course in this social coding part we didn't really mention this earlier but you might also want to recommend how people can contribute to the improvements of your code,

444
00:41:51,160 --> 00:41:56,040
of your code, you can create a community around your project

445
00:41:56,040 --> 00:42:01,040
and tools like GitHub allow you easily to create issues,

446
00:42:01,680 --> 00:42:04,620
create discussions around your code.

447
00:42:06,600 --> 00:42:10,320
So basically, when should you add a license?

448
00:42:10,320 --> 00:42:11,880
As early as possible.

449
00:42:11,880 --> 00:42:15,480
And how to add a license if your work is derivative work?

450
00:42:15,480 --> 00:42:17,720
So basically, these tools that I mentioned earlier

451
00:42:17,720 --> 00:42:20,280
that could check the compatibility

452
00:42:20,280 --> 00:42:28,760
would allow you to see that if you reuse some specific package that might have permissive

453
00:42:28,760 --> 00:42:35,280
or strong copyleft licenses, then you can see what type of license you can basically

454
00:42:35,280 --> 00:42:38,480
attach to the code.

455
00:42:38,480 --> 00:42:44,240
In general, maybe one comment that at least when I was asking you or saying that you are

456
00:42:44,240 --> 00:42:50,240
in favor of more permissive licenses. What I wanted to add is that sometimes you have

457
00:42:50,240 --> 00:42:56,280
to think that the users of your software, those who will reuse, is there other people

458
00:42:56,280 --> 00:43:02,480
like you. So the permissive licenses, even though you might feel you are donating your

459
00:43:02,480 --> 00:43:09,400
code to the Google, Microsoft, Meta, whatever, at the end of the day, you're just making

460
00:43:09,400 --> 00:43:14,740
it easier for other people like you to reuse your code if you have a permissive license.

461
00:43:14,740 --> 00:43:19,920
With more copyleft licenses, they're of course very ethical and it's nice that some projects

462
00:43:19,920 --> 00:43:28,060
are strong copyleft and they demand that whoever uses those projects also become strong copyleft.

463
00:43:28,060 --> 00:43:32,840
But when it comes to researchers like us, sometimes we might just make the life more

464
00:43:32,840 --> 00:43:38,600
complicated when the researchers need to publish their code with their papers. So at the end

465
00:43:38,600 --> 00:43:44,840
the day. If you aren't sure which one to pick, go with the most permissive licenses. Do you have any

466
00:43:44,840 --> 00:43:56,920
comment on this? No, it was perfect coverage. Thanks. Yeah. All right. So something that I

467
00:43:56,920 --> 00:44:04,200
think I got to see, like it's not an exact questions on the HackMD, but I get a team that

468
00:44:04,200 --> 00:44:12,360
it's happening. Let's say sorting algorithms, right? So do someone own the sorting algorithms

469
00:44:12,360 --> 00:44:19,800
and have license on them, or only it depends on the implementation and the code has been published?

470
00:44:20,680 --> 00:44:26,920
Yeah. As usual, I'm not a lawyer, so I don't take my words for legal advice.

471
00:44:27,640 --> 00:44:31,240
But in my understanding and in my discussion with legal experts,

472
00:44:31,240 --> 00:44:42,800
add the idea of the algorithm the pseudocode is not patentable so if i write a book with pseudocode on how to do this whatever sorting method,

473
00:44:43,100 --> 00:44:46,900
nobody can patented but in the moment that i make an implementation.

474
00:44:46,900 --> 00:44:56,740
as a system that is reusable, kind of as a standalone system, so not just writing the pseudocode into some code,

475
00:44:56,740 --> 00:45:06,700
then it can be patentable. So let's say that I have a web application where you copy-paste your vector of numbers and then press a button,

476
00:45:06,700 --> 00:45:13,660
and then my web application sorts your number in a very whatever fast way then this is a system and

477
00:45:13,660 --> 00:45:18,780
I can patent this web application for sorting numbers but if I would just have the code that

478
00:45:18,780 --> 00:45:23,420
does the sort I would not be able to patent that but I can still protect it with the license so

479
00:45:23,420 --> 00:45:29,660
that I can say okay you want to use my sort fast sort algorithm then I don't know use I'm going to

480
00:45:29,660 --> 00:45:33,740
attach a very copyleft license you have to make everything open if you use it.

481
00:45:36,300 --> 00:45:37,660
Yep, thanks.

482
00:45:39,260 --> 00:45:42,620
Let's see if there's any other question to bring up.

483
00:45:43,980 --> 00:45:47,580
It's nice that there's many answers already so that we don't have to.

484
00:45:48,220 --> 00:45:51,020
Yeah, that's why I was a bit silent. I was trying to

485
00:45:51,020 --> 00:46:00,460
to rest of my knowledge, but our other contributors to thanks everyone.

486
00:46:00,460 --> 00:46:08,140
In general, this there's also sometimes what could happen is that things might change in

487
00:46:08,140 --> 00:46:14,380
time. So that may be a project start with a certain license, but then for whatever reason

488
00:46:14,380 --> 00:46:20,420
you realize that, I don't know, you really need to adopt, change the license to a more

489
00:46:20,420 --> 00:46:25,620
copy-left one because you started using some software that has a more copy-left license.

490
00:46:25,620 --> 00:46:31,500
Of course, licensing can change in time. It's not preferable in a sense that if you would

491
00:46:31,500 --> 00:46:36,660
really need to apply this, you would kind of need to contact, you know, your user base

492
00:46:36,660 --> 00:46:42,020
and tell them, okay, you've been using my code as permissive license, but from today

493
00:46:42,020 --> 00:46:51,540
license is not permissive anymore, it becomes copy left. So of course, you might be familiar

494
00:46:51,540 --> 00:46:57,780
yourself that the terms and conditions of whatever service that you use change in time so often that

495
00:46:57,780 --> 00:47:07,220
nobody even reads what is the new change. So the same would also go here. So changing the license

496
00:47:07,220 --> 00:47:18,040
is not retroactive and if someone is still using the code, does it apply to them or how

497
00:47:18,040 --> 00:47:19,040
does it work?

498
00:47:19,040 --> 00:47:20,040
Yeah.

499
00:47:20,040 --> 00:47:26,520
Well, again, it depends because I would hope that it's not retroactive in a sense that

500
00:47:26,520 --> 00:47:33,560
if a release of a certain version of a certain tool was released with, let's say, a very

501
00:47:33,560 --> 00:47:41,240
open permissive license that i can still allow to use that you know open version of the software

502
00:47:41,240 --> 00:47:46,680
because maybe the company decided that from version 2.0 they went full copyright you know

503
00:47:46,680 --> 00:47:52,760
so maybe i'm still allowed to use version 1.0 but 2.0 i need to buy whatever the license from

504
00:47:52,760 --> 00:47:58,520
the company but then there are also some other aspects maybe this is more related to data

505
00:47:58,520 --> 00:48:21,520
that can be changes to the license of data that can be retroactive and the general data protection regulation the GDPR is one example of this so that if I released open personal data 10 years ago actually GDPR would affect the license of that data and would not allow me to keep it open anymore.

506
00:48:21,520 --> 00:48:28,640
So, again, it depends, but it's clear, for example, for those who really are into these

507
00:48:28,640 --> 00:48:34,240
legal matters, I would really recommend reading this paper from the European Commission where

508
00:48:34,240 --> 00:48:40,160
they describe this type of license, the European Union Public License.

509
00:48:40,160 --> 00:48:44,880
It's a bit of a, it's a share-alike license, so it's not in the most permissive, but it's

510
00:48:44,880 --> 00:48:47,940
also not in the most strong copy left.

511
00:48:47,940 --> 00:48:55,380
And what is interesting is that whatever projects related to the European Commission, they are

512
00:48:55,380 --> 00:49:00,900
being released with this license, so that it's clear that it's for the benefit of everyone

513
00:49:00,900 --> 00:49:08,220
that those who will reuse this code kind of make also their code in this public licensure

514
00:49:08,220 --> 00:49:10,300
like public license.

515
00:49:10,300 --> 00:49:16,140
And then you can basically get what other people made with your code and improve your

516
00:49:16,140 --> 00:49:17,140
code.

517
00:49:17,140 --> 00:49:23,620
work of course to to make sure that also the new code that you release also follows this

518
00:49:24,420 --> 00:49:30,580
the same type of share alike license but this is kind of the best balance between you know being

519
00:49:30,580 --> 00:49:36,900
permissive and letting other people to use as much as possible and also being more ethical

520
00:49:36,900 --> 00:49:45,060
to kind of you know also get back from from what you give. Yeah we also we have a comment from a

521
00:49:45,060 --> 00:49:53,700
user that like the more open licenses cannot be closed retroactively and also like if you have

522
00:49:53,700 --> 00:50:01,300
different versions or you release a new version you can change the license but as a standard for

523
00:50:01,300 --> 00:50:06,900
the free software you cannot change the existing license without changing that version or the code.

524
00:50:06,900 --> 00:50:12,020
Yeah so that's what I was saying as well. Yes and one thing that I wanted to ask is

525
00:50:12,020 --> 00:50:21,220
Do you have any comments or thoughts on multi-licensing, or do you usually use one-line sense, or what

526
00:50:21,220 --> 00:50:22,500
is the best practice here?

527
00:50:22,500 --> 00:50:32,820
Well, I mean, I see the point of having multi-licenses, dual licenses, because sometimes some businesses,

528
00:50:32,820 --> 00:50:39,220
maybe in the context of academic research, maybe there's not much point, but if some

529
00:50:39,220 --> 00:50:44,580
of the research turns into a business idea or, you know, if companies want to have a

530
00:50:44,580 --> 00:50:54,820
mixture of copyright, private code and public, there is a benefit that, you know, if something

531
00:50:54,820 --> 00:51:04,460
is used for, I don't know, commercial purposes, then maybe you follow a certain license. But

532
00:51:04,460 --> 00:51:09,580
But then again, I'm also a bit conflicted with these dual licenses, because if one really

533
00:51:09,580 --> 00:51:17,620
looks at the open source and open source software licenses, it is clear that you can't really

534
00:51:17,620 --> 00:51:23,540
impose what people can do with your code.

535
00:51:23,540 --> 00:51:29,380
One of the advantages of the open source software licenses is that you're not liable yourself

536
00:51:29,380 --> 00:51:33,100
with whatever people will do, but also you can't control if people, for example, will

537
00:51:33,100 --> 00:51:39,420
use your code for doing something malicious. You can't block them with these licenses.

538
00:51:40,940 --> 00:51:46,220
Yeah, but I guess that the takeaway here is like you can use multiple licenses and

539
00:51:47,580 --> 00:51:53,020
which is a good, which can be a good practice if it's suitable for your case, for your data,

540
00:51:53,020 --> 00:51:57,420
or for yourself files. You can add a different license than the general license that you have

541
00:51:57,420 --> 00:52:06,540
for the whole repository. All right, I guess it's time for a little break. We can come back

542
00:52:07,180 --> 00:52:16,220
and maybe we can come back at the 14 o'clock or 14.01, 14.02. Yeah, maybe 14.02.

543
00:52:17,020 --> 00:52:21,340
All right, so let's have a little break and we will be back in 10 minutes.

544
00:52:26,000 --> 00:52:36,380
How about one on welcome back?

545
00:52:36,380 --> 00:52:42,300
to the social coding section. We already talked about social coding and sharing your code and

546
00:52:42,300 --> 00:52:50,460
also a bit of about licensing. Now we want to talk about software citations. We talked about

547
00:52:50,460 --> 00:52:55,100
how code is a bit different than papers and why there are different things that you have to

548
00:52:55,100 --> 00:53:01,980
consider and citation is one of the things which maybe is more similar and also a bit different

549
00:53:01,980 --> 00:53:07,980
then paper citations, I would say. So here in the screen, you can see we want to talk about

550
00:53:07,980 --> 00:53:12,380
FAIR principles first. So [name], what is FAIR principles?

551
00:53:13,020 --> 00:53:18,940
Yeah, so we touched on this FAIR principles also in the morning when it comes to the reproducibility.

552
00:53:19,660 --> 00:53:25,580
And basically the FAIR principle is like, you know, the acronyms would be findable,

553
00:53:25,580 --> 00:53:33,020
accessible interoperable and reusable and now while this maybe is kind of easy to understand

554
00:53:33,020 --> 00:53:39,980
when it comes to data because of course you want your data set to be findable by whatever search

555
00:53:39,980 --> 00:53:47,820
system accessible whether it is fully open or open on request so but at least there is a way

556
00:53:47,820 --> 00:53:53,580
to access it interoperable which means that you can work with other tools it's in a format that

557
00:53:53,580 --> 00:53:59,180
other softwares can open it and read it and reusable so that there is like we just discussed

558
00:53:59,180 --> 00:54:05,820
a license that would give some principles on how to reuse this to reuse it the same

559
00:54:07,020 --> 00:54:12,140
pair principle for data they can also be extended to software and so again that people can find

560
00:54:12,140 --> 00:54:18,300
your software that they can access it they can download it interoperable so that it works with

561
00:54:18,300 --> 00:54:26,460
data system and that there is a clear way on how to reuse it with clear licenses attached

562
00:54:26,460 --> 00:54:28,980
to the software, for example.

563
00:54:28,980 --> 00:54:37,220
So again, because sometimes people you might think, okay, I put my software, my scripts

564
00:54:37,220 --> 00:54:42,500
that I've done for this paper, I put them in my university homepage or they are on GitHub

565
00:54:42,500 --> 00:54:44,480
and that's it.

566
00:54:44,480 --> 00:54:50,640
always need to think a little bit long term. And I have to mention actually that me, myself,

567
00:54:50,640 --> 00:54:57,920
I decided to use some GitHub repository from the university and then that repository is

568
00:54:57,920 --> 00:55:03,120
not there anymore. So now I have published paper that are pointed to some Git repository

569
00:55:03,120 --> 00:55:09,080
hosted by a department that doesn't exist anymore. And so once in a while I get questions

570
00:55:09,080 --> 00:55:13,960
where is the code now, you know. So there was a mistake on my side that I didn't actually

571
00:55:13,960 --> 00:55:20,760
create a so-called DOI, Digital Object Identifier, or PID, Persistent Identifier,

572
00:55:21,480 --> 00:55:27,240
because if I would have done that, another organization would have taken care of preserving

573
00:55:27,240 --> 00:55:34,920
my software for as many years as we can think of. And so what we see here in this make your code

574
00:55:34,920 --> 00:55:40,520
citable and persistent, the persistent part is exactly this. It's not enough to put it on your

575
00:55:40,520 --> 00:55:47,400
web page or to put it on github because github maybe will change your account will be i don't

576
00:55:47,400 --> 00:55:51,960
know maybe you decide to delete your account and with that all your repository or by accident you

577
00:55:51,960 --> 00:55:58,920
even delete a repository because you thought that that was just a side project so there are services

578
00:55:58,920 --> 00:56:07,480
like zenodo which is hosted by cern and with zenodo you can basically get a digital object

579
00:56:07,480 --> 00:56:13,320
identifier for anything digital it can be the software release for example or it can also be

580
00:56:13,320 --> 00:56:21,880
used for for data sets that can be published. And so what is nice about this Zenodo repository

581
00:56:21,880 --> 00:56:29,720
is that it automatically can be linked with your open with your available GitHub repositories

582
00:56:29,720 --> 00:56:37,240
so that whenever you create a release on your GitHub project repository Zenodo can actually

583
00:56:37,240 --> 00:56:43,640
automatically basically pull the new release so that you can basically have a permanent copy of

584
00:56:43,640 --> 00:56:53,960
your GitHub releases stored in the CERN data center. Have you ever published this type of

585
00:56:53,960 --> 00:57:02,280
DOI or have you helped anyone with this type of getting a DOI for a software or SANE?

586
00:57:02,280 --> 00:57:10,880
Yeah, we were helping a researcher to publish the code and we had to use that and also explain

587
00:57:10,880 --> 00:57:19,640
the things that you already explained about why it's important to just have a DOI and

588
00:57:19,640 --> 00:57:25,440
it's not enough to only host it on your personal GitHub account because in 10 years GitHub can

589
00:57:25,440 --> 00:57:26,440
go down, right?

590
00:57:26,440 --> 00:57:27,440
We don't know.

591
00:57:27,440 --> 00:57:28,440
Yeah.

592
00:57:28,440 --> 00:57:34,360
And people and researchers are already familiar with this because it's also a very similar

593
00:57:34,360 --> 00:57:39,000
aspect in publishing your paper as well. It's not enough to publish your PDF or

594
00:57:39,000 --> 00:57:44,760
PDF of your research on your personal website or Google Drive. You have to have a DOI

595
00:57:46,200 --> 00:57:52,120
to make it persistent for the future. Yeah, it's also nice that the interface that

596
00:57:52,120 --> 00:57:58,920
comes with the Zenodo website. If you see, if you search for some software, you can actually

597
00:57:58,920 --> 00:58:04,120
look at some metrics. Again, we don't do this for the metrics, but sometimes the metrics help us,

598
00:58:04,840 --> 00:58:13,960
whatever motivate our bosses, that you can look at metrics like number of downloads and number

599
00:58:13,960 --> 00:58:20,360
of citations so that, you know, you can also kind of quantify a little bit impact that your

600
00:58:20,360 --> 00:58:27,320
software or scripts might have. What is here now it is a checklist. Checklists are always useful

601
00:58:27,320 --> 00:58:34,360
because they're practical and you can basically see what is needed to make your software citable

602
00:58:35,880 --> 00:58:44,040
and so assigning appropriate license like we mentioned before the break then we want to

603
00:58:44,040 --> 00:58:51,960
to have a description of the software so that there is appropriate metadata format, clear

604
00:58:51,960 --> 00:58:59,200
version numbers, authors are credited, we get this persistent identifier like the DOI,

605
00:58:59,200 --> 00:59:06,680
and then even sometimes we won't tell in the software which publication to cite, because

606
00:59:06,680 --> 00:59:11,960
in some cases some publications might be related, the so-called software packages publications,

607
00:59:11,960 --> 00:59:16,600
some other cases the main publication is about let's say some application of the software but

608
00:59:16,600 --> 00:59:24,920
still you release the software along with the original publication. Recently there's

609
00:59:27,400 --> 00:59:32,760
there's also the way that through your on your github repository you can also like a so-called

610
00:59:32,760 --> 00:59:41,640
machine readable software citation file so cff citation file format and it basically looks

611
00:59:41,640 --> 00:59:47,480
something like this. So machine readable means that a computer, another computer can automatically

612
00:59:47,480 --> 00:59:53,000
read and you see that these are like variables with the names and the values and some can be

613
00:59:53,000 --> 01:00:01,480
you know structure. It looks a bit like this yaml files and so this pre kind of fixed

614
01:00:01,480 --> 01:00:08,120
metadata about the software makes it easier and makes especially if you have you know search

615
01:00:08,120 --> 01:00:15,320
and genes or or specific publication and genes that it's easy for these other tools to basically

616
01:00:15,320 --> 01:00:20,760
index your software and make it findable and accessible and so on with the FAIR principles.

617
01:00:22,040 --> 01:00:27,720
GitHub now supports this citation cff files so if you name the file with this

618
01:00:28,760 --> 01:00:36,040
exactly like a citation.cff it can already be automatically interpreted by by GitHub and here

619
01:00:36,040 --> 01:00:42,360
there's some like a video how to create it and even a web but in practice if you are from if

620
01:00:42,360 --> 01:00:48,040
you're fine with that with using some text editor it's you can even take just this template and

621
01:00:49,400 --> 01:00:56,840
and reuse it so anything else to add was is there anything in the notes document worth

622
01:00:57,480 --> 01:01:05,160
uh no we don't have any questions or comments till now all right well then in general also

623
01:01:05,160 --> 01:01:09,100
So this is one way to get your citations with the software.

624
01:01:09,100 --> 01:01:14,580
But in some cases, maybe your software, the contribution that you and your research group

625
01:01:14,580 --> 01:01:20,560
add to the software can be substantial so that there can be papers that are truly about

626
01:01:20,560 --> 01:01:21,960
software.

627
01:01:21,960 --> 01:01:25,540
So full papers that they describe software packets.

628
01:01:25,540 --> 01:01:30,320
And then there are specific journals that accept this type of software papers.

629
01:01:30,320 --> 01:01:35,060
So then if I can kind of call back of someone was mentioning that sometimes software is

630
01:01:35,060 --> 01:01:40,300
not peer-reviewed, with this type of work you can understand that it's the software

631
01:01:40,300 --> 01:01:43,660
even more important than the actual paper.

632
01:01:43,660 --> 01:01:49,860
And so it might go to more extensive peer-review and checks and compatibility and so on.

633
01:01:49,860 --> 01:01:55,220
At the end of the day, like Jose mentioned earlier, it's maybe not the actual work of

634
01:01:55,220 --> 01:01:57,060
the two or three peer reviewers,

635
01:01:57,060 --> 01:01:58,660
but it's really the community

636
01:01:58,660 --> 01:02:01,180
that is around the software project.

637
01:02:01,180 --> 01:02:05,100
So if these larger packages,

638
01:02:05,100 --> 01:02:07,660
they have a big community around

639
01:02:07,660 --> 01:02:09,660
and we can all be part of that community,

640
01:02:09,660 --> 01:02:12,940
whether it's just fixing a typo in the documentation

641
01:02:12,940 --> 01:02:17,940
or working on a new release with the main developers,

642
01:02:18,580 --> 01:02:22,260
so that the peer review is truly a dynamic process

643
01:02:22,260 --> 01:02:23,820
that basically never ends.

644
01:02:23,820 --> 01:02:29,820
not that when this software was published in 2021, it has not been touched. I'm sure that

645
01:02:29,820 --> 01:02:34,460
it has improved in the meantime and it has evolved and gotten better and better.

646
01:02:38,060 --> 01:02:45,580
One note that I wanted to add is like the papers that only talking about the software are becoming

647
01:02:45,580 --> 01:02:54,620
more popular nowadays. And at least for a lot of Python libraries, all libraries, you can see

648
01:02:54,620 --> 01:02:59,580
they publish the paper. And it's also good for the researchers as well, because they get

649
01:02:59,580 --> 01:03:05,500
many, many citations, which is maybe not the case for your scientific papers. So consider

650
01:03:05,500 --> 01:03:09,820
on publishing the paper for your code as well, which is becoming more popular nowadays.

651
01:03:09,820 --> 01:03:17,260
Yeah, and it's true. And it's nice that maybe this type of metrics like, you know, maybe

652
01:03:17,260 --> 01:03:23,980
right now in the CV, in some standard CV that might not yet be space for your software packages,

653
01:03:23,980 --> 01:03:28,980
but these are catching up. So I can mention in Finland, there is the tank CV, which is

654
01:03:28,980 --> 01:03:34,740
one format used by the Finnish grant agencies. And already they would have a section right

655
01:03:34,740 --> 01:03:39,820
now they have a section right now that where one can add this type of extra non-typical

656
01:03:39,820 --> 01:03:44,740
paper type of publications or like software.

657
01:03:44,740 --> 01:03:49,960
All right so we still have 10 minutes left and then of course we will ask about the feedback

658
01:03:49,960 --> 01:03:58,980
of the day. The last part is about sharing data. Now there are many and better and more

659
01:03:58,980 --> 01:04:08,100
extensive talks online on sharing data because as you can understand when it comes we discussed

660
01:04:08,100 --> 01:04:12,980
a lot about software sharing and contributing and reuse it but all the same could be said

661
01:04:12,980 --> 01:04:20,580
about data that sometimes we might wanna have a data set that is truly copyrighted and so

662
01:04:20,580 --> 01:04:25,540
nobody else can access and they need to ask you for a license or maybe they need to pay you

663
01:04:25,540 --> 01:04:31,620
you. But some other times we might have a data set that you can fully release opening

664
01:04:31,620 --> 01:04:38,020
whether because you decide to do so with your employer with your supervisor and of course

665
01:04:38,020 --> 01:04:44,300
everything in between where you might want like we had this share alike for the software

666
01:04:44,300 --> 01:04:50,380
the same would be for the data that you share the data but any derivative work done with

667
01:04:50,380 --> 01:04:55,540
and the data should also be released with a similar license, for example.

668
01:04:55,740 --> 01:05:00,980
So when it comes to this, where to actually share the data,

669
01:05:01,180 --> 01:05:06,740
what type of options are there, this Zenodo repository is also mentioned in this case.

670
01:05:06,940 --> 01:05:11,860
In Zenodo, it's not just about sharing the release of your software,

671
01:05:12,060 --> 01:05:15,820
but you can share all sorts of data and it's really nice that you can also share

672
01:05:15,820 --> 01:05:23,980
slides and white papers or anything that you feel like that can contribute to your scientific

673
01:05:23,980 --> 01:05:31,020
community. But Zenodo is not the only one and so there are these other services. I'd like to at

674
01:05:31,020 --> 01:05:39,420
least mention the Open Science Framework that allows to do this type of sharing of nice dataset.

675
01:05:39,420 --> 01:05:45,420
But in international context, the Open Science Framework is hosted in the United States,

676
01:05:45,420 --> 01:05:54,340
Ferrari members, Zenodo is in Switzerland, Figshare I think now is bought by Naturespringer,

677
01:05:54,340 --> 01:06:03,340
EU.is basically EOSC or European platform, and Dryad is also, I don't think it's public

678
01:06:03,340 --> 01:06:13,180
anymore, or they might give you a non-profit, like a small, how do you call, freemium license.

679
01:06:13,180 --> 01:06:20,160
But here then we will not go through this, but different countries, at least in the Nordics

680
01:06:20,160 --> 01:06:25,460
where most of you are right now, there are different national services for sharing the

681
01:06:25,460 --> 01:06:35,300
data and there are also resources for the so-called data management. Now again we will not expand

682
01:06:35,300 --> 01:06:42,820
much on here but if you think that if git was using for keeping versioning versions of your code

683
01:06:42,820 --> 01:06:48,740
the same could be done with data so that you can version the version of the data set because you

684
01:06:48,740 --> 01:06:55,140
had version 1.0 that had some I don't know outliers but then you have version 2.0 where

685
01:06:55,140 --> 01:06:58,300
where you clean the data, remove the outliers and so on.

686
01:06:58,300 --> 01:07:00,900
So these type of tools like Data Lad,

687
01:07:00,900 --> 01:07:04,160
Data Stewardship Wizard, Git Annex,

688
01:07:04,160 --> 01:07:06,540
that is not mentioned here, but it's Prattix Data Lad,

689
01:07:06,540 --> 01:07:10,500
so they can help you basically keep also the versioning

690
01:07:10,500 --> 01:07:14,320
of the data and not just of the code.

691
01:07:14,320 --> 01:07:17,380
And then when it comes to the licensing of data sets

692
01:07:17,380 --> 01:07:22,340
and databases which are a specific type of data set,

693
01:07:22,340 --> 01:07:27,340
there are different legislation that can cover this.

694
01:07:27,540 --> 01:07:31,300
And similarly, as we had for software,

695
01:07:31,300 --> 01:07:33,980
we can have something that is in the full spectrum

696
01:07:33,980 --> 01:07:37,100
from completely open public domain

697
01:07:37,100 --> 01:07:40,980
to completely private copyright.

698
01:07:42,040 --> 01:07:46,700
So the type of licenses that you hear about data,

699
01:07:46,700 --> 01:07:48,820
there's so-called creative common licenses.

700
01:07:48,820 --> 01:07:50,900
There are different flavors

701
01:07:50,900 --> 01:07:54,260
with the CC0 being the so-called public domain

702
01:07:54,260 --> 01:07:56,300
where it's as open as possible,

703
01:07:56,300 --> 01:07:59,300
people can reuse and they don't even need to cite you.

704
01:07:59,300 --> 01:08:01,660
And then more kind of restrictions

705
01:08:01,660 --> 01:08:02,980
on the reuse of the data,

706
01:08:02,980 --> 01:08:06,060
which could be that people need to cite you

707
01:08:06,060 --> 01:08:10,380
or people cannot do commercial work with that

708
01:08:10,380 --> 01:08:14,940
or this share alike that people need to re-share

709
01:08:14,940 --> 01:08:16,300
what they did with the data

710
01:08:16,300 --> 01:08:20,800
as you are doing with the data and basically so on.

711
01:08:20,900 --> 01:08:27,240
When it comes to the machine learning and AI,

712
01:08:27,240 --> 01:08:30,520
things are of course getting a little bit more complicated.

713
01:08:30,520 --> 01:08:34,940
Machine learning models are impracticed data,

714
01:08:34,940 --> 01:08:38,500
so the model, the weights on its own,

715
01:08:38,500 --> 01:08:40,820
they can't really be,

716
01:08:40,820 --> 01:08:43,420
you can't do much with those unless you

717
01:08:43,420 --> 01:08:47,060
have a system to basically run the models and whether you

718
01:08:47,060 --> 01:08:49,220
are generating data or

719
01:08:49,220 --> 01:08:54,760
classifying whatever you're classifying but what is tricky and at least what is

720
01:08:54,760 --> 01:08:59,480
a bit blurred right now here in the context of AI and machine learning

721
01:08:59,480 --> 01:09:05,960
models is that sometimes you hear things like open source models or open source

722
01:09:05,960 --> 01:09:10,840
language models but if one really would kind of look at the definition of open

723
01:09:10,840 --> 01:09:16,040
source they are actually not open source they sometimes people call open weights

724
01:09:16,040 --> 01:09:20,960
so that the models, the weights, the actual file,

725
01:09:20,960 --> 01:09:22,520
you can download it and reuse it,

726
01:09:22,520 --> 01:09:26,160
but you have no idea of how that model was done.

727
01:09:26,160 --> 01:09:29,160
So everything else basically around the model

728
01:09:29,160 --> 01:09:31,300
is actually not open at all.

729
01:09:32,400 --> 01:09:36,260
Here, it mentions this Artificial Intelligence Act,

730
01:09:36,260 --> 01:09:38,760
which was became entering into force

731
01:09:38,760 --> 01:09:41,260
on the 1st of August of this year.

732
01:09:41,260 --> 01:09:45,520
And the AI Act adds some basically restrictions

733
01:09:45,520 --> 01:09:50,460
on what the researchers even can basically open.

734
01:09:50,460 --> 01:09:52,800
If you're not planning to open anything

735
01:09:52,800 --> 01:09:55,380
related to your AI models,

736
01:09:55,380 --> 01:09:58,660
basically the AI act lets you do whatever you want.

737
01:09:58,660 --> 01:10:01,560
But in the moment that you need to start sharing your model,

738
01:10:01,560 --> 01:10:05,280
you need to basically see if your type

739
01:10:05,280 --> 01:10:07,760
of machine learning model would fall inside

740
01:10:07,760 --> 01:10:12,440
of this so-called high risk or prohibited AI systems.

741
01:10:12,440 --> 01:10:17,760
And of course, there are different, how can I say, obligations. There are different legal

742
01:10:17,760 --> 01:10:23,240
obligations depending on what type of artificial intelligence systems you might be working

743
01:10:23,240 --> 01:10:31,760
on. In general, we have some material on these new topics that we will expand on this page.

744
01:10:31,760 --> 01:10:39,680
But if you have questions, of course, please write them down in the chat. And then many

745
01:10:39,680 --> 01:10:45,680
nice links here that would be nice to browse together, but our time is soon over.

746
01:10:45,680 --> 01:10:52,680
I was saying, do you have any comments or is there anything to highlight from the notes?

747
01:10:52,680 --> 01:11:03,160
No. In the notes, we don't have any direct question to sharing data. We had some questions

748
01:11:03,160 --> 01:11:10,600
about software citations and some about like accounts, but not about sharing data.

749
01:11:11,640 --> 01:11:18,600
And yeah, it was completely good. If you want to pick, if you need to choose one of these

750
01:11:18,600 --> 01:11:24,600
further readings and you have time to go deeper into all this reproducible research, opening data

751
01:11:24,600 --> 01:11:29,800
and opening software, I really recommend this Turing Way, which is an open book on all these

752
01:11:29,800 --> 01:11:36,360
topics. It's a nice read. You can read it. It's open. You can read it on your mobile phone during

753
01:11:36,360 --> 01:11:44,920
your commute. So if you really need to pick one, I recommend the first one. And in general,

754
01:11:44,920 --> 01:11:50,760
I mean, it's nice that we are building a community together through Code Refinery.

755
01:11:50,760 --> 01:11:57,560
If you explore our pages, you can also get access to a chat. And in the chats that we use,

756
01:11:57,560 --> 01:12:03,320
is called Zulip and through the Zulip chat you can join discussions. We can continue discussions

757
01:12:03,320 --> 01:12:11,640
on these topics and we have all sorts of discussions there so that is something nice.

758
01:12:11,640 --> 01:12:16,680
We already saw some participants from this workshop have already joined the Code Refinery chat.

759
01:12:17,640 --> 01:12:23,880
All right, so we still have eight minutes which is a good moment for asking for feedback.

760
01:12:23,880 --> 01:12:31,240
so it would be great if on the notes we could paste the usual feedback for the day

761
01:12:32,280 --> 01:12:34,680
if this was too fast too slow

762
01:12:37,080 --> 01:12:40,200
and i see that they are already there i could actually switch

763
01:12:41,240 --> 01:12:46,200
to the notes view with my movie director interface

764
01:12:46,200 --> 01:13:03,640
And so yes, as usual, even though we give similar lessons over the years, they're never

765
01:13:03,640 --> 01:13:09,680
exactly the same, the phases are changing, we might update the lesson a little bit, and

766
01:13:09,680 --> 01:13:15,960
of course what makes this unique is your questions and your experience, so please give us feedback

767
01:13:15,960 --> 01:13:21,320
and if there's something you want to you think that we could have covered more or

768
01:13:21,320 --> 01:13:33,640
less please write it down. Then tomorrow we have we have the fifth day of the

769
01:13:33,640 --> 01:13:40,920
workshop and tomorrow the topic will be documentation which is kind of somewhat

770
01:13:40,920 --> 01:13:46,920
related with the topics of the day so because along with the license you also want to tell

771
01:13:46,920 --> 01:13:53,640
people not just how to use your code but also how to maybe you know expand it, contribute to it

772
01:13:53,640 --> 01:13:59,240
and so on. And then the second part of tomorrow will be about Jupyter notebooks. Maybe some of

773
01:13:59,240 --> 01:14:06,280
you are already familiar with this way of interacting with code and data and hopefully

774
01:14:06,280 --> 01:14:12,120
for those who have never experienced this, it's something you can try out. Again, tomorrow

775
01:14:12,120 --> 01:14:22,380
will be like a demo day, so you're not expected to actually, you know, run things, but if

776
01:14:22,380 --> 01:14:30,000
you want to actually do and see what people are doing, whether you want to build the documentation,

777
01:14:30,000 --> 01:14:34,240
and it's not just about documentation, because with the same system that will be introduced

778
01:14:34,240 --> 01:14:36,260
Tomorrow you can also, it's the same system

779
01:14:36,260 --> 01:14:38,380
that we use to build our web pages,

780
01:14:38,380 --> 01:14:40,060
our training materials,

781
01:14:40,060 --> 01:14:43,180
they're all built with this same system.

782
01:14:43,180 --> 01:14:46,700
And so, you can also learn how to create your website,

783
01:14:46,700 --> 01:14:51,660
for example, under this github.io if you want.

784
01:14:51,660 --> 01:14:54,180
And so, if you wanna test these things,

785
01:14:54,180 --> 01:14:57,060
you please follow our installation instructions

786
01:14:58,100 --> 01:15:00,740
if you're planning to do that.

787
01:15:00,740 --> 01:15:13,740
All right. I think I see that people are commenting. Is there anything to highlight? Let me have a look at the chat.

788
01:15:13,740 --> 01:15:22,900
Um, based on the feedback, uh, I think a place where that was on track,

789
01:15:23,580 --> 01:15:26,580
if I was satisfied with the speed and although like some, we have some

790
01:15:26,580 --> 01:15:31,020
comments that, uh, it was a bit too fast and there were like many topics

791
01:15:31,020 --> 01:15:35,940
that we had to cover and, uh, unfortunately maybe it was a bit too

792
01:15:35,940 --> 01:15:39,780
fast if you don't have the required background or if you're not familiar

793
01:15:39,780 --> 01:15:42,980
with it, with the subject, it can be a bit overwhelming.

794
01:15:42,980 --> 01:15:52,620
This is exactly why we decided almost a year ago to not having exercises in this week too,

795
01:15:52,620 --> 01:15:57,980
because sometimes not only there's lots of new topics, on top of those try to run snake

796
01:15:57,980 --> 01:16:08,300
make locally or building a Zenodo repository or how do you call it, getting a DOI through

797
01:16:08,300 --> 01:16:14,700
there's another sandbox so we hopefully this is a little bit more digestible and useful

798
01:16:14,700 --> 01:16:19,980
and of course we provide you with all these links and other resources that those who really

799
01:16:19,980 --> 01:16:27,060
have time can can try themselves and please join our Zulip chat so that we can continue

800
01:16:27,060 --> 01:16:31,540
discussing there and helping you there if you want to try these things and you need

801
01:16:31,540 --> 01:16:36,540
further help.

802
01:16:36,540 --> 01:16:41,540
All right.

803
01:16:41,540 --> 01:16:46,540
So hopefully this was a good day for and

804
01:16:46,540 --> 01:16:51,540
I can maybe add also a reminder that day six will be more about

805
01:16:51,540 --> 01:16:56,540
coding related things. We will cover things like automated testing

806
01:16:56,540 --> 01:17:05,580
and modular code development and then again if you want to do or if you want to try the exercises

807
01:17:05,580 --> 01:17:12,140
that the instructors are going to show on the stream you can also you should basically also

808
01:17:12,140 --> 01:17:18,220
install what we recommend in our installation pages but then again it's just fine to participate

809
01:17:18,220 --> 01:17:25,740
through the questions and thank you again for the many questions there's almost 50 today so

810
01:17:25,740 --> 01:17:31,340
it was great that you were so active. Also, thanks for the participants who

811
01:17:31,340 --> 01:17:38,300
were active in answering other questions. Thanks. I see one question that is for me that is related

812
01:17:38,300 --> 01:17:47,340
to the one ECTS credit. And so, yes, in this case, I tried to be as clear as possible on that page,

813
01:17:47,340 --> 01:17:53,020
but if something is not clear, I'm happy to expand it. In practice, this means that if you

814
01:17:53,020 --> 01:18:01,220
you are sure that your supervisor or study coordinator or whoever is able to accept a

815
01:18:01,220 --> 01:18:07,220
kind of an official paper from me that says that this person has completed the Code Refinery

816
01:18:07,220 --> 01:18:14,940
workshop, there are very simple homework to do for getting the certificate, then I will

817
01:18:14,940 --> 01:18:20,700
give you this document and then you can convert that into a credit.

818
01:18:20,700 --> 01:18:25,820
And if you are at Aalto University, you just need to give me your student number and I

819
01:18:25,820 --> 01:18:31,660
will add the credit for you on our system.

820
01:18:31,660 --> 01:18:38,660
But in general, we don't track if you were attending, you know, whatever days you were

821
01:18:38,660 --> 01:18:39,660
attending.

822
01:18:39,660 --> 01:18:46,780
As long as you do the homeworks, we can, you know, we can give you, we can give you the

823
01:18:46,780 --> 01:18:47,780
credit.

824
01:18:47,780 --> 01:18:59,860
Okay, so let's see if there's any other quick question to pick.

825
01:18:59,860 --> 01:19:08,220
We still have one minute and a half.

826
01:19:08,220 --> 01:19:23,060
Yeah, I think most of the things are uncertain.

827
01:19:23,060 --> 01:19:29,580
All right, maybe we can call it a day, one minute earlier, and thank you for watching.

828
01:19:29,580 --> 01:19:36,340
The recordings will appear immediately on Twitch TV and later on the week on our YouTube

829
01:19:36,340 --> 01:19:41,020
channels and so see you tomorrow for day 5 of Code Refinery.

830
01:19:41,020 --> 01:19:44,860
Thank you [name] for being here with me and thank you everyone for watching.

831
01:19:44,860 --> 01:19:47,020
Thank you everyone for joining.

832
01:19:47,020 --> 01:19:48,020
Bye.

833
01:19:48,020 --> 01:19:48,520
Bye bye.

