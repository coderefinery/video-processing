1
00:00:00,000 --> 00:00:01,080
Yes.

2
00:00:01,080 --> 00:00:04,080
Works for me. Yeah.

3
00:00:04,080 --> 00:00:07,080
Okay. So yeah.

4
00:00:07,080 --> 00:00:14,840
Let's get started. We'll talk about documentation today or in this lesson like [name] mentioned.

5
00:00:20,040 --> 00:00:25,480
Let's start with a really broad question. Why do you need documentation? What's the point?

6
00:00:25,480 --> 00:00:34,600
Can you take us?

7
00:00:36,440 --> 00:00:37,160
Yeah.

8
00:00:37,160 --> 00:00:38,600
Why do you need good documentation?

9
00:00:44,360 --> 00:00:46,920
Probably the most important reason to write good documentation,

10
00:00:46,920 --> 00:00:50,680
at least when you're working on your own project, when you're starting out,

11
00:00:50,680 --> 00:00:58,040
It might seem that you know how everything works in your code when you're writing it,

12
00:00:58,040 --> 00:01:00,040
and you probably do.

13
00:01:00,040 --> 00:01:05,640
But then a month later or even a week later or sometimes even a day later, you come back

14
00:01:05,640 --> 00:01:12,040
to it and it is very much not clear what is doing what.

15
00:01:12,040 --> 00:01:18,080
So that is â€“ we said about version control, one of the main reasons you need version control

16
00:01:18,080 --> 00:01:19,720
is for yourself.

17
00:01:19,720 --> 00:01:27,400
same goes for documentation. One of the main reasons is for yourself. Probably also a good

18
00:01:27,400 --> 00:01:32,280
rule of thumb of when your documentation is good is when you think you could actually read it and

19
00:01:32,280 --> 00:01:46,040
figure out what's going on. That's a big reason. Of course, another big reason is that it helps

20
00:01:46,040 --> 00:01:53,800
other people use your project and therefore it helps other people then make contributions and

21
00:01:53,800 --> 00:02:01,480
makes your project more useful. Shall we go into this lesson but?

22
00:02:04,280 --> 00:02:08,840
Yes, I think the icebreaker is covered essentially.

23
00:02:11,240 --> 00:02:14,360
Like the introduction, so let's go to motivation and wishlist.

24
00:02:14,360 --> 00:02:15,360
Yeah.

25
00:02:15,360 --> 00:02:16,360
Sure.

26
00:02:16,360 --> 00:02:31,480
I mean, we already started talking a bit about motivation, why is it important.

27
00:02:31,480 --> 00:02:43,840
So should we start, so there is now a documentation section at the bottom of the notes.

28
00:02:43,840 --> 00:02:47,960
So should we start a quick question here?

29
00:02:47,960 --> 00:02:49,480
I'll write down the question.

30
00:02:53,800 --> 00:02:55,680
And then a lot of the lesson will

31
00:02:55,680 --> 00:02:58,560
be these kind of discussions in the notes.

32
00:02:58,560 --> 00:03:02,400
So I will write, why documenting code?

33
00:03:02,400 --> 00:03:04,240
Or why should you document your code?

34
00:03:08,840 --> 00:03:12,160
And just, yeah, please write some answers.

35
00:03:12,160 --> 00:03:17,840
So write down why you think documentation is useful.

36
00:03:17,840 --> 00:03:25,320
And also, what do you need for good documentation?

37
00:03:25,320 --> 00:03:31,840
So what do you think would be useful for yourself

38
00:03:31,840 --> 00:03:35,480
if you are working in your own code?

39
00:03:35,480 --> 00:03:38,880
And what would you actually want from someone else's code,

40
00:03:38,880 --> 00:03:41,840
someone else's project in their documentation.

41
00:03:47,640 --> 00:03:52,040
And assuming you are working with a research group

42
00:03:52,040 --> 00:03:52,960
who's using the code,

43
00:03:52,960 --> 00:03:55,520
how do you motivate your colleagues

44
00:03:55,520 --> 00:03:57,760
to contribute to the documentation?

45
00:03:57,760 --> 00:03:59,460
That's also an important question.

46
00:04:03,880 --> 00:04:07,600
So let's wait a few minutes

47
00:04:07,600 --> 00:04:12,000
Before we go into this, some answers we have already given,

48
00:04:12,000 --> 00:04:17,200
but these are now by no means correct answers.

49
00:04:17,200 --> 00:04:19,240
Your answers will be more correct.

50
00:04:19,240 --> 00:04:23,680
So please go ahead and write down in the notes.

51
00:04:23,680 --> 00:04:24,480
Indeed, everyone's.

52
00:04:24,480 --> 00:04:30,440
We'll wait a minute or so to see what answers come up.

53
00:04:30,440 --> 00:04:30,940
Yes.

54
00:04:37,600 --> 00:05:00,840
I got a video.

55
00:05:00,840 --> 00:05:02,840
You

56
00:05:30,840 --> 00:05:43,400
A lot of good answers.

57
00:05:43,400 --> 00:05:48,080
So what do we have to make it possible for other people to use the code?

58
00:05:48,080 --> 00:05:50,900
That is important.

59
00:05:50,900 --> 00:05:53,440
That includes of course your colleagues.

60
00:05:53,440 --> 00:06:00,480
So one option is if you have a normal average-sized research group, what would that be, five people

61
00:06:00,480 --> 00:06:07,360
using your code to some extent. One option is to write down the answers to the most obvious

62
00:06:07,360 --> 00:06:12,880
questions in the beginning. The other option is to tell everybody one by one, probably a couple of

63
00:06:12,880 --> 00:06:20,800
times. That is a big reason to write documentation. But then also, of course, not just your

64
00:06:20,800 --> 00:06:28,000
colleagues, but if you publish it, then other people might also benefit. That is, of course,

65
00:06:28,000 --> 00:06:34,960
was good. To know what it's doing, what is needed, or the outputs, it needs to be sufficiently

66
00:06:34,960 --> 00:06:38,360
clear so that I'm able to tweak it, yeah.

67
00:06:38,360 --> 00:06:39,840
That's true.

68
00:06:39,840 --> 00:06:40,840
Yeah.

69
00:06:40,840 --> 00:06:41,840
Sometimes.

70
00:06:41,840 --> 00:06:50,440
Yeah, so this is, I see a function, it's several lines of code, 20 lines of code. It's nice

71
00:06:50,440 --> 00:06:54,960
if it has good documentation so that I don't actually have to try to read the code to figure

72
00:06:54,960 --> 00:07:03,040
what it's doing. Yeah, so that it's usable. What's the point if it's not?

73
00:07:04,560 --> 00:07:12,080
Yeah, if you're not only writing for yourself. I hear a bit of an echo again. Did something

74
00:07:12,080 --> 00:07:16,640
change the microphone settings? Oh, well. Yeah.

75
00:07:16,640 --> 00:07:21,640
Yeah, so if you're only writing for yourself,

76
00:07:24,560 --> 00:07:25,880
well, even then you should document

77
00:07:25,880 --> 00:07:27,080
because you will forget,

78
00:07:27,080 --> 00:07:32,080
but it is your kind of in a way wasting effort

79
00:07:33,600 --> 00:07:37,720
because someone else could also be using the same code

80
00:07:38,560 --> 00:07:40,160
and that would be more efficient.

81
00:07:41,840 --> 00:07:44,040
Remind myself what the functions did, yeah.

82
00:07:44,040 --> 00:07:47,040
like putting frozen food in the freezer.

83
00:07:47,040 --> 00:07:49,600
It's not labeled, it's hard to figure out what it is, right?

84
00:07:49,600 --> 00:07:51,960
So you come back in a month or a year

85
00:07:51,960 --> 00:07:55,720
and it is pretty much impossible to figure out

86
00:07:55,720 --> 00:08:02,200
what your code is doing unless the functions

87
00:08:02,200 --> 00:08:05,040
and all the parts are properly labeled and explained.

88
00:08:05,040 --> 00:08:16,880
Prevent having to rewrite, yeah.

89
00:08:16,880 --> 00:08:18,660
So yeah, that's true.

90
00:08:18,660 --> 00:08:22,960
If you don't know what the code is doing, then you probably need to just rewrite it

91
00:08:22,960 --> 00:08:23,960
later.

92
00:08:23,960 --> 00:08:24,960
That happens.

93
00:08:24,960 --> 00:08:33,080
Explain the code to myself and others.

94
00:08:33,080 --> 00:08:39,000
people in the research group do not have the same skill levels. Essentially, either you write

95
00:08:39,560 --> 00:08:47,400
documentation for the people in your research group to use your code or you end up teaching

96
00:08:47,400 --> 00:08:52,840
them probably a few times before they are confident in how to use your code.

97
00:08:54,680 --> 00:09:01,800
That is a big reason for documentation. That covers way more than what we had.

98
00:09:03,080 --> 00:09:13,240
then what we had in our short answer. So that last point, shield your limited time, is essentially

99
00:09:13,240 --> 00:09:20,440
that you don't have to keep re-explaining the same thing to your colleagues and other people.

100
00:09:21,560 --> 00:09:31,240
Okay, so what is documentation and what would you actually want it to look like?

101
00:09:31,240 --> 00:09:41,320
This is pretty much the same question really. There's a few different types of documentations

102
00:09:41,320 --> 00:09:53,320
that are useful. There's tutorials. These show a new user how to do a thing with the code and

103
00:09:53,960 --> 00:10:01,160
these are kind of like the exercises we have in these lessons for example. You have a specific

104
00:10:01,160 --> 00:10:08,520
goal and then the tutorial gives you some lines of code to run. It's not necessarily the goal that

105
00:10:08,520 --> 00:10:13,240
the user actually has, it's more there to show how to do things. So these are

106
00:10:16,280 --> 00:10:22,760
learning oriented. Sometimes they look a lot like lecture materials.

107
00:10:22,760 --> 00:10:35,920
Then, you can have how-to guides, goal-oriented, well, I just said that the tutorials kind

108
00:10:35,920 --> 00:10:41,280
of usually have a specific goal, but they are doing a specific thing in order to show

109
00:10:41,280 --> 00:10:43,920
you how the code works.

110
00:10:43,920 --> 00:10:50,720
Goal-oriented here means how-to guides show you how you should do a specific thing that

111
00:10:50,720 --> 00:10:57,680
is probably something you might want to do. A tutorial is how to train a machine learning

112
00:10:57,680 --> 00:11:04,240
model to recognize handwritten digits. You wouldn't probably actually need a code that

113
00:11:04,240 --> 00:11:09,920
does that because that's been written a million times. But a how-to guide would be how to

114
00:11:10,720 --> 00:11:15,280
train a actual big large language model, how to fine-tune it. That's something you might actually

115
00:11:15,280 --> 00:11:22,280
be doing in your real life, in your work.

116
00:11:22,280 --> 00:11:27,280
Explanations, just essentially telling you what the code is

117
00:11:27,280 --> 00:11:30,280
doing and how things work.

118
00:11:30,280 --> 00:11:32,280
That's maybe the most straightforward.

119
00:11:32,280 --> 00:11:35,280
When you say documentation, that might come to mind first.

120
00:11:35,280 --> 00:11:40,280
Then there's a reference.

121
00:11:40,280 --> 00:11:43,280
Something like a list of functions, a list of classes,

122
00:11:43,280 --> 00:11:47,600
is and what each of those does, why they exist.

123
00:11:47,600 --> 00:11:52,480
So there's a lot more here, but these are the basic parts.

124
00:11:52,480 --> 00:11:56,920
If you know what these are and figure out

125
00:11:56,920 --> 00:12:00,640
which ones you actually need in your project and write those,

126
00:12:00,640 --> 00:12:04,600
that is a pretty good place to be at.

127
00:12:04,600 --> 00:12:06,320
But it all depends on the project.

128
00:12:06,320 --> 00:12:09,720
So a small project, just a readme file

129
00:12:09,720 --> 00:12:14,000
that contains some explanation of what the code is

130
00:12:14,000 --> 00:12:17,640
and maybe some very short example

131
00:12:17,640 --> 00:12:22,400
that's basically a tutorial and how to guide in one.

132
00:12:22,400 --> 00:12:25,840
That is probably enough.

133
00:12:25,840 --> 00:12:27,760
Maybe some in code documentation

134
00:12:27,760 --> 00:12:33,280
that kind of functions as a reference as well.

135
00:12:33,280 --> 00:12:36,400
So, yeah, in a small project, you don't need much.

136
00:12:36,400 --> 00:12:47,280
but in a bigger project, in something like NumPy or something big that thousands of people use,

137
00:12:47,280 --> 00:12:51,040
you probably want all of those and you want to think about them separately.

138
00:12:53,600 --> 00:13:00,400
Let's go back to the collaborative document and let's make a wish list.

139
00:13:00,400 --> 00:13:11,880
So, what would you like to see in documentation when you open, when you go looking at a piece

140
00:13:11,880 --> 00:13:18,040
of software, in research software, that you might want to use?

141
00:13:18,040 --> 00:13:22,480
It sounds like a library that would do the thing you want it to do, but you don't know

142
00:13:22,480 --> 00:13:23,840
yet.

143
00:13:23,840 --> 00:13:24,840
What would you like to see?

144
00:13:24,840 --> 00:13:51,960
Oh, maybe I'll copy this to the, to the notes.

145
00:13:51,960 --> 00:13:58,760
So does it make sense to say that now the question is how do we write and maintain it,

146
00:13:58,760 --> 00:14:00,840
like where do we store the documentation?

147
00:14:03,880 --> 00:14:07,800
I guess this is still more about content, like what would you like to see in,

148
00:14:09,480 --> 00:14:13,960
I mean, I guess someone else's work in this case, that's at least how I think about the question.

149
00:14:17,800 --> 00:14:18,360
Okay.

150
00:14:18,360 --> 00:14:26,040
It's talking about research software. It could be about a big library, but I guess what I have in

151
00:14:26,040 --> 00:14:38,200
mind is you have a relatively obscure research problem and you do some searching and you find

152
00:14:38,200 --> 00:14:43,640
a Python library or some library that sounds like it could do the job.

153
00:14:43,640 --> 00:14:49,480
job. What would you want there to be in the documentation so that you would actually use

154
00:14:49,480 --> 00:14:56,640
that code rather than just write it yourself? Because quite often you still end up writing

155
00:14:56,640 --> 00:15:06,720
it yourself. This could be about a bigger project. It could be about something like

156
00:15:06,720 --> 00:15:12,640
what would you want to see in Torch documentation or some other really big library behind us?

157
00:15:23,840 --> 00:15:29,360
Do you have any comments? I think I'm talking a lot, but that's just me.

158
00:15:29,360 --> 00:15:38,760
No, but here we have like very good answers from the learners.

159
00:15:38,760 --> 00:15:47,640
So there are talking about assumptions of the nitty-gritty details.

160
00:15:47,640 --> 00:15:53,840
And then there is someone saying that one should add a detailed way of the code so that

161
00:15:53,840 --> 00:15:54,840
with examples.

162
00:15:54,840 --> 00:15:56,880
So examples are often very useful.

163
00:16:01,880 --> 00:16:07,160
So yeah, dependencies can help when

164
00:16:07,160 --> 00:16:11,520
someone is installing the code for the first time.

165
00:16:15,120 --> 00:16:18,040
Gallery with examples, yeah, sometimes

166
00:16:18,040 --> 00:16:24,000
adding a lot of some images, which shows what it does.

167
00:16:24,000 --> 00:16:32,800
quite useful so that it's not a lot of text. That's true. What else do we have here?

168
00:16:36,240 --> 00:16:43,440
So examples, examples, yeah. Yeah, there's two big things. I mean, there's like the details of

169
00:16:43,440 --> 00:16:49,200
how you use it, inputs and outputs of functions and so on. And then there's this under the hood.

170
00:16:49,200 --> 00:17:01,500
code. What are the assumptions? What is it intended to do? What's the big picture? Those

171
00:17:01,500 --> 00:17:12,440
should be there. Those should be easy to find. That's a good point. Where is the code? How

172
00:17:12,440 --> 00:17:18,640
do you actually get the live? How do you install it? How do you get it to run? That's a very

173
00:17:18,640 --> 00:17:19,760
One part of it, of course.

174
00:17:25,360 --> 00:17:27,680
And yeah, dependencies kind of goes to the same thing.

175
00:17:29,800 --> 00:17:30,000
Yeah.

176
00:17:30,840 --> 00:17:32,320
Easy to find good points.

177
00:17:33,000 --> 00:17:33,840
Good structure.

178
00:17:33,880 --> 00:17:34,120
Yeah.

179
00:17:34,120 --> 00:17:34,960
That's useful.

180
00:17:37,320 --> 00:17:37,640
Okay.

181
00:17:38,600 --> 00:17:44,320
So we have a lot of points in the answer in the lecture materials.

182
00:17:45,560 --> 00:17:46,040
Um,

183
00:17:46,040 --> 00:17:55,080
that are mainly taken from years of answers to this question from the notes, so that's

184
00:17:55,080 --> 00:18:09,960
a good read. But I think we shouldn't go through all of this. Mostly, this is repeating what

185
00:18:09,960 --> 00:18:14,360
we've said or something that we will go into later.

186
00:18:17,160 --> 00:18:21,720
We will talk about licensing later, but one important point is including a license file

187
00:18:21,720 --> 00:18:27,960
and making sure that people know you can actually use the code. It's not there just for show.

188
00:18:31,000 --> 00:18:34,360
Actually, that is one of the answers. That is the last answer in the notes.

189
00:18:34,360 --> 00:18:38,360
So, am I allowed to use it? That's a very good point.

190
00:18:42,360 --> 00:18:44,360
So, okay.

191
00:18:45,360 --> 00:18:48,360
Should we go to the next section?

192
00:18:48,360 --> 00:18:50,360
Yes, you can do that.

193
00:18:50,360 --> 00:18:52,360
License.

194
00:18:56,360 --> 00:18:58,360
Oh yeah, there's a next button.

195
00:18:58,360 --> 00:19:03,360
Next button at the bottom of the page usually.

196
00:19:03,360 --> 00:19:20,520
Okay, so in code documentation, this is probably the easiest thing to maybe in readme file

197
00:19:20,520 --> 00:19:27,420
is equally easy to add because it's just adding a file, but yeah, essentially this is writing

198
00:19:27,420 --> 00:19:32,700
something into the file that the code is in, writing some comments, doc strings.

199
00:19:40,220 --> 00:19:42,620
Sorry. Okay.

200
00:19:42,620 --> 00:20:04,460
Okay, so what is the upside â€“ sorry, I was coughing and then I lost my train of thought.

201
00:20:04,460 --> 00:20:11,660
So the big upside is, when you look at the function,

202
00:20:11,660 --> 00:20:13,260
you see the documentation.

203
00:20:13,260 --> 00:20:15,380
If you're a programmer and you take

204
00:20:15,380 --> 00:20:19,540
a look at what there's a function you want to run,

205
00:20:19,540 --> 00:20:21,620
you can immediately see the documentation.

206
00:20:21,620 --> 00:20:40,900
Then, so it's version controlled with the code itself, so you can commit it into Git.

207
00:20:40,900 --> 00:20:44,940
It will then follow the code around.

208
00:20:44,940 --> 00:20:50,360
And if the doc string or the comment is in the beginning of the function, it will actually

209
00:20:50,360 --> 00:20:55,400
just follow the function around wherever it is in the code, so you can always find it.

210
00:20:57,080 --> 00:21:00,920
But if you're a new user and you see just a bunch of code files,

211
00:21:02,280 --> 00:21:09,880
then that is not the best starting point. That's the disadvantage, which is fixed by readme files.

212
00:21:10,840 --> 00:21:18,840
So a readme file is something that's obvious to look at and often automatically opened

213
00:21:18,840 --> 00:21:24,280
side-by-side with the code. If you look at the code on GitHub, it will display the readme file

214
00:21:24,280 --> 00:21:37,320
directly, for example, and GitLab, I think, as well. Readme files are also version-controlled

215
00:21:37,320 --> 00:21:43,400
in the same way. It's a file, so you have to add it and commit it separately. It doesn't

216
00:21:43,400 --> 00:21:47,240
code directly with the code, but it's text, it works the same way.

217
00:21:51,080 --> 00:21:59,640
So what are the disadvantages? It doesn't, essentially the opposite of in-code documentation

218
00:21:59,640 --> 00:22:02,920
and also it cannot be very complicated or long because it's a single file.

219
00:22:04,200 --> 00:22:07,880
It doesn't have structure in the same sense as a website might.

220
00:22:07,880 --> 00:22:28,120
Okay, so we suggest that you use either RST rich text, restructured text or markdown

221
00:22:29,400 --> 00:22:34,520
to write documentation. These are mostly automatically rendered by different tools.

222
00:22:37,880 --> 00:22:48,880
You can use them relatively easily.

223
00:22:48,880 --> 00:22:50,880
You don't have to generate anything.

224
00:22:50,880 --> 00:22:57,880
And you get some nice structure that you get a good looking documentation out of it.

225
00:22:57,880 --> 00:23:01,880
Some headers and subsections and so on.

226
00:23:01,880 --> 00:23:06,880
And of course you are currently using Markdown to write the notes.

227
00:23:06,880 --> 00:23:10,880
So, you roughly know how it works.

228
00:23:10,880 --> 00:23:12,880
Okay.

229
00:23:12,880 --> 00:23:17,880
So, we don't have to go much into this because we'll come back to it later.

230
00:23:17,880 --> 00:23:21,880
In fact, we'll come back to everything about here.

231
00:23:21,880 --> 00:23:24,880
Everything here we'll come back to in a moment.

232
00:23:24,880 --> 00:23:30,880
So, here's some.

233
00:23:30,880 --> 00:23:32,880
So, HTML static site generators.

234
00:23:32,880 --> 00:23:41,760
generators. That's another option. So, if a README file is not enough, if you want something

235
00:23:41,760 --> 00:23:49,960
bigger, so you want multiple pages or you want more structure into the documentation,

236
00:23:49,960 --> 00:23:57,160
it's a big enough project that you need that. Then static site generators are a good tool.

237
00:23:57,160 --> 00:24:08,680
they can turn this RST or Markdown code into nice looking websites. So we will demonstrate with

238
00:24:08,680 --> 00:24:19,480
Sphinx and it can use Markdown or RST. It's well demonstrating it because we know how

239
00:24:19,480 --> 00:24:25,640
to use it but also it is very general and relatively easy to use. But there are other

240
00:24:25,640 --> 00:24:36,280
options too and so there's package down which is popular in our community. These often are tied to

241
00:24:36,280 --> 00:24:43,400
the language for understandable reasons like it comes with the language or it's written for that

242
00:24:43,400 --> 00:24:49,800
language so that it's easy to use in that language. Sphinx is very general though it's not limited

243
00:24:49,800 --> 00:24:52,760
It runs on Python, but it's not limited to Python in any way.

244
00:24:55,640 --> 00:24:59,080
But yeah, there's lots of good options here that you can check out.

245
00:25:01,480 --> 00:25:06,920
Also, Zola is what we use to build our project website, so it's another option that we like.

246
00:25:06,920 --> 00:25:21,620
At least the popular Git repositories all allow you to directly serve static HTML and

247
00:25:21,620 --> 00:25:34,700
actually build your HTML sites using Sphinx or something else. You don't have to have

248
00:25:34,700 --> 00:25:39,820
a web server to post your documentation pages.

249
00:25:39,820 --> 00:25:44,740
But okay, so there's also wikis,

250
00:25:44,740 --> 00:25:48,740
which are very similar to a static website.

251
00:25:48,740 --> 00:25:51,460
The wikis would exist outside.

252
00:25:51,460 --> 00:25:58,740
So a static website is written in Markdown and restructures text.

253
00:25:58,740 --> 00:26:04,140
It will be in your code base and version control with your code.

254
00:26:04,140 --> 00:26:06,140
So that's nice.

255
00:26:06,140 --> 00:26:08,140
And wikis tend to exist separately.

256
00:26:08,140 --> 00:26:10,140
But also wikis allow a kind of

257
00:26:10,140 --> 00:26:12,140
collaborative editing

258
00:26:12,140 --> 00:26:14,140
that doesn't require

259
00:26:14,140 --> 00:26:16,140
the users to know Git. It requires

260
00:26:16,140 --> 00:26:18,140
them to know wikis, so

261
00:26:18,140 --> 00:26:20,140
that's a trade-off.

262
00:26:20,140 --> 00:26:22,140
But they are also useful.

263
00:26:22,140 --> 00:26:24,140
So yeah, the barrier

264
00:26:24,140 --> 00:26:26,140
to write and edit is very low.

265
00:26:26,140 --> 00:26:28,140
There's

266
00:26:28,140 --> 00:26:30,140
people often use LaTeX

267
00:26:30,140 --> 00:26:32,140
and PDFs.

268
00:26:32,140 --> 00:26:35,660
You can also version control that with your code, it later is code.

269
00:26:36,460 --> 00:26:43,420
A PDF format though is harder to share and it is not something you would probably

270
00:26:43,420 --> 00:26:45,260
want to version control with your code.

271
00:26:49,660 --> 00:26:54,860
Yeah, so the ODE oxygen is a way of generating API documentation which I

272
00:26:54,860 --> 00:26:58,540
will demonstrate with Sphinx how to do API documentation if we have time.

273
00:26:58,540 --> 00:27:13,760
time. I saw quickly, yeah, there was a point in the notes. Can you use the documentation

274
00:27:13,760 --> 00:27:22,480
that's included in your code, the InCode documentation, to automatically generate this sort of API

275
00:27:22,480 --> 00:27:28,520
documentation? That's what Doxygen is for. There is also a tool in Sphinx to do that.

276
00:27:28,520 --> 00:27:38,960
So, yeah, I mean, one upside with using in-code documentation is that you can then automatically

277
00:27:38,960 --> 00:27:44,200
also extract it into a separate website.

278
00:27:44,200 --> 00:27:52,160
It's much harder to go the other way around, right, to go from a website to having documentation

279
00:27:52,160 --> 00:27:54,360
that kind of links to your code.

280
00:27:54,360 --> 00:28:04,600
So this is, it's a nice way of essentially getting both at once.

281
00:28:04,600 --> 00:28:08,400
And the good thing is like, it's always up to date with the code.

282
00:28:08,400 --> 00:28:17,340
So if you change the function or take it away, the documentation is often kept updated.

283
00:28:17,340 --> 00:28:20,680
So it doesn't go old.

284
00:28:20,680 --> 00:28:28,480
Yeah, so whenever you change the function, you hopefully also remember to change the

285
00:28:28,480 --> 00:28:35,200
documentation because it's right there, whereas if the documentation is separate in some other

286
00:28:35,200 --> 00:28:42,360
markdown file, you might forget to do it or you might not do it at the same time, and then

287
00:28:42,360 --> 00:28:43,360
it will not be up-to-date.

288
00:28:43,360 --> 00:28:47,000
That's a good point.

289
00:28:47,000 --> 00:28:48,000
Yeah.

290
00:28:48,000 --> 00:29:06,560
Okay, so we have a bit more detail in the next section about in code documentation.

291
00:29:06,560 --> 00:29:14,080
So we have already talked a good bit about this and about, well, all of the other sections

292
00:29:14,080 --> 00:29:22,800
I think let's do the exercise so that everybody gets to chip in but then I think we'll move

293
00:29:22,800 --> 00:29:32,080
relatively quickly. So I will add a poll on the notes.

294
00:29:44,080 --> 00:29:52,800
And the question is, which one of these comments is more useful documentation or is which one

295
00:29:52,800 --> 00:29:54,240
of these is better?

296
00:29:54,240 --> 00:29:56,640
And you can also say why.

297
00:29:56,640 --> 00:30:02,320
So, info block here.

298
00:30:02,320 --> 00:30:13,520
And we'll vote for either comment A. So, maybe can you share the notes so that I can

299
00:30:13,520 --> 00:30:20,520
So, I will explain what I'm typing in.

300
00:30:20,520 --> 00:30:23,520
So, like in the polls that we've had before,

301
00:30:23,520 --> 00:30:27,520
either vote for comment A or comment B

302
00:30:27,520 --> 00:30:32,520
by adding some character in there.

303
00:30:32,520 --> 00:30:37,520
At least in the edit view,

304
00:30:37,520 --> 00:30:40,520
it will be clear which one has more votes.

305
00:30:40,520 --> 00:30:46,360
has more votes. It's kind of a bar graph.

306
00:30:46,360 --> 00:30:54,240
And then I'll also add the question why, so that you get a chance to explain yourself

307
00:30:54,240 --> 00:31:01,080
if you want to. I think people are pretty clear on this question, but why is the second

308
00:31:01,080 --> 00:31:03,080
one better.

309
00:31:31,080 --> 00:31:38,080
And I guess, what are the good, in what way is the first one good, in what way is the second one good?

310
00:31:38,080 --> 00:32:02,920
Yeah, so essentially in the first one, if you know Python or if you know, I mean, it's

311
00:32:02,920 --> 00:32:07,240
two lines of code is relatively clear. If you know almost any programming language,

312
00:32:08,040 --> 00:32:12,520
you can figure out that these two lines are checking if the temperature is below

313
00:32:12,520 --> 00:32:19,480
minus 50 and printing an error. So the comment is not giving any new information really,

314
00:32:21,240 --> 00:32:25,800
unless you are completely new to coding and you don't know what this smaller than sign

315
00:32:25,800 --> 00:32:31,240
of what this if statement means.

316
00:32:31,240 --> 00:32:37,040
In the second one, it tells you why it's checking that the temperature is, if the temperature

317
00:32:37,040 --> 00:32:41,760
is smaller than 50.

318
00:32:41,760 --> 00:32:46,640
So it is actually providing useful information in that case.

319
00:32:46,640 --> 00:32:54,080
It's telling, so if you are thinking of changing those two lines of code, you know what you're

320
00:32:54,080 --> 00:32:57,200
doing if you read that line of comment.

321
00:32:57,200 --> 00:33:00,440
So it's actually useful in that sense.

322
00:33:00,440 --> 00:33:03,200
OK.

323
00:33:03,200 --> 00:33:09,800
Now in the next part, a couple of ways to not use comments.

324
00:33:14,480 --> 00:33:18,920
These are something that, well, OK, I'll just

325
00:33:18,920 --> 00:33:21,640
say ways to not use comments.

326
00:33:21,640 --> 00:33:26,920
So often you'll see someone comment out

327
00:33:26,920 --> 00:33:28,160
a couple of lines of code.

328
00:33:28,160 --> 00:33:31,280
You don't need that check anymore.

329
00:33:31,280 --> 00:33:36,280
It's for some reason it existed in an old version of the code,

330
00:33:36,280 --> 00:33:40,600
but it really shouldn't be done anymore.

331
00:33:40,600 --> 00:33:43,400
You can just delete those lines of code

332
00:33:43,400 --> 00:33:46,200
and use version control instead.

333
00:33:46,200 --> 00:33:47,880
If you need those lines back or you

334
00:33:47,880 --> 00:33:50,720
need to see what happened there in the previous version,

335
00:33:50,720 --> 00:33:57,720
then you can check out the previous version of the code and actually look at what it was

336
00:33:57,720 --> 00:34:05,720
doing. Whereas in this one, it often happens that then the code around those commented

337
00:34:05,720 --> 00:34:11,840
outlines evolves so much that uncommenting those will just break the code. So, there's

338
00:34:11,840 --> 00:34:18,760
no point in keeping them around in the later version. So, yeah, comments should not be

339
00:34:18,760 --> 00:34:21,160
used instead of version control.

340
00:34:25,400 --> 00:34:32,520
Another one is emulating comment messages. You are telling people why you are making a change,

341
00:34:33,880 --> 00:34:38,600
which could equally well be a comment message. This might actually be slightly more akin to

342
00:34:38,600 --> 00:34:43,720
documentation. You're telling people what the lines of code are doing, but

343
00:34:43,720 --> 00:34:52,720
but this could be written differently to be better documentation and you could use the

344
00:34:52,720 --> 00:34:59,520
comment message to have your name attached to the change and tell people when you did

345
00:34:59,520 --> 00:35:09,520
it and why.

346
00:35:09,520 --> 00:35:12,120
I was a bit hesitant of saying that you shouldn't do this

347
00:35:12,120 --> 00:35:16,640
because sometimes you might end up making a small change

348
00:35:16,640 --> 00:35:21,080
and going back, and then you know you do want to actually

349
00:35:21,080 --> 00:35:22,880
comment the code later, for example.

350
00:35:26,240 --> 00:35:29,160
Yeah, using comments to replace version control

351
00:35:29,160 --> 00:35:31,660
is usually not a good idea.

352
00:35:33,440 --> 00:35:34,280
Okay.

353
00:35:34,280 --> 00:35:40,280
Then there's some examples here of docstrings.

354
00:35:40,280 --> 00:35:44,520
So why should we go into this?

355
00:35:44,520 --> 00:35:47,340
Because we already talked a good bit about this.

356
00:35:47,340 --> 00:35:51,440
Let's just leave this to the level of an example then.

357
00:35:51,440 --> 00:35:56,080
So here are examples

358
00:35:56,080 --> 00:35:59,080
of how you write docstrings in different languages.

359
00:35:59,080 --> 00:36:12,760
So in Python the first one is of course in each of these examples in all of these languages

360
00:36:12,760 --> 00:36:19,480
the first one is a regular comment and it doesn't exactly attach to the function.

361
00:36:19,480 --> 00:36:25,800
It's useful to have when you look at the code but then the second one is a doc string

362
00:36:25,800 --> 00:36:32,680
docstring. That's something that will be a property of the function in a way. You can

363
00:36:32,680 --> 00:36:41,520
extract it from â€“ if you have the function, you can use some command to extract this docstring.

364
00:36:41,520 --> 00:36:50,760
You can use this to build and automatically create API documentation. This is kind of

365
00:36:50,760 --> 00:36:57,720
In each of these languages, this is a point about syntax.

366
00:36:57,720 --> 00:37:03,880
How do you write a doc string versus a comment?

367
00:37:03,880 --> 00:37:04,880
Is that clear?

368
00:37:04,880 --> 00:37:11,000
I think to myself, I don't sound clear.

369
00:37:11,000 --> 00:37:19,040
Maybe I can also add, when it comes to comments, it's mainly meant for the user and the programming

370
00:37:19,040 --> 00:37:26,720
language, the compiler or the interpreter usually skips it. And doc strings are like special comments

371
00:37:26,720 --> 00:37:34,160
which has some sort of standard attached to the programming language. So there is one way to write

372
00:37:34,160 --> 00:37:42,240
it. So it tends to be useful for the user, but there might be a tool which can understand it and

373
00:37:44,320 --> 00:37:48,720
process it in a way when you're writing in code documentation.

374
00:37:49,040 --> 00:38:01,840
Yeah, so something like Doxygen or Sphinx or some other automated thing can pick up

375
00:38:01,840 --> 00:38:08,720
this doc string and build a website that displays all the functions and all of the doc strings

376
00:38:08,720 --> 00:38:16,440
for those functions, whereas the first example is a comment and, well, it doesn't have the

377
00:38:16,440 --> 00:38:19,080
the same structure, it cannot be used in the same way.

378
00:38:21,880 --> 00:38:23,920
So for example, in Julia,

379
00:38:23,920 --> 00:38:28,120
you would write a long multi-line comment

380
00:38:28,120 --> 00:38:30,240
in Markdown format,

381
00:38:30,240 --> 00:38:33,580
and that is understood by the Julia's Markdown library.

382
00:38:34,560 --> 00:38:37,040
Whereas let's say in Python,

383
00:38:37,040 --> 00:38:42,040
there are certain formats of writing the doc strings,

384
00:38:42,320 --> 00:38:44,480
and you'll have headings, which for example,

385
00:38:44,480 --> 00:38:49,080
say, parameters, which refers to the input,

386
00:38:49,080 --> 00:38:54,200
and the returns block, which tells you what the output is.

387
00:38:54,200 --> 00:39:00,160
So there are some standards which dictate this.

388
00:39:00,160 --> 00:39:05,440
And when it comes to Fortran and C++,

389
00:39:05,440 --> 00:39:08,680
it has some things which has, there

390
00:39:08,680 --> 00:39:14,600
are some special keywords, which are specific to Doxygen,

391
00:39:14,600 --> 00:39:17,960
which is widely used for documenting such code,

392
00:39:17,960 --> 00:39:20,440
Fortran and C++ codes.

393
00:39:20,440 --> 00:39:22,040
OK.

394
00:39:22,040 --> 00:39:25,960
I've been babbling on, and we are a bit behind schedule.

395
00:39:25,960 --> 00:39:30,200
We should go get to the Read Me section

396
00:39:30,200 --> 00:39:32,040
and then talk a bit about Markdown

397
00:39:32,040 --> 00:39:36,120
before we get to Sphinx, maybe after the break.

398
00:39:36,120 --> 00:39:38,160
But there is a good question.

399
00:39:38,160 --> 00:39:42,000
Did you write the docstring entirely yourself?

400
00:39:42,000 --> 00:39:44,360
I don't know, of course, who wrote this example,

401
00:39:44,360 --> 00:39:52,240
but when I write code, I have an extension to my editor

402
00:39:52,240 --> 00:39:58,960
that actually fills in a template almost entirely.

403
00:39:58,960 --> 00:40:02,840
So it takes in the parameters and adds in.

404
00:40:02,840 --> 00:40:05,640
So here, for example, in the Python docstring,

405
00:40:08,880 --> 00:40:21,760
there is the temperature that's defined as a float. You could use a tool to extract that

406
00:40:21,760 --> 00:40:30,000
information and write everything except this actual comment line. The temperature in Fahrenheit

407
00:40:30,000 --> 00:40:36,640
is this. Something you would write yourself. There are tools that take care of the syntax.

408
00:40:39,040 --> 00:40:41,040
That is true.

409
00:40:41,040 --> 00:40:43,520
But at the very least, like a single sentence

410
00:40:43,520 --> 00:40:45,400
is also a valid docstring.

411
00:40:45,400 --> 00:40:46,400
So sometimes.

412
00:40:46,400 --> 00:40:47,320
Yeah, yeah, true.

413
00:40:47,320 --> 00:40:50,280
You don't have to list all the parameters, the return values.

414
00:40:53,920 --> 00:40:55,320
OK, so readme files.

415
00:40:58,200 --> 00:41:01,480
Oh, so yeah, OK, so in the readme files section,

416
00:41:01,480 --> 00:41:03,240
we don't really talk much about syntax.

417
00:41:03,240 --> 00:41:05,640
And we have talked about what you need in documentation.

418
00:41:05,640 --> 00:41:15,320
So this is mostly an exercise or a discussion.

419
00:41:15,320 --> 00:41:21,200
So let's quickly think, which one of these do we do?

420
00:41:21,200 --> 00:41:28,600
We probably don't have time for that, multiple.

421
00:41:28,600 --> 00:41:29,600
There is one.

422
00:41:29,600 --> 00:41:33,960
So the first one would be a pure demonstration.

423
00:41:33,960 --> 00:41:36,840
We have had some discussions.

424
00:41:36,840 --> 00:41:38,440
Okay, let's just do the first one

425
00:41:38,440 --> 00:41:41,600
because the other ones would require people

426
00:41:41,600 --> 00:41:43,760
to pick up their own readme files

427
00:41:43,760 --> 00:41:47,840
and then have a discussion probably in the notes,

428
00:41:47,840 --> 00:41:48,680
but with someone.

429
00:41:51,320 --> 00:41:56,320
Okay, so this is some more markdown syntax essentially,

430
00:41:59,040 --> 00:42:02,600
something that you can do in readme files

431
00:42:02,600 --> 00:42:14,840
most environments. Do you have a GitHub account logged in where you can easily create a new

432
00:42:14,840 --> 00:42:26,840
repository or just a readme file that you can show or make edits? I guess it's probably best

433
00:42:26,840 --> 00:42:28,880
just to create a new repository quickly.

434
00:42:35,880 --> 00:42:40,880
So let's say readme demo, and it's me.

435
00:42:49,960 --> 00:42:54,960
And I create one empty readme.

436
00:42:54,960 --> 00:42:55,960
Okay.

437
00:42:55,960 --> 00:43:08,560
And then we edit the readme file.

438
00:43:08,560 --> 00:43:14,880
So there are a couple of effects in the notes.

439
00:43:14,880 --> 00:43:19,520
So let's take a look.

440
00:43:19,520 --> 00:43:32,400
So there is a note, which highlights information, I think not especially strongly, I think it's

441
00:43:32,400 --> 00:43:33,400
a blue box.

442
00:43:33,400 --> 00:43:36,400
Oh, preview probably works for that.

443
00:43:36,400 --> 00:43:37,400
Yeah.

444
00:43:37,400 --> 00:43:40,400
It's a blue box.

445
00:43:40,400 --> 00:43:46,520
Then if you do essentially the same, but write important instead of note, it will be a different

446
00:43:46,520 --> 00:43:52,440
color slightly more visible and warning I think is then red I think important is maybe yellow

447
00:43:53,400 --> 00:44:00,040
oh it's okay um and then yeah then there's import a warning which is yellow

448
00:44:01,400 --> 00:44:08,520
uh sorry warning which is red so this is something like this is meant to draw people's attention of

449
00:44:08,520 --> 00:44:21,720
course. Okay, then let's try these description tags. So this is details and then summary.

450
00:44:25,720 --> 00:44:29,560
So details here, these are like, if you know HTML,

451
00:44:30,520 --> 00:44:34,680
the section goes from the details tag to this end of slash details.

452
00:44:34,680 --> 00:44:44,080
But it contains a summary section.

453
00:44:44,080 --> 00:44:48,000
So details, I guess the idea is that you don't necessarily need to read this part.

454
00:44:48,000 --> 00:44:51,280
This is like extra details.

455
00:44:51,280 --> 00:44:57,040
So it's not showing it by default.

456
00:44:57,040 --> 00:45:00,840
And then when you click on it, you'll see.

457
00:45:00,840 --> 00:45:09,120
So it could be like read more to find out kind of section, yes.

458
00:45:09,120 --> 00:45:15,840
And then there are also batches that you will see in a lot of projects.

459
00:45:15,840 --> 00:45:19,840
So let's just try one.

460
00:45:19,840 --> 00:45:25,920
So the idea here is that a batch is an image you get from some website.

461
00:45:25,920 --> 00:45:30,640
They would usually be at the top, but they show something about the current state of

462
00:45:30,640 --> 00:45:42,680
the project. Actually, when you load the page, it will check a website, and that website

463
00:45:42,680 --> 00:45:49,960
will return this image. It could, for example, depend on whether your tests have passed.

464
00:45:49,960 --> 00:46:00,440
It might show that tests are currently failing.

465
00:46:00,440 --> 00:46:03,440
and can add also hyperlinks to the bench.

466
00:46:03,440 --> 00:46:03,920
Yeah.

467
00:46:03,920 --> 00:46:04,840
Or, yeah.

468
00:46:10,280 --> 00:46:13,360
Right, so the first one, the example,

469
00:46:13,360 --> 00:46:16,160
I think you copied is with a link.

470
00:46:16,160 --> 00:46:17,640
It's with a link, yeah.

471
00:46:17,640 --> 00:46:21,120
Yes, so it has, in parentheses at the end,

472
00:46:21,120 --> 00:46:24,960
it has a link that goes to example.org.

473
00:46:24,960 --> 00:46:27,840
And you can also do the same without a link.

474
00:46:27,840 --> 00:46:29,840
Yes.

475
00:46:29,840 --> 00:46:32,040
Yeah, it looked the same, but then, yeah.

476
00:46:34,440 --> 00:46:36,240
Yes, so those are some tricks

477
00:46:38,640 --> 00:46:39,540
that you can do.

478
00:46:40,340 --> 00:46:43,040
Does anybody know any more good tips and tricks on

479
00:46:44,040 --> 00:46:47,140
or readme files on different systems or different

480
00:46:48,440 --> 00:46:50,140
different repository websites?

481
00:46:53,240 --> 00:46:56,640
Okay, let's do one more at the very bottom of the page.

482
00:46:56,740 --> 00:46:59,340
There's the table of contents.

483
00:46:59,840 --> 00:47:08,600
Oh, oh, sorry. So you're on GitHub. GitHub actually automatically creates a table of

484
00:47:08,600 --> 00:47:18,120
contents for README.md files. You just need to add some sections and then it will have

485
00:47:18,120 --> 00:47:20,160
a table of contents.

486
00:47:20,160 --> 00:47:26,800
Let's try something like installation and then

487
00:47:26,800 --> 00:47:30,000
contribute.

488
00:47:30,000 --> 00:47:38,600
Contributing license, something here.

489
00:47:38,600 --> 00:47:42,440
MIT license, let's say.

490
00:47:42,440 --> 00:47:43,640
Does it show up here?

491
00:47:43,640 --> 00:47:44,520
I don't know.

492
00:47:44,520 --> 00:47:47,960
Maybe we need to commit this.

493
00:47:47,960 --> 00:47:51,400
Yeah, I think you need to commit, and then

494
00:47:51,400 --> 00:47:52,920
to the preview, it doesn't actually

495
00:47:52,920 --> 00:47:54,240
generate the table of contents.

496
00:48:00,080 --> 00:48:02,320
Unsafe changes?

497
00:48:02,320 --> 00:48:02,960
That's strange.

498
00:48:06,120 --> 00:48:07,040
Because in the preview.

499
00:48:09,920 --> 00:48:11,400
OK.

500
00:48:11,400 --> 00:48:14,480
That was probably a previous commit, then, or?

501
00:48:14,480 --> 00:48:16,080
No, this is a new.

502
00:48:16,080 --> 00:48:17,200
OK.

503
00:48:17,200 --> 00:48:22,200
maybe copy everything and go back to the, so that's weird.

504
00:48:22,720 --> 00:48:25,960
Yeah, maybe it's, yeah, okay.

505
00:48:25,960 --> 00:48:28,080
Oh, okay, yeah, you did save.

506
00:48:28,080 --> 00:48:28,920
It did save.

507
00:48:32,040 --> 00:48:35,600
But yeah, this is the library.

508
00:48:35,600 --> 00:48:37,120
Yeah, good.

509
00:48:37,120 --> 00:48:37,960
Okay.

510
00:48:40,960 --> 00:48:45,960
Okay, now we could do the break now

511
00:48:45,960 --> 00:48:48,960
now and then go on to Sphinx.

512
00:48:48,960 --> 00:48:49,460
Yeah.

513
00:48:53,960 --> 00:48:56,180
Could you explain why one wants to use patches?

514
00:48:59,560 --> 00:49:04,600
So yeah, it's mainly, so if you would want to, for example,

515
00:49:04,600 --> 00:49:12,240
show on, have in your read me just a section that says,

516
00:49:12,240 --> 00:49:13,800
all the tests currently pass.

517
00:49:13,800 --> 00:49:16,800
so this version of the program works.

518
00:49:23,320 --> 00:49:28,320
So you could do it as just something that checks a website

519
00:49:31,560 --> 00:49:33,800
that returns whether tests have passed or not.

520
00:49:34,860 --> 00:49:36,640
And that's essentially what we're doing here,

521
00:49:36,640 --> 00:49:40,920
but what it returns is an image instead of a piece of text.

522
00:49:40,920 --> 00:49:47,880
So, when you go to a project, the batches will tell you that this version that's currently in

523
00:49:47,880 --> 00:49:55,640
this master branch, that should work, for example. It can also have other information,

524
00:49:55,640 --> 00:50:06,120
like the digital object identifier. So, it's a link to a Zenodo, for example,

525
00:50:06,120 --> 00:50:11,160
a link to some place that actually stores the object

526
00:50:11,160 --> 00:50:11,880
identifier.

527
00:50:16,000 --> 00:50:22,840
So that DOI is essentially for citing your code,

528
00:50:22,840 --> 00:50:25,760
citing your work.

529
00:50:25,760 --> 00:50:31,560
Another thing is to show the most stable latest

530
00:50:31,560 --> 00:50:34,760
version of the code, which is uploaded in some index

531
00:50:34,760 --> 00:50:42,080
like PyPI, for example, so that you know which

532
00:50:42,080 --> 00:50:43,200
is the current version.

533
00:50:43,200 --> 00:50:46,760
And because often the code on the GitHub

534
00:50:46,760 --> 00:50:48,960
would be a development version.

535
00:50:52,440 --> 00:50:56,640
So we are going to static site generators,

536
00:50:56,640 --> 00:50:59,440
I think, after the break.

537
00:50:59,440 --> 00:51:04,840
But since the section title is writing good README files,

538
00:51:04,840 --> 00:51:10,400
maybe we can go back just mentally for a moment

539
00:51:10,400 --> 00:51:13,600
in your mind, go back to the beginning of this hour.

540
00:51:13,600 --> 00:51:18,120
And we talked about what we would

541
00:51:18,120 --> 00:51:21,080
want to see in good documentation, so

542
00:51:21,080 --> 00:51:23,560
the wish list.

543
00:51:23,560 --> 00:51:25,920
So essentially, if all you have is a README file

544
00:51:25,920 --> 00:51:29,400
and in code documentation, then a good README file

545
00:51:29,400 --> 00:51:35,400
is short, but it includes all of those sections.

546
00:51:35,400 --> 00:51:39,840
It includes a summary of what the code is,

547
00:51:39,840 --> 00:51:43,240
like a top level headline summary

548
00:51:43,240 --> 00:51:44,880
at the very top of the readme file.

549
00:51:44,880 --> 00:51:49,880
This project is for x, and then it

550
00:51:49,880 --> 00:51:55,840
has steps of how to use it, how to reproduce some.

551
00:51:55,840 --> 00:51:57,160
So a tutorial.

552
00:51:57,160 --> 00:51:58,520
This is how you install it.

553
00:51:58,520 --> 00:52:06,280
this is how you run it to reproduce the results in my paper or if it's research software then

554
00:52:06,280 --> 00:52:14,200
probably reproduce my paper is the first thing or a simpler example but something that gets

555
00:52:14,200 --> 00:52:23,080
people running the code and shows them how to use it and then some more detailed description of

556
00:52:23,080 --> 00:52:27,680
of how the whole thing works,

557
00:52:28,640 --> 00:52:31,160
however much detail you want to have there.

558
00:52:31,160 --> 00:52:33,360
And the rest would be in code documentation.

559
00:52:35,620 --> 00:52:38,200
I think that would be a good readme file.

560
00:52:38,200 --> 00:52:39,880
I mean, of course, all of this,

561
00:52:41,840 --> 00:52:45,120
giving the information visually makes it nicer,

562
00:52:45,120 --> 00:52:46,020
makes it quicker.

563
00:52:47,360 --> 00:52:48,960
But as long as the information is there,

564
00:52:48,960 --> 00:52:50,560
that's the most important thing.

565
00:52:50,560 --> 00:52:56,560
Do you have anything to add before we go on break?

566
00:52:56,560 --> 00:52:59,560
No, that sounds good.

567
00:52:59,560 --> 00:53:10,560
Okay, so after the break we'll come back to static site generators and especially Sphinx.

568
00:53:10,560 --> 00:53:19,840
Sphinx, so we will essentially be writing an example documentation website using Sphinx.

569
00:53:21,280 --> 00:53:29,680
So, let's see after the break. Let's do, well, 10 minutes, but it's 57, so let's just do 11.10.

570
00:53:29,680 --> 00:53:40,280
10, is that? That makes sense. So, yeah, see you back at 11.10 or whatever your time zone

571
00:53:40,280 --> 00:53:46,880
is, 10 past the hour. Bye.

572
00:53:49,000 --> 00:53:58,360
Okay, hello, welcome back.

573
00:53:58,360 --> 00:54:05,640
So now we're going to static site generators and specifically a Sphinx example.

574
00:54:05,640 --> 00:54:10,840
Oops, I did not scroll back up.

575
00:54:10,840 --> 00:54:13,660
Okay, Sphinx and Markdown.

576
00:54:13,660 --> 00:54:20,620
you can in the how to document your research software you can find this in the sidebar and

577
00:54:21,820 --> 00:54:30,700
okay so let's go so yeah so the idea of this is mainly a demonstration it will be a relatively

578
00:54:30,700 --> 00:54:38,380
long demonstration and the idea is to understand what these static site generators are what they

579
00:54:38,380 --> 00:54:46,220
do and know how to build a documentation website with these text files that you can then

580
00:54:50,540 --> 00:54:58,380
version control. And along the way, we'll create an example of Swing documentation using Markdown.

581
00:54:59,820 --> 00:55:04,380
So, I'm going to assume that you're just watching essentially the demonstration,

582
00:55:04,380 --> 00:55:15,660
but you can also try it yourself and I mean if it's hard to keep up then I would maybe recommend

583
00:55:16,300 --> 00:55:21,660
watching first. Of course the video is also available later but the

584
00:55:21,660 --> 00:55:27,420
notes and the questions are available now. Okay, so let's get into it.

585
00:55:27,420 --> 00:55:40,220
it. So before we start, I will actually move this notes window out of the way to show a

586
00:55:40,220 --> 00:55:50,900
terminal window. Actually resize it a little bit. There we go. And there's some unnecessary

587
00:55:50,900 --> 00:55:58,020
test here that I was doing previously, so let's get rid of that. Okay,

588
00:55:58,180 --> 00:56:04,660
rid of that as well. Okay, so the first thing we do is conda

589
00:56:04,660 --> 00:56:10,420
activate code refinery. This is the environment you may have installed

590
00:56:10,420 --> 00:56:15,140
following the installation instructions for week two.

591
00:56:15,140 --> 00:56:18,580
Okay, so now we have the code refinery environment active.

592
00:56:18,580 --> 00:56:24,580
we'll check the python version this is essentially checking we have python 3.12 is the latest

593
00:56:24,580 --> 00:56:34,260
version and then let's check that we have sphinx build oops build okay and check the version so we

594
00:56:34,260 --> 00:56:42,900
have sphinx build and the so the the notes the lecture materials have relatively older versions

595
00:56:42,900 --> 00:56:48,340
but I think everything should work. We'll figure it out as we go if something

596
00:56:48,340 --> 00:56:51,780
fails. So there should also be a Sphinx quick start.

597
00:56:55,060 --> 00:57:02,580
And yes, it exists. Okay. Finally, we are going to use mist parser.

598
00:57:04,580 --> 00:57:10,340
So what I'm doing here is I'm running some Python code that I write in the terminal. That's Python

599
00:57:10,340 --> 00:57:18,740
minus c and then I'm going to import mistparser. So this checks that the library is there.

600
00:57:19,380 --> 00:57:24,980
If you import something and it doesn't print anything like it didn't, then the library is

601
00:57:24,980 --> 00:57:33,460
there. Okay, so we have everything we need for the demonstration. Now I'm in an empty folder.

602
00:57:33,460 --> 00:57:44,580
It's my CodeRefinery folder, so I'll create a new folder called doc.example, documentation.example,

603
00:57:44,580 --> 00:57:49,580
and go into it, and then run Sphinx Quickstart.

604
00:57:49,580 --> 00:57:53,060
And it will ask me a bunch of questions.

605
00:57:53,060 --> 00:57:57,740
So the first thing, do I want separate source and build directories within the root path?

606
00:57:57,740 --> 00:57:59,740
I will say no.

607
00:58:05,740 --> 00:58:07,580
So it's asking for a project name.

608
00:58:10,140 --> 00:58:13,340
Let's just call it test. I'm not being, I'm not feeling creative right now.

609
00:58:15,100 --> 00:58:23,660
Author's name. That's my name. Project release. So which version of the project is this?

610
00:58:23,660 --> 00:58:30,860
This is 0.1. This is the first one. And project language. Let's keep English as the default

611
00:58:30,860 --> 00:58:40,940
option. Okay. Now it has created a bunch of files. Let's see. There is a underscore build directory.

612
00:58:43,100 --> 00:58:49,740
Underscore often in Python means that you ignore it. You don't print it and

613
00:58:49,740 --> 00:58:57,740
well, you ignore it in a lot of contexts. So, it's something that Python will often not look at.

614
00:58:58,860 --> 00:59:05,020
Same goes for templates and static. Sorry. Okay.

615
00:59:07,980 --> 00:59:15,420
So, I think the most important ones at first are index. This is the main page of your website.

616
00:59:15,420 --> 00:59:26,260
I keep mixing that up, it's in the restructured text format, RST.

617
00:59:26,260 --> 00:59:31,260
So we'll see a little bit of that, but mainly we'll be working with Markdown.

618
00:59:31,260 --> 00:59:36,260
Then there is this conf.py that includes the configuration for the documentation website

619
00:59:36,260 --> 00:59:39,260
and for the building process.

620
00:59:39,260 --> 00:59:43,220
Build is where the actual website will go when you build it.

621
00:59:43,220 --> 00:59:53,520
MIG contains files, images, static files that you don't build every time and that are essentially

622
00:59:53,520 --> 00:59:55,120
served with the website.

623
00:59:55,120 --> 01:00:01,000
If you have done web development, then this is very familiar, but images go there mostly,

624
01:00:01,000 --> 01:00:02,240
some other files.

625
01:00:02,240 --> 01:00:08,320
Templates, you might want to create your own templates for these HTML files, but we probably

626
01:00:08,320 --> 01:00:12,240
will not go to that here.

627
01:00:12,240 --> 01:00:17,920
file is the instructions to actually build the website, which you can essentially just invoke

628
01:00:19,360 --> 01:00:26,000
or make.bat for Windows. Okay, so the main things though that we will be looking at are

629
01:00:26,000 --> 01:00:33,680
index.rst and conv.py. Okay, so let's take a look at index.rst first.

630
01:00:42,240 --> 01:00:54,800
a second. Okay. So what do we see here? Do you see the whole page? This D, does it cut

631
01:00:54,800 --> 01:01:08,280
away? Okay, good. It's cut away a little bit, but not by much. So, yeah. So this contains

632
01:01:08,280 --> 01:01:15,240
a table of contents or defines a table of contents and then it defines some indices

633
01:01:15,240 --> 01:01:22,200
and tables that are a default there. We will not use the indices and tables section.

634
01:01:24,920 --> 01:01:26,280
So let's remove that one.

635
01:01:31,320 --> 01:01:34,680
Then these top four lines here starting with two dots that's a comment.

636
01:01:34,680 --> 01:01:43,720
Sorry, restructured text has this interesting syntax where dot dot means a command, but

637
01:01:43,720 --> 01:01:50,440
then if it doesn't start with or doesn't have this format of a comment with these double

638
01:01:50,440 --> 01:01:58,680
colons at the end, then it's a comment. So this is a comment. And then this section is

639
01:01:58,680 --> 01:02:08,040
title and this is a special pre-structured text command that generates the table of contents.

640
01:02:09,240 --> 01:02:14,040
Okay, so one more change that we will make is

641
01:02:16,440 --> 01:02:26,120
add a section to the table of contents called somefeature.md. So this is a file name

642
01:02:26,120 --> 01:02:28,920
And we don't currently have this file. We'll need to create it in a moment.

643
01:02:32,600 --> 01:02:36,680
It needs to be on the same level as this caption section. Okay, it seems to be.

644
01:02:38,600 --> 01:02:46,920
Okay, let's save this and go back to the command line. And in order to use markdown, we will need

645
01:02:46,920 --> 01:02:55,560
to use this missed parser that we checked that it exists. So let's go to conf.py and make sure

646
01:02:55,560 --> 01:03:04,600
sure that we're using that. This has essentially the information that we added in the

647
01:03:04,600 --> 01:03:09,640
in the auto generation when it was asking questions. And here we have extensions. So

648
01:03:09,640 --> 01:03:15,720
MistParser is an extension that allows us to use markdown files. So we will add it here.

649
01:03:15,720 --> 01:03:30,000
Okay, so here we use MistParser and I think that's the only change we need to make to

650
01:03:30,000 --> 01:03:47,200
the configuration, so let's go back and then we can create this sumfeature.md and add some

651
01:03:47,200 --> 01:03:49,600
contents to it.

652
01:03:49,600 --> 01:03:59,160
So the title, this will also be the title in the table of contents, so it will actually

653
01:03:59,160 --> 01:04:03,760
get it from the file itself and not just the file name or the title will not just be the

654
01:04:03,760 --> 01:04:28,000
file name. There can be subsections.

655
01:04:28,000 --> 01:04:33,320
So we document some useful and exciting functionality.

656
01:04:40,800 --> 01:04:42,800
Let's make a list.

657
01:04:47,680 --> 01:04:52,160
You do need the empty line here for the list to work.

658
01:04:52,160 --> 01:04:55,240
Item one, you can have nested items in lists.

659
01:04:58,000 --> 01:05:08,080
But then you do need the, I don't think you need an empty line here, but the example has

660
01:05:08,080 --> 01:05:09,080
some.

661
01:05:09,080 --> 01:05:14,360
So just to make sure, I will add it.

662
01:05:14,360 --> 01:05:19,360
So if you are currently typing in the notes or looking at the notes, that is also using

663
01:05:19,360 --> 01:05:20,360
Markdown.

664
01:05:20,360 --> 01:05:24,040
It has exactly the same syntax.

665
01:05:24,040 --> 01:05:25,680
This one is using this Mist parser.

666
01:05:25,680 --> 01:05:27,240
There's many flavors of Markdown.

667
01:05:27,240 --> 01:05:30,680
it has some special syntax for some special things,

668
01:05:30,680 --> 01:05:33,640
but mostly it has the same syntax.

669
01:05:33,640 --> 01:05:37,640
OK, so now I exited the file and saved it.

670
01:05:37,640 --> 01:05:41,000
And now we can build the site.

671
01:05:41,000 --> 01:05:44,720
So first, let's check what files we have.

672
01:05:44,720 --> 01:05:46,800
Just what we had before.

673
01:05:46,800 --> 01:05:50,880
Nothing in the folders, in the build folder.

674
01:05:50,880 --> 01:06:02,000
And then let's do Sphinx build dot and so dot is the current folder and that contains

675
01:06:02,000 --> 01:06:11,640
this index.rst and count.py and we will place the results in the underscore build folder.

676
01:06:11,640 --> 01:06:26,540
Okay. And again, let's look at, actually, nope. Okay. So, I was thinking I could make

677
01:06:26,540 --> 01:06:34,300
a list of all the, like a tree structure of what is in each of the subfolders, but it's

678
01:06:34,300 --> 01:06:48,220
only lists of all the names, so let's look directly at the build folder.

679
01:06:48,220 --> 01:07:03,020
We have some new files in the build folder, mainly index.html and then somefeature.html.

680
01:07:03,020 --> 01:07:11,980
are the pages we wrote and then there's some useful extra features that are included in this

681
01:07:11,980 --> 01:07:20,380
page. So okay, let's then go ahead and open this. It should open in this

682
01:07:20,940 --> 01:07:23,740
web browser when I type in the code. So let's see.

683
01:07:23,740 --> 01:07:37,820
So when I type in the command so xtg open and let's go to build and find index.html.

684
01:07:37,820 --> 01:07:47,580
Okay let's open that and here is the whole website. So it includes the sum feature in the table of

685
01:07:47,580 --> 01:07:55,020
contents and then it actually lists the subsection as well and if you click through here you will get

686
01:07:55,020 --> 01:08:01,740
you will see what we wrote it has the list and the main text so it's all there

687
01:08:05,340 --> 01:08:15,340
you can so it has used a default option for what it looks like for the theme of the website

688
01:08:15,340 --> 01:08:20,940
but there's multiple teams to choose from, some extensions that add additional themes.

689
01:08:20,940 --> 01:08:27,100
You can also build your own if you want to, although of course that's more work.

690
01:08:28,220 --> 01:08:33,180
Okay, so let's go back and continue.

691
01:08:39,500 --> 01:08:43,740
Okay, so actually we have finished the first section of the exercise.

692
01:08:45,340 --> 01:08:49,820
and we have one page in the documentation. So

693
01:08:49,820 --> 01:08:56,060
any comments, questions so far? Let's give some time for that

694
01:08:58,140 --> 01:09:01,740
and decide where we go next.

695
01:09:15,340 --> 01:09:23,220
Is there a specific document generator that's used for PyPy?

696
01:09:23,220 --> 01:09:29,620
I think PyPy just takes the README file, actually you need to tell it where the README file

697
01:09:29,620 --> 01:09:35,020
is, and then it renders it on the main page.

698
01:09:35,020 --> 01:09:46,300
So mostly you can add a link to your documentation, whichever way you generate it.

699
01:09:46,300 --> 01:09:52,100
So why do you want the Sphinx page rather than just a readme file, that's a good question.

700
01:09:52,100 --> 01:09:57,660
Mainly because then you can have multiple pages, if I show this again.

701
01:09:57,660 --> 01:10:02,100
So I could have a second feature here, and each of these has their own page.

702
01:10:02,100 --> 01:10:12,020
I only have one feature or one subpage here, but you can have a whole collection of pages

703
01:10:12,020 --> 01:10:17,300
explaining different parts of the software.

704
01:10:17,300 --> 01:10:26,460
So just a readme file is often enough, but if the readme file is way too long and it's

705
01:10:26,460 --> 01:10:36,940
hard to find the information you want, then you can use something to build a more extensive

706
01:10:36,940 --> 01:10:41,180
documentation with multiple pages that's easier to read and it's easier to find the stuff you're

707
01:10:41,180 --> 01:10:50,060
looking for. It does also have a search feature. So if I search here for feature go, I find the

708
01:10:50,060 --> 01:10:56,300
some feature page. I don't really have a lot of pages here so it's found the same

709
01:10:56,300 --> 01:11:04,260
page twice essentially. Someone also added that things can also do API

710
01:11:04,260 --> 01:11:09,540
reference so that's a good point. It's the in code documentation part which we

711
01:11:09,540 --> 01:11:16,140
talked about previously using doc strings to generate documentation. Yes, so

712
01:11:16,140 --> 01:11:21,980
So there's a section here with some more, essentially,

713
01:11:21,980 --> 01:11:27,460
markdown syntax and misspecific syntax.

714
01:11:27,460 --> 01:11:29,060
We could experiment with that.

715
01:11:29,060 --> 01:11:35,060
Or we could actually do the auto-documentation section next.

716
01:11:35,060 --> 01:11:37,340
That might be because people have talked about it.

717
01:11:37,340 --> 01:11:39,780
Maybe we should do that.

718
01:11:39,780 --> 01:11:44,220
And then we go to a different section.

719
01:11:44,220 --> 01:11:54,300
let's do that next. That seems like people are interested in it. Okay, because unfortunately,

720
01:11:54,300 --> 01:12:01,980
we don't have time to go through everything, but if you want to, you can do this Sphinx,

721
01:12:01,980 --> 01:12:10,060
adding more Sphinx content section to learn more about mist syntax and markdown syntax.

722
01:12:10,060 --> 01:12:17,420
so it's adding you can show this again just for a moment so in addition to lists and different

723
01:12:17,420 --> 01:12:26,460
levels of headings and so on or you can add images links to websites and code blocks

724
01:12:27,180 --> 01:12:30,620
so this is of course very useful when you're documenting code

725
01:12:33,660 --> 01:12:34,160
okay

726
01:12:34,160 --> 01:12:45,240
So, but now I will go through this Sphinx auto-documentation section.

727
01:12:45,240 --> 01:12:51,080
So in order to generate auto-documentation, the first thing we need is some Python code

728
01:12:51,080 --> 01:12:59,000
or some code that has in-code documentation.

729
01:12:59,000 --> 01:13:03,440
So let's create that first, and I'll just create it directly in this folder, which is

730
01:13:03,440 --> 01:13:08,160
usually not quite what you would have. You would usually have a separate documentation folder

731
01:13:10,720 --> 01:13:19,120
and a separate code folder but let's keep it simple for now. So we will call this multiply.py

732
01:13:22,400 --> 01:13:33,040
and it will contain a single function called multiply. It takes in a which is a float

733
01:13:34,320 --> 01:13:39,440
and b which is also float and it returns a float.

734
01:13:41,360 --> 01:13:46,800
Okay so this will add the docstring. First let's do the implementation

735
01:13:48,240 --> 01:13:52,080
which it will multiply these two functions so a return a times b.

736
01:13:53,600 --> 01:14:00,560
Okay and then the docstring. So this will be extensive for this function but this is

737
01:14:00,560 --> 01:14:11,600
an example. So, I want an extensive docstring that documents all the parameters and so on.

738
01:14:12,240 --> 01:14:16,160
Okay, so we multiply two numbers that tells you exactly what the function does.

739
01:14:17,840 --> 01:14:19,680
We have a parameter a

740
01:14:22,560 --> 01:14:26,080
which is the first number to multiply.

741
01:14:26,080 --> 01:14:32,400
we have another parameter B

742
01:14:38,560 --> 01:14:53,560
multiply okay and then it returns so return the product of A and B okay

743
01:14:54,280 --> 01:15:04,120
That's probably enough. So I save it and exit and then I will need to add a new file called

744
01:15:04,120 --> 01:15:12,040
api.md markdown file that will actually this will be the main page of the API reference.

745
01:15:15,640 --> 01:15:18,280
So let's give it a title API reference.

746
01:15:18,280 --> 01:15:36,400
then it will contain, oh, this is, yeah, so the module in the demonstration was called

747
01:15:36,400 --> 01:15:43,600
example, but I called it multiply. This doesn't matter. This is just the title of the section

748
01:15:43,600 --> 01:15:52,080
but I want it to be correct, so make it lowercase because it is the name of the module and the

749
01:15:52,080 --> 01:15:57,600
name of the module is lowercase.

750
01:15:57,600 --> 01:16:06,600
Then we add a command that will create this auto-documentation, so three ticks like that

751
01:16:06,600 --> 01:16:13,240
to start a a command section in this mist flavored markdown

752
01:16:15,240 --> 01:16:22,040
and we'll call it eval I mean the command is evaluate rst restructured text

753
01:16:24,120 --> 01:16:26,280
the reason for this is that

754
01:16:26,280 --> 01:16:41,760
that there is an auto-module extension to Sphinx, an auto-documentation extension, that

755
01:16:41,760 --> 01:16:49,040
will actually generate this API documentation, but it needs to be invoked in restructured

756
01:16:49,040 --> 01:16:50,040
text.

757
01:16:50,040 --> 01:16:56,960
But as far as I know, there's still no way of directly invoking it from Markdown.

758
01:16:56,960 --> 01:17:03,480
So let's write some restructured text here, auto module.

759
01:17:03,480 --> 01:17:05,800
And the name of the module was multiply.

760
01:17:05,800 --> 01:17:06,800
Okay.

761
01:17:06,800 --> 01:17:10,640
So now it's looking for a Python module called multiply.

762
01:17:10,640 --> 01:17:17,440
And then I will tell it to document all the members of this function or of this module.

763
01:17:17,440 --> 01:17:18,440
Okay.

764
01:17:18,440 --> 01:17:21,440
It's called multiply with a Y.

765
01:17:21,440 --> 01:17:23,440
Oh, yes, it is.

766
01:17:23,440 --> 01:17:24,440
Yeah.

767
01:17:24,440 --> 01:17:26,440
So that would have caused an error.

768
01:17:26,440 --> 01:17:27,440
Okay.

769
01:17:27,440 --> 01:17:30,440
And I guess I'll fix that one as well.

770
01:17:30,440 --> 01:17:31,440
Okay.

771
01:17:31,440 --> 01:17:34,440
It is called multiply with a Y here.

772
01:17:34,440 --> 01:17:35,440
Okay.

773
01:17:35,440 --> 01:17:39,440
Then we will need to add something to the configuration to

774
01:17:39,440 --> 01:17:40,440
conf.py.

775
01:17:40,440 --> 01:17:43,440
So we now have this missed parser extension here.

776
01:17:43,440 --> 01:17:47,440
We will also add Sphinx.

777
01:17:47,440 --> 01:17:52,440
It's spelled correctly, yes, .extextensions.autodoc.

778
01:17:54,220 --> 01:17:56,900
So this is included in Sphinx,

779
01:17:56,900 --> 01:18:01,360
but it is not automatically included in the project.

780
01:18:01,360 --> 01:18:06,360
So you need to add it to the configuration here.

781
01:18:06,900 --> 01:18:08,380
Another thing we'll need to do

782
01:18:10,180 --> 01:18:14,860
is a trick to get it to look into this current directory,

783
01:18:14,860 --> 01:18:17,720
because we added the module in the current directory.

784
01:18:17,720 --> 01:18:20,480
So we will add it to the Python path.

785
01:18:20,480 --> 01:18:22,080
I guess we need to import.

786
01:18:25,800 --> 01:18:28,800
Import OS and system.

787
01:18:28,800 --> 01:18:32,880
And then add it to path, insert.

788
01:18:40,080 --> 01:18:42,180
So this gets the current path.

789
01:18:44,860 --> 01:18:49,380
and then adds it to where item looks for modules.

790
01:18:57,060 --> 01:19:01,860
Finally, we'll go to index.rst,

791
01:19:01,860 --> 01:19:07,020
and we have some feature that markdown here in the table of contents,

792
01:19:07,020 --> 01:19:12,260
we will add this API.md, API documentation.

793
01:19:14,860 --> 01:19:25,100
So that's all. Now I need to run sphinx build current folder and the results go to build folder.

794
01:19:28,860 --> 01:19:34,380
And the changes should be visible here. So I need to reload the page probably.

795
01:19:34,380 --> 01:19:36,220
Oh I need to go to the main page. Okay.

796
01:19:40,380 --> 01:19:41,180
What went wrong?

797
01:19:41,180 --> 01:19:52,140
any ideas? I think we are showing the search feature but you can try to open it again.

798
01:19:52,140 --> 01:19:59,500
Oh, I was looking at the search page. Yes, okay. So this is the main page, sorry. So yeah,

799
01:19:59,500 --> 01:20:07,020
so now it has the API reference section and that section contains this multiply module.

800
01:20:07,020 --> 01:20:15,500
so let's go there this shows the multiply module and the multiply module contains a multiply

801
01:20:15,500 --> 01:20:24,700
function and it has a much more nicely structured view of this of the text that I wrote these

802
01:20:24,700 --> 01:20:33,500
parameters and return value okay and you can from this link you can go directly to the multiply

803
01:20:33,500 --> 01:20:40,940
module although I think we are there already oh no sorry this copies a link that um highlights

804
01:20:40,940 --> 01:20:51,900
this section okay yes okay so now sorry there is also a comment on the notes that someone

805
01:20:51,900 --> 01:20:58,460
pointed out that there is a mismarkdown equivalent of writing the same okay so maybe yeah maybe

806
01:20:58,460 --> 01:21:08,540
there yeah maybe let's test that so in the api.markdown instead of evaluating rst here we can do

807
01:21:16,860 --> 01:21:19,340
so this is a section

808
01:21:19,340 --> 01:21:28,340
call author module and then we have multiply here and members.

809
01:21:28,340 --> 01:21:29,340
Okay, let's see.

810
01:21:29,340 --> 01:21:31,340
One thing should be intended.

811
01:21:31,340 --> 01:21:32,340
Sorry?

812
01:21:32,340 --> 01:21:34,340
Should not be intended.

813
01:21:34,340 --> 01:21:35,340
Yeah.

814
01:21:35,340 --> 01:21:37,340
And then there was.

815
01:21:40,340 --> 01:21:42,340
Yeah, that looks good.

816
01:21:42,340 --> 01:21:43,340
We can try that.

817
01:21:43,340 --> 01:21:50,340
Okay, let's reload the page.

818
01:21:50,340 --> 01:21:51,340
Seems to work.

819
01:21:51,340 --> 01:21:56,340
Okay, good.

820
01:21:56,340 --> 01:21:58,340
Okay, that was actually good to know.

821
01:21:58,340 --> 01:22:04,340
I guess we'll update the website with that.

822
01:22:04,340 --> 01:22:10,340
Now let's go to a related but somewhat different topic.

823
01:22:10,340 --> 01:22:26,740
topic. GitHub pages and how to get your documentation easily visible to everyone so that they don't

824
01:22:26,740 --> 01:22:31,460
have to get your code and use things to build it and then look at the website, but rather

825
01:22:31,460 --> 01:22:37,540
that they can just go to a single website and take a look at the documentation.

826
01:22:41,300 --> 01:22:48,660
Okay, so we've been using GitHub for a few things so far, so we'll use GitHub here, but you can also

827
01:22:48,660 --> 01:22:57,060
of course do this, basically the same thing or very similar things on almost all of these,

828
01:22:57,060 --> 01:23:01,300
at least all of these popular repository websites.

829
01:23:03,860 --> 01:23:10,500
Okay so let's just go into it so that we have about 10 minutes to do this that should be

830
01:23:10,500 --> 01:23:20,980
enough. I'm sorry not quite showing the whole because I want to also show where I'm going to

831
01:23:20,980 --> 01:23:30,180
to the GitHub website. Okay, so there is this documentation example project template which

832
01:23:30,180 --> 01:23:39,300
I'm opening here and this will create essentially a copy of this documentation template repository

833
01:23:39,300 --> 01:23:48,340
but it will be my repository. I will call it doc example. Okay, and make it public and that's all.

834
01:23:48,340 --> 01:23:51,780
So let's see what's included here.

835
01:23:57,380 --> 01:24:06,340
Okay, so here we have a license, a README file, we have some example Python code.

836
01:24:06,900 --> 01:24:10,020
No, actually we don't. We just have a README file on this page as well.

837
01:24:11,540 --> 01:24:13,540
Here could be some source code for your project.

838
01:24:13,540 --> 01:24:25,540
and then we have, in the documentation, we have some feature, another feature, and the configuration

839
01:24:25,540 --> 01:24:32,500
file. So we have everything we need to build the documentation locally, but we want to actually

840
01:24:32,500 --> 01:24:46,500
do it automatically on this github page. Okay, just a second because I haven't actually opened

841
01:24:46,500 --> 01:24:56,980
this on the side. Okay, now I have so then so the next step is okay browse to this repository and

842
01:24:56,980 --> 01:25:02,020
I showed you what the contents are so now to get this to happen automatically we need to do

843
01:25:02,500 --> 01:25:10,260
a couple of things. First is we need a recipe or essentially a program that GitHub follows to build

844
01:25:10,260 --> 01:25:21,060
the Sphinx website and that's called an action on GitHub. So we'll create a new file

845
01:25:24,100 --> 01:25:27,380
and it needs to be in .github

846
01:25:27,380 --> 01:25:47,700
and then we can give it whatever name, so documentation.yml, it needs to be a YAML file.

847
01:25:47,700 --> 01:26:04,380
And then I will mainly just copy the workflow file from the lecture notes to this file.

848
01:26:04,380 --> 01:26:13,880
So there are a couple of things that I will look at and possibly change, but mostly this

849
01:26:13,880 --> 01:26:23,960
is just copy paste so I essentially would never write this on my own I would just copy it from

850
01:26:23,960 --> 01:26:33,880
somewhere so the name obviously you want whatever the workflow name is you might want to change that

851
01:26:33,880 --> 01:26:40,280
this will run every time you push to the repository every time there's a new pull request and

852
01:26:40,280 --> 01:26:45,280
and also it can be, you can decide manually to rerun it.

853
01:26:48,240 --> 01:26:49,960
And then well, there's some like system,

854
01:26:49,960 --> 01:26:52,440
it runs on Ubuntu, it does some,

855
01:26:52,440 --> 01:26:54,080
it checks out your repository,

856
01:26:55,080 --> 01:26:57,560
installs Python, installs dependencies.

857
01:26:57,560 --> 01:27:01,080
And here we see missed parser.

858
01:27:01,080 --> 01:27:03,440
And we actually have a theme that we're using,

859
01:27:03,440 --> 01:27:05,960
read-to-docs theme, which is nice.

860
01:27:05,960 --> 01:27:07,960
It's a nice looking theme.

861
01:27:07,960 --> 01:27:16,280
and of course swings and then we run build command and then there's an information on

862
01:27:16,280 --> 01:27:24,520
how to actually deploy it how to get github to actually display it on the github pages

863
01:27:25,960 --> 01:27:29,480
okay so we'll save this file commit changes

864
01:27:35,880 --> 01:27:36,380
okay

865
01:27:37,960 --> 01:27:47,080
So now I wonder if the workflow is actually running.

866
01:27:47,080 --> 01:27:48,280
So I hit this actions here.

867
01:27:48,280 --> 01:27:49,080
Yes.

868
01:27:49,080 --> 01:27:52,000
So we made a new commit so it should run.

869
01:27:52,000 --> 01:27:52,840
It is running.

870
01:27:52,840 --> 01:27:53,760
Okay.

871
01:27:53,760 --> 01:27:58,800
And you can get some more details from here.

872
01:27:58,800 --> 01:28:02,120
So it is following a set of steps here.

873
01:28:02,120 --> 01:28:03,840
It's actually done now.

874
01:28:03,840 --> 01:28:09,240
Okay, let's do it in this order.

875
01:28:09,240 --> 01:28:17,320
So what it has done is it has created a new branch called githubpages or ghpages and that

876
01:28:17,320 --> 01:28:20,200
just contains the website.

877
01:28:20,200 --> 01:28:26,000
So everything needed for the website is there and it will automatically update whenever

878
01:28:26,000 --> 01:28:28,720
you push to the repository.

879
01:28:28,720 --> 01:28:34,640
more important thing we need to actually turn github pages on so i went from here to settings

880
01:28:34,640 --> 01:28:42,640
and then to pages deploy from a branch and then we select github pages here and save

881
01:28:44,400 --> 01:28:48,400
okay and now it should work i think it has

882
01:28:52,240 --> 01:28:55,200
somewhere here it usually tells you what the

883
01:28:55,200 --> 01:29:07,760
URL to your website is. It is always the same so I know it off the top of my head but

884
01:29:09,920 --> 01:29:11,360
of course you might not remember.

885
01:29:14,000 --> 01:29:23,440
Oh well, I usually also add it here so there is this about section and it is actually

886
01:29:23,440 --> 01:29:34,560
it is your username dot github dot io not com but io and then the repository name

887
01:29:35,120 --> 01:29:41,760
doc example okay so it is always the same structure oh okay

888
01:29:43,760 --> 01:29:51,200
use your github pages website is it's an option here so you can it it can automatically fill in

889
01:29:51,200 --> 01:30:00,640
the URL. Okay. So slightly changed interface, but it is still at least as convenient as before.

890
01:30:00,640 --> 01:30:04,960
Okay. So now I have the link here and I don't have to remember what exactly it is.

891
01:30:06,720 --> 01:30:13,600
Okay. And it displays. So this is not exactly what we wrote locally because I copied it from

892
01:30:13,600 --> 01:30:20,400
the template. If we had done exercise two instead of exercise four, then it would look like this.

893
01:30:21,200 --> 01:30:23,580
So it has the documentation,

894
01:30:23,580 --> 01:30:27,380
it has a nice sidebar here because we're using

895
01:30:27,380 --> 01:30:32,380
the read-to-docs theme instead of the default theme,

896
01:30:32,380 --> 01:30:35,660
and then it has the actual contents of the page here.

897
01:30:35,660 --> 01:30:39,380
So this is what we wrote in the example.

898
01:30:41,340 --> 01:30:44,580
So now it is online for everyone to see,

899
01:30:44,580 --> 01:30:48,740
and this works as long as your repository is public.

900
01:30:48,740 --> 01:30:50,380
If you have a private repository,

901
01:30:50,380 --> 01:30:56,860
then I guess you probably wouldn't want it to be displayed here anyway, the documentation.

902
01:30:57,500 --> 01:31:05,660
But then I don't think it's a free feature. But in any case, as long as it's public, this works.

903
01:31:07,580 --> 01:31:12,140
And yeah, you can do the same thing on GitLab. The steps are different,

904
01:31:12,140 --> 01:31:16,540
the interface is different, but the principle is the same.

905
01:31:16,540 --> 01:31:25,980
I think we have a list here of alternatives. GitLab CI and GitLab Pages. Read-to-Docs is a

906
01:31:25,980 --> 01:31:34,780
commonly used hosting alternative. This is separate from these repository websites so it will

907
01:31:35,580 --> 01:31:39,100
need to have access to your repository. It needs to be able to clone it

908
01:31:39,100 --> 01:31:41,020
and then it will build the documentation for you.

909
01:31:41,020 --> 01:31:49,900
So, yeah, and you can, of course, build them manually or create your own workflow to build

910
01:31:49,900 --> 01:31:53,020
them and host them anywhere.

911
01:31:53,020 --> 01:31:54,660
Sorry.

912
01:31:54,660 --> 01:32:05,340
Okay, so here's some steps for migrating to Sphinx if you already have some documentation

913
01:32:05,340 --> 01:32:07,060
to migrate.

914
01:32:07,060 --> 01:32:12,060
I think we should go to the wrap-up section,

915
01:32:12,900 --> 01:32:13,740
to the summary.

916
01:32:16,960 --> 01:32:19,260
Yeah, let's take a look at the notes quickly.

917
01:32:20,380 --> 01:32:24,480
There's some questions that were answered, I think.

918
01:32:25,860 --> 01:32:28,980
There are a couple of them.

919
01:32:28,980 --> 01:32:31,060
Does Sphinx work with GitLab?

920
01:32:31,060 --> 01:32:32,380
Of course it does.

921
01:32:32,380 --> 01:32:36,340
So you can do the same approach using GitLab API.

922
01:32:37,060 --> 01:32:46,280
GitHub CI is essentially the same as GitHub Actions and GitLab Pages is the same as GitHub

923
01:32:46,280 --> 01:32:48,340
Pages essentially.

924
01:32:48,340 --> 01:32:53,760
So you can do essentially the same thing.

925
01:32:53,760 --> 01:32:59,700
And then there is this question, how do you connect or link the Sphinx documentation

926
01:32:59,700 --> 01:33:02,920
you report to your repo on GitHub?

927
01:33:02,920 --> 01:33:10,800
So I think there is a Sphinx setting somewhere in the conf.py, I can't collect it from the

928
01:33:10,800 --> 01:33:18,040
top of my head, but it specifies where the repositories or where do you actually intend

929
01:33:18,040 --> 01:33:19,040
to publish.

930
01:33:19,040 --> 01:33:24,800
So then when you render it, it links to the source.

931
01:33:24,800 --> 01:33:27,680
But this is very specific to the theme.

932
01:33:27,680 --> 01:33:31,320
Am I right, [name]?

933
01:33:31,320 --> 01:33:42,480
Yeah, so there is a setting, if you look at the config file, config.py, I think there's

934
01:33:42,480 --> 01:33:46,200
a setting for the URL somewhere in here.

935
01:33:46,200 --> 01:33:47,200
Oh, I guess not.

936
01:33:47,200 --> 01:33:49,200
I guess you have to add it.

937
01:33:49,200 --> 01:33:50,200
Okay.

938
01:33:50,200 --> 01:33:57,040
Well, then I don't know off the top of my head how to do it exactly.

939
01:33:57,040 --> 01:34:00,360
I wonder if that is what the question was about, though.

940
01:34:00,360 --> 01:34:04,680
I guess the same, it's this edit button which comes up.

941
01:34:04,680 --> 01:34:05,840
Yeah.

942
01:34:05,840 --> 01:34:17,920
So one thing I did just show here is, so in one direction,

943
01:34:17,920 --> 01:34:20,400
it's straightforward.

944
01:34:20,400 --> 01:34:24,400
So it's straightforward to add the link from the GitHub

945
01:34:24,400 --> 01:34:26,720
to these GitHub pages.

946
01:34:26,720 --> 01:34:29,120
Going the other way is less straightforward.

947
01:34:29,120 --> 01:34:34,800
But you can, of course, manually add this is the recommendation.

948
01:34:35,000 --> 01:34:39,120
So you can manually add on the main page a link to your code.

949
01:34:39,320 --> 01:34:42,120
Oh, there is a view page source.

950
01:34:42,320 --> 01:34:44,440
Seems to know where it is.

951
01:34:45,280 --> 01:34:48,560
I wonder, actually, where it got the information.

952
01:34:51,240 --> 01:34:55,240
Yeah, Sphinx actually saves a copy of the.

953
01:34:55,240 --> 01:35:05,240
That's why it comes in the generated version, so it's actually there, but there is actually a way.

954
01:35:05,240 --> 01:35:16,240
You can always add it as text here, the repository is at an URL, so that's always a solution, although not automated.

955
01:35:16,240 --> 01:35:31,360
Okay. Let's go to wrap up. Oh, hosting websites. So, I mean, yeah, I just, I did show you this

956
01:35:31,360 --> 01:35:37,440
very quickly. There is, there's a branch called GitHub pages where it actually pushes the

957
01:35:37,440 --> 01:35:46,960
new version or the most recent version of the documentation. So you can also use GitHub pages

958
01:35:46,960 --> 01:35:56,720
to just directly write HTML and host it there. So if you're using GitHub anyway this is a

959
01:35:56,720 --> 01:36:03,840
straightforward way of hosting a website. Same goes for GitLab and all the other alternatives.

960
01:36:07,440 --> 01:36:13,440
but probably not spend more time on that unfortunately because we don't have that much

961
01:36:14,080 --> 01:36:21,840
and we want to go for lunch in time so yeah just the general wrap-up for documentation

962
01:36:24,240 --> 01:36:29,040
and yeah I guess the most important takeaway is you well you should have documentation

963
01:36:29,680 --> 01:36:34,000
for yourself and for others in your team and for other users outside your team

964
01:36:34,000 --> 01:36:40,840
him. But there is no one right way to do it. Like for a small enough project, a readme

965
01:36:40,840 --> 01:36:46,580
file is enough. You probably want some in code documentation. For a bigger project,

966
01:36:46,580 --> 01:36:52,200
the in code documentation should be really, especially if it's meant to be used by users.

967
01:36:52,200 --> 01:36:56,000
If you're talking about a function that's meant to be used by actual users, then it

968
01:36:56,000 --> 01:37:02,160
should be really well documented. And you should also have some sort of static website

969
01:37:02,160 --> 01:37:05,160
at least for the documentation.

970
01:37:05,160 --> 01:37:07,600
But then there's everything in between, right?

971
01:37:07,600 --> 01:37:13,680
And it's really up to you to decide where you

972
01:37:13,680 --> 01:37:16,360
go from one option to another.

973
01:37:16,360 --> 01:37:21,680
If that readme feels too long, then it probably is too long.

974
01:37:21,680 --> 01:37:24,280
But yeah, I mean, there's no one right way to do it.

975
01:37:32,160 --> 01:37:38,160
So, any final thoughts?

976
01:37:38,160 --> 01:37:47,080
Yeah, and then there's always progressively different ways to improve it, like adding

977
01:37:47,080 --> 01:37:52,480
more user-friendly sections and yeah.

978
01:37:52,480 --> 01:37:59,320
Yeah, of course, whatever decision you take, you're not stuck with it.

979
01:37:59,320 --> 01:38:08,680
can always at least add more. So you can add a static website and copy stuff from the README

980
01:38:08,680 --> 01:38:15,560
to the website and have a nicer structure with a table of contents.

981
01:38:18,040 --> 01:38:21,800
Well, the README does have a table of contents, so you can create one.

982
01:38:21,800 --> 01:38:33,240
But the main thing is that the readme shows all of it at once and you have to scroll or hyperlink

983
01:38:33,240 --> 01:38:38,840
to different sections of it. On a static website you can split it into multiple pages

984
01:38:39,800 --> 01:38:47,480
and it should be easier to read in that sense. Yeah another consideration is like

985
01:38:47,480 --> 01:38:54,280
ask yourself who you are targeting this and is it someone who is new to the

986
01:38:54,280 --> 01:39:00,520
code or is someone who is already into the code and needs to know the

987
01:39:00,520 --> 01:39:06,200
nitty-gritty details so you should have something for both and it can even be a

988
01:39:06,200 --> 01:39:13,400
future maintainer who should know how to publish the code and keep it updated.

989
01:39:13,400 --> 01:39:21,740
To me, that's kind of the minimum. If you want the code to be usable or maintainable

990
01:39:21,740 --> 01:39:28,320
in the future, then you should have at least enough documentation for the future maintainer,

991
01:39:28,320 --> 01:39:36,600
which is likely, it might be you. But still, you will not remember. So, that's kind of

992
01:39:36,600 --> 01:39:44,280
minimum. But then if it's really a big library and you want it to be user-friendly then you

993
01:39:44,280 --> 01:39:51,800
should have a lot more than that. Is anyone rethinking how they're doing documentation

994
01:39:51,800 --> 01:39:59,160
right now? Is anyone not doing documentation but is thinking of how to do it?

995
01:39:59,160 --> 01:40:12,560
You could add your thoughts in the final summary section in the notes, you're very welcome

996
01:40:12,560 --> 01:40:15,560
to do that.

997
01:40:15,560 --> 01:40:28,720
Okay, well, there is a good amount of recap, of course, on the page that I'm showing.

998
01:40:28,720 --> 01:40:33,720
So there's, we talked about readmes and static websites.

999
01:40:33,760 --> 01:40:37,680
We talked about in code documentation

1000
01:40:37,680 --> 01:40:42,680
and how API documentation, how those two work together.

1001
01:40:42,680 --> 01:40:45,840
And of course, there's several options.

1002
01:40:48,200 --> 01:40:50,480
We didn't really talk about how to write tutorials,

1003
01:40:50,480 --> 01:40:53,120
but that's also a very good addition.

1004
01:40:53,120 --> 01:40:58,120
If you have slightly bigger program,

1005
01:40:58,720 --> 01:41:01,120
or just examples of how to run the code.

1006
01:41:08,240 --> 01:41:15,760
So yeah that is the general summary of the documentation section. So next we'll talk

1007
01:41:15,760 --> 01:41:22,880
about Jupyter but before that let's have a lunch break. So we will see you in one hour

1008
01:41:22,880 --> 01:41:39,520
on the hour and yeah, have a good break, find something to eat and see you. Bye. Bye.

