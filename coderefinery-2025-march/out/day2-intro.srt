1
00:00:00,000 --> 00:00:06,220
the schedule we have for day two a day two intro i'll open that up

2
00:00:08,460 --> 00:00:15,100
so to recap day one we went through the motivation for version control mainly all the ways you can

3
00:00:15,100 --> 00:00:26,540
lose code if you don't have good history and then on github web we made our own copies of a public

4
00:00:26,540 --> 00:00:34,380
repository we committed stuff and we made pull requests and those are basically some of the

5
00:00:34,380 --> 00:00:42,780
common operation kinds of things that you'd see so for day two it's similar but instead of working

6
00:00:42,780 --> 00:00:51,660
via a web browser we clone from github to our own computer we do the same kind of things we

7
00:00:51,660 --> 00:01:00,060
make commits we make branches we push and so on then since it's on our computer we can inspect

8
00:01:00,060 --> 00:01:09,420
history in more detail to see how to figure out stuff in the past and then we figure out if you

9
00:01:09,420 --> 00:01:16,300
have a new project on your computer then how you would um prepare this for git and push it

10
00:01:16,300 --> 00:01:26,640
somewhere and a bunch of practical advice uh yeah anything else to add to the intro no i think that's

11
00:01:26,640 --> 00:01:35,260
that's um that's it maybe i will just answer uh one of the questions we got regarding yesterday

12
00:01:35,260 --> 00:01:44,380
and as i was a bit rushed when explaining it so so the question is why do we need tax

13
00:01:44,380 --> 00:01:56,680
so why not yeah why tags at all so uh usually we can identify uh to a commit by either using

14
00:01:56,680 --> 00:02:04,300
the hash of the commit if that commit is the top of the branch then we can refer to it

15
00:02:04,300 --> 00:02:10,800
via the branch name also that will change once we push a new commit to that branch

16
00:02:10,800 --> 00:02:21,080
So, one convenient way to refer to a certain commit, so a certain copy of our repository

17
00:02:21,080 --> 00:02:27,480
at a given time, is by introducing yet another reference to a commit.

18
00:02:27,480 --> 00:02:33,000
So then when I say, okay, look at this commit with, I know this really long hash, I can

19
00:02:33,000 --> 00:02:40,120
just say that okay check check this commit with uh with the tag i don't know version 1.0

20
00:02:40,120 --> 00:02:51,000
or or anything so uh so it's like a more kind of it needs a battery like easier to read the

21
00:02:51,000 --> 00:02:53,960
the version name, simply.

22
00:02:55,260 --> 00:02:59,760
So, and this is especially useful if you are,

23
00:03:01,640 --> 00:03:05,740
well, if you are developing a code

24
00:03:05,740 --> 00:03:08,520
and then you want people to refer to certain versions

25
00:03:08,520 --> 00:03:10,700
and be able to cite certain versions

26
00:03:10,700 --> 00:03:13,860
when they are using that in their paper.

27
00:03:13,860 --> 00:03:18,220
So, yeah, referring to a version,

28
00:03:18,220 --> 00:03:20,960
well, to a tag

29
00:03:20,960 --> 00:03:23,600
the version

30
00:03:23,600 --> 00:03:25,700
it's maybe better

31
00:03:25,700 --> 00:03:27,520
than, well, it's not better

32
00:03:27,520 --> 00:03:29,820
but it's just more readable

33
00:03:29,820 --> 00:03:30,320
simply

34
00:03:30,320 --> 00:03:33,720
yeah, anything you want to add [name], sorry

35
00:03:33,720 --> 00:03:35,860
not really

36
00:03:35,860 --> 00:03:37,660
I think

37
00:03:37,660 --> 00:03:39,400
that was a good thing to answer

38
00:03:39,400 --> 00:03:40,140
and

39
00:03:40,140 --> 00:03:42,840
yeah, let's go

40
00:03:42,840 --> 00:03:45,080
so should I switch to your screen?

41
00:03:45,780 --> 00:03:47,000
yes, please do so

