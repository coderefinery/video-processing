1
00:00:00,000 --> 00:00:12,580
okay there you go so then what we are going to be doing today is to clone a git repository and

2
00:00:12,580 --> 00:00:19,460
work on it locally so what we'll do is we are going to bring our work we have done on github

3
00:00:19,460 --> 00:00:30,160
yesterday on our local machines so is font size big enough it looks okay to me does

4
00:00:30,160 --> 00:00:39,460
anyone else have a comment well write in notes and i'll relay if you need okay so then whatever

5
00:00:39,460 --> 00:00:46,400
we did yesterday so doing commits in our repository creating new branches merging

6
00:00:47,280 --> 00:00:54,000
merging branches, we are going to experiment with that on our local machines. So then

7
00:00:57,040 --> 00:01:03,120
a small recap from yesterday. So what is our Git repository? So it simply contains all the

8
00:01:03,120 --> 00:01:08,720
files and the subdirectories of our project. It has the complete history of our commits,

9
00:01:09,360 --> 00:01:15,840
so different snapshots of these files and directories at different times,

10
00:01:15,840 --> 00:01:23,040
and it usually contains, well not usually, sometimes it contains different branches

11
00:01:23,040 --> 00:01:33,680
and tags. Introducing new branches is to have a clearer line of thought, so whenever you're

12
00:01:33,680 --> 00:01:39,600
experimenting with something new, you might want to create a branch so that in case you are

13
00:01:39,600 --> 00:01:47,840
uncertain, if that's something you wish to have for your repository, you can simply discard it

14
00:01:48,880 --> 00:01:55,280
or merge it in the main one if it's an important feature. So what about cloning?

15
00:01:56,400 --> 00:02:03,280
So cloning is actually copying the entire repository with its commits and history to our

16
00:02:03,280 --> 00:02:15,600
local computer. And it's yet another backup for the repository. Then you can work on your

17
00:02:16,240 --> 00:02:23,680
local copy of the repository. You can do further tests and run the program if it's a program or

18
00:02:25,520 --> 00:02:31,440
use your favorite editor to inspect different files. And one important thing to remember

19
00:02:33,280 --> 00:02:35,960
when it comes to cloning,

20
00:02:35,960 --> 00:02:39,640
is that if you do commits in your local clone,

21
00:02:39,640 --> 00:02:43,000
so the local repository on your machine,

22
00:02:43,000 --> 00:02:45,900
these will not appear automatically

23
00:02:45,900 --> 00:02:48,540
to the repository where you cloned from.

24
00:02:48,540 --> 00:02:49,820
And the other way around,

25
00:02:49,820 --> 00:02:52,500
if the repository you cloned from,

26
00:02:52,500 --> 00:02:56,960
which is typically called upstream,

27
00:02:56,960 --> 00:03:01,620
so if that repository has new commits,

28
00:03:01,620 --> 00:03:04,500
then they will not show up automatically

29
00:03:04,500 --> 00:03:08,520
on your clone repository, on your local machine.

30
00:03:08,720 --> 00:03:11,860
You actually have to use additional commands

31
00:03:11,860 --> 00:03:17,180
in order to sync your local clone

32
00:03:17,180 --> 00:03:21,100
with the repository on GitHub or GitLab,

33
00:03:21,200 --> 00:03:22,660
if that is where you have it.

34
00:03:23,820 --> 00:03:27,460
So it's not a full automatic syncing,

35
00:03:27,460 --> 00:03:31,460
but somehow you tell it when to...

36
00:03:31,620 --> 00:03:36,660
ago and i guess that will be the push and pull commands we learned exactly i think we had heard

37
00:03:36,660 --> 00:03:43,780
and some some of the ids can do this automatically but i think it's important to remember that

38
00:03:43,780 --> 00:03:50,180
generally this is not the case so you will have to do this pushing and pulling and we'll we'll

39
00:03:50,180 --> 00:03:57,700
see how you can do that so i think maybe we should discuss a little bit why what is the difference

40
00:03:57,700 --> 00:04:05,700
between forking and cloning and when do we want to do one or the other yeah well

41
00:04:07,700 --> 00:04:15,700
is that a question to me if you want otherwise i i will answer so in my mind i think forking is

42
00:04:16,740 --> 00:04:24,580
it's like making your own copy and cloning i know the command makes a copy on my computer

43
00:04:24,580 --> 00:04:34,520
so i guess fork is like the well is everything a fork technically but when we say fork we usually

44
00:04:34,520 --> 00:04:43,480
mean something on github like making the own copy of a github repository and then clone is well you

45
00:04:43,480 --> 00:04:50,320
can clone your own repository your own copy of the repository or you can clone the upstream copy

46
00:04:50,320 --> 00:04:59,520
that's not yours so yeah yeah so i would just add that so if i only want to let's say i i found a

47
00:04:59,520 --> 00:05:09,280
repository uh on the web and i want to investigate further then i i may do a fork and uh and um

48
00:05:11,680 --> 00:05:17,840
yeah maybe doing some simple commit on on github or something but if it's actually a code

49
00:05:17,840 --> 00:05:23,760
that I may wish to run, then I'm going to clone that on my local machine,

50
00:05:24,560 --> 00:05:32,240
install that software, run some tests, or run it with some input that I have.

51
00:05:32,240 --> 00:05:39,440
So yeah, whenever I actually need to run things on my machine, when I want to do commits which

52
00:05:40,400 --> 00:05:47,600
are maybe, I don't, doesn't necessarily have to be more advanced, but let's say I just prefer

53
00:05:47,600 --> 00:05:53,520
to work on my local machine then then i would go for a clone instead of just forking it and

54
00:05:53,520 --> 00:05:59,600
it's not wrong to do both or it's not wrong to start with one and add the other so um

55
00:06:01,600 --> 00:06:08,800
that's um that's perfectly fine yeah okay so cloning gets you the actual files on your

56
00:06:08,800 --> 00:06:16,160
computer that you can do stuff with which i guess is important for anything so yeah okay

57
00:06:17,600 --> 00:06:18,100
Good.

58
00:06:18,240 --> 00:06:22,420
Okay, so then let's introduce the exercise.

59
00:06:23,980 --> 00:06:32,600
And again, I mean, we prefer you do this using either VS Code or the command line.

60
00:06:33,060 --> 00:06:35,720
Still, I mean, there are things that you can do on GitHub.

61
00:06:35,980 --> 00:06:40,480
So if that is the path you want to choose, that's perfectly fine.

62
00:06:41,280 --> 00:06:43,100
It will not work for all the steps.

63
00:06:43,100 --> 00:07:05,060
Actually, well, we'll see with some of the exercises later that some things can be done on GitHub, but now it's mostly cloning a repository which exists on GitHub and bringing it to your computer.

64
00:07:05,060 --> 00:07:13,820
So, if you have not yet configured Git on the command line,

65
00:07:13,820 --> 00:07:16,020
then we suggest you do that,

66
00:07:16,020 --> 00:07:17,340
and in this step one,

67
00:07:17,340 --> 00:07:21,520
there is a link to that.

68
00:07:21,520 --> 00:07:23,220
Then in the second step,

69
00:07:23,220 --> 00:07:25,460
you actually need to decide which is

70
00:07:25,460 --> 00:07:28,200
the repository that you wish to clone.

71
00:07:28,200 --> 00:07:30,840
If you were with us yesterday,

72
00:07:30,840 --> 00:07:40,780
Then you may already have a recipe book, which is, well, a fork of the CR workshop exercises.

73
00:07:41,400 --> 00:07:44,660
You may work with the fork that you have.

74
00:07:45,520 --> 00:07:52,060
You may also work with the repository under CR workshop exercises.

75
00:07:52,060 --> 00:07:53,520
It's really up to you.

76
00:07:53,520 --> 00:07:57,540
For the purpose of this exercise, it doesn't matter what you choose.

77
00:07:57,540 --> 00:08:01,380
Then we'd like you to create a new branch,

78
00:08:01,380 --> 00:08:05,660
this time locally, and make a commit.

79
00:08:05,660 --> 00:08:10,760
We'll simply repeat some of the steps that we have done yesterday,

80
00:08:10,760 --> 00:08:15,300
but on our local repository.

81
00:08:16,540 --> 00:08:22,460
Then step 7 is actually to compare your commits

82
00:08:22,460 --> 00:08:34,420
locally with what exists on github and identify if these uh if the syncing has happened or not

83
00:08:34,420 --> 00:08:43,660
so um that's uh that's about it [name] anything else that we should add before going into exercise

84
00:08:43,660 --> 00:08:53,020
time if you can't do this exercise do you lose whatever comes later or is it okay like

85
00:08:53,020 --> 00:09:00,320
do future exercises depend on this one no they don't depend so okay and if you if you cannot

86
00:09:00,320 --> 00:09:09,100
so if you don't want to work or if you don't want or cannot work locally using either the command

87
00:09:09,100 --> 00:09:14,860
an online or an editor, then you may just try this again on GitHub.

88
00:09:15,060 --> 00:09:16,300
That's perfectly fine.

89
00:09:16,500 --> 00:09:20,860
So no need to panic.

90
00:09:21,060 --> 00:09:22,140
OK, yeah.

91
00:09:22,340 --> 00:09:27,540
Can they come back in 45 minutes and we go to the next one, which they can do?

92
00:09:27,740 --> 00:09:28,620
OK, good to know.

93
00:09:28,820 --> 00:09:30,420
Yeah. And I mean, they can.

94
00:09:30,620 --> 00:09:35,140
One option is also just to check the solutions that we have introduced.

95
00:09:35,340 --> 00:09:36,980
That is also perfectly OK.

96
00:09:36,980 --> 00:09:43,700
I think that there is still a lot of learning that can be done by just checking the solution.

97
00:09:45,940 --> 00:09:50,340
And then there's a good question on line 105.

98
00:09:51,720 --> 00:09:53,600
Step three, creating branches locally.

99
00:09:53,780 --> 00:09:57,000
For this, do we need to be in the same directory of the recipe book?

100
00:09:58,040 --> 00:10:02,940
And this goes close to, I think, what might be the biggest problem in this step.

101
00:10:02,940 --> 00:10:10,180
so whenever you do the local work especially from the command line you have to know

102
00:10:10,180 --> 00:10:16,800
you have to run things from the command line like the command line has to be in the same location

103
00:10:16,800 --> 00:10:26,600
where your um where your files are currently stored and if you've never examined stuff from

104
00:10:26,600 --> 00:10:32,000
the command line if this is still new to you don't worry like you'll probably pick it up quickly but

105
00:10:32,000 --> 00:10:40,820
it will be hard to learn two things at once so in that case um don't worry ask the questions um

106
00:10:40,820 --> 00:10:48,400
i do i did try to cover this in the shell crash course which i re-recorded for this workshop

107
00:10:48,400 --> 00:10:57,240
that you've seen somehow as part of the setup instructions and if the command line

108
00:10:57,240 --> 00:11:01,400
seems too hard I guess you could take time and watch that again

109
00:11:01,400 --> 00:11:05,620
and see what you can learn there. So I'll just add

110
00:11:05,620 --> 00:11:09,640
one thing so you do need to be in this directory the recipe

111
00:11:09,640 --> 00:11:13,680
book because well git needs to know that

112
00:11:13,680 --> 00:11:16,760
the directory you are in is actually a git repository

113
00:11:16,760 --> 00:11:20,820
otherwise it will not understand that so

114
00:11:20,820 --> 00:11:24,580
so the short answer is yes

115
00:11:24,580 --> 00:11:27,640
yeah okay

116
00:11:27,640 --> 00:11:32,080
is that all then

117
00:11:32,080 --> 00:11:34,440
yes that's all

118
00:11:34,440 --> 00:11:36,100
and then what should we say

119
00:11:36,100 --> 00:11:38,040
20 minutes or 25

120
00:11:38,040 --> 00:11:39,500
25 minutes I think we have

121
00:11:39,500 --> 00:11:42,560
so in case you need to

122
00:11:42,560 --> 00:11:44,420
set some things up you have

123
00:11:44,420 --> 00:11:45,660
those extra minutes

124
00:11:45,660 --> 00:11:49,520
yeah okay

125
00:11:49,520 --> 00:11:52,560
great so see you later

126
00:11:52,560 --> 00:11:54,560
good luck and definitely

127
00:11:54,560 --> 00:12:02,860
write questions in the notes we are around to help okay bye

128
00:12:04,000 --> 00:12:09,480
Okay, welcome back everyone.

129
00:12:09,960 --> 00:12:19,080
I hope you had a good try for this exercise. So we have a feedback box in the notes document.

130
00:12:20,040 --> 00:12:27,000
If you have missed it then please check that. But based on the existing feedback you would

131
00:12:27,000 --> 00:12:34,280
like me to demo how to do this via the command line. So this is what I'm going to do in the

132
00:12:34,280 --> 00:12:42,040
following. So the very first thing that one should do, so let's see, go back to the exercise,

133
00:12:42,040 --> 00:12:52,520
is to configure git. I have done that already, so that is fixed. And actually, yes, in case you do

134
00:12:52,520 --> 00:13:00,600
not have done done, then I should just show you that you find it under the first episode,

135
00:13:00,600 --> 00:13:09,880
getting started and configuring git command line and editor. So that is what you need to do.

136
00:13:09,880 --> 00:13:17,960
And then, if that is still unclear, add another plus to that part. And then the second step is

137
00:13:17,960 --> 00:13:24,680
to decide which repository to clone. And I am going to use the fork I have done yesterday.

138
00:13:24,680 --> 00:13:35,240
And how do I do that? So I need to have a URL for where this remote repository is located and then

139
00:13:35,240 --> 00:13:45,480
copy that. So you may notice there is a green button here close to, well, on my GitHub repo

140
00:13:45,480 --> 00:13:55,480
page and i'm going to click on this triangle and copy this link which is under ssh so just

141
00:13:55,480 --> 00:14:03,880
a short comment on the difference between https and ssh if you do not want to push your local

142
00:14:03,880 --> 00:14:11,960
changes to this remote repository which you are cloning it's okay to use https if you do want to

143
00:14:11,960 --> 00:14:18,360
push back and you have the rights to do that, then choose SSH. And because this is my own repository,

144
00:14:18,360 --> 00:14:23,960
I do have the rights to do that, so I'm going to go for this option. But again, if you're cloning

145
00:14:23,960 --> 00:14:32,280
someone else's repository and you're not a member of that project, then choose the other option.

146
00:14:33,240 --> 00:14:43,640
So I have copied that and I'm going to go to my terminal and the command to clone a repository

147
00:14:43,640 --> 00:14:54,360
is git clone and then I have to specify the path where this, well the URL where this repository is

148
00:14:55,160 --> 00:15:01,480
and actually it's not the URL but it has a certain syntax as I got instructed from GitHub.

149
00:15:01,480 --> 00:15:08,440
So I have just pasted that. So this is what I copied from github and then I enter and now

150
00:15:08,440 --> 00:15:23,000
I have this down on my reposter. So let's see. Okay, sorry, that was very bad. So I have

151
00:15:23,000 --> 00:15:31,240
have cloned this in my home directory. I'm going to actually move this recipe book recorded into

152
00:15:31,800 --> 00:15:41,400
another folder that was unnecessarily complicated.

153
00:15:41,400 --> 00:15:53,000
Oh, okay. That was... Let me just do the clone again.

154
00:15:56,520 --> 00:16:03,080
Oh, it's because I already loaded it here. Yes. Okay. Sorry. So then I have this clone recipe

155
00:16:03,080 --> 00:16:10,040
book recorded. So it's a Git repo on my local machine, and I'm going to cd to this

156
00:16:11,400 --> 00:16:18,500
directory. And what do I have? So I have all these different files that we have seen yesterday

157
00:16:18,500 --> 00:16:27,900
as well. And the next step was to, let's see, is to create a new branch. And how I can switch

158
00:16:27,900 --> 00:16:43,980
switch. So the command to do that is git switch. And the name of the branch. Let's see. What

159
00:16:43,980 --> 00:16:57,600
should I say? Oh, sorry. New branch. And then the branch I want to create it from. And I'm

160
00:16:57,600 --> 00:17:02,880
going to create it from the main branch and actually git switch is not enough because this

161
00:17:02,880 --> 00:17:06,880
new branch or actually maybe it exists so let's call it

162
00:17:10,000 --> 00:17:19,040
modif by super i also need to add the option create so what this is going to do is create

163
00:17:19,040 --> 00:17:27,440
this ModifSoup branch from main and then switch to it. It's like a combination of two commands.

164
00:17:27,440 --> 00:17:34,480
And to see that I am on the right branch I'm going to do git status and you should do git status

165
00:17:34,480 --> 00:17:40,000
often so that you actually know what the state of your repository is. But now it just tells me that

166
00:17:40,000 --> 00:17:48,160
okay I'm on this branch and I have a clean working tree that means that I have not modified anything.

167
00:17:49,040 --> 00:17:57,760
but what I will do is to modify the mushroom recipe and I opened this file with my preferred

168
00:17:57,760 --> 00:18:07,360
editor. You use your preferred editor and I'm just going to add for example this and

169
00:18:08,480 --> 00:18:14,400
commit this change. So first I have to instruct git that I have modified this and I want this

170
00:18:15,200 --> 00:18:21,680
modification to be incorporated in the next commit and I do that with the git add command.

171
00:18:21,680 --> 00:18:27,760
So this is like adding the plus button in VS Code for example. You simply instruct git that you want

172
00:18:27,760 --> 00:18:36,240
to incorporate these changes in the new commit. And then let's show git status again. So this

173
00:18:36,240 --> 00:18:40,640
This will tell me, okay, you have modified this file.

174
00:18:40,780 --> 00:18:43,720
It is staged, and I can now commit it.

175
00:18:43,720 --> 00:18:49,080
So I can incorporate this change to the mushroom soup in the new commit.

176
00:18:50,000 --> 00:18:55,620
And using the command line, it's git commit, dash M for the commit message,

177
00:18:56,100 --> 00:18:57,420
if it's just one line.

178
00:18:57,880 --> 00:19:03,400
So modify, edit, yeah, modified mushroom.

179
00:19:06,240 --> 00:19:13,200
And then, let's just do git log and see how that looks.

180
00:19:13,200 --> 00:19:22,860
So I have a new commit here, modified soup, on the branch modified soup, and then with

181
00:19:22,860 --> 00:19:25,400
this commit message.

182
00:19:25,400 --> 00:19:34,520
So I could also do git graph, for example, and then I have the whole history of my repository

183
00:19:34,520 --> 00:19:41,960
in a graphical representation, and you can actually also see this in VS Code.

184
00:19:43,480 --> 00:19:52,840
Okay, and then what else to do? So I should switch back to the main branch, so git

185
00:19:53,880 --> 00:20:02,280
checkout main, or I could do git switch main. So let's do that. So either git checkout main

186
00:20:02,280 --> 00:20:09,960
or git switch main so this is going to get me back to the main branch so i can check that again with

187
00:20:09,960 --> 00:20:18,760
git status so it tells me that okay i'm on the main branch or i could do this using git branch

188
00:20:18,760 --> 00:20:26,920
this is also going to list the branches i have the local branches i have and and add this asterisk

189
00:20:26,920 --> 00:20:36,840
to the branch I am on. So merge. And then the next thing to do is to add two commits here. So I

190
00:20:36,840 --> 00:20:45,720
quickly do that. So again, I'll just change some file. What do we have here? Bacamole.

191
00:20:45,720 --> 00:20:57,160
so let's do just a quarter of this and then git add so again git add is going to

192
00:20:57,160 --> 00:21:04,220
tell git that i want this change to be incorporated in the next commit

193
00:21:04,220 --> 00:21:14,440
and i should do another commit so let's do

194
00:21:14,440 --> 00:21:32,260
Okay, let's change this file again.

195
00:21:32,260 --> 00:21:37,680
And now what I will have eventually is two commits that change the same file.

196
00:21:37,680 --> 00:21:45,000
One would think that it would have been better to have one commit instead.

197
00:21:45,000 --> 00:21:50,260
That sometimes is the case, but in this case I've done it this way, so I have smaller changes

198
00:21:50,260 --> 00:21:51,260
in several commits.

199
00:21:51,260 --> 00:21:52,260
What did I do?

200
00:21:52,260 --> 00:21:53,260
Let's sort here.

201
00:21:53,260 --> 00:21:54,260
No, let's...

202
00:21:54,260 --> 00:22:07,480
So let's say I don't remember actually what I did, so let me open this file again.

203
00:22:07,680 --> 00:22:10,800
I had less salt, yes.

204
00:22:13,680 --> 00:22:21,360
So I am now committing that the additional change I did to this guacamole, which is not

205
00:22:24,640 --> 00:22:28,480
that's less salt. So how does my

206
00:22:28,480 --> 00:22:35,840
commit tree look like now so i had uh so now on main

207
00:22:38,240 --> 00:22:47,840
i have these new commits uh less onion and less salt and actually you may see that i have another

208
00:22:47,840 --> 00:22:59,520
origin main branch here. So what actually that means is the reference for the remote branch

209
00:22:59,520 --> 00:23:08,440
that I have, which is actually behind on my local copy compared to my local main branch. So

210
00:23:08,440 --> 00:23:21,160
um i can show this in a more concise form using it graph so i have these two branches on main

211
00:23:21,160 --> 00:23:29,000
and then this uh sorry this still commits on main and then this modified the soup on on

212
00:23:29,000 --> 00:23:38,860
this commit on the modified soup branch sorry so let's merge that those and how

213
00:23:38,860 --> 00:23:48,340
how do i do that so i use the git merge command i specify the branch i want to merge

214
00:23:48,340 --> 00:23:58,920
so motif soup and the branch i want to merge into and if i do not specify this secondary

215
00:23:58,920 --> 00:24:04,980
month for the branch then it's going to take the branch i am on when it has the merge so

216
00:24:04,980 --> 00:24:14,020
i click that and then i'm being prompted with a commit message for the merge i'm okay with that

217
00:24:14,020 --> 00:24:22,180
will just save it and then these so these commit messages um are going to be opened in the editor

218
00:24:22,180 --> 00:24:33,620
that you have set up um for git so uh you may have nano or emacs or or vs code and that is okay so um

219
00:24:34,820 --> 00:24:43,220
um let's quickly do a gif graph again so i see that i have a new commit which is the merge

220
00:24:43,220 --> 00:24:52,820
commit of of the main branch and modif soup so what about the history on the remote repository

221
00:24:52,820 --> 00:25:00,980
so the one that i have cloned from so let's see do my changes show up there and the way i can do

222
00:25:00,980 --> 00:25:10,100
that so i can go to insights and do for example and check the network or i could just see the

223
00:25:10,100 --> 00:25:16,980
history of the commits. I can do that as well. This takes a bit of time.

224
00:25:21,220 --> 00:25:26,660
So here actually I do not have

225
00:25:29,620 --> 00:25:36,260
this new branch motif soup that I have on my local machine. So this has not been synced.

226
00:25:36,260 --> 00:25:46,900
I can also see just by looking at the code and clicking on the commits. So the most recent

227
00:25:47,780 --> 00:25:55,300
commit that I have on this branch is actually from yesterday. So the local changes I have done

228
00:25:55,300 --> 00:26:05,940
are not yet incorporated on the remote repository. Final question number eight, where are the remote

229
00:26:06,260 --> 00:26:13,300
branches. So how can I see all the branches? So if I just type the git branch command,

230
00:26:14,020 --> 00:26:20,100
this is only going to list the local branches. So local branches that I

231
00:26:22,340 --> 00:26:30,340
have defined on my local repository. In order to see the remote branches as well, I have to add

232
00:26:30,340 --> 00:26:37,620
the option dash dash all so these are not only going to show the local ones but also in red the

233
00:26:38,420 --> 00:26:44,500
the branches which are defined on the remote repository

234
00:26:46,820 --> 00:26:47,380
okay

235
00:26:51,700 --> 00:26:59,140
so there's getting to be questions to note some people have lost track of what we're doing

236
00:26:59,780 --> 00:27:06,500
so i think the most important thing here is that this is a demo for the recording mainly

237
00:27:06,500 --> 00:27:16,500
so we showed one of the paths um but it's not needed for what comes next so don't don't read

238
00:27:16,500 --> 00:27:23,460
too much so don't let this um stop you from things you've sort of seen this command line

239
00:27:23,460 --> 00:27:31,700
method and we will get more used to it later if it's the path you want to take but you definitely

240
00:27:31,700 --> 00:27:40,980
can do your work with vs code or something like that that shows other stuff um

241
00:27:40,980 --> 00:27:50,880
actually there is one thing yeah one thing so i did uh fail to show how you can actually track

242
00:27:50,880 --> 00:28:01,420
a remote branch and so the command to do that so let's say that for example i want to track

243
00:28:01,420 --> 00:28:06,600
the branch alex fruit salad so then i can do git switch

244
00:28:06,600 --> 00:28:11,240
followed by i'm sorry

245
00:28:11,240 --> 00:28:25,080
git switch followed by the option dash dash create the name of the local branch and then

246
00:28:25,080 --> 00:28:31,660
the name of the of the remote branch so in this case origin slash alex fruit salad

247
00:28:31,660 --> 00:28:41,220
and then i type that i type enter alternatively instead of using git switch create one can just

248
00:28:41,220 --> 00:28:45,380
to, I'll show you that, so

249
00:28:45,380 --> 00:28:49,400
git switch followed by the option track, and then just

250
00:28:49,400 --> 00:28:53,000
the name of the remote branch, and then it's going to take

251
00:28:53,000 --> 00:28:57,400
the same name for the local one, so that's

252
00:28:58,060 --> 00:29:00,280
equivalent.

253
00:29:02,140 --> 00:29:05,140
Okay then, but we definitely need a break now, right?

254
00:29:06,080 --> 00:29:09,420
Yeah, so a lot of what Dana

255
00:29:09,420 --> 00:29:16,360
of showed was sort of more advanced stuff that's not in the lesson so don't worry it's not needed

256
00:29:16,360 --> 00:29:24,200
for the first day-to-day work and the stuff that you can pick up later over time there is one

257
00:29:24,200 --> 00:29:30,240
question about what head means it's something that we've been seeing lately so the name head

258
00:29:30,240 --> 00:29:40,240
comes from like the recording head of a magnetic tape or something like that and basically it's

259
00:29:40,240 --> 00:29:50,000
where the changes are being made so whatever your head branches that is where new commits would go

260
00:29:50,000 --> 00:29:53,680
and what will be modified when you run the git commit or git merge command

261
00:29:53,680 --> 00:29:58,640
but yeah let's go to a break

262
00:29:58,640 --> 00:30:00,640
we can add more into the

263
00:30:00,640 --> 00:30:01,840
notes there

264
00:30:01,840 --> 00:30:04,820
so with a 10 minute break we're back

265
00:30:04,820 --> 00:30:06,820
at 9 minutes

266
00:30:06,820 --> 00:30:07,420
past the hour

267
00:30:07,420 --> 00:30:10,380
so take your break

268
00:30:10,380 --> 00:30:11,900
keep the questions coming in

269
00:30:11,900 --> 00:30:13,540
and let's

270
00:30:13,540 --> 00:30:16,700
we'll talk then

271
00:30:16,700 --> 00:30:18,120
okay

272
00:30:18,120 --> 00:30:19,960
see you after the break

273
00:30:21,000 --> 00:30:27,000
hello we are back um

274
00:30:27,000 --> 00:30:41,000
um there we're going to go on now to the next phase of the lesson but yeah that was quite a

275
00:30:41,000 --> 00:30:47,760
challenge what we just did there um seeing everything from the command line so if you

276
00:30:47,760 --> 00:30:57,980
are sort of familiar with the command line then maybe you saw the general idea of what's there

277
00:30:57,980 --> 00:31:03,880
but still even i if i see someone typing a bunch of stuff on the command line unless i already know

278
00:31:03,880 --> 00:31:09,880
what's going on there's not much chance of following it it's always like uh okay here's a

279
00:31:09,880 --> 00:31:16,480
general idea and then i need to go find the written material and understand it later so that's

280
00:31:16,480 --> 00:31:23,940
basically what you can or how you should interpret the previous demonstration of the exercise so

281
00:31:23,940 --> 00:31:31,680
it's what you can like it's how we would be doing it knowing things and now it will be recorded

282
00:31:31,680 --> 00:31:40,640
for the video so you can review later but it's not something like if you didn't follow everything

283
00:31:40,640 --> 00:31:49,680
there don't worry i mean that's that's normal it's uh um um yeah it will take time that's why

284
00:31:49,680 --> 00:31:57,800
we have the different tracks for uh vs code r studio and whatever so over time slowly as you

285
00:31:57,800 --> 00:32:07,880
do things um follow up and um learn more over time and with that we're going to go on to inspecting

286
00:32:07,880 --> 00:32:15,640
history where i believe we so it doesn't depend on anything we did now and you start by cloning

287
00:32:15,640 --> 00:32:22,120
a new repository so no matter how weird things have gotten now it's okay it doesn't affect

288
00:32:22,120 --> 00:32:29,240
things later and in fact over the next few days of the workshop we do similar things to today

289
00:32:29,240 --> 00:32:34,920
again from different angles and you will have more time to see it over and over again and we'll

290
00:32:34,920 --> 00:32:41,460
slowly pick things up so that's just another reason not to worry so with that i'm going to

291
00:32:41,460 --> 00:32:48,440
swap to [name]'s screen there we go and i will just add that if you if you are interested in

292
00:32:48,440 --> 00:32:50,340
command line, you can go back to the lesson

293
00:32:50,340 --> 00:32:52,400
yesterday and inspect the

294
00:32:52,400 --> 00:32:54,060
tabs under the command line. Then

295
00:32:54,060 --> 00:32:56,280
we'll get more insight into

296
00:32:56,280 --> 00:32:58,480
these commands.

297
00:32:58,800 --> 00:33:00,460
But it's okay

298
00:33:00,460 --> 00:33:02,320
to do things in VS Code

299
00:33:02,320 --> 00:33:03,660
or on GitHub.

300
00:33:04,400 --> 00:33:06,600
But yeah, inspecting history.

301
00:33:07,480 --> 00:33:08,260
So what we

302
00:33:08,260 --> 00:33:10,640
actually want to do

303
00:33:10,640 --> 00:33:12,020
when we

304
00:33:12,020 --> 00:33:14,460
or when do we want to inspect the history

305
00:33:14,460 --> 00:33:15,460
of a

306
00:33:15,460 --> 00:33:17,160
repository?

307
00:33:18,440 --> 00:33:23,700
Sorry, I was answering your question.

308
00:33:23,700 --> 00:33:30,420
Sorry, so when do we actually want to inspect the history of a repository?

309
00:33:31,580 --> 00:33:31,660
Yeah.

310
00:33:32,060 --> 00:33:33,820
So maybe I'll start.

311
00:33:34,140 --> 00:33:39,040
So for example, if I discover a new repository,

312
00:33:39,440 --> 00:33:42,800
then the first thing I'll do is to check,

313
00:33:42,920 --> 00:33:45,240
okay, what's the current state of the repository?

314
00:33:45,240 --> 00:33:48,720
and then look at the history of those commits.

315
00:33:48,720 --> 00:33:52,500
And we've seen some of that yesterday by, well,

316
00:33:53,020 --> 00:33:56,200
clicking on the clock on the GitHub repo.

317
00:33:56,620 --> 00:34:01,100
So that is helpful to get on some insight

318
00:34:01,100 --> 00:34:03,920
on what has been done for that repository.

319
00:34:06,840 --> 00:34:07,560
Yeah.

320
00:34:08,560 --> 00:34:09,280
Yeah.

321
00:34:09,700 --> 00:34:12,840
So for me, I guess there's two levels.

322
00:34:12,840 --> 00:34:24,840
One is quickly seeing what I've done lately in order to know where I am, what I need to do next, and so on, or to see what I might have just messed up.

323
00:34:26,600 --> 00:34:34,000
For a deeper history inspection, at the end of this lesson, I don't know if we'll actually do it as a demo.

324
00:34:34,900 --> 00:34:41,880
You can try it as an exercise if you want, but there's a way to search all of history to figure out where a certain bug was introduced.

325
00:34:41,880 --> 00:35:00,000
So if you find something that's broken and you don't know where it's broken or how to possibly fix it, using these kinds of things can point you exactly, okay, this is where the problem started, and then you can more easily solve it.

326
00:35:00,000 --> 00:35:07,820
yes bug hunting that's a really good case for actually inspecting the history and this is what

327
00:35:07,820 --> 00:35:17,260
one of the exercises that we'll show today so as usual I mean you can choose different paths

328
00:35:17,260 --> 00:35:25,900
and some things can be done on github some can be done on vs code by far the command line is the

329
00:35:25,900 --> 00:35:34,220
most powerful way to do that it's also the hardest one to understand and get used to so i think it's

330
00:35:34,220 --> 00:35:43,460
not wrong to actually combine different paths for inspecting the history and and yeah choose

331
00:35:43,460 --> 00:35:50,300
choose the one which is most usable for what you are trying to achieve but we'll introduce in the

332
00:35:50,300 --> 00:35:55,220
following some tools that you might find useful.

333
00:35:55,220 --> 00:36:00,220
And again, I mean, this depends on what you actually want

334
00:36:00,520 --> 00:36:04,540
to find out about a certain project.

335
00:36:04,540 --> 00:36:09,180
So let's start by looking at this repository.

336
00:36:09,180 --> 00:36:12,860
So remote repository on GitHub.

337
00:36:13,860 --> 00:36:20,120
And so I,

338
00:36:20,300 --> 00:36:28,840
I'll just quickly open it here so this is a very large repository it has like oh I don't know I

339
00:36:28,840 --> 00:36:37,100
think it has oh 7,943 commits so that's that's really a very big one so it can be actually

340
00:36:37,100 --> 00:36:47,300
quite overwhelming to to look through through this whole repository and you might not even

341
00:36:47,300 --> 00:36:57,380
uh want to do that but i'm going to let me open this particular link here which is going to

342
00:36:58,500 --> 00:37:07,780
show a quite nice graphical way of seeing the repository so what it does it's actually looking

343
00:37:07,780 --> 00:37:17,060
at one particular file the readme rst file and show the history of this file over time and this

344
00:37:17,060 --> 00:37:24,900
is maybe not so easy to see on this black background, but it starts from the latest

345
00:37:25,700 --> 00:37:32,340
change to this file done by a certain user and if I can use, for example, the left and right arrows

346
00:37:32,340 --> 00:37:45,300
to go back in time and see snapshots of this file or changes in these files introduced by different

347
00:37:47,060 --> 00:37:54,900
uh by different developers and this tool actually works not only with this repository it can

348
00:37:55,700 --> 00:38:00,820
it works with any repository so you just need to change um the

349
00:38:02,660 --> 00:38:12,340
the repository name with with yours so uh so uh where the so change uh let me show here is that

350
00:38:12,340 --> 00:38:19,780
so change the location of the repository and the particular file that you are interested to

351
00:38:19,780 --> 00:38:29,780
look in so it's one visual way to show a repository it's uh it's well not uh not

352
00:38:29,780 --> 00:38:35,620
necessarily very useful when you actually try to find a bug but if you want to present a project to

353
00:38:36,420 --> 00:38:45,140
to a person that may be useful. But what other tools are there to actually help us find

354
00:38:46,260 --> 00:38:55,220
bugs or new features, new functions that have been introduced in a code? So one of them is

355
00:38:55,220 --> 00:39:06,020
actually git grep, which is similar to the grep command that maybe some of you are familiar with,

356
00:39:06,020 --> 00:39:13,060
and it's typically used with some argument. It can be plain text or it can be some expression.

357
00:39:13,060 --> 00:39:17,220
So this is useful, for example, let's say you know that there is a function

358
00:39:17,220 --> 00:39:23,300
somewhere in the code but you don't know where. You want to find it and then you can do some git

359
00:39:23,300 --> 00:39:39,860
It can be used with some longer text, that's possible as well, it can also be used with

360
00:39:39,860 --> 00:39:43,700
different arguments for this command.

361
00:39:43,700 --> 00:39:52,920
This simply means that ignore the caps for the string that I'm trying to find.

362
00:39:53,300 --> 00:39:56,840
Again, I mean, if you know that there are a bunch of lines,

363
00:39:56,840 --> 00:40:00,680
PIXME, in the code where you or someone else

364
00:40:00,680 --> 00:40:05,500
has introduced the code in order to help you remember

365
00:40:05,500 --> 00:40:07,580
that there are some things you need to improve,

366
00:40:07,580 --> 00:40:10,580
maybe some code documentation,

367
00:40:13,200 --> 00:40:17,420
that in-code documentation that you should add,

368
00:40:17,420 --> 00:40:22,240
then you can use this command to find that.

369
00:40:22,240 --> 00:40:23,120
So,

370
00:40:23,300 --> 00:40:31,620
Git grab, what it will do is going to search for the current state of the repository, right?

371
00:40:31,620 --> 00:40:40,980
So how it will check the content of the files in their present state, which sometimes is

372
00:40:40,980 --> 00:40:43,780
not what you want.

373
00:40:43,780 --> 00:40:50,240
You want to go back in time and see, for example, you knew there was a function or a piece of

374
00:40:50,240 --> 00:40:57,680
text that has simply disappeared from the code and you want to know who has one that has

375
00:40:59,120 --> 00:41:07,920
gotten removed maybe the person that has removed that so the way you can do that

376
00:41:08,560 --> 00:41:19,600
is with the git log command but by using this option minus capital s which is this so-called

377
00:41:19,600 --> 00:41:28,480
pickaxe option and followed by the text that you try to find and this is again this is advanced

378
00:41:28,480 --> 00:41:38,560
it's useful if you know what you are looking for in the code but yeah it's

379
00:41:38,560 --> 00:41:45,840
It's not, maybe not so easy to remember.

380
00:41:46,620 --> 00:41:51,940
So you can, let's say you did find a bug

381
00:41:51,940 --> 00:41:53,760
in some version of the code.

382
00:41:54,800 --> 00:41:59,820
You can, or you just want to inspect a certain commit

383
00:41:59,820 --> 00:42:01,780
that your collaborator has done.

384
00:42:01,880 --> 00:42:05,300
You want to see what are the changes introduced

385
00:42:05,300 --> 00:42:07,060
with that commit.

386
00:42:07,060 --> 00:42:14,880
In the command line, you can use the git show command, followed by the hash of that commit.

387
00:42:14,880 --> 00:42:36,640
You can also do this, for example, on GitHub by having the link of the repository, the URL of the repository, and then followed by this text commit, and then the hash of that particular commit.

388
00:42:36,640 --> 00:42:42,160
So that is going to give you some information on what has been committed.

389
00:42:42,400 --> 00:42:47,700
So I'm actually going to just open this link.

390
00:42:47,840 --> 00:42:52,920
So again, this shows all the changes introduced in this commit with this hash.

391
00:42:53,520 --> 00:43:03,600
And one thing which is quite interesting is that I can click on this icon, browse files,

392
00:43:03,600 --> 00:43:06,660
and then I can see the state

393
00:43:06,660 --> 00:43:09,280
I can see all the files in this repository

394
00:43:09,280 --> 00:43:12,820
at that point in time

395
00:43:12,820 --> 00:43:15,900
so for S they look like

396
00:43:15,900 --> 00:43:19,080
for the commit 75 and so on

397
00:43:19,080 --> 00:43:22,220
so how they looked actually 5 years ago

398
00:43:22,220 --> 00:43:24,720
so that's quite

399
00:43:24,720 --> 00:43:28,540
a nice feature of GitHub

400
00:43:28,540 --> 00:43:31,400
and then sure I can do this on the command line

401
00:43:31,400 --> 00:43:36,540
But if I don't like to work on the command line, then I can view that on GitHub.

402
00:43:38,820 --> 00:43:48,060
So we talked a little bit about git blame and git annotate yesterday.

403
00:43:49,260 --> 00:43:53,360
And this is very nice to see.

404
00:43:53,360 --> 00:44:01,280
So this is very nice to use if you want to track all the changes that have happened to a certain file.

405
00:44:01,400 --> 00:44:10,980
So let's assume that I want to look at this convert matrix Python script from this NetworkX repository.

406
00:44:11,360 --> 00:44:13,900
So let's just open this on GitHub.

407
00:44:15,000 --> 00:44:21,860
So what we want to see, how has this file changed over time?

408
00:44:21,860 --> 00:44:29,860
So then line by line, I'm going to see the person that has last modified a certain line.

409
00:44:29,860 --> 00:44:48,620
There are really lots of changes to this particular file, some older, some newer.

410
00:44:48,620 --> 00:44:56,660
One really nice feature of GitHub that does not have a counterpart in either VS Code or

411
00:44:56,660 --> 00:45:08,820
command line is this icon here. So this is called blame prior to change. It's actually very hard to

412
00:45:08,820 --> 00:45:17,380
understand what it is just from this name, but what it really means is give me the commit that

413
00:45:17,380 --> 00:45:22,380
that is prior to the one that modified this line.

414
00:45:23,700 --> 00:45:27,640
So we can see from here that this particular line

415
00:45:27,640 --> 00:45:32,640
has been modified in the commit.

416
00:45:34,820 --> 00:45:35,660
Where is the hash?

417
00:45:35,660 --> 00:45:36,500
I don't see the hash,

418
00:45:36,500 --> 00:45:39,940
but it has been modified February 22nd.

419
00:45:39,940 --> 00:45:43,680
But maybe I find out some way

420
00:45:43,680 --> 00:45:46,380
that this commit actually introduced the bug

421
00:45:46,380 --> 00:45:48,860
and this bug is in this particular line.

422
00:45:48,860 --> 00:45:51,160
I am not interested in this commit.

423
00:45:51,160 --> 00:45:55,340
I'm interested in the commit, which was before this one,

424
00:45:55,340 --> 00:45:56,660
because then I know that, okay,

425
00:45:56,660 --> 00:45:58,920
that version may actually work.

426
00:45:58,920 --> 00:46:01,060
So I want to start from there.

427
00:46:01,060 --> 00:46:05,140
And the one way I can find that information

428
00:46:05,140 --> 00:46:06,600
on GitHub is with this.

429
00:46:06,600 --> 00:46:08,000
So if I click on this,

430
00:46:08,000 --> 00:46:12,200
I get to the commit prior to this one.

431
00:46:12,200 --> 00:46:14,760
This is rendered very funnily.

432
00:46:14,760 --> 00:46:24,000
Yeah, sorry for that. So then, yeah, it's very weird. So I think it's because the window is so

433
00:46:24,000 --> 00:46:30,500
narrow. So this is the hash of that commit, the prior commit that introduced that change. And

434
00:46:30,500 --> 00:46:38,860
then again, I can investigate the files in this commit. In this case, well, it shows the

435
00:46:38,860 --> 00:46:41,520
biometrics, but I can also

436
00:46:41,520 --> 00:46:43,160
browse the

437
00:46:43,160 --> 00:46:44,240
files if

438
00:46:44,240 --> 00:46:45,480
I

439
00:46:45,480 --> 00:46:48,160
go to

440
00:46:48,160 --> 00:46:51,000
I could browse all the files

441
00:46:51,000 --> 00:46:52,120
if I go to the

442
00:46:52,120 --> 00:46:54,620
main one. So

443
00:46:54,620 --> 00:46:56,500
am I going too slow?

444
00:46:57,640 --> 00:46:59,000
Yeah, should we get to the exercise

445
00:46:59,000 --> 00:47:01,140
soon? And then we'll have some

446
00:47:01,140 --> 00:47:03,300
time before lunch to go over it.

447
00:47:03,300 --> 00:47:05,320
So what

448
00:47:05,320 --> 00:47:07,100
would we want you

449
00:47:07,100 --> 00:47:08,660
to do in the exercise?

450
00:47:08,860 --> 00:47:23,660
So I want you to explore some of these so-called archaeology commands on this NetworkX repository.

451
00:47:24,700 --> 00:47:36,300
And this is where you find it. And let's see. And then what we would like you to try

452
00:47:36,300 --> 00:47:46,060
is to find a certain line in the source code that contains this text, find out where this

453
00:47:46,060 --> 00:47:54,220
line was last modified, and inspect that commit, and try to create a branch which points to that

454
00:47:54,220 --> 00:48:04,380
commit and see how you can bring the code right before that commit. And this

455
00:48:07,580 --> 00:48:13,020
may not be possible to do depending on the path that you are choosing but it's okay to skip.

456
00:48:13,740 --> 00:48:23,900
So give it a try using your preferred path and then let's see should we do this for 20 minutes?

457
00:48:24,220 --> 00:48:32,780
yes that's what it says so we'll return at uh 48 past the hour

458
00:48:32,780 --> 00:48:49,320
okay good so yeah um do what you can uh and

459
00:48:49,320 --> 00:48:57,860
and whatever we do after lunch doesn't depend on this so if you can't do everything that's okay

460
00:48:57,860 --> 00:49:06,480
this is more of experimentation so experiment with whatever is interesting to you okay bye

461
00:49:08,000 --> 00:49:10,300
Thank you.

462
00:49:10,320 --> 00:49:11,460
Okay, welcome back, everyone.

463
00:49:11,820 --> 00:49:13,060
Hello. Yes.

464
00:49:16,060 --> 00:49:25,860
So now if we look at the notes, there weren't too many questions relative to before.

465
00:49:26,760 --> 00:49:31,340
So that's hopefully a good sign.

466
00:49:31,340 --> 00:49:40,440
Hopefully a sign of things were going well instead of there being many problems.

467
00:49:41,080 --> 00:49:51,600
If you would like us to do something, you can write here which of the steps you would like to see demos of.

468
00:49:52,260 --> 00:49:59,820
But there's not a clear question which one we should try to follow.

469
00:50:01,340 --> 00:50:08,300
it did relatively good demos before anyway and i don't know if we can do better than that now um

470
00:50:10,940 --> 00:50:20,060
one option is to do the advanced git bisect exercise to show um do you think we have time

471
00:50:20,060 --> 00:50:26,060
to do that so i think yeah we can definitely introduce it and

472
00:50:26,060 --> 00:50:32,680
And, yeah, sorry, I was just writing here.

473
00:50:32,900 --> 00:50:34,380
Yeah, we can definitely introduce it.

474
00:50:35,620 --> 00:50:35,800
Yeah.

475
00:50:35,800 --> 00:50:36,160
So.

476
00:50:39,880 --> 00:50:42,820
Or is there any general discussion we should do?

477
00:50:44,600 --> 00:50:46,140
So, no, not before lunch.

478
00:50:46,260 --> 00:50:49,020
I think, yeah, let's show `git bisect`.

479
00:50:49,200 --> 00:50:55,600
And then if by the end of this, people, well, if we still have time and people want us to demo something,

480
00:50:55,600 --> 00:51:03,280
then we can do that. I think, yeah, just some words on git parsing. So when is this actually

481
00:51:03,280 --> 00:51:16,960
useful? So it's useful if you have a code that you can actually test and decide whether it's good or

482
00:51:16,960 --> 00:51:27,040
bad. So you have some tests that you are running and then it tells you that

483
00:51:27,040 --> 00:51:33,440
now there is a bug in this code you need to revise it or the test pass and then

484
00:51:34,480 --> 00:51:44,000
you can deem that code as a working code. So this is of course not always possible if you have a

485
00:51:44,000 --> 00:51:52,800
repository that may just be a collection of files so it depends i don't know

486
00:52:00,080 --> 00:52:09,360
so the way to use this command git bisect is okay you go to the github repository

487
00:52:09,360 --> 00:52:18,360
uh which is well the local copy of your uh github repository so your local uh local repo

488
00:52:18,360 --> 00:52:30,740
and you do git bisect start so that this triggers uh this uh triggers um a certain algorithm with

489
00:52:30,740 --> 00:52:32,320
with git. So

490
00:52:32,320 --> 00:52:34,900
in the following

491
00:52:34,900 --> 00:52:37,120
what you need to do is to find

492
00:52:37,120 --> 00:52:39,060
a good and a

493
00:52:39,060 --> 00:52:39,680
bad commit.

494
00:52:40,480 --> 00:52:42,780
So you specify git

495
00:52:42,780 --> 00:52:45,320
bisect good followed by

496
00:52:45,320 --> 00:52:46,440
the hash

497
00:52:46,440 --> 00:52:48,900
of this

498
00:52:48,900 --> 00:52:49,600
good commit.

499
00:52:50,420 --> 00:52:52,860
And you also need to specify a bad

500
00:52:52,860 --> 00:52:54,360
commit. So a commit that

501
00:52:54,360 --> 00:52:57,000
has some error

502
00:52:57,000 --> 00:52:58,020
or

503
00:52:58,020 --> 00:53:05,880
or anything so git bisect bad followed by that hash or it can be the name of the branch if it's

504
00:53:05,880 --> 00:53:13,060
the latest commit on that branch once you have specified a good and a bad commit the order

505
00:53:13,060 --> 00:53:20,700
doesn't matter so you have you need a good and bad commit then uh then you well automatically

506
00:53:20,700 --> 00:53:31,620
Git is going to run this bisect algorithm and take you to a commit, which is between

507
00:53:31,620 --> 00:53:33,780
this good and bad commit.

508
00:53:33,780 --> 00:53:38,700
And then what you need to do is deem that, okay, this commit that I am on, so you can

509
00:53:38,700 --> 00:53:44,820
check that with Git status, for example, which commit you are on, is that a good or a bad

510
00:53:44,820 --> 00:53:45,820
commit?

511
00:53:45,820 --> 00:53:52,600
do that by running some tests and and then you either say again keep bisect

512
00:53:52,600 --> 00:53:59,560
good or bad and then once you do that bisect algorithm is going to run again

513
00:53:59,560 --> 00:54:08,340
automatically and then you are going to a new commit and this this cycle

514
00:54:08,340 --> 00:54:18,580
continues until you find the commit that broke your code so there is an optional

515
00:54:18,580 --> 00:54:26,440
exercise that we are not actually going to do but you may try to if you are

516
00:54:26,440 --> 00:54:32,060
interested in in the git bisect then you may try to do this on your own so this is

517
00:54:32,060 --> 00:54:40,860
simply a python script that calculates pi and at some point there is an error which has been

518
00:54:40,860 --> 00:54:52,700
introduced and your task is to use this command to find where this code has been broken. And there

519
00:54:52,700 --> 00:55:01,020
are some hints on how you can achieve this. So again this is useful with repositories

520
00:55:02,060 --> 00:55:09,220
used for co-development. And when you have a clear way of identifying whether your commit

521
00:55:09,220 --> 00:55:17,860
is a working one or not. [name], anything else that we should say about Bisect?

522
00:55:21,700 --> 00:55:25,360
Not really. How many times have you used Bisect before?

523
00:55:25,360 --> 00:55:35,920
oh i i think i might have used it once but i don't remember what it was for so

524
00:55:35,920 --> 00:55:44,020
yeah so i think it's been a very rare thing it is actually better to have tests

525
00:55:44,020 --> 00:55:53,380
along with your code and we'll discuss testing during next week so that you don't even get to

526
00:55:53,380 --> 00:55:54,440
push your code

527
00:55:54,440 --> 00:55:56,160
before

528
00:55:56,160 --> 00:55:59,460
you make sure that it is

529
00:55:59,460 --> 00:56:01,060
working as expected.

530
00:56:02,380 --> 00:56:02,660
But

531
00:56:02,660 --> 00:56:05,700
I do use

532
00:56:05,700 --> 00:56:07,020
it every once in a while, but it's

533
00:56:07,020 --> 00:56:09,380
not very often.

534
00:56:10,780 --> 00:56:10,960
Yeah.

535
00:56:13,080 --> 00:56:15,500
Okay, so what can we expect after

536
00:56:15,500 --> 00:56:17,480
lunch? I believe

537
00:56:17,480 --> 00:56:19,100
that is the

538
00:56:19,100 --> 00:56:21,480
preparing your own

539
00:56:21,480 --> 00:56:26,860
so after lunch we are going to do the reverse of what we've been doing

540
00:56:26,860 --> 00:56:30,620
in the morning so instead of cloning our repository

541
00:56:30,620 --> 00:56:35,220
from github to our local machine

542
00:56:35,220 --> 00:56:39,200
we'll take what we have on our local machine and put it on github

543
00:56:39,200 --> 00:56:43,500
so that's what's waiting

544
00:56:43,500 --> 00:56:47,440
for us after lunch and then we are also going

545
00:56:47,440 --> 00:56:51,220
to discuss some best practices or guidelines

546
00:56:51,220 --> 00:56:53,640
on how to use Git.

547
00:56:53,840 --> 00:56:56,140
So we'll have a discussion around that.

548
00:56:57,380 --> 00:56:57,540
Yeah.

549
00:57:00,400 --> 00:57:01,720
Okay, great.

550
00:57:01,980 --> 00:57:04,320
So let's go.

551
00:57:04,780 --> 00:57:10,120
See you after lunch in about an hour.

552
00:57:10,740 --> 00:57:11,280
Bye.

553
00:57:11,280 --> 00:57:11,500
See you.

554
00:57:14,000 --> 00:57:23,800
hello welcome back everyone i hope you had a good break so now [name] so we

555
00:57:23,800 --> 00:57:29,600
watch that's uh that's good what next me too so uh

556
00:57:29,600 --> 00:57:47,540
And so in the following hour, what we are going to do is to take a local directory we have on our computer, transform it into a GitHub repository, a Git repository, sorry.

557
00:57:47,880 --> 00:57:53,880
And then we are going to share it online on GitHub in this case.

558
00:57:53,880 --> 00:58:04,440
So we are kind of doing the reverse of what we did in the morning when we cloned something existing on the cloud and bringing it to our local computer.

559
00:58:05,300 --> 00:58:09,980
So we do it backwards.

560
00:58:10,540 --> 00:58:21,680
So this is basically the starting point where if someone's already doing something, they use the instructions of this lesson to make it Git and to make it where other people can see it.

561
00:58:21,680 --> 00:58:43,620
Yeah, exactly. So let's imagine you've been working on your project for a while and at some point in time, you realize, oh, I should actually version control this and I should share it with my colleagues so that they can test it, run it, provide feedback, see how we get this forward.

562
00:58:43,620 --> 00:58:53,460
So that's a good reason to version control it and share it with other people.

563
00:58:53,660 --> 00:58:58,480
And then actually sharing it does not necessarily mean with others.

564
00:58:58,680 --> 00:59:03,660
It's just having like an additional copy of your repository on a cloud platform.

565
00:59:03,820 --> 00:59:09,520
So if something happens to your computer, you have a backup for you.

566
00:59:09,520 --> 00:59:19,420
And once you are ready to share it with others as well, then you can add members to your GitHub project and evolve it from there.

567
00:59:19,820 --> 00:59:24,060
So, but yeah, sharing it with your future self.

568
00:59:25,020 --> 00:59:29,840
So you can put it on GitHub, but it's a private repository.

569
00:59:30,120 --> 00:59:35,340
So it's only serving as a backup and you're not really, you're not sharing it.

570
00:59:35,660 --> 00:59:35,780
Okay.

571
00:59:35,920 --> 00:59:36,400
Exactly.

572
00:59:36,400 --> 00:59:39,720
So you can choose, do I want this repository to be private?

573
00:59:40,040 --> 00:59:40,980
Do I want it public?

574
00:59:42,120 --> 00:59:44,640
So there are some restrictions,

575
00:59:44,820 --> 00:59:47,980
how many private repositories you can have

576
00:59:47,980 --> 00:59:49,460
and how big they can be.

577
00:59:50,120 --> 00:59:53,760
But for small ones, it's really no problem.

578
00:59:54,120 --> 00:59:56,980
You can have it private.

579
00:59:57,080 --> 00:59:59,940
And maybe it feels safer to start that way.

580
01:00:00,000 --> 01:00:00,920
And once you're comfortable,

581
01:00:01,400 --> 01:00:05,320
then you can open it up to the public.

582
01:00:06,200 --> 01:00:15,960
yeah okay but so how do we actually do this so uh i guess the starting point is you have

583
01:00:15,960 --> 01:00:23,000
some files in a directory and yeah you know where the directory is exactly so that's uh that's

584
01:00:23,000 --> 01:00:30,280
important uh so you uh you have a collection of files under one directory you may also have sub

585
01:00:30,280 --> 01:00:37,400
directories in that directory but this top directory you want to that contains all the

586
01:00:37,400 --> 01:00:45,320
needed files you initialize that basically as a git repository and then you may start tracking

587
01:00:45,320 --> 01:00:55,080
different versions of your files you have different commits and at some point while you um you uh

588
01:00:55,080 --> 01:01:03,480
push this to GitHub or GitLab or some other cloud platform that has version control.

589
01:01:06,200 --> 01:01:12,440
The point of the exercise for this hour is to select a directory

590
01:01:13,480 --> 01:01:19,480
that you have or create a new directory. You can call it My Project or call it something else.

591
01:01:19,480 --> 01:01:26,200
create some new files in it or copy some files that are not so sensitive that you feel comfortable

592
01:01:26,200 --> 01:01:32,680
later on to putting on GitHub. And that is going to be your GitHub project, right?

593
01:01:33,240 --> 01:01:39,560
And so that is what the project that you are going to transform into a GitHub

594
01:01:41,720 --> 01:01:46,600
project. So in order to transform it actually into a Git repository,

595
01:01:46,600 --> 01:01:51,260
you have several paths to do that

596
01:01:51,260 --> 01:01:54,080
you can either use the command line if you're comfortable with that

597
01:01:54,080 --> 01:01:57,400
or you can use VS Code or GitHub

598
01:01:57,400 --> 01:01:59,800
it's really up to you

599
01:01:59,800 --> 01:02:04,520
but what we want you to do is to transform it into a Git repository

600
01:02:04,520 --> 01:02:09,280
and then move this into GitHub

601
01:02:09,280 --> 01:02:13,820
or GitLab if you actually prefer to do that

602
01:02:13,820 --> 01:02:16,240
although we are not showing that in the solutions

603
01:02:16,240 --> 01:02:20,120
so anything else that

604
01:02:20,120 --> 01:02:24,040
that we should hint

605
01:02:24,040 --> 01:02:26,040
when it comes to this

606
01:02:26,040 --> 01:02:31,860
yeah so we want to give a lot of time for this

607
01:02:31,860 --> 01:02:33,140
because it will be a while

608
01:02:33,140 --> 01:02:36,980
is there anything we should

609
01:02:36,980 --> 01:02:41,220
demonstrate before

610
01:02:41,220 --> 01:02:44,920
yeah should I demonstrate

611
01:02:44,920 --> 01:02:46,900
maybe how to actually do this on

612
01:02:46,900 --> 01:02:47,400
maybe

613
01:02:47,400 --> 01:02:49,540
I don't know VS Code

614
01:02:49,540 --> 01:02:52,560
maybe you could do the

615
01:02:52,560 --> 01:02:55,080
starts of it and then we give some time

616
01:02:55,080 --> 01:02:57,280
and then you finish the rest

617
01:02:57,280 --> 01:03:01,200
okay then I will start

618
01:03:01,200 --> 01:03:03,260
and you should stop me

619
01:03:03,260 --> 01:03:04,540
when you think I've gone

620
01:03:04,540 --> 01:03:09,520
I've shown enough to get people started

621
01:03:09,520 --> 01:03:11,120
so I have

622
01:03:11,120 --> 01:03:14,680
a VS Code, open here.

623
01:03:14,680 --> 01:03:20,300
What I need to figure out now is where is

624
01:03:20,300 --> 01:03:25,420
the directory that I want to turn in a Git repository.

625
01:03:25,420 --> 01:03:29,360
First, I need to make it a Git repository on my local machine.

626
01:03:29,360 --> 01:03:34,560
I'm going to go to this Explorer bar and then open file.

627
01:03:34,560 --> 01:03:38,200
Actually, I will do install from the top menu, which you don't see.

628
01:03:38,200 --> 01:03:44,780
So I'm going to click on File, Open Folder, and I'm going to go to CRDate2.

629
01:03:45,640 --> 01:03:49,460
And I have one directory there, which is called My Project.

630
01:03:50,300 --> 01:03:56,340
And it's not a Git repository, so it only contains some files.

631
01:03:56,340 --> 01:04:02,580
So I will select that as a directory to open.

632
01:04:02,920 --> 01:04:03,140
So yeah.

633
01:04:03,980 --> 01:04:04,700
Sorry, say again.

634
01:04:05,400 --> 01:04:07,660
You made this in advance to get ready.

635
01:04:08,200 --> 01:04:38,180
Yeah, I meant that in advance, but so what it is, is one directory, which I have on my local machine, which contains two files, and those files that it contains are called myscript.py, so it's some Python script, and there is a file which is called license, and VS Code is, yeah, whenever you have

636
01:04:38,200 --> 01:04:43,800
a certain file name or extension is going to show this nice icon so that you know what programming

637
01:04:43,800 --> 01:04:50,360
language it's in but in all honesty these files are empty so don't think anything fancy it's just

638
01:04:50,360 --> 01:04:58,440
a demo but um but now so i have these two files under the directory called my project

639
01:04:59,560 --> 01:05:06,200
and uh what i and this is not a repository yet i'm i have not version controlled these

640
01:05:06,200 --> 01:05:14,120
files, but I plan to do that in the following. So then I want to transform this into a Git

641
01:05:17,000 --> 01:05:31,640
repository. And the way I do that is I go to source control. So these commit lines of commits

642
01:05:31,640 --> 01:05:33,640
which merge or

643
01:05:33,640 --> 01:05:35,740
diverge. And then I

644
01:05:35,740 --> 01:05:37,680
have the option to initialize this

645
01:05:37,680 --> 01:05:39,780
repository. So initialize repository

646
01:05:39,780 --> 01:05:41,420
means transform

647
01:05:41,420 --> 01:05:43,240
the existing directory

648
01:05:43,240 --> 01:05:45,480
into a Git repository.

649
01:05:46,040 --> 01:05:48,440
Okay. So from the command line,

650
01:05:48,580 --> 01:05:50,100
that's the equivalent of

651
01:05:50,100 --> 01:05:52,100
Git init.

652
01:05:52,100 --> 01:05:52,560
Yes.

653
01:05:54,200 --> 01:05:56,320
So then what

654
01:05:56,320 --> 01:05:58,340
I have, I'm going to open, close this.

655
01:05:58,460 --> 01:05:59,900
It's distracting.

656
01:05:59,900 --> 01:06:07,000
Then I have this window here,

657
01:06:07,000 --> 01:06:12,620
which shows me that I have two files license myscript.py,

658
01:06:12,620 --> 01:06:13,860
which are untracked.

659
01:06:13,860 --> 01:06:17,300
That means that I initialized this Git repository,

660
01:06:17,300 --> 01:06:20,840
but I am yet to do the very first commit.

661
01:06:20,840 --> 01:06:23,680
These files are yet untracked.

662
01:06:23,680 --> 01:06:27,420
Then what I should do is I should tell Git that,

663
01:06:27,420 --> 01:06:30,360
Okay, start keeping track of these files.

664
01:06:30,360 --> 01:06:33,800
So it's similar in the command line with git add

665
01:06:33,800 --> 01:06:35,080
and the file name.

666
01:06:35,080 --> 01:06:37,440
And then I click on these pluses,

667
01:06:37,440 --> 01:06:41,300
which means that it's going to stage these changes.

668
01:06:42,280 --> 01:06:46,300
So then these are staged, which shows as A,

669
01:06:46,300 --> 01:06:48,580
like added to the index, in other words,

670
01:06:48,580 --> 01:06:51,480
but just think of it as staged and ready,

671
01:06:51,480 --> 01:06:54,300
ready to be included in the next commit.

672
01:06:54,300 --> 01:06:58,140
And then I can now commit this modification.

673
01:06:58,140 --> 01:07:00,200
So the inclusion of these two files

674
01:07:00,200 --> 01:07:04,820
in whatever I am tracking with Git

675
01:07:04,820 --> 01:07:06,860
into my very first commit.

676
01:07:06,860 --> 01:07:11,860
So I'm going to give it a commit message here.

677
01:07:13,680 --> 01:07:18,680
Start tracking my project.

678
01:07:19,340 --> 01:07:24,240
And this is the equivalent of `git commit -m [message]`.

679
01:07:24,240 --> 01:07:25,480
start tracking my project.

680
01:07:25,480 --> 01:07:30,480
So instead of typing the commands, I click.

681
01:07:32,020 --> 01:07:32,860
Yeah.

682
01:07:32,860 --> 01:07:37,860
So, and I go to the stage

683
01:07:38,460 --> 01:07:41,860
where I transform my local directory

684
01:07:41,860 --> 01:07:46,720
into a repository tracked with Git locally.

685
01:07:48,000 --> 01:07:50,940
So I can see, let me show one thing.

686
01:07:50,940 --> 01:07:53,080
So there is actually a graph here,

687
01:07:53,080 --> 01:07:55,440
which is similar to `git graph` ,

688
01:07:55,440 --> 01:07:58,140
but I only have one initial commit yet.

689
01:07:58,140 --> 01:08:00,260
So I am on the main branch,

690
01:08:00,260 --> 01:08:02,980
which is highlighted in blue.

691
01:08:02,980 --> 01:08:06,420
It shows the committer and the time of the commit

692
01:08:06,420 --> 01:08:09,480
and the commit message and which files have been changed.

693
01:08:09,480 --> 01:08:11,900
And also at the bottom, actually the hash,

694
01:08:11,900 --> 01:08:14,580
the shortened hash of this commit.

695
01:08:14,580 --> 01:08:19,580
So the next thing would be now to move this onto GitHub.

696
01:08:23,080 --> 01:08:27,080
Yeah. And how do we do that?

697
01:08:27,080 --> 01:08:34,940
Yeah. So should I do that as well? So if I were to do it in VS Code, actually VS Code

698
01:08:34,940 --> 01:08:46,440
can do this for me by clicking here, publish branch main. And then what I need to do is

699
01:08:46,440 --> 01:08:58,600
to tell VS Code, oh, but where on GitHub do you want your project to be? And it even gives me the

700
01:08:58,600 --> 01:09:05,960
option to publish it to either a private or a public repository by default with the same name

701
01:09:05,960 --> 01:09:13,000
as the directory name, but that can be changed. So the local directory name does not have to be

702
01:09:13,000 --> 01:09:18,680
the same as the GitHub repository name, although it's easier to keep track of them if they have

703
01:09:18,680 --> 01:09:25,000
the same name. So I'm going to make this a public repository. So then I click this,

704
01:09:25,960 --> 01:09:33,560
publish to GitHub public repository. And the first time one does this, one actually has to

705
01:09:33,560 --> 01:09:38,560
to authorize VS Code to publish on GitHub.

706
01:09:39,100 --> 01:09:40,840
So it's going to,

707
01:09:40,840 --> 01:09:45,840
you will be asked to authenticate to GitHub and yeah.

708
01:09:50,840 --> 01:09:54,260
So that is a necessary step for the very first time

709
01:09:54,260 --> 01:09:58,160
you use VS Code together with GitHub.

710
01:09:58,160 --> 01:10:01,560
And then actually I want to show you those messages, but.

711
01:10:01,560 --> 01:10:04,820
Is there a window open up that's asking about the authentication?

712
01:10:05,680 --> 01:10:06,060
Yes.

713
01:10:06,060 --> 01:10:08,320
So there will be a window opening up.

714
01:10:08,460 --> 01:10:16,640
And actually, well, there will be a browser window on GitHub that will ask you to authenticate.

715
01:10:17,280 --> 01:10:18,420
And if you, yeah.

716
01:10:18,840 --> 01:10:20,300
So just follow the steps.

717
01:10:20,680 --> 01:10:24,320
Well, read what is being prompted.

718
01:10:24,320 --> 01:10:32,840
And yes, you're going to have to agree to allow VS Code to make changes on GitHub.

719
01:10:33,400 --> 01:10:37,140
And if you're happy with that, then yes, you should authorize that.

720
01:10:37,880 --> 01:10:46,760
So one thing I wanted to say, so when I created this repository on GitHub via VS Code,

721
01:10:46,760 --> 01:10:48,680
then actually it

722
01:10:48,680 --> 01:10:50,620
asked me if I

723
01:10:50,620 --> 01:10:52,580
automatically wanted to fetch

724
01:10:52,580 --> 01:10:54,140
things

725
01:10:54,140 --> 01:10:56,640
from GitHub

726
01:10:56,640 --> 01:10:58,680
and what does that mean [name]?

727
01:11:01,100 --> 01:11:02,320
Can you ask it again?

728
01:11:02,500 --> 01:11:03,800
I was looking at a question here

729
01:11:03,800 --> 01:11:06,740
So VS Code asked

730
01:11:06,740 --> 01:11:08,620
me if it should automatically

731
01:11:08,620 --> 01:11:09,360
fetch

732
01:11:09,360 --> 01:11:11,780
commits from

733
01:11:11,780 --> 01:11:13,540
the GitHub repo

734
01:11:13,540 --> 01:11:21,540
uh hmm so i guess that means it will automatically do a pool whenever you do things

735
01:11:21,540 --> 01:11:31,780
on the on the remote repository yeah yeah yeah so that's really well it's for you to decide

736
01:11:31,780 --> 01:11:37,520
what's best for your project if you should do these automatic pools or not so that's

737
01:11:37,520 --> 01:11:45,640
And in general, it is a very good idea to keep track of the changes on the remote repository

738
01:11:45,640 --> 01:11:53,580
on GitHub or GitLab with the ones on your local machine.

739
01:11:53,920 --> 01:11:55,920
So that's generally good.

740
01:11:55,920 --> 01:12:04,640
And actually, whenever you start working on your local version, it's good to do a pull or a fetch.

741
01:12:04,640 --> 01:12:07,940
so they are almost the same

742
01:12:07,940 --> 01:12:08,420
not really

743
01:12:08,420 --> 01:12:11,860
but now I think it's good

744
01:12:11,860 --> 01:12:13,720
if everyone gets to

745
01:12:13,720 --> 01:12:14,440
try this

746
01:12:14,440 --> 01:12:18,100
and you can choose

747
01:12:18,100 --> 01:12:19,640
to do it in VS Code

748
01:12:19,640 --> 01:12:20,140
or you

749
01:12:20,140 --> 01:12:21,880
can

750
01:12:21,880 --> 01:12:25,080
choose your preferred project

751
01:12:25,080 --> 01:12:28,140
you can either do it in the command line

752
01:12:28,140 --> 01:12:30,360
so it's really up to you

753
01:12:30,360 --> 01:12:31,600
yeah

754
01:12:31,600 --> 01:12:33,600
there is one

755
01:12:33,600 --> 01:12:41,780
question about saying GitHub has removed password authentication. So in order to do this from

756
01:12:41,780 --> 01:12:51,100
the command line, you need to use the SSH key method and not the HTTPS method. HTTPS can work

757
01:12:51,100 --> 01:12:57,020
with an authentication helper or something extra, but that was sort of an extra thing in the install

758
01:12:57,020 --> 01:13:05,300
instructions and i'd recommend unless you want to go dig into things use ssh for command line

759
01:13:05,300 --> 01:13:12,620
otherwise stuff can happen and if you use vs code it handles it via the

760
01:13:12,620 --> 01:13:19,620
https and web browser all automatically so you don't have to think about it so that's a that is

761
01:13:19,620 --> 01:13:21,460
simpler in a sense

762
01:13:21,460 --> 01:13:22,580
yeah

763
01:13:22,580 --> 01:13:26,380
okay so we do exercise

764
01:13:26,380 --> 01:13:28,500
until it says

765
01:13:28,500 --> 01:13:30,200
25 minutes so

766
01:13:30,200 --> 01:13:32,380
16

767
01:13:32,380 --> 01:13:34,380
that's

768
01:13:34,380 --> 01:13:38,340
40 minutes past

769
01:13:38,340 --> 01:13:39,580
hour yeah

770
01:13:39,580 --> 01:13:42,280
okay okay then

771
01:13:42,280 --> 01:13:44,360
all right then I'll see you

772
01:13:44,360 --> 01:13:45,300
in 25 minutes

773
01:13:45,300 --> 01:13:48,360
yes see you in 25 minutes and

774
01:13:48,360 --> 01:13:54,280
keep asking questions notes and we keep helping and yeah bye

775
01:13:56,000 --> 01:14:00,200
Okay, welcome back, everyone.

776
01:14:01,900 --> 01:14:02,500
Hello.

777
01:14:02,500 --> 01:14:09,660
From the questions and answers, it seems you did have a try at the exercises

778
01:14:09,660 --> 01:14:12,080
and most of you have been successful.

779
01:14:12,940 --> 01:14:20,080
I think that it may be worth actually to show question 47.

780
01:14:22,280 --> 01:14:28,200
And some of you have proved me wrong that you can do some automatic pushes

781
01:14:28,200 --> 01:14:42,120
to GitHub if you install CLI, for example. So yeah, default it's not possible by design,

782
01:14:42,120 --> 01:14:50,760
I'd say, so that it's kind of safer and it has an increased threshold to be able to create these

783
01:14:51,400 --> 01:14:56,920
remote repositories automatically, but there are ways to do that, either on GitHub or

784
01:14:58,200 --> 01:15:14,400
on other platforms yeah yeah yeah that's that was also a new one to me um question number 48 here

785
01:15:14,400 --> 01:15:21,520
so there's lots of things that can go wrong if you don't do all the commands in the right order

786
01:15:21,520 --> 01:15:26,420
and that's sort of unfortunate it would be better if it was more obvious and less ways

787
01:15:26,420 --> 01:15:33,320
thing could go wrong but yeah like i'd say when you get these kinds of problems

788
01:15:33,320 --> 01:15:42,880
try asking someone and see what you can do and yeah and sometimes yeah actually uh searching

789
01:15:42,880 --> 01:15:52,420
for the error uh on google or or your favorite chatbot can give you some some insights on how

790
01:15:52,420 --> 01:16:02,180
fix this yeah yeah um for deleting repositories locally i guess that's something we haven't

791
01:16:03,380 --> 01:16:09,940
said yet i think so the git repository it's nothing magic it's basically a bunch of files

792
01:16:09,940 --> 01:16:16,740
there's the files you see that are the code files you're editing and using but there's also a hidden

793
01:16:16,740 --> 01:16:24,180
directory called dot git inside of it and that's where all the repository information is stored

794
01:16:25,060 --> 01:16:31,860
so if you delete a folder then you've completely reset it you've deleted the history and you've

795
01:16:31,860 --> 01:16:38,980
deleted the files there and you can clone it again and restart and try it a different way

796
01:16:38,980 --> 01:16:45,300
and that's okay even like all of us whenever a project gets really weird we're just like okay so

797
01:16:45,300 --> 01:16:52,600
So let's either move this out of the way or delete it and clone it again and get back to the original state.

798
01:16:53,340 --> 01:17:05,500
Yeah, and actually the suggestion of, so if you have not actually changed anything in this remote repository, just redefining the origin, the so-called origin.

799
01:17:05,700 --> 01:17:11,000
So the URL for the remote is better.

800
01:17:11,240 --> 01:17:12,840
So we did get a suggestion.

801
01:17:12,840 --> 01:17:21,060
actually we got the command here how to do that is git remote set url the name of the remote which

802
01:17:21,060 --> 01:17:27,060
is by default origin but it can be called something else and then and then the

803
01:17:27,060 --> 01:17:35,160
git at and so on the the github location of this

804
01:17:35,160 --> 01:17:38,240
repository

805
01:17:38,240 --> 01:17:41,020
so yeah

806
01:17:41,020 --> 01:17:43,180
that's definitely better if there are no

807
01:17:43,180 --> 01:17:44,320
changes to this remote

808
01:17:44,320 --> 01:17:45,660
yeah

809
01:17:45,660 --> 01:17:47,540
so

810
01:17:47,540 --> 01:17:50,720
let's see I will

811
01:17:50,720 --> 01:17:52,220
switch to

812
01:17:52,220 --> 01:17:54,660
my screen here

813
01:17:54,660 --> 01:17:56,780
I hope

814
01:17:56,780 --> 01:17:59,240
yeah and while you do that

815
01:17:59,240 --> 01:18:01,040
so I'll just

816
01:18:01,040 --> 01:18:02,860
comment on question

817
01:18:02,860 --> 01:18:04,140
50 or the

818
01:18:04,140 --> 01:18:12,060
well the note in 50 is like trying vs code makes you actually drop the command line and i think

819
01:18:12,060 --> 01:18:18,860
it's uh yeah it's it's true it does make life easier sometime um i also think that it's

820
01:18:19,660 --> 01:18:26,700
the features that vs code is introducing are expanding when it comes to uh to uh using it

821
01:18:26,700 --> 01:18:33,260
with GitHub. So for some things, I think complicated commands, it's

822
01:18:34,860 --> 01:18:40,940
maybe easier to use the command line, but if you use it in a basic to intermediate way,

823
01:18:40,940 --> 01:18:48,220
VS Code is already powerful enough. So there is no need to learn these commands. So yeah.

824
01:18:48,220 --> 01:18:59,400
Yeah, it definitely has the most of the stuff you need to do with GitHub and Git.

825
01:19:00,980 --> 01:19:03,400
Yeah, I also think it's a good balance.

826
01:19:03,740 --> 01:19:07,480
So use your editor for what makes easy,

827
01:19:07,620 --> 01:19:11,540
but you can always drop to the command line for extra stuff.

828
01:19:12,000 --> 01:19:16,440
It's not two different Git systems, but one with two different interfaces.

829
01:19:16,440 --> 01:19:24,680
Yeah, and I think one nice thing is that you also get to have a nice editor

830
01:19:24,680 --> 01:19:30,360
together with your code. So that's one thing I like about VS Code as well.

831
01:19:32,800 --> 01:19:45,680
Yeah. So here we have some remote repositories. So we're doing this with GitHub as the example.

832
01:19:46,440 --> 01:19:54,360
a very similar thing works for gitlab so for example your university may have its own git lab

833
01:19:54,360 --> 01:19:58,120
and things will be slightly different the website will look slightly different

834
01:19:58,120 --> 01:20:03,320
and the paths will be slightly different but overall the same kind of idea

835
01:20:05,240 --> 01:20:11,960
and there's other smaller ones you can use for example bitbucket is one i've seen

836
01:20:11,960 --> 01:20:20,200
some people use you can also store git remotes on any server that you can ssh to so for example

837
01:20:20,200 --> 01:20:26,600
when i was doing my thesis i didn't want to send it to any other place and not that they existed

838
01:20:26,600 --> 01:20:38,280
at the time really but i could um store my work on some my work computer for example

839
01:20:38,280 --> 01:20:48,760
okay um and this last bit here so by putting it on github you make it available for other people

840
01:20:48,760 --> 01:20:56,960
to see it but these aren't permanent things so github exists as long as your account is active

841
01:20:56,960 --> 01:21:03,060
but it can disappear at any time and when you really want to make code available for long-term

842
01:21:03,060 --> 01:21:10,420
things like as part of a permanent paper you want to archive the code somewhere else and that's um

843
01:21:13,620 --> 01:21:17,380
that's something we'll talk about next week with stuff like reproducible research

844
01:21:19,220 --> 01:21:27,940
but now i propose if there's not much else we head to a break and see

845
01:21:27,940 --> 01:21:38,980
what comes next are there any there's a few more good questions here but i think they're

846
01:21:39,860 --> 01:21:45,380
answerable right here so let's let the questions keep coming in so after the break we talk about

847
01:21:45,380 --> 01:21:51,620
practical things so what do we actually do do each of us actually use what we teach

848
01:21:52,180 --> 01:21:56,100
we can talk among ourselves and any other instructors that happen to be around

849
01:21:56,100 --> 01:22:03,880
and you can um you can hear the inside story so do prepare your questions go ahead and start

850
01:22:03,880 --> 01:22:11,360
asking them and maybe you can see there is a tail on my desk so hopefully you get some

851
01:22:11,360 --> 01:22:18,040
entertainment from cats when you get back okay great okay see you after the break see you after

852
01:22:18,040 --> 01:22:19,080
the break bye

853
01:22:21,000 --> 01:22:24,840
Welcome back.

854
01:22:24,840 --> 01:22:49,120
Uh, there were a lot of good questions in the notes here. Um, but I propose that we first go through the practical advice parts. And then we, okay, you can see cats is roaming around here looking for trouble.

855
01:22:49,120 --> 01:23:00,240
I hope I don't have to go get up and solve problems. Okay. Yeah. So we do the practical

856
01:23:00,240 --> 01:23:05,680
advice and then we take the rest of the time doing Q&A, which can also be practical advice

857
01:23:05,680 --> 01:23:11,740
questions, but we'll go over a lot of these questions here. So for practical advice,

858
01:23:11,740 --> 01:23:20,140
are there any other instructors in the uh in the studio who would like to join us

859
01:23:23,500 --> 01:23:28,700
so we're going here to this oh hello [name] hello

860
01:23:31,020 --> 01:23:37,100
so [name] will be instructing next week with us i believe

861
01:23:37,100 --> 01:23:50,300
um okay i'm losing uh my mouse cursor wasn't isn't working properly uh this is not good

862
01:23:53,180 --> 01:23:58,860
let me fix something okay yeah so practically speaking

863
01:24:00,140 --> 01:24:04,220
what should we and should we not do it's this part right here

864
01:24:04,220 --> 01:24:13,120
so yeah the main question is of all the things we've talked about so far today

865
01:24:13,120 --> 01:24:17,540
what do you actually use and not use

866
01:24:17,540 --> 01:24:30,440
so should i go first since i asked the question you go first yeah so if you ask me um

867
01:24:30,440 --> 01:24:42,200
so definitely i use git for almost every project i do if i'm making code editing files

868
01:24:42,200 --> 01:24:49,660
i may as well have a record of what the previous date was and if i don't say more than half the

869
01:24:49,660 --> 01:24:54,480
time i'm going to end up regretting it someday and it's really easy to make a git repository

870
01:24:54,480 --> 01:25:00,400
either from the command line or editor and when a project is new i basically commit everything

871
01:25:01,040 --> 01:25:08,480
like if by two days from now all the code would change anyway all that really matters is i have

872
01:25:08,480 --> 01:25:14,160
something i don't care about every commit being perfectly atomic with a great message and so on

873
01:25:14,960 --> 01:25:20,960
but as projects get older and it becomes more mature and like other people might be using it

874
01:25:20,960 --> 01:25:25,680
then i make sure that every commit has a good message because other people might

875
01:25:25,680 --> 01:25:32,880
pool and see what the new stuff is um i make sure that each commit does only one thing so if i break

876
01:25:32,880 --> 01:25:42,000
something i can undo just that part and so on and it sort of usually comes naturally most of my stuff

877
01:25:42,000 --> 01:25:50,080
somehow goes on to github or but not everything private stuff i don't not even in public

878
01:25:50,080 --> 01:26:00,800
repositories what about you all uh [name] you're next in the list yeah i i might say yeah i i

879
01:26:00,800 --> 01:26:06,960
tend to use git a lot even just for sharing data so it's possibly an improper use of git

880
01:26:06,960 --> 01:26:16,960
but just to share data between different hosts um yeah i mean yeah and yeah um but uh but yeah

881
01:26:16,960 --> 01:26:24,240
maybe there are some things we saw today that i don't use a lot uh like for example git bisect

882
01:26:24,240 --> 01:26:30,160
but i mentioned i used it but uh a few times in my life it was actually a possible a bit of a

883
01:26:30,160 --> 01:26:42,320
lifesaver um but yeah um yeah and uh i think uh a lot of uh we discussed a lot of things that

884
01:26:42,320 --> 01:26:47,320
that I use rarely because I try to make my,

885
01:26:50,540 --> 01:26:54,940
I try to make sure that the last commit I make,

886
01:26:54,940 --> 01:26:56,640
like the current state of the repository

887
01:26:56,640 --> 01:26:59,380
is the most important one by using testing,

888
01:26:59,380 --> 01:27:00,880
for example, automated testing.

889
01:27:01,880 --> 01:27:05,380
But yeah, but when I made a mistake,

890
01:27:05,380 --> 01:27:08,260
then it's really nice to have a look at all the,

891
01:27:08,260 --> 01:27:14,640
you know git annotate git blame or all the logs or what what the log can give you i think that

892
01:27:14,640 --> 01:27:23,040
um i i learn uh every now and then something new that i think oh that's actually interesting so

893
01:27:23,040 --> 01:27:29,140
it's i think it's a long journey to actually be able to use git efficiently and uh in a way

894
01:27:29,140 --> 01:27:39,420
actually suits you yeah uh [name] what do you usually do so i use it for some very few private

895
01:27:39,420 --> 01:27:48,500
projects but uh but usually in collaboration with uh with others uh and um i prefer to use the

896
01:27:48,500 --> 01:27:54,240
command line but uh but for some of the projects i just find it easier to work on the web so if i

897
01:27:54,240 --> 01:27:56,340
know that it's going to be

898
01:27:56,340 --> 01:27:58,280
one commit, one file

899
01:27:58,280 --> 01:27:59,460
then I just add it

900
01:27:59,460 --> 01:28:02,080
on the fly on GitHub and

901
01:28:02,080 --> 01:28:04,200
not bother about cloning it

902
01:28:04,200 --> 01:28:05,820
on my local machine so

903
01:28:05,820 --> 01:28:07,760
it's convenient

904
01:28:07,760 --> 01:28:10,040
sometimes

905
01:28:10,040 --> 01:28:12,360
and then when I do work on the

906
01:28:12,360 --> 01:28:14,180
command line then it's

907
01:28:14,180 --> 01:28:15,440
git status all the time

908
01:28:15,440 --> 01:28:17,980
my most favorite command

909
01:28:17,980 --> 01:28:19,820
my most used command

910
01:28:19,820 --> 01:28:20,360
and

911
01:28:20,360 --> 01:28:23,760
yeah I find I mean

912
01:28:23,760 --> 01:28:26,280
the command line has

913
01:28:26,280 --> 01:28:28,300
increased flexibility in what you are

914
01:28:28,300 --> 01:28:29,360
actually trying to do

915
01:28:29,360 --> 01:28:31,380
it's also

916
01:28:31,380 --> 01:28:34,460
faster for me sometimes than just

917
01:28:34,460 --> 01:28:36,420
clicking sometimes I get lost

918
01:28:36,420 --> 01:28:37,360
in all this clicking

919
01:28:37,360 --> 01:28:40,360
but it's really just a matter

920
01:28:40,360 --> 01:28:41,720
of preference

921
01:28:41,720 --> 01:28:44,340
and I do use GitHub as well

922
01:28:44,340 --> 01:28:46,080
a lot so and sometimes GitLab

923
01:28:46,080 --> 01:28:47,620
it really depends on

924
01:28:47,620 --> 01:28:48,980
the collaborators

925
01:28:48,980 --> 01:28:52,320
well we have some more

926
01:28:52,320 --> 01:28:59,440
sensitive projects for which we want gitlab so uh yeah so that's uh that's great as well

927
01:29:01,280 --> 01:29:08,720
yeah if we look at this page here let's see what it recommends so if you're working on

928
01:29:08,720 --> 01:29:16,560
the command line use the git status command all the time so not using git status is like going

929
01:29:16,560 --> 01:29:25,260
for a long walk and not using your eyes to see where you are so eventually you might make a wrong

930
01:29:25,260 --> 01:29:31,920
turn and if you aren't aware that something is like you've turned off the wrong way it can go

931
01:29:31,920 --> 01:29:36,440
really bad before you correct yourself but if you do see that something doesn't quite look right

932
01:29:36,440 --> 01:29:42,920
it's usually pretty easy to take a step back and say okay yeah here's the command i missed this or

933
01:29:42,920 --> 01:29:48,200
that whatever but you know even from vs code or other editors it's good to know what current

934
01:29:48,200 --> 01:29:55,880
branch you have out and what's modified and not and so on so use the different status information

935
01:29:55,880 --> 01:30:07,940
it has for commit messages um yeah so my best oh yeah go ahead sorry i wanted to say one thing

936
01:30:07,940 --> 01:30:10,180
about using Git status.

937
01:30:10,180 --> 01:30:12,800
So if you're using an editor like VS Code,

938
01:30:12,800 --> 01:30:14,960
they can have their own status.

939
01:30:14,960 --> 01:30:17,540
So it's better actually to compare the things

940
01:30:17,540 --> 01:30:20,580
you see in your editor with the issue

941
01:30:20,580 --> 01:30:22,580
if you plan to use it both at the same time

942
01:30:22,580 --> 01:30:24,860
from the command line and the editor.

943
01:30:24,860 --> 01:30:27,320
Sometimes there are some weird things happening

944
01:30:27,320 --> 01:30:30,020
because the status is not the same in the command line

945
01:30:30,020 --> 01:30:31,220
and in the editor.

946
01:30:31,220 --> 01:30:32,780
So yeah.

947
01:30:32,780 --> 01:30:33,280
OK.

948
01:30:33,280 --> 01:30:33,920
Be aware of that.

949
01:30:33,920 --> 01:30:34,860
Good to know.

950
01:30:34,860 --> 01:30:35,360
Yeah.

951
01:30:35,360 --> 01:30:45,680
here you see some advice for commit messages so um the convention is that there's one really

952
01:30:45,680 --> 01:30:53,640
short line first like less than around 80 characters a terminal width that is used for

953
01:30:53,640 --> 01:31:03,280
summaries and then any longer details here so it's well as i think we've said before

954
01:31:03,280 --> 01:31:09,540
my philosophy is don't let perfection get in the way of getting stuff done there have been times

955
01:31:09,540 --> 01:31:13,900
that i haven't committed stuff because i haven't wanted to make a good commit message and it just

956
01:31:13,900 --> 01:31:19,960
keeps piling up more and more and it never gets done so there's times when i'll come back to a

957
01:31:19,960 --> 01:31:24,120
project i haven't worked on in a while and i see there's stuff in there that's not committed

958
01:31:24,120 --> 01:31:29,100
instead of saying let's see what happens i just make a new commit immediately that says

959
01:31:29,100 --> 01:31:38,080
uncommitted changes that i found around and well then not perfect but at least whatever i start to

960
01:31:38,080 --> 01:31:45,500
do in the future it can keep it organized um but the more stuff that's going on the bigger the

961
01:31:45,500 --> 01:31:50,460
project and the more people that might be reading it including yourself in the future you can get

962
01:31:50,460 --> 01:31:55,480
more and more advanced here like you can cross-reference relative relevant issues you can

963
01:31:55,480 --> 01:32:04,040
explain what went wrong um and also practice makes perfect so just start small and then

964
01:32:04,040 --> 01:32:11,700
you'll get better at writing commit messages so yeah and if you don't then that's also okay

965
01:32:11,700 --> 01:32:20,260
yeah and i also would add uh there are also ways to amend your commits messages if you make mistakes

966
01:32:20,260 --> 01:32:25,660
or to, you can do some weird, obscure stuff

967
01:32:25,660 --> 01:32:28,520
with your commits if you really need to.

968
01:32:29,060 --> 01:32:33,260
So one thing I wanted to add is that

969
01:32:33,260 --> 01:32:35,900
about the content of the commit message,

970
01:32:36,320 --> 01:32:39,860
for me, it's really important to mention the context

971
01:32:39,860 --> 01:32:41,500
where I've done something.

972
01:32:41,580 --> 01:32:43,720
For example, if I'm fixing a function,

973
01:32:43,720 --> 01:32:47,720
I wouldn't just write the function that I fixed,

974
01:32:47,720 --> 01:32:49,500
that I fixed, but also for example,

975
01:32:49,500 --> 01:32:50,640
if it's a testing function,

976
01:32:50,640 --> 01:32:53,360
if it's not so deep to make sure that

977
01:32:53,360 --> 01:32:55,480
when I look at the commit log,

978
01:32:55,480 --> 01:32:58,620
I'm able to figure out if a commit is relevant

979
01:32:58,620 --> 01:33:00,140
for what I'm doing or not.

980
01:33:02,080 --> 01:33:03,300
Yeah.

981
01:33:03,300 --> 01:33:05,780
I guess one way to look at it is

982
01:33:05,780 --> 01:33:08,320
pretend you're telling someone to do the commit

983
01:33:08,320 --> 01:33:09,160
you just did.

984
01:33:09,160 --> 01:33:14,160
So it'd be like fix bug of displaying the output

985
01:33:14,340 --> 01:33:17,460
or add feature of such and such.

986
01:33:17,720 --> 01:33:21,880
And then, yeah, this imperative case.

987
01:33:23,160 --> 01:33:24,620
Let's see what comes next.

988
01:33:26,140 --> 01:33:29,480
What level of branching complexity is necessary?

989
01:33:29,480 --> 01:33:36,460
So branches is something we've gone over a little bit here, but not in great depth yet.

990
01:33:38,340 --> 01:33:43,620
But simple projects might have only a main branch, and you put everything there.

991
01:33:43,620 --> 01:33:49,000
If you mess something up, well, it's only you and you can go back and fix it.

992
01:33:49,240 --> 01:33:56,800
And it's less work to fix stuff if it goes wrong than to keep stuff from going wrong in the first place.

993
01:33:58,240 --> 01:34:09,740
If there's ideas that you think won't be finished or you need to be kept separate because it might break things before you can fix it, you can start using branches there.

994
01:34:09,740 --> 01:34:15,640
or things where you want to make lots of small commits while you're developing but in the end

995
01:34:15,640 --> 01:34:20,800
you might just say no i don't want this and then you go back to main and ignore everything you

996
01:34:20,800 --> 01:34:27,520
branched tags are good for important milestones i think there was a notes question earlier about

997
01:34:27,520 --> 01:34:36,460
when to use tags and that's something like um oh what's it called like okay this is the version i

998
01:34:36,460 --> 01:34:42,180
submitted or this is the version yeah really single version for the paper that kind of stuff

999
01:34:42,180 --> 01:34:51,140
yeah um and the more people that get added the more that you would use branches and things like

1000
01:34:51,140 --> 01:34:58,240
that so tomorrow we see the highest level where you use branches for everything and then there's

1001
01:34:58,240 --> 01:35:03,800
always someone or there's a chance for someone else to look and see a change before you start

1002
01:35:03,800 --> 01:35:06,060
before it gets accepted.

1003
01:35:08,540 --> 01:35:11,380
Have we talked about staging much yet?

1004
01:35:13,020 --> 01:35:14,520
I don't think we do.

1005
01:35:14,520 --> 01:35:15,260
Very briefly.

1006
01:35:15,520 --> 01:35:17,120
I just mentioned it very briefly

1007
01:35:17,120 --> 01:35:21,520
when I worked on the command line.

1008
01:35:21,840 --> 01:35:23,380
But yeah, tell us some more.

1009
01:35:24,320 --> 01:35:24,500
Yeah.

1010
01:35:25,220 --> 01:35:26,980
So staging is a way.

1011
01:35:27,240 --> 01:35:29,680
So I guess maybe you remember the git add command

1012
01:35:29,680 --> 01:35:31,300
where we say git add

1013
01:35:31,300 --> 01:35:34,060
and it prepares something to commit.

1014
01:35:34,260 --> 01:35:35,420
And when we type git commit,

1015
01:35:35,820 --> 01:35:37,880
it commits everything that was added.

1016
01:35:38,600 --> 01:35:42,200
So this is good when you make multiple changes at once,

1017
01:35:42,220 --> 01:35:43,700
you can decide what you need

1018
01:35:43,700 --> 01:35:48,120
or you can, yeah,

1019
01:35:48,620 --> 01:35:51,420
or you just want to verify things

1020
01:35:51,420 --> 01:35:54,320
or have a small checkpoint before the commit.

1021
01:35:55,560 --> 01:35:57,640
Yeah, and I would just add it's like,

1022
01:35:58,320 --> 01:35:59,260
oh, sorry, it's just,

1023
01:35:59,260 --> 01:36:05,480
It's the same as clicking on the plus button next to a file in VS Code.

1024
01:36:05,800 --> 01:36:07,560
So that is staging as well.

1025
01:36:08,700 --> 01:36:08,860
Yeah.

1026
01:36:10,820 --> 01:36:13,020
And it's useful.

1027
01:36:13,420 --> 01:36:17,200
I often add things first and look at it and then commit it.

1028
01:36:17,520 --> 01:36:20,420
But also there's plenty of times I just commit everything

1029
01:36:20,420 --> 01:36:27,280
or use the git commit command in a mode that adds it and commits it at the same time.

1030
01:36:27,280 --> 01:36:29,400
because stuff's so small

1031
01:36:29,400 --> 01:36:32,300
and there's not really any doubt in my mind

1032
01:36:32,300 --> 01:36:33,780
what's going wrong on.

1033
01:36:33,940 --> 01:36:35,840
And if I do make a mistake,

1034
01:36:36,000 --> 01:36:37,860
well, I don't really care

1035
01:36:37,860 --> 01:36:40,620
because no one cares about the project that much.

1036
01:36:43,660 --> 01:36:45,240
How large should commits be?

1037
01:36:45,240 --> 01:36:47,900
Or is anything else about staging you all have?

1038
01:36:49,760 --> 01:36:51,000
No, I think it's good.

1039
01:36:52,180 --> 01:36:53,940
So how large should commits be?

1040
01:36:53,940 --> 01:36:56,640
I think

1041
01:36:56,640 --> 01:36:59,640
in the beginning

1042
01:36:59,640 --> 01:37:01,640
it's better to commit

1043
01:37:01,640 --> 01:37:02,280
more often

1044
01:37:02,280 --> 01:37:05,280
and then as you get

1045
01:37:05,280 --> 01:37:07,680
more used to Git and more confident

1046
01:37:07,680 --> 01:37:08,380
about

1047
01:37:08,380 --> 01:37:11,740
how much to introduce in one commit

1048
01:37:11,740 --> 01:37:13,400
then they can be larger

1049
01:37:13,400 --> 01:37:15,560
but anyway it's good to have

1050
01:37:15,560 --> 01:37:17,500
no more than

1051
01:37:17,500 --> 01:37:19,060
one

1052
01:37:19,060 --> 01:37:21,440
feature or important

1053
01:37:21,440 --> 01:37:23,220
modification per commit so then

1054
01:37:23,220 --> 01:37:30,820
And as [name] said, if something went wrong in that commit, you have the possibility to revert those changes.

1055
01:37:32,500 --> 01:37:42,980
In other words, one could say you should have only one thing that can fail in a commit, let's say, so that you can tell which thing was.

1056
01:37:42,980 --> 01:37:51,960
yeah but without a doubt there's times when or what if i'd say for me as small as possible

1057
01:37:51,960 --> 01:37:59,760
but sometimes it's not possible just because i don't have time or energy and then i do a lot and

1058
01:37:59,760 --> 01:38:09,060
hope it's okay so yeah and it depends on who's gonna be looking at stuff if it's just for you

1059
01:38:09,060 --> 01:38:12,420
then you probably won't care

1060
01:38:12,420 --> 01:38:15,540
if I'm contributing to a project like NumPy

1061
01:38:15,540 --> 01:38:17,540
they probably do care

1062
01:38:17,540 --> 01:38:20,700
and need it to look

1063
01:38:20,700 --> 01:38:22,220
exactly correct

1064
01:38:22,220 --> 01:38:25,120
is that all?

1065
01:38:25,660 --> 01:38:29,820
so the next part if we go to it

1066
01:38:29,820 --> 01:38:31,660
is related, I'll click back

1067
01:38:31,660 --> 01:38:33,940
and it is what to avoid

1068
01:38:33,940 --> 01:38:41,540
so let's see what's here

1069
01:38:41,540 --> 01:38:44,780
so this says

1070
01:38:44,780 --> 01:38:52,040
commit message that that explained what's been changed but not why it's changed

1071
01:38:52,040 --> 01:38:58,400
so if it's not obvious like the code will show what has changed perhaps it's more important

1072
01:38:58,400 --> 01:39:03,880
to explain why something has changed again it matters more when projects gets larger

1073
01:39:03,880 --> 01:39:12,020
I think that being too pedantic just makes people not record everything yeah and also

1074
01:39:12,020 --> 01:39:18,080
what is obvious to you may not be obvious to others so I think it is good to make an effort

1075
01:39:18,080 --> 01:39:27,220
of explaining why why you introduce that yeah and maybe it's obvious to you now well maybe

1076
01:39:27,220 --> 01:39:34,000
three years from now it's i mean that's obvious why that change got implemented so

1077
01:39:34,000 --> 01:39:41,060
yeah i think much more important is this next one committing generated files let's say you're

1078
01:39:41,060 --> 01:39:48,680
working on your thesis and you have the latex source there and then you make a pdf out of the

1079
01:39:48,680 --> 01:39:56,040
thesis do you want to add your pdf to the git repository so there the answer is much more

1080
01:39:56,040 --> 01:40:04,560
strongly probably not because when you add it there every time you recompile it can show this

1081
01:40:04,560 --> 01:40:11,240
has changed and would update it and it can be made directly from the source already so there's really

1082
01:40:11,240 --> 01:40:17,860
no need to add that there it's better to have only the things you actually edit committed and

1083
01:40:17,860 --> 01:40:24,380
anything automatically generated gets excluded and you can do that with these git ignore files

1084
01:40:24,380 --> 01:40:31,740
so on the other hand i might save a checkpoint of the thesis if it's something that i expect

1085
01:40:31,740 --> 01:40:38,680
people to want to look at from the github web interface or something but that's not

1086
01:40:38,680 --> 01:40:42,400
that's a separate copy from the one that's automatically generated

1087
01:40:42,400 --> 01:40:52,720
i would add to this record it once any change git will want you to update it okay so i would

1088
01:40:52,720 --> 01:41:00,580
I add to this that, okay, so you don't want to store generated files and track them in Git.

1089
01:41:01,040 --> 01:41:06,940
But what you could do and you should do is to maybe write a recipe on how to get those generated files.

1090
01:41:06,940 --> 01:41:20,700
For example, if the process is a bit lengthy and complicated, then you can have a script that helps you produce those or at least some documentation that tells you how to get those.

1091
01:41:20,700 --> 01:41:23,220
So you don't actually need to store them there,

1092
01:41:23,220 --> 01:41:26,020
because there's a recipe to get them.

1093
01:41:26,020 --> 01:41:27,180
Yeah.

1094
01:41:27,180 --> 01:41:34,020
And that's something that we'll talk a bit more

1095
01:41:34,020 --> 01:41:41,220
about next day for in reproducible research,

1096
01:41:41,220 --> 01:41:43,140
how to automatically generate these things.

1097
01:41:46,380 --> 01:41:49,880
For huge files, it's usually not good to commit them,

1098
01:41:49,880 --> 01:41:54,960
because it tracks the whole thing and that inflates the size of your repository and even

1099
01:41:54,960 --> 01:42:05,820
removing them later doesn't um reduce the size of the history so yeah better not to do that

1100
01:42:05,820 --> 01:42:13,260
and this gets what we said about being too pedantic about things so if you think it's not

1101
01:42:13,260 --> 01:42:19,760
good it's ugly someone's going to judge me for this you'll usually stop committing and then

1102
01:42:20,640 --> 01:42:31,200
well you end up losing things later um committing unrelated changes together again if it's a small

1103
01:42:31,200 --> 01:42:37,520
project i think who cares the larger projects get they usually want one change per one commit

1104
01:42:41,520 --> 01:42:48,000
there's these some problems with branching workflows where things can well you can try

1105
01:42:48,000 --> 01:42:56,000
to make things too fancy too advanced or whatever and well either not checking what branch you're

1106
01:42:56,000 --> 01:43:01,280
on like with the git status or trying to make branches that are so big that it eventually

1107
01:43:02,000 --> 01:43:07,120
can never get merged back any other common things to avoid

1108
01:43:07,120 --> 01:43:25,140
yeah don't wait don't wait too long before uh merging yeah i'd say most important is don't um

1109
01:43:25,140 --> 01:43:32,880
don't try to be too perfect and let the perfect become the enemy of the good because i know

1110
01:43:32,880 --> 01:43:40,320
far more people that regret not having recorded their history than have regretted recording

1111
01:43:40,320 --> 01:43:44,440
bad-looking history. In fact, I've never heard anyone that said,

1112
01:43:44,960 --> 01:43:50,280
I wish I had spent more time making my commits look nicer. So, yeah.

1113
01:43:52,000 --> 01:43:58,440
Okay, back to the notes, I say. So, there's some new questions that are appearing here

1114
01:43:58,440 --> 01:44:08,620
that are pretty good. So as some quick reminders, we have feedback at the bottom. Please let us know

1115
01:44:08,620 --> 01:44:22,240
what you thought. Yeah. And if we scroll up, let's see, which of these questions should we talk

1116
01:44:22,240 --> 01:44:34,960
about if anyone sees one please let me know number 55 for origin that's the conventional name of

1117
01:44:34,960 --> 01:44:44,640
the it's an alias for the remote so basically origin means get at github.com slash your user

1118
01:44:44,640 --> 01:44:51,620
slash your project name that kind of thing yeah and that's the default you can name it something

1119
01:44:51,620 --> 01:45:04,460
Yeah. The names don't have to match on GitHub and your own computer, but it's probably nice if they do, because that reduces confusion later.

1120
01:45:04,460 --> 01:45:17,240
um vs code i think this is answered down there ssh keys shouldn't we talk about ssh maybe let's

1121
01:45:17,240 --> 01:45:22,380
come back to that if we have time i don't want to risk going over time and i think this is probably

1122
01:45:22,380 --> 01:45:24,400
answered well here

1123
01:45:24,400 --> 01:45:35,000
here's a question about WSL users. So WSL is windows services for linux it's basically a

1124
01:45:35,000 --> 01:45:41,380
way to run linux on top of windows so you have access to all the good linux tools but

1125
01:45:41,380 --> 01:45:47,920
on windows and this question is basically about how data is stored between them so you can put

1126
01:45:47,920 --> 01:45:52,500
some data in a place where it's visible to the linux side but not the windows side

1127
01:45:53,220 --> 01:45:58,900
on perhaps vice versa so it's always important to know where things are stored and think a little

1128
01:45:58,900 --> 01:46:04,740
bit before you make any project where is it stored and is it accessible in the ways i need it to be

1129
01:46:04,740 --> 01:46:15,860
accessible um python files versus the jupyter notebook we can come back to but also we have

1130
01:46:15,860 --> 01:46:28,580
a jupyter lesson next week um for codium versus vs code i don't use enough to really comment i

1131
01:46:28,580 --> 01:46:34,100
know for me i use codium and it seems fine not all extensions are there but it's okay

1132
01:46:34,100 --> 01:46:44,540
`git add -p` and `git commit -p` is a good one

1133
01:46:44,540 --> 01:46:55,360
If you use git add or commit with the `-p` option, `-p` means patch or

1134
01:46:55,360 --> 01:47:03,620
something like that and it means that when you run git commit it will show you

1135
01:47:03,620 --> 01:47:11,060
every individual change you've made and you can push Y for yes or N for no and do them separately

1136
01:47:11,060 --> 01:47:16,500
and add them to the commit separately. And in fact, it's probably the most common way

1137
01:47:16,500 --> 01:47:22,500
I use to commit things because it shows me everything before I add it and I can select

1138
01:47:22,500 --> 01:47:28,420
only the stuff that goes together. It works well for small situations, but if I think it's going

1139
01:47:28,420 --> 01:47:36,020
it complex, I'll use git add separately. Although it may be, for example, convenient if you have

1140
01:47:37,940 --> 01:47:42,580
different changes in one file and then you don't want to actually git add the file,

1141
01:47:42,580 --> 01:47:48,580
then you'll have to have this option. But it is advanced. Sometimes it's better to just undo

1142
01:47:48,580 --> 01:47:58,900
some of the modifications and and commit one by one yeah let's say this is a good question here so

1143
01:47:59,540 --> 01:48:07,140
it's about the not tracking generated files and the sharing with collaborators so let's say you're

1144
01:48:07,140 --> 01:48:13,620
working with someone on a manuscript that's written in LaTeX so if they want me to add the

1145
01:48:13,620 --> 01:48:22,500
results to the repository we'd have to be sharing the tech source file and not the pdfs if someone

1146
01:48:22,500 --> 01:48:29,060
sends me a pdf i can't really commit that because it doesn't do much i have to basically convert

1147
01:48:29,060 --> 01:48:36,100
it back to the source so i think that's not completely inconsistent and if it's word docs

1148
01:48:36,100 --> 01:48:41,380
and word docs is the actual source that we're using to modify things then yeah there have been

1149
01:48:41,380 --> 01:48:48,580
times that i've added that to get history because there's no other option permanently removing

1150
01:48:48,580 --> 01:48:56,660
things from history yes this can be done but it changes history and will um everyone else will

1151
01:48:56,660 --> 01:49:03,860
have to update their repository for this new history so it's a common thing to do people

1152
01:49:03,860 --> 01:49:09,380
accidentally commit things all the time but the recovery is definitely an advanced process so

1153
01:49:09,380 --> 01:49:13,680
So it's better to try to avoid this.

1154
01:49:15,760 --> 01:49:20,400
Just because you remove it from GitHub doesn't mean it gets removed from everyone else's repository.

1155
01:49:25,000 --> 01:49:26,340
Yeah, and what do you know?

1156
01:49:26,400 --> 01:49:27,520
It's right on time.

1157
01:49:27,960 --> 01:49:31,320
Let's scroll down and let's talk a little bit about this.

1158
01:49:33,180 --> 01:49:34,160
Where was it?

1159
01:49:34,300 --> 01:49:38,720
The reminder thing, which I'm moving to the bottom.

1160
01:49:39,380 --> 01:49:49,720
So tomorrow we continue with, oh, we have a visitor.

1161
01:49:51,300 --> 01:49:53,800
Okay, tomorrow we continue with Git Collaborative.

1162
01:49:54,420 --> 01:49:59,280
And in Git Collaborative, we are all contributing to the same repositories.

1163
01:49:59,280 --> 01:50:10,080
and we are allowing like so since we're contributing to some central repositories

1164
01:50:10,080 --> 01:50:16,020
you need to request permissions before it begins and that's done via this

1165
01:50:16,020 --> 01:50:24,740
this box here you'll also get an email about it but please do this in advanced in advance

1166
01:50:24,740 --> 01:50:31,800
So that way we don't have to rush to give everyone access during the course tomorrow.

1167
01:50:33,580 --> 01:50:40,920
Been used for day one or day, maybe someone else can write stuff here because my hands are full.

1168
01:50:42,840 --> 01:50:51,020
But it is the, so tomorrow is more practice for everything we've done now.

1169
01:50:51,020 --> 01:50:53,900
So if things are a bit confusing, don't worry.

1170
01:50:54,080 --> 01:50:58,380
Come back tomorrow and you'll see it again and we can do it more slowly.

1171
01:50:59,100 --> 01:51:04,860
And by seeing it in real life being used for something, it will start to become more clear.

1172
01:51:08,060 --> 01:51:14,080
So it has both command line VS Code and GitHub Web Interface tracks.

1173
01:51:14,080 --> 01:51:20,260
So you can still follow each of the different tracks depending on your needs and your interests.

1174
01:51:21,020 --> 01:51:28,440
So if the command line part is too hard, don't worry.

1175
01:51:29,460 --> 01:51:30,940
You have the other options.

1176
01:51:34,220 --> 01:51:36,040
Yeah, anything else? I'm forgetting.

1177
01:51:36,660 --> 01:51:38,700
Let me look in the chat here.

1178
01:51:44,700 --> 01:51:45,920
Yeah, I guess.

1179
01:51:46,680 --> 01:51:49,560
Can anyone else think of anything before we say goodbye?

1180
01:51:51,020 --> 01:51:58,300
Okay, [name], I think you said something, but you're muted.

1181
01:51:58,300 --> 01:52:02,720
No, no, I think we covered a lot of things.

1182
01:52:03,540 --> 01:52:05,200
Okay, all right.

1183
01:52:07,000 --> 01:52:11,440
So, yeah, let's go then.

1184
01:52:12,700 --> 01:52:13,540
See you tomorrow.

1185
01:52:13,600 --> 01:52:14,820
See you tomorrow.

1186
01:52:15,380 --> 01:52:16,060
Bye, everyone.

1187
01:52:16,340 --> 01:52:17,260
Okay, bye.

1188
01:52:17,860 --> 01:52:18,380
Bye.

