1
00:00:00,000 --> 00:00:29,980
Thank you.

2
00:00:30,000 --> 00:00:31,040
you

3
00:01:00,000 --> 00:01:01,040
you

4
00:01:30,000 --> 00:01:31,040
you

5
00:02:00,000 --> 00:02:01,040
you

6
00:02:30,000 --> 00:02:31,040
you

7
00:03:00,000 --> 00:03:01,040
you

8
00:03:30,000 --> 00:03:31,040
you

9
00:04:00,000 --> 00:04:01,040
you

10
00:04:30,000 --> 00:04:31,040
you

11
00:05:00,000 --> 00:05:01,040
you

12
00:05:30,000 --> 00:05:31,040
you

13
00:06:00,000 --> 00:06:01,040
you

14
00:06:30,000 --> 00:06:31,040
you

15
00:07:00,000 --> 00:07:01,040
you

16
00:07:30,000 --> 00:07:31,040
you

17
00:08:00,000 --> 00:08:01,040
you

18
00:08:30,000 --> 00:08:31,040
you

19
00:09:00,000 --> 00:09:15,320
Test.

20
00:09:15,320 --> 00:09:19,760
Can anyone see people out there?

21
00:09:19,760 --> 00:09:23,160
I see us on screen.

22
00:09:23,160 --> 00:09:24,160
Yep.

23
00:09:24,160 --> 00:09:25,160
So do I.

24
00:09:25,160 --> 00:09:26,160
Okay.

25
00:09:26,160 --> 00:09:27,160
Okay.

26
00:09:27,160 --> 00:09:28,160
Yeah.

27
00:09:28,160 --> 00:09:32,620
It's like we have a classical icebreaker question there.

28
00:09:32,620 --> 00:09:37,680
What's your programming language are you normally working with?

29
00:09:37,680 --> 00:09:40,360
So how about you, [name]?

30
00:09:40,360 --> 00:09:43,920
I think the answers in there that are currently set, that's mine.

31
00:09:43,920 --> 00:09:44,920
Okay.

32
00:09:44,920 --> 00:09:45,920
Yeah.

33
00:09:45,920 --> 00:09:52,120
So yeah, I'm mainly working with Python, JavaScript, TypeScript at the moment, sometimes MATLAB,

34
00:09:52,120 --> 00:10:00,840
Sometimes Java, a little bit of R, but really rarely for me.

35
00:10:00,840 --> 00:10:10,760
And that's about it.

36
00:10:10,760 --> 00:10:11,760
And yourself?

37
00:10:11,760 --> 00:10:27,780
Yeah, that would be C++ and Fortran as well as Python, but yeah, writing code is primarily

38
00:10:27,780 --> 00:10:35,480
Fortran and then in combination with a bit of CUDA and then you have, that's a little

39
00:10:35,480 --> 00:10:40,320
bit of a setup because the way we are using it in one program that I'm working with, then

40
00:10:40,320 --> 00:10:49,920
need C++ as an interface. So, yeah, it's working, but it's, well, I would say,

41
00:10:53,200 --> 00:10:59,280
if I would start a program from scratch, writing with CUDA backends or perhaps some other

42
00:10:59,280 --> 00:11:04,720
GPU backends, then, I mean, among the traditional compiled languages, then

43
00:11:04,720 --> 00:11:09,840
then if you go with C++, you can then

44
00:11:09,840 --> 00:11:12,980
work with fewer languages.

45
00:11:12,980 --> 00:11:14,280
Because if you work with Fortran,

46
00:11:14,280 --> 00:11:18,960
you would need C++ also most of the time.

47
00:11:18,960 --> 00:11:22,720
Not necessarily, but it's rather common.

48
00:11:22,720 --> 00:11:23,340
That's true.

49
00:11:26,820 --> 00:11:29,660
I like that answer.

50
00:11:29,660 --> 00:11:31,800
Natural language, let GPT code for you.

51
00:11:35,360 --> 00:11:39,040
yeah what do you think about gpt coding in general

52
00:11:42,480 --> 00:11:48,560
yeah on my side my experience is um i didn't really try it myself um

53
00:11:49,680 --> 00:11:56,560
i had to sort of say be aware of it and deal with it in the autumn because we were um

54
00:11:57,120 --> 00:12:03,360
a few within the team for one code development project we were recruiting new team members

55
00:12:04,400 --> 00:12:10,880
and we then had the code exercises as part of the of the interview process

56
00:12:12,400 --> 00:12:19,040
and yeah up front we were a little bit undecided so okay we invite a few persons into you and and

57
00:12:19,040 --> 00:12:23,880
And what do we say about, like, AI-assisted coding?

58
00:12:24,440 --> 00:12:28,980
Would we say that, oh, please do not use it here in this context for this exercise?

59
00:12:28,980 --> 00:12:36,340
Or, well, you can use it if you want, but then be transparent and please explain how we're using it.

60
00:12:37,340 --> 00:12:41,820
And somehow we naturally landed in the latter.

61
00:12:41,820 --> 00:12:45,180
so now

62
00:12:45,180 --> 00:12:47,720
the people who we then were in contact

63
00:12:47,720 --> 00:12:48,940
with, they would

64
00:12:48,940 --> 00:12:51,340
use primarily

65
00:12:51,340 --> 00:12:52,960
writing the code by themselves

66
00:12:52,960 --> 00:12:54,920
but also some of them did it with

67
00:12:54,920 --> 00:12:56,520
AI-supported coding

68
00:12:56,520 --> 00:12:59,220
My take is that

69
00:12:59,220 --> 00:13:03,020
I personally do use

70
00:13:03,020 --> 00:13:05,240
GPT to help me with things

71
00:13:05,240 --> 00:13:06,280
definitely

72
00:13:06,280 --> 00:13:09,140
but my impression is that

73
00:13:09,140 --> 00:13:11,280
one of the most important bits about

74
00:13:11,280 --> 00:13:13,380
AI-assisted coding is that

75
00:13:13,380 --> 00:13:15,640
you still know what the code

76
00:13:15,640 --> 00:13:16,540
is actually doing

77
00:13:16,540 --> 00:13:19,280
and you have an understanding of the code

78
00:13:19,280 --> 00:13:20,840
because yes, nowadays

79
00:13:20,840 --> 00:13:23,800
just a few

80
00:13:23,800 --> 00:13:25,480
days ago I had a discussion with someone

81
00:13:25,480 --> 00:13:27,400
GPT or

82
00:13:27,400 --> 00:13:28,300
larger

83
00:13:28,300 --> 00:13:31,480
agent frameworks can

84
00:13:31,480 --> 00:13:33,020
essentially write whole

85
00:13:33,020 --> 00:13:34,600
applications for you.

86
00:13:35,540 --> 00:13:37,640
The problem starts

87
00:13:37,640 --> 00:13:39,640
when you then want to

88
00:13:39,640 --> 00:13:40,760
maintain that application.

89
00:13:41,280 --> 00:13:43,460
So you have an application that works,

90
00:13:43,580 --> 00:13:44,980
that does exactly what you want it to do,

91
00:13:45,480 --> 00:13:48,040
but it's barely maintainable

92
00:13:48,040 --> 00:13:53,120
because there is no real concept behind the code

93
00:13:53,120 --> 00:13:55,740
and no one understands what it does.

94
00:13:56,100 --> 00:14:00,600
It's essentially, yeah, like the LLM itself internally,

95
00:14:00,760 --> 00:14:01,940
there are loads and loads of weights,

96
00:14:02,120 --> 00:14:07,020
but why it does something is really, really difficult to determine.

97
00:14:08,240 --> 00:14:08,760
Yeah.

98
00:14:08,760 --> 00:14:28,740
And that's my main argument why I wouldn't, at least for anything in research, rely on just have GPT code for me.

99
00:14:29,880 --> 00:14:32,660
Because I would never be able to maintain that.

100
00:14:32,660 --> 00:14:37,080
And that essentially means that whatever results I,

101
00:14:37,340 --> 00:14:39,400
or whatever things I get from this application,

102
00:14:39,980 --> 00:14:44,000
if it's anything that I have to explain at some point,

103
00:14:45,000 --> 00:14:46,180
this application is useless.

104
00:14:47,800 --> 00:14:49,000
Because I can't.

105
00:14:49,700 --> 00:14:52,160
Because I don't know what the application actually does.

106
00:14:53,180 --> 00:14:56,860
If it's just for presenting your resource,

107
00:14:56,860 --> 00:15:01,680
so you had to build a application

108
00:15:01,680 --> 00:15:04,860
that essentially takes in a couple of values

109
00:15:04,860 --> 00:15:08,220
and then uses your self-coded algorithm

110
00:15:08,220 --> 00:15:11,320
to present something in a nice fashion

111
00:15:11,320 --> 00:15:12,620
to a user or something,

112
00:15:13,020 --> 00:15:13,980
that might work.

113
00:15:14,200 --> 00:15:16,740
That can be perfectly fine.

114
00:15:17,640 --> 00:15:20,740
But if it's something fundamental

115
00:15:20,740 --> 00:15:24,280
where you want to also be able to maintain

116
00:15:24,280 --> 00:15:27,900
what the application itself does,

117
00:15:28,640 --> 00:15:29,720
it becomes difficult.

118
00:15:31,680 --> 00:15:46,880
I would say in general with many machine learning methods,

119
00:15:48,720 --> 00:15:54,720
explainability is something of a challenge. So your algorithms are doing something for you and

120
00:15:54,720 --> 00:16:01,280
perhaps they do it right on the spot and very fast and helpful but if you want to understand

121
00:16:01,280 --> 00:16:07,440
what they have done and how they've done it then sometimes you're a bit at loss it's essential

122
00:16:07,440 --> 00:16:13,440
to me it's a bit the you can try with enough data you can train models to detect

123
00:16:15,600 --> 00:16:22,240
well a lot of things but if then ask so and what is it they are actually detecting

124
00:16:23,280 --> 00:16:29,840
the kind of the kind of the why is this marked as that and this marked as the other

125
00:16:29,840 --> 00:16:36,060
then it becomes really difficult to explain okay uh what's the what's the feature that this is

126
00:16:36,060 --> 00:16:42,500
actually detecting what's the feature that we could potentially work on to to change something

127
00:16:42,500 --> 00:16:44,820
or to build something

128
00:16:59,840 --> 00:17:07,840
So, let's see here. We have now the... I could perhaps take over the screen share, [name].

129
00:17:07,840 --> 00:17:10,240
Mm hmm. Sure.

130
00:17:26,320 --> 00:17:29,600
Okay. So yeah, let's start.

131
00:17:34,120 --> 00:17:37,060
So we are here about automated testing.

132
00:17:37,840 --> 00:17:41,840
Yeah, it's still one minute to the full hour.

133
00:17:41,840 --> 00:18:10,980
now we need to yeah so good good morning everyone um for those of you who haven't already seen it

134
00:18:10,980 --> 00:18:21,980
Please see here the iceberg questions that they have put in the collaborative document and we have three questions here.

135
00:18:21,980 --> 00:18:28,980
So first is what programming languages are you normally working with?

136
00:18:28,980 --> 00:18:37,980
So we have some 10 languages here and please add if something is missing.

137
00:18:37,980 --> 00:19:00,980
And the weather seems to be very good here in Northern Europe overall and also in Taipei. It's sunny. Nice. Sunny in Bergen. That sounds to me just a little bit unexpected because I thought it was always raining in Bergen.

138
00:19:00,980 --> 00:19:11,460
okay yeah let's start yeah let's start

139
00:19:11,460 --> 00:19:19,560
so we are here essentially for automated testing

140
00:19:19,560 --> 00:19:28,600
yes so good morning everyone so today in the first lesson we're going to talk about automated

141
00:19:28,600 --> 00:19:39,160
testing and this will will will be taught by by [name] fow from uh from from finland and uh from

142
00:19:39,160 --> 00:19:44,120
me you want to take who yeah yesterday i was sitting in stockholm and today i'm sitting in

143
00:19:44,120 --> 00:19:53,000
upsala so automated testing what what this is about so we can start by illustrating with some

144
00:19:53,000 --> 00:20:00,520
examples here typical situations so you have a code you're working with it and

145
00:20:03,800 --> 00:20:09,080
for over a few months it's stable and to implement from the new feature b

146
00:20:10,200 --> 00:20:17,080
or you change the feature c and then all of a sudden the feature a which was there in your code

147
00:20:17,880 --> 00:20:26,040
for a few years it's not working anymore and i mean that can cause a lot of disruption

148
00:20:26,040 --> 00:20:31,400
and you need them to figure out why this happens and and how it could be prevented

149
00:20:33,800 --> 00:20:42,040
so i presume that many of you have experienced this at some point and and if this happens

150
00:20:42,040 --> 00:20:49,800
you you need to know some some good tricks and techniques and and and it's can be worth to get

151
00:20:49,800 --> 00:20:56,040
some good habits with testing because you can save a lot of time with it and i can quickly i

152
00:20:56,040 --> 00:21:04,600
can quickly mention here um the bnc can be something that is your code um or actually

153
00:21:04,600 --> 00:21:11,000
code from a library like in matlab the different matlab version so suddenly your matlab version

154
00:21:11,000 --> 00:21:17,480
changes and something in your code doesn't work anymore as it did in the past that's i think one

155
00:21:17,480 --> 00:21:22,920
of the most common situations at least that i have encountered that you rely on some library

156
00:21:22,920 --> 00:21:28,280
and some library changes um suddenly make things not work or work differently

157
00:21:30,040 --> 00:21:39,400
yes indeed that that's a very common situation actually so it's very much so that the errors

158
00:21:39,400 --> 00:21:47,000
or the source of errors can be in a code itself or it could be in the environment

159
00:21:48,680 --> 00:21:51,800
or simply in the matching between the code and the environment

160
00:21:51,800 --> 00:21:55,400
because out of the box they might not click together

161
00:21:57,880 --> 00:22:06,200
okay so like the other lessons given on tuesday and on yesterday on wednesday we will do the

162
00:22:06,200 --> 00:22:14,600
the examples we will do them all like in demo mode and also highlight some of the material

163
00:22:14,600 --> 00:22:19,320
which is in the lesson presenters exercises we will do them then live on the screen

164
00:22:21,400 --> 00:22:27,000
we very much encourage you to then at later point get back to do some of these exercises yourself

165
00:22:29,000 --> 00:22:35,560
prerequisites are what you probably are up and running with already so you need pi test

166
00:22:35,560 --> 00:22:42,200
with this port of python and you need to have your git i mean

167
00:22:43,160 --> 00:22:47,160
have git and also your account with github or git lab

168
00:22:51,240 --> 00:22:53,880
so coming here to the first

169
00:22:55,880 --> 00:22:59,880
second giving giving here some some motivations so

170
00:22:59,880 --> 00:23:10,140
So I mean the consequences from software malfunctioning or functioning in a way which is not intended

171
00:23:10,140 --> 00:23:15,180
can be of different severity.

172
00:23:15,180 --> 00:23:19,340
So the common thing is that something breaks and you need to fix it, perhaps you need to

173
00:23:19,340 --> 00:23:25,960
spend a few hours or half day, that's not the end of the word obviously.

174
00:23:25,960 --> 00:23:32,860
But in the context of scientific research, one of the more severe scenarios would be

175
00:23:32,860 --> 00:23:42,140
if you pursue some work on your own or with colleagues, and even if you complete it, you

176
00:23:42,140 --> 00:23:48,640
communicate it in scientific journals, and perhaps two years later, you figure out or

177
00:23:48,640 --> 00:23:53,700
someone else figure out that, oh, something here in the code that you used for simulations

178
00:23:53,700 --> 00:24:01,700
calculations within this project some features were not functioning as intended and therefore

179
00:24:01,700 --> 00:24:11,700
the raw data perhaps the post-processal data simply is not correct and you can find here some

180
00:24:15,140 --> 00:24:20,660
some articles here about this so here is some cases where people even have to retract

181
00:24:20,660 --> 00:24:31,820
published work semester is so too much did you did something like that happen

182
00:24:31,820 --> 00:24:36,840
to you or have you been spared from luckily not but I would also want to

183
00:24:36,840 --> 00:24:42,680
mention that depending on the type of testing you're using you might not

184
00:24:42,680 --> 00:24:47,540
protect yourself against mistake miss mistakes in your code that you didn't

185
00:24:47,540 --> 00:24:54,680
in anticipate you um because of depending on the complexity of what you're what you have there

186
00:24:54,680 --> 00:25:02,900
there might be issues in the code that you just don't realize um even with testing so um it's more

187
00:25:02,900 --> 00:25:11,760
at least to me the the major thing is that uh you have something you code on and a bit back

188
00:25:11,760 --> 00:25:24,000
a bit later someone asks for well someone asks for changes and stuff doesn't work as it used to be

189
00:25:25,120 --> 00:25:31,920
that's more that's more what i was what i'm commonly concerned with that you

190
00:25:31,920 --> 00:25:37,520
essentially get suddenly different results from the from the same functionality

191
00:25:37,520 --> 00:25:40,060
or that

192
00:25:40,060 --> 00:25:42,120
some functions just

193
00:25:42,120 --> 00:25:42,900
don't

194
00:25:42,900 --> 00:25:45,340
do anything anymore

195
00:25:45,340 --> 00:25:47,940
that's more where

196
00:25:47,940 --> 00:25:50,160
testing can help you with

197
00:25:50,160 --> 00:25:51,500
or that

198
00:25:51,500 --> 00:25:53,900
testing kind of

199
00:25:53,900 --> 00:25:54,560
prevents

200
00:25:54,560 --> 00:25:59,720
yes

201
00:25:59,720 --> 00:26:04,040
I could, I will not do it now

202
00:26:04,040 --> 00:26:05,980
but I've actually myself had

203
00:26:05,980 --> 00:26:16,460
some rather, yeah, I would say, most of the fun experiences were programs that broke.

204
00:26:16,460 --> 00:26:22,360
And fortunately, this was discovered in, let's say, manuscript review phase.

205
00:26:22,360 --> 00:26:27,180
So of course, it was a referee who requested some additional simulations.

206
00:26:27,180 --> 00:26:32,020
And while we were getting on the board to do these simulations to complement the original

207
00:26:32,020 --> 00:26:39,380
results then we found out oh we had done something wrong and we then had to redo it and then had to

208
00:26:39,380 --> 00:26:44,020
also be transparent in in the community getting back to the journal that okay we had made the

209
00:26:44,020 --> 00:26:49,300
mistake as of a half year ago we spotted it we corrected it and to the best of our knowledge

210
00:26:49,300 --> 00:26:56,420
this is now to say the sound results and i would very much encourage uh transparency in this so

211
00:26:56,420 --> 00:27:02,500
mistakes can happen and and um one should not wipe this under the carpet

212
00:27:03,220 --> 00:27:07,860
also let's say in in communication with the journals also

213
00:27:11,540 --> 00:27:16,660
okay so how can testing look um in in practice so um

214
00:27:19,300 --> 00:27:26,020
here we have an example this is in python code and and uh we will shortly we'll get to some

215
00:27:26,020 --> 00:27:34,660
hands-on exercises on this. So what do we have here? This is about

216
00:27:36,420 --> 00:27:44,580
a temperature conversion from Fahrenheit to Celsius temperature scale. So this here

217
00:27:44,580 --> 00:27:50,420
is the function in Python. And [name], what do we have here?

218
00:27:50,420 --> 00:27:58,400
so um we essentially try to see if the if um what we put into this function gives us the

219
00:27:58,400 --> 00:28:04,640
result that we expect uh the function to give so we give it one example um

220
00:28:04,640 --> 00:28:12,180
um often uh for basic for relative basic ones you might even get a couple of different

221
00:28:12,180 --> 00:28:17,360
values that you want to pass in and out so that you make sure that this is not a hard-coded

222
00:28:17,360 --> 00:28:19,720
337.7777

223
00:28:19,720 --> 00:28:20,540
returning

224
00:28:20,540 --> 00:28:23,880
which would also pass

225
00:28:23,880 --> 00:28:24,600
this test

226
00:28:24,600 --> 00:28:26,160
but

227
00:28:26,160 --> 00:28:29,300
more of a general

228
00:28:29,300 --> 00:28:31,800
does this function

229
00:28:31,800 --> 00:28:33,800
behave as we expect it to behave

230
00:28:33,800 --> 00:28:34,960
so does it

231
00:28:34,960 --> 00:28:36,820
return the right values

232
00:28:36,820 --> 00:28:39,000
and we already see in here

233
00:28:39,000 --> 00:28:40,760
we have this

234
00:28:40,760 --> 00:28:42,440
absolute

235
00:28:42,440 --> 00:28:45,140
smaller than a certain

236
00:28:45,140 --> 00:28:48,260
so it's an

237
00:28:48,260 --> 00:28:50,180
epsilon kind of assertion

238
00:28:50,180 --> 00:28:52,420
and that's

239
00:28:52,420 --> 00:28:54,300
something especially with floating

240
00:28:54,300 --> 00:28:56,360
point numbers that in tests

241
00:28:56,360 --> 00:28:58,120
you will see relatively often

242
00:28:58,120 --> 00:28:58,620
where

243
00:28:58,620 --> 00:29:00,660
well

244
00:29:00,660 --> 00:29:04,200
floating point numbers are not exact

245
00:29:04,200 --> 00:29:06,180
in computers so

246
00:29:06,180 --> 00:29:08,220
you always try

247
00:29:08,220 --> 00:29:08,700
to say

248
00:29:08,700 --> 00:29:12,380
it has to be almost

249
00:29:12,380 --> 00:29:14,180
correct because correct

250
00:29:14,180 --> 00:29:25,380
doesn't work yes yes certainly and one aspect here is when it comes to numerical computation

251
00:29:25,380 --> 00:29:31,540
so nowadays i mean even if you on your your local laptop or desktop computer

252
00:29:31,540 --> 00:29:38,380
you often go beyond serial execution of the code but you have perhaps some some kind of threading

253
00:29:38,940 --> 00:29:48,060
or some multiple rank computation and yeah particularly threading over cpu cores then

254
00:29:50,220 --> 00:29:55,580
that can very well be so to say non-deterministic execution because you then if you have let's say

255
00:29:56,540 --> 00:30:03,020
eight real numbers and you sum them using eight fiscal cores depending on in which order the

256
00:30:03,020 --> 00:30:07,900
estimation is made the rounding errors might come about it's slightly different

257
00:30:10,540 --> 00:30:17,660
and what we what we see here is essentially a so-called unit test this is testing one atomic

258
00:30:17,660 --> 00:30:23,500
unit of the of the code so this fahrenheit celsius function does not have any side effects there is

259
00:30:23,500 --> 00:30:31,100
nothing this depends on besides the basic language functions and that means that we are just testing

260
00:30:31,100 --> 00:30:41,740
our code and as soon as you have function calls from within the function you start it's

261
00:30:44,060 --> 00:30:46,380
if it's your own functions that are being called then

262
00:30:47,660 --> 00:30:50,620
this goes into a bit of a different type of testing

263
00:30:53,420 --> 00:30:59,500
sometimes it's still unit tests but yeah it depends a lot on the side effects of your function

264
00:31:01,100 --> 00:31:06,100
I think that's also what we are going to see next.

265
00:31:06,100 --> 00:31:23,400
So here, yeah, you can find, so in this lesson is rather long, so we will not have the chance

266
00:31:23,400 --> 00:31:26,360
to cover all of it.

267
00:31:26,360 --> 00:31:38,440
I think we can here and now actually we can go come here to a little bit of definitions

268
00:31:38,440 --> 00:31:44,920
of what are different kind of tests that we can deal with so [name] you mentioned this

269
00:31:44,920 --> 00:31:52,520
that there is something which is called unit tests yeah unit tests essentially are testing

270
00:31:52,520 --> 00:31:59,720
that the individual small unit so an individual function does what you expect it to do that under

271
00:31:59,720 --> 00:32:05,640
that different kind of inputs that you get always produce what you expect it to produce

272
00:32:07,000 --> 00:32:16,440
that's what a unit test is doing then you have integration tests that's where yeah if you have

273
00:32:16,440 --> 00:32:27,000
larger parts if you have um one element depending on another element and how how they work together

274
00:32:27,000 --> 00:32:33,640
um that's and you test that you would still write one function that does this test but

275
00:32:34,280 --> 00:32:37,480
you would have an essentially an integration test between the two

276
00:32:38,120 --> 00:32:41,800
components if they work together as you expect them to work together

277
00:32:41,800 --> 00:32:53,320
Yeah. There are two types here. End-to-end tests, which sort of relates quite a bit to integration

278
00:32:53,320 --> 00:33:04,040
tests. But here it's really like the complete program. And if it is, let's say, for a file-based

279
00:33:04,040 --> 00:33:09,400
user interface program, you work with input files and the program produces output files.

280
00:33:11,800 --> 00:33:18,520
then that lends itself rather naturally for testing because you then have as

281
00:33:18,520 --> 00:33:29,040
your test for end-to-end testing or essentially a set of input files and then you have stored

282
00:33:29,040 --> 00:33:36,180
then the selected output complete also with some specification about what would be let's say

283
00:33:36,180 --> 00:33:45,220
the tolerance for the output if there is any if yeah exactly so so real numbers are sort of

284
00:33:45,220 --> 00:33:48,980
one case but but they can of course be other categories also

285
00:33:55,700 --> 00:34:02,660
and then you have uh what's called regression tests which especially for um i think academic

286
00:34:02,660 --> 00:34:09,220
work is quite important because it's essentially that if you do changes the results don't change

287
00:34:09,220 --> 00:34:17,240
um so that would be uh yeah i'm using uh i'm using different versions of matlab

288
00:34:17,240 --> 00:34:25,200
to test that under all the versions of matlab i still get the same results i'm using different

289
00:34:25,200 --> 00:34:34,860
versions of a solver for whatever problems i have and i'm getting the same at least conceptual the

290
00:34:34,860 --> 00:34:43,300
same the same results um i can change it essentially helps you to be able to change and

291
00:34:43,300 --> 00:34:48,620
update code and make code faster and make sure that even if even if something changed inside

292
00:34:48,620 --> 00:34:54,420
the results that i'm getting out of it are still the same and if they are not there should be a

293
00:34:54,420 --> 00:35:00,500
good reason why they are not and maybe you then well

294
00:35:04,100 --> 00:35:10,180
need to see if the original was correct or if something has something substantial has changed

295
00:35:13,300 --> 00:35:21,060
yes um one thing which is important to keep in mind here with interest and 10 tests and

296
00:35:21,060 --> 00:35:27,780
regression test is that let's say you have you've engineered your regression tests

297
00:35:28,820 --> 00:35:33,060
and you start to deploy them let's say you run your program

298
00:35:33,060 --> 00:35:37,620
first on a local computer then you run it on three for other servers

299
00:35:40,660 --> 00:35:44,100
and then it's all good for extended time over many months

300
00:35:44,100 --> 00:35:51,900
that is tells you then okay things are now stable over time but it's very important to

301
00:35:51,900 --> 00:35:58,520
to remember also that at some point there's a base case that needs to be sound

302
00:35:58,520 --> 00:36:04,460
that means at some point early on in the program development you need them

303
00:36:04,460 --> 00:36:09,260
to think like okay is the program now doing what it is supposed to do

304
00:36:09,260 --> 00:36:16,960
so yeah in example from my field of science computational material science then it's

305
00:36:16,960 --> 00:36:20,940
yeah i mean it's essentially about doing simulations for differential equations you

306
00:36:20,940 --> 00:36:29,160
get a lot of numbers and often let's say the models that are implemented they are sort of old

307
00:36:29,160 --> 00:36:36,440
can be 100 years old 200 years old and you do have let's say for the small problem size you

308
00:36:36,440 --> 00:36:41,840
have the analytical solution or you can work it out yourself and and that's something which is

309
00:36:41,840 --> 00:36:49,040
very useful because if you can establish let's say the analytical solution for some let's say

310
00:36:49,040 --> 00:36:56,040
a differential equation um and or you have it in a textbook or whatever then you have a base case

311
00:36:56,040 --> 00:37:02,220
and if you then do for that small computation you do it then with your program and you get

312
00:37:02,220 --> 00:37:09,820
right results then you have sort of like a base case then probably the typical thing is obviously

313
00:37:09,820 --> 00:37:17,420
that in on the computer your program will run something which is bigger and you want to be

314
00:37:17,420 --> 00:37:23,100
done faster and so forth uh if you can do it a little bit inductively so that you work from the

315
00:37:23,100 --> 00:37:31,900
base case to say like okay the machinery in the code is is is correct here with regard to a and b

316
00:37:31,900 --> 00:37:38,540
and then like okay then we can sort of presume that results are coming out here

317
00:37:38,540 --> 00:37:44,380
for c and d have a good let's say probability for being correct

318
00:37:45,740 --> 00:37:50,700
so if you can build such things into to the what it then becomes regression sets

319
00:37:51,660 --> 00:37:55,340
that can can be a value but those those can also be unit tests

320
00:37:55,340 --> 00:38:03,760
if you if you have if you have clear solutions for uh for something this is exactly what a unit

321
00:38:03,760 --> 00:38:11,340
test could also be working or before a regression test would be most likely more the and now i have

322
00:38:11,340 --> 00:38:15,560
a more complex example that i don't have an analytical solution for and i want to i want

323
00:38:15,560 --> 00:38:22,480
that to be stable even if my code if my code is changing yeah very good point

324
00:38:22,480 --> 00:38:30,320
you're completely right there so often when you look at the components the units

325
00:38:31,200 --> 00:38:40,960
for them it can often be more tractable to come up with like the base case result

326
00:38:40,960 --> 00:38:44,800
so you can establish them that you have a good reference data for your unit tests

327
00:38:47,120 --> 00:38:50,880
so i think we can do a little bit of an interlude here with

328
00:38:52,480 --> 00:38:58,800
the discussion on what's easy and hard to test so i put that question up in in the notes

329
00:39:02,720 --> 00:39:07,680
so here towards the end of the collaborative document so if you could perhaps

330
00:39:10,000 --> 00:39:14,720
tell us a little bit about your experience is on what's easy and what is hard to test

331
00:39:14,720 --> 00:39:25,420
i would quickly go to the what you should do and what you or what's kind of good practice i think

332
00:39:25,420 --> 00:39:33,620
not every bit of code yeah needs to be tested um there are some basic things that

333
00:39:33,620 --> 00:39:44,140
yeah okay we trust that they work as they should um there's the thing with uh code that's really

334
00:39:44,140 --> 00:39:45,060
difficult to test

335
00:39:45,060 --> 00:39:48,360
like what's mentioned

336
00:39:48,360 --> 00:39:50,280
in the motivation

337
00:39:50,280 --> 00:39:51,840
with Jupyter Notebooks

338
00:39:51,840 --> 00:39:54,420
and I would argue that

339
00:39:54,420 --> 00:39:56,600
if you can move

340
00:39:56,600 --> 00:39:58,560
functional code

341
00:39:58,560 --> 00:40:00,360
out of the Jupyter Notebook into its

342
00:40:00,360 --> 00:40:02,140
own functions then it's a lot easier

343
00:40:02,140 --> 00:40:03,500
to test these

344
00:40:03,500 --> 00:40:06,520
bits to have actual functions

345
00:40:06,520 --> 00:40:08,460
that you can then import back into the

346
00:40:08,460 --> 00:40:10,360
Jupyter Notebook. Then you can test

347
00:40:10,360 --> 00:40:10,760
the code.

348
00:40:14,140 --> 00:40:20,640
Yes. Yeah, that's good to be aware of.

349
00:40:20,640 --> 00:40:26,140
In the Jupyter Notebook, which are, depending on how you interact with them,

350
00:40:26,140 --> 00:40:38,140
they are having the whole execution flow is depending on your interactive input.

351
00:40:38,140 --> 00:40:46,260
But that's a little bit more, a bit like a moving target for testing.

352
00:40:47,060 --> 00:40:56,440
I think here now in this lesson, I mean, we will keep it to like this execution program from the beginning to the end.

353
00:40:57,360 --> 00:40:58,880
So we will avoid this.

354
00:41:01,160 --> 00:41:06,160
There's one more thing that to me is a good motivation in writing tests.

355
00:41:06,160 --> 00:41:14,400
if you write tests for the functions that you expect users to use they already have an example

356
00:41:14,400 --> 00:41:20,480
of how to run your function so your tests can to some extent also just work for us documentation

357
00:41:20,480 --> 00:41:27,840
essentially how is this supposed to be used what kind of things can you do with it so

358
00:41:27,840 --> 00:41:33,540
testing can be integrated in yeah writing documentation to some extent

359
00:41:33,540 --> 00:41:46,800
and you can reuse things that you use there yeah indeed so this is actually a way to to be

360
00:41:46,800 --> 00:41:55,560
efficient with working on this process as you said [name] your examples and your input files

361
00:41:55,560 --> 00:42:04,600
if it's a text-based program and and also like documentation and test cases all of that sort of

362
00:42:04,600 --> 00:42:09,000
naturally can be combined and reused as appropriate

363
00:42:11,880 --> 00:42:19,000
so let's just we can briefly highlight here some points before we move over to the

364
00:42:19,000 --> 00:42:21,680
to the next hands-on, so to say.

365
00:42:25,200 --> 00:42:26,240
So what are you writing?

366
00:42:26,240 --> 00:42:29,880
Yeah, so getting an up to high code coverage

367
00:42:31,020 --> 00:42:34,500
can be difficult on a complex and legacy code,

368
00:42:35,360 --> 00:42:37,400
like 95% code coverage.

369
00:42:37,400 --> 00:42:40,900
Yeah, that's very ambitious, probably.

370
00:42:42,460 --> 00:42:44,920
Yeah, the problem with that is especially

371
00:42:44,920 --> 00:42:46,660
if you handle some kind of exception,

372
00:42:46,660 --> 00:42:48,520
if you do some exception handling and things,

373
00:42:48,520 --> 00:42:55,000
then it becomes really difficult because you essentially need to write tests for every

374
00:42:55,000 --> 00:43:01,160
possibility that where things can go wrong and where and how that is then handled so

375
00:43:01,160 --> 00:43:05,060
yeah i completely agree on that

376
00:43:05,060 --> 00:43:14,920
yeah last point here generally hard if you do not have modular code yeah certainly it's

377
00:43:14,920 --> 00:43:23,960
very much so which to me is a reason why try to have modular code and don't try to have one huge

378
00:43:23,960 --> 00:43:32,040
script that does everything try to put it into sub routines that you can test

379
00:43:32,040 --> 00:43:40,440
yeah so to some extent essentially testing also helps you improving your code quality

380
00:43:41,080 --> 00:43:50,360
in my opinion. Yeah, yes, so when you design functions or subroutines

381
00:43:53,000 --> 00:43:58,760
that's, and we'll talk more about that in the second hour, so the design of a function can

382
00:43:58,760 --> 00:44:06,600
be guided by its tentative testability. So if you know upfront that, oh what I'm writing now,

383
00:44:07,480 --> 00:44:13,720
it will not be possible to make a unit test for it in in any kind of let's say straightforward manner

384
00:44:13,720 --> 00:44:19,960
then yeah okay perhaps you you can then have a good reason to reconsider how you are designing

385
00:44:19,960 --> 00:44:28,120
that function and perhaps like it is not a function that might very well be let's say

386
00:44:29,240 --> 00:44:33,160
what makes it difficult okay so

387
00:44:33,160 --> 00:44:44,100
So let's here move over to the next episode here, which is testing locally.

388
00:44:44,100 --> 00:44:48,660
And then I think perhaps, [name], you would like to take over the screen share?

389
00:44:48,660 --> 00:44:49,660
Yes.

390
00:44:49,660 --> 00:44:50,660
Yeah.

391
00:44:50,660 --> 00:44:51,660
Okay.

392
00:44:51,660 --> 00:45:00,780
So essentially in this exercise, we will quickly

393
00:45:00,780 --> 00:45:10,300
show how to set up a test and how tests work in Python. There are examples in other languages as

394
00:45:10,300 --> 00:45:15,260
well so if your preferred language is one of the others you can go through those exercises

395
00:45:15,260 --> 00:45:26,220
afterwards but here we'll just show the Python example. So the minimal example that we can create

396
00:45:26,220 --> 00:45:45,100
is we can essentially create a folder for our test things. Go in there and then take your favorite

397
00:45:46,060 --> 00:45:55,020
editor and take this code. So this code conceptually consists of a function

398
00:45:55,020 --> 00:46:01,820
which is a simple add and a test function for this which is

399
00:46:04,220 --> 00:46:12,380
very Pythonian because of the untyped language and you can use integers or floating numbers

400
00:46:12,380 --> 00:46:16,780
or whatever and add them and the plus operator is defined for multiple things.

401
00:46:17,420 --> 00:46:21,900
So we actually want this add function to also be able to add strings

402
00:46:21,900 --> 00:46:24,660
and therefore we want to

403
00:46:24,660 --> 00:46:26,680
test this for strings

404
00:46:26,680 --> 00:46:28,740
and then

405
00:46:28,740 --> 00:46:29,920
in Python

406
00:46:29,920 --> 00:46:32,780
always pytest which is part of

407
00:46:32,780 --> 00:46:34,660
the code refinery environment that

408
00:46:34,660 --> 00:46:35,880
you hopefully have installed

409
00:46:35,880 --> 00:46:38,580
it's relatively simple

410
00:46:38,580 --> 00:46:40,700
to run these

411
00:46:40,700 --> 00:46:42,780
tests by

412
00:46:42,780 --> 00:46:44,340
simply calling

413
00:46:44,340 --> 00:46:46,860
pytest with the

414
00:46:46,860 --> 00:46:49,700
file name

415
00:46:49,700 --> 00:46:50,460
that you want

416
00:46:50,460 --> 00:46:57,260
want to run the tests in or from and PyTest will automatically find everything that

417
00:46:58,140 --> 00:47:04,620
every function name that starts with a test underscore. I want to quickly mention that

418
00:47:05,260 --> 00:47:10,860
sorry I want to quickly mention that this is if you use four folders

419
00:47:12,700 --> 00:47:20,220
PyTest actually looks for all for all files with test underscore starting so you could also

420
00:47:20,220 --> 00:47:27,660
create two files one with test underscore example and the test in it and the other with

421
00:47:28,300 --> 00:47:33,980
example which is called example and then import the function that you want to test from example

422
00:47:33,980 --> 00:47:42,300
into your test but now let's see what happens if we actually break the test so if the test doesn't

423
00:47:42,300 --> 00:47:50,540
work and well one simple option is to just remove the or just change the plus into a minus

424
00:47:54,140 --> 00:48:00,460
and if we run the test again we get a failure here and this failure essentially tells us that

425
00:48:00,460 --> 00:48:08,540
um it tried to assert so um i try to assert that minus one is five because the result of this

426
00:48:08,540 --> 00:48:16,220
at two three now is minus one well two minus three is minus one and this is not five

427
00:48:18,140 --> 00:48:27,820
so yeah it tells us what went wrong and where the so what kind of assertion was um wrong and

428
00:48:27,820 --> 00:48:33,340
it even tells us where this minus one came from that it came from this at two plus uh two comma

429
00:48:33,340 --> 00:48:40,460
three because this could be a bit could be more complex and then it really helps to see okay which

430
00:48:40,460 --> 00:48:53,980
which side or which part um led to a wrong result um now we have uh we have already mentioned that

431
00:48:53,980 --> 00:48:59,580
in the introduction um there is a problem that if you have for example floating numbers

432
00:49:03,340 --> 00:49:11,340
and try to do

433
00:49:11,340 --> 00:49:13,060
no wait

434
00:49:13,060 --> 00:49:20,160
sorry and try to add those

435
00:49:20,160 --> 00:49:23,840
you might end up with something that's not correct

436
00:49:23,840 --> 00:49:27,660
or you might end up with some problems

437
00:49:27,660 --> 00:49:30,720
because if you run this

438
00:49:30,720 --> 00:49:32,400
well

439
00:49:32,400 --> 00:49:34,780
now we see that our addition

440
00:49:34,780 --> 00:49:36,980
of 0.1 and 0.2

441
00:49:36,980 --> 00:49:39,140
is not exactly 0.3

442
00:49:39,140 --> 00:49:41,040
and that's what we were

443
00:49:41,040 --> 00:49:42,860
talking about with these tolerances earlier

444
00:49:42,860 --> 00:49:44,340
and

445
00:49:44,340 --> 00:49:46,620
the problem here is that

446
00:49:46,620 --> 00:49:47,680
due to numerics

447
00:49:47,680 --> 00:49:50,400
these are not presented as

448
00:49:50,400 --> 00:49:52,660
0.1 and 0.2

449
00:49:52,660 --> 00:49:54,480
but they have additional

450
00:49:54,480 --> 00:49:56,340
additional

451
00:49:56,340 --> 00:49:58,000
information way way

452
00:49:58,000 --> 00:50:00,200
I don't know how

453
00:50:00,760 --> 00:50:06,600
which digit um and you often for floating numbers have to do this

454
00:50:08,360 --> 00:50:17,160
uh kind of correction where you take an absolute of oops not of this

455
00:50:20,840 --> 00:50:21,960
an absolute of this

456
00:50:24,360 --> 00:50:28,120
minus 0.3 uh no

457
00:50:30,760 --> 00:50:34,440
wait uh yeah

458
00:50:36,280 --> 00:50:41,160
yes and define that this is smaller than one

459
00:50:44,200 --> 00:50:48,040
smaller than whatever epsilon you want to choose um

460
00:50:48,040 --> 00:50:51,960
don't choose something too large and don't choose something too small

461
00:50:51,960 --> 00:50:55,760
yeah this

462
00:50:55,760 --> 00:50:58,240
1 and then

463
00:50:58,240 --> 00:51:00,540
10 raised to minus 6 is

464
00:51:00,540 --> 00:51:01,440
yeah I mean

465
00:51:01,440 --> 00:51:04,980
take something that's

466
00:51:04,980 --> 00:51:05,480
appropriate

467
00:51:05,480 --> 00:51:08,800
it's rather commonly used tolerance I would say

468
00:51:08,800 --> 00:51:10,620
like if you have no specific reason

469
00:51:10,620 --> 00:51:12,160
for choosing a

470
00:51:12,160 --> 00:51:14,220
given tolerance then this

471
00:51:14,220 --> 00:51:16,620
1 minus 6 or 1 minus 9

472
00:51:16,620 --> 00:51:18,940
you might

473
00:51:18,940 --> 00:51:20,800
even have if you have more

474
00:51:20,800 --> 00:51:27,520
complex programs some some programs especially some optimizers allow you to set tolerances

475
00:51:27,520 --> 00:51:32,940
for optimal solutions and things and if you if you are setting a tolerance

476
00:51:32,940 --> 00:51:40,280
you should make sure that your assertion for something is also within that tolerance even

477
00:51:40,280 --> 00:51:46,640
if you know the correct result because you just allowed the the the program to be not exact

478
00:51:46,640 --> 00:51:52,160
and that might lead to essentially going into the documentation

479
00:51:52,160 --> 00:51:54,360
and see what is the default tolerance for this.

480
00:51:55,500 --> 00:51:58,100
So if you have an optimization problem

481
00:51:58,100 --> 00:52:02,920
and the optimization says, yeah, up to 1 to the minus 9,

482
00:52:03,820 --> 00:52:08,820
you shouldn't assume that your optimal solution,

483
00:52:08,980 --> 00:52:12,980
even if you know what it is, is exactly that

484
00:52:12,980 --> 00:52:19,380
but could be up to minus nine worse than what you expect.

485
00:52:23,500 --> 00:52:28,680
So yeah, each test framework has its own way

486
00:52:28,680 --> 00:52:29,620
of collecting the tests.

487
00:52:29,880 --> 00:52:32,340
For PyTest, it's relatively simple.

488
00:52:32,840 --> 00:52:36,340
If you have a function, I can actually quickly show that.

489
00:52:42,980 --> 00:52:52,820
oh this would be done

490
00:52:58,020 --> 00:53:03,620
so and if i now

491
00:53:04,260 --> 00:53:08,500
just say please run this on this folder it will collect

492
00:53:08,500 --> 00:53:16,980
the from the test example pi will collect test add which we had defined that okay we import

493
00:53:16,980 --> 00:53:23,860
the add function from example and then have the test function here so it will look into all files

494
00:53:23,860 --> 00:53:30,580
that have test underscore select collect all functions that start with test underscore and

495
00:53:30,580 --> 00:53:37,140
run those and it does not run the test underscore from example.py because example.py doesn't start

496
00:53:37,140 --> 00:53:52,420
with a test underscore yeah okay this much for the local testing were there any questions [name]

497
00:53:53,540 --> 00:53:54,660
yes let me check

498
00:53:54,660 --> 00:54:01,860
No, not at this point.

499
00:54:01,860 --> 00:54:11,060
Okay, then let's go on to automated testing, which is actually really a convenient feature

500
00:54:11,060 --> 00:54:14,480
of GitHub, but also GitLab.

501
00:54:14,480 --> 00:54:23,220
So to make sure that your code stays correct or that your tests are still running, you

502
00:54:23,220 --> 00:54:29,320
You could, of course, always, before pushing something, run PyTest or whatever testing framework you have.

503
00:54:30,140 --> 00:54:34,540
But on tendency, at least I tend to forget these kind of things.

504
00:54:35,460 --> 00:54:41,360
So having someone else automatically do it for you is really, really convenient.

505
00:54:41,360 --> 00:54:49,820
And that's where something called continuous integration or continuous development comes in.

506
00:54:49,820 --> 00:54:58,440
so continuous integration essentially makes sure that even if you change something the tests are

507
00:54:58,440 --> 00:55:02,660
still working this is of course under the assumption that the tests haven't changed

508
00:55:02,660 --> 00:55:09,240
haven't changed um so if you change your tests um things can fail and sometimes you unfortunately

509
00:55:09,240 --> 00:55:16,480
have to have to change tests if uh the preconditions for the test change but

510
00:55:16,480 --> 00:55:18,540
on a normal assumption

511
00:55:18,540 --> 00:55:20,860
tests should be

512
00:55:20,860 --> 00:55:23,160
as static as possible and not

513
00:55:23,160 --> 00:55:23,860
change

514
00:55:23,860 --> 00:55:25,480
so

515
00:55:25,480 --> 00:55:29,000
in this example we will essentially

516
00:55:29,000 --> 00:55:30,480
run

517
00:55:30,480 --> 00:55:33,380
a small

518
00:55:33,380 --> 00:55:35,160
example for a continuous integration

519
00:55:35,160 --> 00:55:39,060
test with GitHub

520
00:55:39,060 --> 00:55:41,180
and

521
00:55:41,180 --> 00:55:43,200
the assumption is

522
00:55:43,200 --> 00:55:43,740
you have

523
00:55:44,700 --> 00:55:51,020
you have your git login and everything and we'll begin with just creating a new repository

524
00:55:52,220 --> 00:55:58,540
so this is from your uh from yeah from github if you

525
00:56:00,780 --> 00:56:02,940
click on new repository you end up in here

526
00:56:04,460 --> 00:56:09,020
we don't want to have a template name but we want to call it example ci

527
00:56:13,740 --> 00:56:34,660
and want to add a read me so that we can make this relatively easily so let's

528
00:56:34,660 --> 00:56:48,180
clone this and have it in here so we have a example ci with a readme okay

529
00:56:51,380 --> 00:56:57,780
now we want to have we want to do exactly this split into functions and test functions here

530
00:56:57,780 --> 00:56:59,800
so we have

531
00:56:59,800 --> 00:57:03,620
a file called

532
00:57:03,620 --> 00:57:04,640
functions.py

533
00:57:04,640 --> 00:57:07,120
and we want

534
00:57:07,120 --> 00:57:09,980
to add this code

535
00:57:09,980 --> 00:57:14,700
and

536
00:57:14,700 --> 00:57:17,580
there are some

537
00:57:17,580 --> 00:57:18,900
mistakes in here

538
00:57:18,900 --> 00:57:21,540
this is also something that you could call

539
00:57:21,540 --> 00:57:23,240
test-driven development

540
00:57:23,240 --> 00:57:26,380
because we are

541
00:57:26,380 --> 00:57:42,300
To some extent, we have tests before we actually do the final coding here.

542
00:57:45,820 --> 00:57:49,020
Even though our tests are currently not yet active.

543
00:57:50,940 --> 00:57:55,260
But these are the two tests, the two files that we have.

544
00:57:56,380 --> 00:58:24,380
And we need to add them with a small comment and push it to our

545
00:58:24,380 --> 00:58:38,220
push it to our remote so if we run our tests locally they seem to work

546
00:58:38,220 --> 00:58:47,140
because we haven't activated the subject tests and the car the Fahrenheit tests yet

547
00:58:47,140 --> 00:58:54,020
because if we would activate them they wouldn't work so to add automated testing it's actually

548
00:58:54,020 --> 00:59:06,780
relatively easy if we are in our repository and click on actions we have

549
00:59:06,780 --> 00:59:13,040
this get started with github actions and we want to use this Python application

550
00:59:13,040 --> 00:59:22,520
and configure this Python application so I'm you and did we talk about github

551
00:59:22,520 --> 00:59:31,560
actions in uh last week i think so um yeah but you you i think it's good if you walk it through

552
00:59:34,760 --> 00:59:35,480
in general

553
00:59:37,720 --> 00:59:44,440
how can i we spoke about it yesterday when it comes to deploying uh documentation with uh

554
00:59:44,440 --> 00:59:54,600
in general um github action is something that is run every time um something happens on your

555
00:59:54,600 --> 01:00:00,480
branch so in this case we tell it that it should do something on push

556
01:00:00,480 --> 01:00:08,140
and it should do something on pull requests and we also um one

557
01:00:08,140 --> 01:00:19,260
yeah i'll just copy that um and we give it certain permissions uh as to the contents of the of uh the

558
01:00:19,980 --> 01:00:26,540
of the repository and the main permission here is sorry is read permission so that it can see what's

559
01:00:26,540 --> 01:00:33,660
happening in there and um for our for our action we also want to give it a write access to pull

560
01:00:33,660 --> 01:00:39,980
requests because what we want to do is we want to write something in the end into the

561
01:00:41,260 --> 01:00:47,900
pull request that's concerning coverage because we want to see what our tests actually cover

562
01:00:49,500 --> 01:00:54,060
and to be able to do that we need to allow it to write into pull requests

563
01:00:54,060 --> 01:00:59,680
then I go over in here

564
01:00:59,680 --> 01:01:02,800
then it essentially is telling it what

565
01:01:02,800 --> 01:01:07,260
sorry

566
01:01:07,260 --> 01:01:11,820
then it's telling it what kind of basic image to use

567
01:01:11,820 --> 01:01:16,620
and then there are the steps into what it should do

568
01:01:16,620 --> 01:01:20,680
so it uses a checkout action, that's a different action that

569
01:01:20,680 --> 01:01:23,200
checks out the repository

570
01:01:23,200 --> 01:01:25,260
action that

571
01:01:25,260 --> 01:01:29,180
sets up Python and this

572
01:01:29,180 --> 01:01:30,520
is where we

573
01:01:30,520 --> 01:01:33,140
want to add

574
01:01:33,140 --> 01:01:35,980
our

575
01:01:35,980 --> 01:01:38,900
instead of just

576
01:01:38,900 --> 01:01:41,080
pytest we also want to add

577
01:01:41,080 --> 01:01:43,260
the pytest cuff package

578
01:01:43,260 --> 01:01:45,500
which essentially allows us to

579
01:01:45,500 --> 01:01:47,060
add this coverage

580
01:01:47,060 --> 01:01:48,000
report in the end

581
01:01:48,000 --> 01:01:53,040
then it does

582
01:01:53,040 --> 01:01:56,880
some linting with Flake so that

583
01:01:56,880 --> 01:02:00,260
our code style is

584
01:02:00,260 --> 01:02:05,300
better or that it at least complains if the code style is not good

585
01:02:05,300 --> 01:02:07,960
and then

586
01:02:07,960 --> 01:02:13,220
we want to

587
01:02:13,220 --> 01:02:17,320
run pytest and in pytest we want to create

588
01:02:17,320 --> 01:02:19,720
a coverage report

589
01:02:19,720 --> 01:02:21,620
and the coverage report can come

590
01:02:21,620 --> 01:02:22,620
in different formats

591
01:02:22,620 --> 01:02:25,580
and we want to have it in an XML

592
01:02:25,580 --> 01:02:27,660
format because the XML format is what

593
01:02:27,660 --> 01:02:29,860
is going to be used

594
01:02:29,860 --> 01:02:31,900
in the

595
01:02:31,900 --> 01:02:32,700
next stage

596
01:02:32,700 --> 01:02:35,000
or in the next step

597
01:02:35,000 --> 01:02:37,460
and we want to create the coverage report

598
01:02:37,460 --> 01:02:39,160
for the whole folder

599
01:02:39,160 --> 01:02:43,620
and this create coverage

600
01:02:43,620 --> 01:02:44,580
is another action

601
01:02:44,580 --> 01:02:49,800
that was it was implemented and that is a very simplistic coverage report that's

602
01:02:49,800 --> 01:03:00,420
being put into pull requests okay and now how do I get rid of this sidebar

603
01:03:00,420 --> 01:03:06,680
here seemingly can't which is really annoying because it covers half of my

604
01:03:06,680 --> 01:03:15,160
okay then we want to commit these changes and they will be in the dot

605
01:03:15,160 --> 01:03:26,640
github workflows folder and let's call this at CI CD and commit directly to the

606
01:03:26,640 --> 01:03:33,720
main branch yes so now this has been added and now we have an action that

607
01:03:33,720 --> 01:03:46,440
says CI CD and builds this Python app. This will take a little bit of time and at some point

608
01:03:49,560 --> 01:03:50,200
this is done.

609
01:03:54,680 --> 01:04:01,560
So let's see what this has actually done. Okay, so this has run a setup the job,

610
01:04:01,560 --> 01:04:08,600
done the different steps, but it didn't create coverage. The reason why it didn't create coverage

611
01:04:09,640 --> 01:04:17,480
is that we restricted this to only create coverages on pull requests, because

612
01:04:20,120 --> 01:04:26,920
it doesn't, for this specific action, make sense to create these coverage reports during a push or

613
01:04:26,920 --> 01:04:30,200
or in this case, a direct commit,

614
01:04:30,200 --> 01:04:32,420
which is essentially a push,

615
01:04:32,420 --> 01:04:33,900
because it doesn't have anything

616
01:04:33,900 --> 01:04:37,080
to put the coverage report into.

617
01:04:38,660 --> 01:04:43,660
So let's see, they have been run,

618
01:04:46,920 --> 01:04:51,920
and we can go back here and let's pull what we have.

619
01:04:56,920 --> 01:05:08,360
Yeah, Git pull origin main is essentially the same as just Git pull in this instance, because I'm on the main branch, which is tracking the remote or the origins main.

620
01:05:11,060 --> 01:05:22,360
Now, we want to update our test functions to actually.

621
01:05:26,920 --> 01:05:41,680
run the test subtraction check and yeah because we've noticed that there is an

622
01:05:41,680 --> 01:05:47,440
issue with the CI CD there was the subtraction we create a new issue

623
01:05:56,920 --> 01:06:15,080
This is not something that you need to do, but this is the assumption that someone else

624
01:06:15,080 --> 01:06:21,520
has created this issue, because they noticed that something is wrong.

625
01:06:21,520 --> 01:06:49,860
Actually, I forgot to actually add this and push it.

626
01:06:49,860 --> 01:06:55,140
So and if you now look into the actions, there's the test for subtract that has been added

627
01:06:55,140 --> 01:07:00,060
and the action is being run again.

628
01:07:00,060 --> 01:07:09,500
So [name], as mentioned, so it was the question here on the document, whether this is type

629
01:07:09,500 --> 01:07:15,660
along or pure demo and what we're doing now is pure demonstrations.

630
01:07:15,660 --> 01:07:22,140
please follow along and and then you you can do the exercise on your own later

631
01:07:25,100 --> 01:07:26,380
yeah um

632
01:07:31,260 --> 01:07:32,380
okay uh so

633
01:07:34,540 --> 01:07:44,540
let's see and we actually far have a this build failed because in the tests the tests indicated

634
01:07:44,540 --> 01:07:57,660
that 5 is not minus 1, and 5 is what comes out of subtract 2 and 3.

635
01:07:58,460 --> 01:08:05,740
So seemingly our function is wrong. Well, you might have seen that right in the beginning.

636
01:08:05,740 --> 01:08:20,140
So, we need to fix this.

637
01:08:20,140 --> 01:08:24,780
And add the functions.

638
01:08:24,780 --> 01:08:43,340
Yeah, this is now a bit the wrong way around, but I forgot to create the branch.

639
01:08:43,340 --> 01:09:09,780
So now I've fixed this issue.

640
01:09:09,780 --> 01:09:39,100
And we'll create a pull request to change this.

641
01:09:39,100 --> 01:09:49,700
And there are no conflicts, but there is an action that's being run.

642
01:09:49,700 --> 01:09:56,460
And let's see if this fixed our problem.

643
01:09:56,460 --> 01:10:03,180
So actually, and now we see what this coverage bot does, or this coverage report does.

644
01:10:03,180 --> 01:10:08,200
So there is a current status, there were no new files added, functions.py has a coverage

645
01:10:08,200 --> 01:10:09,160
of 75%

646
01:10:09,160 --> 01:10:12,220
and it essentially tells us

647
01:10:12,220 --> 01:10:14,380
okay, this is the coverage of the code

648
01:10:14,380 --> 01:10:16,480
that we have at the moment, 75%

649
01:10:16,480 --> 01:10:18,260
and all the tests

650
01:10:18,260 --> 01:10:18,940
worked. So

651
01:10:18,940 --> 01:10:21,140
that's

652
01:10:21,140 --> 01:10:24,280
quite

653
01:10:24,280 --> 01:10:26,380
okay. So let's

654
01:10:26,380 --> 01:10:26,980
merge this.

655
01:10:32,180 --> 01:10:34,180
Let's see if I completely screw up.

656
01:10:38,200 --> 01:10:44,920
No. Okay. So, I could pull this back to my main branch here.

657
01:10:47,960 --> 01:10:57,080
Okay. So, what's the next? Next, we do have more tests

658
01:10:57,080 --> 01:11:04,080
that we already had

659
01:11:04,080 --> 01:11:06,000
well

660
01:11:06,000 --> 01:11:08,700
the optimal that we could have

661
01:11:08,700 --> 01:11:10,580
is that we get 100% coverage

662
01:11:10,580 --> 01:11:12,320
but this is

663
01:11:12,320 --> 01:11:13,760
not something that you

664
01:11:13,760 --> 01:11:16,220
commonly manage to get

665
01:11:16,220 --> 01:11:17,540
but

666
01:11:17,540 --> 01:11:20,240
for this simple thing we can

667
01:11:20,240 --> 01:11:21,880
probably try to do this

668
01:11:21,880 --> 01:11:24,860
so we also

669
01:11:24,860 --> 01:11:26,500
uncomment this test

670
01:11:26,500 --> 01:11:34,340
for the for the fahrenheit check and and here it's a bit more it's a bit more

671
01:11:37,380 --> 01:11:42,580
complicated um and i'll quickly go over what this is doing so

672
01:11:44,580 --> 01:11:54,660
this is actually the pi test version of um of having this absolute and this is probably what

673
01:11:54,660 --> 01:11:58,420
you should be doing under normal circumstances so this is approximating

674
01:11:59,620 --> 01:12:04,420
um that this number that the reset from here should be approximately 50

675
01:12:05,300 --> 01:12:14,020
given some tolerance and in this case the pi test default tolerance and there's also um a function a

676
01:12:14,020 --> 01:12:24,260
uh an additional yeah there's an additional um statement here which is sometimes functions do uh

677
01:12:24,260 --> 01:12:33,940
are expected to raise errors if they get inputs that are wrong or that are unexpected.

678
01:12:34,500 --> 01:12:41,060
And we can test this by having this with PyTest.Raises assertion error.

679
01:12:45,780 --> 01:12:51,620
If this does not raise the assertion error, then it will fail.

680
01:12:52,580 --> 01:12:55,460
So let's see.

681
01:12:58,980 --> 01:13:01,140
Let's see what happens if we run the pytest here.

682
01:13:02,820 --> 01:13:08,020
Okay, so there is definitely an issue with what we have here.

683
01:13:10,580 --> 01:13:16,420
And we need to fix our Fahrenheit code.

684
01:13:16,420 --> 01:13:39,220
and I let's do this now and and now I admit let's see we had a working

685
01:13:39,220 --> 01:13:48,340
fahrenheit functions um fahrenheit function in the start and the motivation because my stuff is ah

686
01:13:49,060 --> 01:13:51,300
it's just the nine of the five divided by nine

687
01:13:55,860 --> 01:14:06,100
and this is working so okay and if you run the part it's still um we have still an issue because

688
01:14:06,100 --> 01:14:13,700
it doesn't raise an error and that's uh well actually correct because uh or

689
01:14:14,820 --> 01:14:16,900
it's actually good that air that we have this because

690
01:14:17,700 --> 01:14:22,820
um we would expect that we can't convert something that's below zero kelvin

691
01:14:24,340 --> 01:14:29,940
so a value of minus 600 celsius of minus 600 front right just doesn't make any sense

692
01:14:29,940 --> 01:14:33,700
so what's the

693
01:14:33,700 --> 01:14:39,300
what's the

694
01:14:39,300 --> 01:14:40,440
actual

695
01:14:40,440 --> 01:14:45,180
let's see

696
01:14:45,180 --> 01:14:58,980
what's the minimum Fahrenheit

697
01:14:58,980 --> 01:15:20,100
Minimum well-defined number of Fahrenheit.

698
01:15:20,100 --> 01:15:21,100
Something like this.

699
01:15:21,100 --> 01:15:22,100
Yeah.

700
01:15:22,100 --> 01:15:23,100
Could be.

701
01:15:23,100 --> 01:15:24,100
Yes.

702
01:15:24,100 --> 01:15:25,600
I never thought about it.

703
01:15:25,600 --> 01:15:26,600
That's zero Kelvin.

704
01:15:26,600 --> 01:15:27,600
Yes.

705
01:15:27,600 --> 01:15:28,840
At least according to Google.

706
01:15:29,840 --> 01:15:32,340
And if it has this, that works.

707
01:15:33,160 --> 01:15:43,740
And we can, of course, also just, I won't, let's.

708
01:15:57,600 --> 01:16:24,500
So, edit, put it on, put it to the repository, and then

709
01:16:24,500 --> 01:16:29,780
we also see that the issue has been closed

710
01:16:29,780 --> 01:16:31,920
because we had a fix in this

711
01:16:31,920 --> 01:16:32,820
one per request

712
01:16:32,820 --> 01:16:35,840
don't really need further descriptions

713
01:16:35,840 --> 01:16:40,020
but let's see what

714
01:16:40,020 --> 01:16:41,880
the coverage report

715
01:16:41,880 --> 01:16:43,480
will tell us in a second

716
01:16:43,480 --> 01:16:45,580
I think this is a good

717
01:16:45,580 --> 01:16:48,080
finish of the first of this

718
01:16:48,080 --> 01:16:50,080
lecture here or of the first

719
01:16:50,080 --> 01:16:50,620
part here

720
01:16:50,620 --> 01:16:52,980
and then

721
01:16:52,980 --> 01:16:56,780
so we have 100% coverage

722
01:16:56,780 --> 01:16:58,980
reached even with a test

723
01:16:58,980 --> 01:17:00,980
that even having a test

724
01:17:00,980 --> 01:17:01,300
that

725
01:17:01,300 --> 01:17:04,840
uses or that checks for

726
01:17:04,840 --> 01:17:06,440
errors being thrown from the function

727
01:17:06,440 --> 01:17:10,380
and I think that's a good

728
01:17:10,380 --> 01:17:12,940
time to go for a short

729
01:17:12,940 --> 01:17:14,500
break or

730
01:17:14,500 --> 01:17:18,600
yes yeah thank you [name]

731
01:17:18,600 --> 01:17:21,060
that sounds good

732
01:17:21,060 --> 01:17:22,340
so

733
01:17:22,340 --> 01:17:31,800
So we will then have a 10 minute break and reconvene at 10 past the full hour.

734
01:17:33,800 --> 01:17:34,760
Bye.

735
01:17:52,340 --> 01:17:53,380
you

736
01:18:22,340 --> 01:18:23,380
you

737
01:18:52,340 --> 01:18:53,380
you

738
01:19:22,340 --> 01:19:23,380
you

739
01:19:52,340 --> 01:19:53,380
you

740
01:20:22,340 --> 01:20:23,380
you

741
01:20:52,340 --> 01:20:53,380
you

742
01:21:22,340 --> 01:21:23,380
you

743
01:21:52,340 --> 01:21:53,380
you

744
01:22:22,340 --> 01:22:23,380
you

745
01:22:52,340 --> 01:22:53,380
you

746
01:23:22,340 --> 01:23:23,380
you

747
01:23:52,340 --> 01:23:53,380
you

748
01:24:22,340 --> 01:24:23,380
you

749
01:24:52,340 --> 01:24:53,380
you

750
01:25:22,340 --> 01:25:23,380
you

751
01:25:52,340 --> 01:25:53,380
you

752
01:26:22,340 --> 01:26:23,380
you

753
01:26:52,340 --> 01:26:53,380
you

754
01:27:22,340 --> 01:27:23,380
you

755
01:27:52,340 --> 01:27:53,380
you

756
01:28:22,340 --> 01:28:33,140
hi so we are back and we are back with test design and I'll hand over to [name]

757
01:28:33,140 --> 01:28:44,060
for that thank you [name] so what we will do now will be also be a bit

758
01:28:44,060 --> 01:28:50,780
hands-on we will now be back to we we we saw here before the break uh automated

759
01:28:52,140 --> 01:28:57,580
testing and and too much was showing how this can be done with github actions

760
01:28:58,940 --> 01:29:03,900
um we could perhaps there was one a few good questions here that we could

761
01:29:06,780 --> 01:29:07,980
highlight here so

762
01:29:07,980 --> 01:29:18,060
So first of all, you're very welcome to work through these automated testing exercises

763
01:29:18,060 --> 01:29:20,380
on your own.

764
01:29:20,380 --> 01:29:24,240
And if you have any questions, you can then certainly, as usual, put them here in the

765
01:29:24,240 --> 01:29:29,380
collaborative document.

766
01:29:29,380 --> 01:29:32,600
How often do you use automated testing?

767
01:29:32,600 --> 01:29:38,360
It depends a lot on the code that I'm working on.

768
01:29:38,360 --> 01:29:44,780
The more likely it is to go into some kind of production, the more likely it is to have

769
01:29:44,780 --> 01:29:46,180
tests.

770
01:29:46,180 --> 01:29:53,720
So one thing which has become very popular and is very useful is this that you set up

771
01:29:53,720 --> 01:30:03,800
up when you host a git repository on github or be it on github then you can then if you are

772
01:30:04,520 --> 01:30:11,960
the maintainer of that repo you can enforce so that i mean first and foremost you cannot just

773
01:30:11,960 --> 01:30:21,320
commit stuff directly to me to the main bronze then secondly when you contribute stuff to fit

774
01:30:21,320 --> 01:30:30,760
your brand then that's a very good location a natural location to to say require that to do

775
01:30:30,760 --> 01:30:37,960
testing so probably if you're developing code and you do it locally on your local computer then you

776
01:30:37,960 --> 01:30:43,880
can run the tests with pipe test or another framework and you do it locally and then when

777
01:30:43,880 --> 01:30:55,000
you commit this new code to your feature branch and you make a merge request back to GitHub, then

778
01:30:57,800 --> 01:31:00,040
that's a good occasion then to request that, okay,

779
01:31:01,880 --> 01:31:08,120
before being able to merge the code, we would like to see all of these tests being passed.

780
01:31:08,120 --> 01:31:15,260
that's definitely something that i've seen being done for larger projects um

781
01:31:15,260 --> 01:31:21,800
where you have multiple different contributors and you just want to make sure that you have a

782
01:31:21,800 --> 01:31:30,220
high quality code base and yeah testing helps in maintaining that high quality code base

783
01:31:30,220 --> 01:31:32,680
especially

784
01:31:32,680 --> 01:31:35,960
and I think this is

785
01:31:35,960 --> 01:31:38,100
very important

786
01:31:38,100 --> 01:31:39,960
indeed it's very important

787
01:31:39,960 --> 01:31:40,600
for larger

788
01:31:40,600 --> 01:31:43,180
projects where you

789
01:31:43,180 --> 01:31:45,680
simply need to have this a little bit

790
01:31:45,680 --> 01:31:47,860
you need to have a bit of bookkeeping

791
01:31:47,860 --> 01:31:50,260
of some kind

792
01:31:50,260 --> 01:31:52,060
because

793
01:31:52,060 --> 01:31:54,120
it's not so that you might

794
01:31:54,120 --> 01:31:55,900
have like in smaller settings

795
01:31:55,900 --> 01:31:58,160
perhaps you have the colleague in the same room

796
01:31:58,160 --> 01:32:00,160
or in the same corridor

797
01:32:00,160 --> 01:32:05,760
you can just go and ask them and so forth but if you're 20 person you sit at five different

798
01:32:05,760 --> 01:32:15,760
locations then you need to have some procedures for this and and what is then provided by these

799
01:32:16,960 --> 01:32:23,840
services companies github gitlab bitbucket and so forth that that's it's a good platform

800
01:32:23,840 --> 01:32:38,660
so what we are going to talk now about is test design so this will be a little bit also provide

801
01:32:38,660 --> 01:32:48,140
examples of how you can for a few different types of functions or different or different code how

802
01:32:48,140 --> 01:32:56,940
you can write tests and you can see here in in the lesson material and perhaps [name]

803
01:32:58,140 --> 01:33:05,340
can you check if we have the direct link to this episode in the notes yes it is okay great

804
01:33:06,620 --> 01:33:17,020
so we will take it here from the top um and uh work few some other examples and yeah this will

805
01:33:17,020 --> 01:33:26,220
be a demo but i will do it rather slow so yeah certainly if you want you can do it a little bit

806
01:33:26,220 --> 01:33:34,460
type along like it but also perfectly fine to get back to it later so

807
01:33:39,180 --> 01:33:44,860
as you can see here we have language specific instructions and that means that

808
01:33:47,020 --> 01:33:57,740
the template codes are available in one-on-one language and also here we have some instructions

809
01:33:57,740 --> 01:34:04,580
on various frameworks for other codes so we'll get back to that a little bit later but for

810
01:34:04,580 --> 01:34:13,880
the beginning here we will work a bit continue to work with Python.

811
01:34:13,880 --> 01:34:25,560
So we have here a function it's called well simply factorial and what it's done what it's

812
01:34:25,560 --> 01:34:34,600
doing is is rather clear it takes one input argument and that is an integer number and

813
01:34:34,600 --> 01:34:40,660
for this input argument it calculates the factorial.

814
01:34:40,660 --> 01:34:53,220
So [name], is this code that can be tested or is there some, let's say, pitfall that

815
01:34:53,220 --> 01:34:55,120
makes it difficult to test?

816
01:34:55,120 --> 01:35:00,760
This is relatively straightforward because you have a clear function that gets inputs

817
01:35:00,760 --> 01:35:01,760
and outputs.

818
01:35:01,760 --> 01:35:07,640
You can test for the value error with PyTester erasers.

819
01:35:07,640 --> 01:35:09,560
can test multiple different values

820
01:35:09,560 --> 01:35:11,600
for it. There is

821
01:35:11,600 --> 01:35:12,460
nothing that

822
01:35:12,460 --> 01:35:15,400
kind of happens on the side

823
01:35:15,400 --> 01:35:17,460
that you have to take care of because

824
01:35:17,460 --> 01:35:18,580
it's all

825
01:35:18,580 --> 01:35:21,460
internal. There's not

826
01:35:21,460 --> 01:35:23,560
even any... There's one

827
01:35:23,560 --> 01:35:25,600
somewhat function called

828
01:35:25,600 --> 01:35:27,580
the range, but

829
01:35:27,580 --> 01:35:29,420
let's assume that

830
01:35:29,420 --> 01:35:31,160
what...

831
01:35:31,160 --> 01:35:33,480
that the Python basic language is

832
01:35:33,480 --> 01:35:33,900
correct.

833
01:35:36,520 --> 01:35:37,240
Yes.

834
01:35:37,640 --> 01:35:50,640
So I will now shift over to the terminal and then we'll have a look on how this code can be tested.

835
01:35:50,640 --> 01:35:54,640
So first I copy the code.

836
01:35:54,640 --> 01:35:59,640
So it's like a definition and.

837
01:35:59,640 --> 01:36:05,640
Yeah, OK, I already had it here.

838
01:36:05,640 --> 01:36:19,760
And also, yeah, actually, I also already had here what is then, let's say, the way how to get started to set up the tests.

839
01:36:19,760 --> 01:36:22,380
So we will here use PyTest.

840
01:36:24,360 --> 01:36:28,780
So, yeah, first is the function.

841
01:36:28,780 --> 01:36:44,340
and adding to this we have the import statement import pytest and we'll then add some assertions

842
01:36:44,340 --> 01:36:56,100
and this case here it is it's rather clear upfront what this could be so yeah the

843
01:36:56,100 --> 01:37:06,180
factorial of zero by definition is one then factorial of one is also one

844
01:37:06,180 --> 01:37:14,780
and factorial of two is two and so we have now here in this case here three

845
01:37:14,780 --> 01:37:23,640
assertions in the code and in the test factorial function so let's see if we

846
01:37:23,640 --> 01:37:33,640
to the terminal what happens if you execute it and as usual we then invoke it with the

847
01:37:33,640 --> 01:37:36,920
pi test so pi test factorial dot pi

848
01:37:41,560 --> 01:37:48,920
and yeah it collected this test item and it came out correctly and it was very fast

849
01:37:48,920 --> 01:37:55,660
i would i would want to add one thing i dislike one thing about this test

850
01:37:55,660 --> 01:38:03,480
and that is that it doesn't test for the um for the value arrow that is raised for n and smaller

851
01:38:03,480 --> 01:38:13,120
than zero yes very good point very good point um because that is an essential part of this

852
01:38:13,120 --> 01:38:19,520
function and it should not return something when a value of smaller than zero gets put in.

853
01:38:22,320 --> 01:38:29,280
There's even things where are factorials of non-integer numbers even defined? I don't

854
01:38:29,280 --> 01:38:36,000
think so. So this function should make a couple more tests actually. Yes.

855
01:38:38,800 --> 01:38:40,560
That could be called in a test.

856
01:38:43,120 --> 01:38:45,740
Just having a couple more assertions, and yeah.

857
01:38:50,140 --> 01:38:54,160
Yes, so that's a good suggestion.

858
01:39:02,540 --> 01:39:05,540
So here, so the assertion statements as we have them here

859
01:39:05,540 --> 01:39:11,740
are for the output, I mean, this is...

860
01:39:11,740 --> 01:39:12,560
For the outputs, yes.

861
01:39:12,560 --> 01:39:16,960
Yeah, I mean, this forces a valid input and you have the valid outputs.

862
01:39:18,520 --> 01:39:22,460
So how could we then do that?

863
01:39:22,880 --> 01:39:29,340
So actually, like here, as you can see up here, already in the definition of this code,

864
01:39:31,520 --> 01:39:39,520
we do have, I mean, we have this check for the argument built into the method,

865
01:39:39,520 --> 01:39:41,260
to the function itself.

866
01:39:42,560 --> 01:40:05,560
So in this case here, we already have a bit of functionality to test for it.

867
01:40:05,560 --> 01:40:14,800
So I would say that this is, I mean, what we have here, raise value error, that is something

868
01:40:14,800 --> 01:40:26,560
with this, there's a specific, that's error handling, namely is that a program, I mean,

869
01:40:26,560 --> 01:40:34,440
we didn't talk about that earlier, but that is something which is rather important for

870
01:40:34,440 --> 01:40:43,920
usability for a program because when you have an intended use case and and if you

871
01:40:43,920 --> 01:40:50,400
are making the code I mean if you're working the code with the inputs which

872
01:40:50,400 --> 01:41:00,600
are nonsensical then it's always good to guide the use of the program to in

873
01:41:00,600 --> 01:41:08,280
right direction so in this case here it will point out that it's not a meaningful thing to

874
01:41:08,280 --> 01:41:16,040
try to calculate factorial for a negative number to me it's uh it's something that i think is

875
01:41:16,040 --> 01:41:21,560
relatively important if you have these kind of functions because it's um very very often uh if

876
01:41:21,560 --> 01:41:27,880
you have a function that can just accept any anything and gives you something you end up with

877
01:41:27,880 --> 01:41:32,080
well, you end up with wrong results

878
01:41:32,080 --> 01:41:35,400
instead of having an error thrown at you.

879
01:41:36,240 --> 01:41:39,440
And wrong results is something that

880
01:41:39,440 --> 01:41:41,480
if you notice that they are wrong,

881
01:41:42,280 --> 01:41:44,120
then, okay, you can start debugging,

882
01:41:44,840 --> 01:41:47,780
but you might even miss that they are wrong.

883
01:41:49,160 --> 01:41:54,140
So if a function is by definition

884
01:41:54,140 --> 01:41:56,440
only allowed to do certain things,

885
01:41:56,440 --> 01:42:01,660
and you expect this function to be used in larger code,

886
01:42:01,660 --> 01:42:05,500
it might make sense to make sure

887
01:42:05,500 --> 01:42:08,640
that it doesn't get wrong inputs

888
01:42:08,640 --> 01:42:13,760
and assert that certain things are not happening

889
01:42:13,760 --> 01:42:17,580
because otherwise you essentially make yourself open to,

890
01:42:18,220 --> 01:42:21,620
well, someone has put a wrong number in there

891
01:42:21,620 --> 01:42:24,900
and you now get complete bollocks

892
01:42:24,900 --> 01:42:27,640
and your results suddenly are

893
01:42:27,640 --> 01:42:29,480
looking nonsensical.

894
01:42:29,820 --> 01:42:31,200
I have had that

895
01:42:31,200 --> 01:42:33,620
in the past that I had a function that

896
01:42:33,620 --> 01:42:35,340
I

897
01:42:35,340 --> 01:42:37,740
expected something to happen

898
01:42:37,740 --> 01:42:39,680
and it didn't because

899
01:42:39,680 --> 01:42:39,960
it

900
01:42:39,960 --> 01:42:43,400
had the wrong input

901
01:42:43,400 --> 01:42:44,920
parameters.

902
01:42:46,140 --> 01:42:47,100
And then it was

903
01:42:47,100 --> 01:42:49,440
a lot of work or a lot of

904
01:42:49,440 --> 01:42:51,540
time spent finding what exactly

905
01:42:51,540 --> 01:42:53,780
went wrong because I got results

906
01:42:54,660 --> 01:43:00,660
but they were just complete bullocks they were complete nonsense and that's something that's

907
01:43:00,660 --> 01:43:09,620
really difficult to debug sometimes yeah yeah you're right about that um i'll say that

908
01:43:13,540 --> 01:43:18,660
i think it goes i mean in in many different fields of science

909
01:43:18,660 --> 01:43:27,980
it is so that i mean the complexity is there which means that if you would like to cover

910
01:43:27,980 --> 01:43:36,480
for all of these scenarios to i mean to provide let's say input which is nonsensical i mean

911
01:43:36,480 --> 01:43:44,700
that the more you can try to catch the better i mean the example i've had here for the factorial

912
01:43:44,700 --> 01:43:55,100
is i mean as simple as as it can be um i mean i know some programs where you have let's say

913
01:43:55,100 --> 01:44:02,140
in the input file you can have two or even 300 different keywords and perhaps the range

914
01:44:02,140 --> 01:44:09,260
with keyword if it is about let's say numerical values or sometimes it can be about switches so

915
01:44:09,260 --> 01:44:16,860
that you have let's say the program will work in three four or five different modes using different

916
01:44:16,860 --> 01:44:25,900
algorithms under hood sometimes i mean the i mean the common the the total number of combinations

917
01:44:25,900 --> 01:44:31,980
it is i mean it's a very very large number so this is nothing that you can exhaust

918
01:44:31,980 --> 01:44:42,120
which brings us to this that for that kind of advanced programs I mean the user has to

919
01:44:42,120 --> 01:44:55,920
be critical to how they are using the program and well often is a little bit forgiving here

920
01:44:55,920 --> 01:45:01,600
if you're doing modeling as part of research projects because after all it's not something

921
01:45:01,600 --> 01:45:08,000
which is let's say it's not air traffic control or something which is let's say mission critical

922
01:45:09,600 --> 01:45:17,280
that's entirely true i would i would just argue it also um helps it also helps you

923
01:45:17,280 --> 01:45:25,200
uh finding bucks easier like like this uh like this factorial if you if you put uh if you have

924
01:45:25,200 --> 01:45:32,320
this in a larger code and the input value for the factorial is something that's being calculated

925
01:45:34,640 --> 01:45:40,960
you could well if you if you end up with a non-integer number

926
01:45:43,440 --> 01:45:51,120
this probably will throw an error because range doesn't allow non-integer values but if you

927
01:45:51,120 --> 01:45:56,880
if you get something that's smaller than zero in your computation that you didn't expect but

928
01:45:56,880 --> 01:46:04,000
um your values given then what you will get as a result from the factorial is zero i think

929
01:46:07,760 --> 01:46:10,880
or something that is definitely not what you expected it to be

930
01:46:10,880 --> 01:46:12,880
mm-hmm

931
01:46:17,120 --> 01:46:21,200
yeah yeah oh you get one actually if you get something negative

932
01:46:30,080 --> 01:46:35,200
so so far in in the examples that we touch upon here we were working with

933
01:46:35,200 --> 01:46:44,960
with numbers be they integer or be they real so i think it would be nice to have a look on

934
01:46:44,960 --> 01:46:54,820
something which is working with other types of variables namely with strings so we have here

935
01:46:54,820 --> 01:47:03,640
an example design a test for a function that receives two strings and returns a number

936
01:47:05,200 --> 01:47:21,300
so this is here in Python we already have functionality for this implemented

937
01:47:21,300 --> 01:47:29,200
so the memory function is count word occurrence in string and we have here

938
01:47:29,200 --> 01:47:39,520
two input arguments the first is a string which contains a text and the second argument is the

939
01:47:39,520 --> 01:47:44,960
word and this is the word for which you would like to count the currents within the text

940
01:47:47,600 --> 01:47:50,800
and you can see here in the comment of the code that there's an example of

941
01:47:51,520 --> 01:47:58,480
let's say example input and then this string here one two one two three four

942
01:47:59,200 --> 01:48:06,000
if you query for the count of one then i mean the expected output is two

943
01:48:09,440 --> 01:48:10,800
so here in python

944
01:48:14,720 --> 01:48:21,280
this this function is i mean this functionality is available up front so we have here the

945
01:48:21,920 --> 01:48:30,320
text.split function which will split the text into the individual words.

946
01:48:32,080 --> 01:48:43,760
And we have then a count function so we can count the occurrence of

947
01:48:43,760 --> 01:48:53,300
the word I mean word here in singular in the words with the object which

948
01:48:53,300 --> 01:49:06,140
contains all of them all of the items in the string so we could type this through

949
01:49:06,140 --> 01:49:27,020
so I start a new source code file here word currents I call it and I paste in

950
01:49:27,020 --> 01:49:37,340
here the definition of this function so as we did earlier I mean we have this

951
01:49:37,340 --> 01:49:42,680
function defined here in the Python code and we can I mean this being a smallish

952
01:49:42,680 --> 01:49:56,120
thing we could add the test code within the same text source code file so what

953
01:49:56,120 --> 01:50:09,940
What we'll then do is we start defining a test and use the keyword test underscore and

954
01:50:09,940 --> 01:50:20,760
we then have the same name for the function as defined, it's only that we have the prefix

955
01:50:20,760 --> 01:50:23,360
of test underscore.

956
01:50:23,360 --> 01:50:31,360
Yeah, so [name], please correct me here if I do some typo.

957
01:50:31,360 --> 01:50:35,360
That looks fine.

958
01:50:35,360 --> 01:50:44,360
Okay, that's just the header of the test function and now the keyword is assert.

959
01:50:44,360 --> 01:51:06,560
and we then call the function count word occurrence in string so we then we need

960
01:51:06,560 --> 01:51:23,320
two arguments here so first you have a mini text AAA we can take BBB and we

961
01:51:23,320 --> 01:51:38,600
query for one of them okay um this example input of the very simplest form

962
01:51:40,760 --> 01:51:48,120
and this is an assert we need them to provide the expected answer and here yeah clearly

963
01:51:48,120 --> 01:52:03,060
for this text aaa bbb we clear for aaa the expected count is one okay that

964
01:52:03,060 --> 01:52:13,120
that's one variant we could then I copy this line and you can make some

965
01:52:13,120 --> 01:52:21,400
variations on width so we could then have we could add here more occurrences

966
01:52:21,400 --> 01:52:32,920
of AAA could have a CCC then I'm clear once again for for AAA yeah expected

967
01:52:32,920 --> 01:52:36,680
count here should be two

968
01:52:43,120 --> 01:52:53,280
Okay, I would say that so far it just looks a little bit, well, this is nothing difficult

969
01:52:53,280 --> 01:53:05,800
in these assert statements so far, but in texts you can have, if it's like normal language,

970
01:53:05,800 --> 01:53:11,280
You could have that your words, which are just a standalone word.

971
01:53:11,280 --> 01:53:12,120
Sorry?

972
01:53:12,120 --> 01:53:13,240
Prefixes.

973
01:53:13,240 --> 01:53:13,820
Yeah, exactly.

974
01:53:13,820 --> 01:53:14,320
Yeah.

975
01:53:14,320 --> 01:53:17,500
You can have prefixes, or you can have composed words.

976
01:53:17,500 --> 01:53:18,620
Composite words, yeah.

977
01:53:18,620 --> 01:53:19,660
Yeah.

978
01:53:19,660 --> 01:53:22,600
So that can make the thing a little bit more complicated.

979
01:53:22,600 --> 01:53:32,080
So let's here have another variant, namely

980
01:53:32,080 --> 01:53:42,080
query for just the five a's the text is five a's and here um this is a bit interesting because

981
01:53:43,120 --> 01:53:52,720
here i'm not taking this from from the lesson material and you know here the suggestion is here

982
01:53:52,720 --> 01:54:00,240
okay the sort meant is that the count should be one and i would actually say no it should be zero

983
01:54:02,080 --> 01:54:07,520
yeah or it should perhaps be three i i think it's not at all clear up front

984
01:54:08,480 --> 01:54:14,320
yeah one well to me zero or three would be acceptable one is actually

985
01:54:14,320 --> 01:54:24,480
the completely unacceptable here um three i i personally if i want to i want to have a word

986
01:54:24,480 --> 01:54:31,760
count um i would assume this is zero because there is no match i'm not looking for prefixes

987
01:54:31,760 --> 01:54:32,760
I'm looking for words

988
01:54:32,760 --> 01:54:35,600
but

989
01:54:35,600 --> 01:54:37,800
one is definitely not what I

990
01:54:37,800 --> 01:54:39,280
would the function

991
01:54:39,280 --> 01:54:42,120
what I would want the function to do

992
01:54:42,120 --> 01:54:43,580
but

993
01:54:43,580 --> 01:54:45,660
let's see what it does

994
01:54:45,660 --> 01:54:47,580
yeah exactly

995
01:54:47,580 --> 01:54:48,560
let's see what it does

996
01:54:48,560 --> 01:54:50,660
so

997
01:54:50,660 --> 01:54:57,620
keep that one

998
01:54:57,620 --> 01:54:58,860
open and

999
01:54:58,860 --> 01:55:23,860
So, PyTest, world occurrence, let's see.

1000
01:55:23,860 --> 01:55:32,880
Okay, okay, that was then another type of error, that was just a coding error.

1001
01:55:32,880 --> 01:55:38,100
So we need to fix that first.

1002
01:55:38,100 --> 01:55:53,100
I must have typed wrong here.

1003
01:55:53,100 --> 01:56:08,660
no, I don't. No, I don't see it.

1004
01:56:08,660 --> 01:56:18,540
What was the error? Just count word occurrence in string is not

1005
01:56:18,540 --> 01:56:25,940
find what

1006
01:56:34,660 --> 01:56:43,200
okay could you go to the terminal again yeah so it does count word occurrence in

1007
01:56:43,200 --> 01:56:51,520
string i don't see it

1008
01:57:00,480 --> 01:57:08,720
okay but but i think they should not get stuck here um and so yeah could um

1009
01:57:08,720 --> 01:57:13,920
I think we could.

1010
01:57:14,240 --> 01:57:21,080
So this was still, I mean, the interesting thing that we identified here is this,

1011
01:57:21,080 --> 01:57:32,800
that in this case here, the function functionality here was already available.

1012
01:57:33,500 --> 01:57:38,460
I mean, within the Python language, we have this split and we have this count.

1013
01:57:38,720 --> 01:58:02,660
So we're making use of that. And then, as we already had identified here, it's not canonical what would be, let's say, the expected or desired output for having this string five A's and then querying for A, A, A.

1014
01:58:02,660 --> 01:58:09,960
And as [name] said, I mean, having it designed so that it should be zero.

1015
01:58:09,960 --> 01:58:16,420
That's yeah, I mean, that's one choice you can have for it.

1016
01:58:16,420 --> 01:58:23,160
Then, I mean, the one that I mentioned where you could possibly count the currents of this

1017
01:58:23,160 --> 01:58:31,120
string of three A's, I mean, counting it to three, depending if you're using the first

1018
01:58:31,120 --> 01:58:37,920
three letters, or letter two up until four, or letter three up until five.

1019
01:58:37,920 --> 01:58:46,640
So yet again, having the base case for what is the actual, let's say,

1020
01:58:46,640 --> 01:58:55,120
by construction, the intended output or function is obviously important.

1021
01:58:55,120 --> 01:59:12,640
So we will come to an example here which is a bit more delicate situation.

1022
01:59:12,640 --> 01:59:20,240
So we have here something which is a function to calculate

1023
01:59:20,240 --> 01:59:32,480
it's about calculating the temperature of a reactor and the input argument for this function

1024
01:59:32,480 --> 01:59:41,060
is a temperature in celsius and you can see the comment here this function check tractor

1025
01:59:41,060 --> 01:59:49,640
temperature is about checking whether the temperature is about a number,

1026
01:59:49,640 --> 01:59:58,280
max temperature and then returns the status. And we have here import

1027
01:59:58,280 --> 02:00:07,640
statements from reactor, import max temperature and what the function does

1028
02:00:07,640 --> 02:00:12,600
it takes the input argument temperature in celsius and it compares it with this max temperatures

1029
02:00:14,200 --> 02:00:20,280
so if the temperature is above yeah then the status is one

1030
02:00:22,120 --> 02:00:30,120
and else if it's not about the max temperature it's zero so uh okay the functionality here is

1031
02:00:30,120 --> 02:00:36,280
perhaps as a such reasonable but but there is a there is a problem here so so how could we test

1032
02:00:36,280 --> 02:00:43,780
this so the problem is essentially that we are getting a value from another

1033
02:00:43,780 --> 02:00:49,300
class that we don't really have control over and that could change depending on

1034
02:00:49,300 --> 02:00:56,860
the depending on whatever other factors there are so we don't know what this max

1035
02:00:56,860 --> 02:01:02,440
temperature actually is and we just want to test our functionality and we don't

1036
02:01:02,440 --> 02:01:08,120
want to test what the reactor package is doing, we just want to test this check

1037
02:01:08,120 --> 02:01:16,020
reactor temperature function. Yes, exactly. So this is a simple

1038
02:01:16,020 --> 02:01:25,560
illustration of a code function here which is, I mean you can test it only up

1039
02:01:25,560 --> 02:01:33,240
to a point because you have this external dependency and could very well be that external

1040
02:01:33,240 --> 02:01:39,000
dependency is something that might be let's say a moving target or something that you do

1041
02:01:39,000 --> 02:01:50,920
not have control over i'd say that um sometimes you have let's say some constants like parameters

1042
02:01:50,920 --> 02:01:59,460
in a in a program that could be for instance you have some conversion factors for

1043
02:01:59,460 --> 02:02:11,560
let's say converting time from hours and minutes to seconds it's clear that the factor of 60 here

1044
02:02:11,560 --> 02:02:17,560
is canonical it's not something that will change and depending on what program languages you have

1045
02:02:17,560 --> 02:02:22,600
you might have like simply this factor of 60, you might have it stored away in a variable

1046
02:02:22,600 --> 02:02:27,400
which is in scope so you can use that value when you are in this function.

1047
02:02:29,800 --> 02:02:34,680
Another option that I think might be quite common actually in academia,

1048
02:02:35,240 --> 02:02:44,200
you have a sensor that gives you values that has a function that picks a value and your code needs to

1049
02:02:45,080 --> 02:02:52,360
pick something from that sensor and use it but for your test you don't want to run this on the

1050
02:02:52,360 --> 02:02:58,520
actual sensor you don't want to run this on the actual hardware you want to run this independently

1051
02:02:59,960 --> 02:03:06,360
so you have a function that does something and you want to yeah just

1052
02:03:09,480 --> 02:03:12,360
fake that this is actually returning a value from something

1053
02:03:14,200 --> 02:03:18,200
That's a very similar situation as well.

1054
02:03:18,200 --> 02:03:22,200
Mm-hmm, mm-hmm.

1055
02:03:22,200 --> 02:03:26,200
Yeah.

1056
02:03:26,200 --> 02:03:30,200
Yeah, so I mean, this is all,

1057
02:03:30,200 --> 02:03:34,200
I mean, you can have situations where this is

1058
02:03:34,200 --> 02:03:38,200
simply what it is. Nevertheless,

1059
02:03:38,200 --> 02:03:42,200
if you have, when you, let's say, design a new code or

1060
02:03:42,200 --> 02:03:45,640
or augment code, we do building blocks.

1061
02:03:49,160 --> 02:03:53,540
With regard to testing, things become more straightforward

1062
02:03:53,540 --> 02:03:57,640
if you can use as much as possible pure functions.

1063
02:03:59,720 --> 02:04:01,600
Because then in particular unit tests

1064
02:04:01,600 --> 02:04:04,320
become much more trackable

1065
02:04:04,320 --> 02:04:06,800
because then you can do use assert statements

1066
02:04:06,800 --> 02:04:09,200
of the kind that we have been working with here.

1067
02:04:12,200 --> 02:04:22,620
but maybe have a quick look at the solution as to how you can try to get these things in

1068
02:04:22,620 --> 02:04:30,920
um and one option here is uh to use something that's called monkey patching

1069
02:04:30,920 --> 02:04:37,520
uh monkey patch is another library which essentially allows you to set values or

1070
02:04:37,520 --> 02:04:39,660
even functions attributes

1071
02:04:39,660 --> 02:04:41,740
in Python everything essentially is an

1072
02:04:41,740 --> 02:04:43,580
attribute so you can

1073
02:04:43,580 --> 02:04:45,100
replace something by

1074
02:04:45,100 --> 02:04:47,620
something that is well defined in your

1075
02:04:47,620 --> 02:04:49,760
environment so in this

1076
02:04:49,760 --> 02:04:51,200
case we are setting the value

1077
02:04:51,200 --> 02:04:53,540
the attribute of max temperature to 100

1078
02:04:53,540 --> 02:04:55,140
but we could also

1079
02:04:55,140 --> 02:04:56,460
if this is

1080
02:04:56,460 --> 02:04:59,520
if this is a function that

1081
02:04:59,520 --> 02:05:01,500
gets the value from the

1082
02:05:01,500 --> 02:05:02,200
from a sensor

1083
02:05:02,200 --> 02:05:05,260
we could replace the

1084
02:05:05,260 --> 02:05:10,940
i ended it's a function call or originally in your in your check uh reactor reactor or

1085
02:05:10,940 --> 02:05:18,860
reactor temperature uh code you we could set an attribute in the reactor that get temperature is

1086
02:05:20,460 --> 02:05:22,540
lambda that just returns 10.

1087
02:05:25,580 --> 02:05:31,900
or something like this yeah that that's really neat functionality you you

1088
02:05:35,260 --> 02:05:42,000
you mentioned it here that this is available as for for for python uh that that's very neat

1089
02:05:42,000 --> 02:05:50,020
i'm thinking here about there are similar things in other languages as well but uh yeah in python

1090
02:05:50,020 --> 02:05:56,920
it's um with pytest it's very convenient because um what pytest is doing here under the hood is a

1091
02:05:56,920 --> 02:06:05,500
so-called fixture monkey patch is a um yeah a fixed fixture that is added to pytest and available

1092
02:06:05,500 --> 02:06:11,860
in any test and if you and it's essentially by name so by having this argument monkey patch in

1093
02:06:11,860 --> 02:06:20,900
the test function pytest automatically fills in the monkey patch um fixture and then you can use

1094
02:06:20,900 --> 02:06:27,420
that and you can you if you have a complex system you can also define your own fixtures

1095
02:06:27,420 --> 02:06:33,920
which can help you in replicating things for multiple different tests so you only have to

1096
02:06:33,920 --> 02:06:40,300
write the setup once because otherwise you would need to write this yeah this whole

1097
02:06:40,300 --> 02:06:46,620
attribution setting and whatnot every time but you could also create your own fixture here

1098
02:06:46,620 --> 02:06:55,980
um that just says that's a temperature fixture or a a reactor fixture that essentially replaces

1099
02:06:55,980 --> 02:07:01,420
all the relevant values in this reactor package by what you want to have for your tests

1100
02:07:03,260 --> 02:07:09,500
that's something that you can do it's not shown here in the example how exactly but if you search

1101
02:07:09,500 --> 02:07:15,900
for PyTest and fixtures. That's essentially what this is also doing for monkey patch.

1102
02:07:16,860 --> 02:07:22,860
But I think we should also go on a bit because we are starting to get towards the end of the time.

1103
02:07:23,580 --> 02:07:36,300
Yes. And then I see in this document here that someone has caught the spelling error that I had

1104
02:07:36,300 --> 02:07:47,900
here in the in the code and um yeah the typo here was that there's one r missing in occurrence here

1105
02:07:48,780 --> 02:07:50,620
no not here in the asserts

1106
02:07:53,420 --> 02:07:54,700
the three lines below that

1107
02:07:58,540 --> 02:08:04,780
in the assert statements okay the name of the of the test function doesn't matter but um in here

1108
02:08:04,780 --> 02:08:11,980
there is the r's missing yeah i am yeah yeah right you're right yeah yeah certainly yeah this

1109
02:08:13,020 --> 02:08:18,300
yes exactly i mean did the the name here of the test function here that doesn't matter

1110
02:08:18,300 --> 02:08:23,500
it doesn't matter but here uh this would be here like the canonical name for it because

1111
02:08:23,500 --> 02:08:33,740
we just had the prefix test underscore and then the same name okay let's see now if it works

1112
02:08:33,740 --> 02:08:34,140
better

1113
02:08:40,940 --> 02:08:41,420
oh yeah

1114
02:08:43,900 --> 02:08:45,340
now i also save the file

1115
02:08:48,460 --> 02:08:55,580
yep we actually see that uh that's also in the comments um we actually see that uh what python

1116
02:08:55,580 --> 02:09:08,220
returns here is zero and not one for the aaa in aaa because it's not yes the function splits

1117
02:09:08,220 --> 02:09:24,060
it and then it's not present anymore yeah yeah yeah right uh good um so so [name] which which

1118
02:09:24,060 --> 02:09:32,400
um example do you think we could highlight now do you have some i i would i would go for the

1119
02:09:32,400 --> 02:09:37,600
end-to-end test um i wouldn't go into the randomness test for now i would go to the

1120
02:09:37,600 --> 02:09:43,120
end-to-end test uh because it's essentially something that you can also use for um regression

1121
02:09:43,120 --> 02:09:52,660
regression testing so um this is conceptually so i think it's design eight

1122
02:09:52,660 --> 02:09:55,640
yes so let's

1123
02:09:55,640 --> 02:09:56,260
move there

1124
02:09:56,260 --> 02:10:05,540
oh yeah it's about the unique

1125
02:10:05,540 --> 02:10:07,560
yeah this is also

1126
02:10:07,560 --> 02:10:08,440
about word counting

1127
02:10:08,440 --> 02:10:11,280
yes but it's for

1128
02:10:11,280 --> 02:10:13,540
the concept to have an end-to-end test here

1129
02:10:13,540 --> 02:10:15,420
I think makes a

1130
02:10:15,420 --> 02:10:17,480
makes a lot of sense in a lot of

1131
02:10:17,480 --> 02:10:20,700
yeah scientific

1132
02:10:20,700 --> 02:10:23,460
situations where you have

1133
02:10:23,460 --> 02:10:25,260
an input, you have an output

1134
02:10:25,260 --> 02:10:27,600
to whatever code you have

1135
02:10:27,600 --> 02:10:29,360
and you want to keep that

1136
02:10:29,360 --> 02:10:31,420
and the concept

1137
02:10:31,420 --> 02:10:33,240
is very similar to regression testing

1138
02:10:33,240 --> 02:10:35,500
which you very often want

1139
02:10:35,500 --> 02:10:37,040
to have for scientific

1140
02:10:37,040 --> 02:10:39,120
code

1141
02:10:39,120 --> 02:10:45,160
Yes

1142
02:10:45,160 --> 02:10:47,660
so this is an example

1143
02:10:47,660 --> 02:11:08,280
how our end-to-end test can be made for, and this is here for the unique command, so this

1144
02:11:08,280 --> 02:11:18,520
This is another variant of word count that you will see if a word or a string, if it

1145
02:11:18,520 --> 02:11:33,020
occurs in the first place, but you would like to filter out the unique occurrences of it.

1146
02:11:33,020 --> 02:11:41,140
And if I'm not mistaken here from what the output at least claims, it's reducing repetitions.

1147
02:11:41,140 --> 02:11:52,020
It's not actually looking for unique occurrences, which to me is kind of odd, but okay.

1148
02:11:52,020 --> 02:12:11,780
Yes, we can see here like a sample input here, which is text which clearly here is with various

1149
02:12:11,780 --> 02:12:17,300
lines here because we have the line breaks here and obviously it's here repeated.

1150
02:12:17,300 --> 02:12:21,860
we have the first line here occurring five times and then this four times

1151
02:12:24,020 --> 02:12:28,100
this intermission only once and so forth

1152
02:12:32,980 --> 02:12:41,220
yeah um so since the aim for this tool is to remove repeat remove repetitions what i would

1153
02:12:41,220 --> 02:12:48,980
start to write my test in is essentially have a couple of um files being either either files

1154
02:12:48,980 --> 02:12:57,780
being present that i can use and then compare the inputs versus outputs so what do i expect

1155
02:12:57,780 --> 02:13:05,300
what do i put in and what i would do is create a couple of files that are similar to the example

1156
02:13:05,300 --> 02:13:13,620
input here actually um somewhere there's um somewhere there's just one line being rapid

1157
02:13:13,620 --> 02:13:23,300
repeated and fair and check that yes this line is actually being generated again um so reading

1158
02:13:23,300 --> 02:13:29,140
the output of unique again into a file and then comparing it with something that i had that i have

1159
02:13:29,140 --> 02:13:39,860
pre-compiled um since i yeah i i'm still i find it odd that it's not that it's not

1160
02:13:39,860 --> 02:13:44,900
really just giving unique lines but just removes repetitions

1161
02:13:46,260 --> 02:13:57,060
um and it also it uh i think is supposed to keep the order so um i would also kind of make sure

1162
02:13:57,060 --> 02:14:03,940
that yes it will keep the order and and it will not reorder things these are the things that i

1163
02:14:03,940 --> 02:14:19,140
would be trying to check here in a test yeah and uh yeah and as i mentioned so so this line here

1164
02:14:19,140 --> 02:14:27,220
all together now, occurring there and also occurring there. That's somewhat unexpected

1165
02:14:27,220 --> 02:14:36,260
because I mean, I agree. I would have preferred to see it only written up here and not here.

1166
02:14:37,700 --> 02:14:46,420
But yet, but again, yeah, from the name, unique, exactly. But like in general, this

1167
02:14:46,420 --> 02:14:56,640
This can often be the case that, well it can be the case that when some function is written

1168
02:14:56,640 --> 02:15:02,760
then there's some freedom in designing what it should do and how it should do it.

1169
02:15:02,760 --> 02:15:11,600
So I mean this is like, this was unexpected and, but it was intentional and then your

1170
02:15:11,600 --> 02:15:23,040
text test need to adopt to that um i see here that we have only a few minutes left

1171
02:15:23,040 --> 02:15:30,160
and i think here so we did here intentionally hold on to python during this lesson

1172
02:15:31,200 --> 02:15:38,720
and as you if i scroll back up here to the well all the way up to the factorial sorry

1173
02:15:41,600 --> 02:15:53,480
Factorial example, you probably have seen it already, but if not, we have these different

1174
02:15:53,480 --> 02:15:54,480
tabs here.

1175
02:15:54,480 --> 02:16:00,320
So Python to the left, but then you can, let's say here you have the function definition

1176
02:16:00,320 --> 02:16:12,640
here in in c plus plus and there is a template solution for how to test this in with frameworks

1177
02:16:12,640 --> 02:16:19,200
in in in the respective language so for c plus plus you could then for instance use

1178
02:16:20,480 --> 02:16:25,120
the catch 2 framework which is available here

1179
02:16:25,120 --> 02:16:31,680
well I mean you need to have it on your computer and then you can have them use the include

1180
02:16:31,680 --> 02:16:43,360
statement here and then you can get going and you also have correspondingly you have for instance

1181
02:16:43,360 --> 02:16:54,440
for Julia R and also for Fortran so here you have some some template Fortran code and here in the

1182
02:16:54,440 --> 02:17:02,680
template solution here we are oh sorry for this one the template solution was

1183
02:17:02,680 --> 02:17:08,200
actually not there but let's say here for Julia

1184
02:17:10,160 --> 02:17:17,240
yeah Julia without touching upon Julia itself it is a rather modern language

1185
02:17:17,240 --> 02:17:27,240
where we do have a framework for testing is already there and from the beginning

1186
02:17:27,240 --> 02:17:37,820
a little bit in analog with that pytest is sort of available for Python and we

1187
02:17:37,820 --> 02:17:51,980
could also highlight here that so if we go here to I mean the very start of the

1188
02:17:51,980 --> 02:18:01,220
lesson and now if I open the menu here so you have here under the reference

1189
02:18:01,220 --> 02:18:11,600
setting here you have quick reference and here you have a rather extensive

1190
02:18:11,600 --> 02:18:16,520
listing of the unit test frameworks and regression test frameworks and so forth

1191
02:18:16,520 --> 02:18:23,720
and they have it then broken down to various languages so yeah this is a

1192
02:18:23,720 --> 02:18:29,420
place that that you probably would like to have a look at and then if you're

1193
02:18:29,420 --> 02:18:47,420
If you're looking for something for C++ or for Julia, you can then find some suggestions on tools that you could make use of.

1194
02:18:47,420 --> 02:18:56,420
I want to mention one general thing, which is mainly for non-compiled code or non-compiled languages.

1195
02:18:56,420 --> 02:19:05,040
um where what you should well keep in mind when doing testing um if you have anything that

1196
02:19:05,040 --> 02:19:11,740
touches global variables or class variables or similar things so um variables that

1197
02:19:11,740 --> 02:19:20,840
stay after something is executed make sure that you reset them after the test

1198
02:19:20,840 --> 02:19:27,320
because otherwise they might otherwise you might end up depending a bit depending on the

1199
02:19:27,320 --> 02:19:34,200
framework you're using you might end up with something that was modified in a previous test

1200
02:19:34,200 --> 02:19:42,760
yeah you or yeah just a general comment here

1201
02:19:42,760 --> 02:20:12,580
Indeed. And I think it goes also for compiled languages that could be that, I mean, they're executed within a runtime environment that, let's say you have it with some default setting and if you, let's say, work in a terminal on, could be like a, well, in a way it doesn't matter if it's in your local computer or if it is on a shared computer.

1202
02:20:12,580 --> 02:20:16,740
because typically also on the shared computer you would like that to have a grip on

1203
02:20:18,260 --> 02:20:25,060
your runtime environment so it's like for your session it's your runtime environment

1204
02:20:26,580 --> 02:20:30,260
but if you poke around with it set some environment variables and so forth

1205
02:20:30,260 --> 02:20:38,260
then if you have first been worked with a and then you go on to work with b then yeah you might

1206
02:20:38,260 --> 02:20:42,900
want to have like a reset after working with a before you get going with b

1207
02:20:45,540 --> 02:20:50,260
so we can bring up here the notes to see if

1208
02:20:52,500 --> 02:20:56,820
yeah there's been some some interaction here um

1209
02:20:59,380 --> 02:21:01,060
some questions and some

1210
02:21:03,460 --> 02:21:04,580
some answers

1211
02:21:08,260 --> 02:21:12,420
say yeah how often do you make end-to-end tests in scientific code um

1212
02:21:16,580 --> 02:21:21,060
but not as often as i should is probably for me uh it's

1213
02:21:26,740 --> 02:21:32,900
in in the end if you have if if you have an example of your code that is an end-to-end

1214
02:21:32,900 --> 02:21:39,460
test or you can easily make it into an end-to-end test you can simply run your example and write a

1215
02:21:39,460 --> 02:21:46,820
test that when running my when running the in the code with the input from that example

1216
02:21:46,820 --> 02:21:49,940
i would expect the outputs that i just got from this example

1217
02:21:53,460 --> 02:21:54,500
yes um

1218
02:21:54,500 --> 02:21:58,740
You're right.

1219
02:21:58,740 --> 02:22:09,120
So my experience is from courses that I'm working with, either as a user or as a developer,

1220
02:22:09,120 --> 02:22:18,800
then end-to-end tests or, yeah, I'm more acquainted with them or have, let's say, direct contact

1221
02:22:18,800 --> 02:22:22,200
with them more commonly.

1222
02:22:22,200 --> 02:22:29,700
One elegant thing, and there's no time now for us to show like that example, but some

1223
02:22:29,700 --> 02:22:35,760
elegant solutions in some codes, we have, let's say, the capacity to do all of this

1224
02:22:35,760 --> 02:22:37,960
is that, I mean, you have it all.

1225
02:22:37,960 --> 02:22:45,300
You have like the unit tests, you have the integration tests, and you have also the regression

1226
02:22:45,300 --> 02:22:48,620
tests.

1227
02:22:48,620 --> 02:22:57,340
have it also part of sort of like the build procedure like you configure you make if it's

1228
02:22:57,340 --> 02:23:02,140
a compiled language and then after the make or make install you make then also like make check

1229
02:23:02,860 --> 02:23:08,300
and it runs then through that could be tens of tests or can even be into the thousands of tests

1230
02:23:08,300 --> 02:23:11,180
so now it's

1231
02:23:11,180 --> 02:23:13,200
5 past 11 so

1232
02:23:13,200 --> 02:23:15,620
it's about time to wrap up

1233
02:23:15,620 --> 02:23:16,120
and

1234
02:23:16,120 --> 02:23:19,420
it will then be the lunch break and

1235
02:23:19,420 --> 02:23:21,500
so what do we have after lunch

1236
02:23:21,500 --> 02:23:22,100
[name]

1237
02:23:22,100 --> 02:23:25,380
after lunch we are going into

1238
02:23:25,380 --> 02:23:25,880
modular

1239
02:23:25,880 --> 02:23:28,700
code development so

1240
02:23:28,700 --> 02:23:30,260
how do you

1241
02:23:30,260 --> 02:23:33,600
get your code into a shape

1242
02:23:33,600 --> 02:23:35,680
that it's more easily reusable

1243
02:23:35,680 --> 02:23:37,420
how

1244
02:23:37,420 --> 02:23:39,360
do you get code

1245
02:23:39,360 --> 02:23:41,840
out of this is one large

1246
02:23:41,840 --> 02:23:43,580
script that does everything into

1247
02:23:43,580 --> 02:23:45,180
pieces that are

1248
02:23:45,180 --> 02:23:46,520
testable

1249
02:23:46,520 --> 02:23:51,700
that are reusable

1250
02:23:51,700 --> 02:23:53,920
by you or by others

1251
02:23:53,920 --> 02:23:57,840
and yeah similar

1252
02:23:57,840 --> 02:23:58,320
things

1253
02:23:58,320 --> 02:24:02,120
yes

1254
02:24:02,120 --> 02:24:05,820
that sounds interesting

1255
02:24:05,820 --> 02:24:14,520
So we look forward to that lesson and yeah, let's then conclude this part on, on testing

1256
02:24:14,520 --> 02:24:17,000
and have a nice lunch break.

1257
02:24:17,000 --> 02:24:18,000
All of you.

1258
02:24:18,000 --> 02:24:21,580
Let's see you back in roughly an hour.

1259
02:24:21,580 --> 02:24:22,580
Bye.

1260
02:24:22,580 --> 02:24:23,580
Bye.

1261
02:24:23,580 --> 02:24:25,820
Bye.

1262
02:24:35,820 --> 02:24:36,860
you

1263
02:25:05,820 --> 02:25:06,860
you

1264
02:25:35,820 --> 02:25:36,860
you

1265
02:26:05,820 --> 02:26:06,860
you

1266
02:26:35,820 --> 02:26:36,860
you

1267
02:27:05,820 --> 02:27:06,860
you

1268
02:27:35,820 --> 02:27:36,860
you

1269
02:28:05,820 --> 02:28:06,860
you

1270
02:28:35,820 --> 02:28:36,860
you

1271
02:29:05,820 --> 02:29:06,860
you

1272
02:29:35,820 --> 02:29:36,860
you

1273
02:30:05,820 --> 02:30:06,860
you

1274
02:30:35,820 --> 02:30:36,860
you

1275
02:31:05,820 --> 02:31:06,860
you

1276
02:31:35,820 --> 02:31:36,860
you

1277
02:32:05,820 --> 02:32:06,860
you

1278
02:32:35,820 --> 02:32:36,860
you

1279
02:33:05,820 --> 02:33:06,860
you

1280
02:33:35,820 --> 02:33:36,860
you

1281
02:34:05,820 --> 02:34:06,860
you

1282
02:34:35,820 --> 02:34:36,860
you

1283
02:35:05,820 --> 02:35:06,860
you

1284
02:35:35,820 --> 02:35:36,860
you

1285
02:36:05,820 --> 02:36:06,860
you

1286
02:36:35,820 --> 02:36:36,860
you

1287
02:37:05,820 --> 02:37:06,860
you

1288
02:37:35,820 --> 02:37:36,860
you

1289
02:38:05,820 --> 02:38:06,860
you

1290
02:38:35,820 --> 02:38:36,860
you

1291
02:39:05,820 --> 02:39:06,860
you

1292
02:39:35,820 --> 02:39:36,860
you

1293
02:40:05,820 --> 02:40:06,860
you

1294
02:40:35,820 --> 02:40:36,860
you

1295
02:41:05,820 --> 02:41:06,860
you

1296
02:41:35,820 --> 02:41:36,860
you

1297
02:42:05,820 --> 02:42:06,860
you

1298
02:42:35,820 --> 02:42:36,860
you

1299
02:43:05,820 --> 02:43:06,860
you

1300
02:43:35,820 --> 02:43:36,860
you

1301
02:44:05,820 --> 02:44:06,860
you

1302
02:44:35,820 --> 02:44:36,860
you

1303
02:45:05,820 --> 02:45:06,860
you

1304
02:45:35,820 --> 02:45:36,860
you

1305
02:46:05,820 --> 02:46:06,860
you

1306
02:46:35,820 --> 02:46:36,860
you

1307
02:47:05,820 --> 02:47:06,860
you

1308
02:47:35,820 --> 02:47:36,860
you

1309
02:48:05,820 --> 02:48:06,860
you

1310
02:48:35,820 --> 02:48:36,860
you

1311
02:49:05,820 --> 02:49:06,860
you

1312
02:49:35,820 --> 02:49:36,860
you

1313
02:50:05,820 --> 02:50:06,860
you

1314
02:50:35,820 --> 02:50:36,860
you

1315
02:51:05,820 --> 02:51:06,860
you

1316
02:51:35,820 --> 02:51:36,860
you

1317
02:52:05,820 --> 02:52:06,860
you

1318
02:52:35,820 --> 02:52:36,860
you

1319
02:53:05,820 --> 02:53:06,860
you

1320
02:53:35,820 --> 02:53:36,860
you

1321
02:54:05,820 --> 02:54:06,860
you

1322
02:54:35,820 --> 02:54:36,860
you

1323
02:55:05,820 --> 02:55:06,860
you

1324
02:55:35,820 --> 02:55:36,860
you

1325
02:56:05,820 --> 02:56:06,860
you

1326
02:56:35,820 --> 02:56:36,860
you

1327
02:57:05,820 --> 02:57:06,860
you

1328
02:57:35,820 --> 02:57:36,860
you

1329
02:58:05,820 --> 02:58:06,860
you

1330
02:58:35,820 --> 02:58:36,860
you

1331
02:59:05,820 --> 02:59:06,860
you

1332
02:59:35,820 --> 02:59:36,860
you

1333
03:00:05,820 --> 03:00:06,860
you

1334
03:00:35,820 --> 03:00:36,860
you

1335
03:01:05,820 --> 03:01:06,860
you

1336
03:01:35,820 --> 03:01:36,860
you

1337
03:02:05,820 --> 03:02:06,860
you

1338
03:02:35,820 --> 03:02:36,860
you

1339
03:03:05,820 --> 03:03:06,860
you

1340
03:03:35,820 --> 03:03:36,860
you

1341
03:04:05,820 --> 03:04:06,860
you

1342
03:04:35,820 --> 03:04:36,860
you

1343
03:05:05,820 --> 03:05:06,860
you

1344
03:05:35,820 --> 03:05:36,860
you

1345
03:06:05,820 --> 03:06:06,860
you

1346
03:06:35,820 --> 03:06:36,860
you

1347
03:07:05,820 --> 03:07:06,860
you

1348
03:07:35,820 --> 03:07:36,860
you

1349
03:08:05,820 --> 03:08:06,860
you

1350
03:08:35,820 --> 03:08:36,860
you

1351
03:09:05,820 --> 03:09:06,860
you

1352
03:09:35,820 --> 03:09:36,860
you

1353
03:10:05,820 --> 03:10:06,860
you

1354
03:10:35,820 --> 03:10:36,860
you

1355
03:11:05,820 --> 03:11:06,860
you

1356
03:11:35,820 --> 03:11:36,860
you

1357
03:12:05,820 --> 03:12:06,860
you

1358
03:12:35,820 --> 03:12:36,860
you

1359
03:13:05,820 --> 03:13:06,860
you

1360
03:13:35,820 --> 03:13:36,860
you

1361
03:14:05,820 --> 03:14:06,860
you

1362
03:14:35,820 --> 03:14:36,860
you

1363
03:15:05,820 --> 03:15:06,860
you

1364
03:15:35,820 --> 03:15:36,860
you

1365
03:16:05,820 --> 03:16:06,860
you

1366
03:16:35,820 --> 03:16:36,860
you

1367
03:17:05,820 --> 03:17:06,860
you

1368
03:17:35,820 --> 03:17:36,860
you

1369
03:18:05,820 --> 03:18:35,400
and welcome back

1370
03:18:35,820 --> 03:18:45,300
Hello. So, yeah, we have some questions in the notes to get started.

1371
03:18:46,860 --> 03:18:58,300
So essentially this, the modular coding session is a demonstration and essentially a pair coding demonstration.

1372
03:18:59,120 --> 03:19:05,400
And it's also a way of wrapping up and tying everything together.

1373
03:19:05,400 --> 03:19:13,520
So it should touch on most things that we have talked about during this entire workshop.

1374
03:19:15,560 --> 03:19:19,100
So we have a few different questions in the notes.

1375
03:19:19,840 --> 03:19:23,540
It would be great if you could answer at least the first three.

1376
03:19:24,460 --> 03:19:30,780
And then we'll get going once we have a few answers to talk through.

1377
03:19:30,780 --> 03:19:35,780
Well, we can already start with essentially our answers to the questions.

1378
03:19:36,020 --> 03:19:37,540
Yeah, why not?

1379
03:19:38,620 --> 03:19:42,320
So I'll start with what does modular code development mean for you?

1380
03:19:42,320 --> 03:20:00,160
So for me, it's if you try to structure your code such that you actually have different parts that are responsible for different things

1381
03:20:00,160 --> 03:20:07,760
and make clear distinctions as to okay this is something this is a logical logical pack that

1382
03:20:07,760 --> 03:20:13,840
belongs together and therefore it's executed in one function um this is a logical group of things

1383
03:20:13,840 --> 03:20:23,120
so this is one package and so on that's what module development is about for me yeah so we um

1384
03:20:23,120 --> 03:20:30,960
started with version control and we went essentially like we went all the way to

1385
03:20:30,960 --> 03:20:37,140
sharing it and putting things online collaborating with sharing code changing someone else's code and

1386
03:20:37,140 --> 03:20:47,800
so on um and to me the best although the most um clear definition is when you can actually

1387
03:20:47,800 --> 03:20:54,340
take a piece of code maybe maybe an a feature you have create a function you have written

1388
03:20:54,340 --> 03:21:04,440
and actually contribute it back to the original software so the original code or even even better

1389
03:21:04,440 --> 03:21:12,240
take it and contribute it to some other code base in a way that makes sense so then that

1390
03:21:12,240 --> 03:21:17,140
if you can do that then the original that the code base you're contributing to is modular

1391
03:21:17,140 --> 03:21:20,220
in the sense that you can put a module in and it works.

1392
03:21:21,000 --> 03:21:23,700
And also your starting point is modular

1393
03:21:23,700 --> 03:21:26,460
because there is some module that you can pick up

1394
03:21:26,460 --> 03:21:28,360
and put somewhere else.

1395
03:21:28,360 --> 03:21:31,460
It becomes usable in many different situations.

1396
03:21:36,180 --> 03:21:38,340
And this, of course, it happens on different levels.

1397
03:21:38,440 --> 03:21:41,620
It could be a function, but it could also be an entire,

1398
03:21:41,860 --> 03:21:45,040
well, a Python module, which means a file

1399
03:21:45,040 --> 03:21:46,760
or a library in

1400
03:21:46,760 --> 03:21:48,760
C

1401
03:21:48,760 --> 03:21:51,100
or C++ and so on.

1402
03:21:53,080 --> 03:21:55,160
This is also what you

1403
03:21:55,160 --> 03:21:57,120
have started writing there

1404
03:21:57,120 --> 03:21:57,580
essentially.

1405
03:21:58,880 --> 03:22:00,720
The general idea seems to be

1406
03:22:00,720 --> 03:22:01,560
pretty similar.

1407
03:22:04,400 --> 03:22:05,220
This also

1408
03:22:05,220 --> 03:22:07,080
has something to do with unit testing in that

1409
03:22:07,080 --> 03:22:08,940
a unit that you can test is

1410
03:22:08,940 --> 03:22:10,200
a module

1411
03:22:10,200 --> 03:22:12,980
if it doesn't have too many side effects.

1412
03:22:13,920 --> 03:22:15,000
A function you can test

1413
03:22:15,000 --> 03:22:17,060
is a module that you can

1414
03:22:17,060 --> 03:22:18,260
also then plug out

1415
03:22:18,260 --> 03:22:20,460
in some way.

1416
03:22:21,920 --> 03:22:23,020
Okay, best practices

1417
03:22:23,020 --> 03:22:25,080
to arrive at

1418
03:22:25,080 --> 03:22:27,080
a well-structured modular code

1419
03:22:27,080 --> 03:22:29,100
in your favorite programming

1420
03:22:29,100 --> 03:22:31,080
language. I don't actually know what my favorite language

1421
03:22:31,080 --> 03:22:31,400
is.

1422
03:22:35,460 --> 03:22:37,080
To me, it's

1423
03:22:37,080 --> 03:22:39,220
designing well

1424
03:22:39,220 --> 03:22:40,940
as in

1425
03:22:40,940 --> 03:22:43,180
if I want to have a certain

1426
03:22:43,180 --> 03:22:50,540
functionality uh what parts of this functionality are actually reusable what parts of these

1427
03:22:50,540 --> 03:22:58,240
functionality are specific to exactly what this is going to do and then separate things that are

1428
03:22:58,240 --> 03:23:09,780
more that i think are more generally usable and things that are well more more more specific to

1429
03:23:09,780 --> 03:23:19,020
this one task also potentially depending again on the project if it's large enough

1430
03:23:19,020 --> 03:23:28,260
thinking about how could someone else provide an alternative approach to some parts of my code

1431
03:23:28,260 --> 03:23:33,660
and at which point i automatically have to think okay i might need to have an interface or

1432
03:23:33,660 --> 03:23:41,280
something and this inter implementation of this interface that's one piece so i can define the

1433
03:23:41,280 --> 03:23:46,740
interface and then put in an implementation someone else could define a different implementation for

1434
03:23:46,740 --> 03:23:55,160
the same thing that automatically creates modular code because things can be replaced easily

1435
03:23:55,160 --> 03:24:00,740
essentially you surround the module with an interface so yeah if you have a defined interface

1436
03:24:00,740 --> 03:24:10,340
what is inside can change and so it is plug and play so one very practical thing um that i at

1437
03:24:10,340 --> 03:24:21,900
least when i was like writing mostly c code um in research i saw people use global values global

1438
03:24:21,900 --> 03:24:29,360
references so you define some something you define a thing that needs to be accessible essentially

1439
03:24:29,360 --> 03:24:37,520
everywhere in the code and you make it globally accessible which means it's not explicitly there

1440
03:24:37,520 --> 03:24:44,000
in the arguments of a function for example so like in simulation programs you often do this for

1441
03:24:44,000 --> 03:24:55,080
like the world the the 3d world that you are simulating so that kind of thing make means

1442
03:24:55,080 --> 03:24:58,420
you cannot take the function

1443
03:24:58,420 --> 03:25:01,440
and put it in a different code, right?

1444
03:25:03,120 --> 03:25:05,000
Whereas if it's explicit,

1445
03:25:05,360 --> 03:25:07,360
if you put the parameter directly

1446
03:25:07,360 --> 03:25:08,560
into the function definition,

1447
03:25:09,180 --> 03:25:12,920
then you can put it in anywhere

1448
03:25:12,920 --> 03:25:15,560
as long as they know to provide that parameter correctly.

1449
03:25:16,520 --> 03:25:20,180
So explicit is better than implicit in that sense.

1450
03:25:22,720 --> 03:25:24,680
That's, and yeah,

1451
03:25:24,680 --> 03:25:29,520
So basically, yeah, writing small functions with a specific task

1452
03:25:29,520 --> 03:25:32,540
and then making their interactions explicit.

1453
03:25:33,020 --> 03:25:37,560
Have everything that goes into the function be visible in the function definition

1454
03:25:37,560 --> 03:25:40,860
and everything that it does should also be visible

1455
03:25:40,860 --> 03:25:46,980
either by looking at the return value or looking at the comments.

1456
03:25:48,560 --> 03:25:53,820
What I also, that's partly in the answers here as well.

1457
03:25:54,680 --> 03:26:02,020
So try not to create a large script that you're running.

1458
03:26:02,620 --> 03:26:08,980
Because as soon as there is really computational functionality

1459
03:26:08,980 --> 03:26:12,880
in the run script that you have

1460
03:26:12,880 --> 03:26:15,380
that could be handled in a function,

1461
03:26:15,900 --> 03:26:18,940
it becomes potentially, as it's mentioned here,

1462
03:26:19,040 --> 03:26:21,540
difficult later on to refactor this into a function

1463
03:26:21,540 --> 03:26:23,680
or to refactor your code such that

1464
03:26:23,680 --> 03:26:25,120
this calls a function

1465
03:26:25,120 --> 03:26:26,320
and

1466
03:26:26,320 --> 03:26:29,280
the sooner you say

1467
03:26:29,280 --> 03:26:31,340
this is not about

1468
03:26:31,340 --> 03:26:33,700
the individual actions

1469
03:26:33,700 --> 03:26:35,180
of my script anymore

1470
03:26:35,180 --> 03:26:36,040
this is about

1471
03:26:36,040 --> 03:26:39,760
handling what I'm doing

1472
03:26:39,760 --> 03:26:41,660
this can normally go into

1473
03:26:41,660 --> 03:26:42,160
a function

1474
03:26:42,160 --> 03:26:45,580
so if I have something like

1475
03:26:45,580 --> 03:26:47,800
a script that I'm

1476
03:26:47,800 --> 03:26:48,980
running, this is commonly

1477
03:26:48,980 --> 03:26:51,780
create my target

1478
03:26:51,780 --> 03:26:52,960
object or whatever

1479
03:26:52,960 --> 03:26:57,360
and then run individual functions on that thing.

1480
03:26:57,760 --> 03:27:00,640
But I'm not having any,

1481
03:27:00,900 --> 03:27:03,420
I would say functional code in there,

1482
03:27:04,240 --> 03:27:05,880
in the main script.

1483
03:27:06,160 --> 03:27:07,600
All this is just,

1484
03:27:08,180 --> 03:27:10,280
essentially I can read through my main script

1485
03:27:10,280 --> 03:27:13,580
and know that first it's reading the data.

1486
03:27:13,760 --> 03:27:16,220
Second, it's pre-processing.

1487
03:27:16,360 --> 03:27:18,020
Third is this, fourth is this.

1488
03:27:18,020 --> 03:27:19,880
And just by reading through,

1489
03:27:19,880 --> 03:27:23,420
I essentially have one line

1490
03:27:23,420 --> 03:27:24,920
for all of these tasks

1491
03:27:24,920 --> 03:27:27,420
because it's the function call that does it

1492
03:27:27,420 --> 03:27:30,080
that helps me

1493
03:27:30,080 --> 03:27:33,780
essentially the same is also true for functions

1494
03:27:33,780 --> 03:27:36,020
if the function starts to be longer than

1495
03:27:36,020 --> 03:27:39,120
you can actually read and understand

1496
03:27:39,120 --> 03:27:41,260
then it's probably too long

1497
03:27:41,260 --> 03:27:46,240
it can be split into smaller pieces

1498
03:27:46,240 --> 03:27:49,380
that do simpler individual things

1499
03:27:49,380 --> 03:27:51,520
and then can be reused

1500
03:27:51,520 --> 03:27:52,320
at different places

1501
03:27:52,320 --> 03:27:54,640
it's kind of optimally

1502
03:27:54,640 --> 03:27:56,420
your code

1503
03:27:56,420 --> 03:27:58,580
by just reading through it

1504
03:27:58,580 --> 03:28:00,120
explains what it's doing

1505
03:28:00,120 --> 03:28:03,500
until you come to so small pieces

1506
03:28:03,500 --> 03:28:05,600
that they are relatively obvious

1507
03:28:05,600 --> 03:28:06,880
what they are doing

1508
03:28:06,880 --> 03:28:08,660
since I said

1509
03:28:08,660 --> 03:28:10,860
something about

1510
03:28:10,860 --> 03:28:12,580
what the code should be like

1511
03:28:12,580 --> 03:28:14,220
so

1512
03:28:14,220 --> 03:28:16,700
the reason is to

1513
03:28:16,700 --> 03:28:18,480
make it understandable

1514
03:28:18,480 --> 03:28:20,540
to make it easier so

1515
03:28:20,540 --> 03:28:22,740
it's not just about

1516
03:28:22,740 --> 03:28:24,380
style and

1517
03:28:24,380 --> 03:28:25,440
like

1518
03:28:25,440 --> 03:28:28,300
well it's not just about

1519
03:28:28,300 --> 03:28:31,160
telling people

1520
03:28:31,160 --> 03:28:33,180
what good code is in some way

1521
03:28:33,180 --> 03:28:34,940
this is all

1522
03:28:34,940 --> 03:28:36,300
practical advice right

1523
03:28:36,300 --> 03:28:39,060
so it makes it easier

1524
03:28:39,060 --> 03:28:40,600
to understand and change

1525
03:28:40,600 --> 03:28:42,320
and reuse

1526
03:28:42,320 --> 03:28:44,420
which is the point

1527
03:28:44,420 --> 03:28:46,300
yeah

1528
03:28:46,300 --> 03:28:56,300
So what do we have in C? We have, or did we actually go through the answers in B?

1529
03:28:56,300 --> 03:29:04,300
Mostly. This is, yeah, minimum things.

1530
03:29:04,300 --> 03:29:07,300
Put them in functions.

1531
03:29:07,300 --> 03:29:11,300
Smallest task that could be reused.

1532
03:29:11,300 --> 03:29:24,980
This is not directly modular code, but in general, having simple and useful comments is very, very useful in general development, regardless of modular or not.

1533
03:29:24,980 --> 03:29:50,480
Yeah. So I guess, yeah, maybe I already said this, essentially, the one big thing that kind of defines what modular means here is, or in general, what modular action means is, the code or each part of the code should avoid interacting with other parts of the code as much as possible.

1534
03:29:50,480 --> 03:30:00,060
so essentially i would say as much as sensible yeah as much as possible yeah i mean you can

1535
03:30:00,060 --> 03:30:06,880
always reduce interactions to zero if you just um uh if you don't care about whether it works

1536
03:30:06,880 --> 03:30:13,580
um yeah as much as makes sense of us yeah what you what you very often uh see in things like

1537
03:30:13,580 --> 03:30:16,700
style suggestions and so on

1538
03:30:16,700 --> 03:30:19,780
is also having not too many input arguments

1539
03:30:19,780 --> 03:30:21,880
for functions, which means that

1540
03:30:21,880 --> 03:30:26,000
there needs to be a certain balance between

1541
03:30:26,000 --> 03:30:29,780
what responsibilities certain functions have

1542
03:30:29,780 --> 03:30:32,660
and where they get their data from.

1543
03:30:33,100 --> 03:30:35,860
So if your function, because you want to output

1544
03:30:35,860 --> 03:30:38,940
it into a function, starts to have 20 input arguments,

1545
03:30:40,100 --> 03:30:41,980
it's likely that it's doing

1546
03:30:41,980 --> 03:30:44,420
either it's doing more than it should

1547
03:30:44,420 --> 03:30:46,400
be doing or it

1548
03:30:46,400 --> 03:30:48,300
might be better to have a different

1549
03:30:48,300 --> 03:30:50,140
logical unit than a function for this

1550
03:30:50,140 --> 03:30:52,260
this might be something that a class should

1551
03:30:52,260 --> 03:30:54,340
be doing that you initialize with

1552
03:30:54,340 --> 03:30:56,600
a couple of values and then provide

1553
03:30:56,600 --> 03:30:58,420
additional data into individual

1554
03:30:58,420 --> 03:30:59,040
functions

1555
03:30:59,040 --> 03:31:02,160
I've been talking a lot about functions

1556
03:31:02,160 --> 03:31:03,460
and

1557
03:31:03,460 --> 03:31:05,140
you can also

1558
03:31:05,140 --> 03:31:08,280
the data types

1559
03:31:08,280 --> 03:31:10,240
and data can also be

1560
03:31:10,240 --> 03:31:11,580
modular so you can

1561
03:31:11,580 --> 03:31:16,700
combine different values

1562
03:31:16,700 --> 03:31:19,920
that are in some way related.

1563
03:31:21,620 --> 03:31:27,960
So if you have data about a mesh

1564
03:31:27,960 --> 03:31:29,580
that you're running a simulation on,

1565
03:31:29,980 --> 03:31:32,300
that mesh can contain multiple different things.

1566
03:31:32,400 --> 03:31:35,420
It can contain objects, density, color,

1567
03:31:35,940 --> 03:31:37,040
all sorts of things.

1568
03:31:38,820 --> 03:31:41,480
And in many cases,

1569
03:31:41,580 --> 03:31:46,400
you would want all of those things to be stored under the same name.

1570
03:31:47,540 --> 03:31:54,820
So then you could create a data structure or a class or something like that

1571
03:31:54,820 --> 03:31:56,760
to put multiple different things in.

1572
03:31:57,240 --> 03:31:59,060
And then you can pass that as a single argument.

1573
03:31:59,980 --> 03:32:01,740
It also makes it easier to read.

1574
03:32:02,160 --> 03:32:06,500
So this is now a single unit of some kind of custom data.

1575
03:32:06,500 --> 03:32:09,500
this is the mesh that contains

1576
03:32:09,500 --> 03:32:11,480
all the information about

1577
03:32:11,480 --> 03:32:13,000
the mesh about all

1578
03:32:13,000 --> 03:32:14,540
points in the mesh

1579
03:32:14,540 --> 03:32:15,980
something like the world

1580
03:32:15,980 --> 03:32:18,320
let's call this a world

1581
03:32:18,320 --> 03:32:20,400
or an environment

1582
03:32:20,400 --> 03:32:23,040
it has cities, forests

1583
03:32:23,040 --> 03:32:25,460
and whatever and you can get those

1584
03:32:25,460 --> 03:32:27,340
by either functions or

1585
03:32:27,340 --> 03:32:29,500
other properties

1586
03:32:29,500 --> 03:32:29,940
yeah

1587
03:32:29,940 --> 03:32:32,260
okay

1588
03:32:32,260 --> 03:32:35,180
what do you know about programming

1589
03:32:35,180 --> 03:32:37,740
that you wish somebody told you earlier, Jaano?

1590
03:32:42,140 --> 03:32:44,780
I mean, I should have started using version control from the beginning.

1591
03:32:46,380 --> 03:32:49,900
It would have saved a lot of time when I broke something and

1592
03:32:52,620 --> 03:32:57,660
essentially had to slowly step by step undo the work until it works again.

1593
03:33:01,340 --> 03:33:03,500
So yeah, that's also one of the answers, essentially.

1594
03:33:03,500 --> 03:33:06,780
creating a copy before you start

1595
03:33:06,780 --> 03:33:08,840
making changes. Version control

1596
03:33:08,840 --> 03:33:10,920
does that for you. It's a very good

1597
03:33:10,920 --> 03:33:12,140
idea to do.

1598
03:33:17,140 --> 03:33:20,580
I would agree with the

1599
03:33:20,580 --> 03:33:23,000
use an IDE editor with color coding.

1600
03:33:24,600 --> 03:33:26,720
It depends a lot

1601
03:33:26,720 --> 03:33:28,420
on the languages that you're using,

1602
03:33:28,860 --> 03:33:30,520
but in general,

1603
03:33:31,040 --> 03:33:33,100
at least to me,

1604
03:33:33,500 --> 03:33:40,580
things like going to definitions of certain imports or something or going to definitions

1605
03:33:40,580 --> 03:33:51,000
of functions via an IDE is extremely helpful because this is originally more from typed

1606
03:33:51,000 --> 03:33:56,980
languages and pre-compiled languages but nowadays it essentially also works with Python and for

1607
03:33:56,980 --> 03:34:05,280
example vs code that you can just right click on a function call go to definition and you get the

1608
03:34:05,280 --> 03:34:09,720
function that is being called at this point and you can look into the function what does it actually

1609
03:34:09,720 --> 03:34:22,340
do and it helps in understanding what is happening here and um yeah it it just makes it so much more

1610
03:34:22,340 --> 03:34:24,920
graspable

1611
03:34:24,920 --> 03:34:26,540
what your code is doing

1612
03:34:26,540 --> 03:34:28,200
even if it's not that well

1613
03:34:28,200 --> 03:34:29,980
or what someone else's code might be doing

1614
03:34:29,980 --> 03:34:31,380
if it's not that well documented

1615
03:34:31,380 --> 03:34:34,800
yeah

1616
03:34:34,800 --> 03:34:37,260
I think actually

1617
03:34:37,260 --> 03:34:40,240
modularity

1618
03:34:40,240 --> 03:34:42,360
and unit testing

1619
03:34:42,360 --> 03:34:44,440
are things that would have been

1620
03:34:44,440 --> 03:34:45,760
very useful

1621
03:34:45,760 --> 03:34:48,660
to know something about earlier

1622
03:34:48,660 --> 03:34:50,460
I remember

1623
03:34:50,460 --> 03:34:52,040
at some point I hit upon the

1624
03:34:52,040 --> 03:34:53,100
practice of

1625
03:34:53,100 --> 03:34:56,060
write a test that

1626
03:34:56,060 --> 03:34:56,600
checks

1627
03:34:56,600 --> 03:35:00,340
as much of the functionality as possible.

1628
03:35:01,200 --> 03:35:02,080
It was essentially

1629
03:35:02,080 --> 03:35:03,960
running the code, running

1630
03:35:03,960 --> 03:35:06,100
an entire instance of the

1631
03:35:06,100 --> 03:35:08,020
code and checking that the values

1632
03:35:08,020 --> 03:35:10,300
match some expectations.

1633
03:35:10,520 --> 03:35:12,260
But these were all end-to-end tests.

1634
03:35:12,620 --> 03:35:14,040
I didn't have any unit tests.

1635
03:35:14,840 --> 03:35:16,220
So it would basically

1636
03:35:16,220 --> 03:35:17,980
only tell me that something's broken now.

1637
03:35:17,980 --> 03:35:40,220
Yeah. So, I think it's time to go to the demonstration. What do you think?

1638
03:35:40,220 --> 03:35:44,220
Yep. Let's go to our task.

1639
03:35:44,220 --> 03:35:45,220
Yeah.

1640
03:35:54,020 --> 03:35:56,820
Okay, so we have some weather data.

1641
03:35:58,620 --> 03:36:02,020
And what are we going to do with this data?

1642
03:36:03,620 --> 03:36:08,220
What we want to do is essentially, we want to plot the data over time

1643
03:36:09,420 --> 03:36:12,420
and make this a bit more modular.

1644
03:36:12,420 --> 03:36:18,020
because at the moment we have this kind of script that just plots something

1645
03:36:20,580 --> 03:36:21,780
yeah so i guess um

1646
03:36:24,660 --> 03:36:30,900
the starting point for me with this would be um i would have this piece of code in a jupiter

1647
03:36:30,900 --> 03:36:38,740
notebook that i wrote to do a specific task to um yeah to plot the stuff so here we are

1648
03:36:38,740 --> 03:36:43,460
which we essentially have here. We can define the number of measurements here,

1649
03:36:44,820 --> 03:36:49,780
but anytime we want to change the number of measurements, we have to modify this and then

1650
03:36:49,780 --> 03:36:57,060
hope that we are not forgetting to run something. At the moment, this is what we get.

1651
03:36:58,420 --> 03:37:04,420
We can update that, but once we do that, we essentially need to run all the

1652
03:37:04,420 --> 03:37:13,100
individual pieces again and we hope to not forget for example to reread the temperatures because

1653
03:37:13,100 --> 03:37:25,180
otherwise we get a complete mess in later stages okay so um let me add the bottom of the nodes

1654
03:37:25,180 --> 03:37:30,180
I will call it the modular code task,

1655
03:37:33,080 --> 03:37:37,340
and I'll also copy in the correct section of the materials.

1656
03:37:37,340 --> 03:37:38,240
Okay.

1657
03:37:38,240 --> 03:37:43,240
Now, the task is then to make this code better in some way.

1658
03:37:45,620 --> 03:37:47,320
What can we do to make it better?

1659
03:37:48,700 --> 03:37:52,200
So yeah, please go, if you have ideas,

1660
03:37:52,200 --> 03:38:04,780
write into the notes. What do you think we could do here? So one thing, I think, just

1661
03:38:04,780 --> 03:38:12,860
looking at the plot, I'm not really sure what is happening there. I mean, you clearly have

1662
03:38:12,860 --> 03:38:19,140
a plot of temperatures, but maybe it would be useful, especially if you want to take

1663
03:38:19,140 --> 03:38:21,140
the plot and put it in the paper to have

1664
03:38:21,140 --> 03:38:22,040
some axis labels.

1665
03:38:24,180 --> 03:38:24,740
Yep.

1666
03:38:25,380 --> 03:38:27,120
So how would we do that?

1667
03:38:28,320 --> 03:38:28,780
So

1668
03:38:28,780 --> 03:38:31,460
the

1669
03:38:31,460 --> 03:38:33,340
labels, do they

1670
03:38:33,340 --> 03:38:35,400
need to be defined before you start

1671
03:38:35,400 --> 03:38:36,580
grading the plot?

1672
03:38:37,120 --> 03:38:38,220
I think so.

1673
03:38:39,400 --> 03:38:40,400
So that's

1674
03:38:40,400 --> 03:38:43,260
plt.x

1675
03:38:43,260 --> 03:38:43,700
label

1676
03:38:43,700 --> 03:38:47,360
and plt.y

1677
03:38:47,360 --> 03:38:49,080
label. It makes sense

1678
03:38:49,080 --> 03:38:51,060
to put it where you define the number of measurements

1679
03:38:51,060 --> 03:38:54,340
this is

1680
03:38:54,340 --> 03:38:56,320
x label is a function

1681
03:38:56,320 --> 03:38:59,000
it's x label

1682
03:38:59,000 --> 03:39:00,260
and then it takes us

1683
03:39:00,260 --> 03:39:02,880
yeah yeah okay

1684
03:39:02,880 --> 03:39:04,960
so x is days

1685
03:39:04,960 --> 03:39:06,740
okay I think so

1686
03:39:06,740 --> 03:39:08,640
that

1687
03:39:08,640 --> 03:39:10,800
makes sense yeah why not

1688
03:39:10,800 --> 03:39:13,240
uh

1689
03:39:13,240 --> 03:39:14,860
the temperature

1690
03:39:14,860 --> 03:39:16,720
in celsius yeah

1691
03:39:16,720 --> 03:39:21,160
I don't find the degree sign

1692
03:39:21,160 --> 03:39:22,160
here on that keyboard at the moment

1693
03:39:22,160 --> 03:39:24,400
that's not a problem

1694
03:39:24,400 --> 03:39:26,560
okay

1695
03:39:26,560 --> 03:39:29,040
okay

1696
03:39:29,040 --> 03:39:31,020
so now I guess you do need

1697
03:39:31,020 --> 03:39:32,900
to rerun the whole thing

1698
03:39:32,900 --> 03:39:35,040
okay that just running that

1699
03:39:35,040 --> 03:39:36,240
cell did weird things

1700
03:39:36,240 --> 03:39:38,900
I guess it has the plot

1701
03:39:38,900 --> 03:39:40,800
in memory already and it's outputting

1702
03:39:40,800 --> 03:39:42,640
the plot why is that happening

1703
03:39:42,640 --> 03:39:44,020
hmm

1704
03:39:44,020 --> 03:39:55,520
um because probably this the y label function i guess returns the bot

1705
03:39:55,520 --> 03:40:06,760
so it gets displayed yeah okay that works let's do some nope that actually didn't change anything

1706
03:40:06,760 --> 03:40:13,060
uh did you try rerunning from the beginning just uh um the restart and run everything

1707
03:40:13,060 --> 03:40:18,300
so it's the

1708
03:40:18,300 --> 03:40:20,700
two triangles

1709
03:40:20,700 --> 03:40:22,240
double run button

1710
03:40:22,240 --> 03:40:24,380
looks like a fast forward button

1711
03:40:24,380 --> 03:40:24,940
yeah

1712
03:40:24,940 --> 03:40:30,740
I've actually never seen

1713
03:40:30,740 --> 03:40:31,840
that that's weird

1714
03:40:31,840 --> 03:40:34,080
okay well

1715
03:40:34,080 --> 03:40:36,360
so this obviously

1716
03:40:36,360 --> 03:40:37,240
doesn't work

1717
03:40:37,240 --> 03:40:40,460
no I guess we can put

1718
03:40:40,460 --> 03:40:41,640
it where

1719
03:40:41,640 --> 03:40:44,300
we define the same cell as the plot

1720
03:40:44,300 --> 03:40:48,120
might be that this is because

1721
03:40:48,120 --> 03:40:49,040
it's in cells

1722
03:40:49,040 --> 03:40:50,680
like the original

1723
03:40:50,680 --> 03:40:53,100
well okay that works better

1724
03:40:53,100 --> 03:40:56,340
that was weird I've never seen that before

1725
03:40:56,340 --> 03:41:00,260
that might have been because it's in

1726
03:41:00,260 --> 03:41:01,660
well cells now

1727
03:41:01,660 --> 03:41:04,380
yeah but I think

1728
03:41:04,380 --> 03:41:05,600
well anyway I guess

1729
03:41:05,600 --> 03:41:06,720
let's not

1730
03:41:06,720 --> 03:41:08,320
but

1731
03:41:08,320 --> 03:41:12,640
But it might anyways be an idea to get this

1732
03:41:12,640 --> 03:41:16,440
and move it to an actual function

1733
03:41:16,440 --> 03:41:21,440
and then reduce what we have here in the plotting

1734
03:41:22,080 --> 03:41:27,080
to something that only calls those functions.

1735
03:41:30,760 --> 03:41:35,580
Yeah, let me first suggest a complication.

1736
03:41:35,580 --> 03:41:38,320
And I guess this is a step towards making it a function.

1737
03:41:39,040 --> 03:41:44,160
But the complication is to, instead of just making one plot,

1738
03:41:44,260 --> 03:41:46,440
make three different plots with different values

1739
03:41:46,440 --> 03:41:50,180
of the number of measurements.

1740
03:41:52,480 --> 03:41:57,500
So that means actually now you need to combine

1741
03:41:57,500 --> 03:42:02,380
basically all of these cells into a single cell.

1742
03:42:02,380 --> 03:42:07,860
because the follow inside the follow up if you change the number of measurements what does that

1743
03:42:07,860 --> 03:42:16,060
affect it affects the the part where you read the data because that already sits sets the number of

1744
03:42:16,060 --> 03:42:25,780
rows read and then well i guess it doesn't well maybe then you are using that the red data to set

1745
03:42:25,780 --> 03:42:33,300
the, yeah, the, the temperature values, okay, temperature values,

1746
03:42:33,300 --> 03:42:38,800
so that changes. And then the mean of course changes. And

1747
03:42:40,340 --> 03:42:53,100
yeah, everything changes. Okay. And then everything. Yeah. Okay,

1748
03:42:53,100 --> 03:42:56,560
So now we have a few different plots being created.

1749
03:43:04,560 --> 03:43:05,380
Start this.

1750
03:43:10,240 --> 03:43:13,000
So one issue that we had in the original

1751
03:43:13,000 --> 03:43:15,800
is not there because we have the days everywhere

1752
03:43:15,800 --> 03:43:18,760
because we have them not.

1753
03:43:18,760 --> 03:43:21,080
Oh, yeah, we are setting it inside the form.

1754
03:43:21,080 --> 03:43:23,860
So if we would redo it like this...

1755
03:43:23,860 --> 03:43:25,240
No, you're going to get an extra plot,

1756
03:43:25,420 --> 03:43:26,860
and none of the other plots are going to happen.

1757
03:43:26,860 --> 03:43:27,420
That's true.

1758
03:43:28,120 --> 03:43:29,080
Well, we can.

1759
03:43:31,160 --> 03:43:35,920
Yeah, but I mean, it looks like the plot function

1760
03:43:35,920 --> 03:43:41,400
is independent of the label setting functions,

1761
03:43:41,620 --> 03:43:42,780
but it's actually not.

1762
03:43:43,140 --> 03:43:48,240
The plot function, when you say plot.show...

1763
03:43:48,240 --> 03:43:50,380
No, actually, no, that's not what's happening here.

1764
03:43:51,080 --> 03:44:00,380
what is happening here is that we call plot dot clear um clf yep clear what is the f figure

1765
03:44:00,380 --> 03:44:09,820
clear figure okay thanks uh so so we are actually removing the labels oh and we

1766
03:44:09,820 --> 03:44:17,900
was forgot something uh well yes going to count that yeah so um you probably want to make it an

1767
03:44:17,900 --> 03:44:23,740
string yeah okay yeah so now we are uh changing the file name based on the number of measurements

1768
03:44:25,580 --> 03:44:29,580
okay that didn't actually work uh we

1769
03:44:35,660 --> 03:44:42,540
it did oh okay it just took a bit to upload update the okay fine so yeah now we actually

1770
03:44:42,540 --> 03:44:48,940
have the images that we can include in our um paper about the temperatures in the helsinki

1771
03:44:48,940 --> 03:44:56,380
airport um if it loads well well i'm hoping that the png file is actually correct can you

1772
03:44:57,020 --> 03:45:05,100
check the one with 25 well png should be it shouldn't depend on the number of i mean it's a

1773
03:45:05,100 --> 03:45:16,540
it's a pixel map okay well how seriously do we want to take the um plots being incorrect

1774
03:45:18,460 --> 03:45:22,300
rather though the files i don't think it's an issue at the moment

1775
03:45:22,940 --> 03:45:29,340
yeah let's go on and we are going to move this into the terminal at some point anyway

1776
03:45:29,340 --> 03:45:50,260
Okay. Well, I mean, now we do have this for loop, and we could, this also kind of nicely defines one possible way of splitting it into functions.

1777
03:45:50,260 --> 03:45:58,600
I guess that's not really splitting if you take the whole thing and make it a single

1778
03:45:58,600 --> 03:45:59,600
function.

1779
03:45:59,600 --> 03:46:14,640
Okay, let's, it's going to be a Python file, okay, you're moving into, moving the

1780
03:46:14,640 --> 03:46:20,180
whole thing into a script, that makes sense.

1781
03:46:20,260 --> 03:46:31,380
Okay, this is not really modular yet, but yeah, before people listening, please do make

1782
03:46:31,380 --> 03:46:35,540
suggestions like we are going to actually follow the suggestions that people make in

1783
03:46:35,540 --> 03:46:40,380
the notes.

1784
03:46:40,380 --> 03:46:50,980
Okay, so now we have, I guess you have to activate the environment.

1785
03:46:51,980 --> 03:46:52,800
So now we have a Python function.

1786
03:46:52,800 --> 03:46:53,220
Actually check.

1787
03:46:55,740 --> 03:46:56,840
Okay, let's check.

1788
03:46:57,660 --> 03:46:58,660
What happens?

1789
03:46:59,760 --> 03:47:01,120
Yeah, that works.

1790
03:47:02,060 --> 03:47:04,840
Okay, and it's creating the file.

1791
03:47:04,840 --> 03:47:06,500
It's creating the images.

1792
03:47:07,060 --> 03:47:08,020
Oh, it's displaying the images.

1793
03:47:08,280 --> 03:47:08,980
Okay, that's fine.

1794
03:47:08,980 --> 03:47:11,320
and I need to close them

1795
03:47:11,320 --> 03:47:13,640
sometimes that's what you want

1796
03:47:13,640 --> 03:47:14,440
sometimes not

1797
03:47:14,440 --> 03:47:18,860
but yeah

1798
03:47:18,860 --> 03:47:21,180
somehow the files are broken

1799
03:47:21,180 --> 03:47:22,240
actually

1800
03:47:22,240 --> 03:47:24,320
they are white

1801
03:47:24,320 --> 03:47:27,180
okay well let's

1802
03:47:27,180 --> 03:47:28,640
take a look at the code then

1803
03:47:28,640 --> 03:47:30,980
so it did display them correctly

1804
03:47:30,980 --> 03:47:33,260
but the figures being saved

1805
03:47:33,260 --> 03:47:33,700
are not

1806
03:47:33,700 --> 03:47:36,740
which is a bit strange

1807
03:47:36,740 --> 03:47:38,360
that's interesting

1808
03:47:38,360 --> 03:47:50,140
well what should we do um well there's definitely one thing that's sort of

1809
03:47:50,140 --> 03:47:59,240
functionally separate from everything else which is the plot results part right yeah um so that is

1810
03:47:59,240 --> 03:48:04,820
it's doing two things actually it's showing the plot well okay three things it's constructing

1811
03:48:04,820 --> 03:48:06,600
the plot, showing the plot,

1812
03:48:06,900 --> 03:48:08,840
and saving

1813
03:48:08,840 --> 03:48:10,800
it into an image, which for some

1814
03:48:10,800 --> 03:48:11,620
reason is not working.

1815
03:48:15,120 --> 03:48:16,800
Let's make a function out of this.

1816
03:48:17,080 --> 03:48:17,200
Yeah.

1817
03:48:18,420 --> 03:48:20,880
So do we want to continue showing the plot

1818
03:48:20,880 --> 03:48:22,440
since we are running from the terminal?

1819
03:48:24,020 --> 03:48:25,000
I don't

1820
03:48:25,000 --> 03:48:26,960
think so, but what we could do

1821
03:48:26,960 --> 03:48:29,180
is

1822
03:48:29,180 --> 03:48:30,460
we could return the plot.

1823
03:48:32,600 --> 03:48:32,800
Yeah.

1824
03:48:32,800 --> 03:48:40,920
Yeah, well, I mean, I was going to say, why not, but we are clearing it between each iteration.

1825
03:48:42,260 --> 03:48:42,760
Do we?

1826
03:48:43,440 --> 03:48:47,080
Because, do we actually need to do that?

1827
03:48:49,140 --> 03:48:50,500
I guess we do.

1828
03:48:50,500 --> 03:49:08,160
I think we do need to clear it, but what might work is to essentially indicate during the plot data that we want to get a plot, that we want to get some Xs or something.

1829
03:49:12,680 --> 03:49:14,380
Maybe that's too much.

1830
03:49:14,380 --> 03:49:22,740
okay well uh let's just go on and uh take the whole plotting section move it into a function

1831
03:49:22,740 --> 03:49:29,220
function for now yeah and uh that can be fine-tuned later but it's the straightforward

1832
03:49:29,220 --> 03:49:37,260
thing to do is to make a new function so now it's taking temperature number of measurements

1833
03:49:37,260 --> 03:49:40,840
So the number of measurements affects the file name.

1834
03:49:41,540 --> 03:49:43,420
So it is actually...

1835
03:49:43,420 --> 03:49:44,360
Does it only affect...

1836
03:49:44,360 --> 03:49:45,660
Yeah, it only affects the file name.

1837
03:49:45,760 --> 03:49:51,800
Then we might rename that because...

1838
03:49:51,800 --> 03:49:52,920
It could be file name.

1839
03:49:52,980 --> 03:49:53,740
Yeah, that makes sense.

1840
03:50:07,260 --> 03:50:17,020
Okay, and then we construct the file in there.

1841
03:50:17,020 --> 03:50:23,380
Okay, so this seems to make sense, although, well, I guess the fact that the function is

1842
03:50:23,380 --> 03:50:26,320
defined below, does it matter?

1843
03:50:26,320 --> 03:50:27,820
I think it does.

1844
03:50:27,820 --> 03:50:35,740
Yeah, there's a difference in how it works in inside classes and in the normal script.

1845
03:50:35,740 --> 03:50:40,540
classes you can reorder about the about a script test to have everything defined before it's being

1846
03:50:40,540 --> 03:50:56,060
called yeah okay so huh here's a question there we are why do we calculate oh did it actually

1847
03:50:56,060 --> 03:51:02,860
create the oh right okay so um one question why do we calculate the mean

1848
03:51:04,300 --> 03:51:14,140
oh because it is actually used in the plot right yes in fact somebody said that in the oh yeah

1849
03:51:14,140 --> 03:51:21,980
notes and i uh i just didn't understand um okay so um yes you should also include mean as a parameter

1850
03:51:26,060 --> 03:51:30,700
Yeah, if you want to have it in the box.

1851
03:51:30,700 --> 03:51:31,700
Okay.

1852
03:51:31,700 --> 03:51:37,040
And the reason I'm ordering it temperatures mean, because personally to me, temperatures

1853
03:51:37,040 --> 03:51:40,560
and mean are what this function actually needs.

1854
03:51:40,560 --> 03:51:46,500
And for file name, if I just want to use this once, I could actually give a default value.

1855
03:51:46,500 --> 03:51:48,960
Yeah, it could be an option.

1856
03:51:48,960 --> 03:51:49,960
That's why I...

1857
03:51:49,960 --> 03:51:57,560
kind of ordered in a way um by um by similar things okay

1858
03:52:01,400 --> 03:52:03,800
so this is what we now get

1859
03:52:06,600 --> 03:52:13,080
which looks yeah okay okay so now it just shows them again and again

1860
03:52:13,080 --> 03:52:17,480
it looks like the files are not working correctly they are not um

1861
03:52:19,960 --> 03:52:30,440
Okay. Well, we can come back to that at some point. It's a bit weird that we're starting

1862
03:52:30,440 --> 03:52:41,440
from a code that doesn't work and trying to make it better by fixing it. Yeah, I just

1863
03:52:41,440 --> 03:52:42,840
I don't really know what it could be.

1864
03:52:43,000 --> 03:52:44,620
What if we remove the show?

1865
03:52:46,660 --> 03:52:47,660
Does that help?

1866
03:52:50,760 --> 03:52:51,480
Let's see.

1867
03:52:55,080 --> 03:52:56,280
Yes, that helps.

1868
03:52:56,440 --> 03:52:56,860
Okay.

1869
03:52:57,720 --> 03:52:58,500
What is that?

1870
03:52:59,540 --> 03:53:00,680
That's a very good question.

1871
03:53:01,000 --> 03:53:01,760
Well, fine.

1872
03:53:02,500 --> 03:53:03,800
Now we have some plots.

1873
03:53:03,900 --> 03:53:04,280
That's good.

1874
03:53:05,080 --> 03:53:09,540
Might it be that show actually clears the plot?

1875
03:53:10,120 --> 03:53:11,320
Yeah, could be.

1876
03:53:11,440 --> 03:53:14,520
let's test something

1877
03:53:14,520 --> 03:53:17,580
okay

1878
03:53:17,580 --> 03:53:19,520
what happens if we do this

1879
03:53:19,520 --> 03:53:23,320
need to save it

1880
03:53:23,320 --> 03:53:27,540
so I'm getting the plots

1881
03:53:27,540 --> 03:53:30,560
and

1882
03:53:30,560 --> 03:53:33,080
I'm getting the images

1883
03:53:33,080 --> 03:53:35,320
so seemingly show cleans

1884
03:53:35,320 --> 03:53:37,820
yeah okay but well I mean

1885
03:53:37,820 --> 03:53:39,840
that's on one hand interesting

1886
03:53:39,840 --> 03:53:40,940
that's good to know

1887
03:53:40,940 --> 03:53:47,820
So very much like a Matplotlib-specific thing, a Python-specific thing. So yeah.

1888
03:53:53,260 --> 03:53:58,220
Okay, so there are for loops, functions, and so on. You can get this far,

1889
03:53:59,020 --> 03:54:01,660
or you can do exactly the same things in any language.

1890
03:54:04,940 --> 03:54:10,300
Setting the labels will, of course, be a different function depending on the library.

1891
03:54:10,940 --> 03:54:18,220
all of that i think what we can also um move into a function is reading the data

1892
03:54:20,940 --> 03:54:25,500
yes so reading the data and this is a suggestion directly from the notes so

1893
03:54:26,220 --> 03:54:34,460
another function for reading the data and it could be so read data is very general

1894
03:54:34,460 --> 03:54:39,820
and it makes sense it could also be read temperatures or something like that

1895
03:54:40,940 --> 03:54:46,780
Well, let's call it readData, if I know.

1896
03:54:46,780 --> 03:54:56,720
So the readData reads the temperatures from the CSV file, and it then also picks the column.

1897
03:54:56,720 --> 03:55:01,120
So it specifically is the data that we want in this case.

1898
03:55:01,120 --> 03:55:04,320
Okay, should we also have a...

1899
03:55:04,320 --> 03:55:05,320
I could...

1900
03:55:05,320 --> 03:55:08,620
Well, we could make this a bit more general.

1901
03:55:08,620 --> 03:55:16,620
well yeah yeah let's uh let's do that since i um since i already mentioned it at this point

1902
03:55:16,620 --> 03:55:27,060
might as well do it so you can give it a um file name argument i i would leave it at file name and

1903
03:55:27,060 --> 03:55:32,480
um so we are assuming that we have a certain format of the of the data and that this format

1904
03:55:32,480 --> 03:55:34,520
it has a column air temperature

1905
03:55:34,520 --> 03:55:36,100
degree Celsius.

1906
03:55:36,380 --> 03:55:38,320
That's the assumption

1907
03:55:38,320 --> 03:55:40,420
that we are putting in. We don't

1908
03:55:40,420 --> 03:55:42,420
necessarily know what file name

1909
03:55:42,420 --> 03:55:43,780
this is being saved in.

1910
03:55:45,960 --> 03:55:46,520
No.

1911
03:55:46,720 --> 03:55:48,500
We don't know the output file name.

1912
03:55:49,140 --> 03:55:50,540
The read data

1913
03:55:50,540 --> 03:55:51,840
needs the input file.

1914
03:55:52,840 --> 03:55:54,660
There is one good point

1915
03:55:54,660 --> 03:55:56,180
in the notes. There's many

1916
03:55:56,180 --> 03:55:57,680
good points in the notes.

1917
03:55:59,040 --> 03:56:00,740
One new good point

1918
03:56:00,740 --> 03:56:02,340
in the notes, which is that

1919
03:56:02,340 --> 03:56:04,540
we could read the data just once

1920
03:56:04,540 --> 03:56:06,680
instead of reading it many times

1921
03:56:06,680 --> 03:56:08,600
and then taking

1922
03:56:08,600 --> 03:56:09,320
the

1923
03:56:09,320 --> 03:56:12,640
first n rows.

1924
03:56:14,480 --> 03:56:15,200
That's

1925
03:56:15,200 --> 03:56:16,980
also an option. Then we remove

1926
03:56:16,980 --> 03:56:17,440
this

1927
03:56:17,440 --> 03:56:20,980
completely.

1928
03:56:23,240 --> 03:56:25,440
We'd need to then put

1929
03:56:25,440 --> 03:56:27,680
this

1930
03:56:27,680 --> 03:56:30,360
temperature

1931
03:56:30,360 --> 03:56:46,900
data is read data this and then we have temperatures blah there's an arrow missing

1932
03:56:46,900 --> 03:56:59,000
okay is um actually that is temperature data frame yeah and i'm never sure about

1933
03:56:59,000 --> 03:57:05,640
the the exact syntax it's a column so i think you can do a direct number indices

1934
03:57:07,400 --> 03:57:12,680
and then it starts with zero yeah i mean you don't have to explicitly write zero but then again why

1935
03:57:12,680 --> 03:57:22,600
not let's see if that works um the notes are also suggesting a command line interface is that should

1936
03:57:22,600 --> 03:57:25,660
Should we first think about functions a bit more?

1937
03:57:25,660 --> 03:57:28,780
Looks correct.

1938
03:57:28,780 --> 03:57:31,420
Look at side effects.

1939
03:57:31,420 --> 03:57:35,860
So OK, let's have a look.

1940
03:57:35,860 --> 03:57:39,880
Personally, I said I would wonder whether we

1941
03:57:39,880 --> 03:57:43,940
can return the plot data.

1942
03:57:43,940 --> 03:57:47,900
So something like instead of.

1943
03:57:47,900 --> 03:57:52,300
and have a

1944
03:57:52,300 --> 03:57:55,660
um

1945
03:57:55,660 --> 03:57:58,300
so if you are constructing

1946
03:57:58,300 --> 03:58:00,700
a new plot you might as well clear it

1947
03:58:00,700 --> 03:58:02,460
when you start

1948
03:58:02,460 --> 03:58:07,260
right

1949
03:58:07,260 --> 03:58:17,180
yeah and then leave it open that's true

1950
03:58:17,900 --> 03:58:37,040
Yeah, at which point we could also, in theory, do a this is PLT and then PLT.show to get our visuals back in, for example, a Jupyter Notebook.

1951
03:58:39,740 --> 03:58:40,380
Yep.

1952
03:58:40,680 --> 03:58:42,720
If you want to put this back into a Jupyter Notebook.

1953
03:58:42,720 --> 03:58:51,920
So this function is then usable both as a function in a program

1954
03:58:51,920 --> 03:58:54,940
and in a Jupyter Notebook where we want to, in the end, present this.

1955
03:58:55,460 --> 03:58:57,120
Yeah, that makes sense.

1956
03:58:58,760 --> 03:59:00,700
Okay, did you try running it, though?

1957
03:59:02,040 --> 03:59:03,000
Not yet.

1958
03:59:06,660 --> 03:59:09,220
But this seems to be correct.

1959
03:59:09,400 --> 03:59:10,420
Yeah, it works. Good.

1960
03:59:10,420 --> 03:59:13,840
I didn't test it with the PLT.show yet.

1961
03:59:15,700 --> 03:59:16,400
Let's see.

1962
03:59:20,200 --> 03:59:21,700
Yeah, I'm getting the plots.

1963
03:59:22,760 --> 03:59:25,440
I need to now close them again so that it finishes,

1964
03:59:25,600 --> 03:59:26,960
but I'm getting the plots.

1965
03:59:27,820 --> 03:59:27,940
Yeah.

1966
03:59:30,000 --> 03:59:30,540
Okay.

1967
03:59:31,360 --> 03:59:35,200
Well, yeah, we don't need the plot.show now.

1968
03:59:36,960 --> 03:59:39,560
If you prefer to keep it, then why not?

1969
03:59:40,420 --> 03:59:48,640
so in the in this script no we don't need them yeah if we want to put this

1970
03:59:48,640 --> 03:59:54,220
way we could we could actually notebook yeah go back to our notebook so what is

1971
03:59:54,220 --> 04:00:01,060
it that we currently need to do we essentially have this is what we are

1972
04:00:01,060 --> 04:00:12,500
currently doing yeah this is nice to show i mean basically so what we're showing here is um how

1973
04:00:12,500 --> 04:00:19,700
you import your own code into the notebook and then when it imports some functions from

1974
04:00:19,700 --> 04:00:23,540
no there wasn't weather prediction it was whether what was the name

1975
04:00:23,540 --> 04:00:28,320
it was better predictions okay

1976
04:00:28,320 --> 04:00:30,100
okay

1977
04:00:30,100 --> 04:00:32,660
so yeah importing from the

1978
04:00:32,660 --> 04:00:33,660
back from the file

1979
04:00:33,660 --> 04:00:37,380
there's an extra

1980
04:00:37,380 --> 04:00:38,040
ict

1981
04:00:38,040 --> 04:00:39,940
of predictions

1982
04:00:39,940 --> 04:00:41,520
predictions

1983
04:00:41,520 --> 04:00:43,080
predictions

1984
04:00:43,080 --> 04:00:44,100
yeah

1985
04:00:44,100 --> 04:00:47,220
okay so now we have

1986
04:00:47,220 --> 04:00:47,760
data

1987
04:00:47,760 --> 04:00:50,900
okay

1988
04:00:50,900 --> 04:00:52,700
so that makes sense

1989
04:00:52,700 --> 04:01:07,880
and there we are and now our our our script our jupiter script essentially says okay we are

1990
04:01:07,880 --> 04:01:14,080
reading data and then we are going over different measurements there is barely any functional code

1991
04:01:14,080 --> 04:01:22,660
here anymore so so what do you think about the mean calculation um it is like if you if

1992
04:01:22,660 --> 04:01:29,300
we're calculating more complicated statistics, it should become its own function. But it is not a

1993
04:01:29,300 --> 04:01:39,300
super complicated thing here, is it? To me, here's a bit of a point. For this mean, I probably

1994
04:01:39,300 --> 04:01:48,260
wouldn't create a function. But for the purpose of this, I would probably create something that does

1995
04:01:48,260 --> 04:01:50,720
build some statistics

1996
04:01:50,720 --> 04:01:51,940
and I would probably

1997
04:01:51,940 --> 04:01:54,560
because it's

1998
04:01:54,560 --> 04:01:57,160
not that likely that it's just the mean

1999
04:01:57,160 --> 04:01:58,840
that you normally need

2000
04:01:58,840 --> 04:02:00,000
for statistics.

2001
04:02:02,240 --> 04:02:03,040
If you just want

2002
04:02:03,040 --> 04:02:04,820
to mean, so there's a very good point

2003
04:02:04,820 --> 04:02:07,200
in the notes again.

2004
04:02:08,260 --> 04:02:09,120
Writing your own

2005
04:02:09,120 --> 04:02:10,380
mean function is also a bit

2006
04:02:10,380 --> 04:02:11,700
stupid.

2007
04:02:13,720 --> 04:02:14,800
It's like if you want

2008
04:02:14,800 --> 04:02:15,720
the standard mean

2009
04:02:15,720 --> 04:02:21,240
well I mean yeah the mean the average

2010
04:02:21,240 --> 04:02:26,160
there's multiple different averages that we could use so in that sense having a function where you can go

2011
04:02:26,160 --> 04:02:29,800
and change which average you want might make sense

2012
04:02:29,800 --> 04:02:33,900
but we could also use numpy.mean

2013
04:02:33,900 --> 04:02:38,060
or actually it is a pandas column so you can

2014
04:02:38,060 --> 04:02:40,260
call just temperatures.mean

2015
04:02:40,260 --> 04:02:47,700
would i think it would work i think there's a mean function just directly embedded in the

2016
04:02:47,700 --> 04:02:53,880
pandas column class so in in any case i mean whatever language you're using almost certainly

2017
04:02:53,880 --> 04:03:00,700
it already has a mean uh function in it or some pretty much like it yes yeah

2018
04:03:00,700 --> 04:03:06,360
so so yeah we don't actually have to write our own mean function for this one although

2019
04:03:06,360 --> 04:03:09,640
So, again, it would also be a good example.

2020
04:03:10,260 --> 04:03:12,220
It's one of the things that you might want to do,

2021
04:03:12,420 --> 04:03:14,960
but, well, you already wrote two functions.

2022
04:03:14,960 --> 04:03:18,940
So, there's actually a different question

2023
04:03:18,940 --> 04:03:21,340
that I would be kind of asking here.

2024
04:03:21,960 --> 04:03:26,900
Is the mean actually an input to the plot function or not?

2025
04:03:27,420 --> 04:03:30,080
Because the mean here is just used

2026
04:03:30,080 --> 04:03:32,920
to create a plot line at the mean level.

2027
04:03:32,920 --> 04:03:42,400
so and is something that is a derivative from temperatures so we don't need this as an input

2028
04:03:42,400 --> 04:03:50,020
yeah you could move that calculation into yeah and i think this is i don't know what do people

2029
04:03:50,020 --> 04:03:57,220
think is this better i think it makes sense this way it also makes sense depending on what you're

2030
04:03:57,220 --> 04:04:05,180
doing it might make sense to have um a line argument or x line or is it a y line whichever

2031
04:04:05,180 --> 04:04:13,080
it is um in the plot data that allows you to just define where the line goes and it then it doesn't

2032
04:04:13,080 --> 04:04:21,180
have to be a mean necessarily it could be whatever line you want um but going a bit into going a bit

2033
04:04:21,180 --> 04:04:27,900
um over the top of how this could be designed conceptually temperatures could be a class or

2034
04:04:27,900 --> 04:04:34,300
something we could have a temperature object class where you can set what kind of things you want to

2035
04:04:34,300 --> 04:04:41,100
have like what kind of average value you want to use and then you would essentially

2036
04:04:43,660 --> 04:04:47,660
say temperatures.average and temperatures.values instead of

2037
04:04:47,660 --> 04:04:49,520
these two

2038
04:04:49,520 --> 04:04:52,100
and then have it dependent on the temperature.

2039
04:04:52,500 --> 04:04:54,380
So people want to get to the command line.

2040
04:04:56,940 --> 04:04:58,240
One more thing before

2041
04:04:58,240 --> 04:04:59,640
we go there.

2042
04:05:00,200 --> 04:05:02,300
What do you think of the comments? Oh, actually

2043
04:05:02,300 --> 04:05:03,240
two more things. One,

2044
04:05:04,680 --> 04:05:06,280
what's the error message

2045
04:05:06,280 --> 04:05:07,480
that you get when you run this?

2046
04:05:09,460 --> 04:05:09,900
And

2047
04:05:09,900 --> 04:05:11,900
how do you figure out where the error is?

2048
04:05:13,660 --> 04:05:14,560
Can you run it?

2049
04:05:17,660 --> 04:05:22,400
Okay. So how do we figure out what the error message is? This is not the error I was expecting.

2050
04:05:22,640 --> 04:05:24,500
I was expecting a different one.

2051
04:05:25,560 --> 04:05:33,440
Maybe there is a different one. So I removed the means here. So I need to do that here.

2052
04:05:33,740 --> 04:05:40,040
Yeah. So I guess my main point is there's no reason to be scared of errors. They just tell

2053
04:05:40,040 --> 04:05:44,660
you the line that you need to change, usually, in almost any language. In some languages,

2054
04:05:44,660 --> 04:05:49,940
though you need to fiddle around like compile it differently to get the line numbers but still

2055
04:05:50,500 --> 04:05:53,780
um it's always did you mean that error to get errors yes i meant this one

2056
04:05:56,980 --> 04:06:07,140
so that's on line uh 11. okay yeah and this is something that a good ide would actually flag

2057
04:06:07,140 --> 04:06:15,900
like during the development, that this is not existent, so this can't work.

2058
04:06:16,420 --> 04:06:16,500
Yeah.

2059
04:06:17,500 --> 04:06:24,240
So two things we want to do, or at least two things, command line interface and tests.

2060
04:06:24,480 --> 04:06:25,460
Which do we do first?

2061
04:06:26,860 --> 04:06:31,080
So we have command line interface twice in the nodes.

2062
04:06:31,500 --> 04:06:33,680
Yeah, then let's go for command line interface.

2063
04:06:34,180 --> 04:06:35,680
So let's go with that.

2064
04:06:36,320 --> 04:06:43,920
and uh what's your favorite i think um i have started using click more and more because

2065
04:06:43,920 --> 04:06:51,360
i've learned it from code refinery and it's um it's convenient i'm generally fine with whatever

2066
04:06:51,360 --> 04:06:58,240
um i haven't personally used click that much but um you can in the worst case uh go uh

2067
04:06:59,520 --> 04:07:02,560
send me yeah i mean this is again something that i'm like

2068
04:07:02,560 --> 04:07:07,980
different languages have their different implementations of how to do command line

2069
04:07:07,980 --> 04:07:18,140
arguments so we'll do it again in python the example is in python but yeah you can search

2070
04:07:18,140 --> 04:07:23,620
the web for command line interface and the language that you're using and there will

2071
04:07:23,620 --> 04:07:32,060
almost certainly be a very good library for doing them in a simple way okay so

2072
04:07:32,060 --> 04:07:35,500
So to do this, we want to foreclick.

2073
04:07:35,880 --> 04:07:37,400
Yeah, you need a main function.

2074
04:07:45,300 --> 04:07:53,780
And then you need to define how you give those arguments in the command line.

2075
04:07:54,700 --> 04:07:57,420
Actually, we don't have an out file at the moment.

2076
04:07:57,420 --> 04:08:05,100
So our old file is currently fixed. We can change that later, maybe.

2077
04:08:07,420 --> 04:08:12,620
So if I see that right, then we have a definition that this is...

2078
04:08:13,900 --> 04:08:17,100
So this is kind of an annotation to the main function.

2079
04:08:20,220 --> 04:08:21,820
But yeah, this is a command.

2080
04:08:21,820 --> 04:08:26,300
Yeah. So now this main function is something you can run from the command line,

2081
04:08:26,300 --> 04:08:33,660
and then you add options so options are the command line arguments and they also

2082
04:08:33,660 --> 04:08:37,900
must have the same name as oh well i mean the easiest thing to do

2083
04:08:37,900 --> 04:08:41,260
is to give them the same name as the parameters of the main function

2084
04:08:46,220 --> 04:08:48,780
actually looking at this this is not the same name

2085
04:08:48,780 --> 04:08:55,200
this has a minus in fact yes this is well that's a peculiarity of python

2086
04:08:55,200 --> 04:09:02,280
yeah maybe a good number of other languages have the same issue so you cannot have a minus sign

2087
04:09:02,280 --> 04:09:08,560
inside the name right it would be num minus measurements it would be a math calculation

2088
04:09:08,560 --> 04:09:16,640
not a name so uh it has to be an underscore but click will automatically convert the

2089
04:09:16,640 --> 04:09:19,000
minus sign into an underscore

2090
04:09:19,000 --> 04:09:19,440
here.

2091
04:09:20,760 --> 04:09:22,120
Is the

2092
04:09:22,120 --> 04:09:24,700
order relevant, or is it really

2093
04:09:24,700 --> 04:09:27,360
name matching? The order should be the same

2094
04:09:27,360 --> 04:09:28,680
as in the options.

2095
04:09:28,680 --> 04:09:30,600
Then it's just the order that it's

2096
04:09:30,600 --> 04:09:32,480
using. I think I've tried.

2097
04:09:32,740 --> 04:09:34,880
We can try. If you change

2098
04:09:34,880 --> 04:09:37,380
the name, I think it will work.

2099
04:09:38,900 --> 04:09:40,260
We can also try changing the order.

2100
04:09:40,260 --> 04:09:42,320
Well, if we have time.

2101
04:09:46,640 --> 04:10:05,600
so these are the two values that we have and then we essentially have our functionality here

2102
04:10:07,600 --> 04:10:09,200
and we need to

2103
04:10:09,200 --> 04:10:14,540
Oh, no, we have the outfile.

2104
04:10:14,600 --> 04:10:15,600
Ah, we have an outfile.

2105
04:10:15,920 --> 04:10:17,360
Yeah, of course we have an outfile.

2106
04:10:18,740 --> 04:10:21,420
Well, yeah, if we are

2107
04:10:21,420 --> 04:10:23,780
plotting one particular number of...

2108
04:10:23,780 --> 04:10:25,660
No, we have an outfile.

2109
04:10:25,840 --> 04:10:28,020
Yeah, but we can simply replace this

2110
04:10:28,020 --> 04:10:28,800
by the outfile.

2111
04:10:29,660 --> 04:10:30,260
Yeah, yeah.

2112
04:10:31,380 --> 04:10:32,620
So we have an outfile.

2113
04:10:35,060 --> 04:10:35,540
Modular.

2114
04:10:35,540 --> 04:10:40,580
the modularity helps here already

2115
04:10:40,580 --> 04:10:43,000
we have one specific number of measurements

2116
04:10:43,000 --> 04:10:47,060
and then a specific name for the output file

2117
04:10:47,060 --> 04:10:49,540
that means we don't have the follow-up anymore

2118
04:10:49,540 --> 04:10:52,040
yeah, that's true

2119
04:10:52,040 --> 04:10:55,980
that's something I just wanted to ask

2120
04:10:55,980 --> 04:10:58,600
how do you set defaults in Qlik?

2121
04:11:00,800 --> 04:11:01,740
a good question

2122
04:11:01,740 --> 04:11:03,760
we don't have it in the example

2123
04:11:03,760 --> 04:11:12,240
But probably since this default depends on a different import, let's just have it required.

2124
04:11:12,240 --> 04:11:18,800
So, yeah, in this case, it would be nice to show how you add a default value.

2125
04:11:20,240 --> 04:11:23,440
It's just default equals something. But for the outfile,

2126
04:11:25,600 --> 04:11:28,480
yeah, you should not, you can say default equals none.

2127
04:11:28,480 --> 04:11:32,960
Yeah, but then you don't have an outfile number.

2128
04:11:32,960 --> 04:11:37,840
but that you mean if it's none then you use the number of measurements

2129
04:11:37,840 --> 04:11:42,460
but you also have to remove the required equals true

2130
04:11:42,460 --> 04:11:49,080
if you have default equals none i i think at least it makes sense this way

2131
04:11:49,080 --> 04:11:58,300
so now we check if a the alt file is not given so the default value is none that's usually easy

2132
04:11:58,300 --> 04:12:04,220
to check and usually not what you want so then we can use this default value

2133
04:12:06,540 --> 04:12:15,020
okay and otherwise we just use whatever value is in out file so um yeah that should be in file

2134
04:12:16,140 --> 04:12:22,060
you could also set this to false and um just have to have another default value for temperatures

2135
04:12:22,060 --> 04:12:28,620
of csv or something okay it depends on like how you want to use the interface

2136
04:12:29,580 --> 04:12:32,380
a default value for an input file can be surprising

2137
04:12:35,020 --> 04:12:37,500
and you generally want to avoid surprises

2138
04:12:40,060 --> 04:12:45,820
so now we have the out file now we don't have the for loop anymore right yes we don't have that

2139
04:12:45,820 --> 04:12:52,620
anymore yeah oh and yeah now we need the standard python thing if name equals underscore underscore

2140
04:12:52,620 --> 04:13:00,380
name if if the name equals main with lots of underscores um then we call the main function

2141
04:13:01,580 --> 04:13:05,660
and if you don't know python this doesn't mean anything to you and if you know python

2142
04:13:05,660 --> 04:13:12,300
it still doesn't mean anything to you it's just python okay um if i'm calling that correctly it's

2143
04:13:12,300 --> 04:13:19,900
due to forks and things, so if you have multiprocessing, only one of the things

2144
04:13:19,900 --> 04:13:24,940
will be called main, and therefore execute the main, and everything else will not do that.

2145
04:13:24,940 --> 04:13:30,780
Yeah, so essentially if you import it as a module, then main will not execute, and we can still

2146
04:13:30,780 --> 04:13:38,460
import it in the Jupyter code, and it will work the same way as before. But if you run it as a script,

2147
04:13:38,460 --> 04:13:40,380
then this main section will execute.

2148
04:13:45,340 --> 04:13:47,180
So it's something you see often.

2149
04:13:47,180 --> 04:14:16,340
If you write something incorrectly or just don't remember what the parameters are

2150
04:14:16,340 --> 04:14:24,580
will produce a message that tells you how to run. Okay, it didn't create a 26. Yes,

2151
04:14:24,580 --> 04:14:25,580
it did. Okay.

2152
04:14:25,580 --> 04:14:28,720
It did. It just takes time to show up.

2153
04:14:28,720 --> 04:14:35,600
Okay. So it works. Great. One thing I was thinking a while ago, what do you think

2154
04:14:35,600 --> 04:14:39,380
about the comments in this main function?

2155
04:14:39,380 --> 04:14:45,020
read the data from a file

2156
04:14:45,020 --> 04:14:48,040
this is definitely the wrong place

2157
04:14:48,040 --> 04:14:49,660
but readData

2158
04:14:49,660 --> 04:14:51,820
the function name readData is

2159
04:14:51,820 --> 04:14:55,520
it tells you

2160
04:14:55,520 --> 04:14:57,240
exactly the same thing

2161
04:14:57,240 --> 04:14:59,200
you don't need the comment

2162
04:14:59,200 --> 04:15:01,840
this comment is

2163
04:15:01,840 --> 04:15:03,460
more self-explanatory

2164
04:15:03,460 --> 04:15:06,240
this could be a

2165
04:15:06,240 --> 04:15:07,320
select the

2166
04:15:07,320 --> 04:15:10,600
requested

2167
04:15:10,600 --> 04:15:12,280
measurements

2168
04:15:12,280 --> 04:15:13,920
could

2169
04:15:13,920 --> 04:15:15,040
well

2170
04:15:15,040 --> 04:15:18,760
I would say for anyone who has

2171
04:15:18,760 --> 04:15:20,820
worked with Pandas a bit it's clear what this

2172
04:15:20,820 --> 04:15:22,680
does but might still be

2173
04:15:22,680 --> 04:15:23,400
useful to have

2174
04:15:23,400 --> 04:15:26,760
and then

2175
04:15:26,760 --> 04:15:27,500
plot results

2176
04:15:27,500 --> 04:15:30,660
so the point is the function

2177
04:15:30,660 --> 04:15:32,780
names explain what is happening

2178
04:15:32,780 --> 04:15:34,760
if someone is just looking through the

2179
04:15:34,760 --> 04:15:35,380
main function

2180
04:15:35,380 --> 04:15:38,600
we don't need to actually explain in comments

2181
04:15:38,600 --> 04:15:41,560
because now since we made the code modular

2182
04:15:41,560 --> 04:15:43,800
and we used helpful function names,

2183
04:15:44,400 --> 04:15:49,420
the comments are suddenly a lot less necessary.

2184
04:15:49,420 --> 04:15:53,320
The code explains itself, right?

2185
04:15:56,480 --> 04:15:57,280
Okay.

2186
04:15:58,020 --> 04:16:03,260
Can you also try running this from the Jupyter Notebook?

2187
04:16:03,260 --> 04:16:07,280
so we should see that it still works

2188
04:16:07,280 --> 04:16:09,360
you mean

2189
04:16:09,360 --> 04:16:11,440
you mean

2190
04:16:11,440 --> 04:16:12,580
where is my

2191
04:16:12,580 --> 04:16:15,360
you mean rerunning what we had here

2192
04:16:15,360 --> 04:16:15,940
yeah

2193
04:16:15,940 --> 04:16:19,840
so this is importing the two functions

2194
04:16:19,840 --> 04:16:20,840
and yeah

2195
04:16:20,840 --> 04:16:23,820
so the fact that we made this

2196
04:16:23,820 --> 04:16:25,440
added this command line interface

2197
04:16:25,440 --> 04:16:27,240
doesn't actually change anything

2198
04:16:27,240 --> 04:16:29,480
let's restart this

2199
04:16:29,480 --> 04:16:31,400
because we have an import here

2200
04:16:31,400 --> 04:16:31,940
and

2201
04:16:31,940 --> 04:16:36,760
yeah well actually yes

2202
04:16:36,760 --> 04:16:37,840
something can change

2203
04:16:37,840 --> 04:16:41,600
we no longer give the mean as a parameter

2204
04:16:41,600 --> 04:16:42,320
true

2205
04:16:42,320 --> 04:16:45,380
you see that's why restarting

2206
04:16:45,380 --> 04:16:46,040
was important

2207
04:16:46,040 --> 04:16:46,900
true

2208
04:16:46,900 --> 04:16:58,560
but yes

2209
04:16:58,560 --> 04:17:00,160
general it works

2210
04:17:00,160 --> 04:17:01,680
we just had a

2211
04:17:01,680 --> 04:17:04,040
small bug

2212
04:17:04,040 --> 04:17:07,980
because we changed

2213
04:17:07,980 --> 04:17:08,360
our

2214
04:17:08,360 --> 04:17:12,860
yeah

2215
04:17:12,860 --> 04:17:16,180
so the next thing was to

2216
04:17:16,180 --> 04:17:17,320
add tests

2217
04:17:17,320 --> 04:17:19,580
no the next thing I think would be to

2218
04:17:19,580 --> 04:17:22,120
to have this input

2219
04:17:22,120 --> 04:17:23,820
I hope that click

2220
04:17:23,820 --> 04:17:26,100
does something with this

2221
04:17:26,100 --> 04:17:27,880
yeah it works

2222
04:17:27,880 --> 04:17:35,940
So, yeah, this is what Qlik provides you, essentially, all this additional information,

2223
04:17:35,940 --> 04:17:40,740
and that you essentially have a command line interface where you can get the standard parameters

2224
04:17:40,740 --> 04:17:51,440
like help, some information about, okay, how does this work, and so on.

2225
04:17:51,440 --> 04:18:11,040
Okay, yeah, that makes sense.

2226
04:18:13,160 --> 04:18:16,540
So yeah, we're just telling what the default value actually is.

2227
04:18:16,540 --> 04:18:22,980
If you don't provide a default, I think it's a good idea to help or to give this kind of information.

2228
04:18:24,740 --> 04:18:29,460
Oh, and yes, it is in fact time for a break.

2229
04:18:29,620 --> 04:18:31,040
We have been going on for an hour.

2230
04:18:32,560 --> 04:18:39,160
And yes, since we are not following a schedule, I'm not keeping an eye on it.

2231
04:18:39,340 --> 04:18:43,960
It is definitely already, like I should have started the break a while ago, I guess.

2232
04:18:43,960 --> 04:18:46,580
but we can take the break now

2233
04:18:46,580 --> 04:18:48,520
for 10 minutes and be back

2234
04:18:48,520 --> 04:18:49,500
at 14.10

2235
04:18:49,500 --> 04:18:51,960
and then do the tests after that

2236
04:18:51,960 --> 04:18:52,580
yeah

2237
04:18:52,580 --> 04:18:55,780
okay so

2238
04:18:55,780 --> 04:18:58,040
yeah let's take a break

2239
04:18:58,040 --> 04:19:00,600
walk around a little bit and see you then

2240
04:19:00,600 --> 04:19:01,340
bye

2241
04:19:01,340 --> 04:19:02,520
see you later

2242
04:19:13,960 --> 04:19:15,000
you

2243
04:19:43,960 --> 04:19:45,000
you

2244
04:20:13,960 --> 04:20:15,000
you

2245
04:20:43,960 --> 04:20:45,000
you

2246
04:21:13,960 --> 04:21:15,000
you

2247
04:21:43,960 --> 04:21:45,000
you

2248
04:22:13,960 --> 04:22:15,000
you

2249
04:22:43,960 --> 04:22:45,000
you

2250
04:23:13,960 --> 04:23:15,000
you

2251
04:23:43,960 --> 04:23:45,000
you

2252
04:24:13,960 --> 04:24:15,000
you

2253
04:24:43,960 --> 04:24:45,000
you

2254
04:25:13,960 --> 04:25:15,000
you

2255
04:25:43,960 --> 04:25:45,000
you

2256
04:26:13,960 --> 04:26:15,000
you

2257
04:26:43,960 --> 04:26:45,000
you

2258
04:27:13,960 --> 04:27:15,000
you

2259
04:27:43,960 --> 04:27:45,000
you

2260
04:28:13,960 --> 04:28:15,000
you

2261
04:28:43,960 --> 04:29:07,480
and hi again

2262
04:29:07,480 --> 04:29:09,720
so we wanted to

2263
04:29:09,720 --> 04:29:11,120
get into testing

2264
04:29:11,120 --> 04:29:13,700
yeah so

2265
04:29:14,260 --> 04:29:20,260
um where would you put the tests i personally would create a tests folder

2266
04:29:21,860 --> 04:29:26,900
so it's not a huge project we only have one python file but let's assume it might get become

2267
04:29:26,900 --> 04:29:31,860
bigger at some point and even then even if you have just a single python file i would at least

2268
04:29:31,860 --> 04:29:38,340
create a separate file for the tests but that's just like i guess we are dealing with relatively

2269
04:29:38,340 --> 04:29:45,460
big projects every single time. Well, in any case, it does not hurt. So we can create a test folder,

2270
04:29:46,100 --> 04:29:56,980
and then there is a test weather predictions file there. And it's empty.

2271
04:29:56,980 --> 04:29:59,380
Yeah, there's nothing there at the moment.

2272
04:29:59,380 --> 04:30:07,700
do we test um we have two functions um in our package

2273
04:30:12,260 --> 04:30:16,100
was it retail data okay so um

2274
04:30:19,140 --> 04:30:26,660
these are both a little bit more complicated than it they're not just returning they're not taking

2275
04:30:26,660 --> 04:30:31,480
input values and returning values. Well, read data is, but it is doing something else. It's

2276
04:30:31,480 --> 04:30:40,020
reading from disk. And the other one is creating a file to disk. So we can still test this. And

2277
04:30:40,020 --> 04:30:48,340
it might actually be quite useful to show that it's not that complicated. So why don't we do

2278
04:30:48,340 --> 04:30:56,000
that? Okay, now there's a data folder. Because we want to essentially have our test data as

2279
04:30:56,000 --> 04:31:07,000
data for the tests so we create and this could be essentially anything formatted like uh the data we

2280
04:31:07,000 --> 04:31:13,940
are reading but in this case we have an example file already so why not use that um so yeah we've

2281
04:31:13,940 --> 04:31:21,020
copied the file that contains the temperatures temperatures of csv into this uh data folder

2282
04:31:21,020 --> 04:31:24,440
and now we can make a test read data function.

2283
04:31:25,300 --> 04:31:28,860
So for PyTest specifically,

2284
04:31:29,320 --> 04:31:31,200
the folder name should be tests.

2285
04:31:31,880 --> 04:31:35,420
The module that contains the tests

2286
04:31:35,420 --> 04:31:36,960
should be test underscore something.

2287
04:31:37,200 --> 04:31:39,080
And then the function also needs to be

2288
04:31:39,080 --> 04:31:40,140
test underscore something.

2289
04:31:40,780 --> 04:31:42,640
But this depends on the framework.

2290
04:31:43,780 --> 04:31:45,520
But yeah, so that is why the structure

2291
04:31:45,520 --> 04:31:47,340
that we have here exists.

2292
04:31:48,140 --> 04:31:50,340
Okay, so test read data.

2293
04:31:50,340 --> 04:31:57,540
So what do we do? We call the readData function. I don't think we need really any preample. We can

2294
04:31:57,540 --> 04:32:05,700
just call it, give it the file name. And I guess it's in... Is the path relative? It's always

2295
04:32:05,700 --> 04:32:10,500
relative to what it's called from. Yeah. And we will call it from the main, so...

2296
04:32:10,500 --> 04:32:18,260
Yeah. So it's test slash data slash temperatures dot csv. Okay. And now we can check some values.

2297
04:32:18,260 --> 04:32:21,540
Yeah. Where was it?

2298
04:32:21,540 --> 04:32:23,700
So it's the green. Yeah.

2299
04:32:23,700 --> 04:32:27,140
The values that we had. So let's-

2300
04:32:27,140 --> 04:32:32,100
We only take the air temperature column. That's the only column we have. So we can take

2301
04:32:32,100 --> 04:32:36,020
number eight. Number eight will actually be-

2302
04:32:36,020 --> 04:32:37,220
Number seven.

2303
04:32:37,220 --> 04:32:47,140
Python starts indexing from zero. So it's the index seven. Yeah. We do an asset. So one thing

2304
04:32:47,140 --> 04:32:58,020
is you can write a test function that doesn't have any asserts, and then the test will fail

2305
04:32:58,020 --> 04:33:08,180
only if there's an error. But that can happen. But yeah, so we are checking that the data is

2306
04:33:08,180 --> 04:33:19,460
also read correctly 16. so in a lot of cases you won't be able to have exactly the same data in

2307
04:33:19,460 --> 04:33:26,900
the in your tests because you don't want to push them to a public repository if you're publishing

2308
04:33:26,900 --> 04:33:34,820
your code um but then you can you can create just like randomly type numbers by hand into the file

2309
04:33:34,820 --> 04:33:43,540
and that's fine. You can probably use a different text editor than Jupyter labs

2310
04:33:44,420 --> 04:33:51,060
to open the CSV file and type some numbers in. And I'm putting the Aprox here also for the minus four

2311
04:33:52,260 --> 04:33:58,820
because the problem might be that this line is read as a floating number and we might get

2312
04:33:59,780 --> 04:34:05,780
something that is yeah not exactly four most like most likely it is exactly four or minus four but

2313
04:34:06,420 --> 04:34:11,780
yeah yeah i mean i guess one of these things where you it might be useful to show that there's an

2314
04:34:11,780 --> 04:34:17,220
error but then again it's also that it's specifically pandas that's reading it as

2315
04:34:17,220 --> 04:34:21,140
folding point it might happen it might not happen with a different library or different

2316
04:34:21,140 --> 04:34:26,980
language and so on so yeah let's just do it like this that this looks good looks correct

2317
04:34:26,980 --> 04:34:33,140
Does the read data take any other parameters?

2318
04:34:33,140 --> 04:34:37,460
Yes. It takes a column. So we could just...

2319
04:34:37,460 --> 04:34:40,500
Oh, you can try a different column name, like time. No, well...

2320
04:34:40,500 --> 04:34:47,540
Time might be difficult. The problem is everything else is exactly the same all the

2321
04:34:47,540 --> 04:34:51,620
time. So no, wait, the D is not the same. Okay. It's day.

2322
04:34:51,620 --> 04:34:52,660
Yeah.

2323
04:34:52,660 --> 04:34:54,580
Yeah.

2324
04:34:56,980 --> 04:35:14,480
temperatures. Let's see. Yeah, scroll down a good bit to say zero is one and temperatures

2325
04:35:14,480 --> 04:35:20,760
62 is three.

2326
04:35:20,760 --> 04:35:26,740
These will probably be in the church spot. Oh, you can Yeah, proxy doesn't hurt doesn't

2327
04:35:26,740 --> 04:35:35,460
really hurt here okay um so let's try running the test so now we run pi test

2328
04:35:37,780 --> 04:35:46,020
it found the test which is nice it also yeah and notice that we do not actually have this module

2329
04:35:46,020 --> 04:35:53,940
in the um so yeah i guess this is a bit too python specific

2330
04:35:53,940 --> 04:35:56,500
Yeah, this is very specific.

2331
04:35:56,500 --> 04:36:04,260
We just have to add a dot in front, right? Or is that relative to the tests?

2332
04:36:04,260 --> 04:36:15,700
Let's see. I'm never entirely sure. No, this is... I hate it.

2333
04:36:15,700 --> 04:36:19,380
What's the right way around this? This is the annoying thing with it. I mean, the right

2334
04:36:19,380 --> 04:36:21,820
way around this would be to turn the whole thing into a package.

2335
04:36:21,820 --> 04:36:35,820
Yep, which I'm just doing. This is a bit hacky now, but it's not really. It goes like this.

2336
04:36:35,820 --> 04:36:40,820
Yeah, I mean, the thing that makes it a package is that there is an init file.

2337
04:36:40,820 --> 04:36:43,820
Do I need an init?

2338
04:36:43,820 --> 04:36:47,820
I think you do, in the app folder.

2339
04:36:47,820 --> 04:37:03,840
bit set of txt. So there is an extra Yeah, yeah. Okay.

2340
04:37:03,840 --> 04:37:18,140
No, no, it didn't know module named app or

2341
04:37:18,140 --> 04:37:22,100
Okay.

2342
04:37:22,100 --> 04:37:30,540
I think so if you don't get all the package, then you have to either have it in the same

2343
04:37:30,540 --> 04:37:36,460
folder as the test or it needs to be a this works on different things

2344
04:37:43,500 --> 04:37:46,460
i know that i'm doing exactly this on other projects

2345
04:37:47,900 --> 04:37:54,540
anybody is no no comments in the notes so yeah i mean this is one of these things where i'm

2346
04:37:54,540 --> 04:37:57,360
I often get confused about what's happening.

2347
04:37:58,580 --> 04:38:02,360
Okay, then in this case...

2348
04:38:02,360 --> 04:38:05,480
But if we move the test file into the main folder,

2349
04:38:05,480 --> 04:38:10,920
and we also move the main file back into the main folder.

2350
04:38:12,360 --> 04:38:16,720
No, let's do something that I personally don't really like too much.

2351
04:38:17,020 --> 04:38:20,180
But in this case, I think we'll just do this.

2352
04:38:20,180 --> 04:38:22,820
well I mean you don't have to do

2353
04:38:22,820 --> 04:38:24,840
you don't have to put it in the same file

2354
04:38:24,840 --> 04:38:27,080
as long as

2355
04:38:27,080 --> 04:38:28,760
they're in the same folder it should work

2356
04:38:28,760 --> 04:38:31,200
okay

2357
04:38:31,200 --> 04:38:32,080
let's see

2358
04:38:32,080 --> 04:38:40,500
actually cut

2359
04:38:40,500 --> 04:38:42,940
because we don't want to have this twice

2360
04:38:42,940 --> 04:38:44,540
so

2361
04:38:44,540 --> 04:38:47,340
one common solution

2362
04:38:47,340 --> 04:38:49,260
also is to add

2363
04:38:49,260 --> 04:38:49,880
the

2364
04:38:49,880 --> 04:39:01,780
path where your

2365
04:39:01,780 --> 04:39:03,060
main code is

2366
04:39:03,060 --> 04:39:05,780
to add it to the

2367
04:39:05,780 --> 04:39:07,680
Python path

2368
04:39:07,680 --> 04:39:09,380
where it looks for packages.

2369
04:39:11,800 --> 04:39:13,280
Okay, now it actually ran.

2370
04:39:14,400 --> 04:39:15,620
PyTest is not defined.

2371
04:39:15,620 --> 04:39:16,500
Oh, yes, of course.

2372
04:39:17,240 --> 04:39:18,940
No, it's not fun because

2373
04:39:18,940 --> 04:39:20,380
We didn't import it here.

2374
04:39:21,060 --> 04:39:23,400
Oh, right. It's this PyTest.lab.rocks.

2375
04:39:23,500 --> 04:39:24,080
Okay, nice.

2376
04:39:26,820 --> 04:39:28,380
Okay, now it passed.

2377
04:39:28,380 --> 04:39:28,700
Right.

2378
04:39:34,660 --> 04:39:35,260
Good.

2379
04:39:35,860 --> 04:39:38,360
This is the test for

2380
04:39:38,360 --> 04:39:39,140
our read data.

2381
04:39:41,100 --> 04:39:42,340
I guess we still

2382
04:39:42,340 --> 04:39:44,160
have our test data

2383
04:39:44,160 --> 04:39:45,800
in the tests folder.

2384
04:39:46,600 --> 04:39:47,800
We can do read.

2385
04:39:49,740 --> 04:39:53,180
Let's assume that the 25 here is correct.

2386
04:39:56,460 --> 04:39:59,500
So let's have plot data.

2387
04:40:03,740 --> 04:40:08,780
So this shouldn't take too long, but we also don't have too long, so

2388
04:40:08,780 --> 04:40:13,020
we can take a couple of minutes to do this and then wrap up.

2389
04:40:13,020 --> 04:40:42,180
So this now gets a little bit more complicated because we have the problem that

2390
04:40:42,180 --> 04:40:47,620
need a temporary folder here because we need to write to a file for a test that should be a

2391
04:40:47,620 --> 04:40:57,140
temporary file but python has a package called temp file which i will use for this purpose

2392
04:40:57,940 --> 04:41:05,060
and this is again something that almost any language will have yeah so this gives you

2393
04:41:05,060 --> 04:41:10,500
a temporary file name that you can but you can create the file safely and you will not be

2394
04:41:10,500 --> 04:41:16,260
overwriting anything. Where that file exactly is will depend on the operating system.

2395
04:41:24,260 --> 04:41:34,100
I don't need anything here. And now I need, actually, is it file.name?

2396
04:41:40,500 --> 04:41:57,500
So let's look quickly. So you create a temporary file with tempfile.temporaryfile.

2397
04:41:57,500 --> 04:42:03,960
Yeah, it's .name. Okay.

2398
04:42:03,960 --> 04:42:09,620
And yeah, okay. You found it first. Good.

2399
04:42:09,620 --> 04:42:22,760
should work and then file.name and now we need to compare this with the file

2400
04:42:22,760 --> 04:42:35,600
that we have so do you have a standard solution there is not really a file

2401
04:42:35,600 --> 04:42:43,100
fileCmp. Yeah, fileCmp might make...

2402
04:42:43,100 --> 04:42:47,400
I assume that almost any language has a file comparison.

2403
04:42:47,400 --> 04:42:53,960
One way or another, worst case, you need to compare these with...

2404
04:42:53,960 --> 04:43:03,200
Yeah, so it's fileCmp.CMP, fileName1, fileName2. And I think we can do shallow equals true

2405
04:43:03,200 --> 04:43:08,200
Well, it's not going to take that long anyway.

2406
04:43:08,200 --> 04:43:09,200
Yes.

2407
04:43:09,200 --> 04:43:10,200
Slash 25.png.

2408
04:43:10,200 --> 04:43:11,200
Okay.

2409
04:43:11,200 --> 04:43:18,200
And then just an assert here.

2410
04:43:18,200 --> 04:43:19,200
Yeah.

2411
04:43:19,200 --> 04:43:20,200
Oops.

2412
04:43:20,200 --> 04:43:27,140
That's one too many.

2413
04:43:27,140 --> 04:43:29,880
Let's see if this works.

2414
04:43:29,880 --> 04:43:37,200
It will not work because they have a different modified time.

2415
04:43:37,200 --> 04:43:38,200
Can I ignore that?

2416
04:43:38,200 --> 04:43:44,120
So this is not the contents of the file that is comparing.

2417
04:43:44,120 --> 04:44:07,480
Sorry, this is, should we read in the data and read in some bytes from the data and compare

2418
04:44:07,480 --> 04:44:13,080
that or just i don't want to feel uh to leave it at this point but um

2419
04:44:17,800 --> 04:44:27,000
well but we have very limited time okay then maybe we can do file one

2420
04:44:27,000 --> 04:44:33,080
so open both with open file name one as file one

2421
04:44:33,080 --> 04:44:38,820
or this is the

2422
04:44:38,820 --> 04:44:40,180
as

2423
04:44:40,180 --> 04:44:42,360
test

2424
04:44:42,360 --> 04:44:44,040
is the file we wrote

2425
04:44:44,040 --> 04:44:45,620
not in parentheses

2426
04:44:45,620 --> 04:44:49,080
this is a variable name

2427
04:44:49,080 --> 04:44:50,460
or test output

2428
04:44:50,460 --> 04:44:51,960
and then with

2429
04:44:51,960 --> 04:44:53,880
test output okay

2430
04:44:53,880 --> 04:44:54,980
with

2431
04:44:54,980 --> 04:45:00,420
yeah this file name

2432
04:45:00,420 --> 04:45:03,340
as

2433
04:45:03,340 --> 04:45:05,020
correct output

2434
04:45:05,020 --> 04:45:08,720
test correct

2435
04:45:08,720 --> 04:45:09,140
okay

2436
04:45:09,140 --> 04:45:13,040
so now it's opened both files

2437
04:45:13,040 --> 04:45:14,400
and then you go if

2438
04:45:14,400 --> 04:45:16,960
test output dot read

2439
04:45:16,960 --> 04:45:19,280
and that's a function

2440
04:45:19,280 --> 04:45:19,740
parentheses

2441
04:45:19,740 --> 04:45:22,420
no

2442
04:45:22,420 --> 04:45:24,180
test underscore output

2443
04:45:24,180 --> 04:45:26,000
sorry

2444
04:45:26,000 --> 04:45:28,960
and also if doesn't have parentheses

2445
04:45:28,960 --> 04:45:35,000
is it has yes i'm working in typescript and javascript too much yeah no well not i mean

2446
04:45:35,000 --> 04:45:41,600
it's this is a peculiarity of python again so if it's equal to um isn't it correct output

2447
04:45:41,600 --> 04:45:43,620
you can do assert yeah

2448
04:45:43,620 --> 04:45:55,440
okay that should work it's actually comparing the entire contents of the files which are

2449
04:45:56,400 --> 04:46:02,240
it's a bit over the top but okay yes in object doesn't have an attribute right so

2450
04:46:03,680 --> 04:46:09,520
what are we doing so this is in line 18 let's look at line 18 we can figure it out

2451
04:46:13,200 --> 04:46:22,480
okay yeah plot data file name oh what is our plot data plot data takes temperatures and

2452
04:46:22,480 --> 04:46:32,000
text file name and attribute does what oh it's it's line 12 in plot data

2453
04:46:37,440 --> 04:46:47,360
maybe we um oh oh oh no no okay okay okay now um this is no this is incorrect um

2454
04:46:47,360 --> 04:47:12,960
I think what we need here is this okay I think this test is always the fun part it happens

2455
04:47:12,960 --> 04:47:20,880
very often. Okay.

2456
04:47:24,660 --> 04:47:29,700
Because the thing is, um, the file name just gave gave the the

2457
04:47:29,700 --> 04:47:34,920
integer the location of the file. Okay, this is a bit

2458
04:47:37,220 --> 04:47:39,900
Yeah, I remember seeing stuff like that with a file.

2459
04:47:39,900 --> 04:47:47,660
I'm not sure if there is... no. Okay, no.

2460
04:47:47,660 --> 04:47:58,080
So it's with tempfile.name temporary file as something, and then it has a something.name.

2461
04:47:58,080 --> 04:48:06,660
It's actually a file handler already. You can do temp. Well, I mean, this should work,

2462
04:48:06,660 --> 04:48:07,660
I think.

2463
04:48:07,660 --> 04:48:13,660
Yeah, I just need to say that. Because I'm not sure.

2464
04:48:17,180 --> 04:48:21,180
They need to be, so this line needs to be indented to the same level as the previous one.

2465
04:48:21,180 --> 04:48:23,500
Are you sure? Because I'm opening the same file again.

2466
04:48:23,500 --> 04:48:24,860
No, otherwise temp file is not...

2467
04:48:24,860 --> 04:48:27,660
Yes, that's why I just created an additional variable.

2468
04:48:27,660 --> 04:48:34,700
Okay, you don't have to open it. We are running out of time. But you don't have to open it. You

2469
04:48:34,700 --> 04:48:42,380
you can use the so this named temporary file gives you a file

2470
04:48:42,380 --> 04:48:49,380
handle. So it is already open in the URL. Okay, but then we have

2471
04:48:49,380 --> 04:48:56,420
to open it again, you can, if you go to the so you can instead

2472
04:48:56,420 --> 04:49:04,040
of using the test output, you can use temp file directly. So

2473
04:49:04,040 --> 04:49:14,280
if you remove line 10 to 21 right sorry got a slightly different idea okay um the thing is i

2474
04:49:14,280 --> 04:49:18,600
want this to be closed again because i have the impression we are getting a problem that um

2475
04:49:20,200 --> 04:49:27,080
we have an open file and we are not closing it properly afterwards uh yeah that was my idea

2476
04:49:27,080 --> 04:49:33,480
have to take the name into a different variable yes that's what i just did oh okay

2477
04:49:34,920 --> 04:49:36,760
but we do get an issue okay

2478
04:49:40,040 --> 04:49:54,120
so this is on line 23 um that's an assert issue uh yeah so uh i wanted to show that this is not

2479
04:49:54,120 --> 04:50:00,280
as complicated as it seems. But comparing the files directly seems to be more complicated than...

2480
04:50:00,840 --> 04:50:01,560
Might even be.

2481
04:50:05,240 --> 04:50:08,280
And I think we need to move on to this.

2482
04:50:08,280 --> 04:50:15,960
Yeah. But conceptually, you would take the files and compare them in some way

2483
04:50:16,680 --> 04:50:18,520
to see that they are the same.

2484
04:50:18,520 --> 04:50:23,640
And look at the contents. We can also just check that the file is there.

2485
04:50:24,120 --> 04:50:27,000
I assume it would take us another 10 to 15 minutes

2486
04:50:27,000 --> 04:50:30,720
to get this right now.

2487
04:50:31,900 --> 04:50:35,520
And I don't think it's actually worth it at the moment.

2488
04:50:36,260 --> 04:50:37,320
And it's an image file,

2489
04:50:37,520 --> 04:50:39,940
which is generally one of the easier things to check

2490
04:50:39,940 --> 04:50:41,740
by looking at it.

2491
04:50:42,200 --> 04:50:44,680
So if it was any different kind of a file,

2492
04:50:45,280 --> 04:50:47,260
what you would do is open the file,

2493
04:50:47,560 --> 04:50:48,460
read the contents,

2494
04:50:48,460 --> 04:50:51,180
and then compare to a known example,

2495
04:50:52,100 --> 04:50:53,740
which is what we're trying to do here.

2496
04:50:54,120 --> 04:51:00,300
So hopefully we didn't get too bogged down and lose the general context.

2497
04:51:02,500 --> 04:51:08,360
So the overall idea is to test what the function does.

2498
04:51:08,460 --> 04:51:10,200
And in this case, it's writing to the file system.

2499
04:51:10,440 --> 04:51:16,500
So to test that, you read the file and you compare it to what you already know it should be.

2500
04:51:16,960 --> 04:51:21,060
And the main thing is here, we use known test data.

2501
04:51:21,060 --> 04:51:23,120
so we already know what should happen

2502
04:51:23,120 --> 04:51:26,980
because we know what this temperatures.csv contains

2503
04:51:26,980 --> 04:51:30,380
and then if you were to put this online

2504
04:51:30,380 --> 04:51:32,480
this code, publish it

2505
04:51:32,480 --> 04:51:35,200
you would publish the known test data as well

2506
04:51:35,200 --> 04:51:37,440
and then everybody can run the tests

2507
04:51:37,440 --> 04:51:38,560
so

2508
04:51:38,560 --> 04:51:42,240
now

2509
04:51:42,240 --> 04:51:46,520
we could probably find a clever way

2510
04:51:46,520 --> 04:51:48,980
of looking at the contents of the image a little bit

2511
04:51:48,980 --> 04:51:58,100
and uh compare the files directly um but it's probably not worth doing today so oh well not

2512
04:51:58,100 --> 04:52:07,460
i think the concept hopefully got clear um and this is mainly about the concept here yeah so

2513
04:52:07,460 --> 04:52:12,820
one other thing to mention is that we still have everything although both the functions define the

2514
04:52:12,820 --> 04:52:18,260
script and everything it works well enough one thing we could have done um especially if it was a

2515
04:52:18,260 --> 04:52:21,060
bigger package is to

2516
04:52:21,060 --> 04:52:22,880
take the script and put it in a

2517
04:52:22,880 --> 04:52:24,860
separate file and then have things

2518
04:52:24,860 --> 04:52:26,540
that are imported in a different file

2519
04:52:26,540 --> 04:52:28,840
that would also be nice

2520
04:52:28,840 --> 04:52:30,760
and it would be a module you can very easily

2521
04:52:30,760 --> 04:52:32,320
move around but okay

2522
04:52:32,320 --> 04:52:34,100
let's leave it at that

2523
04:52:34,100 --> 04:52:36,340
there is the

2524
04:52:36,340 --> 04:52:38,900
feedback for day

2525
04:52:38,900 --> 04:52:40,760
six available and we still

2526
04:52:40,760 --> 04:52:42,840
have a workshop outro

2527
04:52:42,840 --> 04:52:44,140
in the schedule so

2528
04:52:44,140 --> 04:52:46,400
[name] and [name]

2529
04:52:46,400 --> 04:52:55,120
welcome sorry for taking your time um with the debugging the test no worries this is good to show

2530
04:52:55,120 --> 04:53:00,880
like this is also showing like this is sometimes what you have to do this is sometimes what you

2531
04:53:00,880 --> 04:53:06,860
have to think about and i think it's nice to like watch you to figure it out because that may also

2532
04:53:06,860 --> 04:53:13,640
like stick better like next time maybe some of the participants are in the same situation and

2533
04:53:13,640 --> 04:53:17,340
then maybe they remember oh yeah there was this one thing that [name] did or this one thing that

2534
04:53:17,340 --> 04:53:25,320
[name] suggested maybe so oh CATS is also with us great stuff not working is the most useful part

2535
04:53:25,320 --> 04:53:33,040
of the lesson no but it's a good a good thing I think to have it also part of the lesson if

2536
04:53:33,040 --> 04:53:38,980
everything would work that's not really that's not real no I mean by most useful I mean actually

2537
04:53:38,980 --> 04:53:48,340
most useful to see how stuff goes wrong now that was feedback from other stuff before

2538
04:53:48,340 --> 04:53:53,160
oh it's part of the process so don't worry

2539
04:53:53,160 --> 04:54:02,740
okay so the feedback is here you can give feedback not just for today but down below on

2540
04:54:03,700 --> 04:54:14,500
every day the whole workshop um i guess we should also save what we show now for uh what's it

2541
04:54:17,140 --> 04:54:22,580
we could just send this video to people who have attended and they can see the

2542
04:54:22,580 --> 04:54:28,180
outdoor even if they're not here right now so we're going on the schedule to the concluding

2543
04:54:28,180 --> 04:54:34,260
remarks here yes and it's also linked from the notes because there will be a lot of links that

2544
04:54:34,260 --> 04:54:42,600
we are showing here as well now so that you can just go and click them as well and by the way

2545
04:54:42,600 --> 04:54:50,780
hello everyone in case we haven't met yet i'm [name] i work at csc and starting may i will

2546
04:54:50,780 --> 04:54:58,920
be the project manager for Code Refinery. I've been here day four and day one already and will

2547
04:54:58,920 --> 04:55:04,240
now together with [name] go through our concluding remarks. There was a few things we promised already

2548
04:55:04,240 --> 04:55:12,100
in the intro that we will tell you about. So let's see that we get to that. But as the very first

2549
04:55:12,100 --> 04:55:19,080
thing, thank you very much to everyone. Thank you to all your participants for all your amazing

2550
04:55:19,080 --> 04:55:23,640
questions i've been following along a little bit on the side and there have been really good

2551
04:55:23,640 --> 04:55:30,600
questions and i hope they have helped you also in the in the learning process we had some team

2552
04:55:30,600 --> 04:55:37,720
leaders and hosts this time with us so if you joined in a team also say thank you to your team

2553
04:55:37,720 --> 04:55:44,840
leader and to our hosts for doing that and we hope that maybe some of you who are now participating

2554
04:55:44,840 --> 04:55:50,920
as a participant and are interested in helping us with this to join us next time maybe as a team

2555
04:55:50,920 --> 04:55:58,520
leader maybe as a host to learn with others the same is for instructors thank you all that you

2556
04:55:58,520 --> 04:56:03,980
are here still and thanks to also all the instructors of the rest of the week so we had

2557
04:56:03,980 --> 04:56:10,320
many different instructors and hopefully that was also valuable to like all the participants that we

2558
04:56:10,320 --> 04:56:14,700
had many different voices, many different ways of teaching so

2559
04:56:14,700 --> 04:56:19,740
that it did not get boring. Then we had some people working in

2560
04:56:19,740 --> 04:56:23,160
the behind the scenes answering the questions in the

2561
04:56:23,200 --> 04:56:27,780
collaborative notes. We don't know necessarily who they all

2562
04:56:27,780 --> 04:56:30,940
are. We know that [name] answered a lot of them. But then

2563
04:56:30,940 --> 04:56:35,700
we also had some people from the participants or from the helpers

2564
04:56:36,340 --> 04:56:42,420
answering questions, I believe. And then we have our local partners where they are already covered

2565
04:56:42,420 --> 04:56:53,540
with the hosts that provided a classroom for week one to learn together. And yeah, you really make

2566
04:56:53,540 --> 04:57:00,020
these workshops possible and enjoyable. So thank you, everyone. [name] mentioned already the

2567
04:57:00,020 --> 04:57:06,520
feedback so we are really really happy to read all your feedback for today as well as for the

2568
04:57:06,520 --> 04:57:11,580
workshop as a whole if you joined the whole workshop and there was for example a lesson

2569
04:57:11,580 --> 04:57:18,040
that you found completely useless let us know like that's how we that's how we get to know

2570
04:57:18,040 --> 04:57:25,100
if there was a lesson that you really really enjoyed also let us know because that then we

2571
04:57:25,100 --> 04:57:31,240
will probably keep it if we get a lot of feedback in this way and you can do that in the collaborative

2572
04:57:31,240 --> 04:57:39,100
notes you can do that via email to support at codefront.org or you can also join our chat and

2573
04:57:39,100 --> 04:57:44,740
this last option is also a very good way to stay in contact with us if you like really enjoyed what

2574
04:57:44,740 --> 04:57:49,920
we are doing and want to stay in contact with the instructors stay in contact with other people that

2575
04:57:49,920 --> 04:57:57,760
are enjoying um talking and discussing about the topics that we have in this workshop then

2576
04:57:57,760 --> 04:58:04,580
our chat is a really good good way of doing that and everyone can join there is no no like

2577
04:58:04,580 --> 04:58:13,440
restrictions requirements or anything um then you have seen a lot of different lesson materials

2578
04:58:13,440 --> 04:58:20,540
written by many different people and sometimes last minute updates can make things a little bit

2579
04:58:20,540 --> 04:58:26,840
more confusing than they have to be um and sometimes also the way we write it is not

2580
04:58:26,840 --> 04:58:32,560
necessarily how someone who sees it for the first time can understand it so if you had any exercise

2581
04:58:32,560 --> 04:58:40,600
or any materials that you were like what what are they talking about this i have no idea what to do

2582
04:58:40,600 --> 04:58:47,800
now uh let us know um you have learned in the first week hopefully how to work with github

2583
04:58:47,800 --> 04:58:53,800
all our lessons are on github so you can add an issue you can even if you are if you have a lot

2584
04:58:53,800 --> 04:58:59,720
of time on your hands you can send a pull request to update any of our lessons and we'll be happy to

2585
04:58:59,720 --> 04:59:07,160
review it and discuss there with you and we are always like using all of these to develop the

2586
04:59:07,160 --> 04:59:14,680
workshop materials further so it's very much appreciated and then in the future i don't yet

2587
04:59:14,680 --> 04:59:21,320
know when but i would guess not not any earlier than half a year from now we will also send a

2588
04:59:22,920 --> 04:59:29,800
well post post post post post workshop survey um to everyone who visited this and other workshops

2589
04:59:29,800 --> 04:59:37,560
in the past. It's about how you can, how you could make use of what you learned in the workshop. So

2590
04:59:37,560 --> 04:59:42,600
right now there's probably some things that you really enjoyed learning, some things that you

2591
04:59:42,600 --> 04:59:47,400
want to apply right away, but in half a year maybe you have a better idea of, oh this was really

2592
04:59:47,400 --> 04:59:52,600
useful and I'm using this and that's exactly what we would like to know. And that helps us with like

2593
04:59:52,600 --> 05:00:04,120
further funding and in general reporting about the project so then we have if you can scroll a little

2594
05:00:04,120 --> 05:00:15,640
bit down thank you please keep studying and ask for support so um you may have noticed that we

2595
05:00:15,640 --> 05:00:23,480
have introduced you to a lot of different topics and also in week two we didn't have time to do

2596
05:00:23,480 --> 05:00:29,880
exercises as part of this workshop but we would really recommend you if you are if you got

2597
05:00:29,880 --> 05:00:36,600
interested in any of these topics to go ahead take another hour or so sit down and do the exercises

2598
05:00:36,600 --> 05:00:45,020
most of them have quite detailed solutions also attached to them or step-by-step

2599
05:00:45,020 --> 05:00:51,000
instructions on how to go about it but if you get stuck with anything we also have

2600
05:00:51,000 --> 05:00:57,520
what we call a bring your own code session this is also a session where you can bring your own

2601
05:00:57,520 --> 05:01:03,040
question so if you have any questions or anything that you would like to screen share with an

2602
05:01:03,040 --> 05:01:09,280
instructor and ask about like is this correct or is this the right way to go about it then these

2603
05:01:09,280 --> 05:01:16,880
bring your own code sessions are the best place to come there we will have at least one probably

2604
05:01:16,880 --> 05:01:24,700
more instructors available and to make it most useful for you and also for us to know how many

2605
05:01:24,700 --> 05:01:32,260
people are interested in this we have a like a very short registration survey for this it's also

2606
05:01:32,260 --> 05:01:43,280
linked from the workshop event page schedule just asking I think even just your name and if you want

2607
05:01:43,280 --> 05:01:47,020
to you can provide already some information about the things that you would like to discuss

2608
05:01:47,020 --> 05:01:54,780
just so that we could invite the correct instructors for that and so far it has been

2609
05:01:54,780 --> 05:02:00,160
really fun to go to these sessions and hear about like how you then actually apply what you have

2610
05:02:00,160 --> 05:02:08,240
learned in the workshops here so it's also interesting for us um yes [name] do you want

2611
05:02:08,240 --> 05:02:16,360
to say something about the videos and where they are available yeah so so far i've been able to get

2612
05:02:16,360 --> 05:02:23,240
the videos out the same day and probably will today they're on a youtube playlist and well

2613
05:02:23,240 --> 05:02:31,560
there you use them for whatever you'd like i guess the main reason we make them is for

2614
05:02:31,560 --> 05:02:36,540
the people in the course to review what we said and the examples while you're trying to follow

2615
05:02:36,540 --> 05:02:43,740
along but maybe they're useful to other people yeah and share them with your friends if you want

2616
05:02:43,740 --> 05:02:50,300
and the same with our lesson materials so they are available where you found them so far they

2617
05:02:50,300 --> 05:02:57,420
will stay available before the next workshop in autumn they might change slightly but only to the

2618
05:02:57,420 --> 05:03:06,060
better we hope yeah um we are also working on the notes so okay we are also working on um putting

2619
05:03:06,060 --> 05:03:12,560
them on xenodo and we might actually make that happen now during summer for this workshop's

2620
05:03:12,560 --> 05:03:18,620
lesson so there you will also then have a pdf version and a like a static thing on the things

2621
05:03:18,620 --> 05:03:23,420
you actually learned now in this workshop but yeah the lesson materials on our web pages will

2622
05:03:24,060 --> 05:03:30,620
live uh will continue to live on there and you can share them you can reuse them if you

2623
05:03:31,660 --> 05:03:36,700
want to teach some of your colleagues about the topics you learned here please reuse the

2624
05:03:36,700 --> 05:03:45,580
materials they are all under cc by license so you can do that and you can even cite the lessons if

2625
05:03:45,580 --> 05:03:50,540
you want to so there is a citation cff file in all of the lesson repositories

2626
05:03:51,740 --> 05:03:59,900
with all the information you need for for citing them nowadays and then if you go a bit further

2627
05:03:59,900 --> 05:04:07,260
down yes so i mentioned already you can please do the exercises if you're interested in the topics

2628
05:04:07,820 --> 05:04:11,420
and if you cannot come for example to the bring your own code session

2629
05:04:11,420 --> 05:04:20,540
there is also a lot of local support available for different places here we now have only from

2630
05:04:20,540 --> 05:04:27,400
our partner organizations for some of our partner organizations the information about trainings

2631
05:04:27,400 --> 05:04:34,060
about sessions where you can come to ask for more help like at alto the garage session at cse the

2632
05:04:34,060 --> 05:04:41,140
weekly user support session and the training calendars but likely your own organization also

2633
05:04:41,140 --> 05:04:47,940
has something like this or if not your own organization then maybe your your national

2634
05:04:48,500 --> 05:04:55,220
high performance computing center or something like this might have help available for for these

2635
05:04:55,220 --> 05:05:00,980
kind of questions so please make use of them and if you really don't have anyone you can always

2636
05:05:00,980 --> 05:05:05,620
like reach out to us by coming to the chat or sending us an email and we can try to help you

2637
05:05:06,260 --> 05:05:07,380
figure these things out.

2638
05:05:10,020 --> 05:05:11,780
Okay, if you go a bit further down.

2639
05:05:16,580 --> 05:05:21,220
If you want a certificate for this workshop, if you want to get credit,

2640
05:05:22,660 --> 05:05:30,820
ECTS credit for this workshop, then please go on the course web page. There is on the top

2641
05:05:30,820 --> 05:05:39,400
middle towards right a tab for certificates there is the instructions on what you need to do and

2642
05:05:39,400 --> 05:05:48,280
until until when uh yeah deadline is also here 16th of april um then you can get a certificate

2643
05:05:48,280 --> 05:05:54,500
but you need to need to do a little bit something for that and that's described there is that

2644
05:05:54,500 --> 05:06:04,060
basically the learning diaries of each day and output of the exercises is it including the week

2645
05:06:04,060 --> 05:06:11,340
two exercises or do none of us know because someone else has written that okay i guess

2646
05:06:11,340 --> 05:06:19,280
someone else is taking care of that i don't know but i assume it's doing the exercises from the

2647
05:06:19,280 --> 05:06:26,280
second week also yeah i would assume so as well yeah you can read about it in detail actually

2648
05:06:26,280 --> 05:06:31,200
now that i'm seeing it here um what you need to do there open it

2649
05:06:31,200 --> 05:06:36,960
yeah it's a lot of text so let's not read through that now

2650
05:06:36,960 --> 05:06:43,320
but yeah it's a it's a learning diary and then some exercises that you all need to do and alto

2651
05:06:43,320 --> 05:06:45,420
has

2652
05:06:45,420 --> 05:06:49,500
agreed to go through that

2653
05:06:49,500 --> 05:06:49,840
and

2654
05:06:49,840 --> 05:06:53,220
provide the certificates.

2655
05:06:55,580 --> 05:06:57,000
Our colleague [name]

2656
05:06:57,000 --> 05:06:58,300
that you also know

2657
05:06:58,300 --> 05:07:01,300
already from day

2658
05:07:01,300 --> 05:07:02,300
four, I believe.

2659
05:07:03,200 --> 05:07:03,380
Okay.

2660
05:07:04,960 --> 05:07:06,600
That was certificates.

2661
05:07:07,960 --> 05:07:08,600
Then, yes,

2662
05:07:08,600 --> 05:07:09,560
code refinery.

2663
05:07:09,840 --> 05:07:11,660
We are a project

2664
05:07:11,660 --> 05:07:21,000
and we need your support please tell everyone about it as if you liked the workshop and I

2665
05:07:21,000 --> 05:07:27,680
already mentioned you can like come and help us for the workshops you can also teach with us in

2666
05:07:27,680 --> 05:07:32,720
the future if you want to if you're interested in that the best way also there is to come to

2667
05:07:32,720 --> 05:07:38,100
our chat and let us know about your interest and then we can figure out how we can do that in the

2668
05:07:38,100 --> 05:07:46,880
future. We are now in May starting our fourth phase, so we will not cease to exist at least

2669
05:07:46,880 --> 05:07:55,760
the next three years. But yeah, everyone who is interested in joining us is very welcome to do

2670
05:07:55,760 --> 05:08:04,740
that. We have social media accounts on Mastodon, Blue Sky and LinkedIn. All three of them have

2671
05:08:04,740 --> 05:08:11,060
usually the same content linkedin sometimes a bit longer something but in general everything the

2672
05:08:11,060 --> 05:08:16,900
same we try to post about workshops and other things that we are doing because besides this

2673
05:08:16,900 --> 05:08:24,820
workshop we are also collaborating on other workshops like for example python for scientific

2674
05:08:24,820 --> 05:08:33,460
computing last year we did a nice course on tools and techniques for high performance computing so

2675
05:08:33,460 --> 05:08:43,780
there's a lot going on and yes the rest i already mentioned you can get involved there's also a

2676
05:08:43,780 --> 05:08:49,700
newsletter um that we send i think twice a year the biggest the big newsletter that's usually

2677
05:08:49,700 --> 05:08:57,060
about like the the big workshops coming up and other possibilities and now i remember that i

2678
05:08:57,060 --> 05:09:04,340
forgot to put here also we also have an ambassador program so if you are interested in what we're

2679
05:09:04,340 --> 05:09:14,340
doing and would like to kind of get the latest news more often than half a year then we have

2680
05:09:14,340 --> 05:09:19,140
the ambassador program which means like people who are interested in what we're doing who want

2681
05:09:19,140 --> 05:09:26,420
to re-share about our events and so on but who don't necessarily themselves have the time to

2682
05:09:26,420 --> 05:09:32,500
get more involved to become an instructor or to host a breakout room or to host a classroom or

2683
05:09:32,500 --> 05:09:38,100
to help us in any other way but this like sharing the information wider and also providing us

2684
05:09:38,100 --> 05:09:43,620
feedback is very very valuable to us and that's why we started this ambassador program and you

2685
05:09:43,620 --> 05:09:54,100
can find the link on how to join that also on this newsletter page is it though let's let's check

2686
05:09:57,380 --> 05:10:01,060
oh it's actually linking from there okay so it's under join

2687
05:10:02,660 --> 05:10:08,580
and i can let's put then the link also on the notes it's under join and for individuals

2688
05:10:12,580 --> 05:10:18,020
and there you can find further down code refinery ambassadors that you can find the information

2689
05:10:18,020 --> 05:10:24,100
about that if you can put that link on the notes that would be really great okay one of the others

2690
05:10:24,100 --> 05:10:31,460
who are still here well someone not sharing the screen right now yes exactly okay but now to the

2691
05:10:31,460 --> 05:10:36,980
yeah maybe most interesting point of this outro so if you got interested in

2692
05:10:38,260 --> 05:10:47,380
this research software development or then there's also an association nowadays called the nordic

2693
05:10:47,380 --> 05:10:52,820
research software engineers or short nordic rse and [name] do you want to say something about

2694
05:10:52,820 --> 05:11:00,680
who is in RSE? And what do we do there? Well, we often talk, what is the meaning of a research

2695
05:11:00,680 --> 05:11:07,820
software engineer? But basically, it's someone that does research, but cares about the software

2696
05:11:07,820 --> 05:11:15,240
more than most people, and perhaps wants to be evaluated based on the quality of the code they

2697
05:11:15,240 --> 05:11:21,640
write and not just the publications they get. And that's basically all of us here. So we've all

2698
05:11:21,640 --> 05:11:29,400
studied different types of science things and then we've liked being part of research but we wanted

2699
05:11:29,400 --> 05:11:37,320
something a bit more long term and i found good job supporting the software and data and computing

2700
05:11:37,320 --> 05:11:47,080
side of things and now we're here teaching you so yes and you don't have it you don't need like the

2701
05:11:47,080 --> 05:11:51,400
title of research software engineer it's still something fairly new also in the nordics

2702
05:11:51,400 --> 05:12:00,280
so there's a lot of people who are have titles like postdoc or research assistant or

2703
05:12:00,280 --> 05:12:06,800
i don't know what else but many other titles like exist for that and the research software

2704
05:12:06,800 --> 05:12:12,020
engineering community is open for everyone who is like interested in the topic who is excited

2705
05:12:12,020 --> 05:12:18,240
about it learning about it maybe wants to help make it a bit more of a thing also in the nordics

2706
05:12:18,240 --> 05:12:25,920
so we have a community once in a while we also arrange seminars and other events we are hanging

2707
05:12:25,920 --> 05:12:34,340
out in the same chat as code refinery so there is a really tight connection and with our own

2708
05:12:34,340 --> 05:12:40,400
channel called nordic rse we have our own linkedin mastodon and blue sky same as code refinery we

2709
05:12:40,400 --> 05:12:46,080
post on all of those whenever there is something happening and something happening is actually

2710
05:12:46,080 --> 05:12:57,360
quite soon we have our second in-person conference on may 20th and 21st in Gothenburg in Sweden and

2711
05:12:57,360 --> 05:13:05,360
the general submission deadline is unfortunately already over but we still accept posters and you

2712
05:13:05,360 --> 05:13:11,760
can still also join without your own contribution so just to listen on what's going on in the nordics

2713
05:13:11,760 --> 05:13:18,000
with regard to research software engineering meet some people discuss your situation here

2714
05:13:18,000 --> 05:13:24,000
where there are maybe open positions for research software engineers or research software

2715
05:13:24,000 --> 05:13:30,800
engineering interested people and so on and just meet the community and see what's going on

2716
05:13:30,800 --> 05:13:33,020
yeah

2717
05:13:33,020 --> 05:13:35,600
anything else that we would like to say

2718
05:13:35,600 --> 05:13:36,300
at this point

2719
05:13:36,300 --> 05:13:41,720
I would want to just

2720
05:13:41,720 --> 05:13:42,200
mention

2721
05:13:42,200 --> 05:13:45,500
there is now a solution for the plot data

2722
05:13:45,500 --> 05:13:46,100
testing

2723
05:13:46,100 --> 05:13:49,220
in the collaborative document

2724
05:13:49,220 --> 05:13:51,360
awesome, yay

2725
05:13:51,360 --> 05:13:55,920
so it's not an unsolvable problem

2726
05:13:55,920 --> 05:13:57,940
no, it was

2727
05:13:57,940 --> 05:13:58,880
just, yeah

2728
05:13:58,880 --> 05:14:01,140
small details

2729
05:14:01,140 --> 05:14:02,360
right

2730
05:14:02,360 --> 05:14:04,940
okay

2731
05:14:04,940 --> 05:14:05,920
but then I think

2732
05:14:05,920 --> 05:14:07,780
we are four minutes

2733
05:14:07,780 --> 05:14:08,480
before

2734
05:14:08,480 --> 05:14:10,040
official closing time

2735
05:14:10,040 --> 05:14:10,500
but I guess

2736
05:14:10,500 --> 05:14:11,180
that's just good

2737
05:14:11,180 --> 05:14:12,500
yeah

2738
05:14:12,500 --> 05:14:14,400
thank you very much

2739
05:14:14,400 --> 05:14:14,800
for

2740
05:14:14,800 --> 05:14:15,680
for joining

2741
05:14:15,680 --> 05:14:16,440
for listening

2742
05:14:16,440 --> 05:14:17,700
for being so active

2743
05:14:17,700 --> 05:14:19,120
thanks to instructors

2744
05:14:19,120 --> 05:14:20,260
well we did this already

2745
05:14:20,260 --> 05:14:21,700
but thank you very much

2746
05:14:21,700 --> 05:14:23,020
and see you again

2747
05:14:23,020 --> 05:14:23,660
yeah

2748
05:14:23,660 --> 05:14:25,680
thanks a lot

2749
05:14:25,680 --> 05:14:27,260
thanks

2750
05:14:27,260 --> 05:14:27,700
bye

2751
05:14:27,700 --> 05:14:28,400
bye bye

2752
05:14:28,400 --> 05:14:28,640
bye

2753
05:14:29,260 --> 05:14:29,640
See you.

2754
05:14:29,820 --> 05:14:29,960
Bye.

2755
05:14:58,640 --> 05:14:59,680
you

2756
05:15:28,640 --> 05:15:29,680
you

2757
05:15:58,640 --> 05:15:59,680
you

2758
05:16:28,640 --> 05:16:29,680
you

2759
05:16:58,640 --> 05:16:59,680
you

2760
05:17:28,640 --> 05:17:58,620
Thank you.

