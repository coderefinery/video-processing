1
00:00:00,000 --> 00:00:29,980
Thank you.

2
00:00:30,000 --> 00:00:30,620
you

3
00:01:00,000 --> 00:01:00,620
you

4
00:01:30,000 --> 00:01:30,620
you

5
00:02:00,000 --> 00:02:00,620
you

6
00:02:30,000 --> 00:02:30,620
you

7
00:03:00,000 --> 00:03:00,620
you

8
00:03:30,000 --> 00:03:30,620
you

9
00:04:00,000 --> 00:04:00,620
you

10
00:04:30,000 --> 00:04:30,620
you

11
00:05:00,000 --> 00:05:00,620
you

12
00:05:30,000 --> 00:05:43,160
Test, test, can anyone out there hear us?

13
00:05:43,160 --> 00:05:55,960
So I think you should be able to.

14
00:05:55,960 --> 00:06:04,200
assume so until we hear otherwise so this is our notes as usual so registered participants

15
00:06:04,200 --> 00:06:12,520
have them we can scroll down and as usual there's some icebreakers which include what do you want

16
00:06:12,520 --> 00:06:19,080
to be when you grow up how would you explain your current job to someone from 1700 and what's the

17
00:06:19,080 --> 00:06:26,240
best documented project you've seen. And in the meantime, while we're waiting, we have a guest

18
00:06:26,240 --> 00:06:35,100
for the icebreaker. This is something we've been doing some years in the past. We have Matteo with

19
00:06:35,100 --> 00:06:41,560
us. So [name], can you tell us a little bit about yourself, where you work, what you do now, and so

20
00:06:41,560 --> 00:06:48,880
on? Yeah, sure. Hi, everybody. My name is [name]. I'm a research engineer at the Gothenburg

21
00:06:48,880 --> 00:06:54,280
university uh here in sweden research engineer is very often people with screwdrivers or working in

22
00:06:54,280 --> 00:06:58,760
the wet lab but i'm more like a research software engineer in that sense it's just that my title

23
00:06:58,760 --> 00:07:05,280
doesn't contain the software part but i basically do software for humanities uh technically i work

24
00:07:05,280 --> 00:07:09,760
in digital humanities you can count that as 50 in archaeology probably and the other 50

25
00:07:09,760 --> 00:07:17,920
doing infrastructural stuff for um project of cultural heritage uh a history of ideas

26
00:07:17,920 --> 00:07:26,640
things like sounds analysis for um documentary studies things like that yeah cool i didn't

27
00:07:26,640 --> 00:07:32,620
realize your title was research engineer i think it really is pretty appropriate i mean we're the

28
00:07:32,620 --> 00:07:39,700
equivalent of people who go to the labs with screwdrivers but with code instead so yeah i i

29
00:07:39,700 --> 00:07:43,980
agree it's a bit of a swedish thing i know at chalmers which is the the technical university

30
00:07:43,980 --> 00:07:49,900
here they have this i think it's like research digital engineer or something like that but here

31
00:07:49,900 --> 00:07:56,460
in sweden very often fortunately engineer so a research engineer means screwdriver or pipettes

32
00:07:56,460 --> 00:08:03,980
yeah yeah but i mean that's fine i mean we can put them together yeah so how did you get where you

33
00:08:03,980 --> 00:08:11,180
are like what did you study and what was your path that led you to this job i i took the long road

34
00:08:11,180 --> 00:08:17,900
uh which uh i didn't study software at all until basically my phd i have a master in theoretical

35
00:08:17,900 --> 00:08:22,300
physics that's my start and when i was looking for a phd i was looking for something where i

36
00:08:22,300 --> 00:08:28,940
could use pen and paper and do proper modeling but then during my phd after my master i switched to

37
00:08:28,940 --> 00:08:33,260
theoretical biology because many of the methods were were in common and i was very interested in

38
00:08:33,980 --> 00:08:39,180
the living beings because they're more stochastic but when you say stochastic very often means that

39
00:08:39,180 --> 00:08:43,180
analytical solutions can be difficult to come by and so all of a sudden you start doing computers

40
00:08:44,940 --> 00:08:48,460
so that's that was my entry point and i realized i actually enjoyed it a lot

41
00:08:48,460 --> 00:08:55,660
even though i thought i didn't and i specialized in both modeling population genetics but also

42
00:08:56,220 --> 00:09:03,260
individual population-based modeling so which is generally called agent-based and then i did two

43
00:09:03,260 --> 00:09:10,100
postdocs in there. I went through all the stuff for the normal career in academia and I basically

44
00:09:10,100 --> 00:09:16,080
burned out when I was looking for more money after my second postdoc. I was ready to move out of

45
00:09:16,080 --> 00:09:21,960
academia to my sorrow, but they opened this position in digital humanities and they were

46
00:09:21,960 --> 00:09:27,300
looking for someone specialized in agent-based modeling. So, you know, I jumped on it and I was

47
00:09:27,300 --> 00:09:34,820
right profile a bit of a mix of good good fortune and yeah and and good skills i guess yeah and so

48
00:09:34,820 --> 00:09:45,220
i've been here for two years and a half now yeah okay cool um it's um just a little bit of

49
00:09:45,220 --> 00:09:50,180
reflection there so i heard um you mentioned that early in your education you were studying

50
00:09:50,180 --> 00:09:56,180
theoretical physics and it was essentially with pen and paper and it's a bit interesting because

51
00:09:56,180 --> 00:10:02,020
i also started theoretical physics in the start however from us in the other undergraduate

52
00:10:02,660 --> 00:10:10,020
education there's a lot of scientific computing and programming um and also in in the master's

53
00:10:10,020 --> 00:10:16,500
level um yeah okay then it was more like you could choose the courses but but naturally you would

54
00:10:16,500 --> 00:10:23,380
come a lot also to scientific computing yeah we we had courses of programming uh it's always

55
00:10:23,380 --> 00:10:28,020
surprises people that my first course was in c plus plus which is not surprising that i didn't

56
00:10:28,020 --> 00:10:33,060
like coding at the time yeah but i did i also had courses in matlab and then in another software

57
00:10:33,060 --> 00:10:40,020
that was for uh statistical analysis it was called igor i don't think it's very much used outside of

58
00:10:40,020 --> 00:10:46,340
physics i never heard it ever again but uh there is still this very strong part of classical

59
00:10:46,340 --> 00:10:52,340
theoretical physics like cosmologists that like like equations i that was my favorite part my

60
00:10:52,340 --> 00:10:59,840
My favorite course in statistics was analytical mechanics, which is studying the movement of objects just through theorems.

61
00:10:59,840 --> 00:11:03,240
And it's amazingly funny, but we never saw a computer in those courses.

62
00:11:04,760 --> 00:11:05,400
Yeah.

63
00:11:07,120 --> 00:11:20,540
Yeah, I think most of most code refinery people have somehow studied some like physical science and some computer science, but most physical science.

64
00:11:20,540 --> 00:11:28,340
and then now support computers with lots of stuff so but i will also say that the reason i didn't

65
00:11:28,340 --> 00:11:34,400
like coding is that nobody taught me to do it properly and that's when you realize that your

66
00:11:34,400 --> 00:11:40,140
code is not good it's full of errors very often you don't know if it's full of errors but you

67
00:11:40,140 --> 00:11:44,860
kind of feel it you you start developing that kind of instinct of like i know this is wrong

68
00:11:44,860 --> 00:11:49,440
but I don't know where yeah yeah yeah and and what happened is that during my PhD

69
00:11:49,440 --> 00:11:55,780
I started to follow these courses of good practices in programming and those opened

70
00:11:55,780 --> 00:11:59,840
the world for me and all of a sudden I realized wait first of all I like this I even like the

71
00:11:59,840 --> 00:12:08,080
bugging now but second of all like I can code and be sure of what I'm coding and now do you teach

72
00:12:08,080 --> 00:12:15,260
this to people you work with um i i try to uh i think it's 50 50 there are the people that are

73
00:12:15,260 --> 00:12:19,860
still spaghetti code but are very efficient at that yeah and there are people who are even better

74
00:12:19,860 --> 00:12:26,720
than me at cicd processes testing you know all those things and i'm learning a lot and i'm trying

75
00:12:26,720 --> 00:12:34,920
to teach a lot especially when we have share code we have a lot of share code um and we we yeah we

76
00:12:34,920 --> 00:12:39,640
some short code that is over complicated but it's kind of understandable yeah and so we're trying to

77
00:12:39,640 --> 00:12:43,640
simplify it and then there is code that is just too complicated nobody understands it because the

78
00:12:43,640 --> 00:12:50,200
person has left and you know like like every enterprise i think yeah yeah yeah okay cool

79
00:12:50,840 --> 00:12:56,680
so we've got just a few minutes left um don't forget the icebreakers we have here um

80
00:12:56,680 --> 00:13:03,140
Well, first, before we go on, I want to ask [name] the standard question.

81
00:13:03,140 --> 00:13:14,140
What advice, what do you know now that you wish someone had told you when you started your career or studies or sometime a while ago?

82
00:13:17,520 --> 00:13:24,140
Related to coding, I wish they taught me to code properly from the start.

83
00:13:24,140 --> 00:13:31,660
that's because it took years to really get into that that mind space okay uh but in general uh

84
00:13:31,660 --> 00:13:36,040
life doesn't end with academia and this is something that i'm still learning myself but

85
00:13:36,040 --> 00:13:42,300
you know you never know if funding expires in a couple of years and even my permanent job is not

86
00:13:42,300 --> 00:13:47,820
that permanent anymore there is stuff outside that is really interesting and sometimes it's

87
00:13:47,820 --> 00:13:53,660
enough to just go google something software engineer on linkedin to find out how many

88
00:13:53,660 --> 00:13:57,960
interesting and cool ideas that are out there of jobs so i think that's something i wish

89
00:13:57,960 --> 00:14:03,540
someone told me before yeah yeah academia is not everything and you don't have to

90
00:14:03,540 --> 00:14:11,940
to stay hooked on it yeah yeah and i say this as someone who loves academia

91
00:14:11,940 --> 00:14:20,080
for everything that it's giving me yeah yeah yeah good to have the balance um [name] or

92
00:14:20,080 --> 00:14:22,040
[name], do you have

93
00:14:22,040 --> 00:14:24,700
any thoughts on any of these

94
00:14:24,700 --> 00:14:25,140
questions?

95
00:14:28,440 --> 00:14:30,520
Well, they touch a lot of

96
00:14:30,520 --> 00:14:32,200
aspects of

97
00:14:32,200 --> 00:14:34,660
what we do

98
00:14:34,660 --> 00:14:35,060
I guess

99
00:14:35,060 --> 00:14:38,460
so I would talk for

100
00:14:38,460 --> 00:14:40,100
four hours perhaps

101
00:14:40,100 --> 00:14:48,700
I think when it comes to

102
00:14:48,700 --> 00:14:57,500
with i mean to learn to code properly and so or let's say early on then i've been over the years

103
00:14:57,500 --> 00:15:02,620
often active in in environments where you're a little bit understaffed when it comes to

104
00:15:02,620 --> 00:15:08,540
doing what you're doing yeah so in practice then that means that you devote most of the time and

105
00:15:08,540 --> 00:15:12,940
effort to let's say the science part of the projects and then for let's say coding you do

106
00:15:12,940 --> 00:15:22,460
what is necessary and yeah in computational physics working with let's say mbi and open

107
00:15:22,460 --> 00:15:30,940
mp threading that's manageable let's say to do for a skilled 50 student but i think nowadays

108
00:15:30,940 --> 00:15:35,980
we see this that that let's say you're in territorial chemistry or something and

109
00:15:35,980 --> 00:15:38,960
and you need to keep track of the chemistry

110
00:15:38,960 --> 00:15:44,960
and also learn, let's say, how to write code for GPUs.

111
00:15:44,960 --> 00:15:46,480
And that's a lot.

112
00:15:46,480 --> 00:15:47,480
That's really not really.

113
00:15:47,480 --> 00:15:53,380
Typically, for one person to get a grip on that, it's a lot.

114
00:15:53,380 --> 00:15:57,580
So then you need to work differently to be effective.

115
00:15:57,580 --> 00:15:59,880
Yeah, I completely agree.

116
00:15:59,880 --> 00:16:04,660
That's actually the typical U skill profile,

117
00:16:04,660 --> 00:16:12,360
meaning that you have two main skills that need to be very deeply developed.

118
00:16:13,040 --> 00:16:17,460
That is common to basically everything, research, software, engineering, I would say.

119
00:16:18,220 --> 00:16:21,300
I think this adds to another thing which I learned before,

120
00:16:21,400 --> 00:16:26,560
is that in STEM, at least, there is a feeling that you have to learn everything on your own.

121
00:16:26,920 --> 00:16:29,700
When you have a publication, even if you have co-authors,

122
00:16:29,960 --> 00:16:34,180
from A to Z, you have to know every nitty-gritty of the paper.

123
00:16:34,180 --> 00:16:37,960
you have to know how to code you have to know how to test you have to know how to do a literary

124
00:16:37,960 --> 00:16:43,060
review and that is just not true a literature a literary review you go to the library and you

125
00:16:43,060 --> 00:16:47,040
ask for help they will help you they know how to do those things better than you do and for

126
00:16:47,040 --> 00:16:51,160
software is the same thing you go to a good coder and you can do some some pair programming you're

127
00:16:51,160 --> 00:16:57,180
going to learn much more than trying to go through a youtube video that is badly badly made and this

128
00:16:57,180 --> 00:17:02,380
is a stem thing we want to do everything on our own learn everything on books and and youtube

129
00:17:02,380 --> 00:17:08,900
videos alone and that's that's just the wrong approach yeah speaking of learning with other

130
00:17:08,900 --> 00:17:14,540
people don't forget we have some bring your own code sessions which are precisely this kind of

131
00:17:14,540 --> 00:17:19,720
thing you can come to the instructors and bring whatever you're doing whether you already have

132
00:17:19,720 --> 00:17:29,320
code or not um but then get one-on-one advice from some of the instructors usually there's not

133
00:17:29,320 --> 00:17:37,380
many people attending these so yeah come if like there's plenty of space for people

134
00:17:37,380 --> 00:17:49,180
but with that being said should we carry on now so the first lesson of the day is documentation

135
00:17:49,180 --> 00:17:57,240
and that's taught by [name] and [name] but first i guess we should thank [name] from coming this is

136
00:17:57,240 --> 00:18:03,600
something we've wanted to try more like inviting some of our broader community people to come and

137
00:18:03,600 --> 00:18:08,680
introduce themselves and talk about their careers we should we really should have done it more but

138
00:18:08,680 --> 00:18:14,820
basically i didn't have time to ask people so you only get one anyway thanks mateo and see you around

139
00:18:14,820 --> 00:18:23,040
no problem thanks thank you for having me bye goodbye okay and now i will hide myself and

140
00:18:23,040 --> 00:18:27,860
switch to your screen. So see you all later. I'll be around in

141
00:18:27,860 --> 00:18:31,740
the background if you need me. Thanks. Bye.

142
00:18:33,360 --> 00:18:38,820
So yeah, thank you, [name]. And thank you, [name]. So,

143
00:18:39,840 --> 00:18:43,600
[name], we're going to talk about how to document your

144
00:18:43,620 --> 00:18:45,000
research software.

145
00:18:46,020 --> 00:18:49,380
Yeah, very interesting, very important thing, I would say.

146
00:18:49,380 --> 00:18:52,140
Yeah, very important topic.

147
00:18:52,340 --> 00:18:59,820
Yeah, so this will be a two hour lesson that runs up until depending on the time

148
00:19:00,020 --> 00:19:07,340
zone here for us, it's up until 11 o'clock and in the first hour it will be mainly

149
00:19:07,540 --> 00:19:13,780
that we'll go through things here based on our lesson material on the web page.

150
00:19:13,980 --> 00:19:19,340
And then it will be a little bit more hands on in the second hour.

151
00:19:19,380 --> 00:19:25,880
But there will be a lot of discussions also over the shared document now during the first hour.

152
00:19:27,740 --> 00:19:32,140
So we could just give a little bit of an overview.

153
00:19:32,560 --> 00:19:45,540
So we'll talk about documentation in general for a project, for a code, and also then touch upon some specifics, as for instance, how to write a good reading file.

154
00:19:45,540 --> 00:19:51,660
What we'll be talking about will be independent of programming languages.

155
00:19:51,660 --> 00:19:57,440
Some of the examples will be in Python, but it's essentially transferable to other programming

156
00:19:57,440 --> 00:19:59,680
languages.

157
00:19:59,680 --> 00:20:05,000
We will learn about a documentation generator, Sphinx.

158
00:20:05,000 --> 00:20:11,180
It is often combined with an online service, Read the Docs.

159
00:20:11,180 --> 00:20:20,440
And we will also then, towards the end, talk about how to get documentation up online on

160
00:20:20,440 --> 00:20:24,540
a service like, for instance, GitHub pages.

161
00:20:24,540 --> 00:20:33,140
It's quite a lot of things to go through.

162
00:20:33,140 --> 00:20:34,140
Yeah.

163
00:20:34,140 --> 00:20:40,420
There are a few things, but I think we have time to cover things here.

164
00:20:40,420 --> 00:20:46,660
um so yeah perhaps we could first just start a little bit on see what people have written

165
00:20:46,660 --> 00:20:49,780
in the icebreaker question in the shared document

166
00:20:52,340 --> 00:20:58,740
like good yeah it's it's always funny to yeah these are typically very funny questions and

167
00:20:58,740 --> 00:21:05,140
people come without come up with very funny answers i think yeah sorry so i'll

168
00:21:05,140 --> 00:21:10,660
brought this over here to the screen share and okay what do you want to be when you grow up

169
00:21:15,940 --> 00:21:24,260
yeah i like become a scientist i like that this is that it also applies to me this is being

170
00:21:24,260 --> 00:21:31,380
a software engineer means that i'm always between you know doing software and doing science and

171
00:21:31,380 --> 00:21:36,380
And yeah, I want to do both of both, both things,

172
00:21:36,620 --> 00:21:39,180
let's say, more of both things.

173
00:21:39,180 --> 00:21:40,800
And so become a scientist

174
00:21:40,800 --> 00:21:42,920
and I would say also a software engineer,

175
00:21:42,920 --> 00:21:44,140
but I like that.

176
00:21:44,140 --> 00:21:45,780
Yeah, I can relate.

177
00:21:48,880 --> 00:21:51,760
Oh, here's one, a funny one, streamer.

178
00:21:51,760 --> 00:21:54,460
The stream is teaching and mentoring kind of stuff.

179
00:21:57,600 --> 00:21:59,800
Well, join Code Refinery, I guess.

180
00:21:59,800 --> 00:22:05,200
So, for reference, I'm the one that wrote that one.

181
00:22:05,200 --> 00:22:08,200
I see, I see.

182
00:22:08,200 --> 00:22:11,200
Ah, okay.

183
00:22:11,200 --> 00:22:27,360
How to explain your account job from someone from the year 1700.

184
00:22:27,360 --> 00:22:35,040
across the future yeah i can always try um okay so moving down here a bit becomes a little bit closer

185
00:22:35,040 --> 00:22:41,200
to to the to the to the topic here of the lesson so what's the best documented project you have seen

186
00:22:42,400 --> 00:22:48,960
and the highlight lighted here are for instance numpy and scipy which are

187
00:22:49,520 --> 00:22:54,880
automatic libraries implemented with api for the python programming languages

188
00:22:54,880 --> 00:23:00,640
I think we will see how to write documentation that looks a bit like that.

189
00:23:01,920 --> 00:23:09,200
So at least we cannot teach you today all the good practices, but at least we can teach you the tools

190
00:23:10,000 --> 00:23:14,480
or show you the tools at least to do something that looks like it at least.

191
00:23:16,240 --> 00:23:24,160
Yes, so okay there are the placeholders. So let's move now to the lesson material here.

192
00:23:24,880 --> 00:23:35,880
so the idea is here that yeah we will start to be interactive here right away

193
00:23:35,880 --> 00:23:45,420
so we would like to bring up this I mean why would you like to document a code

194
00:23:45,420 --> 00:23:53,760
and why it is important so you can see here these questions and we would now

195
00:23:53,760 --> 00:24:01,380
ask you to please contribute with your input in the shared document and here

196
00:24:01,380 --> 00:24:06,780
have here some starting questions for discussion so questions are is product

197
00:24:06,780 --> 00:24:14,560
documentation important and why is that so how would you describe a useful

198
00:24:14,560 --> 00:24:20,780
documentation and the third thing how can you motivate your colleagues to

199
00:24:20,780 --> 00:24:22,340
contribute to the documentation.

200
00:24:33,740 --> 00:24:40,140
So I can start saying a bit of my opinions here, perhaps, I

201
00:24:40,140 --> 00:24:45,500
don't want to stimulate the discussion. Well, of course, I'm

202
00:24:45,500 --> 00:24:49,440
seeing already some interesting answers there. So I will try to

203
00:24:49,440 --> 00:24:53,580
say something else is not there. So I actually, for myself, I

204
00:24:53,580 --> 00:24:58,120
want to document the code also, because I do, I typically do

205
00:24:58,120 --> 00:25:01,680
many things at once. And maybe there are some projects that I

206
00:25:01,700 --> 00:25:06,420
need to stop for a moment and then pick pick them up later.

207
00:25:07,260 --> 00:25:13,660
And if I have good documentation written, at least I can, I can

208
00:25:13,740 --> 00:25:16,320
get back to it. But of course, if I want someone else to use

209
00:25:16,320 --> 00:25:22,480
code then yeah but then it becomes more complicated i would say but still uh yeah that's a very

210
00:25:22,480 --> 00:25:34,720
important uh aspect of it so yeah uh yeah and actually there's a comment which is interesting

211
00:25:34,720 --> 00:25:40,960
for no one is going to use it not even yourself perhaps not but yeah so it's true a throwaway

212
00:25:40,960 --> 00:25:47,360
code exists uh but yeah we throw away code is throw away code is awesome because you can do

213
00:25:47,360 --> 00:25:54,080
whatever you want with it and you don't pay for your sins uh but uh but yeah we are talking about

214
00:25:54,080 --> 00:26:01,200
here i think we are talking about code that that where you don't have this luxury let's say yeah

215
00:26:01,200 --> 00:26:08,160
throwing everything away and um it could also be that even if it's a code you write it and perhaps

216
00:26:08,160 --> 00:26:14,320
just for use over a shorter time or so then I mean to document it can also guide you in

217
00:26:15,200 --> 00:26:20,480
the development of the code itself and perhaps you come to think about some constructions which are

218
00:26:21,440 --> 00:26:28,560
not so good and you then while describing them in text in documentation you

219
00:26:28,560 --> 00:26:32,720
then come to think about these shortcomings and you then improve in the code itself

220
00:26:32,720 --> 00:26:43,920
So, yeah, we could highlight here what you have contributed with here in the document.

221
00:26:43,920 --> 00:26:59,840
Yeah, here, important here, we need at least a bare minimal documentation, like a README.

222
00:26:59,840 --> 00:27:03,840
I think that that's a very important point.

223
00:27:10,600 --> 00:27:13,080
And there are so many steps in the project

224
00:27:13,120 --> 00:27:17,720
that are stored only in your head initially,

225
00:27:18,280 --> 00:27:24,160
and you need to get them down on paper before you step out away from a project.

226
00:27:24,200 --> 00:27:25,600
Yeah.

227
00:27:25,960 --> 00:27:29,600
I think we should try to comment a bit on the third question.

228
00:27:29,600 --> 00:27:32,120
how can you motivate your colleagues

229
00:27:32,120 --> 00:27:33,440
to contribute to the documentation?

230
00:27:33,440 --> 00:27:36,220
But I think even before asking this too

231
00:27:36,220 --> 00:27:37,740
about your colleagues,

232
00:27:37,740 --> 00:27:41,260
but how can I myself,

233
00:27:41,260 --> 00:27:44,400
how can I motivate myself to write documentation?

234
00:27:44,400 --> 00:27:47,740
And I think that, yeah,

235
00:27:47,740 --> 00:27:52,740
so getting familiar with the habit, it's important,

236
00:27:53,400 --> 00:27:56,280
and also with the tools that are available for that.

237
00:27:56,280 --> 00:27:58,200
So I think, yeah,

238
00:27:58,200 --> 00:28:03,640
habit is more important than the than the tools but uh but yeah we'll i think that that's the way

239
00:28:03,640 --> 00:28:09,320
you structure our lesson basically talking about simple tools first and describing the

240
00:28:10,520 --> 00:28:16,920
yeah or the the things you need to think about when you write documentation and then talk a

241
00:28:16,920 --> 00:28:25,080
bit more about the tools later right um yeah but yeah i think that uh someone's writing an

242
00:28:25,080 --> 00:28:29,940
interesting comment here like learn to do a little bit at the right stages it doesn't seem

243
00:28:29,940 --> 00:28:36,080
like an artificial yes so the point is that you you can always learn a bit improve your practices

244
00:28:36,080 --> 00:28:43,600
while you also do some some some like important work at the same like like the the fundamental

245
00:28:43,600 --> 00:28:48,740
work of writing the code and right doing your research at the same time you you know then you

246
00:28:48,740 --> 00:28:54,540
stop for a moment you learn a bit more about how to do things better and go on so in this iterative

247
00:28:54,540 --> 00:29:01,180
cycle and i think that this is a key to the practice it applies here but to the documentation

248
00:29:01,180 --> 00:29:07,100
but also to other to best practices in general how do you learn how to apply best practices in general

249
00:29:12,860 --> 00:29:19,900
yeah yeah um i think yeah we can perhaps see here there are some things which we had here

250
00:29:19,900 --> 00:29:25,820
uh in the lesson material let's see that we had thought of up beforehand so to say

251
00:29:27,020 --> 00:29:30,860
um and this perhaps complement here and

252
00:29:33,260 --> 00:29:38,220
yeah there are some some points here that that complement actually what we have on the

253
00:29:38,220 --> 00:29:43,820
on the shared document so you may want others to contribute to the code

254
00:29:43,820 --> 00:29:53,980
and yeah to that and having a documentation can be helpful because that can get persons to

255
00:29:54,620 --> 00:30:04,220
have a more smooth entry to the code and to the product and the fourth point here is yeah that's

256
00:30:04,220 --> 00:30:10,060
actually a very important point because feel your limited time and let the documentation answer

257
00:30:10,060 --> 00:30:18,140
are frequently asked questions and i mean the scale of things here matters a lot so if you are

258
00:30:18,140 --> 00:30:24,620
working let's say three four persons perhaps you even sit in the same corridor and you have lunch

259
00:30:24,620 --> 00:30:31,260
every day that then clearly a lot of let's say keeping track of things can be very informal

260
00:30:31,260 --> 00:30:39,100
perhaps only in voice and you don't need to write it on in paper if you start to share a scientific

261
00:30:39,100 --> 00:30:47,900
code with people who are not at the same physical location as you and also the numbers go up to

262
00:30:47,900 --> 00:30:56,060
let's say hundreds of users can be tens of developers then clearly you need to do it in

263
00:30:56,060 --> 00:31:07,260
writing and also this with let's say the efficiency of things namely this that things would be

264
00:31:07,260 --> 00:31:16,380
possible to grasp for newcomers to the code and then be the users or be the developers

265
00:31:17,420 --> 00:31:25,180
that is helpful for them and also quite helpful for people who are already on board

266
00:31:26,620 --> 00:31:29,980
because then you don't need to answer the same question over and over again

267
00:31:29,980 --> 00:31:42,740
But then the question, I guess, is, what would you like to have in a documentation, right?

268
00:31:42,740 --> 00:31:49,320
So what are the things you would put in your documentation?

269
00:31:49,320 --> 00:31:53,140
So that's why we have this question about the wish list, right?

270
00:31:53,140 --> 00:31:58,080
So what is your wish list regarding what you have there?

271
00:31:58,080 --> 00:32:09,080
Yeah, so one important thing here is that documentation can come in many different forms.

272
00:32:09,080 --> 00:32:24,080
One way of categorizing them, which has gained a lot of traction, is to distinguish in the four categories of tutorials,

273
00:32:24,960 --> 00:32:29,520
how-to guides, explanation and reference.

274
00:32:32,160 --> 00:32:43,040
So we have here also a few reference material for this and we could perhaps

275
00:32:44,400 --> 00:32:46,720
just move quickly to this page here.

276
00:32:54,080 --> 00:33:05,120
Yeah, so here you have like a nice box here with these four different kinds of documentation.

277
00:33:05,120 --> 00:33:11,640
So a tutorial, that would be something which is learning oriented.

278
00:33:11,640 --> 00:33:17,800
So that could be like an entry point to get started with the code.

279
00:33:17,800 --> 00:33:22,980
How to guides, more like you have something very specific.

280
00:33:22,980 --> 00:33:29,780
have a specific thing you would like to do with the program and you would like to go in and then get

281
00:33:31,460 --> 00:33:38,180
a suggestion on how to do a certain task for a specific purpose

282
00:33:42,340 --> 00:33:47,140
that relates also then i mean tutorials and how to guides i would say both of them will interrelate

283
00:33:47,140 --> 00:33:53,700
quite a lot to more like explanation material which could be material which are

284
00:33:55,300 --> 00:34:03,380
a i mean explaining the program and the code itself it could also go let's say beyond

285
00:34:04,820 --> 00:34:10,340
to the code itself in a sense that could give let's say an overview of i mean the scientific

286
00:34:10,340 --> 00:34:24,660
field and put it into context when you're using the code. And fourthly here you have the category

287
00:34:24,660 --> 00:34:34,020
reference information and that is yet another category which is that can be then very let's say

288
00:34:34,020 --> 00:34:41,060
technical instance could be like an application programming interface and complete description

289
00:34:41,060 --> 00:34:48,260
of the api which then is important for you as a developer of a code to have available

290
00:34:49,700 --> 00:34:54,980
but it can also be done for users that you sometimes need to be able to just find sort

291
00:34:54,980 --> 00:35:02,020
of like in a dictionary style complete listing of all of the let's say keywords if it is a keyword

292
00:35:02,020 --> 00:35:08,820
based program or if it's a graphical user interface program that that you have let's say

293
00:35:08,820 --> 00:35:15,300
um a little bit of an overview of here are all all the entry points and work modalities in the

294
00:35:15,300 --> 00:35:26,580
program

295
00:35:30,580 --> 00:35:38,260
and we will come in in a little bit later into the lesson we'll talk about

296
00:35:38,980 --> 00:35:44,580
readme files which i think is probably something that you all are familiar with

297
00:35:45,300 --> 00:35:56,360
But before we do so, we have here a little bit of a task here to come up with ideas for

298
00:35:56,360 --> 00:36:07,400
what would be points, I mean suggestions on points to have on a wish list for good documentation.

299
00:36:07,400 --> 00:36:14,440
So we have these three questions here to start the discussion.

300
00:36:14,440 --> 00:36:17,840
And please then work in the collaborative document.

301
00:36:17,840 --> 00:36:26,400
The three questions are, let us create a wishlist for how we would like the competition to be.

302
00:36:26,400 --> 00:36:35,680
We do have some of our ideas, but please don't look on them yet, but come up with your own.

303
00:36:35,680 --> 00:36:42,600
And also, you'll probably come to think about some things that we did not think about earlier.

304
00:36:42,600 --> 00:36:54,940
Yeah, how does documentation need to be in order to be useful, in order to be, like, yeah, useful to different people?

305
00:36:54,940 --> 00:37:00,640
And also, well, I don't want to give away too much.

306
00:37:00,920 --> 00:37:07,580
I don't want to stimulate the discussion by creating some kind of bias.

307
00:37:07,580 --> 00:37:18,620
but yeah okay but I see that comments are coming in yeah yeah so yeah working

308
00:37:18,620 --> 00:37:25,280
examples like examples on how to use the code great I think this I think we she's

309
00:37:25,280 --> 00:37:31,280
really reasonable a table of content yes we'll discuss how to get a table of

310
00:37:31,280 --> 00:37:37,880
content. This can be typically automated, actually. So, we see

311
00:37:37,880 --> 00:37:50,420
that. Yeah. Yeah, I think that template input idea is similar

312
00:37:50,420 --> 00:37:55,840
to like an example of usage, right? So, it falls in the same

313
00:37:55,840 --> 00:38:03,720
category, I would say, possibly in the category of, of how to

314
00:38:03,720 --> 00:38:08,840
guides, perhaps or tutorials. I mean, that is there. I mean, a

315
00:38:08,840 --> 00:38:13,780
template input would be possibly part of a and how to or a

316
00:38:13,780 --> 00:38:22,880
tutorial, right? Think there's a comment coming through about

317
00:38:22,880 --> 00:38:29,680
language i guess one should try to be as possible as unambiguous as possible i guess

318
00:38:31,120 --> 00:38:33,760
if i understand correctly the intention of the writer

319
00:38:37,760 --> 00:38:47,440
yeah that's obviously very important to avoid any let's say confusion

320
00:38:47,440 --> 00:38:55,360
to the extent possible because I think it's inherently so that for larger programs

321
00:38:56,480 --> 00:39:00,960
or could be like program packages where you have let's say one main program and you have

322
00:39:00,960 --> 00:39:05,040
a number of libraries that you're also using then there is a lot of complexity

323
00:39:06,000 --> 00:39:13,920
which you can try to shield the user from it up a point but

324
00:39:13,920 --> 00:39:21,480
But I mean, there are often situations where you need to get under the hood and really

325
00:39:21,480 --> 00:39:26,700
know what is going on in the code.

326
00:39:26,700 --> 00:39:32,640
And then there will be details for sure.

327
00:39:32,640 --> 00:39:45,260
I see very interesting comments here, but I'm also curious to see what's the reaction

328
00:39:45,260 --> 00:39:47,140
to our suggestions.

329
00:39:47,140 --> 00:39:57,880
So, would you go to our – should we start discussing our suggestions?

330
00:39:57,880 --> 00:39:58,920
Yeah, let's do so.

331
00:40:05,480 --> 00:40:11,180
Yeah, so I think the reason why this documentation,

332
00:40:11,500 --> 00:40:16,080
this is part of this workshop and we spend so much time on virtual control

333
00:40:16,080 --> 00:40:20,220
is because I think that documentation should be virtual controlled.

334
00:40:20,460 --> 00:40:26,300
It's easy for your code to change in a way that it's not synchronized

335
00:40:26,300 --> 00:40:27,180
with your documentation.

336
00:40:27,180 --> 00:40:46,980
So if you put the documentation and the source code in the same repository, then it's more likely, it's still possible to have some kind of, you know, issues with synchronization that, you know, your documentation describes an old version of the code and the code has progressed.

337
00:40:47,240 --> 00:40:54,200
But it's harder for this to happen, or at least it's easier to see that in a sense, right?

338
00:40:54,200 --> 00:41:07,340
Yeah, so I think, well, so yeah, so the idea is version, so your documentation should be version control because it will change over time because the software will change over time.

339
00:41:07,340 --> 00:41:24,000
I think also it will change because, so documentation can change because you may find ways to rephrase some sentences or to, you will find more fitting examples and you would, so there are different ways, different reasons why documentation may change.

340
00:41:24,000 --> 00:41:30,640
so you want to keep that under virtual control i would think hey and so it should be close to

341
00:41:30,640 --> 00:41:39,680
the code i think then yeah what about a standard macro language what the what what is what is this

342
00:41:39,680 --> 00:41:55,880
about yes these are something we just a lot for rendering of contents of texts

343
00:41:55,880 --> 00:42:01,860
and documents often in the context of web publishing but also for documents

344
00:42:01,860 --> 00:42:13,460
you have offline um and these are the market language is something which can be when you read

345
00:42:13,460 --> 00:42:21,460
it in source in in its raw form it is pure text which means it suits itself to version control

346
00:42:23,300 --> 00:42:29,380
at the same time you can then on the fly in your in your in an editor for instance

347
00:42:29,380 --> 00:42:37,140
visual studio code or or other programs on your local machine you can also render it very swiftly

348
00:42:37,860 --> 00:42:45,300
often on the fly and we will hear in this lesson we will see two examples

349
00:42:45,300 --> 00:42:55,140
namely restructured text rst and also the so-called markdown mark up and and

350
00:42:55,140 --> 00:43:00,140
and it is sort of a play with the markup as in HTML.

351
00:43:04,700 --> 00:43:07,000
Yeah, so it's a kind of, it's very simple.

352
00:43:07,000 --> 00:43:09,620
The thing is, who doesn't love markdown?

353
00:43:09,620 --> 00:43:12,040
It's very simple to use and yeah.

354
00:43:13,140 --> 00:43:15,780
And it was created with that intent.

355
00:43:15,780 --> 00:43:17,680
Restructure text instead is a bit more complex,

356
00:43:17,680 --> 00:43:18,820
but it's more powerful.

357
00:43:20,040 --> 00:43:20,880
Yes, yes.

358
00:43:20,880 --> 00:43:30,020
Okay, what more do we have here? We have copy-pasteable. That's very practical, I would say. You have

359
00:43:30,020 --> 00:43:38,640
let's say some suggested sequence of commands and you can take them directly from the documentation

360
00:43:38,640 --> 00:43:47,060
and then you just paste it in let's say your terminal window or other application interface

361
00:43:47,060 --> 00:43:49,360
and things get running.

362
00:43:50,500 --> 00:43:52,380
Yeah, and the problem is that if you use PDF

363
00:43:52,380 --> 00:43:55,240
or even some slides, when you have some,

364
00:43:55,240 --> 00:43:56,580
some codes written slides,

365
00:43:56,580 --> 00:43:59,420
if you copy that and paste it, it doesn't work.

366
00:43:59,420 --> 00:44:01,060
Even if it, you know,

367
00:44:01,060 --> 00:44:03,520
even if it looks good when you pasted it.

368
00:44:03,520 --> 00:44:06,660
So it's the weird things happening sometimes.

369
00:44:06,660 --> 00:44:07,800
So, yeah.

370
00:44:12,820 --> 00:44:15,240
Okay, I think we should go over these things here

371
00:44:15,240 --> 00:44:16,400
a little bit swiftly

372
00:44:16,400 --> 00:44:18,800
so that we can come to read new files.

373
00:44:18,800 --> 00:44:20,840
So installation instructions,

374
00:44:20,840 --> 00:44:25,460
that's very relevant.

375
00:44:25,460 --> 00:44:30,460
Code licensing, that's...

376
00:44:30,480 --> 00:44:31,500
That's a big thing.

377
00:44:31,500 --> 00:44:33,180
Yeah, that's a big thing.

378
00:44:34,240 --> 00:44:37,460
The last point here, information for contributors.

379
00:44:37,460 --> 00:44:39,320
That's also something that lowers the hurdle

380
00:44:39,320 --> 00:44:44,320
for newcomers and also a means to where you can,

381
00:44:44,320 --> 00:44:50,800
means to where you can, let's say, make clear that you welcome

382
00:44:50,800 --> 00:44:55,080
contributions. And I mean, that also depends where you stand in

383
00:44:55,080 --> 00:44:57,840
a project, perhaps in the beginning, it is, let's say,

384
00:44:57,840 --> 00:45:01,520
essentially closed shop, you work with your team of close

385
00:45:01,520 --> 00:45:04,840
collaborators, and you're not really ready to let in other

386
00:45:04,840 --> 00:45:08,580
people, and that's perfectly fine. But then you could also

387
00:45:08,580 --> 00:45:12,160
perhaps be transparent about this, so that there are no

388
00:45:12,160 --> 00:45:19,960
misunderstandings. And what I do myself sometimes is that I simply reach out over

389
00:45:19,960 --> 00:45:27,880
email to people to check first, like, okay, is here something you would like people to

390
00:45:27,880 --> 00:45:35,700
contribute? It might be better to have that kind of conversation offline rather than to

391
00:45:35,700 --> 00:45:40,700
to have that in, let's say, discussion on issues in GitHub.

392
00:45:45,460 --> 00:45:48,580
I actually have something to add to the wishlist,

393
00:45:48,580 --> 00:45:49,920
which is not on this list

394
00:45:49,920 --> 00:45:51,620
because it's a bit hard to achieve,

395
00:45:51,620 --> 00:45:53,680
but I think it can be nice.

396
00:45:53,680 --> 00:45:58,200
So I think that there's some kind of documentation,

397
00:45:58,200 --> 00:46:01,020
there are some formats that allow you to check

398
00:46:01,020 --> 00:46:05,200
at least part of it automatically.

399
00:46:05,200 --> 00:46:10,480
And so if you write documentations using a notebook approach, like a literal programming approach,

400
00:46:10,480 --> 00:46:19,000
there are some tools that actually can verify that your tutorial that you write in, like, a Jupyter notebook in this way,

401
00:46:20,160 --> 00:46:25,160
when you mix text and code.

402
00:46:26,180 --> 00:46:33,120
So if you use that format, there are tools that can validate your documentation, in a sense,

403
00:46:33,120 --> 00:46:35,880
so that you can actually run them automatically

404
00:46:35,880 --> 00:46:39,620
and see if something has changed.

405
00:46:40,120 --> 00:46:43,200
And I think it's nice to have something like this

406
00:46:43,200 --> 00:46:47,380
because it allows you to basically maintain your documentation

407
00:46:47,380 --> 00:46:51,580
with less effort or to at least detect problems,

408
00:46:52,660 --> 00:46:55,580
incompatibilities between documentation and your code quicker.

409
00:46:56,560 --> 00:47:01,660
And so we are going to talk about Jupyter Notebooks this afternoon,

410
00:47:01,660 --> 00:47:04,960
and we're going to talk about automated testing tomorrow.

411
00:47:05,480 --> 00:47:10,660
So I think this is a good way to connect the dots of all this.

412
00:47:11,140 --> 00:47:15,140
I have a narrative, overarching narrative in this huge workshop.

413
00:47:16,460 --> 00:47:17,400
Yes, indeed.

414
00:47:18,060 --> 00:47:21,280
And you mentioned, [name], that there are different tools and frameworks.

415
00:47:21,280 --> 00:47:28,160
So that brings us naturally over to a little bit

416
00:47:28,160 --> 00:47:38,080
um that particular topic namely so what what popular i mean what tools and solutions are out

417
00:47:38,080 --> 00:47:48,960
there so um when you do commenting in in documentation in code there are um

418
00:47:51,120 --> 00:47:57,440
things that you can do um which could be like pure comments you can use function doc strings

419
00:47:58,160 --> 00:48:09,160
And I mean, actually, the in-code documentation is a primary concern for the developers of a code.

420
00:48:09,160 --> 00:48:18,160
It can also be of high importance for users of the code, if it's so that you have something which is,

421
00:48:19,120 --> 00:48:25,360
let's say it's something um yeah a big simulation software with a lot of

422
00:48:26,880 --> 00:48:32,960
let's say detail details in implementation and where you as an end user need to know precisely

423
00:48:32,960 --> 00:48:40,080
what is happening sometimes looking directly into the source code is the adequate thing to do

424
00:48:40,080 --> 00:48:49,400
And then having the in-code documentation is important because then you can, as a guide

425
00:48:49,400 --> 00:48:51,680
for the eye, so that you find...

426
00:48:51,680 --> 00:48:59,240
Yeah, especially if you're talking about the kind of functions that stay a bit on top of

427
00:48:59,240 --> 00:49:00,240
everything.

428
00:49:00,240 --> 00:49:08,200
So the more, the general, the functions that the user may call, then I think these are

429
00:49:08,200 --> 00:49:14,520
comments there uh and are going to be pretty useful because that's i think these are the

430
00:49:14,520 --> 00:49:21,080
most likely to be looked at by by uh by a user right yeah yeah

431
00:49:25,720 --> 00:49:31,880
i want to say one thing about commenting your code uh there's uh there's a a number of people

432
00:49:31,880 --> 00:49:38,520
like a discipline called the clean code where they say oh cold comments are not great because

433
00:49:38,520 --> 00:49:46,040
they are hard to fight to to um to verify you should actually name your functions and your

434
00:49:46,040 --> 00:49:51,240
your variables in a way so that it's obvious what they do and they think that it's good advice but

435
00:49:51,240 --> 00:49:59,080
it's quite hard to get to get right so yeah um yes we need we need also comments in the code i think

436
00:49:59,080 --> 00:50:03,880
yeah but i think there's also people that say no you shouldn't comment your code you should make

437
00:50:03,880 --> 00:50:10,200
your functions and your your variable uh named in a way that you don't need comments maybe it's

438
00:50:10,200 --> 00:50:15,560
possible i don't think it's always possible but yeah yeah it depends a little bit also on which

439
00:50:15,560 --> 00:50:21,480
language you you're using because i mean some languages are more verbose and and let's say

440
00:50:21,480 --> 00:50:29,320
human language like it and whereas others a bit more a bit more compact and keyword like it so

441
00:50:29,320 --> 00:50:36,440
that you need to decorate it or you could naturally decorate it with normal text okay

442
00:50:38,120 --> 00:50:44,200
so we had mentioned here earlier um already this with restructured text and markdown so

443
00:50:44,200 --> 00:50:48,740
So, [name], what are these formats?

444
00:50:48,740 --> 00:50:51,300
So yeah, here in the notes you see,

445
00:50:51,300 --> 00:50:54,900
so basically there are two formats

446
00:50:54,900 --> 00:50:58,260
that allow you to write.

447
00:50:59,140 --> 00:51:02,460
They are really already readable as they are,

448
00:51:02,460 --> 00:51:03,800
especially Markdown, I think.

449
00:51:03,800 --> 00:51:07,980
That was the design goal of Markdown,

450
00:51:07,980 --> 00:51:11,040
was you don't have to render this to HTML.

451
00:51:11,040 --> 00:51:13,260
You don't have to render this to a webpage.

452
00:51:13,260 --> 00:51:14,800
You cannot re-read as it is.

453
00:51:17,060 --> 00:51:22,560
And yeah, so you see that you have different features here.

454
00:51:22,660 --> 00:51:24,380
You can make some parts bold.

455
00:51:24,420 --> 00:51:25,740
You can emphasize some parts.

456
00:51:25,840 --> 00:51:27,220
You can have lists.

457
00:51:27,220 --> 00:51:30,540
You can have images, tables, links.

458
00:51:31,920 --> 00:51:35,940
Yeah, and they are equivalent in the basic functionality, at least.

459
00:51:35,940 --> 00:51:44,500
right uh yeah so restructured text is a bit more feature featureful uh the markdown markdown has

460
00:51:44,500 --> 00:51:52,340
actually different flavors so github for example can render markdown files it will do that in a

461
00:51:52,340 --> 00:51:58,280
different way than the github for example um at least on the more like niche features um

462
00:51:58,280 --> 00:52:04,860
well instead restructured text is more standardized and it can also be uh expanded if you want you

463
00:52:04,860 --> 00:52:10,220
add if you want to do something fancy you can create new directives and new roles and there's

464
00:52:10,220 --> 00:52:15,740
a mechanism to do that with markdown alone it's a bit more complicated but markdown is simple

465
00:52:15,740 --> 00:52:21,260
and people don't need to be taught how to use markdown while people may need to be taught how

466
00:52:21,260 --> 00:52:28,140
to use uh restructuring text yeah yeah that's a good point um i know indeed markdown is very

467
00:52:28,140 --> 00:52:36,700
lightweight essentially you can um i mean copy paste some paragraphs and then a starting point

468
00:52:36,700 --> 00:52:41,660
and then you already have the syntax there for everything and and just write your content yeah

469
00:52:42,220 --> 00:52:46,540
and actually in what follows later when we are going to talk about sphinx we are going to use

470
00:52:46,540 --> 00:52:53,100
like um something which is the best of both worlds which is my st which is like a markedly structured

471
00:52:53,100 --> 00:52:59,900
text which is a flavor like a markdown flavor which is a expanded in a way that you can also

472
00:52:59,900 --> 00:53:08,060
you have also the restructured text features so you see here in in the middle here of this panel

473
00:53:08,060 --> 00:53:15,580
that have some references here where you can find them more details on on markdown and on

474
00:53:15,580 --> 00:53:29,420
restructured text um html static site generators that is something that we will try out in the

475
00:53:29,420 --> 00:53:39,180
second hour and as you can see here there are many options available here um so

476
00:53:39,180 --> 00:53:42,580
So, yeah, we have Sphinx here, [name].

477
00:53:43,020 --> 00:53:47,660
Yeah, so Sphinx is like the main tool

478
00:53:47,660 --> 00:53:51,440
that is used to document the official Python projects.

479
00:53:52,000 --> 00:53:54,540
And that's what we're going to use here.

480
00:53:54,540 --> 00:53:56,520
So we said that at the beginning

481
00:53:56,520 --> 00:53:59,440
that this part is like language agnostic.

482
00:54:00,120 --> 00:54:02,720
And it is because you can write any documentation

483
00:54:02,720 --> 00:54:06,900
for any project of any language.

484
00:54:06,900 --> 00:54:09,660
But yeah, I mean, this is actually Python.

485
00:54:10,240 --> 00:54:11,980
This is a Python tool, okay?

486
00:54:13,460 --> 00:54:16,740
But this is only for the Sphinx part.

487
00:54:17,020 --> 00:54:19,500
What we're going to talk about in the first hour

488
00:54:19,500 --> 00:54:24,000
applies to basically every software project in any language.

489
00:54:24,940 --> 00:54:29,340
And yeah, so there's really many of them.

490
00:54:29,720 --> 00:54:33,900
I think the MKDocs is becoming more and more popular.

491
00:54:33,900 --> 00:54:43,920
and uh yeah the cool thing about um sphinx and mkdocs and also others is that they can do

492
00:54:43,920 --> 00:54:52,000
things which are really interesting not just generate html uh so web pages but they can also

493
00:54:52,000 --> 00:55:00,220
they have plugins where for example they can produce pdf or latex or they can um parse your

494
00:55:00,220 --> 00:55:07,900
code and extract the doc strings from it, okay, so that they can generate an API documentation,

495
00:55:08,620 --> 00:55:17,460
reference API documentation. And so this is about Sphinx and MKDocs and many others which

496
00:55:17,460 --> 00:55:22,340
are a bit more language specific because they need to read things from your code. So they need

497
00:55:22,340 --> 00:55:31,380
understand your code um yeah and the thing is that after you have used this tool to create a web page

498
00:55:31,940 --> 00:55:39,380
you can host it you can put it on the internet so it can be seen uh from from from everywhere

499
00:55:39,380 --> 00:55:47,620
in the world um and we'll discuss about how to do this on github pages later and i think that uh

500
00:55:47,620 --> 00:55:50,020
Do you want to add anything here?

501
00:55:50,020 --> 00:55:51,860
Is it anything I'm missing?

502
00:55:51,860 --> 00:55:58,000
No, I think that was a good overview.

503
00:55:58,000 --> 00:56:03,200
You could briefly highlight some other frameworks here.

504
00:56:03,200 --> 00:56:11,140
So the wikis, as pioneered by the wikipedia.org website.

505
00:56:11,140 --> 00:56:22,720
Those are solutions where you have, I mean, then you can produce contents a bit dynamically

506
00:56:22,720 --> 00:56:28,420
with having people to jump in and contribute.

507
00:56:28,420 --> 00:56:35,880
And essentially the editing of wikis is done on a web browser, so you don't really need

508
00:56:35,880 --> 00:56:42,120
to just need to go to from view mode to edit mode and then you can contribute um

509
00:56:43,960 --> 00:56:50,680
so that's not advantage um but i would say my personal reference from wikipedia

510
00:56:50,680 --> 00:56:57,960
from wiki is sort of that they i mean in order for them to to become good you also need to have

511
00:56:57,960 --> 00:57:04,200
a lot of let's say you need to have some editors and some moderators of content because otherwise

512
00:57:04,200 --> 00:57:08,280
it's a little bit uncontrolled how they develop over time

513
00:57:11,080 --> 00:57:15,800
yeah but the problem with wikis i think uh that it doesn't fit with the first one of the first

514
00:57:15,800 --> 00:57:20,920
i the first item in our wish list that they are not version controlled yeah so they are to an

515
00:57:20,920 --> 00:57:24,520
extent version control but they're not version control with the code because it's a typically

516
00:57:24,520 --> 00:57:30,600
a different repository um actually it's like a yeah it's like a different repository so that's

517
00:57:30,600 --> 00:57:36,020
That's why I think they are easy to use, typically,

518
00:57:36,480 --> 00:57:41,320
but it's not what a research software engineer

519
00:57:41,320 --> 00:57:45,220
or a software engineer would use to document their code, I think.

520
00:57:46,360 --> 00:57:47,620
Yeah, I agree with that.

521
00:57:48,620 --> 00:57:51,320
Yeah, it's not like that was for me,

522
00:57:51,320 --> 00:57:56,020
that would not be, let's say, a primary choice.

523
00:57:56,960 --> 00:57:58,840
But certainly, wikis can be a very good complement.

524
00:58:00,600 --> 00:58:12,600
Latesh and PDF, those I would say are a little bit old school, which can be perfectly relevant.

525
00:58:12,600 --> 00:58:22,600
In particular, if you are working with a lot of equations, LaTeX is the best tool.

526
00:58:22,600 --> 00:58:37,040
But, yeah, the rendering, the contents can be a little bit, it's not always so smooth

527
00:58:37,040 --> 00:58:41,360
to work with for, let's say, live documents on the web.

528
00:58:41,360 --> 00:58:48,120
Yeah, and write your papers in LaTeX, but please give us something else to understand your

529
00:58:48,120 --> 00:58:49,120
code.

530
00:58:49,120 --> 00:58:50,120
Yeah, yeah.

531
00:58:50,120 --> 00:58:51,120
That's my opinion.

532
00:58:51,120 --> 00:59:01,120
in yeah yes i agree okay doc cdn and we will not look further into it here but this is a

533
00:59:02,480 --> 00:59:08,160
tool which is very popular in the c++ community where you can decorate your code with

534
00:59:10,160 --> 00:59:18,080
some some keywords and you can then from from that source like in the source code

535
00:59:18,080 --> 00:59:24,960
decorated with this document keywords you can then generate documentation for

536
00:59:27,840 --> 00:59:33,760
the classes and and objects for your code and like the programming interface

537
00:59:35,040 --> 00:59:42,240
yeah it's i think it's uh one of the oldest tools that does api document api reference generation

538
00:59:42,240 --> 00:59:49,700
like as i mentioned sphinx can do it for python code for example doxygen can do this for c++

539
00:59:49,700 --> 00:59:58,280
for c++ and c and other languages yeah yeah i want to say that if you're using c++ or the

540
00:59:58,280 --> 01:00:02,600
thing that you you possibly need to use doxygen to generate this but you can still use sphinx as

541
01:00:02,600 --> 01:00:08,700
well because doxygen can actually talk to sphinx with a plugin a sphinx plugin called breathe

542
01:00:08,700 --> 01:00:18,700
So, yeah, if you are a C++ developer and you want to, you like Sphinx, but you need to use Doxygen, then you can also put these things together if you like.

543
01:00:19,980 --> 01:00:25,120
Yeah, that's a very nice opportunity that one can do this.

544
01:00:29,880 --> 01:00:35,660
So, there are, yeah, Doxygen is popular for C++, but also for some other languages.

545
01:00:35,660 --> 01:00:46,380
is you can find here some specific frameworks which are of relevance for Fortran and for Julia.

546
01:00:48,780 --> 01:00:56,620
There's also an interesting tool Quarto to convert Markdown to various document types.

547
01:00:56,620 --> 01:01:10,640
so let's move over here to the topic of encode documentation and here so now I mean we are

548
01:01:10,640 --> 01:01:18,720
doing this this lesson here in streaming but we will not have any separate exercise sessions

549
01:01:18,720 --> 01:01:25,600
in between but yeah so we will highlight a few things here and then we very much

550
01:01:25,600 --> 01:01:32,640
encourage you to to sit down at another time so to say and and then work through these

551
01:01:32,640 --> 01:01:36,880
exercises and you will then find also some template solutions

552
01:01:42,240 --> 01:01:49,040
so in particular in this particular uh episode we are i think it's more discussions right

553
01:01:49,040 --> 01:01:57,840
so but yeah yes that that's uh yeah you're right um but but nevertheless if you have time

554
01:01:57,840 --> 01:02:05,760
uh i mean later today or so then then please go ahead also to do the exercises um

555
01:02:08,240 --> 01:02:15,200
so here we have some examples here um this is about an if statement

556
01:02:15,200 --> 01:02:18,720
has something to do with temperature and uh yeah [name] so so

557
01:02:21,360 --> 01:02:26,800
so yeah basically if you see so there's a check uh so if the temperature is less than minus 50

558
01:02:27,600 --> 01:02:32,960
um then we do something and now if you look at comment a i think okay now we check if temperature

559
01:02:32,960 --> 01:02:40,320
is below minus 50. okay if i didn't know python then i would i would really okay this comment

560
01:02:40,320 --> 01:02:44,960
would be would be have really helpful but if i could read python already i thought okay so that's

561
01:02:44,960 --> 01:02:51,040
exactly what that if statement says right so it's not it doesn't give me more information if i know

562
01:02:51,040 --> 01:02:57,920
what python syntax is okay actually it's it's also good that we use the temperature so that the

563
01:02:57,920 --> 01:03:02,480
variable temperature is called temperature because then we know what it is and there are some codes

564
01:03:02,480 --> 01:03:08,160
where things all variables are called a and b and then in that case yeah that comment would have

565
01:03:08,160 --> 01:03:14,000
been helpful but yeah in in general i would say that comment b like we regard temperatures below

566
01:03:14,000 --> 01:03:21,280
minus 50 degrees as measurement errors um yeah i think it's uh it's uh it's a more i like more

567
01:03:21,280 --> 01:03:28,240
that comment uh although i would really love to be honest to have an error like in the print

568
01:03:28,240 --> 01:03:36,160
statement error is temper temperature too low i would possibly put that so i would write in

569
01:03:36,160 --> 01:03:42,400
that printf in this print uh string i would say it's a measurement error something like this

570
01:03:42,400 --> 01:03:44,200
but yeah

571
01:03:44,200 --> 01:03:47,040
that's at least

572
01:03:47,040 --> 01:03:49,020
my opinion here

573
01:03:49,020 --> 01:03:56,140
yes

574
01:03:56,140 --> 01:03:57,980
very good points

575
01:03:57,980 --> 01:04:01,020
I think that writing

576
01:04:01,020 --> 01:04:03,020
comments and making readable code is

577
01:04:03,020 --> 01:04:04,860
a bit of an art and

578
01:04:04,860 --> 01:04:07,120
I'm not I don't think I'm good

579
01:04:07,120 --> 01:04:08,760
at it so

580
01:04:08,760 --> 01:04:11,040
my suggestion is always

581
01:04:11,040 --> 01:04:13,520
iterate, right?

582
01:04:13,660 --> 01:04:15,760
Try it, write something, and then go back

583
01:04:15,760 --> 01:04:17,520
to your code after a while when you have time

584
01:04:17,520 --> 01:04:19,780
and see, ah, maybe, you know, you first

585
01:04:19,780 --> 01:04:21,780
start with version

586
01:04:21,780 --> 01:04:23,760
A, and then you realize, oh,

587
01:04:23,800 --> 01:04:25,700
but, I mean, this comment says something which is

588
01:04:25,700 --> 01:04:27,580
obvious. Maybe I can change that to

589
01:04:27,580 --> 01:04:29,760
version B to C. But, yeah, so

590
01:04:29,760 --> 01:04:31,740
you can do it, like, incrementally.

591
01:04:31,940 --> 01:04:33,640
You don't have to start and do things

592
01:04:33,640 --> 01:04:35,780
perfect on the first time. But I think that, yeah.

593
01:04:36,620 --> 01:04:37,620
To me, it's a reason,

594
01:04:37,760 --> 01:04:39,920
so this example, comment A and comment B, are

595
01:04:39,920 --> 01:04:49,520
like a realistic progression of like how to how you can improve code if and in

596
01:04:49,520 --> 01:04:57,680
comments if you if you iterate on that if you go back to your code and I could

597
01:04:57,680 --> 01:05:05,660
also think that perhaps this the comment or the type a is like now we check if

598
01:05:05,660 --> 01:05:14,220
temperatures is below 50 let's say you have a year from now that you revise this if statement and

599
01:05:14,220 --> 01:05:19,180
let's say you check also is it below a temperature or is it also above a temperature something like

600
01:05:19,180 --> 01:05:27,260
that then i would say it could easily happen that you do that the code and the comment becomes

601
01:05:27,260 --> 01:05:37,820
out of sync a comment or the type of b is more like um okay so here's like minus 50

602
01:05:37,820 --> 01:05:42,140
degree check but you could also then let's say this is about defining

603
01:05:43,980 --> 01:05:51,020
what intervals are could come and could be considered to be reasonable in the first place

604
01:05:57,260 --> 01:06:09,460
So here is an interesting comment here in the lesson about the so-called zombie code

605
01:06:09,460 --> 01:06:17,680
that you have some old implementation or some functionality and you comment it out and then

606
01:06:17,680 --> 01:06:24,060
you replace it with some new code and the advice is here that you should strive then

607
01:06:24,060 --> 01:06:33,100
to remove the out commented code and then I mean you retain it by means of the version control

608
01:06:35,260 --> 01:06:38,380
but it's good to hide it away to avoid clutter.

609
01:06:40,940 --> 01:06:44,460
I must say that I find this a little bit difficult in practice

610
01:06:46,060 --> 01:06:52,540
because I somehow feel more confident if I have the zombie stuff in the code.

611
01:06:52,540 --> 01:06:59,820
I mean within reason I think it depends so if I'm doing some quick changes yes

612
01:06:59,820 --> 01:07:05,620
then I will keep the zombie codes just to but if not I would I mean if it's

613
01:07:05,620 --> 01:07:09,620
something more long-term yeah then I would use version control maybe maybe

614
01:07:09,620 --> 01:07:15,160
you can even say I will you know I can do like patch staging so get add minus

615
01:07:15,160 --> 01:07:23,720
p and choose only you know the not basically i can say i want to add only the the parts which

616
01:07:23,720 --> 01:07:28,200
don't contain this zombie code so there are there are options there so version control

617
01:07:28,200 --> 01:07:37,480
gives you a lot of options there if you want to be like clean let's say um yeah yeah

618
01:07:45,160 --> 01:07:54,980
So, here is something which is called Doxygen that we could say a few words about and that's

619
01:07:54,980 --> 01:08:09,800
it's that, I mean, various languages support, I mean, having good constructions for self-documentation

620
01:08:09,800 --> 01:08:17,240
or features so if you look here on this python snippet here we have it here described first as

621
01:08:17,960 --> 01:08:21,960
like a pure comment in the code but

622
01:08:25,000 --> 01:08:31,560
you could also put like description on what this function is doing

623
01:08:31,560 --> 01:08:45,240
in this more like API documenting style and this connects a little bit to the kind of output that

624
01:08:45,240 --> 01:08:51,060
you can get if you have a like a program that you are you're executing it by long by typing

625
01:08:51,060 --> 01:09:01,540
the name in in a terminal window you then offer they have some flags to steer the execution of

626
01:09:01,540 --> 01:09:08,820
command and one of the standard flags is dash dash help and if you don't have the command name

627
01:09:08,820 --> 01:09:14,500
that's just help then the contents which you have like in docstrings is what then will be shown

628
01:09:21,060 --> 01:09:28,340
yeah and also sphinx and doxygen can actually you know take this extract this docstrings and create

629
01:09:28,340 --> 01:09:37,380
the api so yeah yeah api documentation so i'm looking here on the clock here uh [name] and

630
01:09:37,380 --> 01:09:42,260
i think perhaps we could do like this that that we we spend some three four minutes here on

631
01:09:43,060 --> 01:09:47,700
reading files yep and and then we will be at another point where we go for a break

632
01:09:47,700 --> 01:09:53,220
and then after break we can then start with the sphinx yep okay

633
01:09:58,340 --> 01:10:12,360
So writing good README files.

634
01:10:12,360 --> 01:10:13,660
So what can we say about this?

635
01:10:13,660 --> 01:10:20,440
So what's your experience, [name], what would you like to see from a good README file?

636
01:10:20,440 --> 01:10:30,520
um so as people have mentioned uh so well i think a good readme file uh well it's a part of the

637
01:10:30,520 --> 01:10:35,480
documentation right so but i think it shouldn't contain the whole documentation sometimes it's

638
01:10:35,480 --> 01:10:43,080
like um it's nice to split it into different files if possible there is there is a catch there

639
01:10:43,080 --> 01:10:50,840
but yeah so uh for example having links in a in a i think you know as a feature of markdown or

640
01:10:50,840 --> 01:10:58,840
you know of general uh technology that you can use when you use when you write uh ring me files um

641
01:10:58,840 --> 01:11:05,560
so and it's also nice to have some kind of um markup that says for example this important part

642
01:11:05,560 --> 01:11:11,960
um so it's nice to have like uh so it's mentioned here in the in the first exercise which is walk

643
01:11:11,960 --> 01:11:20,040
through like you can actually specify some uh like some you know that some parts are more important

644
01:11:20,040 --> 01:11:29,400
than others uh yeah and uh yeah you can have images and you can also have like badges uh like

645
01:11:29,400 --> 01:11:36,680
like the one that is shown if you scroll a little down in the in the notes yeah um yeah it can be

646
01:11:36,680 --> 01:11:44,840
useful to have some badges to to signal like uh okay my code has passed the the the all the tests

647
01:11:44,840 --> 01:11:52,280
and you can have a badge there let's say that is red if not if the test failed or you know uh can

648
01:11:52,280 --> 01:11:57,320
show also the license right away what kind of license is there so there's many different badges

649
01:11:57,320 --> 01:12:03,800
you can put there um it's a bit eye candy and i think people some people find it a bit of a gimmick

650
01:12:03,800 --> 01:12:09,880
to have these kind of things but it's nice i think it's a it's a way to signal things and actually

651
01:12:09,880 --> 01:12:14,840
the readme the readme file you have in your repository on your github repository github

652
01:12:14,840 --> 01:12:22,120
whatever it's like the the entrance of like like your the front your front door right so that's how

653
01:12:22,120 --> 01:12:28,600
what the first thing that people have as the people see when when they look at your repository

654
01:12:28,600 --> 01:12:38,520
so yeah i was from my experience uh i prefer a lot where the readme files stand on their own

655
01:12:39,080 --> 01:12:45,720
so certainly i mean you can have links you can have badges but it's also good if i mean

656
01:12:46,520 --> 01:12:50,600
you have to really file in itself without following the links or without clicking the

657
01:12:50,600 --> 01:12:56,840
badges if that can tell you upfront and that will also be sometimes let's say you work on on a

658
01:12:58,600 --> 01:13:06,220
on the login node of a supercomputer then could even be that you cannot really click the link

659
01:13:06,220 --> 01:13:13,300
because you don't have a web browser on that login node yeah true true true yeah but it can

660
01:13:13,300 --> 01:13:17,940
tell you for example a link to to other files in the repository for example the contributing guide

661
01:13:17,940 --> 01:13:25,320
can be actually linked in the the readme although maybe it doesn't need to be linked because

662
01:13:25,320 --> 01:13:32,120
typically it's written in a in a file which has a like it's called contributing.md or the installation

663
01:13:32,120 --> 01:13:38,280
guide yeah you can link it from the readme if you wish but it's usually called install so you

664
01:13:38,280 --> 01:13:44,520
can actually yeah so that is this kind of um standard file names for different kind of

665
01:13:44,520 --> 01:13:49,400
documentation the readme is one of them of course and it's the most important in this case and you

666
01:13:49,400 --> 01:13:56,680
you could you could put links to those if you if you wish if it's relevant yeah and certainly this

667
01:13:56,680 --> 01:14:05,000
with having different file names like you can read me you can have install you can have contributing

668
01:14:06,840 --> 01:14:13,880
that's i mean these standards are quite useful because that makes the reader find

669
01:14:14,680 --> 01:14:21,240
the specific content very quickly and that's something i appreciate from a readme or from

670
01:14:21,240 --> 01:14:27,400
an install file is this if if it can get a grip on it within i mean really like 30 seconds or one

671
01:14:27,400 --> 01:14:35,640
minute because could be on some days that you have you're looking into five readmes for five

672
01:14:35,640 --> 01:14:43,800
different programs. And the more clarity you can have upfront, the better.

673
01:14:44,600 --> 01:14:51,160
Yeah. And it's actually interesting here, if you have detailed descriptions, you can actually

674
01:14:52,680 --> 01:15:03,800
use these details tags, where you can actually hide some long things, some long descriptions,

675
01:15:03,800 --> 01:15:08,520
and just show a short summary in this case and it's actually interesting because this is an

676
01:15:08,520 --> 01:15:15,160
example of a feature of markdown which is that you can actually put in line in in the code in

677
01:15:15,160 --> 01:15:22,040
your markdown code let's say but it's document you can put html code this is actually html if

678
01:15:22,040 --> 01:15:31,080
you look at this uh so there are html tags and yeah you can use that in a markdown file as well

679
01:15:31,080 --> 01:15:36,920
and it should be rendered as as expected as if we have it as if it was html

680
01:15:40,280 --> 01:15:41,480
so um

681
01:15:44,280 --> 01:15:53,320
if you are on on this page of the lesson um you can just so this first block here was actually um

682
01:15:53,320 --> 01:16:02,440
we had it labeled as an exercise and you can also find two other exercises here

683
01:16:02,440 --> 01:16:12,460
in the section of the lesson. I think that we will now shortly go for a

684
01:16:12,460 --> 01:16:21,040
break and I'd say that this exercise number two and exercise three

685
01:16:21,040 --> 01:16:29,420
that you could come back to this on your own later and there are good template solutions

686
01:16:29,420 --> 01:16:40,700
here and now after break we will start the topic of documentation with swings and markdown.

687
01:16:40,700 --> 01:16:45,600
Just one thing about this readme exercises well there's going to be a bring your code

688
01:16:45,600 --> 01:16:49,400
session they are going to be bring your code sessions in the next weeks so maybe that's

689
01:16:49,400 --> 01:16:59,720
thing that one could discuss in those sessions. That's a very good suggestion.

690
01:17:00,920 --> 01:17:08,600
So let's just very quickly move over to the shared document to see what we have here.

691
01:17:19,400 --> 01:17:27,560
Let's have 10 minutes of a break.

692
01:17:27,560 --> 01:17:31,400
So shall we go in at 12 past the hour?

693
01:17:31,400 --> 01:17:35,900
Yes, that sounds good.

694
01:17:35,900 --> 01:17:40,520
So yeah, see you all at 12 past the full hour.

695
01:17:40,520 --> 01:17:41,200
Bye.

696
01:17:49,400 --> 01:17:50,020
you

697
01:18:19,400 --> 01:18:20,020
you

698
01:18:49,400 --> 01:18:50,020
you

699
01:19:19,400 --> 01:19:20,020
you

700
01:19:49,400 --> 01:19:50,020
you

701
01:20:19,400 --> 01:20:20,020
you

702
01:20:49,400 --> 01:20:50,020
you

703
01:21:19,400 --> 01:21:20,020
you

704
01:21:49,400 --> 01:21:50,020
you

705
01:22:19,400 --> 01:22:20,020
you

706
01:22:49,400 --> 01:22:50,020
you

707
01:23:19,400 --> 01:23:20,020
you

708
01:23:49,400 --> 01:23:50,020
you

709
01:24:19,400 --> 01:24:20,020
you

710
01:24:49,400 --> 01:24:50,020
you

711
01:25:19,400 --> 01:25:20,020
you

712
01:25:49,400 --> 01:25:50,020
you

713
01:26:19,400 --> 01:26:20,020
you

714
01:26:49,400 --> 01:27:18,900
Hello, we are back.

715
01:27:19,400 --> 01:27:30,560
okay so did you have a refreshing break [name] yes yes I was filling up with

716
01:27:30,560 --> 01:27:38,120
coffee coffee like yeah yeah a lot of jokes about coffee I don't remember any

717
01:27:38,120 --> 01:27:47,740
at the moment but yeah we need coffee coffee so so we do more hands-on ish

718
01:27:47,740 --> 01:27:53,300
part of the lesson at the moment right so now we are switching to how to use

719
01:27:53,300 --> 01:27:59,820
Sphinx and Markdown so I'm showing the notes now there's a link in the note we

720
01:27:59,820 --> 01:28:06,960
should show we should point to the parts we're going to talk about now and so I

721
01:28:06,960 --> 01:28:12,620
will since this is a hands-on part I will show a lot my shell my terminal

722
01:28:12,620 --> 01:28:19,320
Okay. I'm going to switch to my terminal now. Okay. Okay. So you can see the terminal in

723
01:28:19,320 --> 01:28:30,100
his all, it's all glory. So for this part, for this hands-on, we are going to use a conda

724
01:28:30,100 --> 01:28:35,880
environment. I think, I don't know if anybody has used it before during the workshop, but

725
01:28:35,880 --> 01:28:40,360
yeah, so in the installation instructions for the workshop,

726
01:28:40,360 --> 01:28:44,640
it was written how it was discussed how to set up a conda

727
01:28:44,640 --> 01:28:47,620
environment. It's, it's a couple of commands, but you need to

728
01:28:47,620 --> 01:28:52,280
have conda or like the conda package manager installed on

729
01:28:52,280 --> 01:28:59,860
your system, at least. Okay. So the cool thing is actually that

730
01:29:00,420 --> 01:29:05,340
with this setup, if you if you're not ready, now we can

731
01:29:05,340 --> 01:29:11,340
still watch the stream later after you have set up

732
01:29:11,340 --> 01:29:14,040
conda if you haven't done that. But let's assume you have done

733
01:29:14,040 --> 01:29:18,120
that. Then you can follow what we are doing now. So what I'm

734
01:29:18,120 --> 01:29:23,760
going to do now is to show you how to use Sphinx. Sphinx is one

735
01:29:23,760 --> 01:29:26,580
of the documentation generators that we have discussed before.

736
01:29:26,580 --> 01:29:37,380
okay it takes markdown files structure text files and then generates

737
01:29:38,980 --> 01:29:43,860
different kinds of documentation out of it we are going to focus today on the html

738
01:29:43,860 --> 01:29:49,940
kind of generation of the web pages kind of output because it's the thing that we can publish on the

739
01:29:49,940 --> 01:29:59,860
web you see that most easily um yeah so um sphinx is a python package which is actually present in

740
01:29:59,860 --> 01:30:08,740
the conda environment for code refinery so i'm going to activate the the environment of code

741
01:30:13,860 --> 01:30:17,540
yep now it's up it's active you can see that my

742
01:30:19,940 --> 01:30:22,960
I didn't want to do this.

743
01:30:22,960 --> 01:30:26,120
You can see that my prompt has changed and now

744
01:30:26,120 --> 01:30:29,520
the environment which was previously the base one,

745
01:30:29,520 --> 01:30:33,260
it's now switched to code refinery.

746
01:30:33,260 --> 01:30:39,120
Just to check, what kind of version do I have here of Python?

747
01:30:39,120 --> 01:30:43,140
Now I have 3.12.9, it's correct.

748
01:30:43,140 --> 01:30:44,820
For you, it could be slightly different,

749
01:30:44,820 --> 01:30:49,620
but it's still fine as long as it's like 3.11, 3.9.

750
01:30:49,620 --> 01:30:51,540
I think up to 3.9 should be okay.

751
01:30:52,140 --> 01:30:52,280
Okay.

752
01:30:52,980 --> 01:30:55,760
One thing we need is Sphinx build.

753
01:30:57,660 --> 01:30:58,140
Build.

754
01:30:58,720 --> 01:30:58,940
Okay.

755
01:30:59,460 --> 01:31:00,900
And let's check the version.

756
01:31:00,900 --> 01:31:03,640
The version I have is 7.2.6.

757
01:31:03,780 --> 01:31:04,160
It's okay.

758
01:31:04,840 --> 01:31:07,620
At least this command has run without errors.

759
01:31:08,460 --> 01:31:12,620
And the other thing we want to use is the quick start tool.

760
01:31:14,440 --> 01:31:15,640
Sphinx quick.

761
01:31:17,220 --> 01:31:17,460
Okay.

762
01:31:18,100 --> 01:31:27,380
and let's check the version yeah so similar to the previous one and we also want to check um

763
01:31:27,380 --> 01:31:35,860
if the parser we're going to use uh so it's it's if we can use the so-called um my sd so the

764
01:31:35,860 --> 01:31:40,980
markedly structured text parser so because that's the this format we want to use to write our

765
01:31:40,980 --> 01:31:47,940
documentation okay and in order to check that you can use python minus c so if you use python minus

766
01:31:47,940 --> 01:31:55,140
c it's um it's it's going to execute the problem that follows in in the double quotes in this case

767
01:31:55,140 --> 01:32:05,220
import import uh mysd rsr okay it's a the shortest python program ever just one line which imports

768
01:32:05,220 --> 01:32:13,620
this and if there's no errors it's fine so and i have no errors okay so like yeah yes 15 years so

769
01:32:14,580 --> 01:32:24,260
um if you want it um you're very much encouraged to type along with [name] but if you for some

770
01:32:24,260 --> 01:32:28,100
reason do not have the content environment available then you could also just i mean

771
01:32:28,100 --> 01:32:35,940
relax and listen in yeah i will try to be entertaining and funny um so that at least

772
01:32:35,940 --> 01:32:43,640
you won't follow you won't fall asleep um yeah at least try to keep up the discussion is last

773
01:32:43,640 --> 01:32:51,820
um as we did in the last uh in the previous part in the first part so now we have verified the

774
01:32:51,820 --> 01:33:00,780
it up okay and we can start hacking at our documentation so i will create a directory

775
01:33:03,740 --> 01:33:13,180
and seed into it doc example okay and now i can do sphinx quick start so

776
01:33:13,180 --> 01:33:22,420
So quick start, and this command now will ask me a couple of questions.

777
01:33:22,420 --> 01:33:31,420
So here it will ask me if I want to separate source and build directory, I will go for

778
01:33:31,420 --> 01:33:33,100
the default answers.

779
01:33:33,100 --> 01:33:42,120
So yes, project name, I will say test documentation.

780
01:33:42,120 --> 01:33:50,120
Okay, so you choose no, so you will have them in the same directories?

781
01:33:50,120 --> 01:33:56,120
Yeah, at the moment should be okay, which was the recommended thing.

782
01:33:56,120 --> 01:33:59,120
Yeah, yeah, no, no, it's perfectly fine.

783
01:33:59,120 --> 01:34:03,120
And yeah, so actually I don't have a lot of experience with Sphinx.

784
01:34:03,120 --> 01:34:05,120
I have some, but I know that [name] has more.

785
01:34:05,120 --> 01:34:11,120
So I think that [name] may correct me if I'm doing something wrong, please do.

786
01:34:11,120 --> 01:34:18,320
approach release 0.1 it's a okay and then the project language is english let's try that even

787
01:34:18,320 --> 01:34:27,520
if it's not my uh my native language so now you can look at um yeah at the content of the

788
01:34:28,640 --> 01:34:35,520
let's clear here shall i clear should i clear maybe i don't have to uh you can see what how

789
01:34:35,520 --> 01:34:39,840
what has been created you you remember that this was actually an empty directory

790
01:34:41,120 --> 01:34:46,940
And now Sphinx Quickstart has created all this stuff for me, okay?

791
01:34:47,440 --> 01:34:51,640
And there's some things we could talk about,

792
01:34:51,700 --> 01:34:59,480
but the most important are actually this, like, I think this is this index.rst, okay?

793
01:34:59,780 --> 01:35:03,560
Rst is the extension that stands for restructured text.

794
01:35:03,900 --> 01:35:05,660
So let's have a look at it.

795
01:35:06,600 --> 01:35:10,540
In order to look at it, I will use Vim, okay?

796
01:35:10,540 --> 01:35:17,620
So, if you don't know how to exit Vim, ask in the notes and if you get dropped.

797
01:35:17,980 --> 01:35:19,740
But maybe you can use anything else.

798
01:35:20,500 --> 01:35:23,080
I use Vim because I'm comfortable with it.

799
01:35:23,460 --> 01:35:26,040
But you can use Nano, for example, or Cat.

800
01:35:27,300 --> 01:35:29,580
Cat is not an editor, but you can still see.

801
01:35:30,020 --> 01:35:32,380
So, what does it say here?

802
01:35:33,760 --> 01:35:40,520
Well, it says, yeah, it gives us like a comment at the beginning.

803
01:35:40,540 --> 01:35:42,240
This is not going to be printed out.

804
01:35:43,340 --> 01:35:45,260
Then there's a heading.

805
01:35:45,720 --> 01:35:56,800
Then actually this is a directive in restarted text that tells the Sphinx

806
01:35:56,800 --> 01:36:02,200
to create a table of content there, TOC, table of content.

807
01:36:03,000 --> 01:36:11,560
and uh yeah so what we actually want to do now okay is to remove for the moment this indices

808
01:36:11,560 --> 01:36:17,080
and table section because we don't care about that okay um thank you very much swings quick

809
01:36:17,080 --> 01:36:29,320
start but we don't need that um so how do we add content to our um to our documentation well

810
01:36:29,320 --> 01:36:33,160
we need to here add file names

811
01:36:36,120 --> 01:36:43,240
in this case so i'm going to to create a file uh so here i mentioned a file name i need to create

812
01:36:43,240 --> 01:36:49,000
a file with the that name in my home directory to make sure that you know in my home there in

813
01:36:49,000 --> 01:36:58,840
the directory of the the project uh and as things will look at it and will render it okay so uh yeah

814
01:36:59,320 --> 01:37:04,200
So we will go to this.

815
01:37:04,400 --> 01:37:06,240
There's one comment I want to do.

816
01:37:06,720 --> 01:37:10,380
As you may be familiar with, if you're using Python,

817
01:37:12,280 --> 01:37:16,920
you know that in Python, white space is important,

818
01:37:17,020 --> 01:37:18,900
so that the indentation level is important.

819
01:37:19,080 --> 01:37:21,280
Here, the indentation level is important as well.

820
01:37:22,980 --> 01:37:26,760
So in this case, I need to make sure that some feature.md

821
01:37:26,760 --> 01:37:32,060
is at the same indentation level as this other block.

822
01:37:32,740 --> 01:37:37,920
So now I can save it, but I need to still do one thing.

823
01:37:37,920 --> 01:37:43,260
So in order for Sphinx to be able to parse this kind of markdown files,

824
01:37:43,700 --> 01:37:47,480
I need to edit the configuration of it.

825
01:37:48,000 --> 01:37:53,080
So I open conf.py.

826
01:37:53,480 --> 01:37:55,380
Conf.py is Python.

827
01:37:55,380 --> 01:38:04,460
It's a Python code that tells, it's a file made up of Python code that tells Sphinx how to configure itself.

828
01:38:04,900 --> 01:38:06,600
So the syntax here is Python.

829
01:38:07,060 --> 01:38:18,400
And here, what I'm going to do is to add my st, my st underscore parser to the list of extensions.

830
01:38:18,880 --> 01:38:20,760
And then I can save and exit.

831
01:38:21,640 --> 01:38:30,040
okay and now i need to uh add uh some this some feature dot md file

832
01:38:34,440 --> 01:38:42,600
and um for the in the interest of time i will uh copy uh and paste it here

833
01:38:43,480 --> 01:38:49,560
the con the content which we should have you can see there are some some markdown features we are

834
01:38:49,560 --> 01:38:55,720
using so we are um have it we have a level one heading then we have a subsection which is level

835
01:38:55,720 --> 01:39:04,920
two heading then we have some items in lists and we have nested items and that's nested lists right

836
01:39:05,800 --> 01:39:10,120
and you see that actually we have these empty surrounding lines which are required i don't

837
01:39:10,120 --> 01:39:16,840
know if it is a thing which is needed also for markdown i think it's also not just the this

838
01:39:16,840 --> 01:39:23,880
this particular flavor of Markdown, but also generally Markdown, you may need

839
01:39:25,880 --> 01:39:31,560
these empty sounding lines around. I'm not sure, do you know?

840
01:39:32,360 --> 01:39:38,600
I don't know all of this by heart, but it's very important to be aware of this, that both, I mean,

841
01:39:38,600 --> 01:39:46,680
like as in general in Python, that I mean spacing as tabulated spacing are important, and then also

842
01:39:46,680 --> 01:39:57,560
here for the generation of the html contents that spacing matters sometimes yeah so horizontal

843
01:39:57,560 --> 01:40:04,040
spacing here that this you can see the yeah the indentation but also vertical spacing let's say

844
01:40:04,600 --> 01:40:10,760
yeah so that that's very common error if the rendered contents do not display properly

845
01:40:10,760 --> 01:40:17,400
spacing is one of the first things to check yeah so i'll save that and then let's have a look

846
01:40:18,600 --> 01:40:24,920
at what we have in the repository you should see let's say ls minus one so that we see everything

847
01:40:24,920 --> 01:40:32,040
in a in a in a column and yeah okay so if it looks like this in your directory then it should be fine

848
01:40:32,040 --> 01:40:43,400
okay and uh yeah so now how do we build uh the documentation um let's do this uh sphinx

849
01:40:44,840 --> 01:40:50,440
build dot meaning the current directory so we want to build the commutation which is in the

850
01:40:50,440 --> 01:40:56,920
current directory and um we wanted the the the produced documentation the the render

851
01:40:56,920 --> 01:41:04,280
documentation to be in the underscore build directory common uh common choice so if i now

852
01:41:04,280 --> 01:41:11,080
run this command with enter uh you see that it uh tells me okay so the html pages are in build

853
01:41:11,080 --> 01:41:23,160
everything looks green uh no errors okay good so now if we look at um um build uh we see that

854
01:41:23,160 --> 01:41:28,920
there's some stuff there the most important thing in the generated documentation is this index.html

855
01:41:28,920 --> 01:41:36,280
okay this index.html is the like the rendered version of index.rst

856
01:41:37,880 --> 01:41:43,880
yeah so we have we can have a look at how it looks like right so let's do now open

857
01:41:44,760 --> 01:41:56,680
i mean in i'm on a linux machine on ubuntu so i can use open build index index index.html

858
01:41:56,680 --> 01:42:03,960
now we have many windows open many browser windows open so where will this go

859
01:42:03,960 --> 01:42:14,040
So these HTML files that you render now, these are a set of static HTML files. That means

860
01:42:14,040 --> 01:42:21,560
for previewing locally on your machine, you can simply just open them in a web browser.

861
01:42:21,560 --> 01:42:29,080
It didn't work for me. Let's try again. Okay. It doesn't like it. Wait, it's interesting.

862
01:42:29,080 --> 01:42:33,180
so I'll go to a browser and show you

863
01:42:33,180 --> 01:42:35,620
so this is notes but if I do in file

864
01:42:35,620 --> 01:42:40,460
I don't understand why it can't work

865
01:42:40,460 --> 01:42:44,720
let me see

866
01:42:44,720 --> 01:42:47,260
I

867
01:42:59,080 --> 01:43:07,520
so wait a moment so i mean having the static html files is

868
01:43:07,520 --> 01:43:13,500
they are rather smooth to work with because you do not need a web

869
01:43:13,500 --> 01:43:20,120
server to to host them so i need to do some magic sorry

870
01:43:20,120 --> 01:43:32,900
I need to do because now the problem is that I'm using a training so that there's some things

871
01:43:32,900 --> 01:43:38,480
possibly I shouldn't tell you I shouldn't have I don't have to tell you so if [name] can host

872
01:43:38,480 --> 01:43:44,140
the show for the next 30 seconds I may actually fix this and show you finally how our Sphinx

873
01:43:44,140 --> 01:43:53,700
documentation looks like. Yes, so I'm looking now here on the shared document

874
01:43:53,700 --> 01:44:01,640
and there's a question here. So why do you name the directory with a leading

875
01:44:01,640 --> 01:44:10,180
underscore build with a dash? Someone has answered here. So it's a convention.

876
01:44:10,180 --> 01:44:18,260
and so it's not something that is required for any syntaxic reason or so but it is a convention

877
01:44:22,100 --> 01:44:32,580
so when [name] used this swings start command to initiate this swings document

878
01:44:35,380 --> 01:44:37,780
there was this question here about

879
01:44:40,180 --> 01:44:44,180
Let me just go to it myself.

880
01:44:59,180 --> 01:45:05,180
Yeah, the question about separating source and build directories where

881
01:45:05,180 --> 01:45:16,780
and is the default and so one thing within general is good if you are working with

882
01:45:16,780 --> 01:45:22,300
rendered content from some set of source files indeed right now we're talking about

883
01:45:22,300 --> 01:45:29,480
strings document but it could also be let's say doc cdn rendered contents is this that typically

884
01:45:29,480 --> 01:45:33,740
what you do want is to have

885
01:45:33,740 --> 01:45:37,100
the source contents in the git repository

886
01:45:37,100 --> 01:45:41,540
but you typically would like to avoid

887
01:45:41,540 --> 01:45:45,700
to add and commit the rendered

888
01:45:45,700 --> 01:45:49,680
contents to the git repository and that

889
01:45:49,680 --> 01:45:53,640
that's rather natural in a way because otherwise you have a bit of redundancy of

890
01:45:53,640 --> 01:45:57,460
having both source and rendered contents

891
01:45:57,460 --> 01:46:06,340
which after all contain the same contents just it's in raw form or in so to say readable form

892
01:46:10,180 --> 01:46:15,220
and this in particular is important in case you are including

893
01:46:17,460 --> 01:46:25,620
figures in your document and if you have let's say in figures that you pull in from outside of your

894
01:46:25,620 --> 01:46:32,900
core repository i mean you do not want to do that in the repository i can show you now i think

895
01:46:34,340 --> 01:46:42,420
wait a moment i have managed to find a workaround yeah so that's how our first

896
01:46:42,420 --> 01:46:47,300
um our first documentation project looks like um yeah so

897
01:46:47,300 --> 01:46:52,660
So you can see that this is the index, yeah?

898
01:46:52,860 --> 01:46:54,080
So we have some feature.

899
01:46:54,900 --> 01:47:02,260
This some feature is actually the, let's look at index.rsc.

900
01:47:02,260 --> 01:47:07,620
So this is what comes out of this file, somefeatures.md.

901
01:47:07,820 --> 01:47:14,900
Then if I open somefeature.md, you see that I have this heading and subsection.

902
01:47:14,900 --> 01:47:22,400
and these two things these two headings match what I have here and if I click on some feature then I

903
01:47:23,660 --> 01:47:29,960
I show here I I see here something familiar that looks a bit like a rendering of what I

904
01:47:29,960 --> 01:47:37,640
have here okay this is plain text and this instead HTML right yeah if you go over with the mouse here

905
01:47:37,640 --> 01:47:47,420
in the document what happens then do you see some links yeah so yeah here yeah you have some feature

906
01:47:47,420 --> 01:47:53,780
and then you have subsection right yeah so you have you know when you're at subsection if you

907
01:47:53,780 --> 01:48:03,980
right click here yeah yeah link to this heading uh you can you can copy the link yeah so that's

908
01:48:03,980 --> 01:48:11,420
extremely useful feature that you get for free with uh swing stocks so you get like the the

909
01:48:11,420 --> 01:48:17,340
direct the direct links to individual sections and paragraphs are available

910
01:48:18,940 --> 01:48:25,820
which are typically the page the web page itself plus this hash and then a little something which

911
01:48:25,820 --> 01:48:31,900
follows the hash which is uh typically the subheading the the like the the link in the

912
01:48:31,900 --> 01:48:41,500
page so to say yeah yeah the section yeah yeah okay so uh shall we continue with the

913
01:48:42,380 --> 01:48:52,860
yeah so um now there's uh actually an interesting uh list of things you can add to the uh to your

914
01:48:52,860 --> 01:49:01,660
um uh i'll actually show the because there's a lot of things you can do right so uh for example

915
01:49:01,660 --> 01:49:10,260
we can have additional kind of levels of heading.

916
01:49:10,860 --> 01:49:15,600
You can go up to level four, I think, which is a lot.

917
01:49:15,720 --> 01:49:21,000
I think you should just try to stay as like level one, level two, or level three.

918
01:49:21,360 --> 01:49:24,120
If you want, you can get to level four of nested headings.

919
01:49:24,120 --> 01:49:28,760
You can also have links, as we mentioned before.

920
01:49:28,760 --> 01:49:38,260
like and the the links are written like this so if you need to type here like

921
01:49:38,260 --> 01:49:45,560
the text that you want to be shown and then and then in instead in the round

922
01:49:45,560 --> 01:49:53,800
brackets you type the the proper link the proper address yeah URL you want to

923
01:49:53,800 --> 01:50:02,680
connect uh so for example in this case you will see um a link where the text is a link and then

924
01:50:02,680 --> 01:50:11,160
it will link to this to this website okay um you can also have images um i don't have an image to

925
01:50:11,160 --> 01:50:19,320
show you at the moment but um so here for example i can show you how to do this so it works in a

926
01:50:19,320 --> 01:50:27,320
similar way you have um square brackets there you need to type an alt text and which is like

927
01:50:27,320 --> 01:50:34,040
the text which will be shown if the image is not available so um and then you have like the

928
01:50:34,040 --> 01:50:40,520
the link to where to to the image file yeah you can also have things like numbered lists

929
01:50:40,520 --> 01:50:45,540
and numbered lists are

930
01:50:45,540 --> 01:50:50,600
they start with a number, so the items on the list

931
01:50:50,600 --> 01:50:54,360
start with a number, item 1 is item 1

932
01:50:54,360 --> 01:50:58,580
item 2 is item 2, but actually

933
01:50:58,580 --> 01:51:02,500
this is a funny feature of Markdown, that actually

934
01:51:02,500 --> 01:51:05,260
if you start going on with one dot

935
01:51:05,260 --> 01:51:09,740
these items will be actually

936
01:51:09,740 --> 01:51:12,840
renumbered for you. Item 3

937
01:51:12,840 --> 01:51:17,320
and item 4. And so I think you understood

938
01:51:17,320 --> 01:51:21,340
what I mean here. And you can have simple tables

939
01:51:21,340 --> 01:51:24,820
and so you can

940
01:51:24,820 --> 01:51:29,720
have

941
01:51:29,720 --> 01:51:33,340
simple tables written like this. Let's

942
01:51:33,340 --> 01:51:35,460
make a bit of

943
01:51:35,460 --> 01:51:37,840
like that.

944
01:51:39,420 --> 01:51:41,500
It's important to get this heading

945
01:51:41,500 --> 01:51:43,740
right, I think, and then

946
01:51:43,740 --> 01:51:45,180
you can say,

947
01:51:45,480 --> 01:51:47,040
let's have a little thing here.

948
01:51:47,500 --> 01:51:49,580
So, have a

949
01:51:49,580 --> 01:51:51,620
little table that tells if a number is

950
01:51:51,620 --> 01:51:52,360
prime or not.

951
01:51:53,040 --> 01:51:54,300
One is not prime,

952
01:51:55,480 --> 01:51:57,600
and then, I mean, I think

953
01:51:57,600 --> 01:51:59,580
it's debatable, right? But then

954
01:51:59,580 --> 01:52:00,420
you can have

955
01:52:00,420 --> 01:52:02,960
two is actually prime,

956
01:52:03,340 --> 01:52:11,180
So let's, yes, and then also three is prime, and so on.

957
01:52:11,560 --> 01:52:14,800
And most importantly, now come to code blocks.

958
01:52:15,740 --> 01:52:24,320
So the following is a Python code block.

959
01:52:24,580 --> 01:52:26,200
And then how do you do that?

960
01:52:26,460 --> 01:52:31,580
So you start with three backticks, then you type the programming language you want to use,

961
01:52:31,580 --> 01:52:37,340
in this case python and then you can say dev hello and then

962
01:52:37,340 --> 01:52:47,400
and then you can go like that and then when you are done with writing your

963
01:52:47,400 --> 01:52:52,940
code block you can add another three ticks and yeah you can do the same with c

964
01:52:52,940 --> 01:52:59,400
you can also include files i mean in the in the in the notes it's written the notes in the

965
01:53:00,280 --> 01:53:06,440
in the material and uh yeah it's written how to add actually literally file from somewhere else

966
01:53:07,160 --> 01:53:12,680
and you can also use jupiter notebooks actually so um you can have a file of the jupiter notebook

967
01:53:12,680 --> 01:53:21,800
and you can include it in in your documentation if you need um so uh yeah so um so what happens

968
01:53:21,800 --> 01:53:26,920
here i mean when you label it here with python or you label it with c is that i mean you would

969
01:53:26,920 --> 01:53:35,720
then have this nice i mean syntax highlighting in the rendered html yeah and one thing it's

970
01:53:35,720 --> 01:53:43,080
quite important for audio audience i think is that you can have equations yeah yeah so for example

971
01:53:43,080 --> 01:53:50,680
you can have an um math so here it's a bit different you have this uh uh these braces

972
01:53:50,680 --> 01:53:59,480
here but you can have something like a squared plus b squared equal c squared okay you can have

973
01:53:59,480 --> 01:54:05,280
much more complicated things like that you can also have uh wait a moment um yeah you can also

974
01:54:05,280 --> 01:54:10,800
have that in line uh yeah so there's a lot of things you can do with it and i think everything

975
01:54:10,800 --> 01:54:18,420
which is reasonable uh reasonable i think um is quite it's covered by sphinx so let's see how it

976
01:54:18,420 --> 01:54:26,880
looks like. So if I do things, build, I will build again. So

977
01:54:26,880 --> 01:54:29,660
yeah, it tells me, for example, that this image file that I have

978
01:54:29,660 --> 01:54:33,240
added didn't, it was not found. But let's see how it looks like.

979
01:54:33,360 --> 01:54:35,160
I need to do a little trick again.

980
01:54:39,000 --> 01:54:43,920
Yeah. So in the meanwhile, I commented about equations. So

981
01:54:43,920 --> 01:54:52,320
this can be written in LaTeX format and that's quite useful because if you for instance have

982
01:54:52,320 --> 01:55:00,900
some old documents which are written in as LaTeX documents then you can migrate over directly the

983
01:55:00,900 --> 01:55:06,540
equations and then you put it put them here into to the Sphinx document and then they will be

984
01:55:06,540 --> 01:55:11,540
I mean, not the postscript file, but it will be rendered to HTML.

985
01:55:11,540 --> 01:55:15,540
This is LaTeX.

986
01:55:15,540 --> 01:55:17,540
Yeah. And yeah.

987
01:55:17,540 --> 01:55:22,540
So I build it, then go back to my browser.

988
01:55:22,540 --> 01:55:24,540
I think, oh, but this doesn't show. Why?

989
01:55:24,540 --> 01:55:28,540
Because I need to press F5.

990
01:55:28,540 --> 01:55:30,540
It didn't show it.

991
01:55:30,540 --> 01:55:33,540
Ah, yeah, because I need to do another little step before,

992
01:55:33,540 --> 01:55:34,880
which you don't have to do.

993
01:55:35,060 --> 01:55:38,520
But if I do F5 now, this latex will appear.

994
01:55:40,800 --> 01:55:45,040
Okay, so I think...

995
01:55:45,040 --> 01:55:51,660
So I'm curious, so what happens if you have some syntactic error in the file?

996
01:55:52,300 --> 01:55:57,980
I mean, if you, by mistake, if you change from no to yes in the table,

997
01:55:57,980 --> 01:56:00,140
but you then get it, let's say,

998
01:56:02,080 --> 01:56:05,520
so that the alignment of the vertical bars is incorrect.

999
01:56:05,520 --> 01:56:06,220
What happens then?

1000
01:56:06,520 --> 01:56:08,980
So if I do something like this, let's break this down.

1001
01:56:08,980 --> 01:56:10,540
Yeah, you break it and then you're sure.

1002
01:56:11,800 --> 01:56:13,200
Let's see what happens.

1003
01:56:13,380 --> 01:56:14,360
Will it work anyway?

1004
01:56:15,460 --> 01:56:20,620
So I got no additional wordings, so maybe it worked.

1005
01:56:21,140 --> 01:56:25,000
Let's look now at the rendered version here.

1006
01:56:25,000 --> 01:56:29,740
So, yeah, it worked.

1007
01:56:29,880 --> 01:56:30,880
Okay, interesting.

1008
01:56:32,120 --> 01:56:33,860
Then it was tolerated here.

1009
01:56:34,160 --> 01:56:37,720
This was in Markdown, okay.

1010
01:56:38,380 --> 01:56:38,620
Yeah, yeah.

1011
01:56:39,100 --> 01:56:39,600
Yeah, okay.

1012
01:56:39,980 --> 01:56:43,940
Then, well, with RST, I think it would not have worked.

1013
01:56:44,620 --> 01:56:47,360
I don't...

1014
01:56:47,360 --> 01:56:48,380
But you would then...

1015
01:56:48,380 --> 01:56:49,800
The point I wanted to make is this,

1016
01:56:49,920 --> 01:56:54,060
that this swing stocks is rather user-friendly,

1017
01:56:54,060 --> 01:57:00,860
So if you break things, you sort of get like a warning message or you get like an error message.

1018
01:57:02,400 --> 01:57:09,160
And one thing I wanted to show you to attract your attention to is I said that the number list will be numbered automatically.

1019
01:57:09,360 --> 01:57:17,960
Even if I wrote 1.2.2 dot, 1 dot, et cetera, it will show as 1, 2, 3, 4 instead.

1020
01:57:18,700 --> 01:57:22,740
OK, so, yeah, it does. Yeah, there are some convenience features.

1021
01:57:22,740 --> 01:57:27,860
also this you don't have to align your tables perfectly because they will be rendered instead

1022
01:57:27,860 --> 01:57:37,220
by your browser in in a correct way uh yes there are some um some yeah it it's it's it's nice you

1023
01:57:37,220 --> 01:57:42,580
don't have to be really so a lot a lot of so as things understand what you want to do in some

1024
01:57:42,580 --> 01:57:50,100
cases and will will do it for you right so another thing i want to possibly just show because i'm not

1025
01:57:50,100 --> 01:57:57,380
sure if we have time is that um but i think it would be nice to show this right uh auto generating

1026
01:57:57,380 --> 01:58:03,060
documentation from python dot strings right i think maybe i can i can show you briefly how to

1027
01:58:03,060 --> 01:58:13,700
do this so let's say we have a multiply dot pi uh file which is which contains some some python code

1028
01:58:13,700 --> 01:58:24,740
which i will now paste here okay and save okay so if i now uh want um to add

1029
01:58:26,580 --> 01:58:33,380
the this uh this function to my documentation uh how can we do that um well

1030
01:58:34,500 --> 01:58:40,900
i need to do some steps first so i need to change my configuration uh and i need to make it so that

1031
01:58:40,900 --> 01:58:49,780
the among the extensions i also mentioned a thing called auto doc auto doc two okay so this is uh

1032
01:58:49,780 --> 01:58:53,940
it was essential to auto generate documentation and in addition to that i also need to say

1033
01:58:56,420 --> 01:58:59,060
doc two packages wait a moment

1034
01:59:01,540 --> 01:59:09,060
and then i can say um yeah the file that i want to to process with autodoc

1035
01:59:10,900 --> 01:59:14,220
multiply.py, okay?

1036
01:59:14,780 --> 01:59:17,020
Yeah, because I want to tell Autodoc,

1037
01:59:17,140 --> 01:59:18,440
hey, please, Autodoc,

1038
01:59:18,800 --> 01:59:22,080
parse this multiply.py file, okay?

1039
01:59:22,480 --> 01:59:24,980
And then this is the first thing I need to change.

1040
01:59:25,060 --> 01:59:27,640
Then I need to change index.rst

1041
01:59:27,640 --> 01:59:29,480
because I want to,

1042
01:59:30,100 --> 01:59:30,900
things to say, okay,

1043
01:59:30,980 --> 01:59:32,360
so now after some features,

1044
01:59:32,740 --> 01:59:33,680
some feature.md,

1045
01:59:34,480 --> 01:59:36,740
I would like you to add

1046
01:59:36,740 --> 01:59:40,800
call, like the API documentation.

1047
01:59:40,900 --> 01:59:44,940
So apdoc index.

1048
01:59:44,940 --> 01:59:49,940
So basically, this autodoc will create a file directory

1049
01:59:50,420 --> 01:59:53,480
called apidox and there's going to be an index in it

1050
01:59:53,480 --> 01:59:56,680
and I want Sphinx to include it.

1051
01:59:56,680 --> 02:00:01,680
So now, if I do Sphinx build,

1052
02:00:04,760 --> 02:00:09,760
Sphinx build, yeah, wait, it doesn't like that.

1053
02:00:10,900 --> 02:00:20,820
sphinx build dot build okay do that okay so with this command sphinx build dot i rebuild

1054
02:00:20,820 --> 02:00:26,420
the documentation i need to do my little trick here and then i should be able to show you

1055
02:00:26,980 --> 02:00:34,500
again this so let's go to the to the main page yeah i click here and then you can see that

1056
02:00:34,500 --> 02:00:41,220
there's a new thing that's popped up which is the api reference okay and the api reference of

1057
02:00:41,220 --> 02:00:50,900
multiply and if i look into this multiply so then you see that i get something which looks

1058
02:00:50,900 --> 02:01:00,180
very similar to the doc string that i had here so which i will open now and yeah wait a moment so

1059
02:01:00,180 --> 02:01:08,560
yeah yeah multiply two numbers parameters a parameter b and return and that's what i see

1060
02:01:08,560 --> 02:01:15,000
here right so we have the parameters and returns and this is uh similar i mean yeah it's similar

1061
02:01:15,000 --> 02:01:21,080
to what you have in the numpy documentation for example okay which may be the fastest thing say

1062
02:01:21,080 --> 02:01:29,380
uses that is used to to uh to document a lot of python projects you were saying yeah so so it's

1063
02:01:29,380 --> 02:01:37,140
clear here that if you would like to render in the way that [name] did here, contents of this type,

1064
02:01:38,020 --> 02:01:44,580
I mean doing it, auto-generating it from the source code itself from a doc screen, I mean

1065
02:01:44,580 --> 02:01:51,860
that's really the way to do it because if you run, I mean if you edit this material a little bit

1066
02:01:51,860 --> 02:01:56,060
it out of sync with the source code.

1067
02:01:56,060 --> 02:01:59,640
Yeah, well, it typically would get out of sync.

1068
02:01:59,640 --> 02:02:04,640
So the take home message is to strive to have it

1069
02:02:06,300 --> 02:02:09,180
like integrated here with the source code itself.

1070
02:02:10,100 --> 02:02:13,460
Yeah, so that it would be easier for you to write it

1071
02:02:13,460 --> 02:02:15,620
and easier for your colleagues to write.

1072
02:02:15,620 --> 02:02:17,520
So yeah, write doc strings

1073
02:02:17,520 --> 02:02:21,860
and then there will be other documentation automatically

1074
02:02:21,860 --> 02:02:27,460
is something the docs can do for you for other languages and julia i mean a lot of languages

1075
02:02:27,460 --> 02:02:32,660
they have similar things so if you're not using python use another language i'm sure that there

1076
02:02:32,660 --> 02:02:40,180
is a packet that gives you this if this this um this uh capabilities feature so yeah indeed yeah

1077
02:02:40,180 --> 02:02:46,340
i think that maybe yeah maybe we also mentioned here in the in the in our uh notes in there in

1078
02:02:46,340 --> 02:02:57,220
the less lecture notes it is anyway um i think i would like to move now quickly to um to the next

1079
02:02:57,220 --> 02:03:01,780
bit unless we have some questions if there are questions we should always

1080
02:03:01,780 --> 02:03:08,980
uh spend a bit of time talking about those if there's anything specific

1081
02:03:08,980 --> 02:03:28,600
Okay. So one thing I want to talk about is this. I will open the material, the teaching

1082
02:03:28,600 --> 02:03:35,740
material here. So it goes with the Deploying Sphinx Documentation to GitHub Pages. So here

1083
02:03:35,740 --> 02:03:46,060
It's a quick exercise which I can show you directly on GitHub.

1084
02:03:46,060 --> 02:03:52,420
So you don't need to have followed what we've done before.

1085
02:03:52,420 --> 02:03:54,780
I can just go from here.

1086
02:03:54,780 --> 02:03:57,820
So we have a documentation example,

1087
02:03:57,820 --> 02:03:59,780
which is a project template on GitHub.

1088
02:03:59,780 --> 02:04:07,100
And we can use that to show how to publish things on using GitHub Pages.

1089
02:04:07,460 --> 02:04:16,920
GitHub Pages is a feature of GitHub that allows you to show the kind of websites that are composed, that Sphinx creates.

1090
02:04:16,920 --> 02:04:18,820
So static web pages.

1091
02:04:19,040 --> 02:04:26,180
Static web pages are pages which do not require the web server to actually do anything fancy.

1092
02:04:26,320 --> 02:04:29,180
They just require the web server to give them.

1093
02:04:29,180 --> 02:04:37,740
okay so to give it to the browser that that wants to to see them okay uh so how to do that there's

1094
02:04:37,740 --> 02:04:50,300
a documentation example uh repository i will uh click on the link uh so and uh i can do i like test

1095
02:04:51,100 --> 02:05:00,780
gh pages okay um create the repository and then what do i have here

1096
02:05:02,380 --> 02:05:14,380
the the yeah everything is being generated for me and uh yeah so i have some some content already so

1097
02:05:14,380 --> 02:05:21,860
So the thing I need to do, actually, here, is to add an action.

1098
02:05:22,860 --> 02:05:28,740
So GitHub has not just the pages feature, but there's a thing which is called actions,

1099
02:05:28,740 --> 02:05:35,020
which is a way to do a lot of things, actually, but in an automatic way.

1100
02:05:35,100 --> 02:05:42,000
So we can tell now GitHub to perform some operations on this repository.

1101
02:05:42,000 --> 02:05:45,620
so what we can do now is actually we don't have to

1102
02:05:45,620 --> 02:05:50,040
start to click here you can go to the code and then

1103
02:05:50,040 --> 02:05:53,660
I can create a file that is

1104
02:05:53,660 --> 02:05:58,040
that will contain the workflow

1105
02:05:58,040 --> 02:06:02,360
the actions that GitHub needs to perform in this repository

1106
02:06:02,360 --> 02:06:05,920
so these GitHub actions files are

1107
02:06:05,920 --> 02:06:07,660
contained in GitHub

1108
02:06:07,660 --> 02:06:10,060
then

1109
02:06:10,060 --> 02:06:12,360
workflows

1110
02:06:12,360 --> 02:06:16,020
this is the standard

1111
02:06:16,020 --> 02:06:18,840
path where GitHub is going to look for

1112
02:06:18,840 --> 02:06:20,680
when he

1113
02:06:20,680 --> 02:06:22,620
looks for actions and then the

1114
02:06:22,620 --> 02:06:24,780
name of the file would be

1115
02:06:24,780 --> 02:06:26,620
documentation.yaml

1116
02:06:27,460 --> 02:06:30,780
so this is

1117
02:06:30,780 --> 02:06:31,900
the file I want to create

1118
02:06:31,900 --> 02:06:34,680
and the content of the file will

1119
02:06:34,680 --> 02:06:36,200
be copied from

1120
02:06:36,200 --> 02:06:40,320
the material, oh wait, I need to copy

1121
02:06:40,320 --> 02:06:44,520
and paste, yeah, and

1122
02:06:44,520 --> 02:06:48,500
so, we are saying

1123
02:06:48,500 --> 02:06:52,560
I will just quickly comment on what are these things, so we are saying, okay, so

1124
02:06:52,560 --> 02:06:56,560
there's a workflow called documentation, which will be run when there's

1125
02:06:56,560 --> 02:07:00,460
when someone pushes to the repository, when there's a pull request, and

1126
02:07:00,460 --> 02:07:04,700
when someone wants to run this workflow manually

1127
02:07:04,700 --> 02:07:09,420
and this job, this

1128
02:07:09,420 --> 02:07:13,500
workflow is made out of jobs, a list of jobs, in this case there's only one

1129
02:07:13,500 --> 02:07:17,080
job called docs, which runs on a container

1130
02:07:17,080 --> 02:07:20,560
it needs a container to start, and the containers were mentioned yesterday

1131
02:07:20,560 --> 02:07:24,800
it's a container that is based on Ubuntu

1132
02:07:24,800 --> 02:07:29,180
and then there are some steps here, first

1133
02:07:29,180 --> 02:07:33,520
we are going to check out the repository, and to do so we are going to

1134
02:07:33,520 --> 02:07:37,200
use an action that has been written by someone else.

1135
02:07:37,200 --> 02:07:43,520
Then there's another action that is made to set up Python,

1136
02:07:43,520 --> 02:07:49,700
and this action has been written by someone else as well.

1137
02:07:49,700 --> 02:07:50,960
Then we had another step,

1138
02:07:50,960 --> 02:07:53,420
which is the installation of our dependencies.

1139
02:07:53,420 --> 02:07:57,480
We have our pip command here to store everything we need.

1140
02:07:57,480 --> 02:08:01,340
Then we have the build command to build everything,

1141
02:08:01,340 --> 02:08:08,800
the sphinx build command okay and then we have eventually our last action last our last step

1142
02:08:08,800 --> 02:08:17,360
which does some magic here which means um some trying to simplify uh take whatever we have

1143
02:08:17,360 --> 02:08:25,800
created in the underscore build directory and uh put it on a new branch called gh pages okay

1144
02:08:25,800 --> 02:08:28,280
and this gith pages is also an orphan branch

1145
02:08:28,280 --> 02:08:30,400
which means that it has no parent

1146
02:08:30,400 --> 02:08:31,640
and so on.

1147
02:08:32,040 --> 02:08:34,340
So I can commit the changes now

1148
02:08:34,340 --> 02:08:35,040
and say

1149
02:08:35,040 --> 02:08:37,380
create the commutation.yaml

1150
02:08:37,380 --> 02:08:40,000
I would never do this, I would never leave

1151
02:08:40,000 --> 02:08:42,540
the default commit message

1152
02:08:42,540 --> 02:08:44,320
but that's what we need to do here.

1153
02:08:46,320 --> 02:08:47,920
And now I have this

1154
02:08:47,920 --> 02:08:50,280
actions, this action defined

1155
02:08:50,280 --> 02:08:52,260
the next thing I need to do is

1156
02:08:52,260 --> 02:08:54,200
to enable

1157
02:08:54,200 --> 02:08:58,340
GitHub pages for this repository. So, how do I do that? I go

1158
02:08:58,340 --> 02:09:01,300
to the settings of the repository, go to pages,

1159
02:09:02,240 --> 02:09:06,080
and then I say, okay, deploy from a branch. That's okay.

1160
02:09:06,880 --> 02:09:10,500
Then I need to choose the branch. But first, I need to actually

1161
02:09:10,500 --> 02:09:14,240
I need the branch to be created. So, let's go to actions

1162
02:09:14,240 --> 02:09:18,040
first. Okay. I need to, okay, so create documentation on YML.

1163
02:09:18,220 --> 02:09:21,960
This has actually run. So, I should see

1164
02:09:21,960 --> 02:09:31,780
here and if i go to code i should see a gh page gh pages branch appearing okay then i can go back

1165
02:09:31,780 --> 02:09:39,340
to the settings and pages and then i should be able to select here gh pages which was not available

1166
02:09:39,340 --> 02:09:49,400
before so if i do that and save then if i go back to actions then a new workflow will restart which

1167
02:09:49,400 --> 02:09:53,500
will take what I have on the branch.ghpages, which is my

1168
02:09:53,500 --> 02:09:57,560
render documentation, and actually publish that on GitHub pages. And you see

1169
02:09:57,560 --> 02:09:58,680
that there's a new

1170
02:09:58,680 --> 02:10:05,320
workflow here that is happening. See, the build took five seconds,

1171
02:10:06,260 --> 02:10:08,780
build status took three seconds, and now it's deploying.

1172
02:10:11,060 --> 02:10:13,720
So, it doesn't take very long

1173
02:10:13,720 --> 02:10:16,560
technically. And we are almost out of time.

1174
02:10:16,560 --> 02:10:25,040
so but let me show you this okay so now i have some documentation which is an empty project

1175
02:10:25,040 --> 02:10:30,960
here and it's shown on our github pages so it's visible to everybody so if you go to this

1176
02:10:34,640 --> 02:10:40,400
if you go to this to this address on your on your browser you will see what i have just created yeah

1177
02:10:40,400 --> 02:10:48,080
Yeah, so this is really neat. And so, I mean, all of these steps that you showed here with this

1178
02:10:48,720 --> 02:10:54,880
YAML file and the actions, I mean, the things that you're activating on GitHub here,

1179
02:10:56,720 --> 02:11:00,240
these are things which are, so to say, living on GitHub.

1180
02:11:00,240 --> 02:11:04,800
They are corresponding things on GitLab and on Bitbucket and so forth.

1181
02:11:04,800 --> 02:11:11,720
uh and unfortunately the syntax is different actually on gitlab is much simpler uh and

1182
02:11:11,720 --> 02:11:18,520
there's also a uh guided procedure if you have a repository on gitlab but anyway uh yeah you get

1183
02:11:18,520 --> 02:11:24,040
the idea i guess i hope that the idea that the whole the hope here is that you get the idea that

1184
02:11:24,040 --> 02:11:29,840
you know you can yeah this platforms github and gitlab give you this opportunity to host static

1185
02:11:29,840 --> 02:11:33,500
websites, which you can generate with things or other projects

1186
02:11:33,540 --> 02:11:42,680
or other other or other tools. So shall we go to the notes and

1187
02:11:42,680 --> 02:11:45,740
see if there's anything we need to discuss or anything that we

1188
02:11:45,740 --> 02:11:52,440
can? Yeah, we have like three minutes for conversation.

1189
02:11:52,440 --> 02:12:01,680
there is okay starting with the last question here so are the limitations to being able to

1190
02:12:01,680 --> 02:12:09,160
use this with private repositories and i think you can't i think you cannot on github

1191
02:12:09,160 --> 02:12:16,500
uh not not for free not for free yeah but if you pay for it enterprise and so on then yes

1192
02:12:16,500 --> 02:12:18,880
if you are an academic user

1193
02:12:18,880 --> 02:12:20,760
do you qualify for

1194
02:12:20,760 --> 02:12:22,860
pro anyway so I guess it depends

1195
02:12:22,860 --> 02:12:24,240
if you register with an academic

1196
02:12:24,240 --> 02:12:26,860
it used to be that if you registered with an academic

1197
02:12:26,860 --> 02:12:28,900
email address then you would

1198
02:12:28,900 --> 02:12:30,340
be automatically

1199
02:12:30,340 --> 02:12:32,960
considering the pro

1200
02:12:32,960 --> 02:12:35,180
tier so you would be able to have that

1201
02:12:35,180 --> 02:12:38,960
yeah I'm not really up to

1202
02:12:38,960 --> 02:12:39,980
speed what was currently

1203
02:12:39,980 --> 02:12:42,700
the offering from github

1204
02:12:42,700 --> 02:12:44,840
but in general I mean you get

1205
02:12:44,840 --> 02:12:46,220
some of it a little bit

1206
02:12:46,220 --> 02:12:54,280
for free and and if you want more capacity you need to pay for it which is rather reasonable

1207
02:12:54,280 --> 02:13:00,240
and and that's something actually that we will come to tomorrow in the testing lesson because

1208
02:13:00,240 --> 02:13:05,500
the the rendering of this fengs document that [name]l has set up here to run on github

1209
02:13:05,500 --> 02:13:11,960
that that's rather lightweight this is sort of you only need a little bit of hardware on the

1210
02:13:11,960 --> 02:13:17,640
the server side here on GitHub to render the HTML and then also toast it.

1211
02:13:17,840 --> 02:13:24,160
When you come to things like testing and the so-called continuous development

1212
02:13:24,360 --> 02:13:30,480
workflows, where you might then run big tests,

1213
02:13:30,680 --> 02:13:35,280
then more hardware is booked for longer time.

1214
02:13:35,480 --> 02:13:37,880
And there you will also have this

1215
02:13:38,040 --> 02:13:40,920
situation where you get a little bit of capacity for free

1216
02:13:42,200 --> 02:13:47,080
but if you do want to do more heavy stuff you need to start pay for it monthly

1217
02:13:52,680 --> 02:13:58,360
there are ways out of this but uh yeah they can be a bit harder to to set up

1218
02:14:01,000 --> 02:14:04,360
but yeah it will be discussed tomorrow yeah yeah so

1219
02:14:07,880 --> 02:14:18,860
So now we showed it here on how to get it up on GitHub pages and you find in the lesson

1220
02:14:18,860 --> 02:14:25,480
material that you can do similar things then on GitLab and also on Bitbucket.

1221
02:14:25,480 --> 02:14:29,560
Yeah, I never used Bitbucket.

1222
02:14:29,560 --> 02:14:33,160
I have quite some experience with GitLab.

1223
02:14:33,160 --> 02:14:41,020
The only thing is that GitLab allows you to have private, let's say, pages,

1224
02:14:41,460 --> 02:14:45,820
but they need to be activated centrally.

1225
02:14:45,820 --> 02:14:51,980
So your GitLab instance may or may not have the pages feature activated.

1226
02:14:53,700 --> 02:14:55,980
So, yeah, some of the servers they have.

1227
02:14:56,220 --> 02:15:01,020
So GitLab.com for sure, but if your institution has their own GitLab server,

1228
02:15:01,020 --> 02:15:12,700
well you need to check if the page is available there. Yes indeed so many institutions do have

1229
02:15:12,700 --> 02:15:22,060
their own instances of GitHub or GitHub servers and then you can work with them within let's say

1230
02:15:22,940 --> 02:15:28,220
I mean within all of your organization and perhaps also with some partner organizations.

1231
02:15:31,020 --> 02:15:41,680
good good good um so now we are going to have a lunch break um and we'll be back

1232
02:15:41,680 --> 02:15:49,240
uh with uh with the i will be back with [name] talking about jupiter notebooks if you have

1233
02:15:49,240 --> 02:15:54,400
questions you can still ask uh in the in the notes in the collaborative document

1234
02:15:54,400 --> 02:15:57,380
but we'll try to answer them anyway.

1235
02:15:58,880 --> 02:16:02,020
And well, I mean, if you want to join

1236
02:16:02,020 --> 02:16:05,600
the bring your own code sessions in the future,

1237
02:16:06,080 --> 02:16:08,840
well, I think documentation is also something

1238
02:16:08,840 --> 02:16:09,940
that can be discussed there.

1239
02:16:11,020 --> 02:16:13,680
So with you personally, I'd say.

1240
02:16:14,900 --> 02:16:15,420
Yeah.

1241
02:16:16,340 --> 02:16:18,320
So what can I say?

1242
02:16:19,420 --> 02:16:21,080
Yeah, yeah, good.

1243
02:16:21,080 --> 02:16:23,520
So thank you, [name], and bye, everyone.

1244
02:16:24,400 --> 02:16:26,540
Thank you.

1245
02:16:54,400 --> 02:16:55,020
you

1246
02:17:24,400 --> 02:17:25,020
you

1247
02:17:54,400 --> 02:17:55,020
you

1248
02:18:24,400 --> 02:18:25,020
you

1249
02:18:54,400 --> 02:18:55,020
you

1250
02:19:24,400 --> 02:19:25,020
you

1251
02:19:54,400 --> 02:19:55,020
you

1252
02:20:24,400 --> 02:20:25,020
you

1253
02:20:54,400 --> 02:20:55,020
you

1254
02:21:24,400 --> 02:21:25,020
you

1255
02:21:54,400 --> 02:21:55,020
you

1256
02:22:24,400 --> 02:22:25,020
you

1257
02:22:54,400 --> 02:22:55,020
you

1258
02:23:24,400 --> 02:23:25,020
you

1259
02:23:54,400 --> 02:23:55,020
you

1260
02:24:24,400 --> 02:24:25,020
you

1261
02:24:54,400 --> 02:24:55,020
you

1262
02:25:24,400 --> 02:25:25,020
you

1263
02:25:54,400 --> 02:25:55,020
you

1264
02:26:24,400 --> 02:26:25,020
you

1265
02:26:54,400 --> 02:26:55,020
you

1266
02:27:24,400 --> 02:27:25,020
you

1267
02:27:54,400 --> 02:27:55,020
you

1268
02:28:24,400 --> 02:28:25,020
you

1269
02:28:54,400 --> 02:28:55,020
you

1270
02:29:24,400 --> 02:29:25,020
you

1271
02:29:54,400 --> 02:29:55,020
you

1272
02:30:24,400 --> 02:30:25,020
you

1273
02:30:54,400 --> 02:30:55,020
you

1274
02:31:24,400 --> 02:31:25,020
you

1275
02:31:54,400 --> 02:31:55,020
you

1276
02:32:24,400 --> 02:32:25,020
you

1277
02:32:54,400 --> 02:32:55,020
you

1278
02:33:24,400 --> 02:33:25,020
you

1279
02:33:54,400 --> 02:33:55,020
you

1280
02:34:24,400 --> 02:34:25,020
you

1281
02:34:54,400 --> 02:34:55,020
you

1282
02:35:24,400 --> 02:35:25,020
you

1283
02:35:54,400 --> 02:35:55,020
you

1284
02:36:24,400 --> 02:36:25,020
you

1285
02:36:54,400 --> 02:36:55,020
you

1286
02:37:24,400 --> 02:37:25,020
you

1287
02:37:54,400 --> 02:37:55,020
you

1288
02:38:24,400 --> 02:38:25,020
you

1289
02:38:54,400 --> 02:38:55,020
you

1290
02:39:24,400 --> 02:39:25,020
you

1291
02:39:54,400 --> 02:39:55,020
you

1292
02:40:24,400 --> 02:40:25,020
you

1293
02:40:54,400 --> 02:40:55,020
you

1294
02:41:24,400 --> 02:41:25,020
you

1295
02:41:54,400 --> 02:41:55,020
you

1296
02:42:24,400 --> 02:42:25,020
you

1297
02:42:54,400 --> 02:42:55,020
you

1298
02:43:24,400 --> 02:43:25,020
you

1299
02:43:54,400 --> 02:43:55,020
you

1300
02:44:24,400 --> 02:44:25,020
you

1301
02:44:54,400 --> 02:44:55,020
you

1302
02:45:24,400 --> 02:45:25,020
you

1303
02:45:54,400 --> 02:45:55,020
you

1304
02:46:24,400 --> 02:46:25,020
you

1305
02:46:54,400 --> 02:46:55,020
you

1306
02:47:24,400 --> 02:47:25,020
you

1307
02:47:54,400 --> 02:47:55,020
you

1308
02:48:24,400 --> 02:48:25,020
you

1309
02:48:54,400 --> 02:48:55,020
you

1310
02:49:24,400 --> 02:49:25,020
you

1311
02:49:54,400 --> 02:49:55,020
you

1312
02:50:24,400 --> 02:50:25,020
you

1313
02:50:54,400 --> 02:50:55,020
you

1314
02:51:24,400 --> 02:51:25,020
you

1315
02:51:54,400 --> 02:51:55,020
you

1316
02:52:24,400 --> 02:52:25,020
you

1317
02:52:54,400 --> 02:52:55,020
you

1318
02:53:24,400 --> 02:53:25,020
you

1319
02:53:54,400 --> 02:53:55,020
you

1320
02:54:24,400 --> 02:54:25,020
you

1321
02:54:54,400 --> 02:54:55,020
you

1322
02:55:24,400 --> 02:55:25,020
you

1323
02:55:54,400 --> 02:55:55,020
you

1324
02:56:24,400 --> 02:56:25,020
you

1325
02:56:54,400 --> 02:56:55,020
you

1326
02:57:24,400 --> 02:57:25,020
you

1327
02:57:54,400 --> 02:57:55,020
you

1328
02:58:24,400 --> 02:58:25,020
you

1329
02:58:54,400 --> 02:58:55,020
you

1330
02:59:24,400 --> 02:59:25,020
you

1331
02:59:54,400 --> 02:59:55,020
you

1332
03:00:24,400 --> 03:00:25,020
you

1333
03:00:54,400 --> 03:00:55,020
you

1334
03:01:24,400 --> 03:01:25,020
you

1335
03:01:54,400 --> 03:01:55,020
you

1336
03:02:24,400 --> 03:02:25,020
you

1337
03:02:54,400 --> 03:02:55,020
you

1338
03:03:24,400 --> 03:03:25,020
you

1339
03:03:54,400 --> 03:03:55,020
you

1340
03:04:24,400 --> 03:04:25,020
you

1341
03:04:54,400 --> 03:04:55,020
you

1342
03:05:24,400 --> 03:05:25,020
you

1343
03:05:54,400 --> 03:05:55,020
you

1344
03:06:24,400 --> 03:06:25,020
you

1345
03:06:54,400 --> 03:06:55,020
you

1346
03:07:24,400 --> 03:07:25,020
you

1347
03:07:54,400 --> 03:07:55,020
you

1348
03:08:24,400 --> 03:08:25,020
you

1349
03:08:54,400 --> 03:08:55,020
you

1350
03:09:24,400 --> 03:09:25,020
you

1351
03:09:54,400 --> 03:09:55,020
you

1352
03:10:24,400 --> 03:10:25,020
you

1353
03:10:54,400 --> 03:10:55,020
you

1354
03:11:24,400 --> 03:11:25,020
you

1355
03:11:54,400 --> 03:11:55,020
you

1356
03:12:24,400 --> 03:12:25,020
you

1357
03:12:54,400 --> 03:12:55,020
you

1358
03:13:24,400 --> 03:13:25,020
you

1359
03:13:54,400 --> 03:13:55,020
you

1360
03:14:24,400 --> 03:14:25,020
you

1361
03:14:54,400 --> 03:14:55,020
you

1362
03:15:24,400 --> 03:15:25,020
you

1363
03:15:54,400 --> 03:15:55,020
you

1364
03:16:24,400 --> 03:16:49,700
One.

1365
03:16:49,700 --> 03:16:52,700
Hello.

1366
03:16:52,700 --> 03:16:55,120
So, welcome back.

1367
03:16:56,340 --> 03:16:57,180
Hello, [name].

1368
03:16:57,620 --> 03:16:57,880
Thanks.

1369
03:16:58,260 --> 03:16:58,980
Good afternoon.

1370
03:17:01,380 --> 03:17:07,220
So, I was here yesterday, so I guess I don't need to do much of an introduction.

1371
03:17:07,540 --> 03:17:10,180
I just go into Jupyter Notebooks.

1372
03:17:12,460 --> 03:17:14,040
And also, you were here in the morning.

1373
03:17:15,260 --> 03:17:15,560
Yeah.

1374
03:17:15,560 --> 03:17:22,840
If someone is just joining us now, hello, and let's get started.

1375
03:17:23,980 --> 03:17:26,920
So, what are we talking about?

1376
03:17:27,720 --> 03:17:35,520
We're talking about Jupyter Notebooks and, well, talk a bit about various things.

1377
03:17:35,760 --> 03:17:39,040
So, motivations for using Jupyter Notebooks.

1378
03:17:39,380 --> 03:17:44,240
Then we will discuss how to launch a notebook.

1379
03:17:44,240 --> 03:17:55,280
We'll look at the interface, some of the shortcuts, how to basically make your life easier, at

1380
03:17:55,280 --> 03:17:58,120
least when working with notebooks.

1381
03:17:58,120 --> 03:18:08,500
And we'll have a look at the first show here, a first computational notebook, so an example

1382
03:18:08,500 --> 03:18:09,500
of it.

1383
03:18:09,500 --> 03:18:11,460
Then we will have a break.

1384
03:18:11,460 --> 03:18:20,560
And then after that, [name] will talk to us, tell us about how to do version control with

1385
03:18:20,560 --> 03:18:24,120
notebooks, which is an important thing, I would say.

1386
03:18:24,120 --> 03:18:29,320
So it actually matches the content of the previous week, at least.

1387
03:18:29,320 --> 03:18:33,340
And then talking about how to share notebooks, right?

1388
03:18:33,340 --> 03:18:38,980
So this is also, the sharing notebooks is also a response to one of the questions that

1389
03:18:38,980 --> 03:18:39,980
came up yesterday.

1390
03:18:39,980 --> 03:18:45,360
What do you do when all of your code is in a notebook and it's not actually

1391
03:18:45,360 --> 03:18:46,860
runnable as a program in that way?

1392
03:18:48,540 --> 03:18:49,280
Well, let's see.

1393
03:18:49,440 --> 03:18:59,700
I think, yeah, so writing code in proper code, like in text files or in

1394
03:18:59,700 --> 03:19:03,820
notebooks, well, I mean, it's a thing that we're going to discuss now, I

1395
03:19:03,820 --> 03:19:04,160
would say.

1396
03:19:04,160 --> 03:19:09,940
So what are the motivations for using Jupyter, Jupyter Notebooks?

1397
03:19:10,680 --> 03:19:14,160
And Notebooks in general, there's not just Jupyter, but there's many other kinds.

1398
03:19:14,880 --> 03:19:23,800
I think that Jupyter was one of the first widely used implementation of this paradigm called literate programming,

1399
03:19:23,800 --> 03:19:34,020
where you mix code with text, with explanations in prose, let's say.

1400
03:19:34,160 --> 03:19:57,260
And, but not only, okay, so in the case of Jupyter Notebooks, I think they are used nowadays for like data science-y workflows, I would say, and where you need to, you have some code that produces some pictures, some plots.

1401
03:19:57,260 --> 03:20:00,620
So, you want to show the plots, you want to show the code that has produced the plots

1402
03:20:00,620 --> 03:20:09,500
for context, and you want also to add some context that you can write, maybe some shows,

1403
03:20:09,500 --> 03:20:10,500
some equations and so on.

1404
03:20:10,500 --> 03:20:18,320
So, in a sense, you are documenting your code in yet another way compared to what we saw

1405
03:20:18,320 --> 03:20:19,320
this morning.

1406
03:20:19,320 --> 03:20:20,320
Right?

1407
03:20:20,320 --> 03:20:21,320
Yeah.

1408
03:20:21,320 --> 03:20:24,960
So, it's like, instead of writing just code, you'd write a lot of documentation with a

1409
03:20:24,960 --> 03:20:25,960
code.

1410
03:20:25,960 --> 03:20:33,740
so um i mean so Jupyter is also notebooks in general is also a great way of documenting

1411
03:20:33,740 --> 03:20:40,780
a library so you can have your documentation written as notebooks and then you have

1412
03:20:40,780 --> 03:20:47,820
like examples of calls to your program that produce some result that then the user can just

1413
03:20:47,820 --> 03:20:54,220
go and modify and see what happens yeah yeah and i think that as we mentioned you can have Jupyter

1414
03:20:54,220 --> 03:21:03,020
notebooks in your documentation your web uh documentation and those notebooks are runnable

1415
03:21:03,020 --> 03:21:10,400
so you can even validate them so it's a you can have so it's a it's a way you can basically write

1416
03:21:10,400 --> 03:21:17,420
a tutorial make it make sure with jupiter make sure that it runs as it should and yeah so that's

1417
03:21:17,420 --> 03:21:21,800
a way you can have actually automated tested documentation so stay tuned for automated

1418
03:21:21,800 --> 03:21:27,880
testing for tomorrow uh but yeah so that's why i actually like jupiter notebooks that's what i

1419
03:21:27,880 --> 03:21:34,360
the promise that they have yeah and but in general um i think the important

1420
03:21:36,120 --> 03:21:42,280
more general uh i think more more general use of that is when you have like a

1421
03:21:43,160 --> 03:21:49,160
computational narrative that you want to show so yeah you do some data analysis let's say and you

1422
03:21:49,160 --> 03:21:55,640
want to show uh the results with the code and so on and yeah it's uh it's it's great for that

1423
03:21:55,640 --> 03:22:00,760
especially if you need to communicate with other people that may not exactly know the code uh or

1424
03:22:00,760 --> 03:22:06,040
know maybe not even know how to code but at least they can see the plot and and

1425
03:22:08,440 --> 03:22:17,080
yeah and and get insight with from that yeah so there are some there please please yeah so they

1426
03:22:17,080 --> 03:22:24,360
The two things below, I guess, are actually pretty much examples of something that's very useful.

1427
03:22:24,360 --> 03:22:34,740
You can essentially reproduce or recreate your paper with a notebook and include the code to produce the plots and all of that.

1428
03:22:34,860 --> 03:22:38,620
So I could tell the whole story by doing the math as you go.

1429
03:22:39,920 --> 03:22:44,240
To connect ourselves with the topics of yesterday, so like reproducible science.

1430
03:22:44,240 --> 03:22:55,720
uh yeah that's that's a uh quite a quite a boost to that i would say yep so um yeah so for example

1431
03:22:55,720 --> 03:23:08,120
here we have some uh examples of uh some notebooks uh that uh you can uh load in in binder binder

1432
03:23:08,120 --> 03:23:14,120
it's a platform that allows you to run some notebooks on the web without actually having

1433
03:23:14,120 --> 03:23:21,960
to install anything on your on your site so we will see this later so [name] will show us

1434
03:23:21,960 --> 03:23:32,040
how to use binder and yeah so i will not go into into the details here but here yeah to wet your

1435
03:23:32,040 --> 03:23:38,120
appetite let's say we have some some different some example of the uh of jupiter notebooks

1436
03:23:38,120 --> 03:23:45,080
coming from different uh domains different scientific domains um yeah one about the

1437
03:23:45,080 --> 03:23:53,560
gravitational wave discovery nobel prize and other things uh you know so something related to

1438
03:23:54,440 --> 03:24:03,560
humanities i would say yes so um there are some use cases that work really well for for us uh for

1439
03:24:03,560 --> 03:24:11,640
for jupiter notebooks for example uh yeah so we have a really uh linear workflow okay with the

1440
03:24:11,640 --> 03:24:19,000
uh where you need to read data to filter it then to some statistic and plot okay and then you want

1441
03:24:19,000 --> 03:24:24,900
You want to experiment with new ideas, testing new libraries and maybe databases or whatever.

1442
03:24:26,420 --> 03:24:28,540
And they're also interactive.

1443
03:24:28,740 --> 03:24:31,360
So that's one of the great reasons to use it.

1444
03:24:31,360 --> 03:24:41,920
I mean, there are also alternatives typically with high-level languages where you can just turn on like the Python interpreter and see something.

1445
03:24:42,200 --> 03:24:48,260
But actually, with Jupyter, it's nicer because you can plot in the notebook.

1446
03:24:48,260 --> 03:24:57,060
so it's it's a bit it's a easier and more user-friendly um environment to actually do

1447
03:24:57,060 --> 03:25:04,260
interactive work in uh yeah and you can share explain code to colleagues for teaching for

1448
03:25:04,260 --> 03:25:12,340
teaching i've used jupiter jupiter notebooks a lot um yeah and keeping track of interactive

1449
03:25:12,340 --> 03:25:20,180
sessions like a digital lab notebook um and yeah so also yeah when you publish articles you can

1450
03:25:21,940 --> 03:25:28,260
actually supplement some information for that to those but there are also some pitfalls right so

1451
03:25:28,260 --> 03:25:32,820
these are very nice use cases but there are some some issues there so for example if you don't have

1452
03:25:32,820 --> 03:25:41,220
a very um very simple flow of code so if it's not linear um then it can be difficult

1453
03:25:41,780 --> 03:25:48,900
if you have a large code base you you may actually use jupyter notebooks as like at the top of this

1454
03:25:48,900 --> 03:25:55,460
code base right so you could um you may have some functions that are written in some other

1455
03:25:55,460 --> 03:26:04,820
in some files and in some proper source files and then you can import those uh like use those

1456
03:26:04,820 --> 03:26:12,340
in the in the notebook but you cannot write your whole code base in uh in jupiter i would say i

1457
03:26:12,340 --> 03:26:18,340
mean you can try but it's very difficult and clunky yeah i mean people often go a bit too far

1458
03:26:18,340 --> 03:26:24,980
with how much they include in a notebook but yeah um when you start including functions for example

1459
03:26:24,980 --> 03:26:28,900
then it's probably already a good idea to start moving those functions into a separate file

1460
03:26:28,900 --> 03:26:40,580
So anything that the viewer doesn't need to see probably should not be in the notebook is basically my recommendation, but just personally, basically.

1461
03:26:41,220 --> 03:26:41,740
Yeah, yeah, yeah.

1462
03:26:41,740 --> 03:26:51,100
I think that one should safeguard themselves from doing this by making, okay, so you're going to use notebooks, good.

1463
03:26:51,100 --> 03:26:53,680
but consider whenever you start a notebook

1464
03:26:53,680 --> 03:26:58,400
also to have basically a background infrastructure

1465
03:26:58,400 --> 03:27:03,740
where you have a properly set up project for your own language.

1466
03:27:04,720 --> 03:27:05,680
Then again, of course,

1467
03:27:06,220 --> 03:27:08,560
one thing that notebooks are really good for

1468
03:27:08,560 --> 03:27:11,840
is kind of fiddling around with stuff,

1469
03:27:11,960 --> 03:27:13,400
trying different things.

1470
03:27:13,680 --> 03:27:16,500
Then you might in fact have some cells that you don't run

1471
03:27:16,500 --> 03:27:18,620
and some cells that you run in a random order

1472
03:27:18,620 --> 03:27:20,820
to get things to work and so on.

1473
03:27:21,100 --> 03:27:27,200
So like all of these pitfalls happen for a reason

1474
03:27:27,200 --> 03:27:29,060
and sometimes there's a good reason for it.

1475
03:27:30,020 --> 03:27:34,180
So it's just that when you publish it

1476
03:27:34,180 --> 03:27:36,880
or when you try, when it gets big,

1477
03:27:37,360 --> 03:27:40,000
when you start sharing it with someone else,

1478
03:27:40,820 --> 03:27:42,780
it is a good idea to clean it up

1479
03:27:42,780 --> 03:27:44,940
and make it more presentable.

1480
03:27:46,620 --> 03:27:47,620
Yeah, yeah, definitely, definitely.

1481
03:27:48,040 --> 03:27:50,480
But yeah, the cool thing is that

1482
03:27:50,480 --> 03:27:56,060
they lend themselves for for rapid prototyping. And yeah, so

1483
03:27:56,060 --> 03:28:01,400
that's actually quite, quite good. So I would say, let's go

1484
03:28:01,400 --> 03:28:05,360
to, to the next episode in the lesson, I think I hope we have

1485
03:28:06,740 --> 03:28:12,440
made the case for Jupyter notebooks. And so we can show

1486
03:28:12,680 --> 03:28:16,460
the how to use them, let's say, you know, a bit. So it's a bit

1487
03:28:16,460 --> 03:28:28,540
the basics but just like everybody um on you know on the same page um i will now switch um to

1488
03:28:29,340 --> 03:28:40,620
uh switch my share to to the um to the the terminal okay for a moment okay and yeah so

1489
03:28:40,620 --> 03:28:45,200
So here I have a terminal, and here, what should I do here?

1490
03:28:45,440 --> 03:28:49,960
So I will create a director called JupyterLabDemo.

1491
03:28:53,080 --> 03:28:53,600
LabDemo.

1492
03:28:54,820 --> 03:28:56,060
Yeah, create that.

1493
03:28:56,560 --> 03:28:58,020
And then what should I do next?

1494
03:28:59,020 --> 03:28:59,540
cd JupyterLabDemo.

1495
03:29:01,940 --> 03:29:02,460
LabDemo.

1496
03:29:02,460 --> 03:29:12,460
And then I will use the conda environment that we discussed about in the previous episodes to start it.

1497
03:29:12,640 --> 03:29:21,520
So I first of all activate conda, the right environment, and activate code.

1498
03:29:23,180 --> 03:29:25,060
That's how I call that.

1499
03:29:25,060 --> 03:29:32,020
And then I should be able just to invoke JupyterLab.

1500
03:29:32,460 --> 03:29:41,780
Okay, yep, and now JupyterLab should be after this huge blurb.

1501
03:29:41,780 --> 03:29:47,980
So it will open it in the browser window if it finds the browser.

1502
03:29:50,460 --> 03:29:55,980
Or you can also, it tells you how to open it in a browser if it doesn't pop up immediately,

1503
03:29:56,220 --> 03:29:59,460
but it's a little bit hidden in all of that text that you just saw.

1504
03:29:59,460 --> 03:30:01,560
so it's the part that says

1505
03:30:01,560 --> 03:30:04,480
starts with HTTP and has this token

1506
03:30:04,480 --> 03:30:05,360
equals something

1507
03:30:05,360 --> 03:30:07,240
yeah I could copy that

1508
03:30:07,240 --> 03:30:10,400
but fortunately in my case

1509
03:30:10,400 --> 03:30:12,240
there's no need for that and I have this

1510
03:30:12,240 --> 03:30:13,640
beautiful interface

1511
03:30:13,640 --> 03:30:15,620
that shows me

1512
03:30:15,620 --> 03:30:18,240
some different things

1513
03:30:18,240 --> 03:30:20,240
so let me just

1514
03:30:20,240 --> 03:30:21,180
copy

1515
03:30:21,180 --> 03:30:23,800
the notes

1516
03:30:23,800 --> 03:30:26,020
okay

1517
03:30:26,020 --> 03:30:27,060
JupyterLab

1518
03:30:27,060 --> 03:30:34,620
so how actually does it work so you have seen that in my terminal i have actually started

1519
03:30:34,620 --> 03:30:39,980
jupyter lab the server of jupyter lab okay there's a web server attached to it okay

1520
03:30:39,980 --> 03:30:48,520
and yeah let's show here i think it's clear from the notes so this is the program i have started

1521
03:30:48,520 --> 03:30:55,860
in my in my terminal then in the browser i'm able to to talk to this to interact with the server

1522
03:30:55,860 --> 03:31:00,300
and of course there's a user here and then the notebook server

1523
03:31:00,300 --> 03:31:04,900
is able to interact with the

1524
03:31:04,900 --> 03:31:08,900
file, the notebook file, also with the file system, with everything which is in the

1525
03:31:08,900 --> 03:31:12,740
folder where you started the JupyterLab

1526
03:31:12,740 --> 03:31:15,780
server and in addition

1527
03:31:15,780 --> 03:31:20,760
the notebook server itself will talk to a kernel. The kernel is

1528
03:31:20,760 --> 03:31:24,620
not your operating system kernel

1529
03:31:24,620 --> 03:31:30,560
But it's like the thing that actually runs the code

1530
03:31:30,560 --> 03:31:32,780
that was written in the notebook.

1531
03:31:33,540 --> 03:31:36,480
So the kernel is actually running code.

1532
03:31:36,740 --> 03:31:37,700
It's interpreting the code.

1533
03:31:38,340 --> 03:31:44,100
So in Jupyter, the name actually comes from Julia, Python, and R.

1534
03:31:44,320 --> 03:31:47,260
So there's default kernels for Julia, Python, and R.

1535
03:31:47,960 --> 03:31:49,600
And there's different kernels.

1536
03:31:49,880 --> 03:31:52,560
Well, yeah, there's kernels for those three languages,

1537
03:31:52,720 --> 03:31:53,580
but also other languages.

1538
03:31:53,580 --> 03:31:56,380
so you could have multiple kernels open at the same time

1539
03:31:56,380 --> 03:31:58,080
but I guess we'll just have one for Python

1540
03:31:58,080 --> 03:31:59,900
Yeah, so for example

1541
03:31:59,900 --> 03:32:01,880
in my case I have a Python 3 kernel

1542
03:32:01,880 --> 03:32:04,240
but since I'm a bit weird I have also

1543
03:32:04,240 --> 03:32:05,540
a kernel for Bash

1544
03:32:05,540 --> 03:32:07,960
which is why I could do this

1545
03:32:07,960 --> 03:32:09,120
I'm not going to do this

1546
03:32:09,120 --> 03:32:11,980
I guess not

1547
03:32:11,980 --> 03:32:14,240
Yeah, so well you have

1548
03:32:14,240 --> 03:32:15,820
two different kernels then

1549
03:32:15,820 --> 03:32:20,280
And there's also for C++ for example

1550
03:32:20,280 --> 03:32:22,360
if some of you is interested in

1551
03:32:22,360 --> 03:32:29,320
having c++ developed in a in a in a notebook then you can also use c++ there why not yeah

1552
03:32:31,080 --> 03:32:39,240
so um other things we can let's have a look at the interface so um it's better to do this here

1553
03:32:39,240 --> 03:32:45,480
because it's a bit uh there's more stuff here i can show so here there's ways to actually create

1554
03:32:45,480 --> 03:32:52,120
a new they have a file browser you have a way to create new files uh then here on the

1555
03:32:53,160 --> 03:32:59,560
if you want to can actually collapse this this uh um navigation bar on the left

1556
03:33:00,280 --> 03:33:07,480
um then here on the right you have uh you have the notebook and you can see the notebook has

1557
03:33:07,480 --> 03:33:13,560
different things so you can have like two kinds of cells so the the content of a of a notebook

1558
03:33:13,560 --> 03:33:19,240
is organizing cells you have markdown cells which are your pros your content your comments

1559
03:33:20,360 --> 03:33:30,200
that contain also formulas for example then you have uh cells uh code cells here for example you

1560
03:33:30,200 --> 03:33:36,920
have a cursor and then uh you have also input the the output right so if you're pointing at

1561
03:33:36,920 --> 03:33:46,360
something with the mouse and maybe we don't or i don't see your mouse oh okay um yes unfortunately

1562
03:33:46,360 --> 03:33:55,500
no my mouse is not visible it's interesting um well but there is um so the gray light gray areas

1563
03:33:55,500 --> 03:34:04,720
are code and the um the white areas with text are markdown cells and i guess we can show how

1564
03:34:04,720 --> 03:34:12,780
that works yeah so wait a moment uh can i get back to that okay good yes i will show that um

1565
03:34:12,780 --> 03:34:22,820
there will be plenty of time to show this and uh yeah so the control here two kinds of cells so

1566
03:34:22,820 --> 03:34:29,200
there are markdown cells and uh yeah you have all the features of markdown there so you you can

1567
03:34:29,200 --> 03:34:38,080
create headings you can create links you can have um bold italics strike through and also code which

1568
03:34:38,080 --> 03:34:48,000
is in line can you see this um so we can if you need to type code but uh in in a in a not in its

1569
03:34:48,000 --> 03:34:56,000
own cell but in in the you can do that uh you can have lists with the bullet points or um yeah or

1570
03:34:56,000 --> 03:34:59,440
number of the lists equations and so on so these are all the things we discussed

1571
03:35:00,000 --> 03:35:04,560
previously we showed previously in you know when you use markdown and then you have code cells

1572
03:35:05,440 --> 03:35:13,120
yeah so yeah code cells um and yeah and you you create these two can do kind of things

1573
03:35:13,120 --> 03:35:20,320
called cells have also outputs and it goes on like that um yeah so um

1574
03:35:20,320 --> 03:35:25,080
so the interface has

1575
03:35:25,080 --> 03:35:27,680
the JupyterLab interface has

1576
03:35:27,680 --> 03:35:28,360
a little

1577
03:35:28,360 --> 03:35:31,800
some shortcuts, something we'll discuss

1578
03:35:31,800 --> 03:35:33,300
now about this.

1579
03:35:33,480 --> 03:35:35,840
Yeah, those are the kinds of things that it's better

1580
03:35:35,840 --> 03:35:36,720
to check when you

1581
03:35:36,720 --> 03:35:39,880
when you have

1582
03:35:39,880 --> 03:35:41,340
used it for a moment.

1583
03:35:42,400 --> 03:35:43,720
But don't wait too long though.

1584
03:35:46,160 --> 03:35:46,640
So

1585
03:35:46,640 --> 03:35:49,280
okay, so what should we do next?

1586
03:35:49,280 --> 03:35:52,520
Should we start this demonstration,

1587
03:35:53,080 --> 03:35:54,400
the first computational notebook?

1588
03:35:55,500 --> 03:35:55,860
Yes.

1589
03:35:56,240 --> 03:35:56,540
Yes.

1590
03:35:56,700 --> 03:35:58,260
So here in the notes,

1591
03:35:58,320 --> 03:36:00,320
you have a discussion

1592
03:36:00,320 --> 03:36:02,040
on what are the shortcuts.

1593
03:36:02,680 --> 03:36:03,700
But yeah, so I'll start

1594
03:36:03,700 --> 03:36:05,720
a first computational notebook.

1595
03:36:06,220 --> 03:36:09,300
And I think I can get rid of this

1596
03:36:09,300 --> 03:36:11,880
so that everything fits.

1597
03:36:12,100 --> 03:36:14,440
But yeah, if you want to back your navigation,

1598
03:36:14,440 --> 03:36:15,740
you can just click on...

1599
03:36:15,740 --> 03:36:17,000
Yeah, so that's a file view.

1600
03:36:17,000 --> 03:36:20,760
So it shows the folder that you started Jupyter in.

1601
03:36:21,260 --> 03:36:26,200
And, well, I mean, it is very similar to a lot of other file system processes.

1602
03:36:27,080 --> 03:36:27,240
But, yeah.

1603
03:36:27,360 --> 03:36:36,960
So one thing is you created a new notebook, and the name is untitled by default.

1604
03:36:37,240 --> 03:36:39,680
So it's usually a good idea to change that.

1605
03:36:40,420 --> 03:36:40,580
Yeah.

1606
03:36:40,680 --> 03:36:42,740
So how do I name that?

1607
03:36:42,740 --> 03:36:46,340
Let's see if there's an idea in the notes.

1608
03:36:47,000 --> 03:36:50,700
Let's say, my first notebook, or how do I do that?

1609
03:36:51,800 --> 03:36:54,640
Let's call it, well, we want to call,

1610
03:36:54,960 --> 03:36:58,540
so the example here wants to calculate pi

1611
03:36:58,540 --> 03:36:59,500
using Monte Carlo method.

1612
03:36:59,620 --> 03:37:01,080
So what would be a good name?

1613
03:37:02,080 --> 03:37:06,840
Like, wait, F2, pi Monte Carlo?

1614
03:37:07,080 --> 03:37:08,480
Yeah, that's fine.

1615
03:37:09,580 --> 03:37:09,840
Good.

1616
03:37:10,440 --> 03:37:13,540
And now I can close this, so we have space.

1617
03:37:14,540 --> 03:37:14,720
Okay.

1618
03:37:15,440 --> 03:37:25,440
so um what do i do first of all i want to add a so i change the i want to a markdown cell here

1619
03:37:26,000 --> 03:37:34,880
uh so i will press m so that actually that the uh the kind of the cell turns to markdown

1620
03:37:34,880 --> 03:37:41,520
so i can type in header so if you don't remember the shortcut there's also this um

1621
03:37:41,520 --> 03:37:47,160
there's multiple layers of user interface,

1622
03:37:47,460 --> 03:37:50,320
but just outside the notebook,

1623
03:37:50,320 --> 03:37:55,260
there is a menu bar that has this save icon

1624
03:37:55,260 --> 03:37:56,640
and then a few other icons,

1625
03:37:56,740 --> 03:37:58,940
and it includes this text markdown.

1626
03:37:59,340 --> 03:38:00,740
So it's currently markdown

1627
03:38:00,740 --> 03:38:02,880
because it's showing that the current cell is markdown

1628
03:38:02,880 --> 03:38:05,880
and you can change it to code or raw.

1629
03:38:06,060 --> 03:38:07,020
Raw is just text.

1630
03:38:07,680 --> 03:38:08,880
So it's pure text.

1631
03:38:09,000 --> 03:38:11,080
It will not get changed when you run it.

1632
03:38:11,080 --> 03:38:19,160
so okay okay um so monte carlo method yeah and now i want to create a new cell

1633
03:38:19,160 --> 03:38:31,940
um so i i press usually press shift enter okay so should i maybe i mean i can draw here can you um

1634
03:38:31,940 --> 03:38:33,620
or not

1635
03:38:33,620 --> 03:38:35,680
wait

1636
03:38:35,680 --> 03:38:37,480
can you see

1637
03:38:37,480 --> 03:38:40,140
let's go back to the preview

1638
03:38:40,140 --> 03:38:42,140
I think you cannot really

1639
03:38:42,140 --> 03:38:44,940
I cannot try that

1640
03:38:44,940 --> 03:38:46,680
it's all black

1641
03:38:46,680 --> 03:38:47,980
yes

1642
03:38:47,980 --> 03:38:50,780
we have some weird

1643
03:38:50,780 --> 03:38:51,900
issues with the screen share

1644
03:38:51,900 --> 03:38:54,680
yeah it's weird sometimes

1645
03:38:54,680 --> 03:38:56,940
so do we try

1646
03:38:56,940 --> 03:38:58,360
maybe I'll click this again

1647
03:38:58,360 --> 03:39:00,200
it sometimes comes back

1648
03:39:00,200 --> 03:39:03,000
Do I start sharing?

1649
03:39:03,260 --> 03:39:05,440
Do we try resharing?

1650
03:39:07,280 --> 03:39:10,260
Maybe it's 25 past already.

1651
03:39:13,660 --> 03:39:15,280
I suggested I start sharing.

1652
03:39:15,280 --> 03:39:17,320
Okay, well, it's gone again.

1653
03:39:17,440 --> 03:39:17,820
It's back.

1654
03:39:18,400 --> 03:39:20,060
I suggested I start sharing.

1655
03:39:21,000 --> 03:39:21,980
I'll stop sharing then.

1656
03:39:23,160 --> 03:39:24,660
Yeah, not quite yet, I guess.

1657
03:39:25,320 --> 03:39:27,200
Now I'm sharing something.

1658
03:39:27,200 --> 03:39:32,480
Yep. Okay, so I'll stop my share then.

1659
03:39:32,480 --> 03:39:46,080
And now the Zoom thing is in the way. Okay, sorry about this, but stuff happens. So is

1660
03:39:46,080 --> 03:39:54,320
that okay? So I have activated the CodeDefiner environment and I'm going to run JupyterLab.

1661
03:39:57,200 --> 03:40:03,740
there we are so it started in the browser window okay now let's pretend

1662
03:40:03,740 --> 03:40:15,340
that I don't have this file already here I'm going to create a new file here okay

1663
03:40:15,340 --> 03:40:22,880
why do I have an untitled folder here let's delete that one okay so and I'll

1664
03:40:22,880 --> 03:40:27,680
I'll call this pi dot i pi np.

1665
03:40:27,680 --> 03:40:29,200
OK.

1666
03:40:29,200 --> 03:40:31,280
And we had already the markdown cell.

1667
03:40:34,240 --> 03:40:37,320
So I'll just very quickly write some title there.

1668
03:40:37,320 --> 03:40:42,200
This, I made a mistake now because I was going to excel.

1669
03:40:42,200 --> 03:40:43,680
So this is now a code cell.

1670
03:40:43,680 --> 03:40:46,080
And it's actually, it's a comment

1671
03:40:46,080 --> 03:40:47,760
because it starts with a hash.

1672
03:40:47,760 --> 03:40:50,080
But I want this to be a markdown cell.

1673
03:40:50,080 --> 03:40:52,600
So I will go here and change it into markdown.

1674
03:40:52,600 --> 03:41:01,880
and then press play to run it okay and the other option to run it is to play press uh control and

1675
03:41:01,880 --> 03:41:08,600
enter or at least that's one other option there's other shortcuts as well okay so that inserted

1676
03:41:10,040 --> 03:41:18,120
shift shift enter doesn't and control enter maybe create a cell okay shift enter creates a cell

1677
03:41:18,120 --> 03:41:30,600
below it okay so uh what do we do then so um and i'm i'm guessing we do want to actually make some

1678
03:41:30,600 --> 03:41:35,240
calculations well first we have a list of relevant formulas for this calculation

1679
03:41:36,440 --> 03:41:39,400
so that people can follow along what we're doing

1680
03:41:39,400 --> 03:41:44,920
I wonder if I should

1681
03:41:44,920 --> 03:41:46,460
just

1682
03:41:46,460 --> 03:41:50,360
you can reopen the cell by double clicking

1683
03:41:50,360 --> 03:41:54,040
you can show some formulas there

1684
03:41:54,040 --> 03:41:54,980
which can be useful

1685
03:41:54,980 --> 03:41:57,580
I'll just copy paste

1686
03:41:57,580 --> 03:41:59,900
so that I don't spend too much time

1687
03:41:59,900 --> 03:42:00,620
writing it out

1688
03:42:00,620 --> 03:42:02,300
but it's Markdown

1689
03:42:02,300 --> 03:42:04,840
which you have already used

1690
03:42:04,840 --> 03:42:08,740
in the notes

1691
03:42:08,740 --> 03:42:10,880
and in the documentation session.

1692
03:42:12,920 --> 03:42:14,420
Okay, so here we are.

1693
03:42:16,500 --> 03:42:17,460
Beautiful rendered.

1694
03:42:19,500 --> 03:42:21,900
We also have an image visualizing the content.

1695
03:42:22,660 --> 03:42:24,140
So this is kind of fun.

1696
03:42:24,800 --> 03:42:26,980
You can include an image either from the file system.

1697
03:42:27,760 --> 03:42:30,100
So I'm going to go create another Markdown cell.

1698
03:42:31,680 --> 03:42:33,940
But here we are actually including it from GitHub.

1699
03:42:33,940 --> 03:42:36,520
just the

1700
03:42:36,520 --> 03:42:38,860
you can navigate to the file in GitHub

1701
03:42:38,860 --> 03:42:39,980
and get the raw

1702
03:42:39,980 --> 03:42:42,220
open the raw image

1703
03:42:42,220 --> 03:42:44,320
and then get the link

1704
03:42:44,320 --> 03:42:46,640
to get something like this

1705
03:42:46,640 --> 03:42:48,140
okay

1706
03:42:48,140 --> 03:42:49,540
so that's fun

1707
03:42:49,540 --> 03:42:52,120
but let's get to coding

1708
03:42:52,120 --> 03:42:53,740
so

1709
03:42:53,740 --> 03:42:56,880
first we need to

1710
03:42:56,880 --> 03:42:57,800
import some things

1711
03:43:03,940 --> 03:43:07,700
And I keep pressing Shift-Enter to get a new line,

1712
03:43:07,800 --> 03:43:08,540
but that doesn't work.

1713
03:43:08,620 --> 03:43:09,960
I just keep creating new cells.

1714
03:43:10,520 --> 03:43:12,200
I need to get used to this again.

1715
03:43:12,480 --> 03:43:14,140
So import random.

1716
03:43:14,280 --> 03:43:16,080
We're going to need random for random numbers.

1717
03:43:16,740 --> 03:43:17,980
Just enter, not Shift-Enter.

1718
03:43:18,120 --> 03:43:18,260
Okay.

1719
03:43:18,920 --> 03:43:21,400
And for plotting, we're going to need matplotlib.

1720
03:43:23,420 --> 03:43:24,420
Iplot, actually.

1721
03:43:25,740 --> 03:43:26,460
From matplotlib.

1722
03:43:26,460 --> 03:43:39,800
um we probably shouldn't spend too much time on the code itself it's uh i mean the basic idea

1723
03:43:39,800 --> 03:43:47,520
yes but um like the code is in python and uh you like the language shouldn't be necessary

1724
03:43:47,520 --> 03:43:52,120
it shouldn't be necessary to understand the language or use python specifically there's uh

1725
03:43:52,120 --> 03:43:58,700
yeah so the idea is that the idea is that you compute pi because pi is going to be

1726
03:43:58,700 --> 03:44:06,820
close to pi divided by four is going to be the probability that a dart thrown in a square is

1727
03:44:06,820 --> 03:44:16,600
also in the uh in the circle circle yeah or yeah similar or equivalent multiplied by some number i

1728
03:44:16,600 --> 03:44:19,040
think yeah yeah yeah so we were

1729
03:44:19,040 --> 03:44:20,860
calculating the area of the circle by

1730
03:44:20,860 --> 03:44:23,120
randomly throwing randomly picking

1731
03:44:23,120 --> 03:44:25,040
numbers and deciding if they are inside

1732
03:44:25,040 --> 03:44:29,340
the circle or not so first let's pick a

1733
03:44:29,340 --> 03:44:31,440
number of throws

1734
03:44:31,440 --> 03:44:37,040
it says num points equal 1000

1735
03:44:37,040 --> 03:44:53,140
okay and run that and then we can write a function that

1736
03:44:53,140 --> 03:44:58,880
throws the dots which means picks two random numbers an x

1737
03:44:58,880 --> 03:45:01,960
coordinate and a y coordinate okay so

1738
03:45:01,960 --> 03:45:07,360
actually the function

1739
03:45:07,360 --> 03:45:08,400
throws a dot

1740
03:45:08,400 --> 03:45:10,380
right

1741
03:45:10,380 --> 03:45:14,940
okay

1742
03:45:14,940 --> 03:45:17,180
instead of okay

1743
03:45:17,180 --> 03:45:17,980
so

1744
03:45:17,980 --> 03:45:21,160
initialize well actually yeah we

1745
03:45:21,160 --> 03:45:22,960
throw dots because we are

1746
03:45:22,960 --> 03:45:25,460
we're not doing a function

1747
03:45:25,460 --> 03:45:26,920
we're doing a follow up at this point

1748
03:45:26,920 --> 03:45:29,360
yeah I was reading

1749
03:45:29,360 --> 03:45:30,520
incorrectly so

1750
03:45:30,520 --> 03:45:41,100
um here we go so we make a list of points um and we'll count how many times it hits inside the

1751
03:45:41,100 --> 03:45:49,120
circle so at the start this is zero then we'll do a for loop for and we don't really care about

1752
03:45:49,120 --> 03:45:53,160
the index but we want um

1753
03:45:53,160 --> 03:46:01,180
do it number of points times so this is a follow-up if you know a different language

1754
03:46:01,180 --> 03:46:09,280
don't worry about the syntax it is a bit weird python okay but we'll get an x coordinate and

1755
03:46:09,280 --> 03:46:16,420
y coordinate from random so that means if there is a random contains a function called random

1756
03:46:16,420 --> 03:46:19,860
we will be calling it twice

1757
03:46:19,860 --> 03:46:24,380
okay, to get two random numbers

1758
03:46:24,380 --> 03:46:26,060
and then

1759
03:46:26,060 --> 03:46:27,900
we need to check if they are inside

1760
03:46:27,900 --> 03:46:28,840
the

1761
03:46:28,840 --> 03:46:32,140
so how do you check if it's inside

1762
03:46:32,140 --> 03:46:32,640
a circle

1763
03:46:32,640 --> 03:46:36,060
the Pythagorean

1764
03:46:36,060 --> 03:46:36,480
theorem

1765
03:46:36,480 --> 03:46:39,700
so we'll do x squared

1766
03:46:39,700 --> 03:46:41,800
plus y squared

1767
03:46:41,800 --> 03:46:44,220
and the size of the circle

1768
03:46:44,220 --> 03:46:44,880
is one

1769
03:46:44,880 --> 03:46:47,880
so we're picking, here we're picking

1770
03:46:47,880 --> 03:46:49,320
from between zero and one

1771
03:46:49,960 --> 03:46:53,320
So the square is from 0 to 1.

1772
03:46:53,860 --> 03:46:57,840
I'm checking quickly if people can actually see me.

1773
03:46:58,420 --> 03:47:00,960
And so the square is between 0 and 1.

1774
03:47:01,200 --> 03:47:05,180
And so the radius of the circle is also 1.

1775
03:47:06,180 --> 03:47:07,500
And 1 squared is 1.

1776
03:47:07,580 --> 03:47:08,900
So we don't even have to square it.

1777
03:47:09,980 --> 03:47:13,900
So if it is inside the circle, then we say hits.

1778
03:47:15,720 --> 03:47:17,000
Add 1 to hits.

1779
03:47:17,000 --> 03:47:19,560
and in any case

1780
03:47:19,560 --> 03:47:21,580
we actually want to keep track of the points

1781
03:47:21,580 --> 03:47:23,440
so we'll append

1782
03:47:23,440 --> 03:47:27,080
the x y coordinate

1783
03:47:27,080 --> 03:47:30,740
and

1784
03:47:30,740 --> 03:47:33,400
we'll want to mark

1785
03:47:33,400 --> 03:47:34,760
whether it hit or not

1786
03:47:34,760 --> 03:47:36,980
so we could say

1787
03:47:36,980 --> 03:47:39,300
true or false here but actually

1788
03:47:39,300 --> 03:47:40,440
just for the plot

1789
03:47:40,440 --> 03:47:43,500
we want the points inside to be red

1790
03:47:43,500 --> 03:47:45,520
and points outside to be blue

1791
03:47:45,520 --> 03:47:46,440
so

1792
03:47:46,440 --> 03:47:51,940
So I'll go a bit fast here

1793
03:47:51,940 --> 03:47:53,680
and immediately mark it as red.

1794
03:47:57,780 --> 03:48:00,040
Because we've already stored the number of hits here.

1795
03:48:00,760 --> 03:48:00,900
Okay.

1796
03:48:01,540 --> 03:48:02,880
And then if it didn't hit,

1797
03:48:03,120 --> 03:48:04,820
we'll want to still add the point,

1798
03:48:05,380 --> 03:48:06,520
but we will make it blue.

1799
03:48:08,440 --> 03:48:08,540
Yeah.

1800
03:48:10,380 --> 03:48:12,760
I think you need another bracket there.

1801
03:48:14,700 --> 03:48:15,540
Yes, I do.

1802
03:48:16,020 --> 03:48:16,160
Yeah.

1803
03:48:16,440 --> 03:48:18,680
Because you are appending a tuple to the points.

1804
03:48:19,360 --> 03:48:19,940
Yeah, it's a tuple.

1805
03:48:20,800 --> 03:48:21,040
Okay.

1806
03:48:22,480 --> 03:48:24,420
So we have already run that.

1807
03:48:24,900 --> 03:48:26,640
Now, if I want to check what happened,

1808
03:48:26,640 --> 03:48:29,740
I could just say hits.

1809
03:48:30,820 --> 03:48:34,160
So hits, there were 765 hits.

1810
03:48:34,540 --> 03:48:38,460
I could say points, and that would be a long list.

1811
03:48:39,220 --> 03:48:39,740
Okay.

1812
03:48:40,860 --> 03:48:41,300
So...

1813
03:48:41,300 --> 03:48:41,700
Wow.

1814
03:48:42,460 --> 03:48:42,700
Yeah.

1815
03:48:42,700 --> 03:48:49,900
So it's nice. You can just check what the variables contain. This is why it's useful

1816
03:48:49,900 --> 03:48:56,300
for rapid development. But let's actually make it more of a narrative. So let's see

1817
03:48:56,300 --> 03:49:03,500
what the result looks like. So we'll make a plot. So we'll take the x and y coordinates and colors

1818
03:49:04,140 --> 03:49:11,900
and extract that from this. So this is again, don't mind syntax. It's weird.

1819
03:49:12,700 --> 03:49:20,700
it's though let's say what it's actually doing so extract the coordinates and

1820
03:49:20,700 --> 03:49:28,640
colors in this case up you're getting a it's a single list for all the X the X's

1821
03:49:28,640 --> 03:49:35,220
or another list for all the Y's and then at least for the colors yeah exactly

1822
03:49:35,220 --> 03:49:42,580
okay and then we define the figure dimension so define what the figure

1823
03:49:42,580 --> 03:49:56,300
looks like and this is also plots this is just how matplotlib works so

1824
03:49:56,300 --> 03:50:02,300
So again, I'll just skim past it.

1825
03:50:02,300 --> 03:50:04,540
What is important here is that you

1826
03:50:04,540 --> 03:50:08,520
can do this plotting thing inside JupyterLab

1827
03:50:08,520 --> 03:50:11,320
or inside Jupyter, and it will work out.

1828
03:50:11,320 --> 03:50:13,180
0 is not a good size.

1829
03:50:13,180 --> 03:50:17,280
I want to go with 6, I think.

1830
03:50:17,280 --> 03:50:21,700
OK, inches and, yeah, 6 inches.

1831
03:50:21,700 --> 03:50:25,000
I don't know why we use inches here, just standard.

1832
03:50:25,000 --> 03:50:28,120
Okay. I mean, in general, in plotting, why do people use inches?

1833
03:50:28,900 --> 03:50:29,940
Well, that's just the standard.

1834
03:50:30,480 --> 03:50:32,360
So we plot the results.

1835
03:50:37,220 --> 03:50:39,740
We did get this x variable here.

1836
03:50:40,460 --> 03:50:40,940
Axes.

1837
03:50:41,940 --> 03:50:44,880
Not an axe for chopping, but axes.

1838
03:50:48,120 --> 03:50:52,200
We'll make a scatter plot with the x coordinates and the y coordinates listed

1839
03:50:52,200 --> 03:50:54,660
and then C for colors.

1840
03:50:54,660 --> 03:50:58,340
So we need to set C equals colors here.

1841
03:50:58,500 --> 03:50:58,620
Okay.

1842
03:50:59,320 --> 03:51:02,040
And this should now, instead of this long list, produce a plot.

1843
03:51:02,200 --> 03:51:03,880
Let's see if it's pretty.

1844
03:51:04,040 --> 03:51:04,320
Okay.

1845
03:51:04,560 --> 03:51:05,060
There's an error.

1846
03:51:05,480 --> 03:51:05,920
That's a little.

1847
03:51:06,320 --> 03:51:06,460
Yeah.

1848
03:51:06,500 --> 03:51:08,100
So you called fix.

1849
03:51:08,600 --> 03:51:10,880
So if you go a line above, you.

1850
03:51:11,320 --> 03:51:12,280
There's a fix.

1851
03:51:12,720 --> 03:51:13,100
Okay.

1852
03:51:13,240 --> 03:51:14,120
So it's not a fix.

1853
03:51:14,200 --> 03:51:14,820
It's a figure.

1854
03:51:15,000 --> 03:51:15,240
Okay.

1855
03:51:16,600 --> 03:51:17,180
All right.

1856
03:51:17,220 --> 03:51:18,200
So here we have a plot.

1857
03:51:18,560 --> 03:51:21,980
So we have some points outside and some points inside the circle.

1858
03:51:23,240 --> 03:51:23,680
Okay.

1859
03:51:23,680 --> 03:51:26,820
Now, that's not the actual result, though.

1860
03:51:27,040 --> 03:51:32,480
This shows the method we used, but the actual result is the value of pi.

1861
03:51:33,180 --> 03:51:44,200
So that's, if you look at the equation here, it's the number of hits divided by the area,

1862
03:51:44,480 --> 03:51:49,320
which in this case, the area of the square is actually two times r squared.

1863
03:51:49,320 --> 03:51:51,060
so it's 4

1864
03:51:51,060 --> 03:51:52,340
and

1865
03:51:52,340 --> 03:51:57,880
that's

1866
03:51:57,880 --> 03:51:59,880
not, is that correct?

1867
03:52:03,100 --> 03:52:03,860
Well I mean

1868
03:52:03,860 --> 03:52:05,480
the area of this square is 1

1869
03:52:05,480 --> 03:52:07,920
so I guess this S actually means the area

1870
03:52:07,920 --> 03:52:08,500
of this square

1871
03:52:08,500 --> 03:52:11,760
and the C is the number of

1872
03:52:11,760 --> 03:52:13,380
the fraction of the hits

1873
03:52:13,380 --> 03:52:15,920
Yeah I think

1874
03:52:15,920 --> 03:52:17,500
this applies for the quadrant

1875
03:52:17,500 --> 03:52:18,860
or for the full

1876
03:52:18,860 --> 03:52:41,860
Yeah. Yeah. Okay. Well, I mean, we'll do it correctly here. Anyway, I'm sure if I'm reading that correctly. So the number of hits divided by the number of points is the fraction of hits. And then the pi actually is just four times the fraction, which I guess is what was written down there.

1877
03:52:41,860 --> 03:52:44,780
so I'm just somehow confused

1878
03:52:44,780 --> 03:52:46,780
fractions does not exist because

1879
03:52:46,780 --> 03:52:48,540
I added an extra s there

1880
03:52:48,540 --> 03:52:49,560
okay

1881
03:52:49,560 --> 03:52:52,800
you see here how errors happen right

1882
03:52:52,800 --> 03:52:53,120
so

1883
03:52:53,120 --> 03:52:56,340
how errors are displayed

1884
03:52:56,340 --> 03:52:58,820
yeah that's maybe I should

1885
03:52:58,820 --> 03:53:00,100
do that again just for a moment

1886
03:53:00,100 --> 03:53:02,640
yeah so I mean

1887
03:53:02,640 --> 03:53:04,580
the colors make it actually easier to

1888
03:53:04,580 --> 03:53:06,860
figure out what's going on but it's on line

1889
03:53:06,860 --> 03:53:08,360
two of the previous

1890
03:53:08,360 --> 03:53:10,080
cell 13

1891
03:53:10,080 --> 03:53:12,900
input cell 13, which is this one.

1892
03:53:13,300 --> 03:53:15,600
This is an output cell, or this is actually an error.

1893
03:53:16,380 --> 03:53:18,740
This is an output, this image here.

1894
03:53:19,740 --> 03:53:21,840
And, well, there's also markdown cells,

1895
03:53:22,160 --> 03:53:24,020
which I think also count as input.

1896
03:53:25,040 --> 03:53:26,820
Okay, well, let's get rid of the error.

1897
03:53:28,580 --> 03:53:32,700
So 3.06, I mean, it's three, it's close enough.

1898
03:53:34,080 --> 03:53:37,680
We can get some more points if we want to, and run again.

1899
03:53:37,680 --> 03:53:43,020
so one thing I do want to show because it was something at least I use very often if you're

1900
03:53:43,020 --> 03:53:47,240
making a narrative from top to bottom you probably want to run the cell from top to bottom

1901
03:53:47,240 --> 03:53:53,300
so here's restart the kernel and run all cells this is also useful to do before publishing

1902
03:53:53,300 --> 03:54:00,460
if I just make sure that if you run everything in the original or in the written down order

1903
03:54:00,460 --> 03:54:10,860
then it should work okay so it is running all of the cells now this is so many points uh the image

1904
03:54:10,860 --> 03:54:17,740
is just an image of a circle at this point and we have slightly uh a slightly better estimate of pi

1905
03:54:17,740 --> 03:54:26,140
here okay yeah but important here that if you change one parameter you need to i mean uh yeah

1906
03:54:26,140 --> 03:54:32,060
you need to run all the cells again, to be safe. You can be clever, try to be clever,

1907
03:54:32,060 --> 03:54:39,020
and rerun only the ones that are, but yeah. So what I could do is change this here,

1908
03:54:39,020 --> 03:54:44,300
run here, and then just try to go to this one, but now I get a completely incorrect result,

1909
03:54:45,820 --> 03:54:50,060
because I didn't change the stuff in the middle, I just changed this variable.

1910
03:54:50,060 --> 03:54:57,260
this didn't run and this didn't run um so if i run that one now i think i will get the correct

1911
03:54:57,260 --> 03:55:02,300
result but the image is not quite correct so at this point i'm confused i'm going to rerun

1912
03:55:02,300 --> 03:55:10,380
everything it's uh often better to rerun everything often than it is to like try to figure things out

1913
03:55:10,380 --> 03:55:11,560
yeah

1914
03:55:11,560 --> 03:55:14,800
okay

1915
03:55:14,800 --> 03:55:17,640
that's the example

1916
03:55:17,640 --> 03:55:19,080
anything else we want to

1917
03:55:19,080 --> 03:55:21,380
bring up here

1918
03:55:21,380 --> 03:55:23,740
check if there are

1919
03:55:23,740 --> 03:55:25,640
any questions in the notes

1920
03:55:25,640 --> 03:55:27,480
but it doesn't seem so

1921
03:55:27,480 --> 03:55:31,580
yeah but yeah I think one

1922
03:55:31,580 --> 03:55:33,320
comment in the notes is about

1923
03:55:33,320 --> 03:55:34,700
Marimo notebooks

1924
03:55:34,700 --> 03:55:37,540
and yeah so there's a number

1925
03:55:37,540 --> 03:55:39,020
of other

1926
03:55:39,020 --> 03:55:45,720
like jupiter alternatives that for example marimo i think it's for python but also pluto for julia

1927
03:55:45,720 --> 03:55:52,780
instead and these are a kind of notebook that is that compared to jupiter they have something

1928
03:55:52,780 --> 03:55:59,020
more so they are reactive so if you change for example in in those notebooks if you change one

1929
03:55:59,020 --> 03:56:04,380
cell if you change like uh num points then all the other cells that depend on that would actually

1930
03:56:04,380 --> 03:56:12,780
run. And this is, I think, can be useful. Of course, if you have cells that take very long

1931
03:56:12,780 --> 03:56:21,880
to run, you may be careful about doing that. But still, it's like a little improvement over

1932
03:56:21,880 --> 03:56:26,800
Jupyter from the point of view of reactivity. From other things, I think there's a lot of tooling

1933
03:56:26,800 --> 03:56:28,000
around Jupyter Notebooks

1934
03:56:28,000 --> 03:56:30,720
that we are going to briefly

1935
03:56:30,720 --> 03:56:31,700
skim over.

1936
03:56:33,220 --> 03:56:34,880
Which is...

1937
03:56:34,880 --> 03:56:35,020
Yeah.

1938
03:56:37,120 --> 03:56:38,660
Which unfortunately doesn't apply to

1939
03:56:38,660 --> 03:56:39,540
other kinds of notebooks.

1940
03:56:40,500 --> 03:56:41,900
So, yeah. But

1941
03:56:41,900 --> 03:56:44,880
that's why I think we teach Jupyter Notebooks.

1942
03:56:46,140 --> 03:56:46,560
I don't know.

1943
03:56:46,580 --> 03:56:47,720
Should we have a break now?

1944
03:56:48,620 --> 03:56:49,760
Yeah. So, I mean,

1945
03:56:49,840 --> 03:56:51,620
R has its own

1946
03:56:51,620 --> 03:56:53,680
sort of infrastructure

1947
03:56:53,680 --> 03:56:55,600
and R Markdown has

1948
03:56:55,600 --> 03:56:57,060
most of the features

1949
03:56:57,060 --> 03:56:59,560
so you can do

1950
03:56:59,560 --> 03:57:01,640
things like well I mean

1951
03:57:01,640 --> 03:57:03,520
it has most of the same features that we haven't

1952
03:57:03,520 --> 03:57:05,240
actually talked about yet and Pluto

1953
03:57:05,240 --> 03:57:07,540
is also kind of designed to work well

1954
03:57:07,540 --> 03:57:08,780
with

1955
03:57:08,780 --> 03:57:11,680
version control and stuff like that

1956
03:57:11,680 --> 03:57:13,620
but Jupiter still has

1957
03:57:13,620 --> 03:57:15,340
the most mature environment

1958
03:57:15,340 --> 03:57:17,320
because it is the oldest of

1959
03:57:17,320 --> 03:57:19,420
these examples

1960
03:57:19,420 --> 03:57:21,640
yeah the validation

1961
03:57:21,640 --> 03:57:23,720
tools there's a lot of stuff there

1962
03:57:23,720 --> 03:57:25,180
which is cool

1963
03:57:25,180 --> 03:57:29,980
anyway shall we have a break now

1964
03:57:29,980 --> 03:57:31,560
let's take a break now

1965
03:57:31,560 --> 03:57:36,120
so we'll do

1966
03:57:36,120 --> 03:57:38,400
10 minutes until

1967
03:57:38,400 --> 03:57:40,360
13.52

1968
03:57:40,360 --> 03:57:42,780
we'll write that in the notes

1969
03:57:42,780 --> 03:57:46,820
are you writing it down

1970
03:57:46,820 --> 03:57:49,880
someone is doing it

1971
03:57:49,880 --> 03:57:51,500
someone is doing it

1972
03:57:51,500 --> 03:57:53,320
the invisible hand

1973
03:57:53,320 --> 03:58:05,220
thanks okay so see you at 53 past or 7 to right bye bye

1974
03:58:23,320 --> 03:58:23,940
you

1975
03:58:53,320 --> 03:58:53,940
you

1976
03:59:23,320 --> 03:59:23,940
you

1977
03:59:53,320 --> 03:59:53,940
you

1978
04:00:23,320 --> 04:00:23,940
you

1979
04:00:53,320 --> 04:00:53,940
you

1980
04:01:23,320 --> 04:01:23,940
you

1981
04:01:53,320 --> 04:01:53,940
you

1982
04:02:23,320 --> 04:02:23,940
you

1983
04:02:53,320 --> 04:02:53,940
you

1984
04:03:23,320 --> 04:03:23,940
you

1985
04:03:53,320 --> 04:03:53,940
you

1986
04:04:23,320 --> 04:04:23,940
you

1987
04:04:53,320 --> 04:04:53,940
you

1988
04:05:23,320 --> 04:05:23,940
you

1989
04:05:53,320 --> 04:05:53,940
you

1990
04:06:23,320 --> 04:06:23,940
you

1991
04:06:53,320 --> 04:06:53,940
you

1992
04:07:23,320 --> 04:07:23,940
you

1993
04:07:53,320 --> 04:08:11,820
Okay. Hello. Welcome back. I hope you had a good break and took some time to walk around.

1994
04:08:11,820 --> 04:08:13,860
so

1995
04:08:13,860 --> 04:08:16,920
next we'll go

1996
04:08:16,920 --> 04:08:18,720
into how you

1997
04:08:18,720 --> 04:08:20,300
share notebooks

1998
04:08:20,300 --> 04:08:21,740
how you include them

1999
04:08:21,740 --> 04:08:24,400
in your software

2000
04:08:24,400 --> 04:08:26,720
and just have other people

2001
04:08:26,720 --> 04:08:27,640
use them as well

2002
04:08:27,640 --> 04:08:30,580
and that starts with

2003
04:08:30,580 --> 04:08:31,620
version control

2004
04:08:31,620 --> 04:08:33,220
so

2005
04:08:33,220 --> 04:08:36,560
the notebooks

2006
04:08:36,560 --> 04:08:38,200
themselves especially

2007
04:08:38,200 --> 04:08:40,480
maybe I'll just show the notebook again

2008
04:08:40,480 --> 04:08:43,840
so this one includes an image

2009
04:08:43,840 --> 04:08:45,860
so it can be

2010
04:08:45,860 --> 04:08:49,500
it's not actually text content

2011
04:08:49,500 --> 04:08:51,840
and git is designed for text

2012
04:08:51,840 --> 04:08:56,440
so if you use it with just the default stuff

2013
04:08:56,440 --> 04:08:59,580
it can get a bit weird

2014
04:08:59,580 --> 04:09:02,920
but I mean it's not that bad

2015
04:09:02,920 --> 04:09:03,900
it does work

2016
04:09:03,900 --> 04:09:08,020
so there's a few different ways

2017
04:09:08,020 --> 04:09:09,400
of making it look better

2018
04:09:09,400 --> 04:09:12,380
so

2019
04:09:12,380 --> 04:09:15,420
there's the

2020
04:09:15,420 --> 04:09:17,800
nbdime extension for

2021
04:09:17,800 --> 04:09:19,740
jupiter and jupiter lab which is very

2022
04:09:19,740 --> 04:09:21,360
useful it allows you to

2023
04:09:21,360 --> 04:09:23,560
more directly compare

2024
04:09:23,560 --> 04:09:25,720
and merge notebooks

2025
04:09:25,720 --> 04:09:26,840
so

2026
04:09:26,840 --> 04:09:29,540
so it

2027
04:09:29,540 --> 04:09:31,480
is aware of the cell structure

2028
04:09:31,480 --> 04:09:33,680
here and it can tell you

2029
04:09:33,680 --> 04:09:35,680
what has actually changed in the cells

2030
04:09:35,680 --> 04:09:36,240
in the notebook

2031
04:09:36,240 --> 04:09:38,600
and doesn't

2032
04:09:38,600 --> 04:09:41,180
doesn't point out every change in

2033
04:09:41,180 --> 04:09:43,360
outputs necessarily

2034
04:09:43,360 --> 04:09:45,140
and so on so

2035
04:09:45,140 --> 04:09:46,220
that's useful

2036
04:09:46,220 --> 04:09:48,320
there's also other options

2037
04:09:48,320 --> 04:09:51,180
also for images if you have plots

2038
04:09:51,180 --> 04:09:53,300
then they're

2039
04:09:53,300 --> 04:09:55,400
saved in like a blob or text

2040
04:09:55,400 --> 04:09:57,300
base64 in the

2041
04:09:57,300 --> 04:09:59,120
notebook file and yeah

2042
04:09:59,120 --> 04:10:01,340
with nbdime you can actually have a nicer

2043
04:10:01,340 --> 04:10:02,940
yeah so we have

2044
04:10:02,940 --> 04:10:05,360
people show that in a moment

2045
04:10:05,360 --> 04:10:07,380
well maybe it's better to

2046
04:10:07,380 --> 04:10:08,980
just list the options from here.

2047
04:10:10,520 --> 04:10:13,620
So, I mean, there is also this JupyterLab Git

2048
04:10:13,620 --> 04:10:15,600
and JupyterLab GitHub extensions,

2049
04:10:15,600 --> 04:10:19,180
which are useful depending on what you use.

2050
04:10:19,180 --> 04:10:20,940
Here we'll show nbdime

2051
04:10:20,940 --> 04:10:24,440
and also show some things on GitHub.

2052
04:10:24,440 --> 04:10:29,440
So, yeah, so the first thing, I guess,

2053
04:10:30,460 --> 04:10:32,600
we'll just show what happens when things go wrong.

2054
04:10:32,600 --> 04:10:37,600
So here's an image I can actually open this pull request

2055
04:10:39,080 --> 04:10:43,300
or a comparison between two different versions

2056
04:10:43,300 --> 04:10:44,700
of a code in GitHub.

2057
04:10:46,180 --> 04:10:47,180
Let's see what it looks like.

2058
04:10:47,180 --> 04:10:49,480
Well, it doesn't even want to show it to me.

2059
04:10:49,480 --> 04:10:50,980
It's a large diff.

2060
04:10:52,500 --> 04:10:55,720
So we've changed some things in the notebook

2061
04:10:56,900 --> 04:11:01,900
and then there's this huge blob of text.

2062
04:11:02,600 --> 04:11:09,840
which is actually the image and the image is a bit different in some part of the image

2063
04:11:09,840 --> 04:11:15,060
somewhere is a bit different and it's very hard to see what's going on there's also this

2064
04:11:15,060 --> 04:11:24,380
text output cell here that's slightly changed so there is an option in github that you can enable

2065
04:11:24,380 --> 04:11:32,080
It's been a, what do they actually call them, feature preview.

2066
04:11:32,280 --> 04:11:35,080
I think it's been a feature preview for several years now.

2067
04:11:35,760 --> 04:11:45,380
But you go to the feature preview from this preferences section and enable rich Jupyter notebook diffs.

2068
04:11:46,480 --> 04:11:46,600
Okay.

2069
04:11:48,360 --> 04:11:52,640
And then if you reload the page, it should look very different.

2070
04:11:54,380 --> 04:12:00,560
let's see if it works okay so this line in the cell has changed this line has

2071
04:12:00,560 --> 04:12:08,060
changed and this image has changed so that is a lot better and well this

2072
04:12:08,060 --> 04:12:12,680
output has changed here you can also go back to the original source code which

2073
04:12:12,680 --> 04:12:21,860
is for this part it works but for the image it's not very useful okay so maybe

2074
04:12:21,860 --> 04:12:30,740
I will close this one okay and there is a similar well there is an interface for git in

2075
04:12:30,740 --> 04:12:37,460
JupyterLab itself and that is this nbdime extension it's already installed in the code

2076
04:12:37,460 --> 04:12:42,340
refinery environment but if you're creating a new python environment that includes Jupyter then

2077
04:12:44,100 --> 04:12:50,420
or well any other environment that includes Jupyter you'll have to include it for it to

2078
04:12:50,420 --> 04:13:06,420
work. Okay so we already I think kind of showed the the actual text that the notebook contains

2079
04:13:06,420 --> 04:13:13,940
maybe we should do that again. So here's the the file browser view and I think I should be able to

2080
04:13:13,940 --> 04:13:23,780
open it from here yeah open so this is actually a json file which is a text file that contains these

2081
04:13:24,340 --> 04:13:33,940
cells this is even a bit too stylized maybe the maybe i can open it with the

2082
04:13:33,940 --> 04:13:40,580
text editor so this is the actual text content of this file that we just wrote here

2083
04:13:40,580 --> 04:13:50,340
so it is text and it is something that you can handle with git but well here's the image again

2084
04:13:50,340 --> 04:13:59,780
um yeah and all of these outputs get uh gets changed every time you run the cell so

2085
04:13:59,780 --> 04:14:06,720
i mean there's just a nicer way of doing it it's not it's not that bad to start with the image

2086
04:14:06,720 --> 04:14:12,240
part is pretty bad but so here's the nbdime extension this is the button that gets added

2087
04:14:12,240 --> 04:14:18,880
when you install nbdime and there you can first of all i need to initialize the repost a repository

2088
04:14:18,880 --> 04:14:23,440
here because i haven't done that yet i don't have a git repository so i will initialize a

2089
04:14:23,440 --> 04:14:34,400
a Git repository in this. And now I have some untracked files, which is...

2090
04:14:37,280 --> 04:14:41,040
I don't actually know what these checkpoint files are. I assume it's because I have

2091
04:14:41,040 --> 04:14:48,720
JupyterLab open. But this is the actual file, pi.ipynb. And this is the example I downloaded

2092
04:14:48,720 --> 04:14:54,720
previously because um i wasn't planning to actually demonstrate this part so so now you stage you

2093
04:14:54,720 --> 04:15:03,280
stage the the yeah so i staged the pi dot ipy nb by clicking the plus button so what happens if you

2094
04:15:03,280 --> 04:15:10,480
change uh if you change the that file pi dot wine so if you change that because now it's staged

2095
04:15:10,480 --> 04:15:16,800
right so if you change that yeah i was planning to make a change so now it shows up in changed

2096
04:15:16,800 --> 04:15:25,360
I can view the diff. Maybe I should write this view here. So it's mostly the same.

2097
04:15:27,920 --> 04:15:29,280
It should show me the...

2098
04:15:33,920 --> 04:15:41,040
So this is the line that I changed. What is going on? Maybe it's showing me the diff to the commit.

2099
04:15:41,040 --> 04:15:44,920
that would be a bit annoying

2100
04:15:44,920 --> 04:15:46,560
leave this file

2101
04:15:46,560 --> 04:15:47,660
have you changed the file?

2102
04:15:48,120 --> 04:15:49,040
have you saved it?

2103
04:15:50,240 --> 04:15:52,220
I changed this and saved it

2104
04:15:52,220 --> 04:15:54,660
so now it's back to the original

2105
04:15:54,660 --> 04:15:57,280
and now it's showing some changes

2106
04:15:57,280 --> 04:16:00,560
I guess you need to save it

2107
04:16:00,560 --> 04:16:02,940
because if you don't save it

2108
04:16:02,940 --> 04:16:05,140
then the kit doesn't see it at all

2109
04:16:05,140 --> 04:16:06,100
but yeah

2110
04:16:06,100 --> 04:16:08,580
I think we found

2111
04:16:08,580 --> 04:16:10,320
an issue

2112
04:16:10,320 --> 04:16:17,680
with np time. I've never actually tried to do that. So if I just stage the file and commit

2113
04:16:17,680 --> 04:16:24,780
first and then try it, maybe that will work. Let's see. Okay. So I'll just call this an initial

2114
04:16:24,780 --> 04:16:37,460
commit. Traditional commit message. And then what should we change? Let's change this color

2115
04:16:37,460 --> 04:16:47,700
from red to orange okay now you already see that there's some change and we can go see a diff maybe

2116
04:16:47,700 --> 04:16:55,380
it will work this time okay so now okay a bit more space for it so you see that the line has changed

2117
04:16:56,260 --> 04:17:04,660
but actually um i have only changed this line i haven't changed the the actual color so let's go

2118
04:17:04,660 --> 04:17:09,220
and you need to rerun so now we change the image as well

2119
04:17:09,220 --> 04:17:15,140
and we can now again go here and see what the difference is

2120
04:17:15,140 --> 04:17:22,500
okay did i save it no i did not let's go and save it okay yeah

2121
04:17:22,500 --> 04:17:25,780
okay and

2122
04:17:28,100 --> 04:17:33,140
okay so it didn't show any new differences but now

2123
04:17:33,140 --> 04:17:39,140
that i click this button again now it shows some differences um so i had to close it and reopen

2124
04:17:39,700 --> 04:17:47,060
and now it's showing a difference in this image and in the outputs outputs uh let's remove that

2125
04:17:47,060 --> 04:17:54,340
there so um the outputs have changed because i re-ran the code and it's random so it's going

2126
04:17:54,340 --> 04:18:02,100
to be different every time okay so now yeah we can kind of nicely see the difference here

2127
04:18:02,100 --> 04:18:10,340
I haven't enabled this in the command line so if you are using git in the command line

2128
04:18:10,340 --> 04:18:18,540
I will need to activate whoops activate the code refinery repository

2129
04:18:18,540 --> 04:18:27,820
I should have thought about this before I started okay contact with code refinery all right here we

2130
04:18:27,820 --> 04:18:43,980
And now if I do git diff here, it's going to show me that the JSON file, so this, it's

2131
04:18:43,980 --> 04:18:48,620
relatively structured, relatively nice to read. I don't really care about the execution counts

2132
04:18:48,620 --> 04:18:55,820
for the cells or this, whatever this is. I do care about the image being different, but

2133
04:18:55,820 --> 04:19:07,500
this is not what I want to see. So you can also go to, well, I mean, go to the notes and

2134
04:19:07,500 --> 04:19:14,460
copy paste this or get it in some different way. So it's, you change the git config and

2135
04:19:15,740 --> 04:19:20,060
include nbdime in there. Okay, that looked weird.

2136
04:19:20,060 --> 04:19:30,340
i was moving to a different window um to get the terminal window back and that looked a little bit

2137
04:19:30,340 --> 04:19:35,660
weird on the screen share okay so now i can do a git diff again and let's see what it looks like

2138
04:19:35,660 --> 04:19:40,840
is it different it is a bit different so now it's um it's not really showing me the image

2139
04:19:40,840 --> 04:19:48,220
showing me that it's different which is better right that's like um how much can you do in a

2140
04:19:48,220 --> 04:19:54,400
terminal. But it is definitely better this way. Okay,

2141
04:19:54,680 --> 04:19:59,740
much less, much less use less information in the difficulty.

2142
04:19:59,920 --> 04:20:07,900
Yeah. Okay, so but we should really move on actually. I will

2143
04:20:09,680 --> 04:20:16,480
commit this. Okay, orange, change the orange. Oh, I will

2144
04:20:16,480 --> 04:20:18,520
need to first stage this one

2145
04:20:18,520 --> 04:20:20,300
and commit. Okay,

2146
04:20:20,500 --> 04:20:22,620
so let's move to

2147
04:20:22,620 --> 04:20:24,180
sharing notebooks now.

2148
04:20:25,240 --> 04:20:26,480
So we talked about

2149
04:20:26,480 --> 04:20:28,660
version control, and

2150
04:20:28,660 --> 04:20:30,620
again, there's different ways of sharing a notebook.

2151
04:20:31,260 --> 04:20:32,620
So there's

2152
04:20:32,620 --> 04:20:34,140
some

2153
04:20:34,140 --> 04:20:36,380
free, some commercial alternatives

2154
04:20:36,380 --> 04:20:38,220
where you can...

2155
04:20:38,220 --> 04:20:39,220
Let me back up a second.

2156
04:20:39,920 --> 04:20:42,680
The big thing here is

2157
04:20:42,680 --> 04:20:44,460
if you share

2158
04:20:44,460 --> 04:20:46,460
something online, just as a web

2159
04:20:46,480 --> 04:20:52,480
page that people can see they will not be able to run the code but there's plenty of ways to do

2160
04:20:52,480 --> 04:21:01,320
that so you can take this notebook and turn it into a essentially a text that includes this

2161
04:21:01,320 --> 04:21:07,980
website that includes the text and then includes also these code blocks and images and that's

2162
04:21:07,980 --> 04:21:12,900
really nice that's really good for generating documentation for example but you won't be able

2163
04:21:12,900 --> 04:21:14,900
to run the code from inside that website.

2164
04:21:16,080 --> 04:21:17,360
Then there's plenty of options

2165
04:21:17,360 --> 04:21:22,380
for creating a runnable shared document in some way.

2166
04:21:22,880 --> 04:21:26,180
And that does mean that you need a server

2167
04:21:26,180 --> 04:21:27,660
that actually runs the code.

2168
04:21:28,100 --> 04:21:32,360
So we'll show you how Binder works as a demonstration.

2169
04:21:32,940 --> 04:21:34,560
It's a really nice way of doing it.

2170
04:21:37,040 --> 04:21:40,920
And that allows people to actually run the code.

2171
04:21:41,040 --> 04:21:42,040
But there's other options.

2172
04:21:42,040 --> 04:21:52,600
And this NB viewer, this renderer, NB Sphinx, they allow you to turn the notebook into a

2173
04:21:52,600 --> 04:21:59,800
website. So not run the code, but otherwise great. So one option, save and export as

2174
04:22:00,680 --> 04:22:10,200
HTML, later markdown, all kinds of options. And then there's these platforms that allow you to

2175
04:22:10,200 --> 04:22:17,000
actually run it on the cloud and well and there's binder okay so first let's

2176
04:22:19,400 --> 04:22:23,000
ah sorry okay yes i was confused for a moment this is the next part

2177
04:22:25,400 --> 04:22:30,600
so uh let's go into the binder section but to do that we'll need to get the

2178
04:22:30,600 --> 04:22:36,520
notebook actually online so now it is only here only locally on my my laptop

2179
04:22:36,520 --> 04:22:44,020
up. So I think we'll actually need to create a new GitHub repository. That is actually

2180
04:22:44,020 --> 04:22:51,160
the first step in the exercise. So that's good. So here's a nice link, github.com slash

2181
04:22:51,160 --> 04:22:55,780
new, and that will create a new repository. I didn't want to actually close the website.

2182
04:22:55,780 --> 04:23:06,260
Okay. Yeah. All right. So we will not use a template. What should we call it? CR demo

2183
04:23:06,260 --> 04:23:17,240
PyCalc is written correctly. Okay, so this is a it's not actually in short

2184
04:23:17,240 --> 04:23:22,520
and memorable in any way but it is very descriptive of what this is and

2185
04:23:22,520 --> 04:23:31,140
something I will delete after sometime after this this course. So I'm going to

2186
04:23:31,140 --> 04:23:39,560
make it public so that everybody can access it. And importantly, I'm not going to generate a

2187
04:23:39,560 --> 04:23:47,880
readme file. No, I am going to generate a readme file. And then I'm going to, I guess, clone and

2188
04:23:47,880 --> 04:23:55,640
add the notebook. Okay, let's see where this goes. So I will add a readme file. It is a nice thing to

2189
04:23:55,640 --> 04:24:00,280
it's just that I already have a GitHub repository. No, I already have a Git repository, so

2190
04:24:01,480 --> 04:24:08,680
I'm not going to use the same one, I suppose. Okay, so let's do that. Why not? Let's also

2191
04:24:08,680 --> 04:24:15,080
add a license since we're at it. Make it MIT, for example. We talked about licenses yesterday.

2192
04:24:16,840 --> 04:24:22,120
It's good to have a license early, right? Okay, and you can make it more restrictive

2193
04:24:22,120 --> 04:24:28,360
later if you want to um here we are so we have a license and a readme file the readme file is

2194
04:24:28,360 --> 04:24:36,680
pretty much empty okay so so now you need to add your your code somehow right yeah so now i'm going

2195
04:24:36,680 --> 04:24:44,280
to actually just add the notebook and not push from the repository and i guess that the reason

2196
04:24:44,280 --> 04:24:52,600
for that is that in the first demonstration we did not make it a git repository but I did

2197
04:24:52,600 --> 04:24:58,280
actually make it a git repository already so well anyway let's go with the exercise as it's described

2198
04:24:59,400 --> 04:25:02,280
so I will go from here upload files

2199
04:25:02,280 --> 04:25:14,880
and I guess choose files then is good. Where is it? Okay I'm going to have

2200
04:25:14,880 --> 04:25:26,440
to move my windows a little bit just to see. Source, Code Refinery, Jupyter, here we go.

2201
04:25:26,440 --> 04:25:34,740
So, okay, there's pi.ipinb, okay.

2202
04:25:35,140 --> 04:25:39,580
And then now I need to give a commit message to add the notebook.

2203
04:25:45,740 --> 04:25:48,620
Okay, commit directly to the main branch, yes.

2204
04:25:53,340 --> 04:25:56,160
Okay, now there is another thing that I will need to do.

2205
04:25:56,440 --> 04:26:04,500
before the requirements yeah so in order for so we're going to run this on binder but in order

2206
04:26:04,500 --> 04:26:11,360
for it to know or to be able to run it it needs to know what what other python packages i need

2207
04:26:11,360 --> 04:26:20,100
so i'm going to add another file i'm going to call it requirements dot txt

2208
04:26:20,100 --> 04:26:28,600
and do we have a list of this if this is so if you switch to the plot lib 3.4.1

2209
04:26:28,600 --> 04:26:37,200
um yeah what i was going for is um so if you use python it will recognize it from this requirements

2210
04:26:37,200 --> 04:26:44,380
or txt file if you want r it will you will need to add a runtime runtime.txt and it will recognize

2211
04:26:44,380 --> 04:26:50,140
that you are using r if you have this file you can even have both at the same time

2212
04:26:51,980 --> 04:26:58,620
so what i'm going to do is add a requirements.txt and add matplotlib

2213
04:27:00,060 --> 04:27:05,740
and i'm going to use a specific version just because it is the version that i know it works with

2214
04:27:05,740 --> 04:27:10,220
Is it good for reproducibility?

2215
04:27:10,220 --> 04:27:20,860
Yeah. So in a moment, you will see that Binder actually creates a container to run this code in.

2216
04:27:22,300 --> 04:27:27,740
So this will work pretty well. Okay, create requirements of TXT actually is very descriptive

2217
04:27:27,740 --> 04:27:34,140
here. It's pretty much, I mean, I could say, describe dependencies or something, but

2218
04:27:35,740 --> 04:27:47,120
This is good. Okay. Now the next thing we want to do is go to mybinder.org and it opens this website.

2219
04:27:48,960 --> 04:27:54,900
And actually I'm going to switch over back to the repository and just copy the name of the repository.

2220
04:27:54,900 --> 04:28:01,300
So that's my GitHub username and then the repository's specific name. And that goes here.

2221
04:28:01,300 --> 04:28:09,140
Now, the name of the notebook is pi.i.pi.nb.

2222
04:28:09,560 --> 04:28:11,260
Okay, I'll just put that there.

2223
04:28:13,180 --> 04:28:17,920
pi.i.pi.nb.

2224
04:28:18,240 --> 04:28:22,620
Okay, so IPython notebook and from the main branch.

2225
04:28:23,740 --> 04:28:29,420
So this is a file that it opens to the user by default,

2226
04:28:29,420 --> 04:28:32,780
but you can leave it empty and then it will just open a file browser instead.

2227
04:28:33,580 --> 04:28:39,020
Okay so this actually constructs a web address you need to go to to launch the

2228
04:28:41,260 --> 04:28:48,460
launch the website. So we could click launch here but actually let's add a batch to the readme file.

2229
04:28:48,460 --> 04:28:56,300
So we'll have a markdown file and it has this address to this binder logo

2230
04:28:56,300 --> 04:29:02,780
and then the address that opens the binder as a link. So I'll just copy that.

2231
04:29:04,620 --> 04:29:10,140
This button is for copying and change the readme file.

2232
04:29:12,220 --> 04:29:18,140
Okay, so this will add an image that allows people to quickly

2233
04:29:18,940 --> 04:29:24,940
recognize that this repository works in Binder and that you can open it. So

2234
04:29:24,940 --> 04:29:32,700
Let's save that file. I should do it with the mouse. So commit changes. Add

2235
04:29:33,260 --> 04:29:40,700
binder button to readme. Okay and let's again commit directly to the main branch.

2236
04:29:42,860 --> 04:29:49,980
And there we are. So actually let's go back to the main page of the repository.

2237
04:29:49,980 --> 04:29:52,700
So now we can actually launch the binder page from here.

2238
04:29:53,580 --> 04:29:57,100
So I will go and close this one and hope that this works.

2239
04:30:00,460 --> 04:30:00,960
Okay.

2240
04:30:05,020 --> 04:30:08,220
It takes a while to build a new container.

2241
04:30:09,420 --> 04:30:11,580
It's actually waiting is done.

2242
04:30:11,580 --> 04:30:17,020
So we already have a virtual machine that we are running stuff on,

2243
04:30:17,020 --> 04:30:21,580
but we are now waiting for the container to finish building so that we can actually run

2244
04:30:21,580 --> 04:30:25,580
JupyterLab inside that container. Okay.

2245
04:30:29,420 --> 04:30:31,340
What else should we go through while we wait?

2246
04:30:34,540 --> 04:30:38,460
So I did all of these instructions I think.

2247
04:30:38,460 --> 04:30:47,660
Yeah, so people can now go and look at my work in the cloud.

2248
04:30:49,440 --> 04:30:52,940
If this finishes correctly, if it doesn't, then we'll fix it.

2249
04:30:55,620 --> 04:31:00,040
Yeah, well, let's go on while it's doing its thing.

2250
04:31:00,040 --> 04:31:07,740
So yeah, you can go even better, of course, get a DOI and launch a full version of your software.

2251
04:31:08,460 --> 04:31:19,160
Should we, how much time do we have and how much stuff do we have to go?

2252
04:31:20,080 --> 04:31:28,400
So, oh, we have plenty of time, I think.

2253
04:31:28,400 --> 04:31:33,680
so this exercise is about

2254
04:31:33,680 --> 04:31:35,840
sharing

2255
04:31:35,840 --> 04:31:37,640
doing it yourself

2256
04:31:37,640 --> 04:31:39,560
which you can definitely do

2257
04:31:39,560 --> 04:31:40,680
after this session

2258
04:31:40,680 --> 04:31:44,080
and this is about playing around

2259
04:31:44,080 --> 04:31:46,060
with this inequality repository

2260
04:31:46,060 --> 04:31:46,900
which we

2261
04:31:46,900 --> 04:31:52,080
we talked about in the first

2262
04:31:52,080 --> 04:31:52,900
section

2263
04:31:52,900 --> 04:31:58,120
if I was

2264
04:31:58,120 --> 04:32:06,460
this fast, then what did I skip over? And so if anything is

2265
04:32:06,460 --> 04:32:10,880
unclear, please ask questions. And if you want to do this

2266
04:32:10,880 --> 04:32:14,680
yourself, you can follow the steps, try to do the same steps

2267
04:32:14,680 --> 04:32:21,220
that I did. And feel free to ask questions then later. I mean,

2268
04:32:21,660 --> 04:32:24,700
yeah, a good amount of the time usually in this exercise is

2269
04:32:24,700 --> 04:32:29,020
waiting for binder so we can have a chat about other stuff as we wait

2270
04:32:31,660 --> 04:32:45,020
i have actually a remark so regarding tooling for for jupiter uh so i there's one one uh like

2271
04:32:45,020 --> 04:32:54,840
one python program called nb val which can be used to validate your jupyter notebook so if you

2272
04:32:54,840 --> 04:33:02,560
have a jupyter notebook and you want to make sure that you have run all the cells and you want to

2273
04:33:02,560 --> 04:33:09,300
test it for example test if the output is the same in different environments or you know even

2274
04:33:09,300 --> 04:33:14,980
after you have changed some underlying code that sits somewhere else you can use this tool and be

2275
04:33:14,980 --> 04:33:24,420
well and and get the you know just an idea whether or not anything has changed and of course in this

2276
04:33:24,420 --> 04:33:29,860
particular case with the calculation of pi it would always give you an error

2277
04:33:31,780 --> 04:33:38,260
because it's random yeah if you are comparing the value of pi to the correct value of pi then

2278
04:33:38,260 --> 04:33:43,460
it will not be or if you yeah or if you are correcting comparing two random values of pi

2279
04:33:43,460 --> 04:33:48,820
you may have a problem yeah so here possibly for reproducibility you would have to set to set the

2280
04:33:48,820 --> 04:33:56,500
seed of the random number generator oh right okay so if it's yeah yeah but in any case yeah so

2281
04:33:57,140 --> 04:34:04,020
comparing two notebooks maybe um you know maybe so you need to be careful there because there

2282
04:34:04,020 --> 04:34:06,800
There are some things that perhaps there can be some differences

2283
04:34:06,800 --> 04:34:08,200
you don't actually care about.

2284
04:34:08,780 --> 04:34:10,620
Some differences instead are significant

2285
04:34:10,620 --> 04:34:12,560
and may mean that there is a problem.

2286
04:34:13,560 --> 04:34:14,300
Some instead not.

2287
04:34:14,660 --> 04:34:15,060
So, yeah.

2288
04:34:15,260 --> 04:34:17,120
But I think it's a valuable tool.

2289
04:34:17,840 --> 04:34:18,480
Anyway, finally.

2290
04:34:18,780 --> 04:34:19,620
Yeah, that sounds useful.

2291
04:34:20,560 --> 04:34:22,620
And, I mean, tomorrow we'll...

2292
04:34:23,180 --> 04:34:24,500
Testing is tomorrow, right?

2293
04:34:25,860 --> 04:34:27,140
But finally loaded.

2294
04:34:27,140 --> 04:34:32,300
We'll also talk about how you compare, for example, random values.

2295
04:34:32,540 --> 04:34:33,580
That's one of the things.

2296
04:34:34,020 --> 04:34:36,280
and automated testing in general.

2297
04:34:36,280 --> 04:34:37,120
So, okay.

2298
04:34:37,120 --> 04:34:40,460
Yeah, it's loaded and it shows exactly the same.

2299
04:34:42,000 --> 04:34:43,260
It should be the lab interface.

2300
04:34:43,260 --> 04:34:47,600
Oh, except without the Git interface.

2301
04:34:48,940 --> 04:34:52,760
And I can run everything in here.

2302
04:34:53,720 --> 04:34:55,980
I can also change the numbers and run them.

2303
04:34:57,020 --> 04:35:00,720
So I get a different result.

2304
04:35:00,720 --> 04:35:04,640
Ooh, that's a problem.

2305
04:35:05,900 --> 04:35:07,780
Okay, let's finish running.

2306
04:35:08,060 --> 04:35:10,540
So yeah, with 100 points, you don't get very close.

2307
04:35:15,740 --> 04:35:22,100
We have a two new version of NumPy compared to Matplotlib.

2308
04:35:22,740 --> 04:35:26,660
So Matplotlib is trying to use something from NumPy 2.

2309
04:35:26,660 --> 04:35:30,540
so either I need to set a newer version of NumPy

2310
04:35:30,540 --> 04:35:33,340
a newer version of Matplotlib or a different version

2311
04:35:33,340 --> 04:35:36,180
or I need to

2312
04:35:36,180 --> 04:35:39,600
use a different version of NumPy

2313
04:35:39,600 --> 04:35:48,840
I will not have time to demonstrate that now

2314
04:35:48,840 --> 04:35:49,880
I'm almost sure

2315
04:35:49,880 --> 04:35:51,800
Is there a possibility in Binder

2316
04:35:51,800 --> 04:35:54,440
to set up a container and tell it

2317
04:35:54,440 --> 04:35:56,160
use this container

2318
04:35:56,160 --> 04:35:59,040
instead of just saying a requirement file?

2319
04:35:59,420 --> 04:36:00,380
Oh, I don't know.

2320
04:36:01,840 --> 04:36:06,840
I mean, I would assume so, but I don't know.

2321
04:36:07,760 --> 04:36:11,360
That also sounds like specialized enough that it's,

2322
04:36:13,940 --> 04:36:15,600
well, we can figure that out later,

2323
04:36:15,600 --> 04:36:18,260
and if somebody else wants to know, just ask.

2324
04:36:19,180 --> 04:36:23,800
There's also often when you can run some terminal commands,

2325
04:36:23,900 --> 04:36:25,080
bash commands, for example,

2326
04:36:26,160 --> 04:36:31,160
Okay, so can I do pip install upgrade matplotlib?

2327
04:36:36,280 --> 04:36:39,640
Oh, oh right, okay, there's a space there.

2328
04:36:39,640 --> 04:36:41,000
There shouldn't be a space.

2329
04:36:41,900 --> 04:36:46,900
Yeah, so this is one thing you can do in Jupyter.

2330
04:36:47,520 --> 04:36:49,760
You can try to get it to work.

2331
04:36:49,760 --> 04:36:51,920
And I guess I need to restart the kernel.

2332
04:36:51,920 --> 04:36:55,560
So is that something I can do from here?

2333
04:36:56,160 --> 04:37:02,640
oh actually that is this button, restart the kernel and rerun all cells.

2334
04:37:02,640 --> 04:37:07,040
So we'll see if the error goes away, this is just trying to fix some small thing.

2335
04:37:07,760 --> 04:37:14,400
Okay all right here we are, now it runs. So to fix this I would go to the repository then and

2336
04:37:14,400 --> 04:37:16,480
tell it to use a newer version of Matplotlib.

2337
04:37:16,480 --> 04:37:30,880
Okay. Next, we have the feedback section again in the notes. Let's see, where do I have the

2338
04:37:30,880 --> 04:37:40,660
notes open? Yeah. So let's go there. Unless you have more ideas. So I think I'm for feedback.

2339
04:37:40,660 --> 04:37:51,780
so yeah please fill in any feedback you have

2340
04:37:51,780 --> 04:37:52,260
and

2341
04:37:52,260 --> 04:37:55,920
ask if you have any questions

2342
04:37:55,920 --> 04:37:59,520
we have a few more minutes

2343
04:37:59,520 --> 04:38:00,580
in the schedule

2344
04:38:00,580 --> 04:38:05,660
so we can respond to any questions

2345
04:38:05,660 --> 04:38:07,440
but otherwise just

2346
04:38:07,440 --> 04:38:08,440
have a nice day

2347
04:38:08,440 --> 04:38:18,600
So, maybe there are some questions we can go back to and try to go on.

2348
04:38:21,780 --> 04:38:22,580
Hello.

2349
04:38:23,780 --> 04:38:23,980
Hey.

2350
04:38:25,360 --> 04:38:26,200
Hello.

2351
04:38:26,200 --> 04:38:26,300
Hello.

2352
04:38:26,300 --> 04:38:41,260
so i think the question about jupyter notebooks and uh uh version control uh yeah i think we

2353
04:38:41,260 --> 04:38:46,620
recover that i hope i hope that the person who wrote that is satisfied

2354
04:38:46,620 --> 04:38:54,180
um i think that sometimes uh if a jupyter notebook is too long it doesn't show on gitlab

2355
04:38:54,180 --> 04:39:02,980
but you may actually so it may take time but if you if you press on the button show anyway

2356
04:39:02,980 --> 04:39:08,820
it should show it although it could be that if if it contains images and the images are

2357
04:39:10,580 --> 04:39:20,100
are too large and the notebook is displayed as like literally so not as image but as a as a

2358
04:39:20,100 --> 04:39:28,420
json file then yeah you get very large large uh files and and there won't be any interesting

2359
04:39:28,420 --> 04:39:34,980
information for you to visualize there and yeah i think there's a question about reactive notebooks

2360
04:39:35,940 --> 04:39:43,700
and so what do people think about reactive notebooks i think we mentioned this already

2361
04:39:43,700 --> 04:39:52,820
uh the one thing about this uh about reactive notebooks is that they do not contain the output

2362
04:39:52,820 --> 04:40:00,340
so for example uh marimo and also bruto do not contain the output and they are just playing

2363
04:40:00,340 --> 04:40:06,100
python files so they are easier to version control but on the other hand yeah you you miss the

2364
04:40:06,100 --> 04:40:12,300
computational narrative there so you don't have the the outputs so it's like a very different

2365
04:40:12,300 --> 04:40:12,660
kind of

2366
04:40:12,660 --> 04:40:13,000
tool I

2367
04:40:13,000 --> 04:40:13,360
would say

2368
04:40:13,360 --> 04:40:17,620
what are

2369
04:40:17,620 --> 04:40:18,140
your opinions

2370
04:40:18,140 --> 04:40:18,540
on this

2371
04:40:18,540 --> 04:40:19,740
I mean

2372
04:40:19,740 --> 04:40:20,200
you can

2373
04:40:20,200 --> 04:40:21,040
with

2374
04:40:21,040 --> 04:40:22,080
reactive

2375
04:40:22,080 --> 04:40:22,540
notebooks

2376
04:40:22,540 --> 04:40:23,580
for example

2377
04:40:23,580 --> 04:40:24,060
with Pluto

2378
04:40:24,060 --> 04:40:24,920
you can

2379
04:40:24,920 --> 04:40:26,120
still export

2380
04:40:26,120 --> 04:40:26,720
it as

2381
04:40:26,720 --> 04:40:27,660
an HTML

2382
04:40:27,660 --> 04:40:28,160
file

2383
04:40:28,160 --> 04:40:29,240
export it

2384
04:40:29,240 --> 04:40:29,440
as a

2385
04:40:29,440 --> 04:40:29,720
website

2386
04:40:29,720 --> 04:40:30,920
and then

2387
04:40:30,920 --> 04:40:31,240
it will

2388
04:40:31,240 --> 04:40:31,740
contain the

2389
04:40:31,740 --> 04:40:32,440
outputs as

2390
04:40:32,440 --> 04:40:32,740
well

2391
04:40:32,740 --> 04:40:34,260
it essentially

2392
04:40:34,260 --> 04:40:34,620
is just

2393
04:40:34,620 --> 04:40:35,440
running the

2394
04:40:35,440 --> 04:40:36,360
notebook and

2395
04:40:36,360 --> 04:40:37,140
including the

2396
04:40:37,140 --> 04:40:37,480
outputs

2397
04:40:37,480 --> 04:40:38,900
but the

2398
04:40:38,900 --> 04:40:40,020
source code

2399
04:40:40,020 --> 04:40:40,520
for the

2400
04:40:40,520 --> 04:40:40,820
notebook

2401
04:40:40,820 --> 04:40:41,340
doesn't

2402
04:40:41,340 --> 04:40:41,960
contain the

2403
04:40:41,960 --> 04:40:49,920
outputs like in um the source code for a uh a jupiter notebook is well it is this change in

2404
04:40:49,920 --> 04:40:56,120
file that i showed and it did contain like the full image as this huge blob of text um so it

2405
04:40:56,120 --> 04:41:02,640
contains all of the outputs there so it's a different philosophy yeah one could take this

2406
04:41:02,640 --> 04:41:10,460
this note this kind of reactive notebooks and execute them and add a like a generate add those

2407
04:41:10,460 --> 04:41:17,740
the content of that to your documentation site or to your GitHub pages, let's say.

2408
04:41:17,740 --> 04:41:27,660
One could do that to make sure that content is visible somehow, so that the results are visible.

2409
04:41:33,340 --> 04:41:37,500
There's a question about the Git connection in JupyterLab,

2410
04:41:37,500 --> 04:41:46,780
is it whether it's similar to git in vs code uh yeah looks like it it looks very similar

2411
04:41:47,340 --> 04:41:55,020
um we saw a couple of glitches maybe that wouldn't happen in vs code but um yeah i mean

2412
04:41:57,180 --> 04:42:03,740
the nbdime thing is just meant for working with jupyterlab and jupyter notebooks

2413
04:42:03,740 --> 04:42:07,740
so the version control system

2414
04:42:07,740 --> 04:42:09,140
that's included in VS Code

2415
04:42:09,140 --> 04:42:14,040
or essentially it is a user interface for Git

2416
04:42:14,040 --> 04:42:16,480
it is fully general

2417
04:42:16,480 --> 04:42:20,500
Yeah, I think there's possibly a distinction

2418
04:42:20,500 --> 04:42:21,780
that if I remember correctly

2419
04:42:21,780 --> 04:42:27,060
the Git source control for VS Code

2420
04:42:27,060 --> 04:42:33,340
looks at the state of the files you have in your editor

2421
04:42:33,340 --> 04:42:40,460
not at the state of the files you have saved on disk so this is yet another problem so sometimes

2422
04:42:40,460 --> 04:42:48,560
that there can be some some issues there because git in vs code looks at uh the code you have in

2423
04:42:48,560 --> 04:42:52,800
your editor and it can be different from the one that you have on disk so if i understand correctly

2424
04:42:52,800 --> 04:43:01,880
here nbdime and the extension on in jupyter lab looks at the state of the notebook as it is saved

2425
04:43:01,880 --> 04:43:03,920
on disk. So then

2426
04:43:03,920 --> 04:43:04,940
there was that problem.

2427
04:43:05,180 --> 04:43:07,720
It should always look at what's saved

2428
04:43:07,720 --> 04:43:09,080
on disk.

2429
04:43:10,060 --> 04:43:11,340
Okay, I have to try that.

2430
04:43:14,640 --> 04:43:15,960
At least there's a way

2431
04:43:15,960 --> 04:43:17,820
of getting VS Code to look only

2432
04:43:17,820 --> 04:43:19,100
at what's saved on disk.

2433
04:43:20,700 --> 04:43:22,080
But yeah, it depends

2434
04:43:22,080 --> 04:43:22,980
on what you're used to.

2435
04:43:22,980 --> 04:43:24,720
What is more useful?

2436
04:43:28,680 --> 04:43:30,740
Yeah, just saying. This kind of

2437
04:43:30,740 --> 04:43:40,580
git extensions uh git integrations they they can get a little uh weird in when because of this

2438
04:43:40,580 --> 04:43:45,220
additional state that they have the state of the fight in the editor or and the state of the file

2439
04:43:45,220 --> 04:43:54,020
and this plus all the other things that that git has so all the you know the stage version and so

2440
04:43:54,020 --> 04:44:00,900
one so it's you know it gets better it is already uh complicated enough with the um

2441
04:44:00,900 --> 04:44:06,900
separate staged committed and on this version and well then you do also have the version in

2442
04:44:06,900 --> 04:44:17,860
your that you have currently open if you haven't saved it so yeah there's a comment for the days

2443
04:44:17,860 --> 04:44:29,580
lesson that it's missing hands-on activities and yeah we know of this problem so in previous years

2444
04:44:29,580 --> 04:44:35,600
we did like all the exercises you would see here we actually did together but since people have

2445
04:44:35,600 --> 04:44:42,180
different backgrounds like we have mostly them in python some in other languages but

2446
04:44:42,180 --> 04:44:48,400
it was basically too much and if we gave enough time for everyone to do the exercises

2447
04:44:48,400 --> 04:44:56,160
we basically spend all the time on the exercises so instead we can look at it like this so we have

2448
04:44:56,160 --> 04:45:03,480
the demos and the exercises are there for you to do later on your own time if you would like

2449
04:45:03,480 --> 04:45:11,400
and maybe someday we can go back to trying the exercises but with the difficulties of

2450
04:45:11,400 --> 04:45:15,840
installing stuff and managing everything, it hasn't worked that well.

2451
04:45:15,840 --> 04:45:15,860
Yeah.

2452
04:45:16,580 --> 04:45:25,700
I mean, if you do want to try the exercises, we do have the notes as a way of asking questions.

2453
04:45:25,700 --> 04:45:30,540
So if you have problems when you try them, you can always ask questions in the notes.

2454
04:45:32,100 --> 04:45:36,080
And yeah, you don't exactly have to follow us when we do it.

2455
04:45:36,080 --> 04:45:38,780
you can just go ahead and start doing them

2456
04:45:38,780 --> 04:45:42,780
and turn off the stream or do it now after the stream.

2457
04:45:45,920 --> 04:45:50,320
But the, would the, so I think for the documentation,

2458
04:45:50,860 --> 04:45:53,420
I see how the bring your own code sessions

2459
04:45:53,420 --> 04:45:55,400
would actually work because yeah, you have maybe some,

2460
04:45:55,760 --> 04:45:58,040
but possibly also for Jupyter Notebooks,

2461
04:45:58,300 --> 04:46:00,180
maybe if you're interested in this

2462
04:46:00,180 --> 04:46:01,760
and how to integrate Jupyter Notebooks

2463
04:46:01,760 --> 04:46:03,060
with your documentation or so,

2464
04:46:03,060 --> 04:46:10,020
So the bring your own code sessions may be useful there.

2465
04:46:10,740 --> 04:46:13,100
So you would apply what you've seen today,

2466
04:46:13,100 --> 04:46:16,860
but directly to what you're working on

2467
04:46:16,860 --> 04:46:19,300
instead of some artificial exercises,

2468
04:46:19,620 --> 04:46:21,060
which still would be nice,

2469
04:46:21,180 --> 04:46:26,760
but maybe you can make a longer jump

2470
04:46:26,760 --> 04:46:30,200
and go directly to applying these things to something new.

2471
04:46:31,040 --> 04:46:32,820
Because it's also nice that people are saying,

2472
04:46:32,820 --> 04:46:41,300
okay i will use what i learned today that's quite yeah uh that's quite a number of o's there

2473
04:46:41,300 --> 04:46:43,240
which is pleasant i think

2474
04:46:43,240 --> 04:46:56,400
yeah um and if you have anyone locally you can talk to you can basically show them exercises

2475
04:46:56,400 --> 04:47:02,280
exercises and say i would like to do this can you be my mentor and they can give you the starting

2476
04:47:02,280 --> 04:47:07,260
advice like let you know if it's the right thing to do for your own environment you do it and you

2477
04:47:07,260 --> 04:47:13,920
ask them for help and if you're at any of the organizations where any instructor of this

2478
04:47:13,920 --> 04:47:18,940
workshop has been we're around to help you unfortunately we can't help everyone in the

2479
04:47:18,940 --> 04:47:25,360
world because well you know we're a few people and this is an open course but

2480
04:47:25,360 --> 04:47:29,320
yeah i guess you know how that works

2481
04:47:29,320 --> 04:47:38,700
let's see

2482
04:47:38,700 --> 04:47:47,880
and tomorrow yes if you can scroll up a little bit there's some news for tomorrow there yeah

2483
04:47:47,880 --> 04:47:55,700
so tomorrow we have two lessons one is testing which is a very practical thing so it would have

2484
04:47:55,700 --> 04:48:02,180
some really nice exercises if we were giving you time to do them but we sort of combine the version

2485
04:48:02,180 --> 04:48:11,060
control the github and many other things and show you how you can use github to test your code on

2486
04:48:11,060 --> 04:48:16,980
every push you do and integrate that with pull requests and so on so it's really cool it's a

2487
04:48:16,980 --> 04:48:23,460
quite good um thing to do and i think that if you're just following along you can still get

2488
04:48:23,460 --> 04:48:31,220
a lot of it even without the exercises that's easy to do later and then after that is modular

2489
04:48:31,220 --> 04:48:36,900
code development and this used to be a sort of discussion thing now you get to see two instructors

2490
04:48:36,900 --> 04:48:46,260
come together and they will start with a basic idea make a code in a jupyter notebook and slowly

2491
04:48:46,260 --> 04:48:52,980
make it more and more modular add function split it to files and eventually end up with a program

2492
04:48:52,980 --> 04:48:58,500
that can be run from a command line and there's a lot of general discussion here

2493
04:48:59,060 --> 04:49:03,380
so to say like it's really how would you say it

2494
04:49:05,700 --> 04:49:06,340
it is

2495
04:49:08,980 --> 04:49:13,380
if you ask me it really puts everything together and shows a realistic process

2496
04:49:13,380 --> 04:49:19,460
from chaotic initial scientific scripts to something that's reusable

2497
04:49:19,460 --> 04:49:26,580
yeah okay any other news for tomorrow

2498
04:49:26,580 --> 04:49:31,420
or should we get going

2499
04:49:31,420 --> 04:49:38,560
yeah looking forward to tomorrow actually we've been in the background

2500
04:49:38,560 --> 04:49:50,180
yeah okay great so see you all later then please keep filling out the feedback

2501
04:49:50,180 --> 04:49:56,280
at all thanks so all right see you later bye see you

2502
04:50:08,560 --> 04:50:09,180
you

2503
04:50:38,560 --> 04:50:39,180
you

2504
04:51:08,560 --> 04:51:09,180
you

2505
04:51:38,560 --> 04:51:39,180
you

2506
04:52:08,560 --> 04:52:09,180
you

2507
04:52:38,560 --> 04:52:39,180
you

2508
04:53:08,560 --> 04:53:09,180
you

2509
04:53:38,560 --> 04:53:39,180
you

2510
04:54:08,560 --> 04:54:09,180
you

2511
04:54:38,560 --> 04:54:39,180
you

2512
04:55:08,560 --> 04:55:09,180
you

2513
04:55:38,560 --> 04:55:39,180
you

2514
04:56:08,560 --> 04:56:09,180
you

2515
04:56:38,560 --> 04:56:39,180
you

2516
04:57:08,560 --> 04:57:09,180
you

2517
04:57:38,560 --> 04:57:39,180
you

2518
04:58:08,560 --> 04:58:09,180
you

2519
04:58:38,560 --> 04:58:39,180
you

2520
04:59:08,560 --> 04:59:09,180
you

2521
04:59:38,560 --> 05:00:08,540
Thank you.

