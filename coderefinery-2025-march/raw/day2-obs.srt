1
00:00:00,000 --> 00:00:29,980
Thank you.

2
00:00:30,000 --> 00:00:30,620
you

3
00:01:00,000 --> 00:01:00,620
you

4
00:01:30,000 --> 00:01:30,620
you

5
00:02:00,000 --> 00:02:00,620
you

6
00:02:30,000 --> 00:02:30,620
you

7
00:03:00,000 --> 00:03:00,620
you

8
00:03:30,000 --> 00:03:30,620
you

9
00:04:00,000 --> 00:04:00,620
you

10
00:04:30,000 --> 00:04:30,620
you

11
00:05:00,000 --> 00:05:00,620
you

12
00:05:30,000 --> 00:05:30,620
you

13
00:06:00,000 --> 00:06:00,620
you

14
00:06:30,000 --> 00:06:30,620
you

15
00:07:00,000 --> 00:07:00,620
you

16
00:07:30,000 --> 00:07:30,620
you

17
00:08:00,000 --> 00:08:00,620
you

18
00:08:30,000 --> 00:08:55,680
Turning on our audio.

19
00:08:57,680 --> 00:08:59,820
Can anyone hear us out there?

20
00:09:00,000 --> 00:09:21,160
Let's scroll down some and see what we've got.

21
00:09:21,160 --> 00:09:26,900
So I guess you know the general strategy now.

22
00:09:26,900 --> 00:09:31,860
If you don't, this is the notes document.

23
00:09:31,860 --> 00:09:34,020
The registered people have the link here.

24
00:09:34,020 --> 00:09:42,960
If you switch to it, you can switch to edit mode with a pencil at the top and then write

25
00:09:42,960 --> 00:09:43,960
questions.

26
00:09:43,960 --> 00:09:49,840
We've got some icebreakers here.

27
00:09:49,840 --> 00:09:51,380
Is our audio balanced?

28
00:09:51,380 --> 00:09:54,460
That should be the first thing that we forgot yesterday.

29
00:09:54,460 --> 00:09:58,280
Yeah, hopefully. Hello, everyone.

30
00:10:00,320 --> 00:10:12,000
When reviewing the videos last night, I thought that my audio was a bit, well, it didn't sound like it should have sounded. So people should have told me about that earlier.

31
00:10:12,000 --> 00:10:25,300
Yeah, if you find anything wrong with the audio or uh or the shared image or anything

32
00:10:25,300 --> 00:10:32,180
write in our in write to us in the notes as well that is what we are checking

33
00:10:35,440 --> 00:10:41,980
yeah so [name] what was the last animal you saw oh i've seen a bird although i'm not sure you

34
00:10:41,980 --> 00:10:48,980
would characterize it as an animal but let's let's generalize the term yeah it was a bird

35
00:10:48,980 --> 00:10:53,660
but actually i'm so bad with uh with names so i i um i don't know the name in english

36
00:10:53,660 --> 00:11:02,000
so um yeah for most birds i couldn't tell you the name in english either so you know okay

37
00:11:02,000 --> 00:11:07,000
we have chosen the wrong career path yeah

38
00:11:07,000 --> 00:11:16,840
yeah i don't know yeah definitely a bird so it's nice it's like spring is slowly coming

39
00:11:16,840 --> 00:11:24,660
yeah although the seeing humans uh this the seeing animals electronically count because

40
00:11:24,660 --> 00:11:31,160
then everyone should say human if they're in here yes unless their cat is really close

41
00:11:31,160 --> 00:11:42,380
yeah anyway so yes feel free to to generalize a bit not take the question literally

42
00:11:42,380 --> 00:11:51,140
yeah but the next question is also quite relevant so how did you interact with git yesterday so we

43
00:11:51,140 --> 00:11:59,400
did all the demos from the github web interface but as we said that's not how we normally do

44
00:11:59,400 --> 00:12:07,320
things so now we're going to do some of the same kinds of things again today but we're going to

45
00:12:07,320 --> 00:12:14,040
do it on our own computers using either command line or vs code

46
00:12:17,640 --> 00:12:21,400
so it's good to know what you did before

47
00:12:21,400 --> 00:12:32,760
Yeah, maybe we scared people off, and they just did it for fun.

48
00:12:32,760 --> 00:12:34,900
Yeah.

49
00:12:34,900 --> 00:12:36,900
Let's hope not.

50
00:12:36,900 --> 00:12:49,160
Also, if you have another idea that you enjoy using together with kids, please let us know.

51
00:12:49,160 --> 00:12:56,960
Or if there is something in particular that you think we should introduce in our material, that's great as well.

52
00:12:58,240 --> 00:13:08,660
And then also, if anything is unclear from yesterday or you have any other questions, write them down and we'll talk to them.

53
00:13:12,460 --> 00:13:13,100
Yeah.

54
00:13:13,100 --> 00:13:23,980
um i see there's a question down here about how do we make our tutorials at coderefinery.github.io

55
00:13:23,980 --> 00:13:29,900
and that's a really good question because on day five there's an exercise where you basically do

56
00:13:29,900 --> 00:13:38,680
the same thing yourself um you make a git repository you add documentation code in there

57
00:13:38,680 --> 00:13:45,060
to build files using something called Sphinx and then you push it to GitHub in the right way

58
00:13:45,060 --> 00:13:48,400
and it builds it. So, yeah.

59
00:13:56,020 --> 00:14:01,060
So, what if we ask, I'll ask you, [name], then you can ask me,

60
00:14:01,420 --> 00:14:06,640
how long have you been using VS Code and or the command line?

61
00:14:08,680 --> 00:14:14,160
Oh, so I used to non-grind ever since I started doing research.

62
00:14:16,160 --> 00:14:24,960
So I remember my supervisor, it was during my master's studies, a long time ago.

63
00:14:25,800 --> 00:14:29,540
So he told me, there is one command you should not use.

64
00:14:30,260 --> 00:14:32,560
This is `rm -rf`.

65
00:14:33,100 --> 00:14:34,300
Don't do that.

66
00:14:34,900 --> 00:14:37,460
And then the rest I will not say.

67
00:14:37,460 --> 00:14:46,560
so yeah don't do that and uh yes and then we went through editors so i do have a preferred

68
00:14:46,560 --> 00:14:53,560
editor which is `vi` so I, but I'm i think it's really a very personal choice

69
00:14:53,560 --> 00:15:04,140
um so uh use your preferred editor that's the best way and then uh so yeah and then now in

70
00:15:04,140 --> 00:15:08,200
Conservation control, I know you asked about VS Code.

71
00:15:08,200 --> 00:15:13,560
So VS Code, it's something like two years back.

72
00:15:15,080 --> 00:15:19,380
But I'm still, I mean, I like to do some things in VS Code.

73
00:15:19,740 --> 00:15:22,140
I like to do things just in the terminal

74
00:15:22,140 --> 00:15:26,400
and just forget about the GUI and write the commands.

75
00:15:26,580 --> 00:15:28,100
But it's really a personal choice.

76
00:15:28,260 --> 00:15:30,560
I think there is no right or wrong.

77
00:15:30,560 --> 00:15:38,180
do what what helps drive your research further whatever helps you in your work that's that's

78
00:15:38,180 --> 00:15:44,460
best and then i mean of course we introduce you some tools that we find useful but you have to

79
00:15:44,460 --> 00:15:57,020
find the wrong preferred ones what about you [name] so i guess i somehow started to be aware

80
00:15:57,020 --> 00:16:03,620
of the command line the year before i started university i had a friend that helped me with

81
00:16:03,620 --> 00:16:11,920
this kind of thing i wouldn't say i got good at it and fully like understood what i was doing

82
00:16:11,920 --> 00:16:23,800
until i started to do research also um and then vs code um i mean a few years ago something like

83
00:16:23,800 --> 00:16:31,720
that but i still don't really use it that much and i use it for some things but i wouldn't say

84
00:16:31,720 --> 00:16:39,980
i'm really proficient in it i use it when the interface seems like it will help me for

85
00:16:39,980 --> 00:16:43,880
a certain project

86
00:16:43,880 --> 00:16:58,080
but it is now 10 o'clock should we begin looking at stuff um yeah we have this daily intro

87
00:16:58,080 --> 00:17:03,660
maybe i will try to share it on my screen

88
00:17:03,660 --> 00:17:13,700
with the screen sharing mode i think [name] won't see it but um if we go to

89
00:17:13,700 --> 00:17:21,220
the schedule we have for day two a day two intro i'll open that up

90
00:17:23,460 --> 00:17:30,100
so to recap day one we went through the motivation for version control mainly all the ways you can

91
00:17:30,100 --> 00:17:41,540
lose code if you don't have good history and then on github web we made our own copies of a public

92
00:17:41,540 --> 00:17:49,380
repository we committed stuff and we made pull requests and those are basically some of the

93
00:17:49,380 --> 00:17:57,780
common operation kinds of things that you'd see so for day two it's similar but instead of working

94
00:17:57,780 --> 00:18:06,660
via a web browser we clone from github to our own computer we do the same kind of things we

95
00:18:06,660 --> 00:18:15,060
make commits we make branches we push and so on then since it's on our computer we can inspect

96
00:18:15,060 --> 00:18:24,420
history in more detail to see how to figure out stuff in the past and then we figure out if you

97
00:18:24,420 --> 00:18:31,300
have a new project on your computer then how you would um prepare this for git and push it

98
00:18:31,300 --> 00:18:41,640
somewhere and a bunch of practical advice uh yeah anything else to add to the intro no i think that's

99
00:18:41,640 --> 00:18:50,260
that's um that's it maybe i will just answer uh one of the questions we got regarding yesterday

100
00:18:50,260 --> 00:18:59,380
and as i was a bit rushed when explaining it so so the question is why do we need tax

101
00:18:59,380 --> 00:19:11,680
so why not yeah why tags at all so uh usually we can identify uh to a commit by either using

102
00:19:11,680 --> 00:19:19,300
the hash of the commit if that commit is the top of the branch then we can refer to it

103
00:19:19,300 --> 00:19:25,800
via the branch name also that will change once we push a new commit to that branch

104
00:19:25,800 --> 00:19:36,080
So, one convenient way to refer to a certain commit, so a certain copy of our repository

105
00:19:36,080 --> 00:19:42,480
at a given time, is by introducing yet another reference to a commit.

106
00:19:42,480 --> 00:19:48,000
So then when I say, okay, look at this commit with, I know this really long hash, I can

107
00:19:48,000 --> 00:19:55,120
just say that okay check check this commit with uh with the tag i don't know version 1.0

108
00:19:55,120 --> 00:20:06,000
or or anything so uh so it's like a more kind of it needs a battery like easier to read the

109
00:20:06,000 --> 00:20:08,960
the version name, simply.

110
00:20:10,260 --> 00:20:14,760
So, and this is especially useful if you are,

111
00:20:16,640 --> 00:20:20,740
well, if you are developing a code

112
00:20:20,740 --> 00:20:23,520
and then you want people to refer to certain versions

113
00:20:23,520 --> 00:20:25,700
and be able to cite certain versions

114
00:20:25,700 --> 00:20:28,860
when they are using that in their paper.

115
00:20:28,860 --> 00:20:33,220
So, yeah, referring to a version,

116
00:20:33,220 --> 00:20:35,960
well, to a tag

117
00:20:35,960 --> 00:20:38,600
the version

118
00:20:38,600 --> 00:20:40,700
it's maybe better

119
00:20:40,700 --> 00:20:42,520
than, well, it's not better

120
00:20:42,520 --> 00:20:44,820
but it's just more readable

121
00:20:44,820 --> 00:20:45,320
simply

122
00:20:45,320 --> 00:20:48,720
yeah, anything you want to add [name], sorry

123
00:20:48,720 --> 00:20:50,860
not really

124
00:20:50,860 --> 00:20:52,660
I think

125
00:20:52,660 --> 00:20:54,400
that was a good thing to answer

126
00:20:54,400 --> 00:20:55,140
and

127
00:20:55,140 --> 00:20:57,840
yeah, let's go

128
00:20:57,840 --> 00:21:00,080
so should I switch to your screen?

129
00:21:00,780 --> 00:21:02,000
yes, please do so

130
00:21:02,000 --> 00:21:14,580
okay there you go so then what we are going to be doing today is to clone a git repository and

131
00:21:14,580 --> 00:21:21,460
work on it locally so what we'll do is we are going to bring our work we have done on github

132
00:21:21,460 --> 00:21:32,160
yesterday on our local machines so is font size big enough it looks okay to me does

133
00:21:32,160 --> 00:21:41,460
anyone else have a comment well write in notes and i'll relay if you need okay so then whatever

134
00:21:41,460 --> 00:21:48,400
we did yesterday so doing commits in our repository creating new branches merging

135
00:21:49,280 --> 00:21:56,000
merging branches, we are going to experiment with that on our local machines. So then

136
00:21:59,040 --> 00:22:05,120
a small recap from yesterday. So what is our Git repository? So it simply contains all the

137
00:22:05,120 --> 00:22:10,720
files and the subdirectories of our project. It has the complete history of our commits,

138
00:22:11,360 --> 00:22:17,840
so different snapshots of these files and directories at different times,

139
00:22:17,840 --> 00:22:25,040
and it usually contains, well not usually, sometimes it contains different branches

140
00:22:25,040 --> 00:22:35,680
and tags. Introducing new branches is to have a clearer line of thought, so whenever you're

141
00:22:35,680 --> 00:22:41,600
experimenting with something new, you might want to create a branch so that in case you are

142
00:22:41,600 --> 00:22:49,840
uncertain, if that's something you wish to have for your repository, you can simply discard it

143
00:22:50,880 --> 00:22:57,280
or merge it in the main one if it's an important feature. So what about cloning?

144
00:22:58,400 --> 00:23:05,280
So cloning is actually copying the entire repository with its commits and history to our

145
00:23:05,280 --> 00:23:17,600
local computer. And it's yet another backup for the repository. Then you can work on your

146
00:23:18,240 --> 00:23:25,680
local copy of the repository. You can do further tests and run the program if it's a program or

147
00:23:27,520 --> 00:23:33,440
use your favorite editor to inspect different files. And one important thing to remember

148
00:23:35,280 --> 00:23:37,960
when it comes to cloning,

149
00:23:37,960 --> 00:23:41,640
is that if you do commits in your local clone,

150
00:23:41,640 --> 00:23:45,000
so the local repository on your machine,

151
00:23:45,000 --> 00:23:47,900
these will not appear automatically

152
00:23:47,900 --> 00:23:50,540
to the repository where you cloned from.

153
00:23:50,540 --> 00:23:51,820
And the other way around,

154
00:23:51,820 --> 00:23:54,500
if the repository you cloned from,

155
00:23:54,500 --> 00:23:58,960
which is typically called upstream,

156
00:23:58,960 --> 00:24:03,620
so if that repository has new commits,

157
00:24:03,620 --> 00:24:06,500
then they will not show up automatically

158
00:24:06,500 --> 00:24:10,520
on your clone repository, on your local machine.

159
00:24:10,720 --> 00:24:13,860
You actually have to use additional commands

160
00:24:13,860 --> 00:24:19,180
in order to sync your local clone

161
00:24:19,180 --> 00:24:23,100
with the repository on GitHub or GitLab,

162
00:24:23,200 --> 00:24:24,660
if that is where you have it.

163
00:24:25,820 --> 00:24:29,460
So it's not a full automatic syncing,

164
00:24:29,460 --> 00:24:33,460
but somehow you tell it when to...

165
00:24:33,620 --> 00:24:38,660
ago and i guess that will be the push and pull commands we learned exactly i think we had heard

166
00:24:38,660 --> 00:24:45,780
and some some of the ids can do this automatically but i think it's important to remember that

167
00:24:45,780 --> 00:24:52,180
generally this is not the case so you will have to do this pushing and pulling and we'll we'll

168
00:24:52,180 --> 00:24:59,700
see how you can do that so i think maybe we should discuss a little bit why what is the difference

169
00:24:59,700 --> 00:25:07,700
between forking and cloning and when do we want to do one or the other yeah well

170
00:25:09,700 --> 00:25:17,700
is that a question to me if you want otherwise i i will answer so in my mind i think forking is

171
00:25:18,740 --> 00:25:26,580
it's like making your own copy and cloning i know the command makes a copy on my computer

172
00:25:26,580 --> 00:25:36,520
so i guess fork is like the well is everything a fork technically but when we say fork we usually

173
00:25:36,520 --> 00:25:45,480
mean something on github like making the own copy of a github repository and then clone is well you

174
00:25:45,480 --> 00:25:52,320
can clone your own repository your own copy of the repository or you can clone the upstream copy

175
00:25:52,320 --> 00:26:01,520
that's not yours so yeah yeah so i would just add that so if i only want to let's say i i found a

176
00:26:01,520 --> 00:26:11,280
repository uh on the web and i want to investigate further then i i may do a fork and uh and um

177
00:26:13,680 --> 00:26:19,840
yeah maybe doing some simple commit on on github or something but if it's actually a code

178
00:26:19,840 --> 00:26:25,760
that I may wish to run, then I'm going to clone that on my local machine,

179
00:26:26,560 --> 00:26:34,240
install that software, run some tests, or run it with some input that I have.

180
00:26:34,240 --> 00:26:41,440
So yeah, whenever I actually need to run things on my machine, when I want to do commits which

181
00:26:42,400 --> 00:26:49,600
are maybe, I don't, doesn't necessarily have to be more advanced, but let's say I just prefer

182
00:26:49,600 --> 00:26:55,520
to work on my local machine then then i would go for a clone instead of just forking it and

183
00:26:55,520 --> 00:27:01,600
it's not wrong to do both or it's not wrong to start with one and add the other so um

184
00:27:03,600 --> 00:27:10,800
that's um that's perfectly fine yeah okay so cloning gets you the actual files on your

185
00:27:10,800 --> 00:27:18,160
computer that you can do stuff with which i guess is important for anything so yeah okay

186
00:27:19,600 --> 00:27:20,100
Good.

187
00:27:20,240 --> 00:27:24,420
Okay, so then let's introduce the exercise.

188
00:27:25,980 --> 00:27:34,600
And again, I mean, we prefer you do this using either VS Code or the command line.

189
00:27:35,060 --> 00:27:37,720
Still, I mean, there are things that you can do on GitHub.

190
00:27:37,980 --> 00:27:42,480
So if that is the path you want to choose, that's perfectly fine.

191
00:27:43,280 --> 00:27:45,100
It will not work for all the steps.

192
00:27:45,100 --> 00:28:07,060
Actually, well, we'll see with some of the exercises later that some things can be done on GitHub, but now it's mostly cloning a repository which exists on GitHub and bringing it to your computer.

193
00:28:07,060 --> 00:28:15,820
So, if you have not yet configured Git on the command line,

194
00:28:15,820 --> 00:28:18,020
then we suggest you do that,

195
00:28:18,020 --> 00:28:19,340
and in this step one,

196
00:28:19,340 --> 00:28:23,520
there is a link to that.

197
00:28:23,520 --> 00:28:25,220
Then in the second step,

198
00:28:25,220 --> 00:28:27,460
you actually need to decide which is

199
00:28:27,460 --> 00:28:30,200
the repository that you wish to clone.

200
00:28:30,200 --> 00:28:32,840
If you were with us yesterday,

201
00:28:32,840 --> 00:28:42,780
Then you may already have a recipe book, which is, well, a fork of the CR workshop exercises.

202
00:28:43,400 --> 00:28:46,660
You may work with the fork that you have.

203
00:28:47,520 --> 00:28:54,060
You may also work with the repository under CR workshop exercises.

204
00:28:54,060 --> 00:28:55,520
It's really up to you.

205
00:28:55,520 --> 00:28:59,540
For the purpose of this exercise, it doesn't matter what you choose.

206
00:28:59,540 --> 00:29:03,380
Then we'd like you to create a new branch,

207
00:29:03,380 --> 00:29:07,660
this time locally, and make a commit.

208
00:29:07,660 --> 00:29:12,760
We'll simply repeat some of the steps that we have done yesterday,

209
00:29:12,760 --> 00:29:17,300
but on our local repository.

210
00:29:18,540 --> 00:29:24,460
Then step 7 is actually to compare your commits

211
00:29:24,460 --> 00:29:36,420
locally with what exists on github and identify if these uh if the syncing has happened or not

212
00:29:36,420 --> 00:29:45,660
so um that's uh that's about it [name] anything else that we should add before going into exercise

213
00:29:45,660 --> 00:29:55,020
time if you can't do this exercise do you lose whatever comes later or is it okay like

214
00:29:55,020 --> 00:30:02,320
do future exercises depend on this one no they don't depend so okay and if you if you cannot

215
00:30:02,320 --> 00:30:11,100
so if you don't want to work or if you don't want or cannot work locally using either the command

216
00:30:11,100 --> 00:30:16,860
an online or an editor, then you may just try this again on GitHub.

217
00:30:17,060 --> 00:30:18,300
That's perfectly fine.

218
00:30:18,500 --> 00:30:22,860
So no need to panic.

219
00:30:23,060 --> 00:30:24,140
OK, yeah.

220
00:30:24,340 --> 00:30:29,540
Can they come back in 45 minutes and we go to the next one, which they can do?

221
00:30:29,740 --> 00:30:30,620
OK, good to know.

222
00:30:30,820 --> 00:30:32,420
Yeah. And I mean, they can.

223
00:30:32,620 --> 00:30:37,140
One option is also just to check the solutions that we have introduced.

224
00:30:37,340 --> 00:30:38,980
That is also perfectly OK.

225
00:30:38,980 --> 00:30:45,700
I think that there is still a lot of learning that can be done by just checking the solution.

226
00:30:47,940 --> 00:30:52,340
And then there's a good question on line 105.

227
00:30:53,720 --> 00:30:55,600
Step three, creating branches locally.

228
00:30:55,780 --> 00:30:59,000
For this, do we need to be in the same directory of the recipe book?

229
00:31:00,040 --> 00:31:04,940
And this goes close to, I think, what might be the biggest problem in this step.

230
00:31:04,940 --> 00:31:12,180
so whenever you do the local work especially from the command line you have to know

231
00:31:12,180 --> 00:31:18,800
you have to run things from the command line like the command line has to be in the same location

232
00:31:18,800 --> 00:31:28,600
where your um where your files are currently stored and if you've never examined stuff from

233
00:31:28,600 --> 00:31:34,000
the command line if this is still new to you don't worry like you'll probably pick it up quickly but

234
00:31:34,000 --> 00:31:42,820
it will be hard to learn two things at once so in that case um don't worry ask the questions um

235
00:31:42,820 --> 00:31:50,400
i do i did try to cover this in the shell crash course which i re-recorded for this workshop

236
00:31:50,400 --> 00:31:59,240
that you've seen somehow as part of the setup instructions and if the command line

237
00:31:59,240 --> 00:32:03,400
seems too hard I guess you could take time and watch that again

238
00:32:03,400 --> 00:32:07,620
and see what you can learn there. So I'll just add

239
00:32:07,620 --> 00:32:11,640
one thing so you do need to be in this directory the recipe

240
00:32:11,640 --> 00:32:15,680
book because well git needs to know that

241
00:32:15,680 --> 00:32:18,760
the directory you are in is actually a git repository

242
00:32:18,760 --> 00:32:22,820
otherwise it will not understand that so

243
00:32:22,820 --> 00:32:26,580
so the short answer is yes

244
00:32:26,580 --> 00:32:29,640
yeah okay

245
00:32:29,640 --> 00:32:34,080
is that all then

246
00:32:34,080 --> 00:32:36,440
yes that's all

247
00:32:36,440 --> 00:32:38,100
and then what should we say

248
00:32:38,100 --> 00:32:40,040
20 minutes or 25

249
00:32:40,040 --> 00:32:41,500
25 minutes I think we have

250
00:32:41,500 --> 00:32:44,560
so in case you need to

251
00:32:44,560 --> 00:32:46,420
set some things up you have

252
00:32:46,420 --> 00:32:47,660
those extra minutes

253
00:32:47,660 --> 00:32:51,520
yeah okay

254
00:32:51,520 --> 00:32:54,560
great so see you later

255
00:32:54,560 --> 00:32:56,560
good luck and definitely

256
00:32:56,560 --> 00:33:04,860
write questions in the notes we are around to help okay bye

257
00:33:26,560 --> 00:33:27,180
you

258
00:33:56,560 --> 00:33:57,180
you

259
00:34:26,560 --> 00:34:27,180
you

260
00:34:56,560 --> 00:34:57,180
you

261
00:35:26,560 --> 00:35:27,180
you

262
00:35:56,560 --> 00:35:57,180
you

263
00:36:26,560 --> 00:36:27,180
you

264
00:36:56,560 --> 00:36:57,180
you

265
00:37:26,560 --> 00:37:27,180
you

266
00:37:56,560 --> 00:37:57,180
you

267
00:38:26,560 --> 00:38:27,180
you

268
00:38:56,560 --> 00:38:57,180
you

269
00:39:26,560 --> 00:39:27,180
you

270
00:39:56,560 --> 00:39:57,180
you

271
00:40:26,560 --> 00:40:27,180
you

272
00:40:56,560 --> 00:40:57,180
you

273
00:41:26,560 --> 00:41:27,180
you

274
00:41:56,560 --> 00:41:57,180
you

275
00:42:26,560 --> 00:42:27,180
you

276
00:42:56,560 --> 00:42:57,180
you

277
00:43:26,560 --> 00:43:27,180
you

278
00:43:56,560 --> 00:43:57,180
you

279
00:44:26,560 --> 00:44:27,180
you

280
00:44:56,560 --> 00:44:57,180
you

281
00:45:26,560 --> 00:45:27,180
you

282
00:45:56,560 --> 00:45:57,180
you

283
00:46:26,560 --> 00:46:27,180
you

284
00:46:56,560 --> 00:46:57,180
you

285
00:47:26,560 --> 00:47:27,180
you

286
00:47:56,560 --> 00:47:57,180
you

287
00:48:26,560 --> 00:48:27,180
you

288
00:48:56,560 --> 00:48:57,180
you

289
00:49:26,560 --> 00:49:27,180
you

290
00:49:56,560 --> 00:49:57,180
you

291
00:50:26,560 --> 00:50:27,180
you

292
00:50:56,560 --> 00:50:57,180
you

293
00:51:26,560 --> 00:51:27,180
you

294
00:51:56,560 --> 00:51:57,180
you

295
00:52:26,560 --> 00:52:27,180
you

296
00:52:56,560 --> 00:52:57,180
you

297
00:53:26,560 --> 00:53:27,180
you

298
00:53:56,560 --> 00:53:57,180
you

299
00:54:26,560 --> 00:54:27,180
you

300
00:54:56,560 --> 00:54:57,180
you

301
00:55:26,560 --> 00:55:27,180
you

302
00:55:56,560 --> 00:55:57,180
you

303
00:56:26,560 --> 00:56:27,180
you

304
00:56:56,560 --> 00:57:26,480
Okay, welcome back everyone.

305
00:57:26,960 --> 00:57:36,080
I hope you had a good try for this exercise. So we have a feedback box in the notes document.

306
00:57:37,040 --> 00:57:44,000
If you have missed it then please check that. But based on the existing feedback you would

307
00:57:44,000 --> 00:57:51,280
like me to demo how to do this via the command line. So this is what I'm going to do in the

308
00:57:51,280 --> 00:57:59,040
following. So the very first thing that one should do, so let's see, go back to the exercise,

309
00:57:59,040 --> 00:58:09,520
is to configure git. I have done that already, so that is fixed. And actually, yes, in case you do

310
00:58:09,520 --> 00:58:17,600
not have done done, then I should just show you that you find it under the first episode,

311
00:58:17,600 --> 00:58:26,880
getting started and configuring git command line and editor. So that is what you need to do.

312
00:58:26,880 --> 00:58:34,960
And then, if that is still unclear, add another plus to that part. And then the second step is

313
00:58:34,960 --> 00:58:41,680
to decide which repository to clone. And I am going to use the fork I have done yesterday.

314
00:58:41,680 --> 00:58:52,240
And how do I do that? So I need to have a URL for where this remote repository is located and then

315
00:58:52,240 --> 00:59:02,480
copy that. So you may notice there is a green button here close to, well, on my GitHub repo

316
00:59:02,480 --> 00:59:12,480
page and i'm going to click on this triangle and copy this link which is under ssh so just

317
00:59:12,480 --> 00:59:20,880
a short comment on the difference between https and ssh if you do not want to push your local

318
00:59:20,880 --> 00:59:28,960
changes to this remote repository which you are cloning it's okay to use https if you do want to

319
00:59:28,960 --> 00:59:35,360
push back and you have the rights to do that, then choose SSH. And because this is my own repository,

320
00:59:35,360 --> 00:59:40,960
I do have the rights to do that, so I'm going to go for this option. But again, if you're cloning

321
00:59:40,960 --> 00:59:49,280
someone else's repository and you're not a member of that project, then choose the other option.

322
00:59:50,240 --> 01:00:00,640
So I have copied that and I'm going to go to my terminal and the command to clone a repository

323
01:00:00,640 --> 01:00:11,360
is git clone and then I have to specify the path where this, well the URL where this repository is

324
01:00:12,160 --> 01:00:18,480
and actually it's not the URL but it has a certain syntax as I got instructed from GitHub.

325
01:00:18,480 --> 01:00:25,440
So I have just pasted that. So this is what I copied from github and then I enter and now

326
01:00:25,440 --> 01:00:40,000
I have this down on my reposter. So let's see. Okay, sorry, that was very bad. So I have

327
01:00:40,000 --> 01:00:48,240
have cloned this in my home directory. I'm going to actually move this recipe book recorded into

328
01:00:48,800 --> 01:00:58,400
another folder that was unnecessarily complicated.

329
01:00:58,400 --> 01:01:10,000
Oh, okay. That was... Let me just do the clone again.

330
01:01:13,520 --> 01:01:20,080
Oh, it's because I already loaded it here. Yes. Okay. Sorry. So then I have this clone recipe

331
01:01:20,080 --> 01:01:27,040
book recorded. So it's a Git repo on my local machine, and I'm going to cd to this

332
01:01:28,400 --> 01:01:35,500
directory. And what do I have? So I have all these different files that we have seen yesterday

333
01:01:35,500 --> 01:01:44,900
as well. And the next step was to, let's see, is to create a new branch. And how I can switch

334
01:01:44,900 --> 01:02:00,980
switch. So the command to do that is git switch. And the name of the branch. Let's see. What

335
01:02:00,980 --> 01:02:14,600
should I say? Oh, sorry. New branch. And then the branch I want to create it from. And I'm

336
01:02:14,600 --> 01:02:19,880
going to create it from the main branch and actually git switch is not enough because this

337
01:02:19,880 --> 01:02:23,880
new branch or actually maybe it exists so let's call it

338
01:02:27,000 --> 01:02:36,040
modif by super i also need to add the option create so what this is going to do is create

339
01:02:36,040 --> 01:02:44,440
this ModifSoup branch from main and then switch to it. It's like a combination of two commands.

340
01:02:44,440 --> 01:02:51,480
And to see that I am on the right branch I'm going to do git status and you should do git status

341
01:02:51,480 --> 01:02:57,000
often so that you actually know what the state of your repository is. But now it just tells me that

342
01:02:57,000 --> 01:03:05,160
okay I'm on this branch and I have a clean working tree that means that I have not modified anything.

343
01:03:06,040 --> 01:03:14,760
but what I will do is to modify the mushroom recipe and I opened this file with my preferred

344
01:03:14,760 --> 01:03:24,360
editor. You use your preferred editor and I'm just going to add for example this and

345
01:03:25,480 --> 01:03:31,400
commit this change. So first I have to instruct git that I have modified this and I want this

346
01:03:32,200 --> 01:03:38,680
modification to be incorporated in the next commit and I do that with the git add command.

347
01:03:38,680 --> 01:03:44,760
So this is like adding the plus button in VS Code for example. You simply instruct git that you want

348
01:03:44,760 --> 01:03:53,240
to incorporate these changes in the new commit. And then let's show git status again. So this

349
01:03:53,240 --> 01:03:57,640
This will tell me, okay, you have modified this file.

350
01:03:57,780 --> 01:04:00,720
It is staged, and I can now commit it.

351
01:04:00,720 --> 01:04:06,080
So I can incorporate this change to the mushroom soup in the new commit.

352
01:04:07,000 --> 01:04:12,620
And using the command line, it's git commit, dash M for the commit message,

353
01:04:13,100 --> 01:04:14,420
if it's just one line.

354
01:04:14,880 --> 01:04:20,400
So modify, edit, yeah, modified mushroom.

355
01:04:23,240 --> 01:04:30,200
And then, let's just do git log and see how that looks.

356
01:04:30,200 --> 01:04:39,860
So I have a new commit here, modified soup, on the branch modified soup, and then with

357
01:04:39,860 --> 01:04:42,400
this commit message.

358
01:04:42,400 --> 01:04:51,520
So I could also do git graph, for example, and then I have the whole history of my repository

359
01:04:51,520 --> 01:04:58,960
in a graphical representation, and you can actually also see this in VS Code.

360
01:05:00,480 --> 01:05:09,840
Okay, and then what else to do? So I should switch back to the main branch, so git

361
01:05:10,880 --> 01:05:19,280
checkout main, or I could do git switch main. So let's do that. So either git checkout main

362
01:05:19,280 --> 01:05:26,960
or git switch main so this is going to get me back to the main branch so i can check that again with

363
01:05:26,960 --> 01:05:35,760
git status so it tells me that okay i'm on the main branch or i could do this using git branch

364
01:05:35,760 --> 01:05:43,920
this is also going to list the branches i have the local branches i have and and add this asterisk

365
01:05:43,920 --> 01:05:53,840
to the branch I am on. So merge. And then the next thing to do is to add two commits here. So I

366
01:05:53,840 --> 01:06:02,720
quickly do that. So again, I'll just change some file. What do we have here? Bacamole.

367
01:06:02,720 --> 01:06:14,160
so let's do just a quarter of this and then git add so again git add is going to

368
01:06:14,160 --> 01:06:21,220
tell git that i want this change to be incorporated in the next commit

369
01:06:21,220 --> 01:06:31,440
and i should do another commit so let's do

370
01:06:31,440 --> 01:06:49,260
Okay, let's change this file again.

371
01:06:49,260 --> 01:06:54,680
And now what I will have eventually is two commits that change the same file.

372
01:06:54,680 --> 01:07:02,000
One would think that it would have been better to have one commit instead.

373
01:07:02,000 --> 01:07:07,260
That sometimes is the case, but in this case I've done it this way, so I have smaller changes

374
01:07:07,260 --> 01:07:08,260
in several commits.

375
01:07:08,260 --> 01:07:09,260
What did I do?

376
01:07:09,260 --> 01:07:10,260
Let's sort here.

377
01:07:10,260 --> 01:07:11,260
No, let's...

378
01:07:11,260 --> 01:07:24,480
So let's say I don't remember actually what I did, so let me open this file again.

379
01:07:24,680 --> 01:07:27,800
I had less salt, yes.

380
01:07:30,680 --> 01:07:38,360
So I am now committing that the additional change I did to this guacamole, which is not

381
01:07:41,640 --> 01:07:45,480
that's less salt. So how does my

382
01:07:45,480 --> 01:07:52,840
commit tree look like now so i had uh so now on main

383
01:07:55,240 --> 01:08:04,840
i have these new commits uh less onion and less salt and actually you may see that i have another

384
01:08:04,840 --> 01:08:16,520
origin main branch here. So what actually that means is the reference for the remote branch

385
01:08:16,520 --> 01:08:25,440
that I have, which is actually behind on my local copy compared to my local main branch. So

386
01:08:25,440 --> 01:08:38,160
um i can show this in a more concise form using it graph so i have these two branches on main

387
01:08:38,160 --> 01:08:46,000
and then this uh sorry this still commits on main and then this modified the soup on on

388
01:08:46,000 --> 01:08:55,860
this commit on the modified soup branch sorry so let's merge that those and how

389
01:08:55,860 --> 01:09:05,340
how do i do that so i use the git merge command i specify the branch i want to merge

390
01:09:05,340 --> 01:09:15,920
so motif soup and the branch i want to merge into and if i do not specify this secondary

391
01:09:15,920 --> 01:09:21,980
month for the branch then it's going to take the branch i am on when it has the merge so

392
01:09:21,980 --> 01:09:31,020
i click that and then i'm being prompted with a commit message for the merge i'm okay with that

393
01:09:31,020 --> 01:09:39,180
will just save it and then these so these commit messages um are going to be opened in the editor

394
01:09:39,180 --> 01:09:50,620
that you have set up um for git so uh you may have nano or emacs or or vs code and that is okay so um

395
01:09:51,820 --> 01:10:00,220
um let's quickly do a gif graph again so i see that i have a new commit which is the merge

396
01:10:00,220 --> 01:10:09,820
commit of of the main branch and modif soup so what about the history on the remote repository

397
01:10:09,820 --> 01:10:17,980
so the one that i have cloned from so let's see do my changes show up there and the way i can do

398
01:10:17,980 --> 01:10:27,100
that so i can go to insights and do for example and check the network or i could just see the

399
01:10:27,100 --> 01:10:33,980
history of the commits. I can do that as well. This takes a bit of time.

400
01:10:38,220 --> 01:10:43,660
So here actually I do not have

401
01:10:46,620 --> 01:10:53,260
this new branch motif soup that I have on my local machine. So this has not been synced.

402
01:10:53,260 --> 01:11:03,900
I can also see just by looking at the code and clicking on the commits. So the most recent

403
01:11:04,780 --> 01:11:12,300
commit that I have on this branch is actually from yesterday. So the local changes I have done

404
01:11:12,300 --> 01:11:22,940
are not yet incorporated on the remote repository. Final question number eight, where are the remote

405
01:11:23,260 --> 01:11:30,300
branches. So how can I see all the branches? So if I just type the git branch command,

406
01:11:31,020 --> 01:11:37,100
this is only going to list the local branches. So local branches that I

407
01:11:39,340 --> 01:11:47,340
have defined on my local repository. In order to see the remote branches as well, I have to add

408
01:11:47,340 --> 01:11:54,620
the option dash dash all so these are not only going to show the local ones but also in red the

409
01:11:55,420 --> 01:12:01,500
the branches which are defined on the remote repository

410
01:12:03,820 --> 01:12:04,380
okay

411
01:12:08,700 --> 01:12:16,140
so there's getting to be questions to note some people have lost track of what we're doing

412
01:12:16,780 --> 01:12:23,500
so i think the most important thing here is that this is a demo for the recording mainly

413
01:12:23,500 --> 01:12:33,500
so we showed one of the paths um but it's not needed for what comes next so don't don't read

414
01:12:33,500 --> 01:12:40,460
too much so don't let this um stop you from things you've sort of seen this command line

415
01:12:40,460 --> 01:12:48,700
method and we will get more used to it later if it's the path you want to take but you definitely

416
01:12:48,700 --> 01:12:57,980
can do your work with vs code or something like that that shows other stuff um

417
01:12:57,980 --> 01:13:07,880
actually there is one thing yeah one thing so i did uh fail to show how you can actually track

418
01:13:07,880 --> 01:13:18,420
a remote branch and so the command to do that so let's say that for example i want to track

419
01:13:18,420 --> 01:13:23,600
the branch alex fruit salad so then i can do git switch

420
01:13:23,600 --> 01:13:28,240
followed by i'm sorry

421
01:13:28,240 --> 01:13:42,080
git switch followed by the option dash dash create the name of the local branch and then

422
01:13:42,080 --> 01:13:48,660
the name of the of the remote branch so in this case origin slash alex fruit salad

423
01:13:48,660 --> 01:13:58,220
and then i type that i type enter alternatively instead of using git switch create one can just

424
01:13:58,220 --> 01:14:02,380
to, I'll show you that, so

425
01:14:02,380 --> 01:14:06,400
git switch followed by the option track, and then just

426
01:14:06,400 --> 01:14:10,000
the name of the remote branch, and then it's going to take

427
01:14:10,000 --> 01:14:14,400
the same name for the local one, so that's

428
01:14:15,060 --> 01:14:17,280
equivalent.

429
01:14:19,140 --> 01:14:22,140
Okay then, but we definitely need a break now, right?

430
01:14:23,080 --> 01:14:26,420
Yeah, so a lot of what Dana

431
01:14:26,420 --> 01:14:33,360
of showed was sort of more advanced stuff that's not in the lesson so don't worry it's not needed

432
01:14:33,360 --> 01:14:41,200
for the first day-to-day work and the stuff that you can pick up later over time there is one

433
01:14:41,200 --> 01:14:47,240
question about what head means it's something that we've been seeing lately so the name head

434
01:14:47,240 --> 01:14:57,240
comes from like the recording head of a magnetic tape or something like that and basically it's

435
01:14:57,240 --> 01:15:07,000
where the changes are being made so whatever your head branches that is where new commits would go

436
01:15:07,000 --> 01:15:10,680
and what will be modified when you run the git commit or git merge command

437
01:15:10,680 --> 01:15:15,640
but yeah let's go to a break

438
01:15:15,640 --> 01:15:17,640
we can add more into the

439
01:15:17,640 --> 01:15:18,840
notes there

440
01:15:18,840 --> 01:15:21,820
so with a 10 minute break we're back

441
01:15:21,820 --> 01:15:23,820
at 9 minutes

442
01:15:23,820 --> 01:15:24,420
past the hour

443
01:15:24,420 --> 01:15:27,380
so take your break

444
01:15:27,380 --> 01:15:28,900
keep the questions coming in

445
01:15:28,900 --> 01:15:30,540
and let's

446
01:15:30,540 --> 01:15:33,700
we'll talk then

447
01:15:33,700 --> 01:15:35,120
okay

448
01:15:35,120 --> 01:15:36,960
see you after the break

449
01:15:40,680 --> 01:15:41,300
you

450
01:16:10,680 --> 01:16:11,300
you

451
01:16:40,680 --> 01:16:41,300
you

452
01:17:10,680 --> 01:17:11,300
you

453
01:17:40,680 --> 01:17:41,300
you

454
01:18:10,680 --> 01:18:11,300
you

455
01:18:40,680 --> 01:18:41,300
you

456
01:19:10,680 --> 01:19:11,300
you

457
01:19:40,680 --> 01:19:41,300
you

458
01:20:10,680 --> 01:20:11,300
you

459
01:20:40,680 --> 01:20:41,300
you

460
01:21:10,680 --> 01:21:11,300
you

461
01:21:40,680 --> 01:21:41,300
you

462
01:22:10,680 --> 01:22:11,300
you

463
01:22:40,680 --> 01:22:41,300
you

464
01:23:10,680 --> 01:23:11,300
you

465
01:23:40,680 --> 01:23:41,300
you

466
01:24:10,680 --> 01:24:11,300
you

467
01:24:40,680 --> 01:24:41,300
you

468
01:25:10,680 --> 01:25:11,300
you

469
01:25:40,680 --> 01:25:41,300
you

470
01:26:10,680 --> 01:26:25,000
hello we are back um

471
01:26:25,000 --> 01:26:39,000
um there we're going to go on now to the next phase of the lesson but yeah that was quite a

472
01:26:39,000 --> 01:26:45,760
challenge what we just did there um seeing everything from the command line so if you

473
01:26:45,760 --> 01:26:55,980
are sort of familiar with the command line then maybe you saw the general idea of what's there

474
01:26:55,980 --> 01:27:01,880
but still even i if i see someone typing a bunch of stuff on the command line unless i already know

475
01:27:01,880 --> 01:27:07,880
what's going on there's not much chance of following it it's always like uh okay here's a

476
01:27:07,880 --> 01:27:14,480
general idea and then i need to go find the written material and understand it later so that's

477
01:27:14,480 --> 01:27:21,940
basically what you can or how you should interpret the previous demonstration of the exercise so

478
01:27:21,940 --> 01:27:29,680
it's what you can like it's how we would be doing it knowing things and now it will be recorded

479
01:27:29,680 --> 01:27:38,640
for the video so you can review later but it's not something like if you didn't follow everything

480
01:27:38,640 --> 01:27:47,680
there don't worry i mean that's that's normal it's uh um um yeah it will take time that's why

481
01:27:47,680 --> 01:27:55,800
we have the different tracks for uh vs code r studio and whatever so over time slowly as you

482
01:27:55,800 --> 01:28:05,880
do things um follow up and um learn more over time and with that we're going to go on to inspecting

483
01:28:05,880 --> 01:28:13,640
history where i believe we so it doesn't depend on anything we did now and you start by cloning

484
01:28:13,640 --> 01:28:20,120
a new repository so no matter how weird things have gotten now it's okay it doesn't affect

485
01:28:20,120 --> 01:28:27,240
things later and in fact over the next few days of the workshop we do similar things to today

486
01:28:27,240 --> 01:28:32,920
again from different angles and you will have more time to see it over and over again and we'll

487
01:28:32,920 --> 01:28:39,460
slowly pick things up so that's just another reason not to worry so with that i'm going to

488
01:28:39,460 --> 01:28:46,440
swap to [name]'s screen there we go and i will just add that if you if you are interested in

489
01:28:46,440 --> 01:28:48,340
command line, you can go back to the lesson

490
01:28:48,340 --> 01:28:50,400
yesterday and inspect the

491
01:28:50,400 --> 01:28:52,060
tabs under the command line. Then

492
01:28:52,060 --> 01:28:54,280
we'll get more insight into

493
01:28:54,280 --> 01:28:56,480
these commands.

494
01:28:56,800 --> 01:28:58,460
But it's okay

495
01:28:58,460 --> 01:29:00,320
to do things in VS Code

496
01:29:00,320 --> 01:29:01,660
or on GitHub.

497
01:29:02,400 --> 01:29:04,600
But yeah, inspecting history.

498
01:29:05,480 --> 01:29:06,260
So what we

499
01:29:06,260 --> 01:29:08,640
actually want to do

500
01:29:08,640 --> 01:29:10,020
when we

501
01:29:10,020 --> 01:29:12,460
or when do we want to inspect the history

502
01:29:12,460 --> 01:29:13,460
of a

503
01:29:13,460 --> 01:29:15,160
repository?

504
01:29:16,440 --> 01:29:21,700
Sorry, I was answering your question.

505
01:29:21,700 --> 01:29:28,420
Sorry, so when do we actually want to inspect the history of a repository?

506
01:29:29,580 --> 01:29:29,660
Yeah.

507
01:29:30,060 --> 01:29:31,820
So maybe I'll start.

508
01:29:32,140 --> 01:29:37,040
So for example, if I discover a new repository,

509
01:29:37,440 --> 01:29:40,800
then the first thing I'll do is to check,

510
01:29:40,920 --> 01:29:43,240
okay, what's the current state of the repository?

511
01:29:43,240 --> 01:29:46,720
and then look at the history of those commits.

512
01:29:46,720 --> 01:29:50,500
And we've seen some of that yesterday by, well,

513
01:29:51,020 --> 01:29:54,200
clicking on the clock on the GitHub repo.

514
01:29:54,620 --> 01:29:59,100
So that is helpful to get on some insight

515
01:29:59,100 --> 01:30:01,920
on what has been done for that repository.

516
01:30:04,840 --> 01:30:05,560
Yeah.

517
01:30:06,560 --> 01:30:07,280
Yeah.

518
01:30:07,700 --> 01:30:10,840
So for me, I guess there's two levels.

519
01:30:10,840 --> 01:30:22,840
One is quickly seeing what I've done lately in order to know where I am, what I need to do next, and so on, or to see what I might have just messed up.

520
01:30:24,600 --> 01:30:32,000
For a deeper history inspection, at the end of this lesson, I don't know if we'll actually do it as a demo.

521
01:30:32,900 --> 01:30:39,880
You can try it as an exercise if you want, but there's a way to search all of history to figure out where a certain bug was introduced.

522
01:30:39,880 --> 01:30:58,000
So if you find something that's broken and you don't know where it's broken or how to possibly fix it, using these kinds of things can point you exactly, okay, this is where the problem started, and then you can more easily solve it.

523
01:30:58,000 --> 01:31:05,820
yes bug hunting that's a really good case for actually inspecting the history and this is what

524
01:31:05,820 --> 01:31:15,260
one of the exercises that we'll show today so as usual I mean you can choose different paths

525
01:31:15,260 --> 01:31:23,900
and some things can be done on github some can be done on vs code by far the command line is the

526
01:31:23,900 --> 01:31:32,220
most powerful way to do that it's also the hardest one to understand and get used to so i think it's

527
01:31:32,220 --> 01:31:41,460
not wrong to actually combine different paths for inspecting the history and and yeah choose

528
01:31:41,460 --> 01:31:48,300
choose the one which is most usable for what you are trying to achieve but we'll introduce in the

529
01:31:48,300 --> 01:31:53,220
following some tools that you might find useful.

530
01:31:53,220 --> 01:31:58,220
And again, I mean, this depends on what you actually want

531
01:31:58,520 --> 01:32:02,540
to find out about a certain project.

532
01:32:02,540 --> 01:32:07,180
So let's start by looking at this repository.

533
01:32:07,180 --> 01:32:10,860
So remote repository on GitHub.

534
01:32:11,860 --> 01:32:18,120
And so I,

535
01:32:18,300 --> 01:32:26,840
I'll just quickly open it here so this is a very large repository it has like oh I don't know I

536
01:32:26,840 --> 01:32:35,100
think it has oh 7,943 commits so that's that's really a very big one so it can be actually

537
01:32:35,100 --> 01:32:45,300
quite overwhelming to to look through through this whole repository and you might not even

538
01:32:45,300 --> 01:32:55,380
uh want to do that but i'm going to let me open this particular link here which is going to

539
01:32:56,500 --> 01:33:05,780
show a quite nice graphical way of seeing the repository so what it does it's actually looking

540
01:33:05,780 --> 01:33:15,060
at one particular file the readme rst file and show the history of this file over time and this

541
01:33:15,060 --> 01:33:22,900
is maybe not so easy to see on this black background, but it starts from the latest

542
01:33:23,700 --> 01:33:30,340
change to this file done by a certain user and if I can use, for example, the left and right arrows

543
01:33:30,340 --> 01:33:43,300
to go back in time and see snapshots of this file or changes in these files introduced by different

544
01:33:45,060 --> 01:33:52,900
uh by different developers and this tool actually works not only with this repository it can

545
01:33:53,700 --> 01:33:58,820
it works with any repository so you just need to change um the

546
01:34:00,660 --> 01:34:10,340
the repository name with with yours so uh so uh where the so change uh let me show here is that

547
01:34:10,340 --> 01:34:17,780
so change the location of the repository and the particular file that you are interested to

548
01:34:17,780 --> 01:34:27,780
look in so it's one visual way to show a repository it's uh it's well not uh not

549
01:34:27,780 --> 01:34:33,620
necessarily very useful when you actually try to find a bug but if you want to present a project to

550
01:34:34,420 --> 01:34:43,140
to a person that may be useful. But what other tools are there to actually help us find

551
01:34:44,260 --> 01:34:53,220
bugs or new features, new functions that have been introduced in a code? So one of them is

552
01:34:53,220 --> 01:35:04,020
actually git grep, which is similar to the grep command that maybe some of you are familiar with,

553
01:35:04,020 --> 01:35:11,060
and it's typically used with some argument. It can be plain text or it can be some expression.

554
01:35:11,060 --> 01:35:15,220
So this is useful, for example, let's say you know that there is a function

555
01:35:15,220 --> 01:35:21,300
somewhere in the code but you don't know where. You want to find it and then you can do some git

556
01:35:21,300 --> 01:35:37,860
It can be used with some longer text, that's possible as well, it can also be used with

557
01:35:37,860 --> 01:35:41,700
different arguments for this command.

558
01:35:41,700 --> 01:35:50,920
This simply means that ignore the caps for the string that I'm trying to find.

559
01:35:51,300 --> 01:35:54,840
Again, I mean, if you know that there are a bunch of lines,

560
01:35:54,840 --> 01:35:58,680
PIXME, in the code where you or someone else

561
01:35:58,680 --> 01:36:03,500
has introduced the code in order to help you remember

562
01:36:03,500 --> 01:36:05,580
that there are some things you need to improve,

563
01:36:05,580 --> 01:36:08,580
maybe some code documentation,

564
01:36:11,200 --> 01:36:15,420
that in-code documentation that you should add,

565
01:36:15,420 --> 01:36:20,240
then you can use this command to find that.

566
01:36:20,240 --> 01:36:21,120
So,

567
01:36:21,300 --> 01:36:29,620
Git grab, what it will do is going to search for the current state of the repository, right?

568
01:36:29,620 --> 01:36:38,980
So how it will check the content of the files in their present state, which sometimes is

569
01:36:38,980 --> 01:36:41,780
not what you want.

570
01:36:41,780 --> 01:36:48,240
You want to go back in time and see, for example, you knew there was a function or a piece of

571
01:36:48,240 --> 01:36:55,680
text that has simply disappeared from the code and you want to know who has one that has

572
01:36:57,120 --> 01:37:05,920
gotten removed maybe the person that has removed that so the way you can do that

573
01:37:06,560 --> 01:37:17,600
is with the git log command but by using this option minus capital s which is this so-called

574
01:37:17,600 --> 01:37:26,480
pickaxe option and followed by the text that you try to find and this is again this is advanced

575
01:37:26,480 --> 01:37:36,560
it's useful if you know what you are looking for in the code but yeah it's

576
01:37:36,560 --> 01:37:43,840
It's not, maybe not so easy to remember.

577
01:37:44,620 --> 01:37:49,940
So you can, let's say you did find a bug

578
01:37:49,940 --> 01:37:51,760
in some version of the code.

579
01:37:52,800 --> 01:37:57,820
You can, or you just want to inspect a certain commit

580
01:37:57,820 --> 01:37:59,780
that your collaborator has done.

581
01:37:59,880 --> 01:38:03,300
You want to see what are the changes introduced

582
01:38:03,300 --> 01:38:05,060
with that commit.

583
01:38:05,060 --> 01:38:12,880
In the command line, you can use the git show command, followed by the hash of that commit.

584
01:38:12,880 --> 01:38:34,640
You can also do this, for example, on GitHub by having the link of the repository, the URL of the repository, and then followed by this text commit, and then the hash of that particular commit.

585
01:38:34,640 --> 01:38:40,160
So that is going to give you some information on what has been committed.

586
01:38:40,400 --> 01:38:45,700
So I'm actually going to just open this link.

587
01:38:45,840 --> 01:38:50,920
So again, this shows all the changes introduced in this commit with this hash.

588
01:38:51,520 --> 01:39:01,600
And one thing which is quite interesting is that I can click on this icon, browse files,

589
01:39:01,600 --> 01:39:04,660
and then I can see the state

590
01:39:04,660 --> 01:39:07,280
I can see all the files in this repository

591
01:39:07,280 --> 01:39:10,820
at that point in time

592
01:39:10,820 --> 01:39:13,900
so for S they look like

593
01:39:13,900 --> 01:39:17,080
for the commit 75 and so on

594
01:39:17,080 --> 01:39:20,220
so how they looked actually 5 years ago

595
01:39:20,220 --> 01:39:22,720
so that's quite

596
01:39:22,720 --> 01:39:26,540
a nice feature of GitHub

597
01:39:26,540 --> 01:39:29,400
and then sure I can do this on the command line

598
01:39:29,400 --> 01:39:34,540
But if I don't like to work on the command line, then I can view that on GitHub.

599
01:39:36,820 --> 01:39:46,060
So we talked a little bit about git blame and git annotate yesterday.

600
01:39:47,260 --> 01:39:51,360
And this is very nice to see.

601
01:39:51,360 --> 01:39:59,280
So this is very nice to use if you want to track all the changes that have happened to a certain file.

602
01:39:59,400 --> 01:40:08,980
So let's assume that I want to look at this convert matrix Python script from this NetworkX repository.

603
01:40:09,360 --> 01:40:11,900
So let's just open this on GitHub.

604
01:40:13,000 --> 01:40:19,860
So what we want to see, how has this file changed over time?

605
01:40:19,860 --> 01:40:27,860
So then line by line, I'm going to see the person that has last modified a certain line.

606
01:40:27,860 --> 01:40:46,620
There are really lots of changes to this particular file, some older, some newer.

607
01:40:46,620 --> 01:40:54,660
One really nice feature of GitHub that does not have a counterpart in either VS Code or

608
01:40:54,660 --> 01:41:06,820
command line is this icon here. So this is called blame prior to change. It's actually very hard to

609
01:41:06,820 --> 01:41:15,380
understand what it is just from this name, but what it really means is give me the commit that

610
01:41:15,380 --> 01:41:20,380
that is prior to the one that modified this line.

611
01:41:21,700 --> 01:41:25,640
So we can see from here that this particular line

612
01:41:25,640 --> 01:41:30,640
has been modified in the commit.

613
01:41:32,820 --> 01:41:33,660
Where is the hash?

614
01:41:33,660 --> 01:41:34,500
I don't see the hash,

615
01:41:34,500 --> 01:41:37,940
but it has been modified February 22nd.

616
01:41:37,940 --> 01:41:41,680
But maybe I find out some way

617
01:41:41,680 --> 01:41:44,380
that this commit actually introduced the bug

618
01:41:44,380 --> 01:41:46,860
and this bug is in this particular line.

619
01:41:46,860 --> 01:41:49,160
I am not interested in this commit.

620
01:41:49,160 --> 01:41:53,340
I'm interested in the commit, which was before this one,

621
01:41:53,340 --> 01:41:54,660
because then I know that, okay,

622
01:41:54,660 --> 01:41:56,920
that version may actually work.

623
01:41:56,920 --> 01:41:59,060
So I want to start from there.

624
01:41:59,060 --> 01:42:03,140
And the one way I can find that information

625
01:42:03,140 --> 01:42:04,600
on GitHub is with this.

626
01:42:04,600 --> 01:42:06,000
So if I click on this,

627
01:42:06,000 --> 01:42:10,200
I get to the commit prior to this one.

628
01:42:10,200 --> 01:42:12,760
This is rendered very funnily.

629
01:42:12,760 --> 01:42:22,000
Yeah, sorry for that. So then, yeah, it's very weird. So I think it's because the window is so

630
01:42:22,000 --> 01:42:28,500
narrow. So this is the hash of that commit, the prior commit that introduced that change. And

631
01:42:28,500 --> 01:42:36,860
then again, I can investigate the files in this commit. In this case, well, it shows the

632
01:42:36,860 --> 01:42:39,520
biometrics, but I can also

633
01:42:39,520 --> 01:42:41,160
browse the

634
01:42:41,160 --> 01:42:42,240
files if

635
01:42:42,240 --> 01:42:43,480
I

636
01:42:43,480 --> 01:42:46,160
go to

637
01:42:46,160 --> 01:42:49,000
I could browse all the files

638
01:42:49,000 --> 01:42:50,120
if I go to the

639
01:42:50,120 --> 01:42:52,620
main one. So

640
01:42:52,620 --> 01:42:54,500
am I going too slow?

641
01:42:55,640 --> 01:42:57,000
Yeah, should we get to the exercise

642
01:42:57,000 --> 01:42:59,140
soon? And then we'll have some

643
01:42:59,140 --> 01:43:01,300
time before lunch to go over it.

644
01:43:01,300 --> 01:43:03,320
So what

645
01:43:03,320 --> 01:43:05,100
would we want you

646
01:43:05,100 --> 01:43:06,660
to do in the exercise?

647
01:43:06,860 --> 01:43:21,660
So I want you to explore some of these so-called archaeology commands on this NetworkX repository.

648
01:43:22,700 --> 01:43:34,300
And this is where you find it. And let's see. And then what we would like you to try

649
01:43:34,300 --> 01:43:44,060
is to find a certain line in the source code that contains this text, find out where this

650
01:43:44,060 --> 01:43:52,220
line was last modified, and inspect that commit, and try to create a branch which points to that

651
01:43:52,220 --> 01:44:02,380
commit and see how you can bring the code right before that commit. And this

652
01:44:05,580 --> 01:44:11,020
may not be possible to do depending on the path that you are choosing but it's okay to skip.

653
01:44:11,740 --> 01:44:21,900
So give it a try using your preferred path and then let's see should we do this for 20 minutes?

654
01:44:22,220 --> 01:44:30,780
yes that's what it says so we'll return at uh 48 past the hour

655
01:44:30,780 --> 01:44:47,320
okay good so yeah um do what you can uh and

656
01:44:47,320 --> 01:44:55,860
and whatever we do after lunch doesn't depend on this so if you can't do everything that's okay

657
01:44:55,860 --> 01:45:04,480
this is more of experimentation so experiment with whatever is interesting to you okay bye

658
01:45:17,320 --> 01:45:17,940
you

659
01:45:47,320 --> 01:45:47,940
you

660
01:46:17,320 --> 01:46:17,940
you

661
01:46:47,320 --> 01:46:47,940
you

662
01:47:17,320 --> 01:47:17,940
you

663
01:47:47,320 --> 01:47:47,940
you

664
01:48:17,320 --> 01:48:17,940
you

665
01:48:47,320 --> 01:48:47,940
you

666
01:49:17,320 --> 01:49:17,940
you

667
01:49:47,320 --> 01:49:47,940
you

668
01:50:17,320 --> 01:50:17,940
you

669
01:50:47,320 --> 01:50:47,940
you

670
01:51:17,320 --> 01:51:17,940
you

671
01:51:47,320 --> 01:51:47,940
you

672
01:52:17,320 --> 01:52:17,940
you

673
01:52:47,320 --> 01:52:47,940
you

674
01:53:17,320 --> 01:53:17,940
you

675
01:53:47,320 --> 01:53:47,940
you

676
01:54:17,320 --> 01:54:17,940
you

677
01:54:47,320 --> 01:54:47,940
you

678
01:55:17,320 --> 01:55:17,940
you

679
01:55:47,320 --> 01:55:47,940
you

680
01:56:17,320 --> 01:56:17,940
you

681
01:56:47,320 --> 01:56:47,940
you

682
01:57:17,320 --> 01:57:17,940
you

683
01:57:47,320 --> 01:57:47,940
you

684
01:58:17,320 --> 01:58:17,940
you

685
01:58:47,320 --> 01:58:47,940
you

686
01:59:17,320 --> 01:59:17,940
you

687
01:59:47,320 --> 01:59:47,940
you

688
02:00:17,320 --> 02:00:17,940
you

689
02:00:47,320 --> 02:00:47,940
you

690
02:01:17,320 --> 02:01:17,940
you

691
02:01:47,320 --> 02:01:47,940
you

692
02:02:17,320 --> 02:02:17,940
you

693
02:02:47,320 --> 02:02:47,940
you

694
02:03:17,320 --> 02:03:17,940
you

695
02:03:47,320 --> 02:03:47,940
you

696
02:04:17,320 --> 02:04:17,940
you

697
02:04:47,320 --> 02:04:47,940
you

698
02:05:17,320 --> 02:05:17,940
you

699
02:05:47,320 --> 02:05:47,940
you

700
02:06:17,320 --> 02:06:17,940
you

701
02:06:47,320 --> 02:07:17,300
Thank you.

702
02:07:17,320 --> 02:07:18,460
Okay, welcome back, everyone.

703
02:07:18,820 --> 02:07:20,060
Hello. Yes.

704
02:07:23,060 --> 02:07:32,860
So now if we look at the notes, there weren't too many questions relative to before.

705
02:07:33,760 --> 02:07:38,340
So that's hopefully a good sign.

706
02:07:38,340 --> 02:07:47,440
Hopefully a sign of things were going well instead of there being many problems.

707
02:07:48,080 --> 02:07:58,600
If you would like us to do something, you can write here which of the steps you would like to see demos of.

708
02:07:59,260 --> 02:08:06,820
But there's not a clear question which one we should try to follow.

709
02:08:08,340 --> 02:08:15,300
it did relatively good demos before anyway and i don't know if we can do better than that now um

710
02:08:17,940 --> 02:08:27,060
one option is to do the advanced git bisect exercise to show um do you think we have time

711
02:08:27,060 --> 02:08:33,060
to do that so i think yeah we can definitely introduce it and

712
02:08:33,060 --> 02:08:39,680
And, yeah, sorry, I was just writing here.

713
02:08:39,900 --> 02:08:41,380
Yeah, we can definitely introduce it.

714
02:08:42,620 --> 02:08:42,800
Yeah.

715
02:08:42,800 --> 02:08:43,160
So.

716
02:08:46,880 --> 02:08:49,820
Or is there any general discussion we should do?

717
02:08:51,600 --> 02:08:53,140
So, no, not before lunch.

718
02:08:53,260 --> 02:08:56,020
I think, yeah, let's show `git bisect`.

719
02:08:56,200 --> 02:09:02,600
And then if by the end of this, people, well, if we still have time and people want us to demo something,

720
02:09:02,600 --> 02:09:10,280
then we can do that. I think, yeah, just some words on git parsing. So when is this actually

721
02:09:10,280 --> 02:09:23,960
useful? So it's useful if you have a code that you can actually test and decide whether it's good or

722
02:09:23,960 --> 02:09:34,040
bad. So you have some tests that you are running and then it tells you that

723
02:09:34,040 --> 02:09:40,440
now there is a bug in this code you need to revise it or the test pass and then

724
02:09:41,480 --> 02:09:51,000
you can deem that code as a working code. So this is of course not always possible if you have a

725
02:09:51,000 --> 02:09:59,800
repository that may just be a collection of files so it depends i don't know

726
02:10:07,080 --> 02:10:16,360
so the way to use this command git bisect is okay you go to the github repository

727
02:10:16,360 --> 02:10:25,360
uh which is well the local copy of your uh github repository so your local uh local repo

728
02:10:25,360 --> 02:10:37,740
and you do git bisect start so that this triggers uh this uh triggers um a certain algorithm with

729
02:10:37,740 --> 02:10:39,320
with git. So

730
02:10:39,320 --> 02:10:41,900
in the following

731
02:10:41,900 --> 02:10:44,120
what you need to do is to find

732
02:10:44,120 --> 02:10:46,060
a good and a

733
02:10:46,060 --> 02:10:46,680
bad commit.

734
02:10:47,480 --> 02:10:49,780
So you specify git

735
02:10:49,780 --> 02:10:52,320
bisect good followed by

736
02:10:52,320 --> 02:10:53,440
the hash

737
02:10:53,440 --> 02:10:55,900
of this

738
02:10:55,900 --> 02:10:56,600
good commit.

739
02:10:57,420 --> 02:10:59,860
And you also need to specify a bad

740
02:10:59,860 --> 02:11:01,360
commit. So a commit that

741
02:11:01,360 --> 02:11:04,000
has some error

742
02:11:04,000 --> 02:11:05,020
or

743
02:11:05,020 --> 02:11:12,880
or anything so git bisect bad followed by that hash or it can be the name of the branch if it's

744
02:11:12,880 --> 02:11:20,060
the latest commit on that branch once you have specified a good and a bad commit the order

745
02:11:20,060 --> 02:11:27,700
doesn't matter so you have you need a good and bad commit then uh then you well automatically

746
02:11:27,700 --> 02:11:38,620
Git is going to run this bisect algorithm and take you to a commit, which is between

747
02:11:38,620 --> 02:11:40,780
this good and bad commit.

748
02:11:40,780 --> 02:11:45,700
And then what you need to do is deem that, okay, this commit that I am on, so you can

749
02:11:45,700 --> 02:11:51,820
check that with Git status, for example, which commit you are on, is that a good or a bad

750
02:11:51,820 --> 02:11:52,820
commit?

751
02:11:52,820 --> 02:11:59,600
do that by running some tests and and then you either say again keep bisect

752
02:11:59,600 --> 02:12:06,560
good or bad and then once you do that bisect algorithm is going to run again

753
02:12:06,560 --> 02:12:15,340
automatically and then you are going to a new commit and this this cycle

754
02:12:15,340 --> 02:12:25,580
continues until you find the commit that broke your code so there is an optional

755
02:12:25,580 --> 02:12:33,440
exercise that we are not actually going to do but you may try to if you are

756
02:12:33,440 --> 02:12:39,060
interested in in the git bisect then you may try to do this on your own so this is

757
02:12:39,060 --> 02:12:47,860
simply a python script that calculates pi and at some point there is an error which has been

758
02:12:47,860 --> 02:12:59,700
introduced and your task is to use this command to find where this code has been broken. And there

759
02:12:59,700 --> 02:13:08,020
are some hints on how you can achieve this. So again this is useful with repositories

760
02:13:09,060 --> 02:13:16,220
used for co-development. And when you have a clear way of identifying whether your commit

761
02:13:16,220 --> 02:13:24,860
is a working one or not. [name], anything else that we should say about Bisect?

762
02:13:28,700 --> 02:13:32,360
Not really. How many times have you used Bisect before?

763
02:13:32,360 --> 02:13:42,920
oh i i think i might have used it once but i don't remember what it was for so

764
02:13:42,920 --> 02:13:51,020
yeah so i think it's been a very rare thing it is actually better to have tests

765
02:13:51,020 --> 02:14:00,380
along with your code and we'll discuss testing during next week so that you don't even get to

766
02:14:00,380 --> 02:14:01,440
push your code

767
02:14:01,440 --> 02:14:03,160
before

768
02:14:03,160 --> 02:14:06,460
you make sure that it is

769
02:14:06,460 --> 02:14:08,060
working as expected.

770
02:14:09,380 --> 02:14:09,660
But

771
02:14:09,660 --> 02:14:12,700
I do use

772
02:14:12,700 --> 02:14:14,020
it every once in a while, but it's

773
02:14:14,020 --> 02:14:16,380
not very often.

774
02:14:17,780 --> 02:14:17,960
Yeah.

775
02:14:20,080 --> 02:14:22,500
Okay, so what can we expect after

776
02:14:22,500 --> 02:14:24,480
lunch? I believe

777
02:14:24,480 --> 02:14:26,100
that is the

778
02:14:26,100 --> 02:14:28,480
preparing your own

779
02:14:28,480 --> 02:14:33,860
so after lunch we are going to do the reverse of what we've been doing

780
02:14:33,860 --> 02:14:37,620
in the morning so instead of cloning our repository

781
02:14:37,620 --> 02:14:42,220
from github to our local machine

782
02:14:42,220 --> 02:14:46,200
we'll take what we have on our local machine and put it on github

783
02:14:46,200 --> 02:14:50,500
so that's what's waiting

784
02:14:50,500 --> 02:14:54,440
for us after lunch and then we are also going

785
02:14:54,440 --> 02:14:58,220
to discuss some best practices or guidelines

786
02:14:58,220 --> 02:15:00,640
on how to use Git.

787
02:15:00,840 --> 02:15:03,140
So we'll have a discussion around that.

788
02:15:04,380 --> 02:15:04,540
Yeah.

789
02:15:07,400 --> 02:15:08,720
Okay, great.

790
02:15:08,980 --> 02:15:11,320
So let's go.

791
02:15:11,780 --> 02:15:17,120
See you after lunch in about an hour.

792
02:15:17,740 --> 02:15:18,280
Bye.

793
02:15:18,280 --> 02:15:18,500
See you.

794
02:15:28,220 --> 02:15:28,840
you

795
02:15:58,220 --> 02:15:58,840
you

796
02:16:28,220 --> 02:16:28,840
you

797
02:16:58,220 --> 02:16:58,840
you

798
02:17:28,220 --> 02:17:28,840
you

799
02:17:58,220 --> 02:17:58,840
you

800
02:18:28,220 --> 02:18:28,840
you

801
02:18:58,220 --> 02:18:58,840
you

802
02:19:28,220 --> 02:19:28,840
you

803
02:19:58,220 --> 02:19:58,840
you

804
02:20:28,220 --> 02:20:28,840
you

805
02:20:58,220 --> 02:20:58,840
you

806
02:21:28,220 --> 02:21:28,840
you

807
02:21:58,220 --> 02:21:58,840
you

808
02:22:28,220 --> 02:22:28,840
you

809
02:22:58,220 --> 02:22:58,840
you

810
02:23:28,220 --> 02:23:28,840
you

811
02:23:58,220 --> 02:23:58,840
you

812
02:24:28,220 --> 02:24:28,840
you

813
02:24:58,220 --> 02:24:58,840
you

814
02:25:28,220 --> 02:25:28,840
you

815
02:25:58,220 --> 02:25:58,840
you

816
02:26:28,220 --> 02:26:28,840
you

817
02:26:58,220 --> 02:26:58,840
you

818
02:27:28,220 --> 02:27:28,840
you

819
02:27:58,220 --> 02:27:58,840
you

820
02:28:28,220 --> 02:28:28,840
you

821
02:28:58,220 --> 02:28:58,840
you

822
02:29:28,220 --> 02:29:28,840
you

823
02:29:58,220 --> 02:29:58,840
you

824
02:30:28,220 --> 02:30:28,840
you

825
02:30:58,220 --> 02:30:58,840
you

826
02:31:28,220 --> 02:31:28,840
you

827
02:31:58,220 --> 02:31:58,840
you

828
02:32:28,220 --> 02:32:28,840
you

829
02:32:58,220 --> 02:32:58,840
you

830
02:33:28,220 --> 02:33:28,840
you

831
02:33:58,220 --> 02:33:58,840
you

832
02:34:28,220 --> 02:34:28,840
you

833
02:34:58,220 --> 02:34:58,840
you

834
02:35:28,220 --> 02:35:28,840
you

835
02:35:58,220 --> 02:35:58,840
you

836
02:36:28,220 --> 02:36:28,840
you

837
02:36:58,220 --> 02:36:58,840
you

838
02:37:28,220 --> 02:37:28,840
you

839
02:37:58,220 --> 02:37:58,840
you

840
02:38:28,220 --> 02:38:28,840
you

841
02:38:58,220 --> 02:38:58,840
you

842
02:39:28,220 --> 02:39:28,840
you

843
02:39:58,220 --> 02:39:58,840
you

844
02:40:28,220 --> 02:40:28,840
you

845
02:40:58,220 --> 02:40:58,840
you

846
02:41:28,220 --> 02:41:28,840
you

847
02:41:58,220 --> 02:41:58,840
you

848
02:42:28,220 --> 02:42:28,840
you

849
02:42:58,220 --> 02:42:58,840
you

850
02:43:28,220 --> 02:43:28,840
you

851
02:43:58,220 --> 02:43:58,840
you

852
02:44:28,220 --> 02:44:28,840
you

853
02:44:58,220 --> 02:44:58,840
you

854
02:45:28,220 --> 02:45:28,840
you

855
02:45:58,220 --> 02:45:58,840
you

856
02:46:28,220 --> 02:46:28,840
you

857
02:46:58,220 --> 02:46:58,840
you

858
02:47:28,220 --> 02:47:28,840
you

859
02:47:58,220 --> 02:47:58,840
you

860
02:48:28,220 --> 02:48:28,840
you

861
02:48:58,220 --> 02:48:58,840
you

862
02:49:28,220 --> 02:49:28,840
you

863
02:49:58,220 --> 02:49:58,840
you

864
02:50:28,220 --> 02:50:28,840
you

865
02:50:58,220 --> 02:50:58,840
you

866
02:51:28,220 --> 02:51:28,840
you

867
02:51:58,220 --> 02:51:58,840
you

868
02:52:28,220 --> 02:52:28,840
you

869
02:52:58,220 --> 02:52:58,840
you

870
02:53:28,220 --> 02:53:28,840
you

871
02:53:58,220 --> 02:53:58,840
you

872
02:54:28,220 --> 02:54:28,840
you

873
02:54:58,220 --> 02:54:58,840
you

874
02:55:28,220 --> 02:55:28,840
you

875
02:55:58,220 --> 02:55:58,840
you

876
02:56:28,220 --> 02:56:28,840
you

877
02:56:58,220 --> 02:56:58,840
you

878
02:57:28,220 --> 02:57:28,840
you

879
02:57:58,220 --> 02:57:58,840
you

880
02:58:28,220 --> 02:58:28,840
you

881
02:58:58,220 --> 02:58:58,840
you

882
02:59:28,220 --> 02:59:28,840
you

883
02:59:58,220 --> 02:59:58,840
you

884
03:00:28,220 --> 03:00:28,840
you

885
03:00:58,220 --> 03:00:58,840
you

886
03:01:28,220 --> 03:01:28,840
you

887
03:01:58,220 --> 03:01:58,840
you

888
03:02:28,220 --> 03:02:28,840
you

889
03:02:58,220 --> 03:02:58,840
you

890
03:03:28,220 --> 03:03:28,840
you

891
03:03:58,220 --> 03:03:58,840
you

892
03:04:28,220 --> 03:04:28,840
you

893
03:04:58,220 --> 03:04:58,840
you

894
03:05:28,220 --> 03:05:28,840
you

895
03:05:58,220 --> 03:05:58,840
you

896
03:06:28,220 --> 03:06:28,840
you

897
03:06:58,220 --> 03:06:58,840
you

898
03:07:28,220 --> 03:07:28,840
you

899
03:07:58,220 --> 03:07:58,840
you

900
03:08:28,220 --> 03:08:28,840
you

901
03:08:58,220 --> 03:08:58,840
you

902
03:09:28,220 --> 03:09:28,840
you

903
03:09:58,220 --> 03:09:58,840
you

904
03:10:28,220 --> 03:10:28,840
you

905
03:10:58,220 --> 03:10:58,840
you

906
03:11:28,220 --> 03:11:28,840
you

907
03:11:58,220 --> 03:11:58,840
you

908
03:12:28,220 --> 03:12:28,840
you

909
03:12:58,220 --> 03:12:58,840
you

910
03:13:28,220 --> 03:13:28,840
you

911
03:13:58,220 --> 03:13:58,840
you

912
03:14:28,220 --> 03:14:28,840
you

913
03:14:58,220 --> 03:14:58,840
you

914
03:15:28,220 --> 03:15:28,840
you

915
03:15:58,220 --> 03:15:58,840
you

916
03:16:28,220 --> 03:16:28,840
you

917
03:16:58,220 --> 03:17:18,800
hello welcome back everyone i hope you had a good break so now [name] so we

918
03:17:18,800 --> 03:17:24,600
watch that's uh that's good what next me too so uh

919
03:17:24,600 --> 03:17:42,540
And so in the following hour, what we are going to do is to take a local directory we have on our computer, transform it into a GitHub repository, a Git repository, sorry.

920
03:17:42,880 --> 03:17:48,880
And then we are going to share it online on GitHub in this case.

921
03:17:48,880 --> 03:17:59,440
So we are kind of doing the reverse of what we did in the morning when we cloned something existing on the cloud and bringing it to our local computer.

922
03:18:00,300 --> 03:18:04,980
So we do it backwards.

923
03:18:05,540 --> 03:18:16,680
So this is basically the starting point where if someone's already doing something, they use the instructions of this lesson to make it Git and to make it where other people can see it.

924
03:18:16,680 --> 03:18:38,620
Yeah, exactly. So let's imagine you've been working on your project for a while and at some point in time, you realize, oh, I should actually version control this and I should share it with my colleagues so that they can test it, run it, provide feedback, see how we get this forward.

925
03:18:38,620 --> 03:18:48,460
So that's a good reason to version control it and share it with other people.

926
03:18:48,660 --> 03:18:53,480
And then actually sharing it does not necessarily mean with others.

927
03:18:53,680 --> 03:18:58,660
It's just having like an additional copy of your repository on a cloud platform.

928
03:18:58,820 --> 03:19:04,520
So if something happens to your computer, you have a backup for you.

929
03:19:04,520 --> 03:19:14,420
And once you are ready to share it with others as well, then you can add members to your GitHub project and evolve it from there.

930
03:19:14,820 --> 03:19:19,060
So, but yeah, sharing it with your future self.

931
03:19:20,020 --> 03:19:24,840
So you can put it on GitHub, but it's a private repository.

932
03:19:25,120 --> 03:19:30,340
So it's only serving as a backup and you're not really, you're not sharing it.

933
03:19:30,660 --> 03:19:30,780
Okay.

934
03:19:30,920 --> 03:19:31,400
Exactly.

935
03:19:31,400 --> 03:19:34,720
So you can choose, do I want this repository to be private?

936
03:19:35,040 --> 03:19:35,980
Do I want it public?

937
03:19:37,120 --> 03:19:39,640
So there are some restrictions,

938
03:19:39,820 --> 03:19:42,980
how many private repositories you can have

939
03:19:42,980 --> 03:19:44,460
and how big they can be.

940
03:19:45,120 --> 03:19:48,760
But for small ones, it's really no problem.

941
03:19:49,120 --> 03:19:51,980
You can have it private.

942
03:19:52,080 --> 03:19:54,940
And maybe it feels safer to start that way.

943
03:19:55,000 --> 03:19:55,920
And once you're comfortable,

944
03:19:56,400 --> 03:20:00,320
then you can open it up to the public.

945
03:20:01,200 --> 03:20:10,960
yeah okay but so how do we actually do this so uh i guess the starting point is you have

946
03:20:10,960 --> 03:20:18,000
some files in a directory and yeah you know where the directory is exactly so that's uh that's

947
03:20:18,000 --> 03:20:25,280
important uh so you uh you have a collection of files under one directory you may also have sub

948
03:20:25,280 --> 03:20:32,400
directories in that directory but this top directory you want to that contains all the

949
03:20:32,400 --> 03:20:40,320
needed files you initialize that basically as a git repository and then you may start tracking

950
03:20:40,320 --> 03:20:50,080
different versions of your files you have different commits and at some point while you um you uh

951
03:20:50,080 --> 03:20:58,480
push this to GitHub or GitLab or some other cloud platform that has version control.

952
03:21:01,200 --> 03:21:07,440
The point of the exercise for this hour is to select a directory

953
03:21:08,480 --> 03:21:14,480
that you have or create a new directory. You can call it My Project or call it something else.

954
03:21:14,480 --> 03:21:21,200
create some new files in it or copy some files that are not so sensitive that you feel comfortable

955
03:21:21,200 --> 03:21:27,680
later on to putting on GitHub. And that is going to be your GitHub project, right?

956
03:21:28,240 --> 03:21:34,560
And so that is what the project that you are going to transform into a GitHub

957
03:21:36,720 --> 03:21:41,600
project. So in order to transform it actually into a Git repository,

958
03:21:41,600 --> 03:21:46,260
you have several paths to do that

959
03:21:46,260 --> 03:21:49,080
you can either use the command line if you're comfortable with that

960
03:21:49,080 --> 03:21:52,400
or you can use VS Code or GitHub

961
03:21:52,400 --> 03:21:54,800
it's really up to you

962
03:21:54,800 --> 03:21:59,520
but what we want you to do is to transform it into a Git repository

963
03:21:59,520 --> 03:22:04,280
and then move this into GitHub

964
03:22:04,280 --> 03:22:08,820
or GitLab if you actually prefer to do that

965
03:22:08,820 --> 03:22:11,240
although we are not showing that in the solutions

966
03:22:11,240 --> 03:22:15,120
so anything else that

967
03:22:15,120 --> 03:22:19,040
that we should hint

968
03:22:19,040 --> 03:22:21,040
when it comes to this

969
03:22:21,040 --> 03:22:26,860
yeah so we want to give a lot of time for this

970
03:22:26,860 --> 03:22:28,140
because it will be a while

971
03:22:28,140 --> 03:22:31,980
is there anything we should

972
03:22:31,980 --> 03:22:36,220
demonstrate before

973
03:22:36,220 --> 03:22:39,920
yeah should I demonstrate

974
03:22:39,920 --> 03:22:41,900
maybe how to actually do this on

975
03:22:41,900 --> 03:22:42,400
maybe

976
03:22:42,400 --> 03:22:44,540
I don't know VS Code

977
03:22:44,540 --> 03:22:47,560
maybe you could do the

978
03:22:47,560 --> 03:22:50,080
starts of it and then we give some time

979
03:22:50,080 --> 03:22:52,280
and then you finish the rest

980
03:22:52,280 --> 03:22:56,200
okay then I will start

981
03:22:56,200 --> 03:22:58,260
and you should stop me

982
03:22:58,260 --> 03:22:59,540
when you think I've gone

983
03:22:59,540 --> 03:23:04,520
I've shown enough to get people started

984
03:23:04,520 --> 03:23:06,120
so I have

985
03:23:06,120 --> 03:23:09,680
a VS Code, open here.

986
03:23:09,680 --> 03:23:15,300
What I need to figure out now is where is

987
03:23:15,300 --> 03:23:20,420
the directory that I want to turn in a Git repository.

988
03:23:20,420 --> 03:23:24,360
First, I need to make it a Git repository on my local machine.

989
03:23:24,360 --> 03:23:29,560
I'm going to go to this Explorer bar and then open file.

990
03:23:29,560 --> 03:23:33,200
Actually, I will do install from the top menu, which you don't see.

991
03:23:33,200 --> 03:23:39,780
So I'm going to click on File, Open Folder, and I'm going to go to CRDate2.

992
03:23:40,640 --> 03:23:44,460
And I have one directory there, which is called My Project.

993
03:23:45,300 --> 03:23:51,340
And it's not a Git repository, so it only contains some files.

994
03:23:51,340 --> 03:23:57,580
So I will select that as a directory to open.

995
03:23:57,920 --> 03:23:58,140
So yeah.

996
03:23:58,980 --> 03:23:59,700
Sorry, say again.

997
03:24:00,400 --> 03:24:02,660
You made this in advance to get ready.

998
03:24:03,200 --> 03:24:33,180
Yeah, I meant that in advance, but so what it is, is one directory, which I have on my local machine, which contains two files, and those files that it contains are called myscript.py, so it's some Python script, and there is a file which is called license, and VS Code is, yeah, whenever you have

999
03:24:33,200 --> 03:24:38,800
a certain file name or extension is going to show this nice icon so that you know what programming

1000
03:24:38,800 --> 03:24:45,360
language it's in but in all honesty these files are empty so don't think anything fancy it's just

1001
03:24:45,360 --> 03:24:53,440
a demo but um but now so i have these two files under the directory called my project

1002
03:24:54,560 --> 03:25:01,200
and uh what i and this is not a repository yet i'm i have not version controlled these

1003
03:25:01,200 --> 03:25:09,120
files, but I plan to do that in the following. So then I want to transform this into a Git

1004
03:25:12,000 --> 03:25:26,640
repository. And the way I do that is I go to source control. So these commit lines of commits

1005
03:25:26,640 --> 03:25:28,640
which merge or

1006
03:25:28,640 --> 03:25:30,740
diverge. And then I

1007
03:25:30,740 --> 03:25:32,680
have the option to initialize this

1008
03:25:32,680 --> 03:25:34,780
repository. So initialize repository

1009
03:25:34,780 --> 03:25:36,420
means transform

1010
03:25:36,420 --> 03:25:38,240
the existing directory

1011
03:25:38,240 --> 03:25:40,480
into a Git repository.

1012
03:25:41,040 --> 03:25:43,440
Okay. So from the command line,

1013
03:25:43,580 --> 03:25:45,100
that's the equivalent of

1014
03:25:45,100 --> 03:25:47,100
Git init.

1015
03:25:47,100 --> 03:25:47,560
Yes.

1016
03:25:49,200 --> 03:25:51,320
So then what

1017
03:25:51,320 --> 03:25:53,340
I have, I'm going to open, close this.

1018
03:25:53,460 --> 03:25:54,900
It's distracting.

1019
03:25:54,900 --> 03:26:02,000
Then I have this window here,

1020
03:26:02,000 --> 03:26:07,620
which shows me that I have two files license myscript.py,

1021
03:26:07,620 --> 03:26:08,860
which are untracked.

1022
03:26:08,860 --> 03:26:12,300
That means that I initialized this Git repository,

1023
03:26:12,300 --> 03:26:15,840
but I am yet to do the very first commit.

1024
03:26:15,840 --> 03:26:18,680
These files are yet untracked.

1025
03:26:18,680 --> 03:26:22,420
Then what I should do is I should tell Git that,

1026
03:26:22,420 --> 03:26:25,360
Okay, start keeping track of these files.

1027
03:26:25,360 --> 03:26:28,800
So it's similar in the command line with git add

1028
03:26:28,800 --> 03:26:30,080
and the file name.

1029
03:26:30,080 --> 03:26:32,440
And then I click on these pluses,

1030
03:26:32,440 --> 03:26:36,300
which means that it's going to stage these changes.

1031
03:26:37,280 --> 03:26:41,300
So then these are staged, which shows as A,

1032
03:26:41,300 --> 03:26:43,580
like added to the index, in other words,

1033
03:26:43,580 --> 03:26:46,480
but just think of it as staged and ready,

1034
03:26:46,480 --> 03:26:49,300
ready to be included in the next commit.

1035
03:26:49,300 --> 03:26:53,140
And then I can now commit this modification.

1036
03:26:53,140 --> 03:26:55,200
So the inclusion of these two files

1037
03:26:55,200 --> 03:26:59,820
in whatever I am tracking with Git

1038
03:26:59,820 --> 03:27:01,860
into my very first commit.

1039
03:27:01,860 --> 03:27:06,860
So I'm going to give it a commit message here.

1040
03:27:08,680 --> 03:27:13,680
Start tracking my project.

1041
03:27:14,340 --> 03:27:19,240
And this is the equivalent of `git commit -m [message]`.

1042
03:27:19,240 --> 03:27:20,480
start tracking my project.

1043
03:27:20,480 --> 03:27:25,480
So instead of typing the commands, I click.

1044
03:27:27,020 --> 03:27:27,860
Yeah.

1045
03:27:27,860 --> 03:27:32,860
So, and I go to the stage

1046
03:27:33,460 --> 03:27:36,860
where I transform my local directory

1047
03:27:36,860 --> 03:27:41,720
into a repository tracked with Git locally.

1048
03:27:43,000 --> 03:27:45,940
So I can see, let me show one thing.

1049
03:27:45,940 --> 03:27:48,080
So there is actually a graph here,

1050
03:27:48,080 --> 03:27:50,440
which is similar to `git graph` ,

1051
03:27:50,440 --> 03:27:53,140
but I only have one initial commit yet.

1052
03:27:53,140 --> 03:27:55,260
So I am on the main branch,

1053
03:27:55,260 --> 03:27:57,980
which is highlighted in blue.

1054
03:27:57,980 --> 03:28:01,420
It shows the committer and the time of the commit

1055
03:28:01,420 --> 03:28:04,480
and the commit message and which files have been changed.

1056
03:28:04,480 --> 03:28:06,900
And also at the bottom, actually the hash,

1057
03:28:06,900 --> 03:28:09,580
the shortened hash of this commit.

1058
03:28:09,580 --> 03:28:14,580
So the next thing would be now to move this onto GitHub.

1059
03:28:18,080 --> 03:28:22,080
Yeah. And how do we do that?

1060
03:28:22,080 --> 03:28:29,940
Yeah. So should I do that as well? So if I were to do it in VS Code, actually VS Code

1061
03:28:29,940 --> 03:28:41,440
can do this for me by clicking here, publish branch main. And then what I need to do is

1062
03:28:41,440 --> 03:28:53,600
to tell VS Code, oh, but where on GitHub do you want your project to be? And it even gives me the

1063
03:28:53,600 --> 03:29:00,960
option to publish it to either a private or a public repository by default with the same name

1064
03:29:00,960 --> 03:29:08,000
as the directory name, but that can be changed. So the local directory name does not have to be

1065
03:29:08,000 --> 03:29:13,680
the same as the GitHub repository name, although it's easier to keep track of them if they have

1066
03:29:13,680 --> 03:29:20,000
the same name. So I'm going to make this a public repository. So then I click this,

1067
03:29:20,960 --> 03:29:28,560
publish to GitHub public repository. And the first time one does this, one actually has to

1068
03:29:28,560 --> 03:29:33,560
to authorize VS Code to publish on GitHub.

1069
03:29:34,100 --> 03:29:35,840
So it's going to,

1070
03:29:35,840 --> 03:29:40,840
you will be asked to authenticate to GitHub and yeah.

1071
03:29:45,840 --> 03:29:49,260
So that is a necessary step for the very first time

1072
03:29:49,260 --> 03:29:53,160
you use VS Code together with GitHub.

1073
03:29:53,160 --> 03:29:56,560
And then actually I want to show you those messages, but.

1074
03:29:56,560 --> 03:29:59,820
Is there a window open up that's asking about the authentication?

1075
03:30:00,680 --> 03:30:01,060
Yes.

1076
03:30:01,060 --> 03:30:03,320
So there will be a window opening up.

1077
03:30:03,460 --> 03:30:11,640
And actually, well, there will be a browser window on GitHub that will ask you to authenticate.

1078
03:30:12,280 --> 03:30:13,420
And if you, yeah.

1079
03:30:13,840 --> 03:30:15,300
So just follow the steps.

1080
03:30:15,680 --> 03:30:19,320
Well, read what is being prompted.

1081
03:30:19,320 --> 03:30:27,840
And yes, you're going to have to agree to allow VS Code to make changes on GitHub.

1082
03:30:28,400 --> 03:30:32,140
And if you're happy with that, then yes, you should authorize that.

1083
03:30:32,880 --> 03:30:41,760
So one thing I wanted to say, so when I created this repository on GitHub via VS Code,

1084
03:30:41,760 --> 03:30:43,680
then actually it

1085
03:30:43,680 --> 03:30:45,620
asked me if I

1086
03:30:45,620 --> 03:30:47,580
automatically wanted to fetch

1087
03:30:47,580 --> 03:30:49,140
things

1088
03:30:49,140 --> 03:30:51,640
from GitHub

1089
03:30:51,640 --> 03:30:53,680
and what does that mean [name]?

1090
03:30:56,100 --> 03:30:57,320
Can you ask it again?

1091
03:30:57,500 --> 03:30:58,800
I was looking at a question here

1092
03:30:58,800 --> 03:31:01,740
So VS Code asked

1093
03:31:01,740 --> 03:31:03,620
me if it should automatically

1094
03:31:03,620 --> 03:31:04,360
fetch

1095
03:31:04,360 --> 03:31:06,780
commits from

1096
03:31:06,780 --> 03:31:08,540
the GitHub repo

1097
03:31:08,540 --> 03:31:16,540
uh hmm so i guess that means it will automatically do a pool whenever you do things

1098
03:31:16,540 --> 03:31:26,780
on the on the remote repository yeah yeah yeah so that's really well it's for you to decide

1099
03:31:26,780 --> 03:31:32,520
what's best for your project if you should do these automatic pools or not so that's

1100
03:31:32,520 --> 03:31:40,640
And in general, it is a very good idea to keep track of the changes on the remote repository

1101
03:31:40,640 --> 03:31:48,580
on GitHub or GitLab with the ones on your local machine.

1102
03:31:48,920 --> 03:31:50,920
So that's generally good.

1103
03:31:50,920 --> 03:31:59,640
And actually, whenever you start working on your local version, it's good to do a pull or a fetch.

1104
03:31:59,640 --> 03:32:02,940
so they are almost the same

1105
03:32:02,940 --> 03:32:03,420
not really

1106
03:32:03,420 --> 03:32:06,860
but now I think it's good

1107
03:32:06,860 --> 03:32:08,720
if everyone gets to

1108
03:32:08,720 --> 03:32:09,440
try this

1109
03:32:09,440 --> 03:32:13,100
and you can choose

1110
03:32:13,100 --> 03:32:14,640
to do it in VS Code

1111
03:32:14,640 --> 03:32:15,140
or you

1112
03:32:15,140 --> 03:32:16,880
can

1113
03:32:16,880 --> 03:32:20,080
choose your preferred project

1114
03:32:20,080 --> 03:32:23,140
you can either do it in the command line

1115
03:32:23,140 --> 03:32:25,360
so it's really up to you

1116
03:32:25,360 --> 03:32:26,600
yeah

1117
03:32:26,600 --> 03:32:28,600
there is one

1118
03:32:28,600 --> 03:32:36,780
question about saying GitHub has removed password authentication. So in order to do this from

1119
03:32:36,780 --> 03:32:46,100
the command line, you need to use the SSH key method and not the HTTPS method. HTTPS can work

1120
03:32:46,100 --> 03:32:52,020
with an authentication helper or something extra, but that was sort of an extra thing in the install

1121
03:32:52,020 --> 03:33:00,300
instructions and i'd recommend unless you want to go dig into things use ssh for command line

1122
03:33:00,300 --> 03:33:07,620
otherwise stuff can happen and if you use vs code it handles it via the

1123
03:33:07,620 --> 03:33:14,620
https and web browser all automatically so you don't have to think about it so that's a that is

1124
03:33:14,620 --> 03:33:16,460
simpler in a sense

1125
03:33:16,460 --> 03:33:17,580
yeah

1126
03:33:17,580 --> 03:33:21,380
okay so we do exercise

1127
03:33:21,380 --> 03:33:23,500
until it says

1128
03:33:23,500 --> 03:33:25,200
25 minutes so

1129
03:33:25,200 --> 03:33:27,380
16

1130
03:33:27,380 --> 03:33:29,380
that's

1131
03:33:29,380 --> 03:33:33,340
40 minutes past

1132
03:33:33,340 --> 03:33:34,580
hour yeah

1133
03:33:34,580 --> 03:33:37,280
okay okay then

1134
03:33:37,280 --> 03:33:39,360
all right then I'll see you

1135
03:33:39,360 --> 03:33:40,300
in 25 minutes

1136
03:33:40,300 --> 03:33:43,360
yes see you in 25 minutes and

1137
03:33:43,360 --> 03:33:49,280
keep asking questions notes and we keep helping and yeah bye

1138
03:34:13,360 --> 03:34:13,980
you

1139
03:34:43,360 --> 03:34:43,980
you

1140
03:35:13,360 --> 03:35:13,980
you

1141
03:35:43,360 --> 03:35:43,980
you

1142
03:36:13,360 --> 03:36:13,980
you

1143
03:36:43,360 --> 03:36:43,980
you

1144
03:37:13,360 --> 03:37:13,980
you

1145
03:37:43,360 --> 03:37:43,980
you

1146
03:38:13,360 --> 03:38:13,980
you

1147
03:38:43,360 --> 03:38:43,980
you

1148
03:39:13,360 --> 03:39:13,980
you

1149
03:39:43,360 --> 03:39:43,980
you

1150
03:40:13,360 --> 03:40:13,980
you

1151
03:40:43,360 --> 03:40:43,980
you

1152
03:41:13,360 --> 03:41:13,980
you

1153
03:41:43,360 --> 03:41:43,980
you

1154
03:42:13,360 --> 03:42:13,980
you

1155
03:42:43,360 --> 03:42:43,980
you

1156
03:43:13,360 --> 03:43:13,980
you

1157
03:43:43,360 --> 03:43:43,980
you

1158
03:44:13,360 --> 03:44:13,980
you

1159
03:44:43,360 --> 03:44:43,980
you

1160
03:45:13,360 --> 03:45:13,980
you

1161
03:45:43,360 --> 03:45:43,980
you

1162
03:46:13,360 --> 03:46:13,980
you

1163
03:46:43,360 --> 03:46:43,980
you

1164
03:47:13,360 --> 03:47:13,980
you

1165
03:47:43,360 --> 03:47:43,980
you

1166
03:48:13,360 --> 03:48:13,980
you

1167
03:48:43,360 --> 03:48:43,980
you

1168
03:49:13,360 --> 03:49:13,980
you

1169
03:49:43,360 --> 03:49:43,980
you

1170
03:50:13,360 --> 03:50:13,980
you

1171
03:50:43,360 --> 03:50:43,980
you

1172
03:51:13,360 --> 03:51:13,980
you

1173
03:51:43,360 --> 03:51:43,980
you

1174
03:52:13,360 --> 03:52:13,980
you

1175
03:52:43,360 --> 03:52:43,980
you

1176
03:53:13,360 --> 03:53:13,980
you

1177
03:53:43,360 --> 03:53:43,980
you

1178
03:54:13,360 --> 03:54:13,980
you

1179
03:54:43,360 --> 03:54:43,980
you

1180
03:55:13,360 --> 03:55:13,980
you

1181
03:55:43,360 --> 03:55:43,980
you

1182
03:56:13,360 --> 03:56:13,980
you

1183
03:56:43,360 --> 03:56:43,980
you

1184
03:57:13,360 --> 03:57:13,980
you

1185
03:57:43,360 --> 03:57:43,980
you

1186
03:58:13,360 --> 03:58:13,980
you

1187
03:58:43,360 --> 03:58:43,980
you

1188
03:59:13,360 --> 03:59:13,980
you

1189
03:59:43,360 --> 04:00:05,200
Okay, welcome back, everyone.

1190
04:00:06,900 --> 04:00:07,500
Hello.

1191
04:00:07,500 --> 04:00:14,660
From the questions and answers, it seems you did have a try at the exercises

1192
04:00:14,660 --> 04:00:17,080
and most of you have been successful.

1193
04:00:17,940 --> 04:00:25,080
I think that it may be worth actually to show question 47.

1194
04:00:27,280 --> 04:00:33,200
And some of you have proved me wrong that you can do some automatic pushes

1195
04:00:33,200 --> 04:00:47,120
to GitHub if you install CLI, for example. So yeah, default it's not possible by design,

1196
04:00:47,120 --> 04:00:55,760
I'd say, so that it's kind of safer and it has an increased threshold to be able to create these

1197
04:00:56,400 --> 04:01:01,920
remote repositories automatically, but there are ways to do that, either on GitHub or

1198
04:01:03,200 --> 04:01:19,400
on other platforms yeah yeah yeah that's that was also a new one to me um question number 48 here

1199
04:01:19,400 --> 04:01:26,520
so there's lots of things that can go wrong if you don't do all the commands in the right order

1200
04:01:26,520 --> 04:01:31,420
and that's sort of unfortunate it would be better if it was more obvious and less ways

1201
04:01:31,420 --> 04:01:38,320
thing could go wrong but yeah like i'd say when you get these kinds of problems

1202
04:01:38,320 --> 04:01:47,880
try asking someone and see what you can do and yeah and sometimes yeah actually uh searching

1203
04:01:47,880 --> 04:01:57,420
for the error uh on google or or your favorite chatbot can give you some some insights on how

1204
04:01:57,420 --> 04:02:07,180
fix this yeah yeah um for deleting repositories locally i guess that's something we haven't

1205
04:02:08,380 --> 04:02:14,940
said yet i think so the git repository it's nothing magic it's basically a bunch of files

1206
04:02:14,940 --> 04:02:21,740
there's the files you see that are the code files you're editing and using but there's also a hidden

1207
04:02:21,740 --> 04:02:29,180
directory called dot git inside of it and that's where all the repository information is stored

1208
04:02:30,060 --> 04:02:36,860
so if you delete a folder then you've completely reset it you've deleted the history and you've

1209
04:02:36,860 --> 04:02:43,980
deleted the files there and you can clone it again and restart and try it a different way

1210
04:02:43,980 --> 04:02:50,300
and that's okay even like all of us whenever a project gets really weird we're just like okay so

1211
04:02:50,300 --> 04:02:57,600
So let's either move this out of the way or delete it and clone it again and get back to the original state.

1212
04:02:58,340 --> 04:03:10,500
Yeah, and actually the suggestion of, so if you have not actually changed anything in this remote repository, just redefining the origin, the so-called origin.

1213
04:03:10,700 --> 04:03:16,000
So the URL for the remote is better.

1214
04:03:16,240 --> 04:03:17,840
So we did get a suggestion.

1215
04:03:17,840 --> 04:03:26,060
actually we got the command here how to do that is git remote set url the name of the remote which

1216
04:03:26,060 --> 04:03:32,060
is by default origin but it can be called something else and then and then the

1217
04:03:32,060 --> 04:03:40,160
git at and so on the the github location of this

1218
04:03:40,160 --> 04:03:43,240
repository

1219
04:03:43,240 --> 04:03:46,020
so yeah

1220
04:03:46,020 --> 04:03:48,180
that's definitely better if there are no

1221
04:03:48,180 --> 04:03:49,320
changes to this remote

1222
04:03:49,320 --> 04:03:50,660
yeah

1223
04:03:50,660 --> 04:03:52,540
so

1224
04:03:52,540 --> 04:03:55,720
let's see I will

1225
04:03:55,720 --> 04:03:57,220
switch to

1226
04:03:57,220 --> 04:03:59,660
my screen here

1227
04:03:59,660 --> 04:04:01,780
I hope

1228
04:04:01,780 --> 04:04:04,240
yeah and while you do that

1229
04:04:04,240 --> 04:04:06,040
so I'll just

1230
04:04:06,040 --> 04:04:07,860
comment on question

1231
04:04:07,860 --> 04:04:09,140
50 or the

1232
04:04:09,140 --> 04:04:17,060
well the note in 50 is like trying vs code makes you actually drop the command line and i think

1233
04:04:17,060 --> 04:04:23,860
it's uh yeah it's it's true it does make life easier sometime um i also think that it's

1234
04:04:24,660 --> 04:04:31,700
the features that vs code is introducing are expanding when it comes to uh to uh using it

1235
04:04:31,700 --> 04:04:38,260
with GitHub. So for some things, I think complicated commands, it's

1236
04:04:39,860 --> 04:04:45,940
maybe easier to use the command line, but if you use it in a basic to intermediate way,

1237
04:04:45,940 --> 04:04:53,220
VS Code is already powerful enough. So there is no need to learn these commands. So yeah.

1238
04:04:53,220 --> 04:05:04,400
Yeah, it definitely has the most of the stuff you need to do with GitHub and Git.

1239
04:05:05,980 --> 04:05:08,400
Yeah, I also think it's a good balance.

1240
04:05:08,740 --> 04:05:12,480
So use your editor for what makes easy,

1241
04:05:12,620 --> 04:05:16,540
but you can always drop to the command line for extra stuff.

1242
04:05:17,000 --> 04:05:21,440
It's not two different Git systems, but one with two different interfaces.

1243
04:05:21,440 --> 04:05:29,680
Yeah, and I think one nice thing is that you also get to have a nice editor

1244
04:05:29,680 --> 04:05:35,360
together with your code. So that's one thing I like about VS Code as well.

1245
04:05:37,800 --> 04:05:50,680
Yeah. So here we have some remote repositories. So we're doing this with GitHub as the example.

1246
04:05:51,440 --> 04:05:59,360
a very similar thing works for gitlab so for example your university may have its own git lab

1247
04:05:59,360 --> 04:06:03,120
and things will be slightly different the website will look slightly different

1248
04:06:03,120 --> 04:06:08,320
and the paths will be slightly different but overall the same kind of idea

1249
04:06:10,240 --> 04:06:16,960
and there's other smaller ones you can use for example bitbucket is one i've seen

1250
04:06:16,960 --> 04:06:25,200
some people use you can also store git remotes on any server that you can ssh to so for example

1251
04:06:25,200 --> 04:06:31,600
when i was doing my thesis i didn't want to send it to any other place and not that they existed

1252
04:06:31,600 --> 04:06:43,280
at the time really but i could um store my work on some my work computer for example

1253
04:06:43,280 --> 04:06:53,760
okay um and this last bit here so by putting it on github you make it available for other people

1254
04:06:53,760 --> 04:07:01,960
to see it but these aren't permanent things so github exists as long as your account is active

1255
04:07:01,960 --> 04:07:08,060
but it can disappear at any time and when you really want to make code available for long-term

1256
04:07:08,060 --> 04:07:15,420
things like as part of a permanent paper you want to archive the code somewhere else and that's um

1257
04:07:18,620 --> 04:07:22,380
that's something we'll talk about next week with stuff like reproducible research

1258
04:07:24,220 --> 04:07:32,940
but now i propose if there's not much else we head to a break and see

1259
04:07:32,940 --> 04:07:43,980
what comes next are there any there's a few more good questions here but i think they're

1260
04:07:44,860 --> 04:07:50,380
answerable right here so let's let the questions keep coming in so after the break we talk about

1261
04:07:50,380 --> 04:07:56,620
practical things so what do we actually do do each of us actually use what we teach

1262
04:07:57,180 --> 04:08:01,100
we can talk among ourselves and any other instructors that happen to be around

1263
04:08:01,100 --> 04:08:08,880
and you can um you can hear the inside story so do prepare your questions go ahead and start

1264
04:08:08,880 --> 04:08:16,360
asking them and maybe you can see there is a tail on my desk so hopefully you get some

1265
04:08:16,360 --> 04:08:23,040
entertainment from cats when you get back okay great okay see you after the break see you after

1266
04:08:23,040 --> 04:08:24,080
the break bye

1267
04:08:31,100 --> 04:08:31,720
you

1268
04:09:01,100 --> 04:09:01,720
you

1269
04:09:31,100 --> 04:09:31,720
you

1270
04:10:01,100 --> 04:10:01,720
you

1271
04:10:31,100 --> 04:10:31,720
you

1272
04:11:01,100 --> 04:11:01,720
you

1273
04:11:31,100 --> 04:11:31,720
you

1274
04:12:01,100 --> 04:12:01,720
you

1275
04:12:31,100 --> 04:12:31,720
you

1276
04:13:01,100 --> 04:13:01,720
you

1277
04:13:31,100 --> 04:13:31,720
you

1278
04:14:01,100 --> 04:14:01,720
you

1279
04:14:31,100 --> 04:14:31,720
you

1280
04:15:01,100 --> 04:15:01,720
you

1281
04:15:31,100 --> 04:15:31,720
you

1282
04:16:01,100 --> 04:16:01,720
you

1283
04:16:31,100 --> 04:16:31,720
you

1284
04:17:01,100 --> 04:17:01,720
you

1285
04:17:31,100 --> 04:17:31,720
you

1286
04:18:01,100 --> 04:18:01,720
you

1287
04:18:31,100 --> 04:18:55,840
Welcome back.

1288
04:18:55,840 --> 04:19:20,120
Uh, there were a lot of good questions in the notes here. Um, but I propose that we first go through the practical advice parts. And then we, okay, you can see cats is roaming around here looking for trouble.

1289
04:19:20,120 --> 04:19:31,240
I hope I don't have to go get up and solve problems. Okay. Yeah. So we do the practical

1290
04:19:31,240 --> 04:19:36,680
advice and then we take the rest of the time doing Q&A, which can also be practical advice

1291
04:19:36,680 --> 04:19:42,740
questions, but we'll go over a lot of these questions here. So for practical advice,

1292
04:19:42,740 --> 04:19:51,140
are there any other instructors in the uh in the studio who would like to join us

1293
04:19:54,500 --> 04:19:59,700
so we're going here to this oh hello [name] hello

1294
04:20:02,020 --> 04:20:08,100
so [name] will be instructing next week with us i believe

1295
04:20:08,100 --> 04:20:21,300
um okay i'm losing uh my mouse cursor wasn't isn't working properly uh this is not good

1296
04:20:24,180 --> 04:20:29,860
let me fix something okay yeah so practically speaking

1297
04:20:31,140 --> 04:20:35,220
what should we and should we not do it's this part right here

1298
04:20:35,220 --> 04:20:44,120
so yeah the main question is of all the things we've talked about so far today

1299
04:20:44,120 --> 04:20:48,540
what do you actually use and not use

1300
04:20:48,540 --> 04:21:01,440
so should i go first since i asked the question you go first yeah so if you ask me um

1301
04:21:01,440 --> 04:21:13,200
so definitely i use git for almost every project i do if i'm making code editing files

1302
04:21:13,200 --> 04:21:20,660
i may as well have a record of what the previous date was and if i don't say more than half the

1303
04:21:20,660 --> 04:21:25,480
time i'm going to end up regretting it someday and it's really easy to make a git repository

1304
04:21:25,480 --> 04:21:31,400
either from the command line or editor and when a project is new i basically commit everything

1305
04:21:32,040 --> 04:21:39,480
like if by two days from now all the code would change anyway all that really matters is i have

1306
04:21:39,480 --> 04:21:45,160
something i don't care about every commit being perfectly atomic with a great message and so on

1307
04:21:45,960 --> 04:21:51,960
but as projects get older and it becomes more mature and like other people might be using it

1308
04:21:51,960 --> 04:21:56,680
then i make sure that every commit has a good message because other people might

1309
04:21:56,680 --> 04:22:03,880
pool and see what the new stuff is um i make sure that each commit does only one thing so if i break

1310
04:22:03,880 --> 04:22:13,000
something i can undo just that part and so on and it sort of usually comes naturally most of my stuff

1311
04:22:13,000 --> 04:22:21,080
somehow goes on to github or but not everything private stuff i don't not even in public

1312
04:22:21,080 --> 04:22:31,800
repositories what about you all uh [name] you're next in the list yeah i i might say yeah i i

1313
04:22:31,800 --> 04:22:37,960
tend to use git a lot even just for sharing data so it's possibly an improper use of git

1314
04:22:37,960 --> 04:22:47,960
but just to share data between different hosts um yeah i mean yeah and yeah um but uh but yeah

1315
04:22:47,960 --> 04:22:55,240
maybe there are some things we saw today that i don't use a lot uh like for example git bisect

1316
04:22:55,240 --> 04:23:01,160
but i mentioned i used it but uh a few times in my life it was actually a possible a bit of a

1317
04:23:01,160 --> 04:23:13,320
lifesaver um but yeah um yeah and uh i think uh a lot of uh we discussed a lot of things that

1318
04:23:13,320 --> 04:23:18,320
that I use rarely because I try to make my,

1319
04:23:21,540 --> 04:23:25,940
I try to make sure that the last commit I make,

1320
04:23:25,940 --> 04:23:27,640
like the current state of the repository

1321
04:23:27,640 --> 04:23:30,380
is the most important one by using testing,

1322
04:23:30,380 --> 04:23:31,880
for example, automated testing.

1323
04:23:32,880 --> 04:23:36,380
But yeah, but when I made a mistake,

1324
04:23:36,380 --> 04:23:39,260
then it's really nice to have a look at all the,

1325
04:23:39,260 --> 04:23:45,640
you know git annotate git blame or all the logs or what what the log can give you i think that

1326
04:23:45,640 --> 04:23:54,040
um i i learn uh every now and then something new that i think oh that's actually interesting so

1327
04:23:54,040 --> 04:24:00,140
it's i think it's a long journey to actually be able to use git efficiently and uh in a way

1328
04:24:00,140 --> 04:24:10,420
actually suits you yeah uh [name] what do you usually do so i use it for some very few private

1329
04:24:10,420 --> 04:24:19,500
projects but uh but usually in collaboration with uh with others uh and um i prefer to use the

1330
04:24:19,500 --> 04:24:25,240
command line but uh but for some of the projects i just find it easier to work on the web so if i

1331
04:24:25,240 --> 04:24:27,340
know that it's going to be

1332
04:24:27,340 --> 04:24:29,280
one commit, one file

1333
04:24:29,280 --> 04:24:30,460
then I just add it

1334
04:24:30,460 --> 04:24:33,080
on the fly on GitHub and

1335
04:24:33,080 --> 04:24:35,200
not bother about cloning it

1336
04:24:35,200 --> 04:24:36,820
on my local machine so

1337
04:24:36,820 --> 04:24:38,760
it's convenient

1338
04:24:38,760 --> 04:24:41,040
sometimes

1339
04:24:41,040 --> 04:24:43,360
and then when I do work on the

1340
04:24:43,360 --> 04:24:45,180
command line then it's

1341
04:24:45,180 --> 04:24:46,440
git status all the time

1342
04:24:46,440 --> 04:24:48,980
my most favorite command

1343
04:24:48,980 --> 04:24:50,820
my most used command

1344
04:24:50,820 --> 04:24:51,360
and

1345
04:24:51,360 --> 04:24:54,760
yeah I find I mean

1346
04:24:54,760 --> 04:24:57,280
the command line has

1347
04:24:57,280 --> 04:24:59,300
increased flexibility in what you are

1348
04:24:59,300 --> 04:25:00,360
actually trying to do

1349
04:25:00,360 --> 04:25:02,380
it's also

1350
04:25:02,380 --> 04:25:05,460
faster for me sometimes than just

1351
04:25:05,460 --> 04:25:07,420
clicking sometimes I get lost

1352
04:25:07,420 --> 04:25:08,360
in all this clicking

1353
04:25:08,360 --> 04:25:11,360
but it's really just a matter

1354
04:25:11,360 --> 04:25:12,720
of preference

1355
04:25:12,720 --> 04:25:15,340
and I do use GitHub as well

1356
04:25:15,340 --> 04:25:17,080
a lot so and sometimes GitLab

1357
04:25:17,080 --> 04:25:18,620
it really depends on

1358
04:25:18,620 --> 04:25:19,980
the collaborators

1359
04:25:19,980 --> 04:25:23,320
well we have some more

1360
04:25:23,320 --> 04:25:30,440
sensitive projects for which we want gitlab so uh yeah so that's uh that's great as well

1361
04:25:32,280 --> 04:25:39,720
yeah if we look at this page here let's see what it recommends so if you're working on

1362
04:25:39,720 --> 04:25:47,560
the command line use the git status command all the time so not using git status is like going

1363
04:25:47,560 --> 04:25:56,260
for a long walk and not using your eyes to see where you are so eventually you might make a wrong

1364
04:25:56,260 --> 04:26:02,920
turn and if you aren't aware that something is like you've turned off the wrong way it can go

1365
04:26:02,920 --> 04:26:07,440
really bad before you correct yourself but if you do see that something doesn't quite look right

1366
04:26:07,440 --> 04:26:13,920
it's usually pretty easy to take a step back and say okay yeah here's the command i missed this or

1367
04:26:13,920 --> 04:26:19,200
that whatever but you know even from vs code or other editors it's good to know what current

1368
04:26:19,200 --> 04:26:26,880
branch you have out and what's modified and not and so on so use the different status information

1369
04:26:26,880 --> 04:26:38,940
it has for commit messages um yeah so my best oh yeah go ahead sorry i wanted to say one thing

1370
04:26:38,940 --> 04:26:41,180
about using Git status.

1371
04:26:41,180 --> 04:26:43,800
So if you're using an editor like VS Code,

1372
04:26:43,800 --> 04:26:45,960
they can have their own status.

1373
04:26:45,960 --> 04:26:48,540
So it's better actually to compare the things

1374
04:26:48,540 --> 04:26:51,580
you see in your editor with the issue

1375
04:26:51,580 --> 04:26:53,580
if you plan to use it both at the same time

1376
04:26:53,580 --> 04:26:55,860
from the command line and the editor.

1377
04:26:55,860 --> 04:26:58,320
Sometimes there are some weird things happening

1378
04:26:58,320 --> 04:27:01,020
because the status is not the same in the command line

1379
04:27:01,020 --> 04:27:02,220
and in the editor.

1380
04:27:02,220 --> 04:27:03,780
So yeah.

1381
04:27:03,780 --> 04:27:04,280
OK.

1382
04:27:04,280 --> 04:27:04,920
Be aware of that.

1383
04:27:04,920 --> 04:27:05,860
Good to know.

1384
04:27:05,860 --> 04:27:06,360
Yeah.

1385
04:27:06,360 --> 04:27:16,680
here you see some advice for commit messages so um the convention is that there's one really

1386
04:27:16,680 --> 04:27:24,640
short line first like less than around 80 characters a terminal width that is used for

1387
04:27:24,640 --> 04:27:34,280
summaries and then any longer details here so it's well as i think we've said before

1388
04:27:34,280 --> 04:27:40,540
my philosophy is don't let perfection get in the way of getting stuff done there have been times

1389
04:27:40,540 --> 04:27:44,900
that i haven't committed stuff because i haven't wanted to make a good commit message and it just

1390
04:27:44,900 --> 04:27:50,960
keeps piling up more and more and it never gets done so there's times when i'll come back to a

1391
04:27:50,960 --> 04:27:55,120
project i haven't worked on in a while and i see there's stuff in there that's not committed

1392
04:27:55,120 --> 04:28:00,100
instead of saying let's see what happens i just make a new commit immediately that says

1393
04:28:00,100 --> 04:28:09,080
uncommitted changes that i found around and well then not perfect but at least whatever i start to

1394
04:28:09,080 --> 04:28:16,500
do in the future it can keep it organized um but the more stuff that's going on the bigger the

1395
04:28:16,500 --> 04:28:21,460
project and the more people that might be reading it including yourself in the future you can get

1396
04:28:21,460 --> 04:28:26,480
more and more advanced here like you can cross-reference relative relevant issues you can

1397
04:28:26,480 --> 04:28:35,040
explain what went wrong um and also practice makes perfect so just start small and then

1398
04:28:35,040 --> 04:28:42,700
you'll get better at writing commit messages so yeah and if you don't then that's also okay

1399
04:28:42,700 --> 04:28:51,260
yeah and i also would add uh there are also ways to amend your commits messages if you make mistakes

1400
04:28:51,260 --> 04:28:56,660
or to, you can do some weird, obscure stuff

1401
04:28:56,660 --> 04:28:59,520
with your commits if you really need to.

1402
04:29:00,060 --> 04:29:04,260
So one thing I wanted to add is that

1403
04:29:04,260 --> 04:29:06,900
about the content of the commit message,

1404
04:29:07,320 --> 04:29:10,860
for me, it's really important to mention the context

1405
04:29:10,860 --> 04:29:12,500
where I've done something.

1406
04:29:12,580 --> 04:29:14,720
For example, if I'm fixing a function,

1407
04:29:14,720 --> 04:29:18,720
I wouldn't just write the function that I fixed,

1408
04:29:18,720 --> 04:29:20,500
that I fixed, but also for example,

1409
04:29:20,500 --> 04:29:21,640
if it's a testing function,

1410
04:29:21,640 --> 04:29:24,360
if it's not so deep to make sure that

1411
04:29:24,360 --> 04:29:26,480
when I look at the commit log,

1412
04:29:26,480 --> 04:29:29,620
I'm able to figure out if a commit is relevant

1413
04:29:29,620 --> 04:29:31,140
for what I'm doing or not.

1414
04:29:33,080 --> 04:29:34,300
Yeah.

1415
04:29:34,300 --> 04:29:36,780
I guess one way to look at it is

1416
04:29:36,780 --> 04:29:39,320
pretend you're telling someone to do the commit

1417
04:29:39,320 --> 04:29:40,160
you just did.

1418
04:29:40,160 --> 04:29:45,160
So it'd be like fix bug of displaying the output

1419
04:29:45,340 --> 04:29:48,460
or add feature of such and such.

1420
04:29:48,720 --> 04:29:52,880
And then, yeah, this imperative case.

1421
04:29:54,160 --> 04:29:55,620
Let's see what comes next.

1422
04:29:57,140 --> 04:30:00,480
What level of branching complexity is necessary?

1423
04:30:00,480 --> 04:30:07,460
So branches is something we've gone over a little bit here, but not in great depth yet.

1424
04:30:09,340 --> 04:30:14,620
But simple projects might have only a main branch, and you put everything there.

1425
04:30:14,620 --> 04:30:20,000
If you mess something up, well, it's only you and you can go back and fix it.

1426
04:30:20,240 --> 04:30:27,800
And it's less work to fix stuff if it goes wrong than to keep stuff from going wrong in the first place.

1427
04:30:29,240 --> 04:30:40,740
If there's ideas that you think won't be finished or you need to be kept separate because it might break things before you can fix it, you can start using branches there.

1428
04:30:40,740 --> 04:30:46,640
or things where you want to make lots of small commits while you're developing but in the end

1429
04:30:46,640 --> 04:30:51,800
you might just say no i don't want this and then you go back to main and ignore everything you

1430
04:30:51,800 --> 04:30:58,520
branched tags are good for important milestones i think there was a notes question earlier about

1431
04:30:58,520 --> 04:31:07,460
when to use tags and that's something like um oh what's it called like okay this is the version i

1432
04:31:07,460 --> 04:31:13,180
submitted or this is the version yeah really single version for the paper that kind of stuff

1433
04:31:13,180 --> 04:31:22,140
yeah um and the more people that get added the more that you would use branches and things like

1434
04:31:22,140 --> 04:31:29,240
that so tomorrow we see the highest level where you use branches for everything and then there's

1435
04:31:29,240 --> 04:31:34,800
always someone or there's a chance for someone else to look and see a change before you start

1436
04:31:34,800 --> 04:31:37,060
before it gets accepted.

1437
04:31:39,540 --> 04:31:42,380
Have we talked about staging much yet?

1438
04:31:44,020 --> 04:31:45,520
I don't think we do.

1439
04:31:45,520 --> 04:31:46,260
Very briefly.

1440
04:31:46,520 --> 04:31:48,120
I just mentioned it very briefly

1441
04:31:48,120 --> 04:31:52,520
when I worked on the command line.

1442
04:31:52,840 --> 04:31:54,380
But yeah, tell us some more.

1443
04:31:55,320 --> 04:31:55,500
Yeah.

1444
04:31:56,220 --> 04:31:57,980
So staging is a way.

1445
04:31:58,240 --> 04:32:00,680
So I guess maybe you remember the git add command

1446
04:32:00,680 --> 04:32:02,300
where we say git add

1447
04:32:02,300 --> 04:32:05,060
and it prepares something to commit.

1448
04:32:05,260 --> 04:32:06,420
And when we type git commit,

1449
04:32:06,820 --> 04:32:08,880
it commits everything that was added.

1450
04:32:09,600 --> 04:32:13,200
So this is good when you make multiple changes at once,

1451
04:32:13,220 --> 04:32:14,700
you can decide what you need

1452
04:32:14,700 --> 04:32:19,120
or you can, yeah,

1453
04:32:19,620 --> 04:32:22,420
or you just want to verify things

1454
04:32:22,420 --> 04:32:25,320
or have a small checkpoint before the commit.

1455
04:32:26,560 --> 04:32:28,640
Yeah, and I would just add it's like,

1456
04:32:29,320 --> 04:32:30,260
oh, sorry, it's just,

1457
04:32:30,260 --> 04:32:36,480
It's the same as clicking on the plus button next to a file in VS Code.

1458
04:32:36,800 --> 04:32:38,560
So that is staging as well.

1459
04:32:39,700 --> 04:32:39,860
Yeah.

1460
04:32:41,820 --> 04:32:44,020
And it's useful.

1461
04:32:44,420 --> 04:32:48,200
I often add things first and look at it and then commit it.

1462
04:32:48,520 --> 04:32:51,420
But also there's plenty of times I just commit everything

1463
04:32:51,420 --> 04:32:58,280
or use the git commit command in a mode that adds it and commits it at the same time.

1464
04:32:58,280 --> 04:33:00,400
because stuff's so small

1465
04:33:00,400 --> 04:33:03,300
and there's not really any doubt in my mind

1466
04:33:03,300 --> 04:33:04,780
what's going wrong on.

1467
04:33:04,940 --> 04:33:06,840
And if I do make a mistake,

1468
04:33:07,000 --> 04:33:08,860
well, I don't really care

1469
04:33:08,860 --> 04:33:11,620
because no one cares about the project that much.

1470
04:33:14,660 --> 04:33:16,240
How large should commits be?

1471
04:33:16,240 --> 04:33:18,900
Or is anything else about staging you all have?

1472
04:33:20,760 --> 04:33:22,000
No, I think it's good.

1473
04:33:23,180 --> 04:33:24,940
So how large should commits be?

1474
04:33:24,940 --> 04:33:27,640
I think

1475
04:33:27,640 --> 04:33:30,640
in the beginning

1476
04:33:30,640 --> 04:33:32,640
it's better to commit

1477
04:33:32,640 --> 04:33:33,280
more often

1478
04:33:33,280 --> 04:33:36,280
and then as you get

1479
04:33:36,280 --> 04:33:38,680
more used to Git and more confident

1480
04:33:38,680 --> 04:33:39,380
about

1481
04:33:39,380 --> 04:33:42,740
how much to introduce in one commit

1482
04:33:42,740 --> 04:33:44,400
then they can be larger

1483
04:33:44,400 --> 04:33:46,560
but anyway it's good to have

1484
04:33:46,560 --> 04:33:48,500
no more than

1485
04:33:48,500 --> 04:33:50,060
one

1486
04:33:50,060 --> 04:33:52,440
feature or important

1487
04:33:52,440 --> 04:33:54,220
modification per commit so then

1488
04:33:54,220 --> 04:34:01,820
And as [name] said, if something went wrong in that commit, you have the possibility to revert those changes.

1489
04:34:03,500 --> 04:34:13,980
In other words, one could say you should have only one thing that can fail in a commit, let's say, so that you can tell which thing was.

1490
04:34:13,980 --> 04:34:22,960
yeah but without a doubt there's times when or what if i'd say for me as small as possible

1491
04:34:22,960 --> 04:34:30,760
but sometimes it's not possible just because i don't have time or energy and then i do a lot and

1492
04:34:30,760 --> 04:34:40,060
hope it's okay so yeah and it depends on who's gonna be looking at stuff if it's just for you

1493
04:34:40,060 --> 04:34:43,420
then you probably won't care

1494
04:34:43,420 --> 04:34:46,540
if I'm contributing to a project like NumPy

1495
04:34:46,540 --> 04:34:48,540
they probably do care

1496
04:34:48,540 --> 04:34:51,700
and need it to look

1497
04:34:51,700 --> 04:34:53,220
exactly correct

1498
04:34:53,220 --> 04:34:56,120
is that all?

1499
04:34:56,660 --> 04:35:00,820
so the next part if we go to it

1500
04:35:00,820 --> 04:35:02,660
is related, I'll click back

1501
04:35:02,660 --> 04:35:04,940
and it is what to avoid

1502
04:35:04,940 --> 04:35:12,540
so let's see what's here

1503
04:35:12,540 --> 04:35:15,780
so this says

1504
04:35:15,780 --> 04:35:23,040
commit message that that explained what's been changed but not why it's changed

1505
04:35:23,040 --> 04:35:29,400
so if it's not obvious like the code will show what has changed perhaps it's more important

1506
04:35:29,400 --> 04:35:34,880
to explain why something has changed again it matters more when projects gets larger

1507
04:35:34,880 --> 04:35:43,020
I think that being too pedantic just makes people not record everything yeah and also

1508
04:35:43,020 --> 04:35:49,080
what is obvious to you may not be obvious to others so I think it is good to make an effort

1509
04:35:49,080 --> 04:35:58,220
of explaining why why you introduce that yeah and maybe it's obvious to you now well maybe

1510
04:35:58,220 --> 04:36:05,000
three years from now it's i mean that's obvious why that change got implemented so

1511
04:36:05,000 --> 04:36:12,060
yeah i think much more important is this next one committing generated files let's say you're

1512
04:36:12,060 --> 04:36:19,680
working on your thesis and you have the latex source there and then you make a pdf out of the

1513
04:36:19,680 --> 04:36:27,040
thesis do you want to add your pdf to the git repository so there the answer is much more

1514
04:36:27,040 --> 04:36:35,560
strongly probably not because when you add it there every time you recompile it can show this

1515
04:36:35,560 --> 04:36:42,240
has changed and would update it and it can be made directly from the source already so there's really

1516
04:36:42,240 --> 04:36:48,860
no need to add that there it's better to have only the things you actually edit committed and

1517
04:36:48,860 --> 04:36:55,380
anything automatically generated gets excluded and you can do that with these git ignore files

1518
04:36:55,380 --> 04:37:02,740
so on the other hand i might save a checkpoint of the thesis if it's something that i expect

1519
04:37:02,740 --> 04:37:09,680
people to want to look at from the github web interface or something but that's not

1520
04:37:09,680 --> 04:37:13,400
that's a separate copy from the one that's automatically generated

1521
04:37:13,400 --> 04:37:23,720
i would add to this record it once any change git will want you to update it okay so i would

1522
04:37:23,720 --> 04:37:31,580
I add to this that, okay, so you don't want to store generated files and track them in Git.

1523
04:37:32,040 --> 04:37:37,940
But what you could do and you should do is to maybe write a recipe on how to get those generated files.

1524
04:37:37,940 --> 04:37:51,700
For example, if the process is a bit lengthy and complicated, then you can have a script that helps you produce those or at least some documentation that tells you how to get those.

1525
04:37:51,700 --> 04:37:54,220
So you don't actually need to store them there,

1526
04:37:54,220 --> 04:37:57,020
because there's a recipe to get them.

1527
04:37:57,020 --> 04:37:58,180
Yeah.

1528
04:37:58,180 --> 04:38:05,020
And that's something that we'll talk a bit more

1529
04:38:05,020 --> 04:38:12,220
about next day for in reproducible research,

1530
04:38:12,220 --> 04:38:14,140
how to automatically generate these things.

1531
04:38:17,380 --> 04:38:20,880
For huge files, it's usually not good to commit them,

1532
04:38:20,880 --> 04:38:25,960
because it tracks the whole thing and that inflates the size of your repository and even

1533
04:38:25,960 --> 04:38:36,820
removing them later doesn't um reduce the size of the history so yeah better not to do that

1534
04:38:36,820 --> 04:38:44,260
and this gets what we said about being too pedantic about things so if you think it's not

1535
04:38:44,260 --> 04:38:50,760
good it's ugly someone's going to judge me for this you'll usually stop committing and then

1536
04:38:51,640 --> 04:39:02,200
well you end up losing things later um committing unrelated changes together again if it's a small

1537
04:39:02,200 --> 04:39:08,520
project i think who cares the larger projects get they usually want one change per one commit

1538
04:39:12,520 --> 04:39:19,000
there's these some problems with branching workflows where things can well you can try

1539
04:39:19,000 --> 04:39:27,000
to make things too fancy too advanced or whatever and well either not checking what branch you're

1540
04:39:27,000 --> 04:39:32,280
on like with the git status or trying to make branches that are so big that it eventually

1541
04:39:33,000 --> 04:39:38,120
can never get merged back any other common things to avoid

1542
04:39:38,120 --> 04:39:56,140
yeah don't wait don't wait too long before uh merging yeah i'd say most important is don't um

1543
04:39:56,140 --> 04:40:03,880
don't try to be too perfect and let the perfect become the enemy of the good because i know

1544
04:40:03,880 --> 04:40:11,320
far more people that regret not having recorded their history than have regretted recording

1545
04:40:11,320 --> 04:40:15,440
bad-looking history. In fact, I've never heard anyone that said,

1546
04:40:15,960 --> 04:40:21,280
I wish I had spent more time making my commits look nicer. So, yeah.

1547
04:40:23,000 --> 04:40:29,440
Okay, back to the notes, I say. So, there's some new questions that are appearing here

1548
04:40:29,440 --> 04:40:39,620
that are pretty good. So as some quick reminders, we have feedback at the bottom. Please let us know

1549
04:40:39,620 --> 04:40:53,240
what you thought. Yeah. And if we scroll up, let's see, which of these questions should we talk

1550
04:40:53,240 --> 04:41:05,960
about if anyone sees one please let me know number 55 for origin that's the conventional name of

1551
04:41:05,960 --> 04:41:15,640
the it's an alias for the remote so basically origin means get at github.com slash your user

1552
04:41:15,640 --> 04:41:22,620
slash your project name that kind of thing yeah and that's the default you can name it something

1553
04:41:22,620 --> 04:41:35,460
Yeah. The names don't have to match on GitHub and your own computer, but it's probably nice if they do, because that reduces confusion later.

1554
04:41:35,460 --> 04:41:48,240
um vs code i think this is answered down there ssh keys shouldn't we talk about ssh maybe let's

1555
04:41:48,240 --> 04:41:53,380
come back to that if we have time i don't want to risk going over time and i think this is probably

1556
04:41:53,380 --> 04:41:55,400
answered well here

1557
04:41:55,400 --> 04:42:06,000
here's a question about WSL users. So WSL is windows services for linux it's basically a

1558
04:42:06,000 --> 04:42:12,380
way to run linux on top of windows so you have access to all the good linux tools but

1559
04:42:12,380 --> 04:42:18,920
on windows and this question is basically about how data is stored between them so you can put

1560
04:42:18,920 --> 04:42:23,500
some data in a place where it's visible to the linux side but not the windows side

1561
04:42:24,220 --> 04:42:29,900
on perhaps vice versa so it's always important to know where things are stored and think a little

1562
04:42:29,900 --> 04:42:35,740
bit before you make any project where is it stored and is it accessible in the ways i need it to be

1563
04:42:35,740 --> 04:42:46,860
accessible um python files versus the jupyter notebook we can come back to but also we have

1564
04:42:46,860 --> 04:42:59,580
a jupyter lesson next week um for codium versus vs code i don't use enough to really comment i

1565
04:42:59,580 --> 04:43:05,100
know for me i use codium and it seems fine not all extensions are there but it's okay

1566
04:43:05,100 --> 04:43:15,540
`git add -p` and `git commit -p` is a good one

1567
04:43:15,540 --> 04:43:26,360
If you use git add or commit with the `-p` option, `-p` means patch or

1568
04:43:26,360 --> 04:43:34,620
something like that and it means that when you run git commit it will show you

1569
04:43:34,620 --> 04:43:42,060
every individual change you've made and you can push Y for yes or N for no and do them separately

1570
04:43:42,060 --> 04:43:47,500
and add them to the commit separately. And in fact, it's probably the most common way

1571
04:43:47,500 --> 04:43:53,500
I use to commit things because it shows me everything before I add it and I can select

1572
04:43:53,500 --> 04:43:59,420
only the stuff that goes together. It works well for small situations, but if I think it's going

1573
04:43:59,420 --> 04:44:07,020
it complex, I'll use git add separately. Although it may be, for example, convenient if you have

1574
04:44:08,940 --> 04:44:13,580
different changes in one file and then you don't want to actually git add the file,

1575
04:44:13,580 --> 04:44:19,580
then you'll have to have this option. But it is advanced. Sometimes it's better to just undo

1576
04:44:19,580 --> 04:44:29,900
some of the modifications and and commit one by one yeah let's say this is a good question here so

1577
04:44:30,540 --> 04:44:38,140
it's about the not tracking generated files and the sharing with collaborators so let's say you're

1578
04:44:38,140 --> 04:44:44,620
working with someone on a manuscript that's written in LaTeX so if they want me to add the

1579
04:44:44,620 --> 04:44:53,500
results to the repository we'd have to be sharing the tech source file and not the pdfs if someone

1580
04:44:53,500 --> 04:45:00,060
sends me a pdf i can't really commit that because it doesn't do much i have to basically convert

1581
04:45:00,060 --> 04:45:07,100
it back to the source so i think that's not completely inconsistent and if it's word docs

1582
04:45:07,100 --> 04:45:12,380
and word docs is the actual source that we're using to modify things then yeah there have been

1583
04:45:12,380 --> 04:45:19,580
times that i've added that to get history because there's no other option permanently removing

1584
04:45:19,580 --> 04:45:27,660
things from history yes this can be done but it changes history and will um everyone else will

1585
04:45:27,660 --> 04:45:34,860
have to update their repository for this new history so it's a common thing to do people

1586
04:45:34,860 --> 04:45:40,380
accidentally commit things all the time but the recovery is definitely an advanced process so

1587
04:45:40,380 --> 04:45:44,680
So it's better to try to avoid this.

1588
04:45:46,760 --> 04:45:51,400
Just because you remove it from GitHub doesn't mean it gets removed from everyone else's repository.

1589
04:45:56,000 --> 04:45:57,340
Yeah, and what do you know?

1590
04:45:57,400 --> 04:45:58,520
It's right on time.

1591
04:45:58,960 --> 04:46:02,320
Let's scroll down and let's talk a little bit about this.

1592
04:46:04,180 --> 04:46:05,160
Where was it?

1593
04:46:05,300 --> 04:46:09,720
The reminder thing, which I'm moving to the bottom.

1594
04:46:10,380 --> 04:46:20,720
So tomorrow we continue with, oh, we have a visitor.

1595
04:46:22,300 --> 04:46:24,800
Okay, tomorrow we continue with Git Collaborative.

1596
04:46:25,420 --> 04:46:30,280
And in Git Collaborative, we are all contributing to the same repositories.

1597
04:46:30,280 --> 04:46:41,080
and we are allowing like so since we're contributing to some central repositories

1598
04:46:41,080 --> 04:46:47,020
you need to request permissions before it begins and that's done via this

1599
04:46:47,020 --> 04:46:55,740
this box here you'll also get an email about it but please do this in advanced in advance

1600
04:46:55,740 --> 04:47:02,800
So that way we don't have to rush to give everyone access during the course tomorrow.

1601
04:47:04,580 --> 04:47:11,920
Been used for day one or day, maybe someone else can write stuff here because my hands are full.

1602
04:47:13,840 --> 04:47:22,020
But it is the, so tomorrow is more practice for everything we've done now.

1603
04:47:22,020 --> 04:47:24,900
So if things are a bit confusing, don't worry.

1604
04:47:25,080 --> 04:47:29,380
Come back tomorrow and you'll see it again and we can do it more slowly.

1605
04:47:30,100 --> 04:47:35,860
And by seeing it in real life being used for something, it will start to become more clear.

1606
04:47:39,060 --> 04:47:45,080
So it has both command line VS Code and GitHub Web Interface tracks.

1607
04:47:45,080 --> 04:47:51,260
So you can still follow each of the different tracks depending on your needs and your interests.

1608
04:47:52,020 --> 04:47:59,440
So if the command line part is too hard, don't worry.

1609
04:48:00,460 --> 04:48:01,940
You have the other options.

1610
04:48:05,220 --> 04:48:07,040
Yeah, anything else? I'm forgetting.

1611
04:48:07,660 --> 04:48:09,700
Let me look in the chat here.

1612
04:48:15,700 --> 04:48:16,920
Yeah, I guess.

1613
04:48:17,680 --> 04:48:20,560
Can anyone else think of anything before we say goodbye?

1614
04:48:22,020 --> 04:48:29,300
Okay, [name], I think you said something, but you're muted.

1615
04:48:29,300 --> 04:48:33,720
No, no, I think we covered a lot of things.

1616
04:48:34,540 --> 04:48:36,200
Okay, all right.

1617
04:48:38,000 --> 04:48:42,440
So, yeah, let's go then.

1618
04:48:43,700 --> 04:48:44,540
See you tomorrow.

1619
04:48:44,600 --> 04:48:45,820
See you tomorrow.

1620
04:48:46,380 --> 04:48:47,060
Bye, everyone.

1621
04:48:47,340 --> 04:48:48,260
Okay, bye.

1622
04:48:48,860 --> 04:48:49,380
Bye.

1623
04:48:52,020 --> 04:48:52,640
you

1624
04:49:22,020 --> 04:49:22,640
you

1625
04:49:52,020 --> 04:49:52,640
you

1626
04:50:22,020 --> 04:50:22,640
you

1627
04:50:52,020 --> 04:50:52,640
you

1628
04:51:22,020 --> 04:51:22,640
you

1629
04:51:52,020 --> 04:51:52,640
you

1630
04:52:22,020 --> 04:52:22,640
you

1631
04:52:52,020 --> 04:52:52,640
you

1632
04:53:22,020 --> 04:53:22,640
you

1633
04:53:52,020 --> 04:53:52,640
you

1634
04:54:22,020 --> 04:54:22,640
you

1635
04:54:52,020 --> 04:54:52,640
you

1636
04:55:22,020 --> 04:55:22,640
you

1637
04:55:52,020 --> 04:55:52,640
you

1638
04:56:22,020 --> 04:56:22,640
you

1639
04:56:52,020 --> 04:56:52,640
you

1640
04:57:22,020 --> 04:57:22,640
you

1641
04:57:52,020 --> 04:57:52,640
you

1642
04:58:22,020 --> 04:58:22,640
you

1643
04:58:52,020 --> 04:59:22,000
Thank you.

