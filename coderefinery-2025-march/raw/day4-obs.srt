1
00:00:00,000 --> 00:00:29,980
Thank you.

2
00:00:30,000 --> 00:00:30,620
you

3
00:01:00,000 --> 00:01:00,620
you

4
00:01:30,000 --> 00:01:30,620
you

5
00:02:00,000 --> 00:02:00,620
you

6
00:02:30,000 --> 00:02:30,620
you

7
00:03:00,000 --> 00:03:00,620
you

8
00:03:30,000 --> 00:03:30,620
you

9
00:04:00,000 --> 00:04:00,620
you

10
00:04:30,000 --> 00:04:30,620
you

11
00:05:00,000 --> 00:05:00,620
you

12
00:05:30,000 --> 00:05:30,620
you

13
00:06:00,000 --> 00:06:00,620
you

14
00:06:30,000 --> 00:06:30,620
you

15
00:07:00,000 --> 00:07:00,620
you

16
00:07:30,000 --> 00:07:30,620
you

17
00:08:00,000 --> 00:08:00,620
you

18
00:08:30,000 --> 00:08:30,620
you

19
00:09:00,000 --> 00:09:00,620
you

20
00:09:30,000 --> 00:09:59,860
Hello.

21
00:09:59,860 --> 00:10:06,500
Hello. Hello. Can you hear us out there? Good morning. Good morning.

22
00:10:12,700 --> 00:10:23,940
Uh, yes, let's see. Uh, if someone can say hi. We have the notes here as usual. So if you're

23
00:10:23,940 --> 00:10:32,940
just joining for this week this is what we call the notes and it is a thing

24
00:10:32,940 --> 00:10:39,900
that's sent to registered participants so if you're registered you have this

25
00:10:39,900 --> 00:10:49,860
and you can open it up if you look up here above what's being shared you can

26
00:10:49,860 --> 00:10:57,220
get a pencil button and then go into edit mode and once you're in edit mode you can right here

27
00:10:57,860 --> 00:11:03,940
and this is what we use for questions and answers so you can um

28
00:11:05,540 --> 00:11:15,860
yeah just like someone's doing here filling in an answer so with me here is [name] and [name] and

29
00:11:15,860 --> 00:11:21,180
And some of them are teachers for today at different times.

30
00:11:22,640 --> 00:11:24,260
The first session, I guess.

31
00:11:24,540 --> 00:11:24,760
Yes.

32
00:11:25,200 --> 00:11:25,360
Yeah.

33
00:11:27,040 --> 00:11:28,760
Would you like to tell me some about yourself?

34
00:11:30,200 --> 00:11:32,760
Well, I'm very happy to be here.

35
00:11:32,760 --> 00:11:41,040
This is maybe, at least in my opinion, the Code Refinery lesson that connects everything together.

36
00:11:41,440 --> 00:11:45,040
And we will mention this soon in the lecture part.

37
00:11:45,860 --> 00:11:51,640
And I can actually briefly mention that I'm part of the Finnish reproducibility network.

38
00:11:51,640 --> 00:11:58,640
And I know that in many, if not all, European countries, there are national reproducibility networks.

39
00:11:59,460 --> 00:12:08,000
So it's also a good way to get involved with reproducibility if you want to check what your local reproducibility network is doing.

40
00:12:09,020 --> 00:12:10,680
But with me today, there's also [name].

41
00:12:11,300 --> 00:12:14,060
And I'm also happy to teach with [name] today.

42
00:12:14,060 --> 00:12:15,320
We've been teaching this before.

43
00:12:15,480 --> 00:12:15,980
How are you, [name]?

44
00:12:17,380 --> 00:12:18,620
I'm good, thanks.

45
00:12:20,000 --> 00:12:23,660
I'm sitting in Germany today for a change,

46
00:12:24,120 --> 00:12:25,380
not home in Finland,

47
00:12:26,580 --> 00:12:30,820
visiting my family close to the Alps.

48
00:12:32,320 --> 00:12:37,140
Enjoying a lot of screen real estate for this teaching today.

49
00:12:38,260 --> 00:12:38,580
Nice.

50
00:12:39,860 --> 00:12:43,900
We have a couple of icebreakers in the notes document.

51
00:12:44,060 --> 00:12:45,900
for those who were around last week

52
00:12:45,900 --> 00:12:47,800
we've been using this

53
00:12:47,800 --> 00:12:50,240
you've already been testing this notes document

54
00:12:50,240 --> 00:12:51,980
but if you were not around last week

55
00:12:51,980 --> 00:12:52,620
it doesn't matter

56
00:12:52,620 --> 00:12:56,240
and I see a couple of icebreakers

57
00:12:56,240 --> 00:12:57,480
there, one about

58
00:12:57,480 --> 00:13:00,220
April Fool's stories

59
00:13:00,220 --> 00:13:06,100
Yeah, we thought to start lightly

60
00:13:06,100 --> 00:13:08,320
with something

61
00:13:08,320 --> 00:13:09,760
that maybe people have encountered

62
00:13:09,760 --> 00:13:10,960
this morning already

63
00:13:10,960 --> 00:13:19,300
you yeah to loosen up i like this april fool's day is canceled this year because no prank can

64
00:13:19,300 --> 00:13:26,220
top the reality going on right now that was a good one someone will say i guess you know what is uh

65
00:13:26,220 --> 00:13:34,820
what's the name the onion it's like a satirical whatever paper or website and somebody's saying

66
00:13:34,820 --> 00:13:39,920
that the onion are really struggling right now to invent something you know that that that sounds

67
00:13:39,920 --> 00:13:46,800
ironic or sarcastic because you know realities anyway yeah

68
00:13:51,760 --> 00:14:00,800
we had a slight cluster maintenance last night to fix scratch file system problems

69
00:14:02,000 --> 00:14:05,520
and you know it could have been a good april fool's joke sending something

70
00:14:05,520 --> 00:14:10,960
whenever they sent an email or posted a reply after midnight last night it could have said

71
00:14:10,960 --> 00:14:18,160
all the data is gone okay april fools yeah i don't know if some

72
00:14:19,040 --> 00:14:26,800
doctoral researchers would have liked that yeah i agree not a good idea but still it reminds you

73
00:14:28,000 --> 00:14:33,680
like if it makes you think okay you know this actually isn't backed up and well there hasn't

74
00:14:33,680 --> 00:14:41,520
been a data loss in more than the 10 years i've been around it's possible it could happen and

75
00:14:41,520 --> 00:14:50,880
there's not backups and there's smaller things that happens all the time so yeah yes we also

76
00:14:50,880 --> 00:14:58,000
had a chat message in the morning in our organizational chat that the file validation

77
00:14:58,000 --> 00:15:03,080
service is going to be renamed to the file rejection service from now on.

78
00:15:05,980 --> 00:15:10,280
And a person called April Fool was interviewed on the topic.

79
00:15:13,460 --> 00:15:16,280
Okay, so they went all in and did that properly.

80
00:15:18,400 --> 00:15:22,300
Yeah, there's some really good blog posts where you're really thinking like,

81
00:15:23,020 --> 00:15:25,100
are they serious now?

82
00:15:25,100 --> 00:15:26,020
Yeah, exactly.

83
00:15:28,000 --> 00:15:35,800
yeah I'm very easy to believe all kinds of this stuff so exactly this is this is the day that I

84
00:15:35,800 --> 00:15:43,120
try to not look not watch the news or you know first then it's it's I need to I would need to

85
00:15:43,120 --> 00:15:54,460
double check everything is the joke is it real so it's just yeah yeah then in the icebreaker

86
00:15:54,460 --> 00:16:00,900
we also have a nice question which relates to the topic of today have you ever heard or said it

87
00:16:00,900 --> 00:16:07,240
works on my computer what does this mean in practice how did you solve it have you ever

88
00:16:07,240 --> 00:16:13,300
experienced [name] this it works on my computer whether you were the one saying it or someone else

89
00:16:13,300 --> 00:16:21,680
told you oh yeah many many times and then we were sitting laptop next to laptop and figuring out

90
00:16:21,680 --> 00:16:28,500
like what is the difference here why does it throw that error here and not there and yeah

91
00:16:28,500 --> 00:16:35,980
have been sitting wondering did you have the person there to work with it yes we were sitting

92
00:16:35,980 --> 00:16:41,740
at the office in one occasion okay um and trying to make it run that's good

93
00:16:41,740 --> 00:16:43,080
I just don't remember what it was.

94
00:16:44,920 --> 00:16:48,080
Often for me, it's been...

95
00:16:48,080 --> 00:16:51,920
No, then you start checking all the possible versions

96
00:16:51,920 --> 00:16:53,880
of all the possible libraries to find.

97
00:16:53,900 --> 00:16:54,160
Everything.

98
00:16:54,440 --> 00:16:56,800
If there is one library that is different,

99
00:16:57,040 --> 00:16:59,500
is that what you're saying, [name]?

100
00:17:01,020 --> 00:17:04,100
Often for me, it's been other people's code

101
00:17:04,100 --> 00:17:05,060
who I don't know,

102
00:17:05,260 --> 00:17:07,520
so I need to use something else,

103
00:17:07,600 --> 00:17:09,440
so I install it.

104
00:17:09,500 --> 00:17:09,920
It doesn't work.

105
00:17:10,060 --> 00:17:11,220
Okay, now we go to Git.

106
00:17:11,220 --> 00:17:17,700
so i get clone it look at history try to change and eventually get my own local copy to work

107
00:17:20,180 --> 00:17:25,540
you know interestingly libraries haven't been that big of a problem for me

108
00:17:25,540 --> 00:17:30,980
like library versions maybe because most of my stuff in pipe is in python and i have a theory

109
00:17:30,980 --> 00:17:36,420
that python developers care a bit more about backwards and forwards compatibility so

110
00:17:36,420 --> 00:17:44,600
So at least of the things I use, there's like, okay, so last night I was dealing with Spink

111
00:17:44,600 --> 00:17:52,020
stuff, trying to upgrade some old sites, but that wasn't really a problem.

112
00:17:52,160 --> 00:17:54,960
It's more unpin everything and install the latest ones.

113
00:17:56,960 --> 00:18:05,060
But still somehow Python developers, the stuff I use seem to be relatively flexible in version.

114
00:18:05,060 --> 00:18:08,000
So I don't have to worry about that.

115
00:18:09,340 --> 00:18:13,300
Yeah, for me, I guess the kind of issue is that sometimes

116
00:18:13,300 --> 00:18:17,060
I might be working on a machine and I didn't know that actually

117
00:18:17,060 --> 00:18:21,540
there is some .local Python installation that conflicts

118
00:18:21,540 --> 00:18:24,440
with whatever environment I'm trying to reproduce.

119
00:18:24,880 --> 00:18:29,760
And so, you know, it's lots of, there are very good Linux terminal commands

120
00:18:29,760 --> 00:18:33,580
that can help you to find out which Python am I actually calling.

121
00:18:33,580 --> 00:18:45,320
but anyway it's 10 o'clock so i guess we are ready to start okay i will hide myself and

122
00:18:45,320 --> 00:18:53,020
let you know if there's any q a to do i'll be answering the questions so keep them coming in

123
00:18:53,020 --> 00:19:01,140
see you later bye. Yeah, so hello everybody I'm [name], staff scientist at Aalto University and

124
00:19:01,140 --> 00:19:05,520
with me today, there is [name]. Hello, [name].

125
00:19:06,360 --> 00:19:06,600
Hello.

126
00:19:08,060 --> 00:19:15,320
So today's day four of our Code Refinery workshop, and today is all focused on reproducibility,

127
00:19:15,760 --> 00:19:20,340
at least in the morning part, and in the afternoon, something that touches on reproducibility,

128
00:19:20,500 --> 00:19:26,080
which is how can we reuse software with the social coding lesson. Before we dive into

129
00:19:26,080 --> 00:19:33,900
the topic I remind you that we use this notes document collaborative notes document if you

130
00:19:33,900 --> 00:19:39,080
were with us last week you already maybe are familiar with this document but if you're just

131
00:19:39,080 --> 00:19:44,840
joining for this week basically from the link that you got in your email there is a little pencil here

132
00:19:44,840 --> 00:19:51,860
in the what is that top right corner and when you click it the document turns into some sort of like

133
00:19:51,860 --> 00:19:59,860
text editor and so we can use this for example to answer this icebreaker that we have here

134
00:19:59,860 --> 00:20:07,100
please let us know your favorite April Fool's joke or story maybe related to computing and

135
00:20:07,100 --> 00:20:11,500
reproducibility and in general when you have a new question you can add it at the bottom

136
00:20:11,500 --> 00:20:17,300
like I'm doing now and so that we always know that the newest questions are at the bottom

137
00:20:17,300 --> 00:20:19,920
We also give numbers to the questions.

138
00:20:19,920 --> 00:20:24,820
I understand that sometimes the numbering might, you know, fail, but we have many helpers

139
00:20:24,820 --> 00:20:28,540
who are going to fix the numbering for us.

140
00:20:28,540 --> 00:20:34,720
Right, so reproducibility.

141
00:20:34,720 --> 00:20:40,560
So here in the data for the materials, and I remind you that you find the materials if

142
00:20:40,560 --> 00:20:46,720
you go from the main workshop page, like I have here, and you go to day four, then you

143
00:20:46,720 --> 00:20:51,340
click on reproducible research and you end up on this other page that I'm

144
00:20:51,340 --> 00:20:58,180
showing now so the title is preparing code to be usable by you and others in

145
00:20:58,180 --> 00:21:03,580
the future and I really like the be usable by you because sometimes you are

146
00:21:03,580 --> 00:21:11,660
your biggest collaborator and your past you if your past you was very good with

147
00:21:11,660 --> 00:21:15,960
writing down all the bits that are needed the future you will be very

148
00:21:15,960 --> 00:21:23,080
thankful to the past you but right to the learning outcomes of today by the end of this lesson you

149
00:21:23,080 --> 00:21:29,720
should be able to basically apply well organized directory structure for your projects it's very

150
00:21:29,720 --> 00:21:36,920
important to you know follow a good directory structure and we will show some example of

151
00:21:36,920 --> 00:21:42,840
possible directory structures then it's also important to understand that code can have

152
00:21:42,840 --> 00:21:47,800
dependencies they can be dependencies from the same language like some python libraries if you

153
00:21:47,800 --> 00:21:54,280
use python but the dependency can go up to you know operating system and system libraries and

154
00:21:54,280 --> 00:22:02,120
hardware events on then it's also important to be able to document the computational steps

155
00:22:02,760 --> 00:22:08,200
basically the reproducibility really starts from making sure that you are running the same steps

156
00:22:08,200 --> 00:22:16,280
in the same order as you did a few years ago a few months ago and then we will touch on the

157
00:22:16,280 --> 00:22:23,400
use case for containers we will not go too deeply with the content of the containers

158
00:22:23,400 --> 00:22:28,760
but at least we show you what is possible and then eventually you can you can continue later

159
00:22:29,560 --> 00:22:35,000
in other in other courses that we've been giving and we will be giving in general today is this

160
00:22:35,000 --> 00:22:41,560
type of lecture only demo but there will be some interaction with you through questions with the

161
00:22:41,560 --> 00:22:54,840
notes document but enough with me talking so let's start so i'm gonna ask [name] so how it all

162
00:22:54,840 --> 00:23:02,360
connects how does it all connect yes so thank you for getting this lesson started

163
00:23:03,320 --> 00:23:11,000
So this is just a brief overview of how all the lessons that we have in this workshop,

164
00:23:11,000 --> 00:23:17,880
everything that we had last week about version control by yourself or with others, and then all

165
00:23:17,880 --> 00:23:24,840
the lessons of this week, which is a broad variety of topics that we'll be talking about, how do they

166
00:23:24,840 --> 00:23:32,760
connect and in general we could say that this workshop is all about reproducibility from the

167
00:23:32,760 --> 00:23:39,480
computational perspective so you can see up here the picture a picture from the turing way project

168
00:23:39,480 --> 00:23:43,880
which i highly recommend to look into if you haven't heard about it we also have a link about

169
00:23:43,880 --> 00:23:53,320
that later in the lesson um where there is the pathway on how you can get to your um your

170
00:23:53,320 --> 00:24:01,640
presentation, your research output in the end. So first you have the data, then you have the tools,

171
00:24:01,640 --> 00:24:09,320
then comes code and the results and all of these you can share if you want to and nowadays it's

172
00:24:09,320 --> 00:24:17,080
becoming maybe a little bit more common to share different steps of this process.

173
00:24:17,080 --> 00:24:25,680
and how the lessons of this workshop connect to this so first when we have here's my code

174
00:24:25,680 --> 00:24:31,980
basically almost all of our lessons could collect to connect to that so we have the version control

175
00:24:31,980 --> 00:24:37,960
we will be talking about social coding and how to get credit for your code and how to allow

176
00:24:37,960 --> 00:24:44,820
reuse of your code how to document your code so that others can actually make use of what you

177
00:24:44,820 --> 00:24:52,320
have been writing, how to share also executable notebooks as an example for

178
00:24:52,320 --> 00:24:58,460
Jupyter notebooks as an example for that, automated testing, how you can prevent

179
00:24:58,460 --> 00:25:02,880
yourself and others from breaking your code, and then also modular code

180
00:25:02,880 --> 00:25:09,900
development, making it easier for also you and others to reuse only parts of

181
00:25:09,900 --> 00:25:19,960
parts of the code and then today uh it's a lot about the tools so here are my tools um i want

182
00:25:19,960 --> 00:25:26,260
to share not only the code that i've been writing but i also want to tell you um what's the computing

183
00:25:26,260 --> 00:25:33,000
environment what's around that that you need to make it run and that's again also like [name]

184
00:25:33,000 --> 00:25:38,540
mentioned it's um something that i will be very happy about in the future when i get back to this

185
00:25:38,540 --> 00:25:43,980
code to remember like, oh yeah, I needed this Python version and this version of this package

186
00:25:43,980 --> 00:25:50,040
and then this other thing also. But also when you're sharing it with others, they will be very

187
00:25:50,040 --> 00:25:54,800
grateful if they can run one command and set up the whole computing environment ready to run your

188
00:25:54,800 --> 00:25:59,980
code and don't have to struggle figuring out like, oh, which version works with which and how does

189
00:25:59,980 --> 00:26:06,640
that relate actually to my own operating system? So it's all about the reproducibility here.

190
00:26:06,640 --> 00:26:10,100
and that also includes organizing the projects

191
00:26:10,100 --> 00:26:13,100
recording the computational steps

192
00:26:13,100 --> 00:26:15,400
dependencies, the whole computing environment

193
00:26:15,400 --> 00:26:18,860
we will also mention a few tools and platforms

194
00:26:18,860 --> 00:26:20,280
for sharing data

195
00:26:20,280 --> 00:26:23,520
and also other research outputs

196
00:26:23,520 --> 00:26:26,760
mainly in the social coding lesson in the afternoon today

197
00:26:26,760 --> 00:26:29,500
but they're not the focus of this workshop

198
00:26:29,500 --> 00:26:33,420
so there's other great workshops out there where you can learn all about

199
00:26:33,420 --> 00:26:42,180
that so we will focus more on the computational perspective and like you have maybe seen already

200
00:26:42,180 --> 00:26:47,880
in the schedule that there is a lot of different topics uh this week and that can feel quite

201
00:26:47,880 --> 00:26:54,380
overwhelming but please don't worry um like this is a workshop that should give you an introduction

202
00:26:54,380 --> 00:27:01,720
to all the wonderful tools and techniques that are out there to help you um make your

203
00:27:01,720 --> 00:27:10,920
make your computation more reproducible make your everything a little bit better maybe a little bit

204
00:27:10,920 --> 00:27:19,440
more fair also maybe you've heard about the fair principles but you don't have to implement it all

205
00:27:19,440 --> 00:27:24,140
now like it's good to know about all these things because you might encounter that they can help you

206
00:27:24,140 --> 00:27:29,940
in the future but you don't have to like now go and spend half a year on implementing everything

207
00:27:29,940 --> 00:27:36,060
you can go step by step do something first that helps you right now uh maybe you know that you

208
00:27:36,060 --> 00:27:42,620
will have now a two-month break from working with this one code so like try to make your two-month

209
00:27:42,620 --> 00:27:46,900
view happy by writing down like how to set up the environment how to actually run the code

210
00:27:46,900 --> 00:27:56,120
and then go from there um another way of doing this i wanted to ask you that what is your opinion

211
00:27:56,120 --> 00:28:02,280
of this because it says here don't worry focus on the good enough instead of the perfect like

212
00:28:02,280 --> 00:28:10,500
best practices why good enough rather than you know the best well the best is hard to achieve

213
00:28:10,500 --> 00:28:17,380
and you might also like it can get very easily very overwhelming to try to make everything perfect

214
00:28:17,380 --> 00:28:25,000
and then it's better to really start with small steps doing small things rather than like maybe

215
00:28:25,000 --> 00:28:30,440
even giving up when presented with all the things that you should be doing for your code to be

216
00:28:30,440 --> 00:28:40,440
reproducible um yeah and i think that's maybe everything for this introduction yes there's a

217
00:28:40,440 --> 00:28:46,760
nice paper actually that we cite in this um in this lesson which is good enough practices for

218
00:28:46,760 --> 00:28:54,600
computational science it's a maybe from 2017 so you know it's not a brand very recent paper but

219
00:28:54,600 --> 00:28:56,960
but it has all the content that we're going to say here.

220
00:28:57,480 --> 00:29:00,300
And sometimes it's really, I would say that this applies to life.

221
00:29:00,700 --> 00:29:05,420
You know, that sometimes it's very difficult to be perfectionist

222
00:29:05,420 --> 00:29:06,760
or maybe even impossible.

223
00:29:06,760 --> 00:29:11,180
But if we can reach kind of, you know, the good enough,

224
00:29:12,140 --> 00:29:14,900
it's less overwhelming and it's doable.

225
00:29:16,380 --> 00:29:16,980
Right.

226
00:29:17,140 --> 00:29:20,120
But so the motivation behind reproducibility

227
00:29:20,120 --> 00:29:23,600
and having a full day kind of dedicated to reproducibility

228
00:29:23,600 --> 00:29:30,940
comes from kind of real life stories horror stories even here there's a joke from phd comics

229
00:29:30,940 --> 00:29:37,380
and um you know some of you might be doctoral doctoral researchers so all the phd comics are

230
00:29:37,380 --> 00:29:45,040
touching close aspects to doctoral life and so here that's you know the senior professor is saying

231
00:29:45,040 --> 00:29:50,160
don't worry you don't have to start your code from scratch you can just reuse the software the

232
00:29:50,160 --> 00:29:54,660
previous person on the project about several years ago and then of course the

233
00:29:54,660 --> 00:29:59,040
doctor research is asking okay are there a structure for how to use it I doubt it

234
00:29:59,040 --> 00:30:06,000
is the code commented not likely where are the files who knows but this is

235
00:30:06,000 --> 00:30:11,760
going to be painful isn't it it's just a scratch so I don't know if anyone here

236
00:30:11,760 --> 00:30:16,400
has been in this situation have you ever experienced this type of supervision

237
00:30:16,400 --> 00:30:24,720
[name] with your or maybe where you're lucky enough to inherit good code from your colleagues

238
00:30:27,040 --> 00:30:32,640
not with my supervisor but in general finding some code and then being like oh yeah that solves my

239
00:30:32,640 --> 00:30:40,080
my issue i want to reuse it but then like it being quite hard to figure out how to actually do that

240
00:30:41,120 --> 00:30:44,960
sometimes i have the problem maybe that sometimes i might write some

241
00:30:44,960 --> 00:30:49,760
bash scripts that are really solving an issue that I have at the moment and then I know that there's

242
00:30:49,760 --> 00:30:55,080
a bash script somewhere and maybe even a colleague yeah remember there was this bash script and

243
00:30:55,080 --> 00:30:59,240
sometimes it's just I'm not able to find it I don't know what the script was doing it's it's

244
00:30:59,240 --> 00:31:05,500
actually easier to rewrite it from scratch. Here a very scary anecdote but a very common one

245
00:31:05,500 --> 00:31:11,080
so a group of researchers obtain great results and submit their work to a high-profile journal

246
00:31:11,080 --> 00:31:17,620
the paper goes under on the review which is already amazing that you don't get desk rejected

247
00:31:17,620 --> 00:31:22,580
and that the reviewers are asking of course for new analysis and new figures and something like

248
00:31:22,580 --> 00:31:27,460
that and the researchers start working on revisions and generate the modified figures

249
00:31:27,460 --> 00:31:33,320
but then they find inconsistencies with the old figures because especially consider that sometimes

250
00:31:33,320 --> 00:31:38,080
the peer review process you know it might take a few months to get the answer from the reviewers

251
00:31:38,080 --> 00:31:45,680
In the meantime, you already switched to the new project, maybe accidentally peeping stall or whatever, updated some libraries.

252
00:31:46,440 --> 00:31:52,340
And suddenly what you did six months ago for the first version of the paper, you're not able to reproduce it.

253
00:31:53,020 --> 00:31:59,620
The researcher can't find some of the data they used to generate the original results and can't figure out which parameters they used when running their analysis.

254
00:32:00,480 --> 00:32:03,060
And then the manuscript just stays there in the drawer.

255
00:32:03,060 --> 00:32:14,040
However, when we talk about reproducibility, the kind of issue with reproducibility, and some people even call it a reproducibility crisis, is nothing new.

256
00:32:14,520 --> 00:32:21,760
But let's say that in the years 2010-2015, it became really evident.

257
00:32:21,760 --> 00:32:31,160
It kind of started in the field of psychology, because many of the papers in that field basically suffered from the reproducibility.

258
00:32:31,160 --> 00:32:37,620
but then in general beyond the psychology experimental psychology it spreaded across

259
00:32:37,620 --> 00:32:43,100
all the medical sciences health sciences social sciences and in the end in practice there's no

260
00:32:43,100 --> 00:32:51,300
field that is not affected by the reproducibility crisis and this can be different reasons behind

261
00:32:51,300 --> 00:32:56,280
the reproducibility crisis here today we are tackling maybe the easiest of the reason the

262
00:32:56,280 --> 00:33:00,520
fact that the computational environment might be changing so of course if we

263
00:33:00,520 --> 00:33:05,900
have ways to control for that at least we can ensure the reproducibility of the

264
00:33:05,900 --> 00:33:10,380
of the results but reproducibility touches on much more issues because

265
00:33:10,380 --> 00:33:16,140
sometimes some people might engage in the so-called questionable research

266
00:33:16,140 --> 00:33:23,040
practices just to obtain some flashy result but in general it's something

267
00:33:23,040 --> 00:33:29,920
that affects anyone and in the practical example like we've been given earlier it's something that

268
00:33:29,920 --> 00:33:37,460
it really can affect all of us in our day-to-day work. When we think of reproducibility of course

269
00:33:37,460 --> 00:33:43,840
the article the published article you know kind of stays at the top of the pyramid because if you

270
00:33:43,840 --> 00:33:49,400
publish something get it through peer review there might be someone a few years after that will ask

271
00:33:49,400 --> 00:33:55,400
okay how did you obtain those findings how did you analyze the data can you share the code you used

272
00:33:55,400 --> 00:34:01,720
in that paper from 10 years ago so that i can rerun things and even from research integrity

273
00:34:01,720 --> 00:34:06,520
point of view it's your responsibility to be transparent and show what you did in a published

274
00:34:06,520 --> 00:34:11,080
article but the article is just the tip of the pyramid under the article there would be the

275
00:34:11,080 --> 00:34:18,680
documentation which can be software documentation laboratory notebooks any sort of you know

276
00:34:18,680 --> 00:34:25,160
documentation of the processes that were used and under the documentation of course goes the code

277
00:34:25,160 --> 00:34:33,400
and the data meaning that if some of this would be missing if the code would disappear from the

278
00:34:33,400 --> 00:34:39,480
old project or if the data would disappear then it would start to become impossible to reproduce

279
00:34:39,480 --> 00:34:46,120
your old article even for you and at the bottom of everything is this environment and with

280
00:34:46,120 --> 00:34:51,360
environment we don't mean you know nature of course nature also is important but here we

281
00:34:51,360 --> 00:34:57,780
truly mean the computational environment so down to the operating systems and other libraries of

282
00:34:57,780 --> 00:35:04,140
the operating systems it could go down to the hardware but most of the time operating systems

283
00:35:04,140 --> 00:35:10,560
are how can i say can make things abstract enough that the artwork the hardware doesn't matter too

284
00:35:10,560 --> 00:35:19,800
much in in reproducibility but what about asking activating a bit our our listeners and asking

285
00:35:19,800 --> 00:35:28,080
some um some questions through our notes document so yes the questions are already there okay

286
00:35:28,080 --> 00:35:35,820
excellent and we also got some notes from people having heard can't reproduce results after paper

287
00:35:35,820 --> 00:35:46,040
reviews many times and so on so what are your experiences rerunning or adjusting a script or

288
00:35:46,040 --> 00:35:52,440
a figure that you created a few months ago [name] well i'm now because i don't have much time during

289
00:35:52,440 --> 00:35:59,560
my working hours so i've been spending the last couple of weekends to re-replicate a paper of

290
00:35:59,560 --> 00:36:05,160
mine from 2014 because some people in the netherland are trying to reproduce it and

291
00:36:05,160 --> 00:36:12,260
if i was using some old matlab and i'm not able to get my hands on that old matlab so i'm rewriting

292
00:36:12,260 --> 00:36:19,820
it from scratch i'm soon done so if those people are hearing me but it's it's um i wouldn't say

293
00:36:19,820 --> 00:36:24,540
it's a daily thing but it's something that comes every other month it kind of haunts you

294
00:36:24,540 --> 00:36:32,160
hands you back so in those days i was kind of a junior researcher i didn't document too well

295
00:36:32,160 --> 00:36:39,640
what i was doing and which version of was doing what now i'm so you know worried about these

296
00:36:39,640 --> 00:36:45,540
things that if i start a new project i immediately start by listing all the dependencies that i need

297
00:36:45,540 --> 00:36:51,160
for the project which also helps with this type of context switching sometime our mental load

298
00:36:51,160 --> 00:36:56,600
context switching is the biggest one so if i know okay now i'm switching to another project what was

299
00:36:56,600 --> 00:37:03,000
this project about oh yes here we are using i don't know python2 because it was something in

300
00:37:03,000 --> 00:37:11,720
python2 and there's no other way to bring it to python3 right but let's have a look at the nodes

301
00:37:11,720 --> 00:37:18,680
maybe i could switch actually to the notes i could find that i

302
00:37:24,760 --> 00:37:28,360
so and what about you [name] what are your experiences rerunning

303
00:37:28,360 --> 00:37:35,800
or adjusting a script or a figure you created a few months ago yeah figures especially early in my

304
00:37:35,800 --> 00:37:45,000
phd um i created the figures rather manually and did like adjustments with different programs and

305
00:37:45,000 --> 00:37:51,080
then after review when they for them asked a rather easy question like could you just change

306
00:37:51,080 --> 00:37:57,160
the i don't know the x-axis to something else or something like this i was sitting there hmm

307
00:37:57,800 --> 00:38:04,040
what did i actually do now like i remember i used like this program for this but how did i actually

308
00:38:04,040 --> 00:38:09,240
get to the end and it happened then that the new figure looked slightly different than the old one

309
00:38:10,360 --> 00:38:16,920
but that also like really motivated me to then go and learn a little bit about this like how can i

310
00:38:16,920 --> 00:38:23,080
do this in more automated way how can i actually use for example python for creating the figures

311
00:38:23,080 --> 00:38:28,680
as i then use them in the manuscript rather than playing around with too many tools which is fun

312
00:38:28,680 --> 00:38:35,240
but it can be really painful and related to figures i also learned the hard way that at

313
00:38:35,240 --> 00:38:40,920
the beginning i was making let's say the main plot with python or matlab whatever i was using

314
00:38:40,920 --> 00:38:47,080
and then fixing the label axis of the labels sorry labels of the axis and things like that

315
00:38:47,080 --> 00:38:52,520
with them i don't remember what i was using maybe inkscape or illustrator and then i realized the

316
00:38:52,520 --> 00:38:57,480
pain of this process when you have to do it many times you don't want to manually change the font

317
00:38:57,480 --> 00:39:05,720
of a tiny axis with illustrator when you're in a hurry so now basically everything is coded

318
00:39:05,720 --> 00:39:11,080
there's no interactive tool that needs to define a figure i understand that maybe in some fields

319
00:39:11,080 --> 00:39:19,240
this is not possible but if if there is a way scripting everything really makes it much more

320
00:39:19,240 --> 00:39:26,680
easier and much more reproducible yeah i see many comments for the second question

321
00:39:26,680 --> 00:39:30,520
uh saying better to start a new better to start from scratch

322
00:39:32,920 --> 00:39:41,960
yeah i mean even with my own code sometimes i i don't trust what i wrote many years ago so

323
00:39:41,960 --> 00:39:47,560
sometimes i really need to what was i doing there and then especially if there's no comments in the

324
00:39:47,560 --> 00:39:55,960
code or no clear documentation anywhere so maybe I have been experiencing that sometimes it's easier

325
00:39:55,960 --> 00:40:02,760
to start from scratch. And it can help also with reproducibility because maybe in that moment

326
00:40:02,760 --> 00:40:08,760
you're thinking like how can I make my life easier for next time I have to get back and hopefully

327
00:40:08,760 --> 00:40:15,640
this workshop will show you some things that you can do there. We didn't go down to the you know

328
00:40:15,640 --> 00:40:21,680
know, how can I call it, the philosophical issues related to reproducibility, but sometimes

329
00:40:21,680 --> 00:40:27,660
even if you're not able to reproduce the exact numbers to the, you know, whatever decimal

330
00:40:27,660 --> 00:40:32,240
point, but you get similar numbers and you know that the libraries have changed, the

331
00:40:32,240 --> 00:40:36,460
methods underlying a change, but you get similar number that you know that it's reproducible

332
00:40:36,460 --> 00:40:40,940
in the sense that it's robust, that even though you change many libraries, you still

333
00:40:40,940 --> 00:40:47,320
get similar results and this is very important of course because maybe if you need to stick to a

334
00:40:47,320 --> 00:40:53,640
version of a library from 2009 and only that library gives you whatever significant findings

335
00:40:53,640 --> 00:40:59,820
that maybe you know maybe there might be something wrong maybe this why you need to stick to something

336
00:40:59,820 --> 00:41:07,460
from 2009 why the newer version stopped giving you significant findings all right but here we

337
00:41:07,460 --> 00:41:13,740
are talking and talking and maybe we should continue with the lessons but great great that

338
00:41:13,740 --> 00:41:18,900
everyone wrote in the notes document and you can keep on writing because these are always nice

339
00:41:18,900 --> 00:41:27,420
stories to hear right so reproducibility start from being organized and as we briefly mentioned

340
00:41:27,420 --> 00:41:33,700
earlier it really starts with the collaboration between your current self and your future self

341
00:41:33,700 --> 00:41:39,540
and your past self and of course if you know that you enter a room and everything is organized and

342
00:41:39,540 --> 00:41:45,140
you know where everything is in the room it makes it much easier for you to get the tool that you

343
00:41:45,140 --> 00:41:51,380
need and make sure that it's the right tool for what you're doing so here we briefly gonna talk

344
00:41:51,380 --> 00:41:58,340
about the so-called directory structure for projects again this is not something that is

345
00:41:59,220 --> 00:42:04,420
absolute in a sense that you know there's only one directory structure maybe if you join the

346
00:42:04,420 --> 00:42:09,940
research group they might already have their own whatever directory structure in some case they

347
00:42:09,940 --> 00:42:15,540
might be field specific because in certain fields you know they need to have certain names for

348
00:42:15,540 --> 00:42:21,780
basically the subfolders but here you see here in the in the bottom this type of tree view that you

349
00:42:21,780 --> 00:42:28,260
can get kind of you could get it from a terminal for example that you have the kind of project name

350
00:42:28,340 --> 00:42:37,440
the main parent folder and then there you can have other subfolders the typical ones are a

351
00:42:37,440 --> 00:42:42,760
subfolder for the data which is kind of the raw data something that almost you could set it to

352
00:42:42,760 --> 00:42:49,900
read only that you never want to mess with it and then the process data so that kind of intermediate

353
00:42:49,900 --> 00:42:57,880
files from the analysis manuscript if you want to store the manuscript in the same you know so that

354
00:42:57,880 --> 00:43:03,960
know you can write down what was done here and there. The results subfolder where you get kind of

355
00:43:04,760 --> 00:43:09,720
everything that most likely will end up in the manuscript whether it's in the main text or

356
00:43:09,720 --> 00:43:17,640
supplementary. And then SRC which is kind of source code where basically you can put all your

357
00:43:17,640 --> 00:43:24,280
scripts and the different steps that you need to run for reobtaining the same results. And

358
00:43:24,280 --> 00:43:31,080
documentation of course it's it's like this type of you know laboratory notebook and whether it's

359
00:43:31,080 --> 00:43:38,280
just you know run this and after that run this other command so simple step-by-step nodes or

360
00:43:38,280 --> 00:43:43,880
then it can be something even bigger as we will show tomorrow where the documentation can become

361
00:43:44,680 --> 00:43:51,080
like a mini mini website for explaining what the different parts of your software of your process

362
00:43:51,080 --> 00:43:57,920
are doing but in general maybe what is also very useful here that I really like

363
00:43:57,920 --> 00:44:04,700
is this readme file because usually the issue with reproducibility is also goes

364
00:44:04,700 --> 00:44:09,740
also beyond you working with yourself that sometimes you win the lottery and

365
00:44:09,740 --> 00:44:14,720
because now you won the lottery you just want to move to an island in the Pacific

366
00:44:14,720 --> 00:44:20,200
Ocean and change your phone number don't want to hear ever again from your

367
00:44:20,200 --> 00:44:24,120
supervisor I'm kidding of course but you understand that with this type of

368
00:44:24,120 --> 00:44:29,640
situation someone else might kind of enter this project folder and try to

369
00:44:29,640 --> 00:44:35,080
figure out all right so this person left we need to still publish this paper so

370
00:44:35,080 --> 00:44:39,400
if the person joins and then see it all right yeah this is following the

371
00:44:39,400 --> 00:44:44,240
familiar folder structures I know where things are it makes it much easier to

372
00:44:44,240 --> 00:44:54,320
basically continue from somewhere someone else is left right what else we

373
00:44:54,320 --> 00:45:02,120
have here tracking source code data and results so just continue with what we

374
00:45:02,120 --> 00:45:07,100
were linking the fact that this lesson kind of links through many other code

375
00:45:07,100 --> 00:45:12,860
refinery lesson is that inside this source directory that's where you want

376
00:45:12,860 --> 00:45:21,500
basically use git version control for example and and track all the all the versions of the

377
00:45:21,500 --> 00:45:28,460
of the code that you've been using but of course you can also control the versions of the data

378
00:45:28,460 --> 00:45:35,100
there are other tools for doing that similar to git like git annex we will not talk about those

379
00:45:35,100 --> 00:45:42,700
today and and then what we mentioned last week it's also good to use tags as kind of you know

380
00:45:42,860 --> 00:45:48,960
important snapshots with the with the with the message that is meaningful like you know this is

381
00:45:48,960 --> 00:45:57,820
the submitted version of my of my thesis did i miss anything [name] or no i think that was

382
00:45:57,820 --> 00:46:04,960
yeah oh yeah licenses actually well we will talk about licenses in the afternoon but it's very

383
00:46:04,960 --> 00:46:09,920
important to attach alliances with with what you're doing especially in the context where

384
00:46:09,920 --> 00:46:14,440
you might be leaving the project that you're just there for one year a couple of years

385
00:46:14,440 --> 00:46:21,140
leaving a license also gives clear instruction for the future people what can we do with the

386
00:46:21,140 --> 00:46:28,100
content of this of this project of this folder of this code so it's always good to add licenses

387
00:46:28,100 --> 00:46:34,440
and the whole afternoon will be about licenses so i'm not gonna spoil that spoil the fun

388
00:46:35,400 --> 00:46:39,320
but right let's activate our list a little bit more and have some

389
00:46:39,320 --> 00:46:42,520
other discussion so what are we discussing here [name]

390
00:46:46,440 --> 00:46:53,320
sorry i'm just copying to the collaborative notes um do you collaborate on writing academic papers

391
00:46:53,320 --> 00:47:02,120
right yeah that's a tough yes as one part of uh like organizing your your pro project we also

392
00:47:02,120 --> 00:47:07,020
talked about like having your manuscript for example in the same way but then you're not

393
00:47:07,020 --> 00:47:12,620
always right or barely ever you're writing the manuscript by yourself so you're actually

394
00:47:12,620 --> 00:47:17,560
collaborating fairly often with others so we want to hear your experiences and how

395
00:47:17,560 --> 00:47:22,840
how do you collaborate with others on writing papers and do you have good experiences bad

396
00:47:22,840 --> 00:47:30,900
experiences and how do you deal with conflicting changes so how about you [name] have you how do

397
00:47:30,900 --> 00:47:36,580
you deal with collaborating in my past i've been coming from the field of kind of neuroscience and

398
00:47:36,580 --> 00:47:42,540
experimental psychology that people used to work with uh they were just using microsoft word

399
00:47:42,540 --> 00:47:50,420
which means impossible to version control or even just run a simple diff luckily microsoft

400
00:47:50,420 --> 00:47:56,980
word inside has some sort of versioning system so that you can track changes and so on but i don't

401
00:47:56,980 --> 00:48:03,460
know if you ever use microsoft word and when this tracking of changes gets you know it just grows

402
00:48:03,460 --> 00:48:10,300
and grows and it gets so messy and impossible to read so unfortunately that was the case for me

403
00:48:10,300 --> 00:48:17,860
what about you [name] were you able to use something more trackable yeah so if i start

404
00:48:17,860 --> 00:48:25,220
nowadays the the manuscript then i use overleaf that just seems to work very well for me but i

405
00:48:25,220 --> 00:48:30,680
also know that it doesn't work for all of my colleagues like this writing in latin is not

406
00:48:30,680 --> 00:48:39,800
the most natural for everyone so we also have now in some projects use the microsoft online tools

407
00:48:39,800 --> 00:48:46,160
where also this tracking changes works but you can still like also edit the file at the same time and

408
00:48:46,160 --> 00:48:53,280
like kind of write something while you're talking to one another and recently i've been looking into

409
00:48:53,280 --> 00:48:58,820
this tips because it was discussed in our chat quite a lot and it looks quite a nice tool for

410
00:48:58,820 --> 00:49:07,420
writing your your uh your paper in actually markdown so like the same the same way you

411
00:49:07,420 --> 00:49:13,960
writing here now in the collaborative notes you could also use for writing a paper i have no

412
00:49:13,960 --> 00:49:20,620
experiences with it yet but if someone has please share right yeah these are really nice i also been

413
00:49:20,620 --> 00:49:25,500
using overleaf because i really like the interface i don't know if the listeners

414
00:49:25,500 --> 00:49:31,100
are also using overleaf that you can write your code and formulas and whatever i mean sorry no

415
00:49:31,100 --> 00:49:40,300
code text and then easily generate the pdf kind of the output version but also yeah we mentioned

416
00:49:40,300 --> 00:49:47,500
about this type of collaborative notes documents google docs i'm also being quite happy with google

417
00:49:47,500 --> 00:49:53,420
docs where you can also track changes and and and things like that and maybe what i don't like of

418
00:49:53,420 --> 00:50:00,460
the google docs that i can't have it you know in my local whatever terminal folder compared to the

419
00:50:00,460 --> 00:50:07,740
sata systems where and what about executable manuscripts this is something kind of more

420
00:50:07,740 --> 00:50:15,340
recent have you been using executable manuscripts [name] i've not written any any myself but i

421
00:50:15,340 --> 00:50:21,580
have been happy to find some of topics that i was interested in and it's it's really nice to not

422
00:50:21,580 --> 00:50:29,500
only find a paper online but also like have the paper together with the code that i can execute

423
00:50:29,500 --> 00:50:35,900
and change things and like try out things uh in the same place and there seem to be a lot of tools

424
00:50:35,900 --> 00:50:43,740
around this that make it easy i agree i'll be using quarto it's really nice it's well integrated

425
00:50:43,740 --> 00:50:51,900
both with R and Python so that if you write your whether it's a book or manuscript you can

426
00:50:51,900 --> 00:50:59,000
basically have interactive graphics inside there and it really seamlessly generate HTML so HTML

427
00:50:59,000 --> 00:51:04,960
output with JavaScript for interaction so that you can also publish it for example with this

428
00:51:04,960 --> 00:51:10,940
GitHub pages that we are using for this materials it would it's quite easy to to publish a Jupyter

429
00:51:10,940 --> 00:51:13,480
manuscript or a

430
00:51:13,480 --> 00:51:15,440
quarto manuscript. Here we

431
00:51:15,440 --> 00:51:16,640
have a list of

432
00:51:16,640 --> 00:51:19,480
resources. We've been often

433
00:51:19,480 --> 00:51:21,480
talking about Python, but there's

434
00:51:21,480 --> 00:51:23,380
also a similar solution for R

435
00:51:23,380 --> 00:51:25,380
and I really like, I

436
00:51:25,380 --> 00:51:27,480
recommend you to check this

437
00:51:27,480 --> 00:51:29,580
Turing Way, which

438
00:51:29,580 --> 00:51:31,480
is a nice open book about

439
00:51:31,480 --> 00:51:33,180
all these topics on reproducibility

440
00:51:33,180 --> 00:51:35,580
and there they talk about this research

441
00:51:35,580 --> 00:51:37,200
Compendia, which is

442
00:51:37,200 --> 00:51:39,480
at least when it comes to R, it's

443
00:51:39,480 --> 00:51:42,960
It's kind of like an environment

444
00:51:42,960 --> 00:51:46,500
where you can keep your R script and the data

445
00:51:46,500 --> 00:51:50,320
and other documents related to your project.

446
00:51:52,580 --> 00:51:54,940
And maybe you can see the three dots here.

447
00:51:55,400 --> 00:51:58,480
So all of our lesson material is also open for everyone

448
00:51:58,480 --> 00:52:02,440
to add on to if you know some good resources

449
00:52:02,440 --> 00:52:05,540
about any of these topics, please send us a pull request.

450
00:52:05,540 --> 00:52:26,420
I have to say actually that we've been teaching this lesson, I don't know, since, I don't remember when, 2018 maybe, and it's evolving every time we teach it, there's some new suggestions from the listeners, so please, you know, tell us about your experiences, we are very happy to share tips.

451
00:52:26,420 --> 00:52:32,140
and also like whatever you write in the collaborative notes we will also go through

452
00:52:32,140 --> 00:52:37,580
and if there's some some things that would fit to be added to the lessons we will also do that

453
00:52:37,580 --> 00:52:44,780
there so please keep your comments coming there it's very nice to read right but so [name] now

454
00:52:44,780 --> 00:52:51,060
we are at the stage that we have a nice directory structure we have a system of keeping track of

455
00:52:51,060 --> 00:52:57,940
things that are changing so we can now actually start coding and running analysis what about

456
00:52:57,940 --> 00:53:04,040
recording the computational steps so the fact that something needs to happen before something else

457
00:53:04,040 --> 00:53:11,760
so yes exactly that's what we're talking about now for the next 20 minutes before the break

458
00:53:11,760 --> 00:53:20,860
um so you often have like many things that you need to run to create your research output be it

459
00:53:20,860 --> 00:53:28,060
a plot be it like the process just processing data in some way but it's very often that we have some

460
00:53:28,060 --> 00:53:33,900
data set do something to it and then do another something to it and then we have like for example

461
00:53:33,900 --> 00:53:40,940
a plot coming out and in this lesson we'll be talking about the example of um counting the

462
00:53:40,940 --> 00:53:49,900
frequency of words in books so we have here in this picture we have different books then we run

463
00:53:49,900 --> 00:53:58,860
a code that counts the number the frequency of the words occurring in the book and gives out

464
00:53:58,860 --> 00:54:05,820
the 10 most frequent ones and then we have a plot function that plots that information

465
00:54:05,820 --> 00:54:15,900
into a plot like you can see here on on the right and how we can run that code is for one book only

466
00:54:15,900 --> 00:54:24,380
is shown below here so it's a python code we can run okay we run our script python count.py with

467
00:54:25,260 --> 00:54:31,580
the input file the whole book is here in a text file and then we get out the statistics and then

468
00:54:31,580 --> 00:54:36,860
we have the statistics but we want to plot so we run another python script called plot.py with the

469
00:54:36,860 --> 00:54:43,020
statistics file as input and then the plot as output so that we can do and then we can do also

470
00:54:43,020 --> 00:54:54,300
for for multiple books to to get to these plots but then it can get very complicated if we have

471
00:54:54,300 --> 00:55:05,740
either more books or more steps in this process and for that we could of course think of writing

472
00:55:05,740 --> 00:55:13,980
a script that does this step one after another for us we could also to be maybe a little bit

473
00:55:13,980 --> 00:55:22,700
more flexible on how many of the books are in our directory we could write a for loop that takes in

474
00:55:22,700 --> 00:55:30,220
the directory where all the books are in it does the counting step it does the plotting step

475
00:55:30,220 --> 00:55:38,360
and then we're all good and that also works for having multiple steps or having having multiple

476
00:55:38,360 --> 00:55:49,180
books but then we could think what what if like I need to I find out that there is an issue with

477
00:55:49,180 --> 00:56:00,000
the plotting step so I fix the plotting script then I maybe fix the bash script that runs runs

478
00:56:00,000 --> 00:56:07,280
this all um but then i need to like fix okay which one was it now that i need to run again on what

479
00:56:07,280 --> 00:56:13,600
books do i need to run it which one have i run that already on what am i actually doing have you

480
00:56:13,600 --> 00:56:19,680
ever been in this situation and they go yes i wanted to show basically what we are talking

481
00:56:19,680 --> 00:56:26,640
about here but yes this is really so just a recap that this project you can actually clone it

482
00:56:26,640 --> 00:56:32,800
yourself here in this link here in the material example project and I already did it in this

483
00:56:33,520 --> 00:56:40,240
in this terminal here my workstation network and so here there are all the files following this

484
00:56:40,240 --> 00:56:47,840
directory structure that we've been talking about before and so yeah you were saying [name] that

485
00:56:47,840 --> 00:56:53,520
I would need to run basically for every book that is in this data folder let's see how many books

486
00:56:53,520 --> 00:57:01,040
are there right yeah there's not too many one two three four books and so for each book i will need

487
00:57:01,040 --> 00:57:08,240
to run python code count.py which is basically this counting script name of the book and then

488
00:57:08,240 --> 00:57:17,840
it goes to some statistics folder so do you like this approach of this run all.sh let's have a look

489
00:57:17,840 --> 00:57:27,120
at this run all script all right so this is just lots of copy pasting and manual changes

490
00:57:27,120 --> 00:57:33,920
do you like this about [name] well for this case it works right yeah that's true you don't

491
00:57:33,920 --> 00:57:38,960
really need much more and it's already one more step reproducible because you don't need to

492
00:57:38,960 --> 00:57:44,320
remember uh which all python scripts you need to run in which order but you have this one script

493
00:57:44,320 --> 00:57:52,380
but now this is a bash script which runs fine on a linux computer on a windows computer you can

494
00:57:52,380 --> 00:57:58,240
probably make it run as well but it's not necessarily that it it's it works just out of

495
00:57:58,240 --> 00:58:07,960
the box so um and yeah i think the problem here comes now when when there is many more and then

496
00:58:07,960 --> 00:58:18,140
And you need to remember, like, if I change the plot.py script, I have to also change in this run all to only run the plot.py again.

497
00:58:18,320 --> 00:58:24,560
Or to, like, remember which of the books you have already run with the correct script and so on.

498
00:58:24,660 --> 00:58:31,500
So it's hard to keep track or to run only small parts again with this solution.

499
00:58:31,500 --> 00:58:37,140
and then of course if we run if like you mentioned earlier if we would have 500 books

500
00:58:37,140 --> 00:58:45,180
it would be quite painful to write this 500 times two so 1000 lines for each of the book that we

501
00:58:45,180 --> 00:58:53,200
have isn't it yes yes that can be quite painful and also more more steps in the process

502
00:58:53,200 --> 00:59:03,840
and so what we are doing here is uh called imperative style we tell the script or we tell

503
00:59:03,840 --> 00:59:10,340
via the script what we want to run in what order and basically like we would do manually

504
00:59:10,340 --> 00:59:19,440
one one after another and what we want to talk here now in this lesson are tools that can help

505
00:59:19,440 --> 00:59:29,620
you with that step of going from this imperative style to more declarative style so meaning we

506
00:59:29,620 --> 00:59:36,300
don't say anymore run this run this run this but we tell what are the dependencies between the

507
00:59:36,300 --> 00:59:42,780
different steps so what is the input and output of one step and how connect how does that connect

508
00:59:42,780 --> 00:59:47,900
to the next one and i hope that will get more clear once we look a little bit more at this

509
00:59:47,900 --> 01:00:00,260
example here um yep so here one of these workflow tools that we baked here is snake make and if you

510
01:00:00,260 --> 01:00:07,220
want to test it yourself in the prerequisite section of the workshop web pages there is

511
01:00:07,220 --> 01:00:13,260
it explains how to basically install this code refinery conda environment we will still talk

512
01:00:13,260 --> 01:00:17,760
about conda environments as well. But why SnakeMake, [name]?

513
01:00:21,760 --> 01:00:27,540
SnakeMake, we chose, because, and I'm not actually sure if

514
01:00:27,540 --> 01:00:29,740
that's still true nowadays, because there's so many

515
01:00:29,740 --> 01:00:36,140
workflows out there, but it has a fairly gentle learning curve.

516
01:00:36,180 --> 01:00:42,180
And it's also fairly simple to install via conda or pip, which

517
01:00:42,180 --> 01:00:50,680
we'll be talking about later still. It can also be used on multiple platforms and it has some

518
01:00:50,680 --> 01:00:56,760
things that just make your life easier in situations where you, for example, have a lot

519
01:00:56,760 --> 01:01:02,700
of computing power and want to run things in parallel. SnakeMate can make that happen without

520
01:01:02,700 --> 01:01:09,040
you having to worry too much about it. It's a completely general tool, but fairly often used

521
01:01:09,040 --> 01:01:20,720
in in bioinformatics where where it comes from comes from so here just to give an idea of why

522
01:01:20,720 --> 01:01:28,320
it's like making what are these tools doing you can basically think that if in this um example

523
01:01:28,320 --> 01:01:35,360
let me show again this run all so if our goal here is to first count the words which means

524
01:01:35,360 --> 01:01:43,680
that it generates this text files with the count of the 10 most frequent words in that specific book

525
01:01:44,720 --> 01:01:51,200
here this isolate statistics so these are the input the books this and these are the output

526
01:01:51,760 --> 01:02:01,040
and then for each book we do a plot isn't it so then the dependence is that we want to have

527
01:02:01,040 --> 01:02:09,420
have four plots which could be here and each plot depends on the statistics from each book so that

528
01:02:09,420 --> 01:02:15,840
if isn't it that by building this type of dependency tree we can use snake make to say

529
01:02:15,840 --> 01:02:22,300
right snake make sees that i don't know we are missing this sierra dot png figure then snake

530
01:02:22,300 --> 01:02:27,120
make knows that we need to run this common and then maybe snake makes is oh actually we miss

531
01:02:27,120 --> 01:02:34,180
Sierra.data. So SnakeMake knows that we need to run this other command. Is this the logic behind

532
01:02:34,180 --> 01:02:41,900
SnakeMake, [name]? Yes, exactly. So we tell what are the outputs that we want, and we provide

533
01:02:41,900 --> 01:02:46,340
SnakeMake with the rules. That's how they're called in SnakeMake, and you can see it here in

534
01:02:46,340 --> 01:02:53,340
this example that is shown. Via rules, we tell SnakeMake how different files are being created.

535
01:02:53,340 --> 01:03:03,480
And then with this rule all in the top, we tell what are the ultimate outputs of our workflow that we want to have.

536
01:03:04,220 --> 01:03:11,100
So when we run SnakeMake, it will find out where to get the statistics files from and where to get the plot files from.

537
01:03:12,300 --> 01:03:18,200
And it can also figure out for you, like [name] said, which files have already been run

538
01:03:18,200 --> 01:03:24,460
and which steps will need to be like rerun

539
01:03:24,460 --> 01:03:28,800
if something changes in either a data file or a script file.

540
01:03:31,300 --> 01:03:37,320
So this snake make file is inside the same repository.

541
01:03:38,580 --> 01:03:43,200
And so here are the data that we're going to work with

542
01:03:43,200 --> 01:03:47,580
and this rule all and these are the rules.

543
01:03:48,200 --> 01:03:51,960
for the steps that we need to run for each book.

544
01:03:51,960 --> 01:03:53,620
So how do we run it in practice?

545
01:03:53,620 --> 01:03:54,760
Let's see here.

546
01:03:54,760 --> 01:03:57,980
So in this demo,

547
01:03:57,980 --> 01:04:00,960
first we want to run this snake make, delete all outputs.

548
01:04:00,960 --> 01:04:03,740
So is this basically going to clean

549
01:04:03,740 --> 01:04:07,980
all these derived statistics, for example?

550
01:04:07,980 --> 01:04:08,820
And PNGs?

551
01:04:08,820 --> 01:04:11,280
Yes, because the repository that you're using

552
01:04:11,280 --> 01:04:13,300
already has all the outputs there.

553
01:04:13,300 --> 01:04:14,500
So you can also try,

554
01:04:14,500 --> 01:04:18,140
if you want to run just snake make minus J1.

555
01:04:18,140 --> 01:04:18,820
Okay, let's try.

556
01:04:19,260 --> 01:04:20,320
First and C.

557
01:04:21,520 --> 01:04:24,180
And J stands for...

558
01:04:24,180 --> 01:04:25,400
Is it like a...

559
01:04:25,400 --> 01:04:30,060
The jobs or cores that you give to SnakeMaker for running.

560
01:04:30,100 --> 01:04:33,660
So now I'm using basically one core from my computer.

561
01:04:35,160 --> 01:04:36,780
And yeah, SnakeMaker is doing something.

562
01:04:37,140 --> 01:04:39,600
Maybe because I actually changed something.

563
01:04:39,700 --> 01:04:40,900
Maybe I didn't have anything there.

564
01:04:41,260 --> 01:04:43,740
But now if I would run it again...

565
01:04:43,740 --> 01:04:45,260
So now SnakeMaker run everything

566
01:04:45,260 --> 01:04:47,220
and most likely generated all the pictures.

567
01:04:47,220 --> 01:04:54,660
if I would run it again, is that now we would do nothing, yeah, nothing to be done, yeah,

568
01:04:54,660 --> 01:05:00,900
because I already ran it and I didn't change anything, right? But then if I would...

569
01:05:04,340 --> 01:05:09,460
If you would scroll up now where you run it the first time in your console,

570
01:05:11,540 --> 01:05:14,420
or run the delete all output.

571
01:05:17,220 --> 01:05:26,140
Then we could see what SnakeMake says in the very beginning.

572
01:05:26,140 --> 01:05:33,780
Because it tells you what it has figured out, what it will need to run.

573
01:05:33,780 --> 01:05:42,280
It's exactly deleting these four statistic files and the four images.

574
01:05:42,280 --> 01:05:45,580
And then if I would run it again, it would regenerate.

575
01:05:45,580 --> 01:05:51,420
let's make sure that my statistics folder is empty and it's empty and it will plot

576
01:05:51,420 --> 01:05:56,700
folder is empty so i do arrow up and now run it again

577
01:06:02,380 --> 01:06:08,300
so basically what's happening now is that snake makes sees or tries to find do we have those

578
01:06:08,300 --> 01:06:15,820
statistics and what was it plots and if they're missing they're going to be regenerated again

579
01:06:16,780 --> 01:06:22,300
so now if i will look at the statistics folder now we have four files there and the other was plot

580
01:06:23,260 --> 01:06:29,260
right so the files are back and you can also see in the very end of what snake make tells you it

581
01:06:29,260 --> 01:06:35,900
says it ran nine out of nine steps and if you remember like we have the count words and the

582
01:06:35,900 --> 01:06:46,460
make plots both for each four files for file books and then there is one more which is this

583
01:06:46,460 --> 01:06:53,260
rule all so where it checks that all the output has been generated before it says it's done

584
01:06:53,260 --> 01:07:00,540
with everything and this is going very fast so like don't worry that's why we have the

585
01:07:00,540 --> 01:07:04,960
the exercise or the demo written out

586
01:07:04,960 --> 01:07:07,540
and with solutions in the material

587
01:07:07,540 --> 01:07:10,760
so that you can later go and check it out by yourself.

588
01:07:10,760 --> 01:07:14,860
I think SnakeMake is a tool that you can nicely get used to

589
01:07:14,860 --> 01:07:17,400
by just trying out different small things,

590
01:07:17,400 --> 01:07:19,380
running it again, see what's happening

591
01:07:20,420 --> 01:07:24,120
before you then go into applying it to your own work.

592
01:07:25,900 --> 01:07:29,920
So now I could do this tiny modification,

593
01:07:29,920 --> 01:07:33,380
But what if, let's say that I accidentally delete

594
01:07:33,380 --> 01:07:36,840
one of the plots, the Sierra one, right?

595
01:07:36,840 --> 01:07:38,040
Now I delete it.

596
01:07:38,040 --> 01:07:40,120
So if I run SnakeMake again,

597
01:07:40,120 --> 01:07:44,640
will it just recreate this without me worrying?

598
01:07:45,780 --> 01:07:46,620
Let's see.

599
01:07:50,880 --> 01:07:52,840
And this might happen, right?

600
01:07:52,840 --> 01:07:55,180
Like you're handling data

601
01:07:55,180 --> 01:07:59,620
and you maybe want to remove some intermediate step

602
01:07:59,620 --> 01:08:06,080
or something and then it can happen that you by accident delete the wrong one or like don't

603
01:08:06,080 --> 01:08:12,420
remember the name or something like this so snake makes got your back there so now in

604
01:08:12,420 --> 01:08:20,500
the plot folder cr.png is back right and then if i would run it again now it would do nothing

605
01:08:20,500 --> 01:08:25,800
because everything is there right now yeah nothing to be done all right but let's try

606
01:08:25,800 --> 01:08:33,720
this step five i do a tiny change to the code maybe to the plot maybe here instead of 10

607
01:08:33,720 --> 01:08:38,920
most common words i know some seniors that they don't like to use numbers so we write 10

608
01:08:38,920 --> 01:08:46,360
what come over so i'm changing basically the the title of the of the plot so now the code has

609
01:08:46,360 --> 01:08:53,400
changed would snake make kind of know that we need to run everything again because the code has

610
01:08:53,400 --> 01:09:01,160
change isn't it well not everything only what the code actually matters for so in our case

611
01:09:01,160 --> 01:09:06,520
all the plot files will hopefully be run again if you run i see i see so then the four statistics

612
01:09:06,520 --> 01:09:12,440
file will stay as they are but then the four plot file would be new so we're expecting four

613
01:09:12,440 --> 01:09:17,800
new rules kind of to run plus the run also five steps let's see

614
01:09:17,800 --> 01:09:27,640
it's always exciting to do this live demos because you never know if it works but it's working

615
01:09:27,640 --> 01:09:34,180
right so then the five steps which means the four generational new version of the figures

616
01:09:34,180 --> 01:09:40,120
png files and this roll all that checks everything right

617
01:09:40,120 --> 01:09:45,300
okay so yeah what were you saying

618
01:09:45,300 --> 01:09:49,940
Maybe here a word on the 0.8.

619
01:09:51,620 --> 01:10:05,520
So you can see in the snake file that we are using that we are running actually Python scripts, the way we would also run them in the terminal here in the lines where it says shell.

620
01:10:06,780 --> 01:10:14,460
So if you would have an R script or in any other language or any other tool, you could also run these in the same way.

621
01:10:14,460 --> 01:10:21,020
And SnakeMake has some, let's say, let's call it more fancy tools also for Python.

622
01:10:21,420 --> 01:10:26,380
But you can use it with any other language as well or any other tools.

623
01:10:27,220 --> 01:10:29,580
It's not limited to Python.

624
01:10:32,300 --> 01:10:32,900
Right.

625
01:10:33,280 --> 01:10:40,440
And then the bottom one is, or the final thing to mention for this,

626
01:10:40,440 --> 01:10:47,680
is that we can actually use snake make to visualize the workflow i'm not gonna run this

627
01:10:47,680 --> 01:10:54,300
command here because i'm in a i'm on a remote machine it would you know require some effort

628
01:10:54,300 --> 01:10:59,480
to go connect to the remote computer and look at this picture but basically with this

629
01:10:59,480 --> 01:11:07,440
one-liner here with the dag which stands for directed acyclic graph which is what we were

630
01:11:07,440 --> 01:11:14,620
saying earlier the dependencies of of all the steps that needs to be run to obtain the the all

631
01:11:14,620 --> 01:11:22,060
so yeah you already answered this [name] why snake make and in general do you know

632
01:11:22,060 --> 01:11:30,820
of any other similar tools that are popular in different fields yes we have for example been

633
01:11:30,820 --> 01:11:40,480
doing quite some tests with the next flow which has also a big community around um and then there

634
01:11:40,480 --> 01:11:46,820
is so many others so like if you don't like the way how snake make is doing this don't give up

635
01:11:46,820 --> 01:11:53,400
on workflow tools like as a whole because there's there's really a whole bunch of them and there

636
01:11:53,400 --> 01:12:02,780
might be some that are like heavily used in your field so i recommend to look at like google around

637
01:12:02,780 --> 01:12:08,800
a little bit your field and workflow tools and maybe there is something but then like snake

638
01:12:08,800 --> 01:12:15,960
make there's also other tools that are generally used for for any kind of field do you have a

639
01:12:15,960 --> 01:12:23,400
favorite workflow tool well i'm actually being used in snake make sometimes but then often i'm

640
01:12:23,400 --> 01:12:29,720
not into this situation that i need to run the same thing or i have small parts that need to be

641
01:12:29,720 --> 01:12:37,120
run you know 500 times but in general it's run once but yes snake make is i agree with you that

642
01:12:37,120 --> 01:12:43,240
the barrier is it's quite low compared to other i never use next flow that you mentioned but i

643
01:12:43,240 --> 01:12:50,200
heard that once you kind of learn it well it can be it can be very very helpful and for those who

644
01:12:50,200 --> 01:12:57,300
are listening please in the notes document if there's any tool or library or whatever other

645
01:12:57,300 --> 01:13:04,240
system that you might be using please let us know because we can expand this list for future

646
01:13:04,240 --> 01:13:13,000
future workshops but we are quite good with our timings and it's 54 past let's have a look if

647
01:13:13,000 --> 01:13:21,220
there's anything to bring up from the notes document was there anything [name] or questions

648
01:13:21,220 --> 01:13:30,460
at the moment i think this might be might need a moment to digest this information but please

649
01:13:30,460 --> 01:13:38,660
use the questions document to ask any questions about this um and like if you are interested in

650
01:13:38,660 --> 01:13:45,380
try out this demo that we now just showed briefly and play play a little bit around with it

651
01:13:46,900 --> 01:13:53,220
it's quite a quite a nice way of of dealing with this having many small files or many

652
01:13:54,500 --> 01:14:00,500
steps to run it more automated so that you don't have to remember what was it that you actually run

653
01:14:01,140 --> 01:14:08,020
and to also run it more at scale so in case of having like we had in the example like having 500

654
01:14:08,020 --> 01:14:14,560
books or many many steps that you need to do and then also tools like snake make can also help with

655
01:14:14,560 --> 01:14:20,440
the portability between different systems so [name] could now send me his snake file i install

656
01:14:20,440 --> 01:14:25,100
snake make i run the snake file having the same directory structure where we get back to the

657
01:14:25,100 --> 01:14:31,220
earlier topic so if we have it all in the same directory structure i can just apply that on on

658
01:14:31,220 --> 01:14:38,720
my computer that's a very good point and maybe i can mention for those of you who want to rerun

659
01:14:38,720 --> 01:14:44,940
the demo that we were doing here we actually have a bring your own code session in the middle of

660
01:14:44,940 --> 01:14:52,100
april and so you know if you if you have time later to test these things and wanna verify them

661
01:14:52,100 --> 01:14:58,960
with us later the bring your own code session is advertised already in the workshop schedule

662
01:14:59,840 --> 01:15:07,600
all right maybe should we have a break then since we covered this section yep about 10 minutes break

663
01:15:10,400 --> 01:15:17,840
so six past the hour we will be back we'll be back bye bye

664
01:15:28,960 --> 01:15:29,580
you

665
01:15:58,960 --> 01:15:59,580
you

666
01:16:28,960 --> 01:16:29,580
you

667
01:16:58,960 --> 01:16:59,580
you

668
01:17:28,960 --> 01:17:29,580
you

669
01:17:58,960 --> 01:17:59,580
you

670
01:18:28,960 --> 01:18:29,580
you

671
01:18:58,960 --> 01:18:59,580
you

672
01:19:28,960 --> 01:19:29,580
you

673
01:19:58,960 --> 01:19:59,580
you

674
01:20:28,960 --> 01:20:29,580
you

675
01:20:58,960 --> 01:20:59,580
you

676
01:21:28,960 --> 01:21:29,580
you

677
01:21:58,960 --> 01:21:59,580
you

678
01:22:28,960 --> 01:22:29,580
you

679
01:22:58,960 --> 01:22:59,580
you

680
01:23:28,960 --> 01:23:29,580
you

681
01:23:58,960 --> 01:23:59,580
you

682
01:24:28,960 --> 01:24:30,960
.

683
01:24:30,960 --> 01:24:32,960
.

684
01:24:32,960 --> 01:25:02,940
Thank you.

685
01:25:02,960 --> 01:25:04,700
And we are back.

686
01:25:04,700 --> 01:25:08,740
Right, so what we've been covering so far

687
01:25:08,740 --> 01:25:11,520
is why reproducibility is important.

688
01:25:11,520 --> 01:25:15,220
And at least when it comes to computational reproducibility,

689
01:25:15,220 --> 01:25:18,640
what we can do about it starts in from how we manage

690
01:25:18,640 --> 01:25:22,700
our files and folders and how we record the steps.

691
01:25:23,700 --> 01:25:27,600
But of course, having a good directory folder structure

692
01:25:27,600 --> 01:25:30,200
and recording all the steps that are needed,

693
01:25:30,200 --> 01:25:31,960
It's not enough.

694
01:25:31,960 --> 01:25:35,160
Meaning that sometimes the tool we use

695
01:25:35,160 --> 01:25:37,120
are not just isolated,

696
01:25:37,120 --> 01:25:40,440
that they do not depend on any external library.

697
01:25:40,440 --> 01:25:43,160
I'm pretty sure that anyone here

698
01:25:43,160 --> 01:25:45,780
who is working with some code,

699
01:25:45,780 --> 01:25:48,680
whether it's Python, R, or you name it,

700
01:25:48,680 --> 01:25:52,260
you actually need to depend on versions of library

701
01:25:52,260 --> 01:25:53,220
and other things.

702
01:25:54,220 --> 01:25:55,820
And this is why we are now talking

703
01:25:55,820 --> 01:25:58,120
about recording the dependencies.

704
01:25:58,120 --> 01:26:01,540
Again, there's this funny picture.

705
01:26:01,540 --> 01:26:05,560
It's always nice to use funny pictures.

706
01:26:05,560 --> 01:26:12,960
This is from an XKCD comic, where all modern digital infrastructure is shaped like that.

707
01:26:12,960 --> 01:26:18,660
And then this here is a project that some random person in Nebraska has been anxiously

708
01:26:18,660 --> 01:26:21,340
maintaining since 2003.

709
01:26:21,340 --> 01:26:22,460
And this is not just a joke.

710
01:26:22,460 --> 01:26:27,540
This is really a few years ago, there is this command that's called curl.

711
01:26:27,540 --> 01:26:32,500
curl is really one of the commands that is keeping the internet up and until few years back it was

712
01:26:32,500 --> 01:26:39,540
just some random swedish guy that was keeping it up to date now it's something a little bit more

713
01:26:39,540 --> 01:26:44,180
stable so it's not anymore like a little thing like that but it makes you wonder you know how

714
01:26:44,180 --> 01:26:52,260
of the many things you know that we can that we might depend on in our work and we're not

715
01:26:52,260 --> 01:27:03,780
and we're not aware we often use the kitchen analogy to kind of give an idea of what does

716
01:27:03,780 --> 01:27:11,140
it mean to talk about the dependencies and so you know if the code if the software

717
01:27:11,140 --> 01:27:16,640
which we've been we have a way now to kind of you know make sure that the software is well

718
01:27:16,640 --> 01:27:20,980
preserved it's like the recipe when you're cooking you don't want to lose your important

719
01:27:20,980 --> 01:27:29,540
recipe for making your what was it guacamole and if the data are the ingredients that you need to

720
01:27:29,540 --> 01:27:36,140
mix together to obtain the guacamole now with the dependency we are kind of talking about

721
01:27:36,140 --> 01:27:44,460
the tools that we need in our kitchen whether it's you know pots or other other tools that we

722
01:27:44,460 --> 01:27:54,140
need for for cooking and here you know we have created two kind of examples images

723
01:27:55,740 --> 01:28:01,740
to give this understanding of the tools and the ingredients and the recipe that together

724
01:28:01,740 --> 01:28:11,100
are basically forming you know our our results now when it comes to dependency and environment

725
01:28:11,100 --> 01:28:17,900
management there are many different ways of doing that again our focus is a little bit more towards

726
01:28:17,900 --> 01:28:25,340
python but many of these tools can also be used with data languages so you might have heard already

727
01:28:25,340 --> 01:28:33,580
conda anaconda pip virtual lab and so on you can read all the list there and what these tools are

728
01:28:33,580 --> 01:28:40,220
trying to solve are the following problems basically defining a specific set of dependencies

729
01:28:41,100 --> 01:28:46,060
and also not just defining the list the list of dependencies but also they provide a way to

730
01:28:46,060 --> 01:28:52,460
install those dependencies and usually it means install it somewhat automatically that you don't

731
01:28:52,460 --> 01:29:00,620
need to manually download each package that i don't know numpy version whatever and and so on

732
01:29:00,620 --> 01:29:06,620
What they are also good these tools at is they are good at recording the versions for

733
01:29:06,620 --> 01:29:12,860
all the dependencies and it really means it really goes down to the tiny detail of which

734
01:29:12,860 --> 01:29:19,300
exact version you have in the environment that you are using right now.

735
01:29:19,300 --> 01:29:24,320
What I find very useful also is that they can isolate environments so that it's like

736
01:29:24,320 --> 01:29:30,320
Like if I'm running multiple projects and I have one Python installation for a specific

737
01:29:30,320 --> 01:29:36,300
project, I don't need to touch that environment, I don't need to touch that Python installation

738
01:29:36,300 --> 01:29:41,020
because I can create a new environment for another project where some of the versions

739
01:29:41,020 --> 01:29:46,740
might be different, maybe in the meantime Python version went a little bit further so

740
01:29:46,740 --> 01:29:51,240
I might want to start with the latest Python version for a new project that I'm starting

741
01:29:51,240 --> 01:29:52,620
and so on.

742
01:29:52,620 --> 01:29:58,020
Of course this comes with a little cost with the fact that you might need to store more

743
01:29:58,020 --> 01:30:05,000
files, for example multiple versions of Python, but then again the storage space is quite

744
01:30:05,000 --> 01:30:12,300
cheap and in the end the benefit of having an isolated environment really wins over having

745
01:30:12,300 --> 01:30:16,500
duplicate files in your system.

746
01:30:16,500 --> 01:30:25,380
Right, so another good thing that I want to mention that if things go wrong, you can always delete and recreate.

747
01:30:25,380 --> 01:30:45,300
And this is kind of one of the things that we've been already mentioned when it comes to the reproducibility that, you know, if whether I'm going to a new environment or my computer exploded and I need to start again, I can always recreate the environment and I can always basically continue from where I was.

748
01:30:46,500 --> 01:30:52,260
So, [name], are you a user of these tools?

749
01:30:53,520 --> 01:30:54,660
Yes, definitely.

750
01:30:55,480 --> 01:30:59,060
I have been using Conda for very long.

751
01:30:59,980 --> 01:31:16,040
Nowadays also looking a bit into the other ones, but Conda is still the most natural and also very much used when you find some random Python code on the Internet that you can find the installation instructions on how to do it with Conda.

752
01:31:16,040 --> 01:31:23,560
or pip in many occasions as well yes and especially this last point that you mentioned that you can

753
01:31:24,200 --> 01:31:30,520
really delete and recreate if something goes wrong and let the tool figure out which of the versions

754
01:31:30,520 --> 01:31:36,200
work together and you still get the at least close to newest ones for everything

755
01:31:38,200 --> 01:31:42,360
and the in the dependencies or in the prerequisite for this workshop

756
01:31:43,080 --> 01:31:48,280
those of you who really want to reproduce and rerun the example that we are doing this second

757
01:31:48,280 --> 01:31:57,080
week we are actually using conda to install all the libraries that we that we need but maybe let's

758
01:31:57,080 --> 01:32:03,960
go a little bit deeper on what does it mean to have an environment file and we stick with conda

759
01:32:03,960 --> 01:32:14,200
isn't it [name] yes yes let's stick to gonda for now um and i put also the link to this demo or the

760
01:32:14,200 --> 01:32:24,600
exercise in the collaborative notes um so please take a look at here the different ways of how

761
01:32:24,600 --> 01:32:30,360
five different students have written which libraries their code depends on

762
01:32:30,360 --> 01:32:37,640
and we are now like three years in the future after these students did that

763
01:32:37,640 --> 01:32:46,460
find their github repositories and are trying to rerun their code so which which one do you think

764
01:32:46,460 --> 01:32:54,320
will be easiest to rerun and why and it's are there any problems that you anticipate

765
01:32:54,320 --> 01:32:56,680
with each of these solutions.

766
01:32:58,380 --> 01:33:02,900
So A would be you have to go into the code

767
01:33:02,900 --> 01:33:06,860
and find the different library imports from there,

768
01:33:07,560 --> 01:33:08,440
nothing more.

769
01:33:09,460 --> 01:33:11,840
B would be there is a README file

770
01:33:11,840 --> 01:33:13,980
and the libraries are listed,

771
01:33:14,520 --> 01:33:16,800
but there is no mention of any versions.

772
01:33:18,360 --> 01:33:20,520
C would be you find an environment file

773
01:33:20,520 --> 01:33:25,200
that tells you about the name of the environment

774
01:33:25,200 --> 01:33:26,560
that they have created,

775
01:33:26,960 --> 01:33:28,480
the channels which have been used

776
01:33:28,480 --> 01:33:31,920
for getting the different libraries and their versions,

777
01:33:31,920 --> 01:33:33,960
and then the list of dependencies.

778
01:33:35,100 --> 01:33:39,260
Also some GitHub projects, master branches.

779
01:33:40,640 --> 01:33:44,140
Then in D, we have the same as above,

780
01:33:44,320 --> 01:33:47,100
but we have some version numbers.

781
01:33:47,780 --> 01:33:49,060
And instead of the master branches,

782
01:33:49,060 --> 01:34:01,140
we have git hashes or tags and in e we don't go into git anymore but the some projects and

783
01:34:01,140 --> 01:34:08,640
another project have actually been packaged and also listed as a dependency so maybe a few moments

784
01:34:08,640 --> 01:34:15,900
to let you also write some comments in the document collaborative notes

785
01:34:15,900 --> 01:34:22,580
don't spoil the fun with the solution immediately although the solution is there

786
01:34:22,580 --> 01:34:33,620
yeah have you encountered any of those yeah i would say i was i would just say that i've

787
01:34:33,620 --> 01:34:40,260
been guilty of b and a or already by saying guilty i'm kind of giving a negative light of

788
01:34:40,260 --> 01:34:45,340
Of course, you know, sometimes maybe it's some quick Python file

789
01:34:45,340 --> 01:34:48,760
and if it's a single file and there's some import at the beginning,

790
01:34:49,860 --> 01:34:52,180
you know, you can figure out what's going on.

791
01:34:53,520 --> 01:34:59,100
But I guess, you know, I guess our listener will figure out

792
01:34:59,100 --> 01:35:04,780
that maybe A is not the most reproducible, at least, way to work.

793
01:35:05,680 --> 01:35:06,560
How about you, [name]?

794
01:35:06,560 --> 01:35:13,420
someone was saying here for a it is definitely possible to miss some critical libraries if you

795
01:35:13,420 --> 01:35:20,320
have to go through all the code and look at what is being imported here but i have to say also

796
01:35:20,320 --> 01:35:29,000
b um sometimes you maybe also overthink it and you're saying like okay i don't just want to

797
01:35:29,000 --> 01:35:35,160
make it easy for conda and people i want to make it easy for everyone so i focus on putting all

798
01:35:35,160 --> 01:35:43,560
libraries that i'm using into the readme file so it's also like it can be meant very well to to to

799
01:35:43,560 --> 01:35:50,040
just have it in the in the readme file and it is definitely one step better than having people look

800
01:35:50,040 --> 01:35:56,840
through all the code files and to collect them in one place at least yeah i guess a clear difference

801
01:35:56,840 --> 01:36:04,120
between these five approaches that cd and e are clearly so called machine readable that the

802
01:36:04,120 --> 01:36:11,560
computer program in this case conda is actually able to read these files and understand what to do

803
01:36:11,560 --> 01:36:17,800
based on this on these files and again machine readability or we can say that when we start

804
01:36:17,800 --> 01:36:23,560
removing the humans from the process we can make things more reproducible and more automated

805
01:36:25,320 --> 01:36:28,840
but we still need the humans in the process don't don't get me wrong

806
01:36:28,840 --> 01:36:36,340
right so should we should i ask you [name] which version do you expect to be the easiest

807
01:36:36,340 --> 01:36:47,760
to rerun and why probably e because we have all the all the versions uh given and i don't have to

808
01:36:47,760 --> 01:36:54,880
like deal with someone's github project even though i think d will also work fine also three

809
01:36:54,880 --> 01:37:03,140
years from now but it's a little bit easier easier to read if someone has gone through the effort of

810
01:37:03,140 --> 01:37:10,300
packaging the their github repository right so basically the difference here in these two lines

811
01:37:10,300 --> 01:37:17,760
some project another project is that they're not depending on a specific github repository maybe

812
01:37:17,760 --> 01:37:24,260
this repository i don't know has moved someone else's took over but instead here with this e

813
01:37:24,260 --> 01:37:31,940
approach this would actually be in some how do you call like these channels for packages

814
01:37:32,580 --> 01:37:40,420
is that the case and someone also mentioned here in the notes um that for example tags

815
01:37:40,420 --> 01:37:45,700
can be deleted and suddenly this doesn't work anymore indeed the last row yeah it's true

816
01:37:45,700 --> 01:37:55,160
but in the same way packages can be deleted what about c in a way c i don't know one could guess

817
01:37:55,160 --> 01:38:03,020
let me just pull the most recent version but then what would be the issue here it might work fine

818
01:38:03,020 --> 01:38:11,880
but it also might not because you might get a like a much much newer version of what the student

819
01:38:11,880 --> 01:38:16,900
used when it was created three years ago and three years ago three years is a long time so

820
01:38:16,900 --> 01:38:23,840
you'll likely get quite a different version and they might not be compatible and also in the

821
01:38:23,840 --> 01:38:33,500
github since the master branch might have moved on likely so it's also a different version than

822
01:38:33,500 --> 01:38:41,320
that you're getting and it might be fine to try it out and see if it works but the safer version

823
01:38:41,320 --> 01:38:47,920
is definitely to have the versions given in the environment file.

824
01:38:49,820 --> 01:38:52,640
So we've been talking about these environment files

825
01:38:52,640 --> 01:38:55,640
and actually something nice to show about our page

826
01:38:55,640 --> 01:38:59,000
is that we'll be now discussing the conda solution,

827
01:38:59,280 --> 01:39:00,200
but there are other ways.

828
01:39:01,160 --> 01:39:05,700
And you are free to explore the other ways of working with it.

829
01:39:05,700 --> 01:39:09,720
We stick to the conda now for the sake of time.

830
01:39:09,720 --> 01:39:20,040
yeah there's a question in the notes um what are channels right well i don't know if there's a

831
01:39:20,040 --> 01:39:24,020
proper definition i mean i'm sure there's a proper definition and i don't know the proper definition

832
01:39:24,020 --> 01:39:31,400
but it's um could we say that intuitively that they're like some sort of you know repositories

833
01:39:31,400 --> 01:39:38,300
of packages and so conda has different channels that could be the conda forge channel like we see

834
01:39:38,300 --> 01:39:41,560
the defaults channel, the PyTorch channel.

835
01:39:42,300 --> 01:39:46,540
And so depending on which channel you tell Conda to use,

836
01:39:47,000 --> 01:39:51,120
it might pull, in the sense of kind of Git pull,

837
01:39:51,240 --> 01:39:54,720
it might download the packages from a certain channel.

838
01:39:55,200 --> 01:39:58,160
I think CondaForge is a very popular one

839
01:39:58,160 --> 01:40:01,760
because it's like the open source version of the Conda channel.

840
01:40:02,460 --> 01:40:06,780
But I'm more of a user than a creator of packages.

841
01:40:06,780 --> 01:40:12,700
so if any package creator has some insights please add them add them to the notes

842
01:40:12,700 --> 01:40:19,220
and maybe one more question from the notes the difference between conda and pip

843
01:40:19,220 --> 01:40:27,640
and do we have any recommendation which one to use yeah it really goes to this type of kind of

844
01:40:27,640 --> 01:40:34,160
channels if you want to say it this way that pip pulls from another channel instead conda

845
01:40:34,160 --> 01:40:40,760
pulls from this conda channel and the good thing of conda is that it integrates quite well with

846
01:40:40,760 --> 01:40:47,700
pip so here in this d solution one is basically first asking conda to install whatever libraries

847
01:40:47,700 --> 01:40:55,020
and then is asking within the same environment is basically then asking pip to install some other

848
01:40:55,020 --> 01:41:02,080
other dependencies that are basically not available in a in a conda channel i'm not a

849
01:41:02,080 --> 01:41:11,120
how can i say final one or the other fight conda quite easy do you [name] prefer pip versus conda

850
01:41:11,120 --> 01:41:18,820
or it also depends on sometimes the package is only on pip sometimes the newest package is only

851
01:41:18,820 --> 01:41:27,460
on conda so i also don't have any strict preferences here but go away there are i think

852
01:41:27,460 --> 01:41:35,200
for those who like pip or work with the python virtual environment basically the the same way

853
01:41:35,200 --> 01:41:41,780
of doing this or actually let me show the example one that we have here the same way would do it it

854
01:41:41,780 --> 01:41:48,380
would be with this python virtual environments so that these type of dependencies that are often

855
01:41:48,380 --> 01:41:55,700
written in requirements.txt file in the repository they can easily be installed with pip rather than

856
01:41:55,700 --> 01:42:17,300
And there's one comment also about the Python virtual env that the pyproject.toml files are actually better than using the text files in this case, because then you can also do pip install minus e instead of the long thing.

857
01:42:17,300 --> 01:42:23,900
So that's a good comment and we should probably add that to our materials as well. Thank you for the comment.

858
01:42:23,900 --> 01:42:29,600
point people to our Python for scientific computing next November see you all there

859
01:42:29,600 --> 01:42:39,540
right so let's move on a little bit and maybe we don't need to go much to the details here but

860
01:42:39,540 --> 01:42:45,600
it's important to understand what would be kind of the steps needed to create a conda environment

861
01:42:45,600 --> 01:42:51,480
and the command that you see here assuming that you were able to install conda in your terminal

862
01:42:51,480 --> 01:42:58,760
so these are terminal commands conda env create minus f which stands for file and then this

863
01:42:58,760 --> 01:43:07,520
my env dot yaml so yaml is yet another markup language it's a funny extension and here is

864
01:43:07,520 --> 01:43:13,260
basically saying conda please in the environments create a new one and use the versions or the

865
01:43:13,260 --> 01:43:19,280
packages that are specified in this yaml file and the yaml file is here below so we give a name to

866
01:43:19,280 --> 01:43:26,080
environment we tell conda okay which channels are we pulling the packages from and in the dependency

867
01:43:26,080 --> 01:43:32,080
list maybe we really know that we want to stick to python 3.10 but then we don't really care just

868
01:43:32,080 --> 01:43:39,440
give me whatever number is compatible with python 3.10 and so on this is very similar to what we

869
01:43:39,440 --> 01:43:44,480
have in our installation instructions so if you went through those or if you're going to go through

870
01:43:44,480 --> 01:43:50,960
those these are the steps that you need to basically create the conda environment and

871
01:43:50,960 --> 01:43:57,520
then once you have created it with conda activate you are basically saying in this specific case to

872
01:43:57,520 --> 01:44:04,000
the terminal shell where this is happening from now on stop using any system default python

873
01:44:04,000 --> 01:44:11,520
installation instead use the python installation that is exactly inside this environment which

874
01:44:11,520 --> 01:44:18,960
means that if your system default, I don't know, let's say that your default Python is 3.8,

875
01:44:19,680 --> 01:44:26,960
now by running this conda activate myenv you will switch to the Python that was specified

876
01:44:26,960 --> 01:44:34,080
in the environment file. And then of course the other way around is that sometimes we want to

877
01:44:34,080 --> 01:44:40,000
move the environment something else and with conda env export is another very useful command that is

878
01:44:40,000 --> 01:44:47,120
basically able to repopulate this type of environment file with actual more details

879
01:44:47,120 --> 01:44:53,920
that it really starts to fill in all the versions for all the other packages that you that you have

880
01:44:53,920 --> 01:45:01,360
added right am i missing anything or i know that there's more examples here in this

881
01:45:01,360 --> 01:45:11,400
if you're interested in using conda or any of these tools to take a look at these

882
01:45:11,400 --> 01:45:17,500
examples here and again play around a little bit it's a nice way to figure out how this work

883
01:45:17,500 --> 01:45:24,860
and how they can also work for you yes so

884
01:45:24,860 --> 01:45:33,680
here maybe these are not something useful for you right now but these are the type of commands

885
01:45:33,680 --> 01:45:40,680
that are that i often go back to this page myself to you know which one was the magic one-liner

886
01:45:40,680 --> 01:45:48,120
i really like a very fine useful often this conda m export from history because sometimes with this

887
01:45:48,120 --> 01:45:54,140
once you are in this conda environments and you activate them whatever happens inside the

888
01:45:54,140 --> 01:45:59,760
environment let's say that after activated the environment you run some conda install or pip

889
01:45:59,760 --> 01:46:08,000
install so something that goes outside the original environment of yaml it is less reproducible you

890
01:46:08,000 --> 01:46:13,380
can understand because if you manually start installing things rather than using the yaml file

891
01:46:13,380 --> 01:46:19,900
you might lose track of which version of what is there but this useful from history is really

892
01:46:19,900 --> 01:46:24,940
helpful in the sense that it can also track what what else was kind of run

893
01:46:24,940 --> 01:46:31,640
outside of the YAML file. This is a nice exercise we don't spoil the fun again so

894
01:46:31,640 --> 01:46:35,260
if you want to try these commands with your conda environment you can get an

895
01:46:35,260 --> 01:46:42,520
idea on the differences between the different outputs. But right so recording

896
01:46:42,520 --> 01:46:46,600
dependencies with versions can make it easier for the next person to execute

897
01:46:46,600 --> 01:46:55,340
your code, or for you to move the environment from some local laptop to an HPC environment.

898
01:46:55,340 --> 01:47:00,700
And there are many tools to record these dependencies and separate environments.

899
01:47:00,700 --> 01:47:04,260
So should we ask something in the collaborative document now?

900
01:47:04,260 --> 01:47:09,200
Yes, I've already put the question there.

901
01:47:09,200 --> 01:47:12,360
So we have two questions for you again.

902
01:47:12,360 --> 01:47:19,620
being are you using any of these dependency and or environment management tools in your work

903
01:47:19,620 --> 01:47:26,360
no why not or yes and which so have you come across them have you tried to use them have you

904
01:47:26,360 --> 01:47:33,080
had any difficulties with them or have you just read about them and wondered what they were

905
01:47:33,080 --> 01:47:37,960
please let us know to also get to know the audience here a little bit better

906
01:47:37,960 --> 01:47:47,600
and then in preparation for the next lesson have you heard or been in contact with containers

907
01:47:47,600 --> 01:47:55,500
be it docker singularity or portman in your work how did you come across them

908
01:47:55,500 --> 01:48:01,320
i share i see this answer here and i kind of share the pain with this

909
01:48:01,320 --> 01:48:06,620
you know i'm always having difficulties with installing managing different version of software

910
01:48:06,620 --> 01:48:12,880
in cluster already at first place and cluster environments for those who are not cluster users

911
01:48:12,880 --> 01:48:18,840
you know they are shared systems where often you don't have any rights to install things

912
01:48:18,840 --> 01:48:27,420
and sometimes this type of isolated environment conda or or other virtual environments they are

913
01:48:27,420 --> 01:48:33,100
able to kind of you know bypass the administrator that you don't need to ask the administrator to

914
01:48:33,100 --> 01:48:39,260
install a certain package but sometimes these are not enough sometimes it's that's just not a

915
01:48:39,260 --> 01:48:44,160
pomda install whatever package that you need because it really depends on system libraries

916
01:48:44,160 --> 01:48:49,820
and they are incompatible with the system library of the operating system of the cluster

917
01:48:49,820 --> 01:48:57,200
so sometimes the kind of level of dependencies really goes beyond the simple python libraries

918
01:48:57,200 --> 01:49:03,000
for example that you need to have so do you feel [name] that i'm kind of going towards

919
01:49:03,000 --> 01:49:10,360
containers with this? Yes. Yes. Also, I want to add here that I

920
01:49:10,360 --> 01:49:19,520
think this dependency manage or this No, I forgot the word. The

921
01:49:20,340 --> 01:49:22,800
well, the different environments that you can create with conda,

922
01:49:22,800 --> 01:49:27,180
for example, can be quite useful when you have, for example,

923
01:49:27,180 --> 01:49:32,160
codes that are working in Python two, and then another one that

924
01:49:32,160 --> 01:49:38,320
working in python 3 because having those run in parallel otherwise is quite difficult and the same

925
01:49:38,320 --> 01:49:47,440
for r and now we go into a topic where we package it even more and have it even more

926
01:49:49,120 --> 01:49:55,360
everything together not only the packages and we're looking at containers here

927
01:49:55,360 --> 01:50:02,360
And I see in the notes that we have many people who have heard about it

928
01:50:02,360 --> 01:50:09,660
or have been in contact with containers, but also some people who haven't.

929
01:50:10,320 --> 01:50:15,620
So hopefully you will learn something new from this next lesson.

930
01:50:15,800 --> 01:50:20,120
But also here, it's a lot of stuff.

931
01:50:20,220 --> 01:50:23,480
It's a lot of new things that will be coming up here.

932
01:50:23,480 --> 01:50:29,100
and don't worry that's what the exercises are also for so you can try it out yourself

933
01:50:29,100 --> 01:50:35,780
and as [name] mentioned like come to the bring your own code sessions also if you want to ask

934
01:50:35,780 --> 01:50:43,060
more questions about these things and as usual use the collaborative notes to ask clarifying

935
01:50:43,060 --> 01:50:58,200
questions. So we have now about 20 minutes again for the container episode. And here we are now

936
01:50:58,200 --> 01:51:09,480
looking at containers. And that's one way of really packaging everything. So an entire operating

937
01:51:09,480 --> 01:51:17,520
system with software installed you can even put data in there in together and we asked it already

938
01:51:17,520 --> 01:51:24,400
in the icebreaker this morning have you had any contact with it works on my machine

939
01:51:24,400 --> 01:51:36,840
if you had then containers can be one way of at least helping with that issue and the objectives

940
01:51:36,840 --> 01:51:40,760
for these sessions are that we understand what containers are and what they might be useful for

941
01:51:41,400 --> 01:51:48,840
and also take a little bit a look at the definition files and bring it into the context of

942
01:51:49,480 --> 01:51:56,520
reusability and also reproducibility and we also had it already in the previous section the kitchen

943
01:51:56,520 --> 01:52:02,280
analogy we really like to put things in the kitchen because hopefully it helps you to get

944
01:52:02,280 --> 01:52:10,360
just a little bit better overview of what all these different words mean. So we had already

945
01:52:10,360 --> 01:52:16,520
contact with our codes and scripts, the things that we write as being our cooking recipes.

946
01:52:17,640 --> 01:52:23,160
Then when we are dealing with containers, we are also dealing with so-called container

947
01:52:23,160 --> 01:52:30,520
definition files. They are then more like a blueprint to build a full kitchen with all

948
01:52:30,520 --> 01:52:38,280
the utensils that is then ready to prepare the recipe that is then ready to run your code.

949
01:52:39,800 --> 01:52:45,320
So as mentioned earlier that's not just the libraries installed that you're using but

950
01:52:45,320 --> 01:52:52,120
that's also for example the operating system. Then from these container definition files we

951
01:52:52,120 --> 01:52:58,600
can build container images which are like showroom kitchens. They're the clean nice ones that you are

952
01:52:58,600 --> 01:53:04,840
putting out there for people to look at for people to try out how it is to work in that kitchen how

953
01:53:04,840 --> 01:53:12,420
it is to use those tools but that they also leave then and everything is always clean there and then

954
01:53:12,420 --> 01:53:18,080
we have the containers and that's then the real connection that the real connected kitchen so

955
01:53:18,080 --> 01:53:24,900
the really the messy place the place where you're actually then running your codes in the kitchen

956
01:53:24,900 --> 01:53:29,740
you are cooking your recipes, you are doing stuff, you're using the tools that are there.

957
01:53:30,280 --> 01:53:36,540
But at some point, you also leave them again. And then you can just let them be. And if you

958
01:53:36,540 --> 01:53:46,840
want to, you can come back later into a clean kitchen. So as mentioned, it can bundle really

959
01:53:46,840 --> 01:53:50,860
everything, all the necessary ingredients, we can have the data, the code, the environment,

960
01:53:50,860 --> 01:53:53,520
and the operating system.

961
01:53:53,520 --> 01:53:55,880
And as with this,

962
01:53:58,900 --> 01:54:00,040
what was it called?

963
01:54:00,040 --> 01:54:02,180
As with this showroom kitchens,

964
01:54:03,260 --> 01:54:08,100
we can have like a plastic layer on the operating system

965
01:54:08,100 --> 01:54:11,160
and the tools that are there to protect them

966
01:54:11,160 --> 01:54:12,360
from being changed.

967
01:54:12,360 --> 01:54:13,860
So we are going into the kitchen,

968
01:54:13,860 --> 01:54:18,860
we are making our recipe in the computational world,

969
01:54:18,860 --> 01:54:23,080
world, we are going into the container, we're connecting to the container, we're running

970
01:54:23,080 --> 01:54:30,980
our stuff, and we can try things out, we can install other stuff on top of the container

971
01:54:30,980 --> 01:54:33,920
if we notice that we need something.

972
01:54:33,920 --> 01:54:42,900
But we can also always easily go back to how the container image was originally, this clean

973
01:54:42,900 --> 01:54:43,300
kitchen.

974
01:54:44,980 --> 01:54:47,640
And this you can do as often as you want.

975
01:54:47,640 --> 01:54:52,060
You can also keep your messy kitchen for a while if you want to.

976
01:54:54,120 --> 01:54:59,200
And they are defined in these definition files.

977
01:54:59,480 --> 01:55:03,780
And these are text files that you can also version control.

978
01:55:05,080 --> 01:55:10,740
And these definition files, they are, in a sense, also like a recipe.

979
01:55:10,740 --> 01:55:18,460
you say, what do you need to do to build these clean container images with everything in there?

980
01:55:19,080 --> 01:55:26,840
And we'll be looking at one in a moment. And containers might be useful if you have a software

981
01:55:26,840 --> 01:55:33,640
that is really hard or really tricky to install, or that's not even available for your operating

982
01:55:33,640 --> 01:55:38,580
system. For example, if you're on Windows and you find a tool that would be really useful for you,

983
01:55:38,580 --> 01:55:43,420
but it's only available for Linux, you could run it in a Linux-based container.

984
01:55:46,640 --> 01:55:53,580
And then it's also about this sharing the full computational environment.

985
01:55:54,040 --> 01:55:57,160
So not only the libraries, but really everything.

986
01:55:57,160 --> 01:56:01,140
You can share the image of your container to someone else

987
01:56:01,140 --> 01:56:07,340
or share the definition file for someone else to build the image themselves.

988
01:56:09,140 --> 01:56:16,500
Let's take a look at the container recipe here. [name], how have you come across

989
01:56:16,500 --> 01:56:23,220
containers in your research? Actually, yes, quite a lot, especially in the field where

990
01:56:23,220 --> 01:56:30,580
I've been working neuroimaging. Neuroimaging really took reproducibility at heart and

991
01:56:31,700 --> 01:56:37,940
many of the most important labs and software in neuroimaging are actually now available as

992
01:56:38,580 --> 01:56:45,300
containers which makes it very easy to move these pipelines on clusters or even local

993
01:56:45,300 --> 01:56:50,740
machines especially since they depend on a multitude of softwares and some of them are not

994
01:56:50,740 --> 01:56:56,900
just some conda install whatever they're really you know lots of libraries and other dependencies

995
01:56:56,900 --> 01:57:05,500
what about you [name] do you use or have you used containers in your day-to-day yes and nowadays

996
01:57:05,500 --> 01:57:10,440
it's one of the first things that I look for if I find a new tool is there a container image

997
01:57:10,440 --> 01:57:16,440
available can I just like get started without having to think about oh how do I actually

998
01:57:16,440 --> 01:57:23,060
install it like I have Singularity installed which is one of the ways you can do containers and then

999
01:57:23,060 --> 01:57:29,640
often everything just works which is quite a nice experience it's also not

1000
01:57:29,640 --> 01:57:39,360
always but it has helped a lot with that getting started point yes so here we see a

1001
01:57:39,360 --> 01:57:48,260
image or recipe for a container for a kitchen written in singularity and there are different

1002
01:57:48,260 --> 01:57:54,380
recipes for different type of containers do you want to mention [name] what would be the

1003
01:57:54,380 --> 01:58:03,640
difference between docker and singularity do we go or is this coming later in our well we can

1004
01:58:03,640 --> 01:58:09,360
mention it maybe right now so if you have been working on high performance computing systems

1005
01:58:09,360 --> 01:58:15,400
you might be familiar with singularity or aptainer which is very popular there

1006
01:58:15,400 --> 01:58:21,920
I think docker in general is also very popular because they have a huge

1007
01:58:21,920 --> 01:58:30,420
catalog or repository of different image different base images available where you can get

1008
01:58:30,420 --> 01:58:38,220
an operating setup to do a certain thing right away and also often singularity or aptainer

1009
01:58:38,220 --> 01:58:41,540
images make use of these things that are available from docker

1010
01:58:41,540 --> 01:58:52,680
but there are some restrictions with docker right yeah because docker is basically expecting that

1011
01:58:52,680 --> 01:58:58,960
you have a so-called super user through access to the system and if it's your own computer yes

1012
01:58:58,960 --> 01:59:05,060
you most likely have it but in a shared system like a cluster that's just not gonna happen

1013
01:59:05,060 --> 01:59:09,780
so singularity and obtainer gain popularity is it actually the singularity and obtainer

1014
01:59:10,580 --> 01:59:17,380
they were originally the same thing then one became more kind of whatever enterprise solution

1015
01:59:17,380 --> 01:59:24,500
and obtainer is more the kind of hpc open software open source software approach

1016
01:59:26,500 --> 01:59:33,140
but i haven't really used myself but i know people who are using potman it's very close to docker

1017
01:59:33,140 --> 01:59:41,620
in this sense yeah yeah me neither but they uh so in very many occasions if you find one of them

1018
01:59:41,620 --> 01:59:47,780
available you can with some tricks also make it work for the other so finding a docker image does

1019
01:59:47,780 --> 01:59:53,540
not mean like oh no you have to install docker now but it often also works with the others

1020
01:59:56,180 --> 02:00:02,020
okay let's take a look yeah we could have a look at the recipe that we don't have time to go to

1021
02:00:02,020 --> 02:00:06,900
the details of kind of the syntax of the recipe but you can think it in a similar way like we had

1022
02:00:06,900 --> 02:00:15,060
those conda environment yaml files with the recipe of the environment here is like saying okay pull

1023
02:00:15,060 --> 02:00:22,020
from docker hub this central repository like we had channels for conda ubuntu which is an

1024
02:00:22,020 --> 02:00:27,940
operating system for linux so it's saying basically get this operating system and these type of

1025
02:00:27,940 --> 02:00:33,180
commands for linux user they're familiar when you want to update your computing system or install

1026
02:00:33,180 --> 02:00:40,560
something then you usually run this apt-get install or update and so on this is a funny

1027
02:00:40,560 --> 02:00:45,280
image and we will try it soon where we're basically trying to install something that we

1028
02:00:45,280 --> 02:00:50,040
miss in our system and we don't have the rights to install those things and it's this cow say

1029
02:00:50,040 --> 02:00:56,520
linux terminal program which basically will print a ascii cow that says something

1030
02:00:56,520 --> 02:01:02,080
then this environment here is setting the so-called environment variables which sometimes

1031
02:01:02,080 --> 02:01:09,300
are useful for linux terminal specifically for example to say where is this cause a software

1032
02:01:09,300 --> 02:01:16,900
you know so that the terminal can actually find it and run script in this recipe syntax

1033
02:01:16,900 --> 02:01:21,680
is basically saying that you can run the contain if you run the container without passing

1034
02:01:21,680 --> 02:01:28,360
anything what should be the script that is run and you're basically saying pick a fortune cookie

1035
02:01:28,360 --> 02:01:35,360
make the cow the ascii cow say this fortune cookie and this lol cat makes some funny colors

1036
02:01:35,360 --> 02:01:43,320
we will test it soon so to motivate and inspire people and this last one this run script also

1037
02:01:43,320 --> 02:01:49,080
means that you can use this container as a tool in the command line like you would use any other

1038
02:01:49,080 --> 02:01:55,320
tool you don't need to have that you can also kind of enter the container and do stuff within

1039
02:01:56,120 --> 02:02:03,000
but in this case it's like used like a tool yeah it's been it can be very useful and even

1040
02:02:03,000 --> 02:02:10,920
transparent from you i see a red box here danger danger what do we need to be careful with [name]

1041
02:02:11,800 --> 02:02:17,720
um like you mentioned above in the container definition file where they're using a not an

1042
02:02:17,720 --> 02:02:24,760
image that is already out there and there is a lot of channels or repositories where you can find

1043
02:02:24,760 --> 02:02:32,920
these images but be careful about this like only use the official and trusted images because not

1044
02:02:32,920 --> 02:02:41,560
all of them can be trusted unfortunately and um yeah just have some some caution caution when you

1045
02:02:41,560 --> 02:02:49,960
find them and the repository looks a bit fishy or the description looks a bit fishy um to to be

1046
02:02:49,960 --> 02:02:59,560
aware that uh you don't get that on your computer how do you look for that yeah i don't think it's

1047
02:02:59,560 --> 02:03:05,240
a million dollar question but in general yes this goes also with any package that you might be

1048
02:03:05,240 --> 02:03:12,500
installing that if it's a famous repository if it's a famous package you most likely do not have

1049
02:03:12,500 --> 02:03:18,360
to worry but talk with your local experts with your local system what means they're always happy

1050
02:03:18,360 --> 02:03:27,100
to you know figure out if a image source is trusted or not so we still have some minutes

1051
02:03:27,100 --> 02:03:34,580
before the end of this morning and there's a couple of exercises the first one is a time travel one

1052
02:03:35,240 --> 02:03:42,120
I don't know if we need to go through the details of this container definition file here that's

1053
02:03:42,120 --> 02:03:48,920
basically so first saying from the docker hub repository pull the latest ubuntu image so it

1054
02:03:48,920 --> 02:03:55,480
doesn't even specify which version and here is some installation commands looks like that it's

1055
02:03:55,480 --> 02:04:03,160
installing python and then installing some virtual environment so kind of it's kind of building on

1056
02:04:03,160 --> 02:04:08,600
top of what we were doing earlier so kind of making the conda environment or the python virtual

1057
02:04:08,600 --> 02:04:14,360
environment but this time with the operating system and everything else isn't it [name]

1058
02:04:14,360 --> 02:04:23,720
what's happening here yes and even files so in the line 28 and forward you can also see that you are

1059
02:04:23,720 --> 02:04:29,080
copying files from your own computer into the container and copying data

1060
02:04:29,080 --> 02:04:39,440
so it really includes includes everything but they're like this um this file it's also that

1061
02:04:39,440 --> 02:04:45,140
therefore not so easily anymore uh shareable because the person running this might not have

1062
02:04:45,140 --> 02:04:51,700
home myself data it might not have that data there so you would have to also share the data

1063
02:04:51,700 --> 02:04:57,940
with them to be able to build build this image right and then by doing this we are basically

1064
02:04:57,940 --> 02:05:05,760
moving inside this kind of a virtual machine all these files that are needed maybe one thing to

1065
02:05:05,760 --> 02:05:11,160
mention about these containers we don't go into much in the details but often once the container

1066
02:05:11,160 --> 02:05:17,440
image is created we are actually not able to edit those files so often container images are read

1067
02:05:17,440 --> 02:05:24,040
only there are workarounds there are other ways but you know maybe this is not the place to go

1068
02:05:24,040 --> 02:05:27,360
deeper into container images.

1069
02:05:27,360 --> 02:05:29,560
But if you need to pick one thing that

1070
02:05:29,560 --> 02:05:35,360
is kind of wrong or questionable from the reproducibility

1071
02:05:35,360 --> 02:05:37,000
point of view in this container image,

1072
02:05:37,000 --> 02:05:39,520
which one would you pick, [name]?

1073
02:05:42,800 --> 02:05:46,000
I know which one I would pick.

1074
02:05:46,000 --> 02:05:48,040
Which one would you pick?

1075
02:05:48,040 --> 02:05:50,560
Well, I would start from the beginning with the Ubuntu

1076
02:05:50,560 --> 02:05:58,480
latest will be mean something completely different um in three years right i don't know right now is

1077
02:05:58,480 --> 02:06:05,300
it 24 or something which is the latest and that has changed in the last three years maybe from

1078
02:06:05,300 --> 02:06:13,740
20 or so yeah exactly this already you know although it's good to pull the latest and if i

1079
02:06:13,740 --> 02:06:17,920
do it today i will generate an image and maybe i'm happy with this image and i don't need to

1080
02:06:17,920 --> 02:06:24,300
touch it ever again but if in one year two years three years i'm trying to rerun this same recipe

1081
02:06:24,300 --> 02:06:30,640
of the container image it's just going to be something very different already there

1082
02:06:30,640 --> 02:06:38,720
right so yep yeah there's more exercises that you can try out

1083
02:06:38,720 --> 02:06:50,560
if you install one of these tools and these are very nice for working across different platforms

1084
02:06:50,560 --> 02:06:56,480
like you can install for example docker on linux and you can install it on windows

1085
02:06:56,480 --> 02:07:02,700
and you can run linux images on both both platforms it can help with this

1086
02:07:02,700 --> 02:07:04,920
works on my machine

1087
02:07:04,920 --> 02:07:07,460
problem but it can also turn

1088
02:07:07,460 --> 02:07:09,680
into works in my

1089
02:07:09,680 --> 02:07:11,360
container works only in my container

1090
02:07:11,360 --> 02:07:13,680
situation so it doesn't

1091
02:07:13,680 --> 02:07:15,620
solve like everything but it's

1092
02:07:15,620 --> 02:07:16,440
again one step

1093
02:07:16,440 --> 02:07:19,080
easier to

1094
02:07:19,080 --> 02:07:21,860
reproduce something

1095
02:07:21,860 --> 02:07:23,460
using containers

1096
02:07:23,460 --> 02:07:25,720
it's also a

1097
02:07:25,720 --> 02:07:26,640
nice way of

1098
02:07:26,640 --> 02:07:29,500
if you have a huge

1099
02:07:29,500 --> 02:07:31,020
data set somewhere

1100
02:07:31,020 --> 02:07:33,640
on the internet

1101
02:07:33,640 --> 02:07:35,460
that someone has collected.

1102
02:07:36,500 --> 02:07:37,760
Containers are also a way

1103
02:07:37,760 --> 02:07:39,880
on how you can, so to say,

1104
02:07:40,000 --> 02:07:42,040
send your computer to that data.

1105
02:07:42,260 --> 02:07:43,820
So instead of downloading the data,

1106
02:07:44,220 --> 02:07:45,620
you send your whole

1107
02:07:45,620 --> 02:07:47,920
computing environment

1108
02:07:47,920 --> 02:07:50,140
and your code to the data,

1109
02:07:50,340 --> 02:07:51,020
do it there,

1110
02:07:51,220 --> 02:07:52,960
and then only transfer the results.

1111
02:07:55,820 --> 02:07:58,240
So before wrapping up everything,

1112
02:07:58,440 --> 02:08:00,180
I could give a very short demo

1113
02:08:00,180 --> 02:08:02,720
or what it actually means to use these containers.

1114
02:08:03,420 --> 02:08:05,960
The image that we discussed earlier,

1115
02:08:06,260 --> 02:08:09,660
we installed this Kausei Linux program.

1116
02:08:10,360 --> 02:08:11,960
And so here I'm on my machine.

1117
02:08:11,960 --> 02:08:16,080
I have the code refiner environment installed or activated,

1118
02:08:16,500 --> 02:08:18,960
but I most likely don't have this Kausei,

1119
02:08:19,020 --> 02:08:23,520
so I can actually try it and see if this works.

1120
02:08:24,540 --> 02:08:27,460
And so in my machine right now,

1121
02:08:27,600 --> 02:08:30,060
the command Kausei could not be found.

1122
02:08:30,180 --> 02:08:35,340
Let's assume this is my machine, I would have the right, you know, to become super user

1123
02:08:35,340 --> 02:08:40,080
and install Kausei, but let's say that this is the cluster or this is someone else's machine

1124
02:08:40,080 --> 02:08:43,000
where I can't really install things.

1125
02:08:43,000 --> 02:08:50,880
So I can go through these commands, aptainer build kausei.sif, singularity image file is

1126
02:08:50,880 --> 02:08:56,080
kind of the output where the image lives, and kausei.def is the definition file that

1127
02:08:56,080 --> 02:08:57,080
you saw earlier.

1128
02:08:57,080 --> 02:09:16,440
I've already run this command. I'm not going to run it now because it would basically need to download this Ubuntu system, run updates, download the cause package and so on. I've already done this for the sake of time. So I can just kind of log in, kind of connect to the image.

1129
02:09:16,440 --> 02:09:23,360
actually I let me see what I give name to this image I call it code refinery

1130
02:09:23,360 --> 02:09:31,580
not safe but it's the same sorry for but so basically with up they obtain a shell

1131
02:09:31,580 --> 02:09:37,720
I'm basically opening a shell into this into this singularity image file that I

1132
02:09:37,720 --> 02:09:41,780
created so this is like for those at least of being using the terminal and

1133
02:09:41,780 --> 02:09:48,020
connected to remote servers this is like if I would be running ssh remote machine but now I'm

1134
02:09:48,020 --> 02:09:53,460
not running any ssh I'm just starting the obtainer which is like the software that then interprets

1135
02:09:53,460 --> 02:09:58,820
the image and now I'm like in a new machine and in this new machine let's see if the cause a common

1136
02:09:58,820 --> 02:10:07,140
is there and yes we have it so this is what what I meant that even though I could have not

1137
02:10:07,140 --> 02:10:09,240
have the rights to install the

1138
02:10:09,240 --> 02:10:11,240
`cowsay` command by building

1139
02:10:11,240 --> 02:10:13,260
the container and the good thing

1140
02:10:13,260 --> 02:10:15,040
is that these containers, Singularity Container

1141
02:10:15,040 --> 02:10:17,200
containers, they can be built even without

1142
02:10:17,200 --> 02:10:18,660
any super user rights.

1143
02:10:19,320 --> 02:10:20,900
Now I have this command

1144
02:10:20,900 --> 02:10:23,520
in my Singularity

1145
02:10:23,520 --> 02:10:25,220
image so you can

1146
02:10:25,220 --> 02:10:27,120
understand how this can

1147
02:10:27,120 --> 02:10:29,180
make it easier

1148
02:10:29,180 --> 02:10:31,160
for you to bring software

1149
02:10:31,160 --> 02:10:32,780
that you wouldn't have the rights to install

1150
02:10:32,780 --> 02:10:35,120
in HPC systems

1151
02:10:35,120 --> 02:10:35,700
for example.

1152
02:10:37,140 --> 02:10:53,620
And it can also be a nice way of trying things out again, because you are safe in this little container environment, so you don't mess up your whole computing environment if something goes wrong for whatever reason.

1153
02:10:53,620 --> 02:11:06,180
Or if you install a tool that is really hard to uninstall again, then it's only in the container, and the container is something that you can recreate from your container definition file.

1154
02:11:07,140 --> 02:11:18,740
Right. So I think it's time to wrap everything up. Or did we miss anything? Is there something relevant from the notes?

1155
02:11:19,940 --> 02:11:31,500
No, the questions that have been there have been answered already. So we can go to the last. Where to go from here? Yes. So where to go from here?

1156
02:11:31,500 --> 02:11:36,500
it's always important with all of this to bring home take home some messages

1157
02:11:36,500 --> 02:11:44,800
so i think that at least the take-home message for now is to understand when these tools discussed

1158
02:11:44,800 --> 02:11:49,200
in this episode can be useful you might have different problems you might have different

1159
02:11:49,200 --> 02:11:56,620
you know scenarios maybe you do not use this hpc system so maybe containers is not the first thing

1160
02:11:56,620 --> 02:12:02,500
that you need to kind of adopt in your workflow but you understand what your case and we have

1161
02:12:02,500 --> 02:12:08,420
given some example of tools that are useful to make your computational research more reproducible

1162
02:12:08,420 --> 02:12:15,960
so workflow tools will maybe make sense in the future it might be that sometimes these tools

1163
02:12:15,960 --> 02:12:20,960
are probably not needed but you could still consider them especially if you are a start of

1164
02:12:20,960 --> 02:12:26,420
a new project you know are you going to process many files that require many steps especially

1165
02:12:26,420 --> 02:12:34,040
similar steps over multiple files so you can start feeling that depending on the

1166
02:12:34,040 --> 02:12:39,800
type of work that you're doing and kind of repetitivity how much you need to

1167
02:12:39,800 --> 02:12:45,500
automate adopting this workflow tools will make it very you know easier for

1168
02:12:45,500 --> 02:12:52,280
you and also it better from the point of view of reproducibility and the same

1169
02:12:52,280 --> 02:13:00,500
goes for the containers containers yes they seem amazing you kind of isolate the operating system

1170
02:13:00,500 --> 02:13:08,560
that you have right now so that you can freeze the operating system and so on but um but maybe

1171
02:13:08,560 --> 02:13:19,520
you might not have kind of the need yet for this type of system so you know maybe in in general

1172
02:13:19,520 --> 02:13:24,380
all the points written here you know they can be useful but it's something

1173
02:13:24,380 --> 02:13:30,920
that you need to consider that building a container might be something a little

1174
02:13:30,920 --> 02:13:35,940
bit more advanced than simply listing the versions of the libraries that you

1175
02:13:35,940 --> 02:13:40,820
need but sometimes it's a necessary step when you really need to move the

1176
02:13:40,820 --> 02:13:47,260
installation including operating system outside of your of your local computer

1177
02:13:47,260 --> 02:13:52,320
but what is very important for every project is the clarity of the file

1178
02:13:52,320 --> 02:13:57,480
structure that is fundamental most likely is something that you and your

1179
02:13:57,480 --> 02:14:03,840
colleagues ever do as somewhat of a standard makes it much easier for

1180
02:14:03,840 --> 02:14:09,020
someone new who joins the project and immediately finds a familiar folder

1181
02:14:09,020 --> 02:14:15,060
structure and the second thing of course recording all the steps that were needed

1182
02:14:15,060 --> 02:14:23,920
to generate those results because at the minimum even though you know maybe this readme file or

1183
02:14:23,920 --> 02:14:31,000
this runall.sh they might not be the most perfect way but it's still much better than no trace of

1184
02:14:31,000 --> 02:14:38,960
any workflow except you know some some vague memories that you have in your in your head

1185
02:14:38,960 --> 02:14:46,840
creating a dependency list and keeping updated is also a very good practice and again it's not too

1186
02:14:46,840 --> 02:14:53,220
difficult optimally with these environment files you keep it up to date with a somewhat

1187
02:14:53,220 --> 02:15:00,000
machine readable format but again in general if you for one reason or another are not able to

1188
02:15:00,000 --> 02:15:05,420
keep things up to date there are ways to kind of trace back the history of the changes that you did

1189
02:15:05,420 --> 02:15:13,420
in the environment and at least consider the possibility that someone maybe you might want

1190
02:15:13,420 --> 02:15:19,620
to reproduce your work although it might feel that right now you know you don't have this issue

1191
02:15:19,620 --> 02:15:24,000
you might have it in six months from now or in one year from now or in 10 years from now

1192
02:15:24,000 --> 02:15:30,020
so if you can do something small today and make things easier for yourself in the future or for

1193
02:15:30,020 --> 02:15:37,620
others in the future it's definitely worth worth doing if you have ideas but no time to do them

1194
02:15:37,620 --> 02:15:43,860
it's still good to write things down so you could add an issue to your repository and maybe someone

1195
02:15:43,860 --> 02:15:50,580
else will i don't know create help you create the dependency file the content environment the

1196
02:15:50,580 --> 02:15:59,460
container and and whatever did i miss anything [name] should we anything you want to bring

1197
02:15:59,460 --> 02:16:07,460
to the attention no there or there is a lot of resources out there around the topics and the

1198
02:16:07,460 --> 02:16:13,700
tools that we have been introducing here especially snake make also have extensive documentation

1199
02:16:13,700 --> 02:16:19,500
behind them and a lot of examples that they are mentioning here and once in a while you can also

1200
02:16:19,500 --> 02:16:27,240
find a course going into the details of those tools and then we have started here a currently

1201
02:16:27,240 --> 02:16:36,920
very short further reading list but where you can go and read more about the different topics and

1202
02:16:36,920 --> 02:16:41,020
you may have noticed that we skipped some of the stuff that we have in our lessons here as well

1203
02:16:41,020 --> 02:16:47,520
to fit in the time so these lesson materials are also always available you can always come back

1204
02:16:47,520 --> 02:16:52,800
and look at them and if you have any questions as mentioned we have this bring your own code

1205
02:16:52,800 --> 02:17:01,220
session and i put the date also in the notes so it's on wednesday april 16th from 9 to 11 in

1206
02:17:01,220 --> 02:17:06,880
central european time where you can come and if you go through for example the snake make exercise

1207
02:17:06,880 --> 02:17:10,660
and get stuck with something or have more questions about it you can also come

1208
02:17:10,660 --> 02:17:17,300
and ask from us there to get some help and there's here this nice little box

1209
02:17:17,300 --> 02:17:24,860
if you want to practice your reproducibility skills or get inspired by what other people

1210
02:17:24,860 --> 02:17:30,780
are working on you can join something called the repro hack event or you can even run your

1211
02:17:30,780 --> 02:17:35,400
own little thing by just meeting up with a colleague and try to rerun each other's code

1212
02:17:35,400 --> 02:17:41,860
it's a nice exercise to do and you will definitely notice what are the things that are missing in

1213
02:17:41,860 --> 02:17:49,600
your documentation or in your environment file to really make this a smooth experience for both of

1214
02:17:49,600 --> 02:18:00,820
you. Right, so it's almost 12 o'clock in Finland. I think it's now good time for one hour lunch

1215
02:18:00,820 --> 02:18:06,200
break and we will be back with social coding, meaning software licenses. Final take-home

1216
02:18:06,200 --> 02:18:09,800
messages please care about reproducibility

1217
02:18:09,800 --> 02:18:13,480
computational reproducibility like we talked here but in general

1218
02:18:13,480 --> 02:18:17,440
reproducibility and robustness of scientific results

1219
02:18:17,440 --> 02:18:22,100
thank you for listening thank you [name] for being here with me

1220
02:18:22,100 --> 02:18:26,060
today and I guess we shall see

1221
02:18:26,060 --> 02:18:29,540
each other in one hour yes bye bye

1222
02:18:36,200 --> 02:18:36,820
you

1223
02:19:06,200 --> 02:19:06,820
you

1224
02:19:36,200 --> 02:19:36,820
you

1225
02:20:06,200 --> 02:20:06,820
you

1226
02:20:36,200 --> 02:20:36,820
you

1227
02:21:06,200 --> 02:21:06,820
you

1228
02:21:36,200 --> 02:21:36,820
you

1229
02:22:06,200 --> 02:22:06,820
you

1230
02:22:36,200 --> 02:22:36,820
you

1231
02:23:06,200 --> 02:23:06,820
you

1232
02:23:36,200 --> 02:23:36,820
you

1233
02:24:06,200 --> 02:24:06,820
you

1234
02:24:36,200 --> 02:24:36,820
you

1235
02:25:06,200 --> 02:25:06,820
you

1236
02:25:36,200 --> 02:25:36,820
you

1237
02:26:06,200 --> 02:26:06,820
you

1238
02:26:36,200 --> 02:26:36,820
you

1239
02:27:06,200 --> 02:27:06,820
you

1240
02:27:36,200 --> 02:27:36,820
you

1241
02:28:06,200 --> 02:28:06,820
you

1242
02:28:36,200 --> 02:28:36,820
you

1243
02:29:06,200 --> 02:29:06,820
you

1244
02:29:36,200 --> 02:29:36,820
you

1245
02:30:06,200 --> 02:30:06,820
you

1246
02:30:36,200 --> 02:30:36,820
you

1247
02:31:06,200 --> 02:31:06,820
you

1248
02:31:36,200 --> 02:31:36,820
you

1249
02:32:06,200 --> 02:32:06,820
you

1250
02:32:36,200 --> 02:32:36,820
you

1251
02:33:06,200 --> 02:33:06,820
you

1252
02:33:36,200 --> 02:33:36,820
you

1253
02:34:06,200 --> 02:34:06,820
you

1254
02:34:36,200 --> 02:34:36,820
you

1255
02:35:06,200 --> 02:35:06,820
you

1256
02:35:36,200 --> 02:35:36,820
you

1257
02:36:06,200 --> 02:36:06,820
you

1258
02:36:36,200 --> 02:36:36,820
you

1259
02:37:06,200 --> 02:37:06,820
you

1260
02:37:36,200 --> 02:37:36,820
you

1261
02:38:06,200 --> 02:38:06,820
you

1262
02:38:36,200 --> 02:38:36,820
you

1263
02:39:06,200 --> 02:39:06,820
you

1264
02:39:36,200 --> 02:39:36,820
you

1265
02:40:06,200 --> 02:40:06,820
you

1266
02:40:36,200 --> 02:40:36,820
you

1267
02:41:06,200 --> 02:41:06,820
you

1268
02:41:36,200 --> 02:41:36,820
you

1269
02:42:06,200 --> 02:42:06,820
you

1270
02:42:36,200 --> 02:42:36,820
you

1271
02:43:06,200 --> 02:43:06,820
you

1272
02:43:36,200 --> 02:43:36,820
you

1273
02:44:06,200 --> 02:44:06,820
you

1274
02:44:36,200 --> 02:44:36,820
you

1275
02:45:06,200 --> 02:45:06,820
you

1276
02:45:36,200 --> 02:45:36,820
you

1277
02:46:06,200 --> 02:46:06,820
you

1278
02:46:36,200 --> 02:46:36,820
you

1279
02:47:06,200 --> 02:47:06,820
you

1280
02:47:36,200 --> 02:47:36,820
you

1281
02:48:06,200 --> 02:48:06,820
you

1282
02:48:36,200 --> 02:48:36,820
you

1283
02:49:06,200 --> 02:49:06,820
you

1284
02:49:36,200 --> 02:49:36,820
you

1285
02:50:06,200 --> 02:50:06,820
you

1286
02:50:36,200 --> 02:50:36,820
you

1287
02:51:06,200 --> 02:51:06,820
you

1288
02:51:36,200 --> 02:51:36,820
you

1289
02:52:06,200 --> 02:52:06,820
you

1290
02:52:36,200 --> 02:52:36,820
you

1291
02:53:06,200 --> 02:53:06,820
you

1292
02:53:36,200 --> 02:53:36,820
you

1293
02:54:06,200 --> 02:54:06,820
you

1294
02:54:36,200 --> 02:54:36,820
you

1295
02:55:06,200 --> 02:55:06,820
you

1296
02:55:36,200 --> 02:55:36,820
you

1297
02:56:06,200 --> 02:56:06,820
you

1298
02:56:36,200 --> 02:56:36,820
you

1299
02:57:06,200 --> 02:57:06,820
you

1300
02:57:36,200 --> 02:57:36,820
you

1301
02:58:06,200 --> 02:58:06,820
you

1302
02:58:36,200 --> 02:58:36,820
you

1303
02:59:06,200 --> 02:59:06,820
you

1304
02:59:36,200 --> 02:59:36,820
you

1305
03:00:06,200 --> 03:00:06,820
you

1306
03:00:36,200 --> 03:00:36,820
you

1307
03:01:06,200 --> 03:01:06,820
you

1308
03:01:36,200 --> 03:01:36,820
you

1309
03:02:06,200 --> 03:02:06,820
you

1310
03:02:36,200 --> 03:02:36,820
you

1311
03:03:06,200 --> 03:03:06,820
you

1312
03:03:36,200 --> 03:03:36,820
you

1313
03:04:06,200 --> 03:04:06,820
you

1314
03:04:36,200 --> 03:04:36,820
you

1315
03:05:06,200 --> 03:05:06,820
you

1316
03:05:36,200 --> 03:05:36,820
you

1317
03:06:06,200 --> 03:06:06,820
you

1318
03:06:36,200 --> 03:06:36,820
you

1319
03:07:06,200 --> 03:07:06,820
you

1320
03:07:36,200 --> 03:07:36,820
you

1321
03:08:06,200 --> 03:08:06,820
you

1322
03:08:36,200 --> 03:08:36,820
you

1323
03:09:06,200 --> 03:09:06,820
you

1324
03:09:36,200 --> 03:09:36,820
you

1325
03:10:06,200 --> 03:10:06,820
you

1326
03:10:36,200 --> 03:10:36,820
you

1327
03:11:06,200 --> 03:11:06,820
you

1328
03:11:36,200 --> 03:11:36,820
you

1329
03:12:06,200 --> 03:12:06,820
you

1330
03:12:36,200 --> 03:12:36,820
you

1331
03:13:06,200 --> 03:13:06,820
you

1332
03:13:36,200 --> 03:13:36,820
you

1333
03:14:06,200 --> 03:14:06,820
you

1334
03:14:36,200 --> 03:14:36,820
you

1335
03:15:06,200 --> 03:15:06,820
you

1336
03:15:36,200 --> 03:15:36,820
you

1337
03:16:06,200 --> 03:16:06,820
you

1338
03:16:36,200 --> 03:16:36,820
you

1339
03:17:06,200 --> 03:17:06,820
you

1340
03:17:36,200 --> 03:17:36,820
you

1341
03:18:06,200 --> 03:18:06,820
you

1342
03:18:36,200 --> 03:18:36,820
you

1343
03:19:06,200 --> 03:19:18,220
Hello, and welcome back from the lunch break, everyone.

1344
03:19:18,220 --> 03:19:25,740
I hope you had some time to get up, walk around, find some food, maybe some coffee.

1345
03:19:27,520 --> 03:19:34,440
We'll be spending now the next one and a half hours on our next lesson called social coding.

1346
03:19:35,320 --> 03:19:38,880
And we have already met this morning, but in case we haven't, hi, I'm [name].

1347
03:19:39,240 --> 03:19:42,840
I work as a research software engineer at CSC in Finland.

1348
03:19:43,120 --> 03:19:45,900
And with me here today is [name].

1349
03:19:46,100 --> 03:19:47,700
Do you want to introduce yourself, [name]?

1350
03:19:48,260 --> 03:19:48,460
Hi.

1351
03:19:49,600 --> 03:19:50,660
Well, I'm [name].

1352
03:19:50,800 --> 03:19:53,320
I'm a research software engineer at Aalto University.

1353
03:19:54,000 --> 03:19:57,040
And I think that's sufficient.

1354
03:19:58,580 --> 03:19:59,140
Okay.

1355
03:19:59,960 --> 03:20:00,520
Yes.

1356
03:20:00,520 --> 03:20:09,800
So we'll be talking about social coding and open software or what you can do to get credit for your code and to allow reuse.

1357
03:20:10,680 --> 03:20:22,320
And this is again, as in the morning as well, a, well, not even demo based, but very discussion heavy section of the material.

1358
03:20:22,320 --> 03:20:31,240
So there will be no exercises to do directly on your computer, meaning you also don't have any computational prerequisites for this lesson.

1359
03:20:31,700 --> 03:20:39,300
So we'll be discussing around the topics and there will be quite some questions for you also coming up in the collaborative notes.

1360
03:20:40,100 --> 03:20:46,460
So maybe, [name], we can show briefly for everyone who joined us now how the notes work.

1361
03:20:46,460 --> 03:20:54,760
So you've got the link to the notes with any of the last emails that you got from us if you registered for this event.

1362
03:20:55,500 --> 03:20:59,300
And if you go there, it looks something like what [name] is showing right now.

1363
03:21:00,320 --> 03:21:05,460
And then you can see there is already a question being answered here.

1364
03:21:05,640 --> 03:21:08,900
So how would I go about answering this question as well, [name]?

1365
03:21:08,900 --> 03:21:16,580
Yeah, so if you have this document open, actually you will probably be at the top if you go

1366
03:21:16,580 --> 03:21:18,560
through the link.

1367
03:21:18,560 --> 03:21:25,340
So you can scroll down past the break, past the lunch break, and here is the Social Coding

1368
03:21:25,340 --> 03:21:26,840
section.

1369
03:21:26,840 --> 03:21:31,900
And then I have this pen button here that will go to editing mode.

1370
03:21:31,900 --> 03:21:38,860
So this is the same document viewed differently, so now I have to go past the lunch section

1371
03:21:38,860 --> 03:21:44,300
again. So now this is the launch section, this info section. And here we have social coding.

1372
03:21:44,940 --> 03:21:54,800
So yeah, you can read the question and vote for any specific topic or vote for the answer

1373
03:21:54,800 --> 03:21:59,740
by adding a character. So add an O character. I just added one here.

1374
03:21:59,740 --> 03:22:07,200
if I think it's a good reason to share my script's code or data

1375
03:22:07,200 --> 03:22:16,340
if I think that to find and make it easier to find and reproduce is a good answer then I'll

1376
03:22:16,340 --> 03:22:24,260
press o here to add one volt and so yeah this is kind of this is nice because you can read

1377
03:22:24,260 --> 03:22:26,180
the vote counts

1378
03:22:26,180 --> 03:22:27,200
essentially from

1379
03:22:27,200 --> 03:22:29,980
even from this text based editing mode

1380
03:22:29,980 --> 03:22:32,080
I'll remove

1381
03:22:32,080 --> 03:22:33,980
my own vote from there. I guess I could go

1382
03:22:33,980 --> 03:22:35,740
through them and vote but maybe not yet

1383
03:22:35,740 --> 03:22:38,160
I will

1384
03:22:38,160 --> 03:22:40,160
zoom out though a little bit

1385
03:22:40,160 --> 03:22:42,140
so you

1386
03:22:42,140 --> 03:22:43,840
might have this view instead

1387
03:22:43,840 --> 03:22:46,280
where you have these three buttons

1388
03:22:46,280 --> 03:22:48,080
so the edit mode is the pen

1389
03:22:48,080 --> 03:22:50,420
and the eye is the

1390
03:22:50,420 --> 03:22:51,860
view mode

1391
03:22:51,860 --> 03:22:53,500
I guess, preview

1392
03:22:53,500 --> 03:23:02,240
should we stay in the preview mode why not yes let's let's stay in the preview and now I will

1393
03:23:02,240 --> 03:23:10,660
try to zoom back in and knock out okay okay let's give people still a moment to answer and talk a

1394
03:23:10,660 --> 03:23:17,720
little bit about why we have this lesson which might sound a little bit dry maybe to come

1395
03:23:17,720 --> 03:23:26,400
to come here and so why do we talk about software licensing and stuff around that so imagine a

1396
03:23:26,400 --> 03:23:34,180
situation when you are out there in the internet and you find some really great code or data

1397
03:23:34,180 --> 03:23:42,360
that you really want to use and or reuse for your own purposes for your own research for

1398
03:23:42,360 --> 03:23:48,140
another publication that you might be preparing so you want to do something good for the original

1399
03:23:48,140 --> 03:23:56,220
author you want to cite them and you will make their work also more visible

1400
03:23:56,220 --> 03:24:05,960
you might need to modify the code a little bit to make it useful for yourself or if you're using

1401
03:24:05,960 --> 03:24:09,800
like data that you're finding out there you might want to remix it with your own data

1402
03:24:09,800 --> 03:24:17,620
but then everything is nice and you're very happy that you found this code or this data

1403
03:24:17,620 --> 03:24:27,220
it makes a lot of sense for you to reuse it but then you realize that there is maybe no license

1404
03:24:27,220 --> 03:24:34,940
attached to the code and now you really have this situation where you are there okay you have used

1405
03:24:34,940 --> 03:24:38,600
you have done something with it, it solves an issue.

1406
03:24:38,860 --> 03:24:46,800
But then no license means you have no idea what the original author allows you

1407
03:24:46,800 --> 03:24:49,020
or agrees with you what you can do with that.

1408
03:24:49,840 --> 03:24:56,240
So basically, you cannot reuse what they have provided there.

1409
03:24:57,240 --> 03:25:02,000
And then it can be, okay, you choose to publish the paper,

1410
03:25:02,000 --> 03:25:10,720
but you don't publish the software data because you can't meaning also that others that find

1411
03:25:10,720 --> 03:25:15,860
your paper cannot actually build on top of your software on top of your data

1412
03:25:15,860 --> 03:25:25,000
or you maybe cannot publish it at all because your journal requires that the paper come

1413
03:25:25,000 --> 03:25:31,100
should come with the data and the software so that they are reproducible and this lesson is

1414
03:25:31,100 --> 03:25:37,620
all about avoiding this situation for you and for others so like if you take something from this

1415
03:25:37,620 --> 03:25:44,500
lesson it's about like when you find something on the internet look at it if it has a license and

1416
03:25:44,500 --> 03:25:56,240
what it allows you to do okay so let's go into the notes and see what we have there so we have

1417
03:25:56,240 --> 03:26:04,960
four questions to start with the first is about why would i want to share my scripts code and data

1418
03:26:05,520 --> 03:26:13,520
and there is a few options that you hopefully had time now to read through and i see that

1419
03:26:13,520 --> 03:26:22,480
many have already voted here maybe very uh interesting is that age didn't get any votes

1420
03:26:22,480 --> 03:26:30,640
yet discouraging competitors. So you're all very good sinned here.

1421
03:26:32,160 --> 03:26:37,360
So either it is that people don't believe it discourages competitors or

1422
03:26:39,760 --> 03:26:45,200
so it kind of doesn't count as publishing something in the sense that someone else

1423
03:26:45,200 --> 03:26:50,480
could still publish it as a scientific contribution. Or it means that people are

1424
03:26:50,480 --> 03:26:56,800
just fine with sharing their stuff and collaborating with people, which would be of

1425
03:26:56,800 --> 03:27:05,520
course the positive view of this lack of votes. I kind of suspect it is the other one though.

1426
03:27:06,800 --> 03:27:13,120
How about you, [name]? What would be a good reason or what is a good reason for you?

1427
03:27:13,120 --> 03:27:18,480
So what am I thinking when I mean, I basically do try to share everything from as early as possible

1428
03:27:18,480 --> 03:27:25,980
and originally basically the main reason was that i didn't want to lose access to my code

1429
03:27:25,980 --> 03:27:33,780
when i moved to another research group so um essentially if you work for a university in

1430
03:27:33,780 --> 03:27:39,980
many cases the university owns the license but they do allow you to publish it as an open source

1431
03:27:39,980 --> 03:27:44,880
library and then if you move to another university hopefully you brought a copy but even if you did

1432
03:27:44,880 --> 03:27:54,440
If it doesn't have a license, it's kind of legally dubious to use the code.

1433
03:27:55,720 --> 03:28:07,940
So you can use it in your new institution if it's a work product, you did it for work, if you publish it with a license, or at least add a license file for yourself.

1434
03:28:08,660 --> 03:28:10,320
So that is one big reason.

1435
03:28:10,320 --> 03:28:15,220
And then the other one is just if you have it online

1436
03:28:15,220 --> 03:28:18,640
and then when your computer crashes, which it will,

1437
03:28:19,480 --> 03:28:22,040
then you still have access to it.

1438
03:28:22,320 --> 03:28:24,260
For that, of course, it could be private,

1439
03:28:24,460 --> 03:28:28,980
but then including the other reason,

1440
03:28:29,240 --> 03:28:30,940
not losing access to your own code,

1441
03:28:31,520 --> 03:28:34,360
making it public is more useful.

1442
03:28:34,360 --> 03:28:45,420
um well the third thing is of course it is to actually try to share the research contribution

1443
03:28:45,420 --> 03:28:49,120
with so that other people can use it and don't have to redo all the work

1444
03:28:49,120 --> 03:28:58,940
um so like that is the altruistic reason but the first two are um more about why i'm like

1445
03:28:58,940 --> 03:29:11,380
yeah why I'm for myself sharing the code for me it's also here answer K it encourages me to code

1446
03:29:11,380 --> 03:29:20,240
properly from the start because for myself I'm like oh yeah I will remember and oh yeah like

1447
03:29:20,240 --> 03:29:26,360
it's clear to me now what's happening here and I don't need comments I don't need anything

1448
03:29:26,360 --> 03:29:32,000
but when i will add documentation at some point and i will add tests at some point and it will be

1449
03:29:32,000 --> 03:29:40,620
fine yeah yeah exactly but if you're working up in the open then it's uh it can happen that someone

1450
03:29:40,620 --> 03:29:46,000
finds your code and i want to make that someone happy i work that way i want to make other people

1451
03:29:46,000 --> 03:29:51,060
happy so i will add a little bit documentation at least and i will also add comments from the start

1452
03:29:51,060 --> 03:29:58,620
to make that random person that finds my code happy and then again when I come back like two

1453
03:29:58,620 --> 03:30:05,040
months after I wrote that code I will also be happy myself to to find the information there

1454
03:30:05,040 --> 03:30:16,940
okay then let's see question two the most concerning thing for me if I share my software

1455
03:30:16,940 --> 03:30:24,380
are now so if you're not sharing what's your reason or if you're sharing what are the things

1456
03:30:24,380 --> 03:30:31,400
that you're concerned about how it is for you yeah it's encouraging that there's a lot of your votes

1457
03:30:31,400 --> 03:30:40,820
here but yeah I mean actually it is the ugly code answer because if I'm not sharing something it is

1458
03:30:40,820 --> 03:30:43,960
because I'm essentially just trying something out

1459
03:30:43,960 --> 03:30:46,940
that is probably not going to work.

1460
03:30:48,300 --> 03:30:50,500
And then it's abandoned.

1461
03:30:50,700 --> 03:30:54,280
I'm not going to finish it, most likely.

1462
03:30:57,980 --> 03:30:58,620
Yes.

1463
03:30:59,280 --> 03:31:02,940
And so ugly code, definitely.

1464
03:31:03,860 --> 03:31:05,240
It's a big reason.

1465
03:31:05,360 --> 03:31:08,840
And I have some codes that are still private

1466
03:31:08,840 --> 03:31:16,240
where i'm thinking like someday i will clean this up for someone else to to use um yeah and

1467
03:31:16,240 --> 03:31:22,000
then there is this others may find bugs and mistakes what if the algorithm is wrong

1468
03:31:22,000 --> 03:31:29,000
yeah what if is the algorithm is wrong if you don't share no one might ever find out that's

1469
03:31:29,000 --> 03:31:34,720
maybe good for you because you have that paper published but in the end don't you want to know

1470
03:31:34,720 --> 03:31:43,200
like isn't it better if someone says okay like i've looked at your code and um how about this

1471
03:31:43,200 --> 03:31:49,020
is there is there some some some mistake here and then you can still fix it and then

1472
03:31:49,020 --> 03:31:56,320
if you have already published your code then you can publish a what is it addition to

1473
03:31:56,320 --> 03:32:04,300
to the paper or in any other way you fix it and then when people reuse it they have a working

1474
03:32:04,300 --> 03:32:11,660
code and they actually have something to reuse somehow like this is maybe not always the case

1475
03:32:11,660 --> 03:32:20,720
but if you have a decent number of publications and some of them have errata some of them have

1476
03:32:20,720 --> 03:32:27,000
corrections or you even have um pulled back what was the official what's the correct english word

1477
03:32:27,000 --> 03:32:33,260
for removing an article like it's kind of a drastic thing to do usually you would make a

1478
03:32:33,260 --> 03:32:40,720
correction but if you retracted an article like that should make you look better that should make

1479
03:32:40,720 --> 03:32:48,120
all of the other papers look so much more believable because mistakes happen and yeah I

1480
03:32:48,120 --> 03:32:56,500
know I've lost some data I know I've changed the code and not been able to reproduce a result and

1481
03:32:56,500 --> 03:33:03,640
so on so yeah those kinds of things happen and if your publication history looks like you've never

1482
03:33:03,640 --> 03:33:12,340
made a mistake like to me that's more suspicious than um than polished look right yes but um that's

1483
03:33:13,200 --> 03:33:18,860
um that's not still always the case right it's it is better to make sure that you don't have

1484
03:33:18,860 --> 03:33:20,780
mistakes in the paper before you publish it.

1485
03:33:24,420 --> 03:33:27,280
For that publishing the code before you publish the paper is

1486
03:33:27,280 --> 03:33:28,160
actually a good idea.

1487
03:33:28,860 --> 03:33:36,360
Yeah. And there is even journals that support that also. And then

1488
03:33:36,360 --> 03:33:41,600
we have A, it will be scooped or stolen by someone else. And I

1489
03:33:41,600 --> 03:33:45,320
think that's where we get to one of the topics that we will be

1490
03:33:45,320 --> 03:33:51,680
talking in this lesson which is licenses can actually help with that because you are sharing

1491
03:33:51,680 --> 03:34:01,680
your code and depending on like who owns the right is it you or is it your employer you can put

1492
03:34:01,680 --> 03:34:10,080
the the license and give the framework on how how your code can be reused in different scenarios

1493
03:34:10,080 --> 03:34:11,900
And that's what the license is for.

1494
03:34:12,040 --> 03:34:14,520
It's to protect you and your work

1495
03:34:14,520 --> 03:34:16,980
and make clear how it can be used in the future.

1496
03:34:18,320 --> 03:34:18,440
Yeah.

1497
03:34:19,760 --> 03:34:22,280
This is also a big difference

1498
03:34:22,280 --> 03:34:23,860
between how software is treated

1499
03:34:23,860 --> 03:34:26,340
and how papers are treated.

1500
03:34:27,040 --> 03:34:29,300
So when you're doing research

1501
03:34:29,300 --> 03:34:30,360
and you publish a paper,

1502
03:34:30,580 --> 03:34:32,280
I've never heard anyone say

1503
03:34:32,280 --> 03:34:33,320
you shouldn't publish,

1504
03:34:33,420 --> 03:34:34,980
I don't want to publish this paper

1505
03:34:34,980 --> 03:34:36,860
because then someone might

1506
03:34:36,860 --> 03:34:39,520
create derivative work based on it.

1507
03:34:39,520 --> 03:34:40,760
like someone might scoop it

1508
03:34:40,760 --> 03:34:43,100
and continue working on that field

1509
03:34:43,100 --> 03:34:46,480
because they will cite your paper

1510
03:34:46,480 --> 03:34:50,380
and if they don't, that's misconduct.

1511
03:34:50,960 --> 03:34:52,820
Now, if they use your code

1512
03:34:52,820 --> 03:34:54,260
and they don't cite you,

1513
03:34:54,380 --> 03:34:55,660
that's also, I mean,

1514
03:34:55,900 --> 03:34:57,740
it's not exactly citing, right?

1515
03:34:57,780 --> 03:34:59,240
It's not technically the same thing.

1516
03:34:59,300 --> 03:35:00,440
But if they don't mention

1517
03:35:00,440 --> 03:35:01,660
that they have used your code,

1518
03:35:02,180 --> 03:35:04,380
that is also misconduct.

1519
03:35:07,300 --> 03:35:08,440
Unless, of course,

1520
03:35:08,440 --> 03:35:11,860
you publish it under a license where you specifically say you can do whatever you want

1521
03:35:11,860 --> 03:35:16,360
this code those licenses to exist but you don't have to use that license

1522
03:35:16,360 --> 03:35:27,200
yeah and then uh point h also has quite a few votes here it is too early i'm just prototyping

1523
03:35:27,200 --> 03:35:32,620
and i will write version to this yeah that was my answer also i mentioned also earlier i'm also

1524
03:35:32,620 --> 03:35:41,480
guilty of that i definitely have some of those lingering around um and there also there is like

1525
03:35:41,480 --> 03:35:49,280
we all know the the expression um well i don't know the expression like a positive publication

1526
03:35:49,280 --> 03:35:55,420
bias so just is it just publication bias i guess it is so people publish positive findings and

1527
03:35:55,420 --> 03:36:00,340
they do a lot of work on a research project don't get a positive finding and then it doesn't get

1528
03:36:00,340 --> 03:36:06,260
published then the same thing happens with code you do a bunch of stuff um you try different

1529
03:36:06,260 --> 03:36:12,320
things and you never publish the ones that don't work so it actually would be useful to publish

1530
03:36:12,320 --> 03:36:23,360
the codes where you give up um not necessarily to um to give it to people to reuse but rather to

1531
03:36:23,360 --> 03:36:29,820
just tell people you've already tried this maybe they can do it better but you know it's evidence

1532
03:36:29,820 --> 03:36:35,640
maybe it doesn't work yeah and it might spark ideas for someone else to continue your work

1533
03:36:35,640 --> 03:36:44,800
and maybe that is something that in the end also helps you yeah and then we have uh i worried about

1534
03:36:44,800 --> 03:36:52,160
licensing and legal matters as they are very complicated and yeah i also have felt that way

1535
03:36:52,160 --> 03:37:01,180
and it is it is a big topic and there is many different licenses and so on but hopefully with

1536
03:37:01,180 --> 03:37:07,060
this lesson today we can also show you that there are tools out there that help you and

1537
03:37:07,060 --> 03:37:15,020
like maybe showing you a way on how you can still still do it even though you don't know

1538
03:37:15,020 --> 03:37:16,880
the whole context of everything

1539
03:37:16,880 --> 03:37:19,060
and still work with

1540
03:37:19,060 --> 03:37:19,660
the licenses

1541
03:37:19,660 --> 03:37:23,020
there is also just

1542
03:37:23,020 --> 03:37:25,200
well and I guess this comes out

1543
03:37:25,200 --> 03:37:26,920
in the licensing section as well

1544
03:37:26,920 --> 03:37:28,820
but one important point is that

1545
03:37:28,820 --> 03:37:30,360
common sense works here

1546
03:37:30,360 --> 03:37:32,580
so even though it is a legal thing

1547
03:37:32,580 --> 03:37:35,260
it's not just a bunch of magic words

1548
03:37:35,260 --> 03:37:36,900
that somehow interact with

1549
03:37:36,900 --> 03:37:38,400
some legal system out there

1550
03:37:38,400 --> 03:37:40,940
mostly legal stuff is

1551
03:37:40,940 --> 03:37:41,980
based on common sense

1552
03:37:41,980 --> 03:37:43,980
so if you put a license there

1553
03:37:43,980 --> 03:37:46,040
and it's one of the standard ones.

1554
03:37:46,700 --> 03:37:48,960
People should roughly know what you mean by it.

1555
03:37:49,640 --> 03:37:51,420
So it doesn't have to be complicated.

1556
03:37:56,940 --> 03:37:58,140
There's also a comment on,

1557
03:37:58,240 --> 03:37:59,860
I put it in Jupyter Notebook format,

1558
03:38:00,220 --> 03:38:02,720
which isn't suitable for anyone to reuse it

1559
03:38:02,720 --> 03:38:05,020
and never having time to update it.

1560
03:38:07,520 --> 03:38:08,000
Yeah.

1561
03:38:09,760 --> 03:38:10,240
Okay.

1562
03:38:10,240 --> 03:38:13,660
I mean, we'll come back to publishing notebooks.

1563
03:38:13,980 --> 03:38:15,860
So that might be useful.

1564
03:38:17,300 --> 03:38:18,840
What do we call that section?

1565
03:38:21,420 --> 03:38:22,500
Jupyter Notebooks.

1566
03:38:24,140 --> 03:38:30,240
And I guess we have Binder in the Jupyter Notebooks section.

1567
03:38:31,040 --> 03:38:31,240
Yep.

1568
03:38:31,940 --> 03:38:32,160
Yeah.

1569
03:38:32,460 --> 03:38:34,800
So that will be useful in that case.

1570
03:38:36,360 --> 03:38:38,700
But yeah, I mean, you can publish Jupyter Notebooks.

1571
03:38:38,760 --> 03:38:39,720
You can put them online.

1572
03:38:39,720 --> 03:38:47,360
it's not I'm maybe it's not as reusable but it's still it's better than not publishing it

1573
03:38:47,360 --> 03:38:56,520
yeah and there's even platforms where you can have them as executable notebooks so you don't

1574
03:38:56,520 --> 03:39:01,400
even just provide your code but you can provide the whole computing environment

1575
03:39:01,400 --> 03:39:08,220
often they live also in containers what we talked about earlier today so that someone could just

1576
03:39:08,220 --> 03:39:15,440
go to this platform, click a button to start a whole computing environment with all the libraries

1577
03:39:15,440 --> 03:39:21,760
already set up for them and run your code in that environment. So there is definitely ways for doing

1578
03:39:21,760 --> 03:39:33,040
that too. Yeah. Okay, question three. Why is software often treated differently from papers?

1579
03:39:33,580 --> 03:39:35,400
Have you experienced that, [name]?

1580
03:39:36,520 --> 03:39:43,560
So, I mean, yes, it's getting better, or at least I think it's getting better.

1581
03:39:44,280 --> 03:39:48,480
But I'm also now a research software engineer.

1582
03:39:48,700 --> 03:39:52,400
I interact with software way more than when I was a researcher,

1583
03:39:52,760 --> 03:39:54,900
although even then I was basically doing the same job.

1584
03:39:55,340 --> 03:39:57,020
I was also publishing papers.

1585
03:39:57,020 --> 03:40:00,880
and I think that at that time

1586
03:40:00,880 --> 03:40:05,660
at least in my field it wasn't even normal to publish your code

1587
03:40:05,660 --> 03:40:08,820
and that has at least changed

1588
03:40:08,820 --> 03:40:10,580
so it is getting better

1589
03:40:10,580 --> 03:40:16,780
I have a feeling there is now more journals that at least suggest

1590
03:40:16,780 --> 03:40:19,080
to also publish code and data

1591
03:40:19,080 --> 03:40:23,060
some may even require it

1592
03:40:23,060 --> 03:40:26,800
but the focus still seems on the papers themselves

1593
03:40:26,800 --> 03:40:37,220
Yeah. This is partly just an answer or a possible solution to that. Someone will scoop my code

1594
03:40:37,220 --> 03:40:43,700
or scoop my research and publish before me. If they were forced to publish the code, then

1595
03:40:43,700 --> 03:40:52,380
everybody would, of course, see that they have used your code. So in that sense, this

1596
03:40:52,380 --> 03:40:56,620
is a root of a of some of these problems

1597
03:40:56,620 --> 03:41:07,000
and he's also mentioned maintenance isn't funded like just putting it out there is often also not

1598
03:41:07,000 --> 03:41:13,720
the end of the line but it's still a good step to do even if you don't have time to maintain it

1599
03:41:13,720 --> 03:41:20,620
because like in the previous example it might still spark ideas or someone might find this so

1600
03:41:20,620 --> 03:41:26,680
useful that they actually take over the maintenance of your code that can also happen so it can be the

1601
03:41:26,680 --> 03:41:34,940
end of the line and i have published software that i used for one or two papers never got back to it

1602
03:41:34,940 --> 03:41:42,840
and they're just now like i haven't maintained them in five six years and that's like nobody's

1603
03:41:42,840 --> 03:41:48,100
losing anything because i don't maintain them if i was still using them i would maintain them and

1604
03:41:48,100 --> 03:41:55,860
somebody else has used a part of it then that's nice but yeah i mean you don't lose anything by

1605
03:41:55,860 --> 03:42:03,620
not maintaining the code that you publish yeah and i think also nowadays i don't know if people

1606
03:42:03,620 --> 03:42:09,140
here in the audience have heard about research software engineers before but it's a coming thing

1607
03:42:09,860 --> 03:42:16,020
to the world let's say in the uk and us maybe already a bit or definitely a bit more known

1608
03:42:16,020 --> 03:42:23,060
but it's also coming to the nordics now and there is associations like nordic rsc like uk rsc the

1609
03:42:23,060 --> 03:42:29,480
society for research software engineering or US RSE and these associations actually

1610
03:42:29,480 --> 03:42:38,900
like help with this they try to make it more public that like a lot of the research that is

1611
03:42:38,900 --> 03:42:43,760
then published in papers relies on the code and that it's an important part of the research

1612
03:42:43,760 --> 03:42:47,520
so that researchers also can get credit for that.

1613
03:42:48,160 --> 03:42:49,960
And if that's something you're interested in,

1614
03:42:50,060 --> 03:42:51,520
we will have a little bit about this

1615
03:42:51,520 --> 03:42:54,540
also in the outro of the workshop on Thursday.

1616
03:42:57,460 --> 03:43:00,560
I don't know how hard should I disagree

1617
03:43:00,560 --> 03:43:02,560
with someone who has written a comment in the notes.

1618
03:43:02,620 --> 03:43:03,920
I mean, it's great that you write comments

1619
03:43:03,920 --> 03:43:09,220
and I don't want to sound negative or anything,

1620
03:43:09,360 --> 03:43:10,360
but I do want to comment.

1621
03:43:10,600 --> 03:43:12,300
So because there is one comment

1622
03:43:12,300 --> 03:43:17,340
that essentially says that you need to you don't need to maintain papers and so they are eternal

1623
03:43:17,340 --> 03:43:22,060
but you do need to maintain software and um like

1624
03:43:22,060 --> 03:43:31,700
we we kind of it does seem like that but um if you publish software and never maintain it then

1625
03:43:31,700 --> 03:43:38,400
it's just like a paper right um then it doesn't change anymore and if when you publish the paper

1626
03:43:38,400 --> 03:43:43,420
it just it is frozen in time i guess that is that is the difference that this is pointing at right

1627
03:43:43,420 --> 03:43:49,500
um so when you publish a paper it's frozen in time and there's nothing to maintain when you

1628
03:43:49,500 --> 03:43:55,140
publish a soft piece of software like people do have the expectation that you maintain it

1629
03:43:55,140 --> 03:44:02,860
but you can also like make it an archive and essentially freeze it and then it doesn't run

1630
03:44:02,860 --> 03:44:06,740
anymore. But it is kind of the same thing as publishing an

1631
03:44:06,740 --> 03:44:13,180
algorithm in a paper. So it's not worse than publishing a

1632
03:44:13,180 --> 03:44:22,180
paper, in that sense. Yeah, that was kind of an interesting

1633
03:44:22,240 --> 03:44:29,380
different point of view. In a way, I feel about this so

1634
03:44:29,380 --> 03:44:34,740
differently that it took me a while to understand what it's saying but yeah

1635
03:44:34,740 --> 03:44:41,960
it's good to read about the different points of use here yes and thanks for your comment

1636
03:44:41,960 --> 03:44:51,580
then let's move on to question four when you find a repository with code or library you would like

1637
03:44:51,580 --> 03:44:57,960
to reuse what are the things you look at to decide whether to use it how is it for you I don't know

1638
03:44:57,960 --> 03:45:00,040
What is the first thing that you're looking at?

1639
03:45:00,040 --> 03:45:03,140
The first thing is, when was it last modified?

1640
03:45:04,040 --> 03:45:08,480
If it's more than two years, then I might use it for inspiration,

1641
03:45:08,840 --> 03:45:10,220
but I'm not going to use the code.

1642
03:45:11,400 --> 03:45:13,200
It's unlikely to work.

1643
03:45:14,800 --> 03:45:16,800
The other thing is if it has a license file.

1644
03:45:17,700 --> 03:45:20,040
I might not even look at what license it has

1645
03:45:20,040 --> 03:45:21,980
as long as it has a license file.

1646
03:45:22,080 --> 03:45:22,620
That's the start.

1647
03:45:22,620 --> 03:45:28,140
yeah I mean depends on how

1648
03:45:28,140 --> 03:45:30,020
restricted if I'm already using

1649
03:45:30,020 --> 03:45:31,980
other licenses in the same

1650
03:45:31,980 --> 03:45:34,320
same project

1651
03:45:34,320 --> 03:45:36,100
same software then you need to make sure

1652
03:45:36,100 --> 03:45:37,300
that they're compatible but

1653
03:45:37,300 --> 03:45:39,840
if you're just starting

1654
03:45:39,840 --> 03:45:41,240
make sure that there's a license

1655
03:45:41,240 --> 03:45:44,040
sounds like

1656
03:45:44,040 --> 03:45:45,920
you look at

1657
03:45:45,920 --> 03:45:48,160
quite specific things

1658
03:45:48,160 --> 03:45:50,060
already which are maybe not the first

1659
03:45:50,060 --> 03:45:51,220
things that come to mind

1660
03:45:51,220 --> 03:45:59,140
for a researcher just looking looking at the code I mean it sounds like you have some experience with

1661
03:45:59,140 --> 03:46:08,460
these things like we have here also how easy it is to use how fit for purpose it is for my project

1662
03:46:08,460 --> 03:46:13,880
of course those are also very important things like you don't even have to look at something

1663
03:46:13,880 --> 03:46:15,960
if it doesn't seem to fit.

1664
03:46:16,400 --> 03:46:19,420
And one way of finding out how fit it is

1665
03:46:19,420 --> 03:46:22,920
is to read the readme, read the documentation.

1666
03:46:23,980 --> 03:46:27,520
And that is also mentioned as one of the points here.

1667
03:46:27,920 --> 03:46:29,140
Is there documentation?

1668
03:46:29,620 --> 03:46:31,120
Sometimes there might not be documentation.

1669
03:46:31,920 --> 03:46:35,780
There is many projects out there where there's only code

1670
03:46:35,780 --> 03:46:38,740
and then maybe some comments in the code.

1671
03:46:38,740 --> 03:46:47,560
um so that's also a good way of uh where to first look does it have a readme is there

1672
03:46:47,560 --> 03:46:53,400
information how do i actually uh get the computing environment up and running

1673
03:46:53,400 --> 03:46:57,820
and then also test if that actually works

1674
03:46:57,820 --> 03:47:05,200
quick overview yes that's what uh the readmes are very good for

1675
03:47:05,200 --> 03:47:13,820
and the license yes you also mentioned that already yeah it's good if um so i guess readme

1676
03:47:13,820 --> 03:47:21,280
is the third thing and this is influenced a lot by what the github user interface looks like

1677
03:47:21,280 --> 03:47:28,160
like if you start from the top of the page you first see how old the files are and then you see

1678
03:47:28,160 --> 03:47:33,420
if there's a license file and then you see the readme so that's i guess one of the reasons i

1679
03:47:33,420 --> 03:47:41,460
mentioned them in that order but um but yeah so if the readme actually says that it is doing the

1680
03:47:41,460 --> 03:47:49,580
thing that you wanted the software to do then it's useful otherwise yeah of course it might not be

1681
03:47:49,580 --> 03:47:57,720
that useful yeah and it that might also have influence on i don't know if your colleague has

1682
03:47:57,720 --> 03:48:04,480
been using that code for many years and is happy with how it performs and maybe even the readme is

1683
03:48:04,480 --> 03:48:08,640
not that extensive as you would like to have it but you have someone there you can ask questions

1684
03:48:08,640 --> 03:48:22,860
about that could also be something to consider and if you are thinking about building on top or

1685
03:48:22,860 --> 03:48:30,140
contributing to the code that you find then also like looking for something like a contribution

1686
03:48:30,140 --> 03:48:39,760
guide could be good is there a code of conduct and how the violations to it will be handled

1687
03:48:39,760 --> 03:48:47,740
are there any open poll requests or have they been lingering for years because if you decide

1688
03:48:47,740 --> 03:48:53,760
to put some time in contributing to a code you also of course want someone to actually look at

1689
03:48:53,760 --> 03:49:02,900
your suggestions and potentially merge them so yeah that's a good list that you've been writing

1690
03:49:02,900 --> 03:49:10,140
here do you have any other um like often even like seeing a pull request that is open means

1691
03:49:10,140 --> 03:49:17,600
that someone else has used it and someone else is has found it well useful and is it's clear

1692
03:49:17,600 --> 03:49:22,520
enough code that they've been able to modify it which already is a good indication it's a positive

1693
03:49:22,520 --> 03:49:28,640
indication even if it has been open for a long time if you look at some of the old codes that

1694
03:49:28,640 --> 03:49:34,660
i mentioned that i have published there will be no pull requests there will be no uh no changes

1695
03:49:34,660 --> 03:49:42,120
in the code for a while and uh you probably shouldn't use those but yeah um but you can

1696
03:49:42,120 --> 03:49:46,940
still see if someone finds the paper um and they're curious on how you implemented that

1697
03:49:46,940 --> 03:49:52,540
they can still see like how you did that because you shared the code so in that sense it's not

1698
03:49:52,540 --> 03:49:57,880
useless out there no it is not it is not useless yeah

1699
03:49:57,880 --> 03:50:06,820
okay let's go back to the lesson material to the very bottom just one moment and

1700
03:50:06,820 --> 03:50:14,520
open here yes and are we in social coding yeah in the very bottom

1701
03:50:16,940 --> 03:50:30,760
Okay. So above this, you can find some more comments about also the questions that we have asked, if you want to reread some of them.

1702
03:50:30,760 --> 03:50:39,060
this last picture here shows also how our work in general as a researcher connects to the work

1703
03:50:39,060 --> 03:50:46,340
of others so we have our work here in the middle and we are already looking at other people's stuff

1704
03:50:46,340 --> 03:50:51,500
we are looking at their ideas the articles that they have published we might reuse the data or

1705
03:50:51,500 --> 03:50:58,540
the software that they have hopefully published and we give them credit we give them acknowledgement

1706
03:50:58,540 --> 03:51:05,100
of that by citing by citing them or mentioning in the acknowledgements or in what depending on what

1707
03:51:05,100 --> 03:51:10,760
you got from them you might find different ways there and then we want to make that also possible

1708
03:51:10,760 --> 03:51:17,720
for others that may find our work and that's really what this lesson is all about on how we

1709
03:51:17,720 --> 03:51:25,760
can all work together to like not have to always start from scratch okay and software licenses are

1710
03:51:25,760 --> 03:51:29,720
one part of that. And with that, I give over to [name].

1711
03:51:31,940 --> 03:51:36,160
Okay, so I just clicked next to get to the next section, which is software licensing.

1712
03:51:38,760 --> 03:51:46,020
So yeah, this is essentially licenses are for telling people that they can use your code

1713
03:51:46,020 --> 03:51:51,440
that you have shared, and what they can use it for and under what conditions they can use it for.

1714
03:51:51,440 --> 03:51:53,920
so at some point in the past

1715
03:51:53,920 --> 03:51:55,480
at least we had a version of this

1716
03:51:55,480 --> 03:51:57,140
social coding

1717
03:51:57,140 --> 03:51:59,960
section of the

1718
03:51:59,960 --> 03:52:00,640
workshop

1719
03:52:00,640 --> 03:52:03,400
or social coding lesson

1720
03:52:03,400 --> 03:52:04,900
that was called software licensing

1721
03:52:04,900 --> 03:52:07,180
but we decided to expand it a good bit

1722
03:52:07,180 --> 03:52:09,500
but this is still kind of

1723
03:52:09,500 --> 03:52:11,360
something

1724
03:52:11,360 --> 03:52:13,340
rather important

1725
03:52:13,340 --> 03:52:14,160
that

1726
03:52:14,160 --> 03:52:17,640
a lot of the infrastructure for

1727
03:52:17,640 --> 03:52:18,960
cooperation is built around

1728
03:52:18,960 --> 03:52:31,600
so first uh the first point is copyright so whenever you create something you write a piece

1729
03:52:31,600 --> 03:52:39,860
of code um you have copyright to that code uh and there's a few different related concepts that

1730
03:52:39,860 --> 03:52:48,600
people get mixed up um so copyright applies to creative work it applies to text that you write

1731
03:52:48,600 --> 03:52:55,720
um a painting that you make um i mean if you're in the kitchen because you use the kitchen metaphor

1732
03:52:55,720 --> 03:53:02,060
if you create a new recipe and write it down that's um it applies to the way you express the

1733
03:53:02,060 --> 03:53:08,680
recipe but it doesn't necessarily necessarily apply to the food itself or to the method of

1734
03:53:08,680 --> 03:53:17,800
cooking it right so a trademark is related concept but it protects the brand name so if you start a

1735
03:53:17,800 --> 03:53:24,420
restaurant and have give it a name then that name would be a trademark a patent is for

1736
03:53:24,420 --> 03:53:32,560
technical inventions so methods of doing things um i don't think algorithms can really be patented

1737
03:53:32,560 --> 03:53:40,840
but um a specific application of an algorithm or a technical um technical device things like that

1738
03:53:40,840 --> 03:53:46,420
um can be patented and then there's copyright so copyright is specifically for creative expression

1739
03:53:46,420 --> 03:53:52,400
so it's a bit complex i mean there's a lot of these terms it can be a bit complicated and i

1740
03:53:52,400 --> 03:53:56,680
guess the main point is not really to remember all the terms right the main point is to get the

1741
03:53:56,680 --> 03:54:04,200
basic idea that there is copyright that you have copyright to your code when you have written the

1742
03:54:04,200 --> 03:54:09,060
code and when someone else has written a piece of code they have copyrighted that code

1743
03:54:09,060 --> 03:54:19,340
so if you just take someone else's code well that's that's not legal like you you can't just

1744
03:54:19,340 --> 03:54:24,060
take it and redistribute it to or make copies of it and distribute it to other people you need some

1745
03:54:24,060 --> 03:54:29,640
sort of license copyright also controls derivative work and this is kind of then the

1746
03:54:29,640 --> 03:54:37,360
this is the important concept here um so derivative work is using someone else's work

1747
03:54:37,360 --> 03:54:40,000
and resampling it or creating something from it.

1748
03:54:40,280 --> 03:54:42,780
But importantly, it needs to include something

1749
03:54:42,780 --> 03:54:44,360
from the original work.

1750
03:54:45,320 --> 03:54:51,060
So say this copyright originally is a legal thing

1751
03:54:51,060 --> 03:54:56,720
that has been applied to artwork, paintings and books and so on.

1752
03:54:57,360 --> 03:55:02,020
So it's much easier maybe to apply there.

1753
03:55:02,840 --> 03:55:06,500
So if you take, for example, a piece of music

1754
03:55:06,500 --> 03:55:08,260
that someone else has created

1755
03:55:08,260 --> 03:55:12,320
and you speed it up

1756
03:55:12,320 --> 03:55:15,080
or just remix parts of it

1757
03:55:15,080 --> 03:55:16,640
and reorganize it somehow,

1758
03:55:17,200 --> 03:55:18,540
that's derivative work.

1759
03:55:19,260 --> 03:55:22,760
So you cannot automatically distribute that.

1760
03:55:22,840 --> 03:55:24,660
That doesn't automatically become your work

1761
03:55:24,660 --> 03:55:27,380
if you are directly using pieces

1762
03:55:27,380 --> 03:55:28,420
of someone else's work.

1763
03:55:29,720 --> 03:55:31,300
If you paint a painting

1764
03:55:31,300 --> 03:55:32,820
that includes a painting,

1765
03:55:33,480 --> 03:55:35,040
like you paint a picture of a room

1766
03:55:35,040 --> 03:55:36,180
and there's a painting on the wall

1767
03:55:36,180 --> 03:55:39,280
and that painting is the Mona Lisa that you painted into the painting.

1768
03:55:40,360 --> 03:55:42,240
That's not derivative work, right?

1769
03:55:42,960 --> 03:55:44,840
Does that make any sense?

1770
03:55:45,240 --> 03:55:45,920
Hopefully it does.

1771
03:55:48,380 --> 03:55:52,360
So, yeah, if you're remixing music, it's clearly derivative work.

1772
03:55:52,360 --> 03:55:57,040
Copying a paragraph from someone else's book is not just derivative work.

1773
03:55:57,120 --> 03:55:58,240
That's actually just direct copying.

1774
03:55:59,620 --> 03:56:04,700
But quoting someone else is not derivative work.

1775
03:56:04,700 --> 03:56:05,740
so that

1776
03:56:05,740 --> 03:56:06,420
there is

1777
03:56:06,420 --> 03:56:06,840
kind of

1778
03:56:06,840 --> 03:56:07,360
a boundary

1779
03:56:07,360 --> 03:56:07,920
there that

1780
03:56:07,920 --> 03:56:08,340
is

1781
03:56:08,340 --> 03:56:09,340
it is

1782
03:56:09,340 --> 03:56:09,640
fluid

1783
03:56:09,640 --> 03:56:10,080
in some

1784
03:56:10,080 --> 03:56:10,280
way

1785
03:56:10,280 --> 03:56:12,380
okay

1786
03:56:12,380 --> 03:56:13,080
so

1787
03:56:13,080 --> 03:56:17,700
one

1788
03:56:17,700 --> 03:56:18,040
important

1789
03:56:18,040 --> 03:56:18,540
thing here

1790
03:56:18,540 --> 03:56:18,780
is

1791
03:56:18,780 --> 03:56:19,720
you can

1792
03:56:19,720 --> 03:56:20,680
do almost

1793
03:56:20,680 --> 03:56:21,200
anything

1794
03:56:21,200 --> 03:56:21,860
to someone

1795
03:56:21,860 --> 03:56:22,220
else's

1796
03:56:22,220 --> 03:56:22,540
creative

1797
03:56:22,540 --> 03:56:22,920
work

1798
03:56:22,920 --> 03:56:23,720
when you

1799
03:56:23,720 --> 03:56:24,040
have it

1800
03:56:24,040 --> 03:56:24,280
in your

1801
03:56:24,280 --> 03:56:24,680
possession

1802
03:56:24,680 --> 03:56:26,180
as long

1803
03:56:26,180 --> 03:56:26,480
as you

1804
03:56:26,480 --> 03:56:26,720
don't

1805
03:56:26,720 --> 03:56:27,100
distribute

1806
03:56:27,100 --> 03:56:27,500
it

1807
03:56:27,500 --> 03:56:28,000
as long

1808
03:56:28,000 --> 03:56:28,200
as you

1809
03:56:28,200 --> 03:56:28,580
don't

1810
03:56:28,580 --> 03:56:29,440
publish

1811
03:56:29,440 --> 03:56:29,760
it

1812
03:56:29,760 --> 03:56:30,540
so if

1813
03:56:30,540 --> 03:56:30,920
it just

1814
03:56:30,920 --> 03:56:31,320
stays in

1815
03:56:31,320 --> 03:56:31,500
your

1816
03:56:31,500 --> 03:56:31,920
home

1817
03:56:31,920 --> 03:56:33,320
then

1818
03:56:33,320 --> 03:56:33,720
nobody

1819
03:56:33,720 --> 03:56:34,540
cares

1820
03:56:34,700 --> 03:56:43,360
But if you publish it, or if you publish any derivative work that you've created based on it, then you need to think about licensing.

1821
03:56:45,320 --> 03:56:52,660
Okay, so I don't know how much sense my examples made, so maybe we should actually go through the exercise.

1822
03:56:53,300 --> 03:56:55,540
It's already in the notes.

1823
03:56:58,900 --> 03:56:59,740
Let's see.

1824
03:57:00,480 --> 03:57:03,520
So what do you think, our audience?

1825
03:57:04,700 --> 03:57:07,640
What do you think of these is derivative work?

1826
03:57:07,700 --> 03:57:13,380
And now it goes towards like our actual coding experience

1827
03:57:13,380 --> 03:57:17,340
and situations that you actually might be getting into.

1828
03:57:18,920 --> 03:57:23,400
So we have download some code from a website and add onto it.

1829
03:57:23,400 --> 03:57:26,800
Download some code and use one of the functions in your code.

1830
03:57:27,100 --> 03:57:29,200
Changing code you got from somewhere.

1831
03:57:29,860 --> 03:57:31,480
Extending code you got from somewhere.

1832
03:57:31,820 --> 03:57:34,000
Completely rewriting code you got from somewhere.

1833
03:57:34,700 --> 03:57:41,480
Rewriting to a different programming language, linking to libraries, plug-ins and drivers in your code.

1834
03:57:42,820 --> 03:57:48,980
Clean room design, so somebody explains you the code, but you have never actually seen it.

1835
03:57:49,860 --> 03:57:56,800
And the last one, you read a paper, understand the algorithm and write your own code.

1836
03:57:57,980 --> 03:57:58,920
That's awesome, yeah.

1837
03:58:00,220 --> 03:58:02,920
So let's give people a moment.

1838
03:58:04,700 --> 03:58:10,000
I'm also at the same time thinking through

1839
03:58:10,000 --> 03:58:14,360
if there's any concept that's included in these examples

1840
03:58:14,360 --> 03:58:18,580
but I didn't mention, but I don't think so.

1841
03:58:19,300 --> 03:58:22,100
So, well, we'll come back to it at the end.

1842
03:58:24,000 --> 03:58:26,600
Is there anything you would like to comment

1843
03:58:26,600 --> 03:58:30,900
while people read through this?

1844
03:58:30,900 --> 03:58:39,760
no i think uh so this linked also back to the very beginning when we find out that

1845
03:58:39,760 --> 03:58:44,140
what we actually reused didn't have a license on it so we would not be

1846
03:58:44,140 --> 03:58:54,000
able to actually redistribute it and here also it was still fine that we like reused their code and

1847
03:58:54,000 --> 03:58:59,760
everything but then when it comes to publishing that's where we're getting into the into the

1848
03:58:59,760 --> 03:59:07,200
trouble yeah so there's some license slightly more slightly complicated or a little bit

1849
03:59:07,200 --> 03:59:14,160
complicated things about code in particular where you don't necessarily always even need oops what

1850
03:59:14,160 --> 03:59:23,760
did i do you don't necessarily always need the code to run the program um so for example if you

1851
03:59:23,760 --> 03:59:24,920
write a

1852
03:59:24,920 --> 03:59:27,780
written Python libraries in this

1853
03:59:27,780 --> 03:59:29,420
or written requirements files

1854
03:59:29,420 --> 03:59:31,660
a code can depend

1855
03:59:31,660 --> 03:59:33,420
well I mean we just did the

1856
03:59:33,420 --> 03:59:35,180
the

1857
03:59:35,180 --> 03:59:37,700
recipe for a

1858
03:59:37,700 --> 03:59:39,420
container so

1859
03:59:39,420 --> 03:59:41,580
the container includes a lot

1860
03:59:41,580 --> 03:59:42,280
of

1861
03:59:42,280 --> 03:59:44,380
software

1862
03:59:44,380 --> 03:59:47,760
you have commands that install system

1863
03:59:47,760 --> 03:59:49,980
libraries and install things like

1864
03:59:49,980 --> 03:59:51,580
entire

1865
03:59:51,580 --> 03:59:57,180
probably it installs an entire operating system and then it installs entire programming languages

1866
03:59:57,180 --> 04:00:04,380
and interpreters for those languages and so on so that is not derivative work

1867
04:00:05,420 --> 04:00:10,140
when you just have a dependency and you include the instruction to install that dependency

1868
04:00:10,140 --> 04:00:20,220
that's not derivative work right um so similar to using numpy in my python yes exactly just because

1869
04:00:20,220 --> 04:00:28,300
i do import numpy in my python script or import any library in any language script doesn't mean

1870
04:00:28,300 --> 04:00:35,820
i need to care about the numpy license yeah so okay let's go through this so the first one

1871
04:00:35,820 --> 04:00:41,180
download some code from a website and add on to it and i guess we're assuming that we are then

1872
04:00:41,180 --> 04:00:47,500
publishing the code or at least publishing something derived from the code like scientific

1873
04:00:47,500 --> 04:00:55,420
research results. So in that case, this is definitely derivative work. You're just taking

1874
04:00:55,420 --> 04:01:00,640
someone else's code and use it and make some changes to it. We're just using it, not necessarily,

1875
04:01:01,140 --> 04:01:05,460
but making changes to it and publishing those changes is derivative work.

1876
04:01:06,880 --> 04:01:12,720
And download some code and use one of the functions in your code. I mean, I guess this

1877
04:01:12,720 --> 04:01:18,560
depends on how you do it actually so if you copy the function and put it in your code then it's

1878
04:01:18,560 --> 04:01:26,080
definitely derivative work if you call the function and put the name of the library into

1879
04:01:26,080 --> 04:01:35,280
your requirements file or dependencies files um then it's not uh derivative work right

1880
04:01:35,280 --> 04:01:45,220
so that actually depends um well okay let's go on changing code you got from somewhere

1881
04:01:45,220 --> 04:01:52,180
what is this somewhere um yeah i mean just changing the code again not so much but

1882
04:01:52,180 --> 04:01:58,980
publishing the code using it in in research and publishing the research um yeah that is derivative

1883
04:01:58,980 --> 04:02:07,220
work. Extending code you got from somewhere. So I guess this means adding a function to

1884
04:02:07,220 --> 04:02:14,340
the code base. So yeah, I mean this, I would say it's derivative work. I guess you could

1885
04:02:14,900 --> 04:02:20,340
extend it by adding a function and then not publish the rest of it, but then it's a dependency.

1886
04:02:22,100 --> 04:02:27,940
Okay, completely rewriting the code you got from somewhere. So completely rewriting.

1887
04:02:28,980 --> 04:02:34,500
does that mean um so the rest of the examples are kind of well there's some related examples

1888
04:02:40,340 --> 04:02:47,460
so completely rewriting code doesn't necessarily mean that it's free from copyright

1889
04:02:48,500 --> 04:02:54,420
um so like the next one rewriting code to a different programming language so if you

1890
04:02:54,420 --> 04:03:00,020
essentially do it line by line or function by function you reproduce basically the same

1891
04:03:00,020 --> 04:03:11,140
programming and in a different language that is derivative work but then well the clean room

1892
04:03:11,140 --> 04:03:20,420
design age example so someone describes you how the code works and then you write it in a different

1893
04:03:20,420 --> 04:03:26,740
language or even the same language then it is not derivative work because you're just reproducing

1894
04:03:26,740 --> 04:03:33,380
the algorithm then again if they describe it in to you in too much detail like line by line what

1895
04:03:33,380 --> 04:03:39,060
does this line in the code do um you are actually pretty much getting to derivative work again

1896
04:03:39,860 --> 04:03:44,900
okay so that it depends on on what level the rewrite is but if you're just doing the same

1897
04:03:44,900 --> 04:03:50,420
interface but otherwise completely like doing it from scratch yourself is not derivative work

1898
04:03:51,220 --> 04:03:54,820
if you are rewriting it function by function then it is derivative work

1899
04:03:55,860 --> 04:04:00,420
so i skipped over linking to library static or dynamic plugins and drivers

1900
04:04:02,020 --> 04:04:11,700
um so i said that um having a dependency is not derivative work but actually um if you are

1901
04:04:11,700 --> 04:04:18,340
statically linking and then distributing the binary that is derivative work at least to some

1902
04:04:18,340 --> 04:04:26,180
extent like there are licenses that specifically are about being able to link to it as a library

1903
04:04:26,180 --> 04:04:37,220
or not being able to do that so it does count as derivative work um but if it's a dynamic library

1904
04:04:37,220 --> 04:04:44,580
you're linking dynamically then it is not derivative work so yeah i mean it gets

1905
04:04:46,660 --> 04:04:49,700
it does get technical at this point um

1906
04:04:55,780 --> 04:04:59,700
uh okay someone is saying i'm contradicting the solution which is great um

1907
04:04:59,700 --> 04:05:09,020
So, yeah, so you read the paper, understand the algorithm, write your own code.

1908
04:05:09,120 --> 04:05:10,440
So that is not derivative work.

1909
04:05:11,000 --> 04:05:17,760
Yeah, so maybe I was giving a bit too much detail and I should actually look at the solutions just to see.

1910
04:05:17,760 --> 04:05:19,640
So, yeah, derivative work is A through F.

1911
04:05:20,920 --> 04:05:24,060
It's not, is derivative work, so that's pretty clear.

1912
04:05:26,080 --> 04:05:29,140
Except I gave a lot, way too much details.

1913
04:05:29,700 --> 04:05:37,500
about situations where it might not be then g and i are derivative work or not derivative work that

1914
04:05:37,500 --> 04:05:45,800
is so statically linking to a library it is right it is considered derivative work

1915
04:05:45,800 --> 04:05:54,860
sorry in general it's also and someone wrote it here also in the later comment in the notes

1916
04:05:54,860 --> 04:06:04,080
that it's somehow realistic that you get different answers on who you ask yeah yeah um maybe our

1917
04:06:04,080 --> 04:06:11,000
questions or our statements here are also not clear enough to give this clear answer because

1918
04:06:11,000 --> 04:06:18,100
what you explained like in this static versus dynamic libraries and if you uh like share the

1919
04:06:18,100 --> 04:06:24,100
binaries uh or the source code that makes a difference and that's why it's like important to

1920
04:06:24,100 --> 04:06:30,660
like have a little bit of an overview now so that when you are in this situation you at least know

1921
04:06:30,660 --> 04:06:35,280
where to look and know where you can find information about the different licenses what

1922
04:06:35,280 --> 04:06:44,660
they are actually like are talking about but yeah maybe for the future we could look at

1923
04:06:45,380 --> 04:06:52,540
making the statements less ambiguous or then have a little bit more information in the solutions

1924
04:06:52,540 --> 04:07:03,140
yeah or i think this is also um these are more discussion points i guess i think like having

1925
04:07:03,140 --> 04:07:07,620
even having a solution there may not be maybe we should just make the solution more ambiguous

1926
04:07:07,620 --> 04:07:15,140
um maybe it should not be called solution but uh things to note or yeah take home messages

1927
04:07:15,140 --> 04:07:21,420
that's a good point okay well but yeah so we also shouldn't get should not get bogged down

1928
04:07:21,420 --> 04:07:28,740
the details in which case i'm the wrong person to be doing this but um the so the big picture is

1929
04:07:28,740 --> 04:07:36,200
that you should always look for a license and then you should basically do what other people

1930
04:07:36,200 --> 04:07:40,880
do in the same situation which is if you're using a python library you add it in the requirements

1931
04:07:40,880 --> 04:07:46,900
file you don't need to think about the license people don't think about the license if you're

1932
04:07:46,900 --> 04:07:53,260
creating a container and you essentially have the entire Linux operating system in there,

1933
04:07:53,460 --> 04:07:59,620
you still don't need to think about the license and you never see people talking about the Linux

1934
04:07:59,620 --> 04:08:10,160
license in there. But then if you are actually taking code from someone else, even if you are

1935
04:08:10,160 --> 04:08:15,100
rewriting it, you probably should think about the license. Technically, there are situations where

1936
04:08:15,100 --> 04:08:21,260
don't have to but it's still maybe better to just like take the license into account.

1937
04:08:22,700 --> 04:08:26,780
So yeah that is yeah that should probably be the more big picture answer.

1938
04:08:27,900 --> 04:08:33,260
So and on a kind of related note I already actually mentioned all this so

1939
04:08:34,620 --> 04:08:41,020
so now related notes here's a big list of different licenses and it's not really useful

1940
04:08:41,020 --> 04:08:50,460
to know all of the possible licenses that exist but there is a general sort of um grouping of

1941
04:08:50,460 --> 04:08:59,240
licenses starting from the bottom there's public domain licenses which basically say do whatever

1942
04:08:59,240 --> 04:09:04,980
you want with my code and you don't need to even mention where you got it so

1943
04:09:04,980 --> 04:09:11,500
So this is what you include when you just, like, I don't know,

1944
04:09:11,620 --> 04:09:14,300
when you don't care that much, basically, right?

1945
04:09:16,020 --> 04:09:21,060
And then there's licenses with a bit more restrictions.

1946
04:09:21,520 --> 04:09:24,060
So proprietary licenses are their own thing.

1947
04:09:25,500 --> 04:09:27,320
We don't really have examples of them,

1948
04:09:27,400 --> 04:09:29,760
but it essentially means you're not allowed to use it.

1949
04:09:29,760 --> 04:09:33,760
It's a commercial thing, and somebody owns it.

1950
04:09:34,980 --> 04:09:37,800
There might be some conditions where you actually can use it

1951
04:09:37,800 --> 04:09:39,820
and you have to kind of then go and understand

1952
04:09:39,820 --> 04:09:41,320
what it is that they're doing.

1953
04:09:42,120 --> 04:09:44,660
So if you're buying something from someone else, sorry?

1954
04:09:46,100 --> 04:09:47,560
Yeah, or you can buy licenses.

1955
04:09:48,060 --> 04:09:48,820
Yeah, yeah.

1956
04:09:49,200 --> 04:09:51,960
So if you're buying something like a license to MATLAB,

1957
04:09:52,040 --> 04:09:55,460
you are getting a proprietary license to use MATLAB, right?

1958
04:09:58,280 --> 04:10:02,120
But then on the right, you have open source licenses

1959
04:10:02,120 --> 04:10:04,920
and there's the more permissive ones.

1960
04:10:04,980 --> 04:10:13,060
the bottom um it's less conditions but usually they're in the open source section um they do

1961
04:10:13,060 --> 04:10:18,260
have the condition that you should tell people where you got the code or who did the work

1962
04:10:18,900 --> 04:10:25,140
so you should give attribution so kind of like if you know cc by for data um

1963
04:10:26,100 --> 04:10:33,460
it essentially so the buy here means um you need to have a sentence that says this was made by

1964
04:10:33,460 --> 04:10:40,660
this person right essentially citing essentially attribution and then you have we can go all the

1965
04:10:40,660 --> 04:10:47,300
way to strong copy left which means any derivative work has to be also open source it has to be under

1966
04:10:47,300 --> 04:10:52,820
a an equally restrictive license and here because i just because i mentioned libraries there is like

1967
04:10:52,820 --> 04:10:59,940
this library uh we copyleft licenses where you can use the library but you can't so you can use

1968
04:10:59,940 --> 04:11:09,220
the library in like a more permissive way but you um so if you link to it but then um

1969
04:11:10,260 --> 04:11:12,820
it's less permissive about using the code directly

1970
04:11:15,300 --> 04:11:21,860
so you don't need to know all of these but there is this important thing that where the arrows

1971
04:11:21,860 --> 04:11:27,940
are pointing so public domain you can use anywhere this let more permissive ones you can even use in

1972
04:11:27,940 --> 04:11:36,020
proprietary codes, but you need to tell people where you got it from. And then the more you go

1973
04:11:36,020 --> 04:11:44,060
to the copy left side, the more restrictive it is. So you cannot always code down. You cannot

1974
04:11:44,060 --> 04:11:49,800
use a more permissive license if you have included code from a less permissive one.

1975
04:11:51,800 --> 04:11:55,460
Yeah, that's where it's important that you look at the license early on,

1976
04:11:55,460 --> 04:11:59,480
because the license of a code that you are using

1977
04:11:59,480 --> 04:12:01,940
together with your own code

1978
04:12:01,940 --> 04:12:05,540
might define which licenses you can actually use yourself

1979
04:12:05,540 --> 04:12:07,300
for your own code also.

1980
04:12:08,820 --> 04:12:12,760
So one thing I want to mention or show

1981
04:12:12,760 --> 04:12:15,600
is this join up licensing assistant.

1982
04:12:17,780 --> 04:12:22,840
I should not have closed the original page.

1983
04:12:22,840 --> 04:12:23,080
Okay.

1984
04:12:25,460 --> 04:12:28,660
let's choose this one for now so yeah this is a

1985
04:12:30,180 --> 04:12:37,380
a tool created by i think european union funding it's it includes a big list of licenses

1986
04:12:38,100 --> 04:12:44,420
and has a nice description of like you can get quick at the glance see what you can do what you

1987
04:12:44,420 --> 04:12:52,180
must do what you cannot do and what it's compatible with you can search for a specific license if you

1988
04:12:52,180 --> 04:13:01,620
see it so with mit you can you do a lot of things you must include the copyright and tell people

1989
04:13:01,620 --> 04:13:08,740
who made it include license you cannot hold the person liable for writing the code it is

1990
04:13:08,740 --> 04:13:16,980
compatible with almost anything and um well interpretation of law is uh i guess something

1991
04:13:16,980 --> 04:13:23,640
you need to look at if you are interested and then it is supported well so people understand

1992
04:13:23,640 --> 04:13:27,420
what's going on if you use this license and I guess this is an important point by the way

1993
04:13:27,420 --> 04:13:34,980
so you should in general use a license that you didn't write yourself a license that people know

1994
04:13:34,980 --> 04:13:38,620
so that they understand what's going on so if you write your own license

1995
04:13:38,620 --> 04:13:45,720
no matter how clear the legal lease is there's going to be a lawyer somewhere who thinks it's

1996
04:13:45,720 --> 04:13:54,300
too big a risk to use so you should use a license that people already know so MIT is

1997
04:13:54,300 --> 04:14:01,960
well-known licensed as GPL is a well-known license and so on and this well-known license also you

1998
04:14:01,960 --> 04:14:07,740
might have encountered them in github for example it shows it quite nicely then on the top what you

1999
04:14:07,740 --> 04:14:10,500
can do and what you have to do with them. Yeah.

2000
04:14:12,220 --> 04:14:17,160
So this is helpful for choosing a license, especially when you

2001
04:14:17,380 --> 04:14:20,860
already have are using some work that are that is under a

2002
04:14:20,860 --> 04:14:25,500
license. We should soon move to a break.

2003
04:14:27,360 --> 04:14:31,680
I think we can have five minutes more here. Yeah, go to a break.

2004
04:14:31,680 --> 04:14:35,420
And so we already mentioned the licensing assistant.

2005
04:14:37,600 --> 04:14:39,020
But when should I add a license?

2006
04:14:39,400 --> 04:14:43,280
Yeah, I think we already answered this question, but let's answer it again.

2007
04:14:44,000 --> 04:14:49,400
So when do you, when you start a new project and you start working on some code, when do you add a license?

2008
04:14:50,940 --> 04:14:55,400
Well, nowadays, I do it as the very first thing.

2009
04:14:55,400 --> 04:15:04,920
I either if it's myself only I do that as the very first thing or if it's together with others

2010
04:15:04,920 --> 04:15:10,120
to discuss it also very early like what kind of license we want to put that under because then

2011
04:15:10,120 --> 04:15:16,040
you don't have to think back or contact old collaborators that might not be working where

2012
04:15:16,040 --> 04:15:22,920
they did before anymore or like figure out the whole bureaucracy behind it so you can start

2013
04:15:23,480 --> 04:15:32,040
start early on and have the terms clear so yeah one important point is you can add license even

2014
04:15:32,040 --> 04:15:37,480
if the code is private so adding a license doesn't make it public because you haven't put it anywhere

2015
04:15:37,480 --> 04:15:44,200
so necessarily publicly so yeah you can you can even start adding the license when um

2016
04:15:45,640 --> 04:15:52,600
when the code is still like not published anywhere when you're just working privately alone

2017
04:15:52,600 --> 04:16:00,440
or with someone but especially when there's a second person working on it then the ownership

2018
04:16:00,440 --> 04:16:06,540
becomes complicated so if you then want to add a license you need to ask everyone who has

2019
04:16:06,540 --> 04:16:11,660
contributed to the code unless you already have a license and then you the license tells you what

2020
04:16:11,660 --> 04:16:18,940
you can do so at least like add a license before you publish it add a license before a second person

2021
04:16:18,940 --> 04:16:22,880
works in the code. But preferably, I would just add it immediately.

2022
04:16:24,320 --> 04:16:30,440
And related to that, where do you add a license or how? Like, how do you tell people what's

2023
04:16:30,440 --> 04:16:31,300
the license of the code?

2024
04:16:32,060 --> 04:16:38,960
So the suggestion here is good. What I actually do is I add a single file called license.txt.

2025
04:16:40,940 --> 04:16:46,940
But that works as long as you only have one license in the software. If you have a mix

2026
04:16:46,940 --> 04:16:54,640
of licenses, you're using things from multiple different sources, then it is a good idea

2027
04:16:54,640 --> 04:17:02,740
to have a licenses folder in the root of your project directory, so your Git repository.

2028
04:17:04,360 --> 04:17:07,920
And then you add the license files there.

2029
04:17:08,460 --> 04:17:15,200
So it may still be just one file, or it may be a couple of files that apply to different

2030
04:17:15,200 --> 04:17:16,420
parts of the code.

2031
04:17:16,940 --> 04:17:24,180
so especially if you have code and you have data you may need or may want to use different licenses

2032
04:17:24,180 --> 04:17:34,800
for the code and the data for example yep okay i think we should slowly move into the break

2033
04:17:34,800 --> 04:17:44,140
but there is uh if you scroll down a bit a very long list of a lot of great resources on the topic

2034
04:17:44,140 --> 04:17:53,460
So as you noticed, it is a topic where there can be like these different opinions about things, depending on who you ask.

2035
04:17:53,780 --> 04:18:04,540
It can completely change something if you change one word in the sentence, like how that relates to the licenses or if it's derivative work or not.

2036
04:18:05,720 --> 04:18:13,140
So if you're interested in the topic, look through here and maybe you can find something that works for you.

2037
04:18:13,140 --> 04:18:18,800
There's also multiple tools like the JoinUp Licensing Assistant.

2038
04:18:19,980 --> 04:18:24,060
But yeah, for the key point, [name], what should people take from this lesson?

2039
04:18:25,480 --> 04:18:28,680
Well, you should have a license for your software.

2040
04:18:30,520 --> 04:18:33,560
I think a license late can get complicated.

2041
04:18:34,040 --> 04:18:35,800
It's good to have it as early as possible.

2042
04:18:35,800 --> 04:18:38,620
if you're unsure

2043
04:18:38,620 --> 04:18:40,100
I would say

2044
04:18:40,100 --> 04:18:42,220
do what other people do

2045
04:18:42,220 --> 04:18:43,380
ask your colleagues

2046
04:18:43,380 --> 04:18:46,940
what license should you use

2047
04:18:46,940 --> 04:18:48,240
and

2048
04:18:48,240 --> 04:18:50,920
if you actually have to make the decision

2049
04:18:50,920 --> 04:18:52,980
then look at the license selector

2050
04:18:52,980 --> 04:18:55,000
and decide

2051
04:18:55,000 --> 04:18:56,320
what you think is good

2052
04:18:56,320 --> 04:18:58,740
but yeah in general

2053
04:18:58,740 --> 04:19:01,240
having any of these licenses is good

2054
04:19:01,240 --> 04:19:02,940
yeah remember

2055
04:19:02,940 --> 04:19:04,960
that if you don't have a license even if you

2056
04:19:04,960 --> 04:19:13,140
put your code out there the default is that no one can like make copies or build onto it which is

2057
04:19:13,140 --> 04:19:20,760
what science is about so it's good to keep that in mind and also you might actually have an employer

2058
04:19:20,760 --> 04:19:25,500
who tells you which license to use for your code so you don't actually have to worry about it because

2059
04:19:25,500 --> 04:19:32,200
your employer might either in the contract or in some other papers tell you if you do code always

2060
04:19:32,200 --> 04:19:40,280
use this license so also check that out and now let's go into oh sorry oh well i'm just your

2061
04:19:40,280 --> 04:19:48,120
employer is also an owner of the code so you always have two owners actually and um you may

2062
04:19:48,120 --> 04:19:54,620
have to ask them if uh things go on for too long without a license so it's better yeah just to put

2063
04:19:54,620 --> 04:20:01,020
it as have a license as early as possible and have that conversation early yeah yeah okay the

2064
04:20:01,020 --> 04:20:08,720
conversation with everybody who's involved 10 minutes break until 11 past the hour and then

2065
04:20:08,720 --> 04:20:15,500
we'll get back with software citation and a little bit about sharing data and then the feedback for

2066
04:20:15,500 --> 04:20:20,200
today see you in 10 minutes bye see you bye

2067
04:20:31,020 --> 04:20:31,640
you

2068
04:21:01,020 --> 04:21:01,640
you

2069
04:21:31,020 --> 04:21:31,640
you

2070
04:22:01,020 --> 04:22:01,640
you

2071
04:22:31,020 --> 04:22:31,640
you

2072
04:23:01,020 --> 04:23:01,640
you

2073
04:23:31,020 --> 04:23:31,640
you

2074
04:24:01,020 --> 04:24:01,640
you

2075
04:24:31,020 --> 04:24:31,640
you

2076
04:25:01,020 --> 04:25:01,640
you

2077
04:25:31,020 --> 04:25:31,640
you

2078
04:26:01,020 --> 04:26:01,640
you

2079
04:26:31,020 --> 04:26:31,640
you

2080
04:27:01,020 --> 04:27:01,640
you

2081
04:27:31,020 --> 04:27:31,640
you

2082
04:28:01,020 --> 04:28:01,640
you

2083
04:28:31,020 --> 04:28:31,640
you

2084
04:29:01,020 --> 04:29:01,640
you

2085
04:29:31,020 --> 04:29:31,640
you

2086
04:30:01,020 --> 04:30:01,640
you

2087
04:30:31,020 --> 04:30:31,640
you

2088
04:31:01,020 --> 04:31:21,260
Okay we are back from the break and we have some 20 minutes left for today and with this we will

2089
04:31:21,260 --> 04:31:25,140
go a little bit into software citation and sharing data.

2090
04:31:25,140 --> 04:31:31,040
So, [name], could you switch the screen share to the software citation?

2091
04:31:31,780 --> 04:31:37,480
Yes. So this is the front page and we are at the software citation section.

2092
04:31:38,420 --> 04:31:44,300
Exactly. So as you can see here on this big picture, we are also looking at the FAIR principles.

2093
04:31:44,300 --> 04:31:46,680
And maybe you have heard about them already.

2094
04:31:47,820 --> 04:31:52,380
FAIR stands here for Findable, Accessible, Interoperable and Reusable.

2095
04:31:52,380 --> 04:32:00,860
And it comes across, or researchers may stumble across it a lot when talking about data.

2096
04:32:01,200 --> 04:32:04,060
But it also actually applies to software.

2097
04:32:05,440 --> 04:32:15,240
And here in the beginning, we have the question, is putting software on GitHub or GitLab actually publishing?

2098
04:32:15,560 --> 04:32:20,900
Does it actually help with making the code findable and accessible?

2099
04:32:20,900 --> 04:32:27,400
and we have mentioned it's a very good step to do that it's a very good step to

2100
04:32:27,400 --> 04:32:35,980
publish your code on github to have everyone be able to find it but what happens if github is not

2101
04:32:35,980 --> 04:32:42,480
around anymore in the future or what happens if someone decides to delete your code from there

2102
04:32:42,480 --> 04:32:50,640
then there is no trace of it there's nothing that you can link to and therefore it's also

2103
04:32:50,640 --> 04:32:57,440
important to not only put it on github but once you're done or in one of the states of done with

2104
04:32:57,440 --> 04:33:05,520
your code for example when you publish a paper that relates to the code also publish publish

2105
04:33:05,520 --> 04:33:11,140
the code and make it citable and persistent and that means for example getting a persistent

2106
04:33:11,140 --> 04:33:19,260
identifier such a doi which you might also know from manuscripts for your code and services like

2107
04:33:19,260 --> 04:33:26,340
Zenodo can give you that and there's also multiple like national services that might provide you

2108
04:33:26,340 --> 04:33:33,840
with a DOI for your code and then we're also if you scroll down a little bit we're also talking

2109
04:33:33,840 --> 04:33:41,380
about making your software citable so we already talked about that software is on a bit different

2110
04:33:41,380 --> 04:33:48,800
level than papers for the academic merit but if you want people to cite it you also need to make

2111
04:33:48,800 --> 04:33:57,000
it possible for them to cite it and one way of doing this is adding a so-called citation cff

2112
04:33:57,000 --> 04:34:07,960
file which we can see here an example of nowadays even github supports this so if you add a citation

2113
04:34:07,960 --> 04:34:14,460
cff file to your github repository it may already suggest like what kind of data should be in there

2114
04:34:14,460 --> 04:34:23,300
and it also if a code has a citation cff file you can download for example the bib text citation

2115
04:34:23,300 --> 04:34:33,040
for for that code and there's also a little bit further up sorry we're jumping around a little bit

2116
04:34:33,040 --> 04:34:39,400
there yeah the checklist for making a release of your software citable and release here meaning

2117
04:34:39,400 --> 04:34:48,860
we are in a state that this is now a done thing for now it does not have to be like everything

2118
04:34:48,860 --> 04:34:55,140
done but it is something that you have used to create your research outputs for example

2119
04:34:55,140 --> 04:35:03,020
it is in a state yeah so this is something like version 1.0 version 1.1 and so on or 0.1 or

2120
04:35:03,020 --> 04:35:08,880
and so on exactly when you feel comfortable it does some it does what you want it to do

2121
04:35:08,880 --> 04:35:12,900
in a certain way and there might be still open issues there might be still

2122
04:35:12,900 --> 04:35:19,660
things you want to fix but it's still it's already usable so what you can check is

2123
04:35:19,660 --> 04:35:23,120
we talked about license so how do you have a license assigned

2124
04:35:23,120 --> 04:35:34,800
um do you have some metadata for your software for example in a readme or in the citation file

2125
04:35:34,800 --> 04:35:42,280
format for example um do you have a clear version number like you can start with 0.1 you can start

2126
04:35:42,280 --> 04:35:49,260
with 1.0 um depends on what you want to say with that and it might say also there are different

2127
04:35:49,260 --> 04:35:56,740
things to different people? Are all the authors credited? Do you have all the contributors

2128
04:35:56,740 --> 04:36:04,700
mentioned somewhere? Did you get a persistent identifier from tools like from services like

2129
04:36:04,700 --> 04:36:11,540
Zenodo? And then also the last thing, add a recommended citation. So in this case, you also

2130
04:36:11,540 --> 04:36:17,820
then have a little bit of this influence on how other people may cite your software so that they

2131
04:36:17,820 --> 04:36:22,820
don't have to worry, oh, I found this nice code here, they have a

2132
04:36:22,820 --> 04:36:27,380
paper about it, they have the citation for, I don't know, the

2133
04:36:27,380 --> 04:36:31,380
data set they're used. But if you actually want people to cite

2134
04:36:31,380 --> 04:36:35,800
your software, then it's good to give them the information that

2135
04:36:35,800 --> 04:36:44,040
they need to do that properly. And in the very bottom of this

2136
04:36:44,040 --> 04:36:52,640
document there is also the information that if you cite other people what kind of

2137
04:36:52,640 --> 04:37:00,700
information is good to cite and there is some resources also in the blue box have you cited

2138
04:37:00,700 --> 04:37:09,600
any software yeah no in papers yeah um i mean again it's a part of the job so

2139
04:37:09,600 --> 04:37:18,480
um if i'm participating in writing a paper and then it's probably related to some software that

2140
04:37:18,480 --> 04:37:30,000
i wrote but um in general also before that we would cite software but there was no specific

2141
04:37:30,000 --> 04:37:37,960
standard and i don't think it was really counted anywhere or like it was basically a link for

2142
04:37:37,960 --> 04:37:42,340
people to find the software if it was online at that point. But

2143
04:37:43,240 --> 04:37:46,360
so yeah, this is like, this is a pretty high standard, but it is

2144
04:37:46,360 --> 04:37:52,420
also good. Good to have this sort of checklist and like, a

2145
04:37:52,420 --> 04:37:54,680
recommended right way of doing it so that

2146
04:37:55,960 --> 04:38:00,300
yeah, people for us. Yeah, and for us as authors, it's fairly

2147
04:38:00,300 --> 04:38:04,180
straightforward to write this file. If someone else would need

2148
04:38:04,180 --> 04:38:08,420
to find and pick already, I don't know, sometimes the

2149
04:38:08,420 --> 04:38:12,740
author's name might be hard to find. So like, the easier you

2150
04:38:12,740 --> 04:38:15,560
make it for people, the more likely it is that they actually

2151
04:38:15,580 --> 04:38:24,760
cite your site, your software. And yeah, I think like linking,

2152
04:38:24,940 --> 04:38:28,700
like you mentioned, having having a link to the web page of

2153
04:38:28,700 --> 04:38:34,000
a tool or something is already a good first step. But yeah, the

2154
04:38:34,000 --> 04:38:38,140
more you can put there also in citing other people's work, the

2155
04:38:38,200 --> 04:38:44,340
better, the easier it is to for those to find the right version

2156
04:38:44,340 --> 04:38:52,720
that you also used. For example. Okay, then, let's move on to

2157
04:38:52,720 --> 04:39:00,680
sharing data. And we mentioned already in the beginning that we

2158
04:39:00,680 --> 04:39:10,680
not go too deep into this right now this is more of a collection for you of places where you can

2159
04:39:10,680 --> 04:39:20,840
share data and some of them also integrate for example with github and are also used for sharing

2160
04:39:20,840 --> 04:39:30,120
code so you can go through the list and see what either fits you sometimes you may want to keep it

2161
04:39:30,120 --> 04:39:36,280
in the country that you are working in. Sometimes you may want to choose a more international forum

2162
04:39:36,840 --> 04:39:47,080
or sometimes there's also a domain specific forum where the likelihood of someone randomly finding

2163
04:39:47,080 --> 04:39:53,560
your data is higher because people that go there already are looking for something in your domain.

2164
04:39:54,360 --> 04:40:02,040
so this is really something where you can then decide um where you want to where you want to

2165
04:40:02,040 --> 04:40:08,920
publish it and a really good resource here is what's linked in the very top this re3 data

2166
04:40:10,440 --> 04:40:19,320
so there you can find a ginormous list of of all kinds of forums so we've just picked a few here

2167
04:40:19,320 --> 04:40:22,100
and put a few also national ones.

2168
04:40:22,100 --> 04:40:26,100
And if we have people here who know about some forums,

2169
04:40:26,820 --> 04:40:32,860
for example, in, what do we don't have, Germany or other places,

2170
04:40:33,100 --> 04:40:35,260
then please let us know so that we can add them here.

2171
04:40:36,700 --> 04:40:39,320
Where do you usually publish your data, Jonna?

2172
04:40:40,700 --> 04:40:42,480
In Zenodo, basically.

2173
04:40:42,680 --> 04:40:44,420
That's essentially the first option.

2174
04:40:45,280 --> 04:40:47,900
Of course, it does have a size limit.

2175
04:40:47,900 --> 04:40:53,980
So if you are in a domain where the amount of data is large, that doesn't work.

2176
04:40:54,660 --> 04:40:59,920
But then, yeah, I guess the more domain-specific,

2177
04:41:00,200 --> 04:41:04,280
so it is kind of the same as in publishing papers.

2178
04:41:04,620 --> 04:41:08,460
The more general use it is, the more public you want to make it,

2179
04:41:09,540 --> 04:41:14,520
and the more specialized it is to a field,

2180
04:41:14,520 --> 04:41:21,140
the more you want to find a specific place for that field.

2181
04:41:22,280 --> 04:41:22,400
Yeah.

2182
04:41:23,500 --> 04:41:29,400
And also here, it's important that you have a license attached to your data

2183
04:41:29,400 --> 04:41:33,480
so that everyone knows under what terms they can reuse your data.

2184
04:41:33,680 --> 04:41:35,900
There's also specific licenses for databases.

2185
04:41:37,780 --> 04:41:41,960
And then there's also some information

2186
04:41:41,960 --> 04:41:50,700
in the more towards the bottom of this page about licensing and ai and there might be coming an

2187
04:41:50,700 --> 04:41:58,940
update to this page um very soon so keep an eye on it and then also in the further reading list

2188
04:41:58,940 --> 04:42:07,040
we put again we mentioned it many times already the touring way oh yeah yeah but i'm at this

2189
04:42:07,040 --> 04:42:14,600
program okay sorry so the touring way uh there is a lot of resources there about everything that

2190
04:42:14,600 --> 04:42:24,000
we talked about today in both lessons and then also multiple papers and guidelines for fair

2191
04:42:24,000 --> 04:42:30,740
software and data as well as well as for example a software quality checklist

2192
04:42:30,740 --> 04:42:42,240
list. And with that, I think we can take a look at the notes. I didn't see now any questions.

2193
04:42:42,240 --> 04:42:47,300
No, no questions. So there is the feedback section then.

2194
04:42:47,300 --> 04:42:54,540
Exactly. We leave some time now for you to provide feedback about today, both sessions

2195
04:42:54,540 --> 04:42:58,320
or whichever session you attended?

2196
04:42:58,320 --> 04:43:03,380
Was it too fast, too slow, too advanced, too basic?

2197
04:43:03,380 --> 04:43:07,360
Do you think you will use what you learned today?

2198
04:43:07,360 --> 04:43:09,480
Were there things that you really liked?

2199
04:43:09,480 --> 04:43:12,480
Were there things that we should definitely

2200
04:43:12,480 --> 04:43:15,060
work on a little bit more before we do

2201
04:43:15,060 --> 04:43:17,700
the next iteration of this workshop?

2202
04:43:17,700 --> 04:43:20,300
And if you have any other feedback,

2203
04:43:20,300 --> 04:43:22,940
we are very happy to hear about this,

2204
04:43:22,940 --> 04:43:24,900
because we will continue these workshops

2205
04:43:24,900 --> 04:43:28,380
and we always thrive to improve

2206
04:43:28,380 --> 04:43:31,900
or try to improve based on your feedback.

2207
04:43:31,900 --> 04:43:35,940
So this is very important for us.

2208
04:43:35,940 --> 04:43:39,040
And you can also continue asking questions

2209
04:43:40,800 --> 04:43:45,080
in the very bottom with that.

2210
04:43:45,080 --> 04:43:47,340
So, yeah.

2211
04:43:47,340 --> 04:43:49,680
Yeah, I don't have anything more to bring up.

2212
04:43:49,680 --> 04:43:52,800
Anything else or...

2213
04:43:52,940 --> 04:43:56,960
I'll just keep an eye on any more questions for a few minutes.

2214
04:43:57,860 --> 04:44:03,760
Yeah, and now I was so worried about not having the time for the feedback

2215
04:44:03,760 --> 04:44:08,660
that we are now done five minutes earlier, but I guess that is okay.

2216
04:44:08,660 --> 04:44:11,960
Sorry for running through the software citation part,

2217
04:44:11,960 --> 04:44:20,240
but also that is something like check out this citation CFF file, for example,

2218
04:44:20,240 --> 04:44:24,500
and see how it's how it can be used especially within github and

2219
04:44:24,500 --> 04:44:43,780
when i guess you were also a researcher before you became a research software engineer

2220
04:44:43,780 --> 04:44:51,800
Were the topics of today, were they something that you have thought about in your daily life?

2221
04:44:53,340 --> 04:44:54,280
You mean as a researcher?

2222
04:44:55,020 --> 04:44:56,020
Yeah, as a researcher.

2223
04:44:57,640 --> 04:45:01,320
So they did come up for kind of standard reasons.

2224
04:45:01,320 --> 04:45:03,700
I mean, it was a while ago.

2225
04:45:04,600 --> 04:45:08,960
And like I mentioned, sharing the code was not normal when I started.

2226
04:45:08,960 --> 04:45:14,200
so there was this standard argument that if you share your code then the other people will use it

2227
04:45:14,200 --> 04:45:23,160
to reduce the results before you get there which is because i was also in a field that well i mean

2228
04:45:23,160 --> 04:45:31,160
i was doing high performance computing on really big clusters so it was like after the fact that

2229
04:45:31,160 --> 04:45:36,560
now that i think about it it seems like a weird argument because there were like three people in

2230
04:45:36,560 --> 04:45:41,220
the world who had the resources to do to um to run that experiment and they had other things to do

2231
04:45:41,220 --> 04:45:46,160
so it wasn't really a great argument but but you know that that was the world then

2232
04:45:46,160 --> 04:45:55,840
um so there were situations where either the code changed or just like the machine changed and it

2233
04:45:55,840 --> 04:46:02,380
didn't reproduce exactly the same result as before and due to the nature of of statistics works

2234
04:46:02,380 --> 04:46:12,480
sometimes um you wouldn't get quite the same headline results right so um like i was thinking

2235
04:46:12,480 --> 04:46:20,000
about this a few times and in the end we did start publishing the code but at that point i had

2236
04:46:20,000 --> 04:46:27,420
already essentially left um left the field and became a research software engineer so like i

2237
04:46:27,420 --> 04:46:35,500
happy to see people publish the codes that I had worked on, but it never happened while I was working on them.

2238
04:46:41,020 --> 04:46:48,700
I don't think software citations ever came up. We did cite software in the sense of

2239
04:46:48,700 --> 04:46:55,900
giving a link in the citation section of the paper, but it wasn't for credit, it was for convenience.

2240
04:46:57,420 --> 04:47:04,220
And so, yeah, I mean, things have changed quite a bit since then,

2241
04:47:04,300 --> 04:47:06,460
or at least I have the impression that they have.

2242
04:47:07,720 --> 04:47:10,420
Although it's been, what has it been, like eight years

2243
04:47:10,420 --> 04:47:11,980
since I was a proper researcher?

2244
04:47:15,780 --> 04:47:20,520
I say proper researcher because I have had a researcher title since then,

2245
04:47:20,600 --> 04:47:24,400
but I wasn't actually a researcher.

2246
04:47:24,400 --> 04:47:27,920
I was actually, I guess, a software engineer for the research team.

2247
04:47:30,320 --> 04:47:30,800
But yeah.

2248
04:47:39,120 --> 04:47:46,160
So, I mean, yeah, these would have prevented several issues.

2249
04:47:46,160 --> 04:47:55,060
and i have like i i think a few even few disagreements between research teams

2250
04:47:55,060 --> 04:48:00,600
would have been solved if they had published their codes like we would have known why the

2251
04:48:00,600 --> 04:48:07,480
results are different um because it seems like they were just doing different things

2252
04:48:07,480 --> 04:48:12,980
and thinking they were doing the same things so yeah stuff like that it was not just reproducibility

2253
04:48:12,980 --> 04:48:20,580
but just actually like interpretability of the results can depend on actually publishing the code.

2254
04:48:23,220 --> 04:48:25,220
I don't know, can you scroll down the notes?

2255
04:48:25,940 --> 04:48:26,440
Yes.

2256
04:48:27,380 --> 04:48:32,100
So we have people filling in there. Thank you very much. Please keep it coming.

2257
04:48:34,100 --> 04:48:39,060
Seems overall, we had the right speed a little bit too fast, maybe

2258
04:48:39,060 --> 04:48:50,600
be right level. People will use what they learned today. Licensing discussion. Oh, glad

2259
04:48:50,600 --> 04:48:57,860
that you also got something out from the snake make episode. Yeah, please also check all

2260
04:48:57,860 --> 04:49:03,660
the exercises that we have there. We try to put always the solutions there so that you

2261
04:49:03,660 --> 04:49:06,440
can run through them by yourself.

2262
04:49:06,440 --> 04:49:09,220
And then we have to bring your own code sessions

2263
04:49:09,220 --> 04:49:14,460
for asking more questions about these things.

2264
04:49:14,460 --> 04:49:18,600
And sorry to hear that sometimes the audio did not

2265
04:49:18,600 --> 04:49:19,960
go through very well.

2266
04:49:23,960 --> 04:49:28,720
And the Python, yes.

2267
04:49:28,720 --> 04:49:32,720
It's been difficult to follow as a non-Python user.

2268
04:49:32,720 --> 04:49:35,080
That's something also we're still trying to figure out.

2269
04:49:35,080 --> 04:49:46,200
I think it has gotten better over the years by adding, at least for self-learning, the different tabs of the different languages.

2270
04:49:46,460 --> 04:49:49,500
And you will see more of them also during the next days.

2271
04:49:49,840 --> 04:49:57,080
But Python is still our go-to example language for many things.

2272
04:49:57,080 --> 04:50:01,900
but it's understandable that now

2273
04:50:01,900 --> 04:50:05,480
that we are only demoing the examples

2274
04:50:05,480 --> 04:50:08,660
and that as a non-Python user,

2275
04:50:08,840 --> 04:50:10,960
it might take a bit longer to get behind

2276
04:50:10,960 --> 04:50:12,700
what's actually happening.

2277
04:50:14,000 --> 04:50:15,140
Sorry for that.

2278
04:50:16,860 --> 04:50:18,400
But yeah, we're over the time already.

2279
04:50:18,900 --> 04:50:20,840
So maybe we wrap up here.

2280
04:50:21,140 --> 04:50:23,820
We'll still leave the notes open

2281
04:50:23,820 --> 04:50:26,280
for you to add more feedback.

2282
04:50:27,080 --> 04:50:31,480
I'll say thank you, [name], for teaching today.

2283
04:50:32,720 --> 04:50:37,120
And we'll see everyone else tomorrow again.

2284
04:50:37,880 --> 04:50:38,720
What comes up tomorrow?

2285
04:50:38,920 --> 04:50:42,460
It is Jupiter and documentation lesson.

2286
04:50:43,680 --> 04:50:45,760
And I think you are part of the teaching.

2287
04:50:46,640 --> 04:50:47,980
Yeah, I will be there.

2288
04:50:48,180 --> 04:50:48,500
Tomorrow as well.

2289
04:50:49,320 --> 04:50:49,600
Yes.

2290
04:50:50,040 --> 04:50:50,360
Okay.

2291
04:50:50,860 --> 04:50:52,640
So bye from me for now.

2292
04:50:52,640 --> 04:50:55,120
I think I'll be back on Thursday afternoon.

2293
04:50:56,080 --> 04:50:56,960
[name] will be back.

2294
04:50:57,080 --> 04:51:02,920
tomorrow yeah thanks uh everyone and yeah see you tomorrow bye thank you bye

2295
04:51:27,080 --> 04:51:27,700
you

2296
04:51:57,080 --> 04:51:57,700
you

2297
04:52:27,080 --> 04:52:27,700
you

2298
04:52:57,080 --> 04:52:57,700
you

2299
04:53:27,080 --> 04:53:27,700
you

2300
04:53:57,080 --> 04:53:57,700
you

2301
04:54:27,080 --> 04:54:27,700
you

2302
04:54:57,080 --> 04:54:57,700
you

2303
04:55:27,080 --> 04:55:27,700
you

2304
04:55:57,080 --> 04:55:59,080
You

