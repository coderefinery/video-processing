1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:32,060
you

13
00:06:00,000 --> 00:06:09,000
Hello, can people hear us out there?

14
00:06:09,000 --> 00:06:16,680
Hello, hello, good morning, everybody.

15
00:06:16,680 --> 00:06:24,320
And as usual, if you've registered, you have this notes document.

16
00:06:24,320 --> 00:06:28,760
And there's still feedback from yesterday there, if you want to read.

17
00:06:28,760 --> 00:06:31,260
Towards the bottom, we have day three icebreakers.

18
00:06:34,760 --> 00:06:35,260
Yeah.

19
00:06:36,360 --> 00:06:37,560
Hello, everyone.

20
00:06:40,460 --> 00:06:43,460
I'm here with my co-instructors who you probably know.

21
00:06:44,960 --> 00:06:47,060
Are you all ready for day three?

22
00:06:48,860 --> 00:06:54,460
Yeah, I'm at least like I feel like it's been like an eternity

23
00:06:54,460 --> 00:06:54,860
already.

24
00:06:54,860 --> 00:06:56,960
Like there's so much stuff coming up.

25
00:06:56,960 --> 00:07:04,080
I guess that somebody said yesterday in the notes that it would be fun to have it as a whole week

26
00:07:04,800 --> 00:07:09,520
course or it could be a whole week course and I agree it could be because the ecosystem is so large

27
00:07:09,520 --> 00:07:19,440
but I think our mental health wouldn't improve from that. It's a lot of work for everybody

28
00:07:19,440 --> 00:07:24,960
especially for [name] and [name] who have done a lot of the work on the background.

29
00:07:24,960 --> 00:07:30,720
I'd argue that the broadcasting side is actually one of the easiest sides by now. It just takes

30
00:07:30,720 --> 00:07:37,920
time, but it's not that hard. Yeah, and in this case also the background work was [name] and

31
00:07:37,920 --> 00:07:43,200
[name]. I did very little here, but I agree that it is a lot of work. It's much more than it looks like,

32
00:07:43,840 --> 00:07:50,160
because there are so many people involved, and it's not easy to make things go smoothly.

33
00:07:50,160 --> 00:08:06,120
But yeah, as stressed as you might be for this course, we're more stressed, I promise.

34
00:08:06,120 --> 00:08:11,320
And do give us feedback, like yesterday's feedback was really great, and the day before

35
00:08:11,320 --> 00:08:16,520
as well, because it really helps us hone in on what do we want to teach, because we really

36
00:08:16,520 --> 00:08:23,400
want to make this as approachable to everybody as possible and get people invested or interested

37
00:08:23,400 --> 00:08:31,800
and get everybody motivated about the ecosystem and the tools and the things so that they can

38
00:08:32,440 --> 00:08:38,840
do their best work and the feedback really helps us hone in on what do we want to do

39
00:08:38,840 --> 00:08:42,560
and for next iterations and so forth.

40
00:08:42,560 --> 00:08:51,000
We are, for example, we were discussing yesterday after a couple of operating system specific

41
00:08:51,000 --> 00:08:57,760
problems that we have seen, how we can improve on that, how we can make at least parts or

42
00:08:57,760 --> 00:09:06,080
everything more adapted to the individual operating systems, maybe change some approaches

43
00:09:06,080 --> 00:09:15,680
that we are currently using, but that's not coming this year, that's coming in the next

44
00:09:15,680 --> 00:09:17,560
iterations of the course.

45
00:09:17,560 --> 00:09:23,680
I really loved the question about what are your ideal winter holidays.

46
00:09:23,680 --> 00:09:27,880
That was cool.

47
00:09:27,880 --> 00:09:33,640
The ideal winter holidays, enough snow.

48
00:09:33,640 --> 00:09:42,640
Yeah. Of all of us, let's hope [name]'s not the only one that gets enough snow.

49
00:09:42,640 --> 00:09:43,640
Yeah.

50
00:09:43,640 --> 00:09:48,840
But okay, so for the people here, what's the most surprising thing you learned so far

51
00:09:48,840 --> 00:09:56,280
in this course? And for me, maybe it's the Vega Altair from yesterday. So not that there's

52
00:09:56,280 --> 00:10:01,720
There's something better than matplotlib because, like, I knew there had to be.

53
00:10:01,720 --> 00:10:05,880
Just because of... it's matplotlib.

54
00:10:05,880 --> 00:10:08,840
It's old and all that.

55
00:10:08,840 --> 00:10:14,800
But this way that you could connect the channels to the visual... or the columns to the visual

56
00:10:14,800 --> 00:10:20,080
channels seemed like such an elegant way of doing things.

57
00:10:20,080 --> 00:10:22,400
I'm still thinking about that.

58
00:10:22,400 --> 00:10:27,400
[name], what about you?

59
00:10:27,400 --> 00:10:38,400
It probably shouldn't have surprised me, but again, it always somewhat surprises me when all of the installation stuff is so complicated.

60
00:10:38,400 --> 00:10:44,400
It's not because of anybody who's doing the installations, it's because of the ecosystem.

61
00:10:44,400 --> 00:10:52,700
If you remember the XKCD yesterday when we talked about the data formats where somebody

62
00:10:52,700 --> 00:11:00,760
creates a new one, with the installers and everything, it's still very much like that.

63
00:11:00,760 --> 00:11:06,760
There's new stuff coming all the time and it's still very complicated.

64
00:11:06,760 --> 00:11:16,040
us it's very like we have gotten used to often in the cases to the ways that we have done stuff for

65
00:11:16,040 --> 00:11:22,360
years and then there's still so many different experiences but by different people and different

66
00:11:22,360 --> 00:11:30,920
kinds of like workflows so it's sometimes yeah like surprising when you remember that okay like

67
00:11:30,920 --> 00:11:39,400
why is this so complicated sometimes? And of course, it at least lets me into usually this

68
00:11:39,400 --> 00:11:43,800
rabbit hole of Googling, like there has to be a better way. And we'll talk about that,

69
00:11:44,520 --> 00:11:52,520
this kind of like approach a lot today, like how do we find better ways when it comes to

70
00:11:52,520 --> 00:11:59,080
these problems. But I think Altair was also, for me, a great lesson.

71
00:12:02,360 --> 00:12:09,080
Okay. I would say it's most interesting or surprising, but I noticed again how

72
00:12:11,640 --> 00:12:20,280
kind of actually bad we are in trying to figure out what the problem is when we probably should

73
00:12:20,280 --> 00:12:27,840
should be asking more questions because there was a couple of the issues with some setups

74
00:12:27,840 --> 00:12:36,080
not working properly is probably because of the software as such and interactions in between,

75
00:12:36,080 --> 00:12:43,960
for example, in that case, Windows Subsystem for Linux and Scalene, where there are existing

76
00:12:43,960 --> 00:12:51,960
issues noted and we try to throw commands at people and help them. So here's this, here's

77
00:12:51,960 --> 00:12:58,120
that, try this, try that. While it's probably just not solvable at the moment because there

78
00:12:58,120 --> 00:13:09,360
is a kind of bug in the underlying system. And yeah, probably we need to get better at

79
00:13:09,360 --> 00:13:14,200
and finding out what kind of issues we will expect

80
00:13:14,200 --> 00:13:16,360
or we will have to expect.

81
00:13:16,360 --> 00:13:17,600
Because, yeah.

82
00:13:20,120 --> 00:13:21,760
Yeah.

83
00:13:21,760 --> 00:13:22,760
Okay.

84
00:13:22,760 --> 00:13:24,320
[name], did you already answer?

85
00:13:25,320 --> 00:13:26,200
Not yet.

86
00:13:26,200 --> 00:13:27,460
So yeah, what did I learn?

87
00:13:29,080 --> 00:13:30,320
What was the surprising thing?

88
00:13:30,320 --> 00:13:33,240
So I think every time preparing the workshop,

89
00:13:33,240 --> 00:13:34,080
I learn a lot.

90
00:13:34,080 --> 00:13:37,280
I think the best way to learn is to teach

91
00:13:37,280 --> 00:13:41,280
or to promise that you will teach amazing learning

92
00:13:41,280 --> 00:13:44,800
because you, so I learned a lot in the last few days

93
00:13:44,800 --> 00:13:46,420
before like preparing material.

94
00:13:47,440 --> 00:13:49,020
Yesterday, we also, after the workshop,

95
00:13:49,020 --> 00:13:52,160
we had an interesting discussion about these like tooling,

96
00:13:53,940 --> 00:13:57,240
these, how did we call it?

97
00:13:59,340 --> 00:14:01,640
We called it productivity tools

98
00:14:01,640 --> 00:14:06,300
because yesterday I showed a couple of productivity tools

99
00:14:06,300 --> 00:14:07,140
in the command line.

100
00:14:07,140 --> 00:14:08,260
And then we had a discussion later

101
00:14:08,260 --> 00:14:10,620
that actually nobody uses the command line.

102
00:14:10,620 --> 00:14:13,700
Well, I do, but that people like to use it

103
00:14:13,700 --> 00:14:14,820
inside the editor.

104
00:14:14,820 --> 00:14:18,740
So then I spent some time improving my editor

105
00:14:18,740 --> 00:14:21,380
so that I can use these productivity tools

106
00:14:21,380 --> 00:14:23,140
directly out of the editor,

107
00:14:23,140 --> 00:14:27,500
like language server, formatting, these kinds of things.

108
00:14:27,500 --> 00:14:29,900
And I was surprised how nice, how easy that is

109
00:14:29,900 --> 00:14:34,900
and what all the amazing things you can do in your editor,

110
00:14:34,900 --> 00:14:39,700
whatever the editor that is. In my case it's Vim, but it's it's possible to do in

111
00:14:39,700 --> 00:14:45,220
any editor. So that was good improvement for me.

112
00:14:45,980 --> 00:14:57,060
Yeah, okay, well it's the 10 o'clock in Helsinki now. Should we begin?

113
00:14:57,060 --> 00:15:02,300
Maybe if we can give the outline of the day. So first we quickly talk

114
00:15:02,300 --> 00:15:07,580
about library ecosystem. And the point here isn't to talk about specific

115
00:15:07,580 --> 00:15:14,220
libraries, although we might, but sort of a general discussion on when to reuse

116
00:15:14,220 --> 00:15:19,220
things that other people have. We've had fascinating conversations in the

117
00:15:19,220 --> 00:15:25,100
pre-stream instructor room thinking, what do we even want to say here? So let's

118
00:15:25,100 --> 00:15:30,220
see what comes up there. Then dependency management. So this is where we talk

119
00:15:30,220 --> 00:15:36,380
about what conda is and what this Python for sqcomp environment is, how you would use it yourself,

120
00:15:36,380 --> 00:15:43,660
why you would use it, and so on. Then before and after lunch we talk about parallel programming

121
00:15:43,660 --> 00:15:50,620
some. We see how you actually can do it in Python if you adapt the problem the right way.

122
00:15:51,500 --> 00:15:59,340
And then we end with packaging, which is basically if you have some code and want it to be reused,

123
00:15:59,340 --> 00:16:05,180
how it's actually not that hard to make it where it can be pip installed by someone else,

124
00:16:07,180 --> 00:16:11,020
and how it can be used even locally. So with that being said,

125
00:16:13,260 --> 00:16:20,140
library ecosystem is a panel discussion, so should we all stay on here? And should I change to whose

126
00:16:21,100 --> 00:16:28,860
screen? If you change to mine, but I will at least initially stay on the notes so that

127
00:16:29,340 --> 00:16:33,980
we can directly interact with the audience when they have questions.

128
00:16:37,180 --> 00:16:38,220
Okay, it's there.

129
00:16:41,900 --> 00:16:50,700
Okay, so yeah, the library ecosystem is, I would say the library ecosystem in Python

130
00:16:50,700 --> 00:16:58,300
is huge. There are loads and loads of libraries that provide many, many functionalities.

131
00:16:59,340 --> 00:17:05,340
some more common, some less common. I think we have kind of covered at least some of the

132
00:17:06,700 --> 00:17:12,940
libraries that are usable by almost anyone when it comes to data analysis,

133
00:17:14,620 --> 00:17:24,060
but for a lot of scientific questions you will need to have some functionalities that are

134
00:17:24,060 --> 00:17:34,540
not covered in these packages and one thing here is that we can't cover everything we can't cover

135
00:17:34,540 --> 00:17:41,740
every single field that is available so going into individual package descriptions is

136
00:17:43,500 --> 00:17:49,980
maybe interesting for the few people who are exactly in that field but potentially relatively

137
00:17:49,980 --> 00:17:56,300
useless to anyone else. So we thought it would probably be better to discuss a bit how do we

138
00:17:56,300 --> 00:18:02,940
search for libraries, how and when do we use libraries, when do we re-implement things or

139
00:18:02,940 --> 00:18:08,860
implement things ourselves instead of using a library, and how do we kind of judge what

140
00:18:09,660 --> 00:18:17,340
libraries we are using. And yeah I would like to kind of open this up to

141
00:18:17,340 --> 00:18:26,700
to the panel. Let's start with [name]. How are you using or in what case would you be using

142
00:18:26,700 --> 00:18:31,100
a library versus when would you rather implement something yourself?

143
00:18:31,100 --> 00:18:41,380
Yes, so I'm very much of the opinion that I reuse libraries. I prefer that because I

144
00:18:41,380 --> 00:18:47,860
this kind of idea usually that in my mind I'm very optimistic usually when it comes to all kinds of

145
00:18:47,860 --> 00:18:55,300
things and that brings a risk with it and risk is that I think that I can implement something

146
00:18:55,300 --> 00:19:01,300
and that is a major risk when it comes to programming because when you dive deep into

147
00:19:01,300 --> 00:19:06,100
something and you try to implement it yourself you realize that okay here are the problems

148
00:19:06,100 --> 00:19:12,580
you encounter the problems. You first make much of success, you think that it's going well,

149
00:19:12,580 --> 00:19:18,340
and then you realize that there's problems. You encounter a wall, and then you realize that,

150
00:19:18,340 --> 00:19:28,020
hey, somebody else has tracked this road. You notice that somebody else has done the same kind

151
00:19:28,020 --> 00:19:37,060
of thinking, because I'm no unique individual. There's lots of people who can do the same kind

152
00:19:37,060 --> 00:19:42,260
of thinking. And then I realized, okay, somebody has trekked this road and tackled those problems

153
00:19:42,260 --> 00:19:52,500
that I encountered, and maybe I should use that. At the same time, I agree that it's a nice

154
00:19:52,500 --> 00:19:58,660
ego booster when you manage to do something hard yourself. But at the same time, usually that

155
00:19:58,660 --> 00:20:04,500
involves lots more than unknown unknowns that you don't know about. So I'm very much of the

156
00:20:04,500 --> 00:20:10,500
approach that I usually try to, especially when it comes to hard stuff, I try to use stuff that

157
00:20:10,500 --> 00:20:18,180
other people have created. And especially things that other people depend on. So for example,

158
00:20:18,180 --> 00:20:23,060
like NumPy or Pandas that we talked about previously, they are libraries that are like

159
00:20:23,060 --> 00:20:30,260
at the bottom layer of a lot of other stuff. So those must be really sturdy because the other

160
00:20:30,260 --> 00:20:36,580
stuff is built upon them, right? They must be really good at what they do because otherwise

161
00:20:36,580 --> 00:20:41,540
other people would encounter problems with those libraries. And that's why I often, especially

162
00:20:41,540 --> 00:20:45,380
if it's a library that I find that, okay, other people have built upon this library,

163
00:20:45,380 --> 00:20:51,380
I think that maybe I can trust it as well, because I see that other people are using it.

164
00:20:51,380 --> 00:21:00,380
How about [name], when do you use libraries and how much would you use them?

165
00:21:00,380 --> 00:21:06,380
Yeah, hi everybody. I'm also so much looking forward to this discussion session here.

166
00:21:06,380 --> 00:21:12,380
This is really cool and really also nice that we get questions in.

167
00:21:12,380 --> 00:21:15,340
And I will also answer your question in a moment,

168
00:21:15,340 --> 00:21:20,340
but I also just to have this like fireside chat ambience,

169
00:21:20,460 --> 00:21:22,660
I created this cozy light lighting here.

170
00:21:24,460 --> 00:21:29,460
Fully agree with you, I will almost always use a library

171
00:21:29,940 --> 00:21:32,340
rather than re-implementing it myself.

172
00:21:32,340 --> 00:21:34,380
I think the challenge that many people have

173
00:21:34,380 --> 00:21:38,460
is to sometimes not knowing that a library exists.

174
00:21:38,460 --> 00:21:43,180
So how do you find out what is the name of the library

175
00:21:43,180 --> 00:21:45,740
that has implemented the thing that I have in mind?

176
00:21:46,980 --> 00:21:50,900
And earlier, I was more tempted to just program it myself

177
00:21:50,900 --> 00:21:53,560
and then later figured out that it exists.

178
00:21:54,700 --> 00:21:59,380
Today, I would probably describe what I want to do

179
00:21:59,380 --> 00:22:03,660
in like a search engine or some AI tool and ask,

180
00:22:03,660 --> 00:22:07,540
can you suggest me the three typical libraries

181
00:22:07,540 --> 00:22:12,540
that do this, and then I would browse them and look at it.

182
00:22:13,260 --> 00:22:17,020
And just to offer a little like a different opinion

183
00:22:17,020 --> 00:22:20,860
also on different experience, little devil's advocate,

184
00:22:22,460 --> 00:22:25,640
there is one situation where I'm sometimes

185
00:22:25,640 --> 00:22:26,780
not reusing a library.

186
00:22:26,780 --> 00:22:31,780
And that is when I need one function from it,

187
00:22:31,780 --> 00:22:35,620
one function from it, one single thing,

188
00:22:36,500 --> 00:22:39,580
and I could implement a function in 10 lines, five lines.

189
00:22:39,580 --> 00:22:43,100
Let's say I could implement it in five lines of Python.

190
00:22:43,100 --> 00:22:46,380
And then I'm thinking, well, should I write these five lines

191
00:22:46,380 --> 00:22:48,780
or should I import the library?

192
00:22:48,780 --> 00:22:51,860
And it's a question that not only affects me,

193
00:22:51,860 --> 00:22:54,260
it will also affect the next person

194
00:22:54,260 --> 00:22:57,740
who will then install MICE, who wants to run my script.

195
00:22:57,740 --> 00:22:59,900
They will have to then also install the library

196
00:22:59,900 --> 00:23:01,500
and the dependencies.

197
00:23:01,500 --> 00:23:05,400
So sometimes I re-implement,

198
00:23:06,320 --> 00:23:08,960
but only then, only if it's like five lines,

199
00:23:08,960 --> 00:23:10,740
otherwise always reusing.

200
00:23:10,740 --> 00:23:14,560
How much efficiency are you willing to sacrifice

201
00:23:14,560 --> 00:23:16,640
by re-implementing yourself

202
00:23:16,640 --> 00:23:18,640
contrasted to using a library

203
00:23:18,640 --> 00:23:22,800
that potentially uses a lot faster underlying methods?

204
00:23:22,800 --> 00:23:23,960
Yeah, great point.

205
00:23:23,960 --> 00:23:25,920
I mean, if efficiency counts,

206
00:23:26,920 --> 00:23:29,740
it will, I will most, I will reuse it.

207
00:23:29,740 --> 00:23:33,860
it will be very difficult for me to,

208
00:23:33,860 --> 00:23:35,820
or not difficult, it will take me time

209
00:23:35,820 --> 00:23:39,900
to come up with an efficient implementation

210
00:23:40,760 --> 00:23:44,280
and then my time is maybe best spent somewhere else.

211
00:23:45,580 --> 00:23:48,700
So I would only implement it myself

212
00:23:48,700 --> 00:23:50,820
if it's very little code

213
00:23:50,820 --> 00:23:53,940
and if the efficiency doesn't matter in that place.

214
00:23:55,900 --> 00:23:57,180
Great point.

215
00:23:57,180 --> 00:24:03,900
I have something similar, I'm recently doing quite a bit of web programming and

216
00:24:03,900 --> 00:24:12,740
the biggest issue that I commonly encounter when trying to use libraries or use library classes functions

217
00:24:12,740 --> 00:24:16,700
is that they do almost what I want them to do.

218
00:24:16,700 --> 00:24:19,780
But then there is a small thing that's missing

219
00:24:19,780 --> 00:24:25,660
and this small thing is buried somewhere in the code of that library.

220
00:24:25,660 --> 00:24:30,660
So there's very often just not an option to change

221
00:24:30,660 --> 00:24:32,120
this specific part.

222
00:24:33,380 --> 00:24:37,900
And then I'm really at this,

223
00:24:38,820 --> 00:24:42,580
should I essentially copy paste the source code

224
00:24:42,580 --> 00:24:45,340
of that file and use it?

225
00:24:45,340 --> 00:24:50,340
Because I want to use essentially 99% of the code

226
00:24:51,300 --> 00:24:52,660
for this specific class,

227
00:24:52,660 --> 00:24:54,180
and I don't want to re-implement it

228
00:24:54,180 --> 00:24:57,060
because it's completely pointless to re-implement it.

229
00:24:59,060 --> 00:25:02,420
Do I just copy-paste that code at the license

230
00:25:02,420 --> 00:25:04,700
and say, well, this is how it is,

231
00:25:05,780 --> 00:25:09,500
and then change my two lines that I need to change?

232
00:25:09,500 --> 00:25:14,620
Or do I inherit from that and then say,

233
00:25:14,620 --> 00:25:16,900
well, I override a certain function in there?

234
00:25:17,740 --> 00:25:20,660
But this is always quite tricky,

235
00:25:20,660 --> 00:25:23,140
because if you do the letter,

236
00:25:23,140 --> 00:25:25,940
so you just overwrite a function,

237
00:25:25,940 --> 00:25:28,540
maybe the library changes at some point

238
00:25:28,540 --> 00:25:31,980
and then your code is no longer compatible

239
00:25:31,980 --> 00:25:33,580
with what the library did.

240
00:25:33,580 --> 00:25:37,820
And then you can also run into quite annoying problems.

241
00:25:37,820 --> 00:25:39,940
Yes, I think you really named it

242
00:25:39,940 --> 00:25:42,100
because one thing is you also mentioned it very briefly,

243
00:25:42,100 --> 00:25:42,940
but it's licensed.

244
00:25:42,940 --> 00:25:46,340
So as soon as when we copy code and adapt it,

245
00:25:46,340 --> 00:25:48,340
we have to think about licensing

246
00:25:48,340 --> 00:25:50,240
and this is maybe a little bit outside.

247
00:25:50,660 --> 00:25:55,140
but really important topic and then the other problem is that the moment you copy code

248
00:25:56,180 --> 00:25:59,860
and change it you disconnect yourself from the development of the library

249
00:26:00,740 --> 00:26:05,380
and how do you then keep up because the library keeps being developed and adapted

250
00:26:05,380 --> 00:26:09,620
to later versions and bug fixes and you disconnect yourself from all of this.

251
00:26:11,140 --> 00:26:17,540
Before this stream started when we were like checking audio and screen share we had a

252
00:26:17,540 --> 00:26:24,020
fun discussion about, like, should we build our own tools? [name], you had a cool analogy on,

253
00:26:24,020 --> 00:26:29,220
like, libraries and building tools. Maybe we can repeat that. I really liked that.

254
00:26:29,780 --> 00:26:38,420
Yeah. So basically, like, let's say you are a, like, wood craftsman. You do woodworking.

255
00:26:38,420 --> 00:26:43,380
Like, a lot of people who do woodworking, they could, in principle, like, do their own tools.

256
00:26:43,380 --> 00:26:48,580
so many people do and iron metalworking people like that they can like create their own axes

257
00:26:48,580 --> 00:26:55,620
like they can like take take a good piece of wood and a good piece of iron and make make their own

258
00:26:55,620 --> 00:27:02,820
axe it's it's in principle shouldn't be that complicated but of course it is more complicated

259
00:27:02,820 --> 00:27:08,980
like it you need to harden the steel so that it doesn't like fly into your face and you need to

260
00:27:08,980 --> 00:27:15,220
sharpen your axe and stuff like that. And of course, you can buy artisan axes from the internet

261
00:27:15,220 --> 00:27:23,220
and you can create bespoke versions of axes that are unique and special to you. But in many cases,

262
00:27:24,260 --> 00:27:30,260
it's much cheaper and much more efficient to get the market axe that you go to your

263
00:27:30,260 --> 00:27:37,380
general hardware store and there's a company that creates axes. And then they have a testing

264
00:27:37,380 --> 00:27:44,980
schedule, they have a routine that they make, these kinds of general things. And then you know

265
00:27:48,340 --> 00:27:54,740
what you get. And you know that there's lots of things probably involved in the process that you

266
00:27:54,740 --> 00:28:02,500
don't necessarily think about. After you have had the axe fly into your face a couple of times,

267
00:28:02,500 --> 00:28:08,740
maybe realize like a thing or two about like, okay, maybe I should, for the next iteration,

268
00:28:08,740 --> 00:28:15,700
I should modify it a bit or something like that. But that might be a lot of work, whereas

269
00:28:16,740 --> 00:28:25,220
companies and big entities or big communities, they usually have to test it out so that they can

270
00:28:25,220 --> 00:28:30,980
like mass distributed. And I think when it comes to libraries and stuff like that, like

271
00:28:31,860 --> 00:28:38,740
it also comes like what [name] said about the self-implementation, I agree with most of the

272
00:28:38,740 --> 00:28:48,100
points. Like the idea that do I really, am I really interested about this? Like am I, if you

273
00:28:48,100 --> 00:28:53,220
want to, if you find it relaxing to create your own access and your own tools, of course, it's

274
00:28:53,220 --> 00:28:55,100
is a good idea to do that.

275
00:28:55,100 --> 00:29:00,060
But if you feel like, for example, the editor thing,

276
00:29:00,060 --> 00:29:02,300
lots of people like to edit their editors.

277
00:29:02,300 --> 00:29:05,820
I don't like it because I know that I would just

278
00:29:05,820 --> 00:29:10,340
get stuck doing that, and then I don't do any work at all.

279
00:29:10,340 --> 00:29:13,700
But if you really like what you're doing,

280
00:29:13,700 --> 00:29:15,780
if you like crafting your tools, of course,

281
00:29:15,780 --> 00:29:18,820
that's a really great thing to do.

282
00:29:18,820 --> 00:29:28,620
But if you're not interested in how JPEGs are created or something,

283
00:29:28,620 --> 00:29:34,420
it's better to use a library that can open you the JPEG than re-implement the things.

284
00:29:34,420 --> 00:29:38,620
And, for example, with image processing, there's lots of security implications

285
00:29:38,620 --> 00:29:42,020
when you need to open, let's say, images and stuff like that,

286
00:29:42,020 --> 00:29:44,620
that are included in the image libraries.

287
00:29:44,620 --> 00:29:47,420
Now, I'm not interested about knowing anything about that.

288
00:29:47,420 --> 00:29:55,420
I will gladly give that to other people, so somebody who's interested about those aspects

289
00:29:55,420 --> 00:30:01,500
can focus on them, and I can choose which tools I want to craft, which tools I'm really

290
00:30:01,500 --> 00:30:06,420
passionate about and interested about.

291
00:30:06,420 --> 00:30:13,460
I think this plays a bit at least into one question that we have in the notes about how

292
00:30:13,460 --> 00:30:18,460
how we determine whether a library is correct and reliable.

293
00:30:18,900 --> 00:30:21,700
And I just, what I want to say to that is,

294
00:30:24,580 --> 00:30:26,220
of course, there is the problem

295
00:30:26,220 --> 00:30:27,580
if it gives the right results.

296
00:30:27,580 --> 00:30:31,100
If it doesn't give the right results and there are,

297
00:30:31,100 --> 00:30:34,700
well, the only way to do that

298
00:30:34,700 --> 00:30:38,740
or to check that is by reasonable testing.

299
00:30:38,740 --> 00:30:43,740
But irrespective of whether it gives the right results,

300
00:30:44,420 --> 00:30:45,860
whether something is reliable

301
00:30:45,860 --> 00:30:48,980
is a really difficult question to answer.

302
00:30:48,980 --> 00:30:53,160
Because especially in open source projects,

303
00:30:53,160 --> 00:30:56,460
people can contribute and there could be something

304
00:30:56,460 --> 00:31:00,140
coming into a code base that shouldn't be coming in.

305
00:31:00,140 --> 00:31:01,900
And that has happened in the past,

306
00:31:01,900 --> 00:31:04,900
but very often it was detected early enough.

307
00:31:04,900 --> 00:31:16,500
To me, on the other hand, if you start to worry about each individual piece of software

308
00:31:16,500 --> 00:31:22,660
that you're using, you essentially have to start worrying, okay, how much do I trust

309
00:31:22,660 --> 00:31:24,300
the operating system that I'm using?

310
00:31:24,300 --> 00:31:29,660
How much do I trust whatever company that I'm buying something from?

311
00:31:29,660 --> 00:31:36,420
something that at least we currently encounter quite a bit is that in the end a lot of questions

312
00:31:36,420 --> 00:31:45,300
are liability questions in that respect, where it's really more the can I point to someone

313
00:31:45,300 --> 00:31:55,220
that if something happens, can I point to this is not me kind of and that's what also

314
00:31:55,220 --> 00:32:00,580
universities are of course trying to do to say okay well no no I it is not our

315
00:32:00,580 --> 00:32:08,060
responsibility we were just buying using a product and it's something that I'm

316
00:32:08,060 --> 00:32:13,020
not sure if there is any real solution normally what I try to do is I have a

317
00:32:13,020 --> 00:32:17,900
look at the code I have a look at what it's roughly what it's doing I will not

318
00:32:17,900 --> 00:32:22,540
go through thousands of lines of code to check if everything is correct but that's

319
00:32:22,540 --> 00:32:23,380
So a good point.

320
00:32:23,380 --> 00:32:25,640
So what are the things that you look at?

321
00:32:25,640 --> 00:32:27,800
Let's say you have like three minutes to decide

322
00:32:27,800 --> 00:32:31,760
whether you like experiment with the library

323
00:32:31,760 --> 00:32:34,220
or whether you move on to the other library.

324
00:32:35,160 --> 00:32:36,860
What would you look at?

325
00:32:36,860 --> 00:32:41,360
So commonly how recent is the development

326
00:32:41,360 --> 00:32:42,780
is one big factor.

327
00:32:45,120 --> 00:32:49,280
One other factor is also a bit number of contributors.

328
00:32:49,280 --> 00:32:51,880
So if it's a single person library,

329
00:32:52,540 --> 00:32:59,540
I'm more inclined to skip it, actually, than if you have like 10, 20 contributors.

330
00:32:59,540 --> 00:33:02,920
That's a bit my opinion, at least.

331
00:33:02,920 --> 00:33:07,960
If you have multiple people working on this, you have multiple people interested in it,

332
00:33:07,960 --> 00:33:15,060
and it gets more difficult to sneak something in because you have more eyes watching.

333
00:33:15,060 --> 00:33:22,700
If it's a single person, I have to kind of rely on that person not doing anything while

334
00:33:22,700 --> 00:33:30,260
if I have a larger group, I do have more eyes that normally have a look at and would kick

335
00:33:30,260 --> 00:33:37,260
someone out who has malicious intent, for example.

336
00:33:37,260 --> 00:33:44,540
Then potentially number of stars on GitHub, so how many people are actually using this

337
00:33:44,540 --> 00:33:46,700
or at least indicating that they're using it

338
00:33:46,700 --> 00:33:50,700
is also, I think, a reasonable indicator.

339
00:33:51,780 --> 00:33:52,700
Yeah, that's-

340
00:33:52,700 --> 00:33:56,140
I can also mention that on like Python package index,

341
00:33:56,140 --> 00:33:58,740
we will mention it later today what that is.

342
00:33:58,740 --> 00:34:02,420
You can look at statistics, like how many downloads.

343
00:34:02,420 --> 00:34:05,180
And if I see that there are 200,000 downloads,

344
00:34:06,420 --> 00:34:09,020
it's 200 people, 200,000 people using it

345
00:34:09,020 --> 00:34:12,940
and probably it's reasonably tested.

346
00:34:12,940 --> 00:34:13,780
How about you, [name]?

347
00:34:13,780 --> 00:34:15,180
things that you look at when.

348
00:34:16,260 --> 00:34:20,700
Yeah, like I like most of the things that you also mentioned,

349
00:34:20,700 --> 00:34:25,320
but but like, you brought me flashbacks. Like when you were

350
00:34:25,320 --> 00:34:29,740
talking, like I got got some like, flashbacks of like, like

351
00:34:29,740 --> 00:34:35,020
one one thing that often often people forget about open source

352
00:34:35,380 --> 00:34:38,420
is that you can actually go and look at the source. Like,

353
00:34:38,660 --> 00:34:41,820
because, like, that's part of the like, the appeal, right?

354
00:34:41,820 --> 00:34:47,660
like it's open there. And quite often, like in a recent project that I was working on,

355
00:34:49,260 --> 00:34:56,220
I've just gone to the source. Like if the documentation, for example, isn't up to date,

356
00:34:56,220 --> 00:35:02,700
or like if I don't understand, like if it doesn't have, it has functionality I need,

357
00:35:02,700 --> 00:35:09,660
but it doesn't yet have, like especially fast moving new projects. Now with the like age of

358
00:35:09,660 --> 00:35:14,860
like AI coding, you can see a lot of projects that will have massive amounts of code created

359
00:35:14,860 --> 00:35:23,340
and massive amounts of functionality created by AI, most likely, or AI-powered coding.

360
00:35:23,340 --> 00:35:30,940
And it can create this kind of enterprise code that looks pretty promising. But often,

361
00:35:30,940 --> 00:35:37,100
let's say the APIs or documentation might be a long way off from what the codes shows.

362
00:35:37,100 --> 00:35:43,260
In those cases, I've often just went to the code and see what is implemented in the code

363
00:35:43,260 --> 00:35:45,820
and follow that through.

364
00:35:45,820 --> 00:35:51,980
For many cases, the documentation doesn't explain a parameter or something.

365
00:35:51,980 --> 00:35:56,740
Then I just go to the code and see how it is implemented there.

366
00:35:56,740 --> 00:35:59,140
Is it reasonably implemented there?

367
00:35:59,140 --> 00:36:01,060
Are there something in there?

368
00:36:01,060 --> 00:36:06,580
Of course, that can sometimes be a rabbit hole as well, but nowadays, let's say GitHub

369
00:36:06,580 --> 00:36:13,780
has good search functions for that. Sometimes I just download the whole repository and then I use

370
00:36:13,780 --> 00:36:20,580
some editor with a good definition following so that I can go through the file and see,

371
00:36:20,580 --> 00:36:26,420
okay, where is this actually implemented? Where is the actual meat of this meal?

372
00:36:27,460 --> 00:36:32,260
When I call a class or whatever, it's usually like, okay, it calls a super class and another

373
00:36:32,260 --> 00:36:37,620
a class and then there's like classes all the way down and in the end there's like a function,

374
00:36:37,620 --> 00:36:44,580
that small piece. And it can be like, okay, like this small piece is like, I could have

375
00:36:44,580 --> 00:36:54,260
implemented this myself as well. So like diving, sometimes diving into the code is also useful

376
00:36:54,260 --> 00:37:01,540
because then you can actually like see, like basically see the ingredients where the meal

377
00:37:01,540 --> 00:37:09,300
has been constructed from. So are the ingredients good for the meal, basically? You can go to the

378
00:37:09,300 --> 00:37:14,020
kitchen and check, are the ingredients good? And then you can decide, okay, do I actually want to

379
00:37:14,020 --> 00:37:21,300
eat this meal? But of course, this is when you have already somewhat invested yourself into the

380
00:37:21,300 --> 00:37:27,620
ecosystem or the specific package. But sometimes after these kinds of deep dive, you notice that,

381
00:37:27,620 --> 00:37:31,700
hey, actually, I don't like what they're doing here. Maybe I shouldn't use this.

382
00:37:33,060 --> 00:37:38,580
I like the analogy with the meal, and I think libraries sometimes also work. It's also about

383
00:37:40,260 --> 00:37:46,020
social trust. If you tell me that a restaurant is really good, I trust you, and I will go there

384
00:37:46,020 --> 00:37:53,460
and test it out. If I'm invited somewhere for dinner, I trust that you don't go check out

385
00:37:53,460 --> 00:37:55,940
out in the kitchen, how the meal is.

386
00:37:55,940 --> 00:37:57,740
So it's also about that.

387
00:37:57,740 --> 00:38:00,020
I had a look, one thing I would like to mention,

388
00:38:00,020 --> 00:38:02,580
I had a look in the, what people wrote

389
00:38:02,580 --> 00:38:05,100
as their favorite libraries.

390
00:38:05,100 --> 00:38:08,080
And there are actually two kinds of libraries.

391
00:38:08,080 --> 00:38:11,100
And one is libraries that we have to install,

392
00:38:11,100 --> 00:38:13,500
you know, pip install, conda install.

393
00:38:13,500 --> 00:38:15,540
But a couple of libraries that I mentioned there

394
00:38:15,540 --> 00:38:18,540
are also libraries that come with Python.

395
00:38:18,540 --> 00:38:19,620
They are standard.

396
00:38:21,080 --> 00:38:23,300
And some of them are not well known.

397
00:38:23,300 --> 00:38:24,780
and they could use more love.

398
00:38:24,780 --> 00:38:29,300
And for instance, one library that I use a lot

399
00:38:29,300 --> 00:38:32,940
is Collections or IterTools or Bisect.

400
00:38:33,820 --> 00:38:37,140
And what I want to say here is that I encourage,

401
00:38:37,140 --> 00:38:39,060
like when we ask what to do on a,

402
00:38:39,060 --> 00:38:43,300
what do you like to do on a winter's day for relaxation?

403
00:38:43,300 --> 00:38:44,700
I don't know if it's bad weather

404
00:38:44,700 --> 00:38:46,680
and you need to stay inside.

405
00:38:46,680 --> 00:38:49,620
I also recommend to browse standard Python libraries

406
00:38:49,620 --> 00:38:51,960
because there is a lot of cool stuff

407
00:38:51,960 --> 00:38:57,480
I wish I knew before and many of these things I have accidentally re-implemented in a bad way

408
00:38:58,280 --> 00:39:03,640
only to find out that it comes with Python. Installation, nothing to install, it's there.

409
00:39:05,400 --> 00:39:10,040
Yeah, one good example of this to say I completely agree with Rono and one good

410
00:39:10,040 --> 00:39:17,640
example is also data classes in base Python. So if you have to a class that has like various

411
00:39:17,640 --> 00:39:22,840
kinds of like data in it like this kind of like it represents I don't know like a generic thing

412
00:39:23,480 --> 00:39:28,520
configuration or something like that it's very powerful as well. There's multiple of

413
00:39:29,960 --> 00:39:36,600
other implementations or similar concepts from various libraries but Python, base Python has also

414
00:39:36,600 --> 00:39:47,560
a great one. Yeah there is the question about how do you keep code easy to reconfigure

415
00:39:47,560 --> 00:39:54,360
particularly in the light of recent developments with, for example, Anaconda, and suddenly

416
00:39:54,360 --> 00:40:03,160
saying that, yeah, we now want academic institutions also to pay, and so potentially

417
00:40:03,160 --> 00:40:09,400
having a service set up and once enough people are using it saying, yeah, now we would like to

418
00:40:09,400 --> 00:40:23,240
have some money at least. To me, I think to some extent it's relying on open source tools

419
00:40:23,240 --> 00:40:31,560
because yes, Anaconda has suddenly changed their billing or their licensing scheme and

420
00:40:31,560 --> 00:40:36,440
they can do that. They are providing a service by essentially providing the infrastructure.

421
00:40:36,440 --> 00:40:43,440
However, the tools that are being used to use that infrastructure are open source.

422
00:40:43,440 --> 00:40:51,120
So you can use the same tools to point to a different index at which point you are out

423
00:40:51,120 --> 00:40:55,040
of there, out of the dependency.

424
00:40:55,040 --> 00:41:03,560
And if there is something like that, it's very likely that alternatives will come up

425
00:41:03,560 --> 00:41:10,560
from the open source community and essentially mirror what Anaconda has done so you can get

426
00:41:11,280 --> 00:41:18,280
around this at least to some extent. If you would have a closed source program that does

427
00:41:21,680 --> 00:41:28,680
this, so if Conda would be closed source, this whole dependency management system, then

428
00:41:28,680 --> 00:41:32,640
dependency management system, then you're stuck.

429
00:41:32,640 --> 00:41:35,960
So using open source software allows you to,

430
00:41:35,960 --> 00:41:38,480
makes it much more likely that you will be able

431
00:41:38,480 --> 00:41:43,040
to reconfigure and change to a different place.

432
00:41:43,040 --> 00:41:46,000
While if you are in a closed source environment,

433
00:41:47,360 --> 00:41:51,000
yeah, you are dependent on, especially nowadays

434
00:41:51,000 --> 00:41:53,200
since it's very often no longer,

435
00:41:53,200 --> 00:41:55,680
I'm buying the product and paying one price,

436
00:41:55,680 --> 00:42:00,680
but I'm buying a subscription and I pay yearly

437
00:42:00,760 --> 00:42:03,680
and I have no influence on how much

438
00:42:03,680 --> 00:42:05,360
they will charge next year.

439
00:42:05,360 --> 00:42:08,000
And this brings a great follow up question

440
00:42:08,000 --> 00:42:11,160
I would want to ask from you, which is like,

441
00:42:11,160 --> 00:42:13,520
in which situations would you actually go

442
00:42:13,520 --> 00:42:15,760
with a closed source alternative?

443
00:42:15,760 --> 00:42:18,960
Like, in which situations you would use

444
00:42:18,960 --> 00:42:21,560
a closed source code?

445
00:42:21,560 --> 00:42:28,960
Like, mainly if I want to not be responsible for anything

446
00:42:28,960 --> 00:42:31,480
that happens due to the software.

447
00:42:31,480 --> 00:42:36,760
So if I can essentially say, reliability, yep.

448
00:42:36,760 --> 00:42:38,960
I'm using this tool.

449
00:42:38,960 --> 00:42:40,440
I have a license with them.

450
00:42:40,440 --> 00:42:43,400
That essentially covers that if something

451
00:42:43,400 --> 00:42:47,680
goes wrong with the tool, I can push the liability away.

452
00:42:47,680 --> 00:42:57,580
I would always prefer open source.

453
00:42:57,580 --> 00:43:05,300
So if open source doesn't exist, then closed source, unless, I don't know, the closed source

454
00:43:05,300 --> 00:43:10,460
has so much more like reach, exposure, visibility.

455
00:43:10,460 --> 00:43:12,340
It's maybe more about services than libraries.

456
00:43:12,340 --> 00:43:14,180
For libraries, I would prefer open source.

457
00:43:14,180 --> 00:43:17,100
And I would also like you to answer the question.

458
00:43:17,100 --> 00:43:18,700
I just want to remind all of us,

459
00:43:18,700 --> 00:43:20,600
we have like two, three minutes left in this session.

460
00:43:20,600 --> 00:43:23,340
So let's all think about like some closing statements.

461
00:43:24,660 --> 00:43:26,700
But how about you, [name]?

462
00:43:26,700 --> 00:43:28,820
Yeah, I would say the same as you did.

463
00:43:28,820 --> 00:43:30,580
Like if there's a specific tool,

464
00:43:30,580 --> 00:43:32,700
like it's a Python interface for,

465
00:43:32,700 --> 00:43:35,100
I don't know, like a simulation suite or something

466
00:43:35,100 --> 00:43:38,660
that is tied to like a closed source product,

467
00:43:38,660 --> 00:43:41,180
then yeah, then in those situations.

468
00:43:41,180 --> 00:43:43,260
But yeah, I wouldn't build upon that

469
00:43:43,260 --> 00:43:47,980
because, like again, it costs me money

470
00:43:47,980 --> 00:43:52,140
and it costs everybody who wants to use it money as well.

471
00:43:52,140 --> 00:43:54,020
One question I would want to ask,

472
00:43:54,020 --> 00:43:57,340
that is, somebody asked about

473
00:43:57,340 --> 00:44:00,140
whenever do you branch your repositories?

474
00:44:00,140 --> 00:44:04,260
And I would take that question and move it a bit

475
00:44:04,260 --> 00:44:08,180
and ask, have you contributed to the pot?

476
00:44:08,180 --> 00:44:11,400
Like, have you contributed to open source projects

477
00:44:11,400 --> 00:44:16,600
And how do you feel about contributing to open source libraries?

478
00:44:16,600 --> 00:44:24,560
And that's a great question to conclude this session, we can maybe all answer, because

479
00:44:24,560 --> 00:44:29,380
with the libraries, we should think not only about taking, but also about giving back.

480
00:44:29,380 --> 00:44:30,800
It can come in many different forms.

481
00:44:30,800 --> 00:44:38,380
It can come, I don't know, buying people coffee, or sending a contribution back.

482
00:44:38,380 --> 00:44:40,540
So not only like branching off

483
00:44:40,540 --> 00:44:42,940
and keeping the improvement for myself,

484
00:44:42,940 --> 00:44:45,780
but also maybe suggesting the improvement back

485
00:44:45,780 --> 00:44:50,180
or giving feedback or sending like a nice message

486
00:44:50,180 --> 00:44:53,300
or thank you and citing their work.

487
00:44:54,900 --> 00:44:57,500
And for companies, startups,

488
00:44:57,500 --> 00:45:01,100
those who use open source libraries and have the money,

489
00:45:01,100 --> 00:45:03,860
I think it would be also nice then to sponsor the work.

490
00:45:05,300 --> 00:45:06,500
Very important question.

491
00:45:08,380 --> 00:45:10,380
[name], what do you think?

492
00:45:11,740 --> 00:45:14,460
Yes, I have and yes, I do

493
00:45:16,460 --> 00:45:18,460
try to contribute back.

494
00:45:18,520 --> 00:45:23,180
Admittedly, I think most of the contributions that I'm

495
00:45:23,980 --> 00:45:27,360
providing are less the actual implementations,

496
00:45:28,380 --> 00:45:30,380
but more suggestions and

497
00:45:31,180 --> 00:45:33,180
potentially bug reports.

498
00:45:33,180 --> 00:45:37,780
I sometimes, at least for more complex libraries,

499
00:45:37,780 --> 00:45:40,860
I often just don't have the time to go through all the code

500
00:45:40,860 --> 00:45:44,420
of the library to find where I need to fix this.

501
00:45:44,420 --> 00:45:47,540
And there are people who have worked with that library

502
00:45:47,540 --> 00:45:50,020
for whom it's probably a, yeah, okay,

503
00:45:50,020 --> 00:45:52,220
a couple of lines of code that I need to change,

504
00:45:52,220 --> 00:45:54,900
while I would really need to learn the whole infrastructure

505
00:45:54,900 --> 00:45:56,300
and depending on what it is,

506
00:45:57,860 --> 00:46:02,240
I don't even know what the basic infrastructure of that is.

507
00:46:02,240 --> 00:46:07,240
So, I think contributions in forms of issue reports

508
00:46:07,400 --> 00:46:10,640
and stuff are also very, very useful

509
00:46:10,640 --> 00:46:15,380
to a programmer that has created a library.

510
00:46:15,380 --> 00:46:20,120
And while some people think that open issues are a problem,

511
00:46:20,120 --> 00:46:25,120
I personally think a library without any open issues

512
00:46:25,940 --> 00:46:30,940
or without any issues happening, yeah, is a dead library.

513
00:46:30,940 --> 00:46:33,580
because that essentially indicates no one is using it

514
00:46:33,580 --> 00:46:36,340
because there is nothing that doesn't have issues.

515
00:46:36,340 --> 00:46:37,180
Yeah.

516
00:46:37,180 --> 00:46:39,420
And the contribution doesn't even have to,

517
00:46:39,420 --> 00:46:40,820
it doesn't have to be code.

518
00:46:40,820 --> 00:46:43,340
It can also be one can contribute back with documentation,

519
00:46:43,340 --> 00:46:44,700
with helping with tutorials.

520
00:46:44,700 --> 00:46:46,580
So even like learning a library

521
00:46:46,580 --> 00:46:49,860
can be a really good useful perspective to contribute

522
00:46:49,860 --> 00:46:52,340
and how you use, how you get started,

523
00:46:52,340 --> 00:46:55,340
how contributing back with a tutorial.

524
00:46:55,340 --> 00:46:57,100
I can see that we are now two minutes over time.

525
00:46:57,100 --> 00:46:59,500
Any final statements from this session

526
00:46:59,500 --> 00:47:03,900
before we give the microphone to the next episode

527
00:47:03,900 --> 00:47:06,620
where we will talk about dependency management,

528
00:47:06,620 --> 00:47:08,060
which is having very related.

529
00:47:12,140 --> 00:47:14,220
Maybe some final words from [name].

530
00:47:14,220 --> 00:47:17,540
Oh, I don't have much more, let's just go on.

531
00:47:17,540 --> 00:47:18,380
Okay.

532
00:47:18,380 --> 00:47:19,380
Yeah.

533
00:47:19,380 --> 00:47:21,540
Then let's send it over to the next one.

534
00:47:21,540 --> 00:47:22,380
Yeah.

535
00:47:22,380 --> 00:47:23,200
I wish we had much more time.

536
00:47:23,200 --> 00:47:24,420
This was really fun.

537
00:47:24,420 --> 00:47:25,580
Keep the questions coming.

538
00:47:25,580 --> 00:47:28,140
We will be following those

539
00:47:28,140 --> 00:47:31,220
And we wish we had more time,

540
00:47:31,220 --> 00:47:33,580
and we would love to talk about this for hours.

541
00:47:34,860 --> 00:47:36,300
Thanks a lot for this session.

542
00:47:37,500 --> 00:47:38,620
Okay, thanks.

543
00:47:42,460 --> 00:47:47,180
Okay, I've shared my notes copy again,

544
00:47:47,180 --> 00:47:52,180
so you can, yeah, it's [name] and [name].

545
00:47:52,180 --> 00:48:01,380
Yeah it's [name] and [name]. Yeah I can give a screenshot if you reach out again like

546
00:48:01,380 --> 00:48:10,980
can you feed it to the... You have the full thing. Can you feed it to the right side?

547
00:48:10,980 --> 00:48:20,540
Yeah. Okay. What do you want it to do? Yeah it should be the left side. Okay I

548
00:48:20,540 --> 00:48:22,660
I can, is this?

549
00:48:22,660 --> 00:48:24,300
Yeah, a bit narrower.

550
00:48:27,980 --> 00:48:32,980
Yeah, we didn't realize to do the technical checkup before.

551
00:48:34,260 --> 00:48:36,640
Great, so see you later.

552
00:48:37,620 --> 00:48:38,460
Yeah, bye.

553
00:48:38,460 --> 00:48:41,260
So, hello, we have a new instructor.

554
00:48:41,260 --> 00:48:44,060
[name], do you want to introduce yourself?

555
00:48:44,060 --> 00:48:44,900
Yeah, hi, [name].

556
00:48:44,900 --> 00:48:46,940
I was just following your library ecosystem

557
00:48:46,940 --> 00:48:49,340
and it was a great discussion.

558
00:48:49,340 --> 00:48:53,420
Well done, and now we have a good basis

559
00:48:53,420 --> 00:48:54,820
to start this lesson as well.

560
00:48:54,820 --> 00:48:56,020
So my name is [name].

561
00:48:56,020 --> 00:48:59,660
I'm joining you from Oslo, University of Oslo,

562
00:48:59,660 --> 00:49:02,860
and I'm also part of the ENRIS training team,

563
00:49:02,860 --> 00:49:05,420
and also the Code Refinery training team.

564
00:49:05,420 --> 00:49:07,460
Yes, looking forward, [name].

565
00:49:07,460 --> 00:49:08,860
Yeah.

566
00:49:08,860 --> 00:49:13,500
So yeah, let's jump right in.

567
00:49:13,500 --> 00:49:18,060
So if you, [name], put my screen on there.

568
00:49:18,060 --> 00:49:20,540
So let's talk about dependency management.

569
00:49:20,540 --> 00:49:23,220
So in the previous session,

570
00:49:23,220 --> 00:49:25,260
we talked a lot about library ecosystem

571
00:49:25,260 --> 00:49:30,260
of how we have so many libraries in Python.

572
00:49:32,140 --> 00:49:35,820
And that can of course like create a situation where,

573
00:49:35,820 --> 00:49:37,820
okay, we need to use those libraries.

574
00:49:37,820 --> 00:49:38,820
How do we manage this?

575
00:49:38,820 --> 00:49:42,980
How can we install so many different libraries

576
00:49:42,980 --> 00:49:44,940
and how can we manage this thing?

577
00:49:44,940 --> 00:49:51,900
And here we are going to go through like the basic things that happen in the Python ecosystem

578
00:49:51,900 --> 00:49:58,940
and the basic words. So previously during the installation, like discussions and so forth in

579
00:49:58,940 --> 00:50:05,340
the previous days, you might have heard a lot of terms thrown around that might be like a bit

580
00:50:05,340 --> 00:50:15,660
confusing, a bit new for you. So, we'll go through those and we'll talk about dependency management

581
00:50:17,020 --> 00:50:24,060
well, in basically two different kinds of ways that we'll go to in a second.

582
00:50:24,620 --> 00:50:33,020
So, let's start straight up. So, where do people get stuff from? Where do we get those libraries

583
00:50:33,020 --> 00:50:41,900
from. So, yes, from, you know, pip install, for example, or the conda, that's usually the places.

584
00:50:42,700 --> 00:50:48,140
Yes. So, there's like two major players here or two major things that are not completely

585
00:50:48,140 --> 00:50:52,540
separate, but they are the major things. So, there's the Python package index,

586
00:50:53,580 --> 00:50:59,340
the PyPI index, which is a collection of huge amounts of Python packages.

587
00:50:59,340 --> 00:51:06,140
And these have been crafted so that they can run on most of the operating systems, usually.

588
00:51:06,140 --> 00:51:11,340
And basically, anybody can publish their packages in Python Packaging Index. So,

589
00:51:11,340 --> 00:51:17,340
there's a huge amount of packages, like small packages, large packages, and stuff like that.

590
00:51:18,460 --> 00:51:24,940
And they are often installed with this tool called pip. I'll talk about the installation

591
00:51:24,940 --> 00:51:33,740
tools a bit more in a second, but let's first look at the index. The index has a lot of Python,

592
00:51:33,740 --> 00:51:39,420
like pure Python code, but it also has some libraries that have some C code, for example,

593
00:51:39,420 --> 00:51:47,820
like NumPy. It has some C code inside of it so that it can run the stuff fast. It has all of

594
00:51:47,820 --> 00:51:55,420
those in these so-called wheels. It's all a Monty Python joke, like Python is a Monty Python joke,

595
00:51:55,420 --> 00:52:02,220
and the wheels are wheels of cheese and whatever. The names are strange, but it's basically like a

596
00:52:03,180 --> 00:52:09,580
big collection of these packages. Another layer that we have been talking about is the

597
00:52:09,580 --> 00:52:20,380
Conda ecosystem. So the Conda ecosystem is a bit different. So why Conda? Why not just the Python

598
00:52:20,380 --> 00:52:26,860
packaging index? And the reason is that, like I mentioned, many packages require external libraries.

599
00:52:27,500 --> 00:52:33,820
And what can happen is that you suddenly realize that, okay, the amount of Python code

600
00:52:33,820 --> 00:52:38,220
is quite small compared to the amount of libraries

601
00:52:38,220 --> 00:52:41,120
that you need to bring with the Python code.

602
00:52:41,120 --> 00:52:45,200
So, and then you suddenly can get into a situation

603
00:52:45,200 --> 00:52:50,200
where in order to get like a actually working ecosystem,

604
00:52:51,320 --> 00:52:54,540
you need to bring a huge bunch of like libraries with it.

605
00:52:54,540 --> 00:52:59,520
And this company called, it was Continuum Analytics

606
00:52:59,520 --> 00:53:02,320
previously, now it's Anaconda Incorporated.

607
00:53:02,320 --> 00:53:05,780
they created this ecosystem that they,

608
00:53:05,780 --> 00:53:08,560
it's an, they create the open source tools for it.

609
00:53:09,460 --> 00:53:12,900
And what it does is that it packages

610
00:53:12,900 --> 00:53:15,060
the older dependencies as well.

611
00:53:15,060 --> 00:53:18,100
So basically like you can have like a Python package

612
00:53:18,100 --> 00:53:23,100
and it can have the dependencies to other packages

613
00:53:23,100 --> 00:53:28,100
like C packages and like other kinds of libraries

614
00:53:28,100 --> 00:53:37,540
And it can manage all of that mess of which Python packages you install and which dependencies

615
00:53:37,540 --> 00:53:39,500
for these Python packages you install.

616
00:53:39,500 --> 00:53:46,180
It's basically almost like a fake operating system kind of a situation where it contains

617
00:53:46,180 --> 00:53:52,620
basically all kinds of packages from a whole operating system.

618
00:53:52,620 --> 00:53:59,480
And it's like also it's published for Macs and for Linux and for Windows.

619
00:53:59,480 --> 00:54:05,240
So there's different so-called builds of these packages for different kinds of operating systems.

620
00:54:05,240 --> 00:54:11,600
The packaging in their side is a bit more complicated, but anybody can as well contribute

621
00:54:11,600 --> 00:54:12,600
to that ecosystem.

622
00:54:12,600 --> 00:54:16,600
So it's an open source ecosystem.

623
00:54:16,600 --> 00:54:21,580
So that was, I think, a very important analogy you made, you know, not just dependencies,

624
00:54:21,580 --> 00:54:28,780
or operating system level dependencies. For example, when you work with Unix operating system,

625
00:54:28,780 --> 00:54:35,420
we feel we encounter this more. For example, if you want to install NumPy, NumPy comes with a lot

626
00:54:35,420 --> 00:54:42,780
of header files and C code. So that PIP can actually install those code. So what happens is

627
00:54:42,780 --> 00:54:47,980
we have some wrappers in Python for the C code, but the C code itself could compile. But if you're

628
00:54:47,980 --> 00:54:50,420
If you're using Windows, it will pull down the wheel

629
00:54:50,420 --> 00:54:53,220
and it will set it up for you, even in Mac.

630
00:54:53,220 --> 00:54:54,760
But some operating systems, you feel

631
00:54:54,760 --> 00:54:57,260
that when you install PIP, it takes longer time.

632
00:54:57,260 --> 00:55:00,740
It would do some compilations, so it compiles the C code.

633
00:55:00,740 --> 00:55:03,420
But when it comes to Conda, it actually

634
00:55:03,420 --> 00:55:08,340
not only the code, the NumPy code that's being compiled,

635
00:55:08,340 --> 00:55:12,020
but it's also compiled some open SSL libraries, for example,

636
00:55:12,020 --> 00:55:15,060
OS-level dependencies, and it packages

637
00:55:15,060 --> 00:55:21,300
binary file compiled for your system. So which also brings up other challenges. For example,

638
00:55:21,300 --> 00:55:29,220
if you use very exotic versions of certain OS, that package might not work. But for Windows,

639
00:55:29,220 --> 00:55:37,140
Mac, and Ubuntu and most of the versions, Conda is capable of providing this pre-compiled sets.

640
00:55:38,100 --> 00:55:39,620
Is that a correct way to look at it?

641
00:55:39,620 --> 00:55:49,260
Yeah, yeah, yeah. Basically, like Conda tries to answer questions beyond Python, like many

642
00:55:49,260 --> 00:56:00,180
of these harder questions. That can happen when you have dependencies go further and

643
00:56:00,180 --> 00:56:07,580
further away, and Conda can solve some of these. But this brings the Conda ecosystem

644
00:56:07,580 --> 00:56:13,580
at the same time, even though it sounds like, okay, this sounds great, it has its own

645
00:56:13,580 --> 00:56:21,980
complications. And the complications, we'll get to that right now. So the complications are these.

646
00:56:22,780 --> 00:56:29,660
So first off, maybe last year, you might have heard the Anaconda Incorporated, they made

647
00:56:29,660 --> 00:56:35,660
like a change to their licensing terms. So they provide certain tools or certain

648
00:56:35,660 --> 00:56:43,180
ways of installing conda ecosystem that they wanted to basically get money from universities

649
00:56:43,180 --> 00:56:51,660
and well at least in my opinion that was the situation they wanted well people to pay for

650
00:56:51,660 --> 00:56:58,780
the resources that they provide and it created like lots of confusion in the ecosystem and now

651
00:56:58,780 --> 00:57:07,500
they have clarified their stance in that. Maybe we should go through them in order.

652
00:57:08,860 --> 00:57:18,140
So the Konda installation tool and these community channels provided by repositories

653
00:57:18,140 --> 00:57:26,460
that Anaconda provide, they are free. But the Anaconda repository and Anaconda's own channels

654
00:57:26,460 --> 00:57:33,580
and the Anaconda installers and so forth, they are free for universities and companies with 200

655
00:57:34,620 --> 00:57:43,100
or fewer people. But non-university research institutions and national laboratories require

656
00:57:43,100 --> 00:57:50,300
licenses. Then there's also tools like Miniconda are free when they don't download Anaconda's

657
00:57:50,300 --> 00:57:57,180
packages and like MiniForge and all of this open source stuff is free. So this affected our course

658
00:57:57,180 --> 00:58:03,180
as well. So we didn't want to, we previously recommended people to use Anaconda to install

659
00:58:03,180 --> 00:58:11,420
the course environment or just get Anaconda. But now we have switched to recommending MiniForge

660
00:58:11,420 --> 00:58:16,780
because it's well free for everybody. And this can bring this kind of like

661
00:58:16,780 --> 00:58:23,660
complexity to the ecosystem, because now you need to be mindful of the licenses and whether

662
00:58:23,660 --> 00:58:26,780
you can use certain tools.

663
00:58:26,780 --> 00:58:27,780
And maybe we can, yeah.

664
00:58:27,780 --> 00:58:34,100
Sivak, can you explain a little bit about, you know, we are talking about two things,

665
00:58:34,100 --> 00:58:39,500
the conduct, the package manager or the thing or the program that installs the packages

666
00:58:39,500 --> 00:58:42,740
and we have the place where the actual packages are.

667
00:58:42,740 --> 00:58:43,740
Yes.

668
00:58:43,740 --> 00:58:49,740
So when this license issue came, especially in our setup, it was very difficult to explain

669
00:58:49,740 --> 00:58:55,340
this because some of the users, they are used to modifying the Conda environment itself,

670
00:58:55,340 --> 00:58:56,940
the base environment.

671
00:58:56,940 --> 00:58:59,900
So they just keep on installing things.

672
00:58:59,900 --> 00:59:04,860
So can you clarify a little bit more, what is the Conda command and what is this package

673
00:59:04,860 --> 00:59:05,860
you're talking about?

674
00:59:05,860 --> 00:59:07,260
Yeah, that's a great point.

675
00:59:07,260 --> 00:59:10,020
And let's do that right now.

676
00:59:10,020 --> 00:59:12,040
So there's these packets repository.

677
00:59:12,040 --> 00:59:14,240
So places where packages come from.

678
00:59:14,240 --> 00:59:20,680
So there's this Anaconda community repository, which is this Anaconda cloud.

679
00:59:20,680 --> 00:59:27,120
So the free versions or the free channels, so it houses multiple channels.

680
00:59:27,120 --> 00:59:31,660
So some of these channels are free and some of them are not.

681
00:59:31,660 --> 00:59:36,760
So for example, Anaconda's own channels are not free, but it houses like lots of different

682
00:59:36,760 --> 00:59:40,000
installation locations.

683
00:59:40,000 --> 00:59:47,320
And then there's Anaconda's own repository, which is all Anaconda's stuff.

684
00:59:47,320 --> 00:59:56,400
Then inside this repository, there's channels, and these are basically installation locations

685
00:59:56,400 --> 01:00:05,000
or folders, and there are these Anaconda's proprietary ones, but then there's free ones

686
01:00:05,000 --> 01:00:06,000
as well.

687
01:00:06,000 --> 01:00:09,680
Forge is the biggest free channel there is.

688
01:00:09,680 --> 01:00:14,480
It's like 27,000 packages right now.

689
01:00:14,480 --> 01:00:19,440
And we would recommend that probably in most cases

690
01:00:19,440 --> 01:00:23,400
for everybody, because if you get it from there,

691
01:00:23,400 --> 01:00:26,000
it's community managed, community built,

692
01:00:26,000 --> 01:00:28,960
and it's definitely free.

693
01:00:28,960 --> 01:00:35,160
Then there's the tools that are used to install the stuff.

694
01:00:35,160 --> 01:00:42,680
like Anaconda. When we talk about Anaconda, we say that it's a distribution of conda packages.

695
01:00:42,680 --> 01:00:48,600
It's a distribution of conda packages by Anaconda Incorporated. Miniconda is this kind of like

696
01:00:49,160 --> 01:00:54,840
smaller installer that they provide, but by default it uses the Anaconda's channels.

697
01:00:54,840 --> 01:01:02,680
So it uses the proprietary ones. But Miniforge is the same as Miniconda, but it uses the free ones.

698
01:01:02,680 --> 01:01:08,680
So, and there's also this micro-Mamba, which is like a smaller installer,

699
01:01:08,680 --> 01:01:16,680
especially useful for automated installations, which you can create environments with.

700
01:01:16,680 --> 01:01:26,680
And all of these distributions, they use this installer or package manager called Conda or Mamba.

701
01:01:26,680 --> 01:01:31,680
And Conda is the original one written in Python by the Conda people,

702
01:01:31,680 --> 01:01:37,680
and Mamba is an alternative, which is faster in most cases,

703
01:01:37,680 --> 01:01:41,680
because it uses a different kind of package solver.

704
01:01:41,680 --> 01:01:45,680
But Conda nowadays, they have switched to using Mamba's solver.

705
01:01:45,680 --> 01:01:48,680
So in many cases, Conda can be similar kind of speed,

706
01:01:48,680 --> 01:01:51,680
but only for the most recent versions of Conda.

707
01:01:51,680 --> 01:01:59,800
But this brings this kind of situation where there's the proprietary one and there's an

708
01:01:59,800 --> 01:02:01,280
open source alternative.

709
01:02:01,280 --> 01:02:06,280
There's a proprietary repo and there's open source repository.

710
01:02:06,280 --> 01:02:09,280
There's proprietary channel, there's open source channel.

711
01:02:09,280 --> 01:02:14,600
There's proprietary distribution, there's the open source distribution.

712
01:02:14,600 --> 01:02:20,400
There's the proprietary, well, not really the package managers, well, proprietary created

713
01:02:20,400 --> 01:02:27,360
package manager and the open source created package manager. So there's always these options,

714
01:02:27,360 --> 01:02:34,320
how could I say, with these. So now you said, mentioned many, many things. If I don't want to

715
01:02:34,320 --> 01:02:39,760
think about this too much and if I just want to create my environment, can you give me a default

716
01:02:40,480 --> 01:02:44,800
package manager and a default channel I could set up without thinking too much?

717
01:02:44,800 --> 01:02:47,040
Well, what would be the easiest?

718
01:02:47,040 --> 01:02:56,800
Yeah, so the easiest one would be to pick MiniForge and use

719
01:02:56,800 --> 01:03:00,360
CondaForge and use Conda or Mamba.

720
01:03:00,360 --> 01:03:05,440
And that's the easiest one to use as a default one,

721
01:03:05,440 --> 01:03:06,880
I would say.

722
01:03:06,880 --> 01:03:09,600
But let's talk about, OK, we have

723
01:03:09,600 --> 01:03:10,880
talked about the ecosystem.

724
01:03:10,880 --> 01:03:15,040
Okay, there's PyPy and that uses pip to install packages.

725
01:03:15,040 --> 01:03:18,400
And there's the Conda ecosystem with all of this stuff.

726
01:03:18,400 --> 01:03:19,400
How do we actually use it?

727
01:03:19,400 --> 01:03:21,360
How do we actually use this?

728
01:03:21,360 --> 01:03:26,040
Like now we have gone through maybe a lot of the legalese,

729
01:03:26,040 --> 01:03:27,320
I'm gonna say it on this.

730
01:03:28,360 --> 01:03:30,160
So how do we use these?

731
01:03:30,160 --> 01:03:33,680
So why even use these?

732
01:03:33,680 --> 01:03:36,720
Like why can't we just install Python in other ways?

733
01:03:36,720 --> 01:03:40,000
And the reason is that we want to use environments.

734
01:03:40,000 --> 01:03:49,800
So we want to have usually a situation where we can separate a project or a thing we're

735
01:03:49,800 --> 01:03:54,520
doing from all of the other stuff we're doing.

736
01:03:54,520 --> 01:03:58,880
And for that, we often want to install stuff in these environments.

737
01:03:58,880 --> 01:04:07,320
So we want to install our Python packages in specific versions of Python packages we

738
01:04:07,320 --> 01:04:13,640
want for the specific project that we want into its own world where it doesn't affect other worlds,

739
01:04:14,200 --> 01:04:20,920
because otherwise it can quite easily get into a situation where stuff doesn't work anymore,

740
01:04:20,920 --> 01:04:27,880
or you need to use a different package version for a different project that you're working on,

741
01:04:27,880 --> 01:04:35,640
and suddenly it gets cumbersome and hard. And also the other one brought a great point about

742
01:04:35,640 --> 01:04:39,160
but like you cannot really replicate it.

743
01:04:39,160 --> 01:04:44,160
You don't have the receipts of like what you have built.

744
01:04:46,360 --> 01:04:48,600
Like you don't know what, where are you?

745
01:04:48,600 --> 01:04:52,240
What sort of ecosystem are you in if you don't have,

746
01:04:52,240 --> 01:04:54,840
if you haven't created an environment for it?

747
01:04:54,840 --> 01:04:57,040
Like you don't really, it's very hard to know

748
01:04:57,040 --> 01:05:00,880
what packages your code actually needs and what uses

749
01:05:00,880 --> 01:05:02,880
if you don't start from the point of,

750
01:05:02,880 --> 01:05:05,320
okay, let's start with the documentation

751
01:05:05,320 --> 01:05:10,320
of what packages we need to get something done.

752
01:05:11,760 --> 01:05:14,400
So I also have so many environments.

753
01:05:14,400 --> 01:05:17,200
So as you said, without modifying the same environment

754
01:05:18,440 --> 01:05:22,560
for all the work, even when I'm sharing my work

755
01:05:22,560 --> 01:05:24,640
with somebody else, it's easier to communicate

756
01:05:24,640 --> 01:05:27,920
rather than shifting my laptop, not the entire thing,

757
01:05:27,920 --> 01:05:31,240
but this is the libraries that you need.

758
01:05:31,240 --> 01:05:36,240
But one thing I encounter a trouble, like I face a lot

759
01:05:36,760 --> 01:05:39,440
is that sometimes I have my environment

760
01:05:39,440 --> 01:05:42,180
and I do install on top of it,

761
01:05:42,180 --> 01:05:44,820
but I don't know what exactly I have installed.

762
01:05:46,040 --> 01:05:48,240
So I think people will also do that.

763
01:05:48,240 --> 01:05:51,240
So they may start with the environmental file

764
01:05:51,240 --> 01:05:54,600
or like a requirement file and then they might modify it.

765
01:05:55,880 --> 01:06:00,880
So how could we also navigate this complexity?

766
01:06:01,240 --> 01:06:05,820
Let's first check, I will answer that in a second,

767
01:06:05,820 --> 01:06:07,300
but let's first check,

768
01:06:07,300 --> 01:06:09,820
how do we even create an environment?

769
01:06:09,820 --> 01:06:13,780
So let's look at what is an environment?

770
01:06:13,780 --> 01:06:15,260
How do we specify it?

771
01:06:15,260 --> 01:06:18,180
Like, how do we specify what is an environment?

772
01:06:18,180 --> 01:06:20,620
So if you're using Conda,

773
01:06:20,620 --> 01:06:23,620
an order-related ecosystem like Conda, Mamba,

774
01:06:23,620 --> 01:06:24,820
all of that jazz,

775
01:06:25,940 --> 01:06:30,000
you might see this file called environment.yaml.

776
01:06:30,000 --> 01:06:31,140
It can be called whatever,

777
01:06:31,140 --> 01:06:33,660
but it's often called environment.yaml.

778
01:06:33,660 --> 01:06:37,000
And what it has is this YAML syntax

779
01:06:37,000 --> 01:06:41,240
where you have the name of the environment,

780
01:06:41,240 --> 01:06:44,160
then you usually define what channels you want to use.

781
01:06:44,160 --> 01:06:46,220
And this is important because otherwise,

782
01:06:46,220 --> 01:06:48,000
like whatever installer you're using

783
01:06:48,000 --> 01:06:51,040
picks the defaults of that installer.

784
01:06:51,040 --> 01:06:54,640
So if you're using miniconda, it suddenly uses defaults.

785
01:06:54,640 --> 01:06:58,520
If you're using miniforge, it uses condaforge.

786
01:06:58,520 --> 01:07:02,160
And you don't want to give this sort of ambiguity

787
01:07:02,160 --> 01:07:03,600
of where do you get the stuff.

788
01:07:03,600 --> 01:07:07,520
You want to define that, okay, use, let's say, Conda4.

789
01:07:07,520 --> 01:07:10,540
And then you can specify what dependencies you want.

790
01:07:10,540 --> 01:07:13,500
And these dependencies are like the library names

791
01:07:13,500 --> 01:07:14,560
that you want to use.

792
01:07:15,760 --> 01:07:18,340
And how do you create this environment?

793
01:07:19,200 --> 01:07:21,200
Usually, these can be created

794
01:07:21,200 --> 01:07:24,480
like from an Anaconda Navigator and tools like such,

795
01:07:24,480 --> 01:07:26,280
but from the command line,

796
01:07:26,280 --> 01:07:29,340
which is often how you would run these,

797
01:07:29,340 --> 01:07:33,620
it would be like conda enable create dash dash file,

798
01:07:33,620 --> 01:07:35,340
and then you give it the environment file,

799
01:07:35,340 --> 01:07:37,740
and it will create you the environment.

800
01:07:37,740 --> 01:07:40,100
If you're using Mamba, just switch Mamba

801
01:07:40,100 --> 01:07:43,580
to in the place of conda, and it would do that.

802
01:07:45,140 --> 01:07:47,620
And this is how conda manages.

803
01:07:47,620 --> 01:07:49,420
Like this specifies, okay,

804
01:07:49,420 --> 01:07:52,620
I want python numpy matplotlib and pandas.

805
01:07:52,620 --> 01:07:55,460
Like you can specify what your code needs,

806
01:07:55,460 --> 01:07:58,100
and you can create your own environment

807
01:07:58,100 --> 01:07:59,960
on the packages you need.

808
01:08:01,260 --> 01:08:03,740
If you're using virtual environments,

809
01:08:03,740 --> 01:08:07,300
so virtual environments are similar to Conda environments.

810
01:08:07,300 --> 01:08:11,020
So they're like their own neat boxes of code

811
01:08:11,020 --> 01:08:13,620
that have their own libraries.

812
01:08:15,260 --> 01:08:20,260
And they use this file called requirements.txt

813
01:08:20,500 --> 01:08:23,220
or PPUs this requirements.txt.

814
01:08:23,220 --> 01:08:24,460
So in many repositories,

815
01:08:24,460 --> 01:08:28,140
you might have seen this requirements.txt file.

816
01:08:28,140 --> 01:08:31,700
And it's just a list of packages, basically.

817
01:08:31,700 --> 01:08:34,100
And if you create a virtual environment,

818
01:08:34,100 --> 01:08:39,100
then you run this python-m-virtualenv,

819
01:08:41,660 --> 01:08:44,000
and then the name of the environment.

820
01:08:44,000 --> 01:08:46,660
Then you usually need to activate this environment.

821
01:08:46,660 --> 01:08:49,260
So you basically make this Python

822
01:08:49,260 --> 01:08:54,260
and this environment your current one.

823
01:08:54,260 --> 01:09:00,340
and then you can use pip to install your packages inside of it.

824
01:09:01,220 --> 01:09:05,220
So we are talking about two things here, isn't it [name]? One is the Conda and one is

825
01:09:06,180 --> 01:09:13,060
Python environments. But I think you're mentioning this together to maybe understand easier that you

826
01:09:13,060 --> 01:09:15,140
could do either way. Yes.

827
01:09:15,140 --> 01:09:20,260
So what is your purpose of describing like one with the YAML format and one with the text format

828
01:09:20,260 --> 01:09:23,460
and one with Konda and Pip. Do people need to know all these things?

829
01:09:26,020 --> 01:09:30,980
That's a great point. So do you need to do both of them? No. You can choose whichever

830
01:09:30,980 --> 01:09:39,140
ecosystem you want to use. The Konda ecosystem has... If you have a bigger project with a lot

831
01:09:39,140 --> 01:09:45,300
more complexity, especially if you're doing something like deep learning or stuff like that,

832
01:09:45,300 --> 01:09:53,300
the Conda ecosystem provides you usually maybe easier to manage this kind of very complex

833
01:09:53,860 --> 01:10:01,540
ecosystem, as long as you define what you need there. And in the Pip ecosystem, it's much more

834
01:10:01,540 --> 01:10:08,100
lightweight, I would say, but it also can install many of the same tools, and it's much more

835
01:10:08,100 --> 01:10:14,660
straightforward. But yes, you can do either or. So you can either use these virtual environments

836
01:10:14,660 --> 01:10:21,780
all these conda environments to create your own world where you're installing stuff.

837
01:10:22,660 --> 01:10:29,220
So, sorry for a short disturbance, because in the HackMD, there's a question about what is

838
01:10:29,220 --> 01:10:36,660
a dependency? Maybe some people might benefit if you could explain a little bit what you mean by

839
01:10:36,660 --> 01:10:36,820
that.

840
01:10:36,820 --> 01:10:42,740
Yeah. So here, dependencies basically mean, same in the requirements.txt, they're basically

841
01:10:42,740 --> 01:10:46,740
name of the libraries that you're using, name of the library packages that you're using.

842
01:10:47,780 --> 01:10:54,580
So in the environment.yaml specification, you have this list called dependencies.

843
01:10:54,580 --> 01:11:01,460
So it's like you have these dashes that describe each entry in that list. And it just means that,

844
01:11:01,460 --> 01:11:09,380
okay, I want this stuff here. It can be all kinds of stuff. It can have compilers or different

845
01:11:09,380 --> 01:11:15,300
installation tools or other packages. The Conda ecosystem provides huge amounts of different

846
01:11:15,300 --> 01:11:22,020
kinds of packages, but mainly what you are looking for when you're creating these environments,

847
01:11:22,020 --> 01:11:27,460
how do you define or decide on what to add here? Usually look at the imports.

848
01:11:28,980 --> 01:11:36,260
If you have a code that does import, it does import pandas, import numpy, import whatever.

849
01:11:36,260 --> 01:11:42,740
if you add that as the dependency, that usually solves the import. Because if you install that

850
01:11:42,740 --> 01:11:47,460
library, then the import will work and then you have that package in the environment.

851
01:11:47,460 --> 01:11:51,940
So usually what you want to do is, if you don't know what packages you need,

852
01:11:52,580 --> 01:11:59,380
just look what your code uses and then ask for those. And then for Conda and also for Peep,

853
01:11:59,380 --> 01:12:05,780
there's an internal solver that will solve, okay, what does Pandas need? And then it will

854
01:12:05,780 --> 01:12:12,900
solve all of the stuff from there on out. And you should really specify only the stuff that

855
01:12:12,900 --> 01:12:20,500
your code actually needs and let the tools handle all of the busy work of solving,

856
01:12:20,500 --> 01:12:25,060
okay, what does Pandas need? What do I need to get NumPy and so forth?

857
01:12:28,020 --> 01:12:29,220
Yeah, I think that explains.

858
01:12:29,220 --> 01:12:36,440
And now I think we can answer the question that you asked, okay, like how do we then

859
01:12:36,440 --> 01:12:45,220
update these or how do we manage, like how can we create more packages to these environments?

860
01:12:45,220 --> 01:12:54,600
And here comes the tricky thing that sometimes makes stuff confusing or complicated.

861
01:12:54,600 --> 01:13:02,480
And it's that because all of these tools, the tools are meant to help you install a

862
01:13:02,480 --> 01:13:07,760
complex list of dependencies, so a complex list of different packages.

863
01:13:07,760 --> 01:13:15,800
And because they can come from various sources and they can be very complicated, like the

864
01:13:15,800 --> 01:13:21,160
installations can be very complicated, there's lots of packages there, and they need to figure

865
01:13:21,160 --> 01:13:28,360
out what packages play nice with each other. This is why if you do manual installations,

866
01:13:28,360 --> 01:13:32,280
you can do manual installations into these environments, like install packets,

867
01:13:32,280 --> 01:13:38,680
like just put something there. But what often happens is that because the solver doesn't know

868
01:13:38,680 --> 01:13:45,160
about what other stuff is needed here, it can mess up the environment because it doesn't have

869
01:13:45,160 --> 01:13:54,280
the knowledge of what other stuff was required here. The best solution in most cases is to

870
01:13:55,800 --> 01:14:01,800
update the environment based on an updated specification. You add a new package to the

871
01:14:01,800 --> 01:14:09,880
dependency list. Let's say you want to install Vega Altair or something. You would add that to

872
01:14:09,880 --> 01:14:14,840
the dependency list and then you would update the environment and let the solver find you

873
01:14:14,840 --> 01:14:23,080
the package and then install it to the environment. Sometimes there can be mismatches in the solve.

874
01:14:23,080 --> 01:14:26,760
So let's say you want to install one package and then you want to install another package,

875
01:14:26,760 --> 01:14:32,360
but there's no compatible way of getting these two working. Then the only solution is usually

876
01:14:32,360 --> 01:14:39,960
to remove the previous environment and create a new environment or alternatively create a new

877
01:14:39,960 --> 01:14:47,320
environment with a different name that does a fresh solve, like from a fresh starting point,

878
01:14:47,320 --> 01:14:53,640
because then it can find the versions that actually work together. And that way you can

879
01:14:55,000 --> 01:15:01,960
get a fresh installation that definitely works. And the problem with these packaging tools and

880
01:15:01,960 --> 01:15:08,760
this is often like you might feel with the installations that, okay, you don't want to

881
01:15:08,760 --> 01:15:12,920
to mess it up. Once you have it working, you don't want to wreck the boat. You don't want

882
01:15:12,920 --> 01:15:19,220
to mess it up because it was so complicated to get it rolling. And here, the specification

883
01:15:19,220 --> 01:15:25,400
really helps you. If you have created the environment YAML or the requirements TXT that

884
01:15:25,400 --> 01:15:31,400
actually describes what your code needs, it's usually very easy to replicate the recreation

885
01:15:31,400 --> 01:15:37,960
of the environment again. And it's also for your colleagues. If you have the receipts,

886
01:15:37,960 --> 01:15:45,640
have the knowledge of what your program needs, then you can usually recreate the environment

887
01:15:45,640 --> 01:15:57,320
on a whim. You can let go of this fear of, okay, I will break everything if I do any modifications

888
01:15:57,320 --> 01:16:03,480
to the environment and I don't know how to replicate this environment or how to replicate

889
01:16:03,480 --> 01:16:04,480
my workflow.

890
01:16:04,480 --> 01:16:11,820
So in this environment, let's say if you want NumPy, when you use for the PIP installation,

891
01:16:11,820 --> 01:16:18,640
you could specify NumPy equals two equal signs and 1.23.1, for example. And on the

892
01:16:18,640 --> 01:16:26,760
conda file, you could also specify NumPy single equals or they use equal signs to mention

893
01:16:26,760 --> 01:16:33,240
versions. Is that a good practice or what do you recommend?

894
01:16:33,240 --> 01:16:36,720
Yes, so you can do stuff like this.

895
01:16:36,720 --> 01:16:38,680
So let's look at the example,

896
01:16:38,680 --> 01:16:40,760
what [name] was talking about.

897
01:16:40,760 --> 01:16:43,840
So yes, you can specify version ranges

898
01:16:43,840 --> 01:16:47,280
because like we mentioned, these package indexes,

899
01:16:47,280 --> 01:16:50,000
they have multiple alternative versions

900
01:16:50,000 --> 01:16:51,760
of these packages installed in them.

901
01:16:51,760 --> 01:16:54,480
So in PyPy and in the content channels,

902
01:16:54,480 --> 01:16:58,440
there's like hundreds of versions of the same package.

903
01:16:58,440 --> 01:17:01,880
So hundreds of versions of NumPy, for example,

904
01:17:01,880 --> 01:17:04,720
with all of the different major and minor versions

905
01:17:06,160 --> 01:17:07,880
of the package installed.

906
01:17:07,880 --> 01:17:10,880
And you can specify version ranges.

907
01:17:10,880 --> 01:17:13,840
So if you want to make certain that the,

908
01:17:14,640 --> 01:17:16,720
or specific versions,

909
01:17:16,720 --> 01:17:21,720
if you want to make certain that you get a certain version.

910
01:17:22,720 --> 01:17:26,120
And the reason why you might want to do this

911
01:17:26,120 --> 01:17:28,520
is that like about the versioning scheme.

912
01:17:28,520 --> 01:17:29,740
So most of the packages,

913
01:17:29,740 --> 01:17:32,620
they apply a semantic versioning scheme

914
01:17:32,620 --> 01:17:37,620
where the first number is the major version of the package.

915
01:17:37,620 --> 01:17:40,500
The second version is this kind of like a minor version

916
01:17:40,500 --> 01:17:42,700
and the third one is like a patch version.

917
01:17:42,700 --> 01:17:44,300
And usually it's like the patch version

918
01:17:44,300 --> 01:17:46,540
shouldn't affect any functionality.

919
01:17:46,540 --> 01:17:49,540
There can be additions with minor versions

920
01:17:49,540 --> 01:17:52,740
and major versions can like throw everything out basically.

921
01:17:52,740 --> 01:17:55,300
So what you might want to do, for example,

922
01:17:55,300 --> 01:17:58,100
is to limit yourself to some major version

923
01:17:58,100 --> 01:18:03,100
or some minor version maybe, and this might be useful,

924
01:18:03,180 --> 01:18:08,180
especially if you want to create a consistent environment

925
01:18:10,340 --> 01:18:15,340
for a research project that you want somebody else

926
01:18:15,700 --> 01:18:18,140
to be able to replicate later on.

927
01:18:18,140 --> 01:18:22,380
So if you specify, okay, I want around these versions,

928
01:18:22,380 --> 01:18:26,740
it's good, then they can later on replicate

929
01:18:26,740 --> 01:18:31,540
same exact environment that you were using with the same exact versions. Of course, there might

930
01:18:31,540 --> 01:18:37,700
be small differences in the builds and whatever. If they're using Mac and you were using Linux or

931
01:18:37,700 --> 01:18:42,580
you were using Windows, they will always get different packages, but the functionality should

932
01:18:42,580 --> 01:18:50,100
be the same because they have the same versions. That way, if you pin the versions, you can make

933
01:18:50,100 --> 01:18:58,740
it possible to share the exact environment that you were using. But the problem with the pinning

934
01:18:58,740 --> 01:19:03,620
of the version can be often that if you pin yourself to the version, you basically pin

935
01:19:03,620 --> 01:19:10,260
yourself in time as well. So, if you lock yourself into a certain moment in time,

936
01:19:11,220 --> 01:19:18,180
and the time moves forward, you're now still in that time. So, if the code changes, if there's

937
01:19:18,180 --> 01:19:26,900
new changes in the code, if there's upgrades, patches, if there's fixes, if there's security

938
01:19:26,900 --> 01:19:34,660
bugs fixed, you won't see those because you're still living in the past. And if you want your

939
01:19:34,660 --> 01:19:44,420
code to be reusable and if you want your code to live instead of being stuck into a certain time,

940
01:19:44,420 --> 01:19:52,180
you usually want to have it unpinned. So what you might do in a library, let's say,

941
01:19:52,180 --> 01:19:57,140
if you write a project or something, you might want to have one environment file for replicating

942
01:19:57,140 --> 01:20:03,940
your results and one environment file with three versions that just define, okay, these are the

943
01:20:04,500 --> 01:20:10,580
versions that you need. And then when you see in your GitHub issues or wherever you have published

944
01:20:10,580 --> 01:20:17,060
your code you see somebody say that okay now the code broke like now some dependency came along and

945
01:20:17,060 --> 01:20:23,060
now it doesn't work anymore then you can say or maybe do you have you already have a test to check

946
01:20:23,780 --> 01:20:30,820
for version updates then you can then say that okay like okay now I need to pin the version

947
01:20:30,820 --> 01:20:36,420
because now there was a breaking change so in that case maybe shall we should mention a little

948
01:20:36,420 --> 01:20:41,620
bit like best practices here for example if you can keep your requirement file together with the

949
01:20:41,620 --> 01:20:48,420
code version controlled so that version of the code is for this requirement file because there

950
01:20:48,420 --> 01:20:56,180
are i have used many times for example even simple numpy like way based the syntax which deprecates

951
01:20:56,180 --> 01:21:02,180
so it will it will break in another version of numpy so if you can keep the code and the

952
01:21:02,180 --> 01:21:06,780
the requirement file together. And also, if you can go to the next step, there we have

953
01:21:06,780 --> 01:21:12,300
like a continuous, like a CI-CD pipeline, they call it, you know, continuous integration

954
01:21:12,300 --> 01:21:19,020
delivery pipelines where we test the code with that requirement file and produce some

955
01:21:19,020 --> 01:21:26,540
results. Do you think we have to think that deep or is there a simple way to do this?

956
01:21:26,540 --> 01:21:29,940
How do we keep the requirement and the code closer?

957
01:21:29,940 --> 01:21:40,660
Yeah, so one thing you can do is like you can use these continuous, like if you have a product that

958
01:21:40,660 --> 01:21:45,540
you have created you can use this continuous integration to check the versions and if there's

959
01:21:45,540 --> 01:21:51,540
something coming from upstream so-called, like if there's something coming from the dependencies

960
01:21:51,540 --> 01:21:58,660
that okay like now they have changed something. Usually in Python people they do these deprecation

961
01:21:58,660 --> 01:22:04,500
warnings. So if you see ever these deprecation warnings when you launch your code, that usually

962
01:22:04,500 --> 01:22:10,500
means that stuff is going away in the next version. Usually people give these deprecation

963
01:22:10,500 --> 01:22:17,060
warnings beforehand and you can use those to see that maybe I need to do a small modification

964
01:22:17,060 --> 01:22:27,700
for the code because stuff can change in the future. But this is, I would say, for the people

965
01:22:27,700 --> 01:22:35,220
who really want to maintain their own libraries for those people.

966
01:22:38,740 --> 01:22:45,140
In the notes, there's lots of interesting talks about like, okay, should you have one

967
01:22:45,140 --> 01:22:51,460
environment to rule them all or should you really have one environment for every package,

968
01:22:51,460 --> 01:22:57,060
every project that you're working on? And that is, of course, a matter of opinion.

969
01:22:57,700 --> 01:23:05,220
But my own personal opinion is that it's usually better to have an environment for a project

970
01:23:05,220 --> 01:23:16,580
because then you can specify what exact things this project needs and other people can reuse it.

971
01:23:16,580 --> 01:23:22,340
Because if you put everything, all of your packages into one big environment, you will get

972
01:23:22,340 --> 01:23:28,020
an environment that works with many of your projects. But then if other person asks, okay,

973
01:23:28,020 --> 01:23:34,100
what do I need to use your code? And you have to provide them with a document of like, you need

974
01:23:34,100 --> 01:23:39,380
these 500 packages, then they're not going to be very happy because they think that, okay,

975
01:23:39,380 --> 01:23:47,140
your project is using way, way too many packages. Like it looks unwieldy and maybe they cannot even

976
01:23:47,140 --> 01:23:53,620
replicated. So having like separate at least four different projects is usually like a good

977
01:23:53,620 --> 01:24:01,620
approach. One thing that I probably didn't mention is that Conda and Pip, they cache

978
01:24:01,620 --> 01:24:05,940
many of the package installations, especially Conda does it so that like if you install the

979
01:24:05,940 --> 01:24:11,220
same package into multiple environments, it's actually not using any Modak disk space.

980
01:24:11,220 --> 01:24:18,560
It creates a new file, so in some faster environments it can be problematic, but it doesn't use

981
01:24:18,560 --> 01:24:22,660
any more disk space because it can reuse the same package that was installed in another

982
01:24:22,660 --> 01:24:23,660
environment.

983
01:24:23,660 --> 01:24:27,900
So, it does this caching kind of a thing.

984
01:24:27,900 --> 01:24:35,980
There's lots of magic underneath it, but it's not usually a big problem to create multiple

985
01:24:35,980 --> 01:24:36,980
environments.

986
01:24:36,980 --> 01:24:40,760
usually have something like, let's say, 20 environments.

987
01:24:40,760 --> 01:24:43,940
And whenever I don't need these environments, occasionally,

988
01:24:43,940 --> 01:24:46,580
I clean up most of them.

989
01:24:46,580 --> 01:24:48,220
And if I need to recreate them, I

990
01:24:48,220 --> 01:24:50,860
have the environment YAML to recreate them.

991
01:24:50,860 --> 01:24:54,620
So I don't really worry about deleting the environments ever.

992
01:24:54,620 --> 01:24:58,100
I just delete them when I don't need them anymore.

993
01:24:58,100 --> 01:25:01,220
Of course, for research projects or long-term projects

994
01:25:01,220 --> 01:25:04,900
that can be not tenable, you want

995
01:25:04,900 --> 01:25:12,340
keep the same environment for a year or more. But usually it's every now and then it's a good idea

996
01:25:12,340 --> 01:25:19,060
to maybe recreate it to verify that nothing has changed. Like it still works and then other

997
01:25:19,060 --> 01:25:26,580
people can reuse it. Because it's all about also sharing. Like we rarely do projects just in our

998
01:25:26,580 --> 01:25:34,420
own world. We often need to have other people verify our results, share our results. And for

999
01:25:34,420 --> 01:25:37,900
For that, we need to be able to tell them how to install stuff.

1000
01:25:38,420 --> 01:25:40,980
And these tools make it possible to install stuff.

1001
01:25:41,020 --> 01:25:45,860
But if you don't know how to share, like you can give them instructions, of course,

1002
01:25:45,860 --> 01:25:49,740
like you can give, write them instructions, but wouldn't it be, it'd be better that

1003
01:25:49,740 --> 01:25:53,500
the machines understood those instructions and those instructions, like the machines

1004
01:25:53,500 --> 01:25:54,940
would handle it for you.

1005
01:25:58,340 --> 01:26:02,780
So you used, you used like a very interesting word there, delete.

1006
01:26:02,780 --> 01:26:09,420
So, the ability to delete an environment without breaking everything else is also an advantage

1007
01:26:09,420 --> 01:26:11,940
when you do it separately.

1008
01:26:11,940 --> 01:26:18,480
So that's also an advantage with PIPen and also the Conda environments that you could

1009
01:26:18,480 --> 01:26:22,620
actually delete things without breaking your like the whole operating system.

1010
01:26:22,620 --> 01:26:28,020
How do you delete, do you use the Conda to delete or is it even safe to just delete the

1011
01:26:28,020 --> 01:26:29,020
folder?

1012
01:26:29,020 --> 01:26:31,180
Does it make a difference?

1013
01:26:31,180 --> 01:26:34,980
Yes, so you can delete usually the folder.

1014
01:26:34,980 --> 01:26:36,980
It's using the condice.

1015
01:26:36,980 --> 01:26:38,980
I would prefer that one.

1016
01:26:38,980 --> 01:26:41,140
Usually, you don't want to put stuff

1017
01:26:41,140 --> 01:26:43,700
into your work in the environment itself,

1018
01:26:43,700 --> 01:26:47,300
because if you delete it, then you lose that.

1019
01:26:47,300 --> 01:26:50,380
So you want to keep your own code outside

1020
01:26:50,380 --> 01:26:53,260
of that environment usually.

1021
01:26:53,260 --> 01:26:56,940
But I think we are past the break time.

1022
01:26:56,940 --> 01:27:01,660
So I think we should probably close the session.

1023
01:27:01,660 --> 01:27:05,100
There was a lot of interesting discussion in the notes.

1024
01:27:05,100 --> 01:27:07,660
I will try to answer as many as possible.

1025
01:27:07,660 --> 01:27:10,140
Hopefully this was helpful for you,

1026
01:27:10,140 --> 01:27:12,700
this kind of like a rambling talk.

1027
01:27:12,700 --> 01:27:15,140
Sarpike, do you have any closing thoughts on the?

1028
01:27:16,340 --> 01:27:21,340
Yeah, so I mean, I would like to focus maybe on one question

1029
01:27:22,380 --> 01:27:24,520
that there's a mentioning of containers.

1030
01:27:24,520 --> 01:27:31,520
So what is the benefit of following up this kind of packaging practice than a container, for example.

1031
01:27:31,520 --> 01:27:38,520
So even in a container that you set your environment and you could distribute it.

1032
01:27:38,520 --> 01:27:45,520
But even in that case, let's say in the example of Docker, for example, if you are creating your environment with a Docker file,

1033
01:27:45,520 --> 01:27:52,520
not getting an image and then doing random modifications and saving the image where you can't reproduce.

1034
01:27:52,520 --> 01:28:00,640
That's more closer to how, what you explained, but the Docker environments and other, it

1035
01:28:00,640 --> 01:28:05,240
takes it to another level of isolation.

1036
01:28:05,240 --> 01:28:11,320
In addition, there's a question about, because we used a lot of terms like libraries and

1037
01:28:11,320 --> 01:28:16,400
packages and what the differences are, with the basic understanding of this, maybe you

1038
01:28:16,400 --> 01:28:21,760
could understand more, but is there like a quick way to sort of distinguish between a

1039
01:28:21,760 --> 01:28:24,880
library and a package? I'm not sure you're ready for that question.

1040
01:28:24,880 --> 01:28:36,240
Yeah, yeah. I think that's a good one. So the library and package, like library can mean

1041
01:28:36,240 --> 01:28:42,000
something that is not a Python package as well. So if you think about, I don't know, let's say

1042
01:28:43,040 --> 01:28:49,440
NumPy uses plus libraries underneath it to do the matrix calculations and all kinds of stuff.

1043
01:28:49,440 --> 01:28:55,600
So those are like, people don't probably know what plus libraries are, but you don't need to know

1044
01:28:55,600 --> 01:29:03,200
because they are like dependencies, but they are written in C++ and Fortran. And like library is

1045
01:29:03,200 --> 01:29:10,000
like a generic term, I would say for any kind of installation that provides you with something you

1046
01:29:10,000 --> 01:29:16,640
can import maybe. But package is usually like means that it's a Python package that you can

1047
01:29:16,640 --> 01:29:25,120
like import. So with Conda, you can install both of these kinds of things. So sometimes you need

1048
01:29:25,920 --> 01:29:30,640
these low-level libraries, sometimes you need these high-level libraries, or high-level libraries

1049
01:29:30,640 --> 01:29:38,560
like Python packages. But it's basically indistinguishable. The words is a bit of a

1050
01:29:38,560 --> 01:29:48,400
salad. Python packages are basically the same as libraries, but there's also more libraries.

1051
01:29:48,400 --> 01:29:54,400
So it's like a Venn diagram where libraries are bigger than packages, and the packages are inside

1052
01:29:54,400 --> 01:30:05,920
the libraries diagram. But yeah, it's a bit hard to... Yeah, I know. But for this lesson, I think

1053
01:30:05,920 --> 01:30:11,120
it's okay to say both are more or less the same. One last question, because of time,

1054
01:30:12,720 --> 01:30:17,920
does the order matter in the YAML file, the requirement file or the Conda environment file?

1055
01:30:18,560 --> 01:30:22,960
Does it matter whether you mentioned NumPy before Matplotlib or after Matplotlib?

1056
01:30:22,960 --> 01:30:25,280
No, no, it's a list.

1057
01:30:26,000 --> 01:30:32,560
It's a list. Okay. I think that was very nice. We have a basic understanding

1058
01:30:32,560 --> 01:30:39,840
of what we should do if we want to avoid trouble in the future.

1059
01:30:39,840 --> 01:30:40,840
Yeah.

1060
01:30:40,840 --> 01:30:49,400
After the break, we can probably jump to the parallel, but if there's some really interesting

1061
01:30:49,400 --> 01:30:51,320
question, we'll maybe talk about that.

1062
01:30:51,320 --> 01:30:52,320
But let's have a break.

1063
01:30:52,320 --> 01:30:53,760
You all deserved it.

1064
01:30:53,760 --> 01:30:59,480
It's been a lot of new stuff for the start.

1065
01:30:59,480 --> 01:31:04,920
So should we have a 15-minute break, or what's the schedule?

1066
01:31:04,920 --> 01:31:05,920
Let's see.

1067
01:31:05,920 --> 01:31:06,920
We can see.

1068
01:31:06,920 --> 01:31:07,920
Yeah.

1069
01:31:07,920 --> 01:31:08,920
Yeah.

1070
01:31:08,920 --> 01:31:11,160
I think we need a 15-minute break before we have the next session.

1071
01:31:11,160 --> 01:31:13,160
So thank you.

1072
01:31:13,160 --> 01:31:19,320
Thank you for all of the questions, and I'll try to answer them in the notes as well.

1073
01:31:19,320 --> 01:31:20,320
OK.

1074
01:31:20,320 --> 01:31:20,880
See you after the break.

1075
01:31:29,480 --> 01:31:31,540
you

1076
01:31:59,480 --> 01:32:01,540
you

1077
01:32:29,480 --> 01:32:31,540
you

1078
01:32:59,480 --> 01:33:01,540
you

1079
01:33:29,480 --> 01:33:31,540
you

1080
01:33:59,480 --> 01:34:01,540
you

1081
01:34:29,480 --> 01:34:31,540
you

1082
01:34:59,480 --> 01:35:01,540
you

1083
01:35:29,480 --> 01:35:31,540
you

1084
01:35:59,480 --> 01:36:01,540
you

1085
01:36:29,480 --> 01:36:31,540
you

1086
01:36:59,480 --> 01:37:01,540
you

1087
01:37:29,480 --> 01:37:31,540
you

1088
01:37:59,480 --> 01:38:01,540
you

1089
01:38:29,480 --> 01:38:31,540
you

1090
01:38:59,480 --> 01:39:01,540
you

1091
01:39:29,480 --> 01:39:31,540
you

1092
01:39:59,480 --> 01:40:01,540
you

1093
01:40:29,480 --> 01:40:31,540
you

1094
01:40:59,480 --> 01:41:01,540
you

1095
01:41:29,480 --> 01:41:31,540
you

1096
01:41:59,480 --> 01:42:01,540
you

1097
01:42:29,480 --> 01:42:31,540
you

1098
01:42:59,480 --> 01:43:01,540
you

1099
01:43:29,480 --> 01:43:31,540
you

1100
01:43:59,480 --> 01:44:01,540
you

1101
01:44:29,480 --> 01:44:57,000
Hello, we're back.

1102
01:44:57,000 --> 01:45:12,440
with me here is [name]. Oh hi, hi, hi, [name]. So, now we begin a session. This will start

1103
01:45:12,440 --> 01:45:20,320
before lunch and end after lunch. So, by the way, according to our current plan, lunch

1104
01:45:20,320 --> 01:45:27,080
would begin and end 10 minutes later to fit our exercises and discussions a little bit

1105
01:45:27,080 --> 01:45:28,880
better.

1106
01:45:28,880 --> 01:45:34,840
And it's about parallel Python.

1107
01:45:34,840 --> 01:45:37,080
So what does this mean?

1108
01:45:37,080 --> 01:45:41,120
What do we have here?

1109
01:45:41,120 --> 01:45:47,320
I've often heard that Python is not very good for parallel programming, but in fact it can

1110
01:45:47,320 --> 01:45:48,320
be done.

1111
01:45:48,320 --> 01:45:49,720
Can you tell us about that?

1112
01:45:51,320 --> 01:45:52,840
Yes, thanks [name].

1113
01:45:52,840 --> 01:45:57,080
So you are right there,

1114
01:45:57,080 --> 01:46:01,760
in part because Python itself was not constructed

1115
01:46:01,760 --> 01:46:03,880
to be, I mean, for high performance

1116
01:46:03,880 --> 01:46:06,680
or in order to be parallel.

1117
01:46:07,760 --> 01:46:09,240
However, over the years,

1118
01:46:10,520 --> 01:46:13,920
a number of frameworks have been built up

1119
01:46:13,920 --> 01:46:17,840
so that one can then offload compute-heavy stuff

1120
01:46:17,840 --> 01:46:23,520
to other components, which then might have been written in a language like C or Fortran.

1121
01:46:23,520 --> 01:46:28,440
I guess that's the whole like NumPy, Pandas, all these other libraries we learned, they're

1122
01:46:28,440 --> 01:46:34,000
all written there. And that's one form of offloading to the efficient code.

1123
01:46:34,000 --> 01:46:44,640
Yes, precisely. And for fast computation in general, nowadays, it's so that it's very

1124
01:46:44,640 --> 01:46:51,280
important that one can strive to make whatever that algorithmically can be done in parallel

1125
01:46:51,280 --> 01:46:56,880
is good if and then also implement it to be in parallel. Because it's mainly so that the

1126
01:46:56,880 --> 01:47:06,320
hardware development and Moore's law has for a CPU type of processors, it saturated around the

1127
01:47:06,320 --> 01:47:14,480
year of 2005, so then clock frequencies came up to around 5 gigahertz and yeah you can press it up

1128
01:47:14,480 --> 01:47:17,120
up to three gigahertz,

1129
01:47:17,120 --> 01:47:19,040
you can press it up to five gigahertz,

1130
01:47:19,040 --> 01:47:20,320
but it's not,

1131
01:47:20,320 --> 01:47:22,780
we don't have this exponential growth anymore.

1132
01:47:24,440 --> 01:47:29,440
So what we'll see here is that Python has very good support

1133
01:47:31,960 --> 01:47:35,040
to run them on multiple cores in hardware.

1134
01:47:35,040 --> 01:47:38,040
Because a modern processor has a few cores

1135
01:47:40,840 --> 01:47:43,600
that can be anything from two, four, or eight.

1136
01:47:44,480 --> 01:47:52,400
at a big cluster or at the supercomputer you might have as many as 128 cores on one processor.

1137
01:47:54,240 --> 01:48:02,720
So coming here to what we'll talk about today. So the objective here is that you will get a

1138
01:48:02,720 --> 01:48:08,560
little bit introduction to what are different strategies for parallelizing code. We will

1139
01:48:08,560 --> 01:48:16,840
explore a little bit the so-called multi-processing package and also get an idea for when to

1140
01:48:16,840 --> 01:48:20,760
use more advanced packages or approaches.

1141
01:48:20,760 --> 01:48:24,100
Yeah, okay.

1142
01:48:24,100 --> 01:48:29,840
So how do we begin?

1143
01:48:29,840 --> 01:48:32,680
The modes of parallelism I see here.

1144
01:48:32,680 --> 01:48:33,520
So here,

1145
01:48:36,500 --> 01:48:37,960
how do we think about this?

1146
01:48:39,660 --> 01:48:43,940
Yeah, importantly, before one gets started to write code

1147
01:48:43,940 --> 01:48:46,180
or to make use of some libraries,

1148
01:48:46,180 --> 01:48:47,740
one need to understand a bit,

1149
01:48:48,900 --> 01:48:52,340
how is your compute problem algorithmically.

1150
01:48:53,940 --> 01:48:56,820
And this, sometimes it's, so to say,

1151
01:48:56,820 --> 01:48:59,380
just looking on the code or on your algorithm,

1152
01:48:59,380 --> 01:49:04,020
You can think of this might be rather straightforward

1153
01:49:04,020 --> 01:49:08,160
to figure out, but it's all too easy actually to misjudge.

1154
01:49:11,420 --> 01:49:14,460
And here are some five questions.

1155
01:49:14,460 --> 01:49:15,900
I will not read them up in full,

1156
01:49:15,900 --> 01:49:18,260
but here are different strategies

1157
01:49:18,260 --> 01:49:22,820
for reviewing a code or an algorithm

1158
01:49:22,820 --> 01:49:26,260
before then get going with parallelization.

1159
01:49:29,380 --> 01:49:35,300
here you have links to some frameworks in Python where you can actually compile your

1160
01:49:35,300 --> 01:49:41,140
code into Python. So that if you have very generic code that you want to run faster,

1161
01:49:41,140 --> 01:49:44,340
I mean also in a serial fashion, you can have a look on these.

1162
01:49:44,900 --> 01:49:50,900
So basically the idea is try to make your Python code faster without paralyzing by using

1163
01:49:52,980 --> 01:49:58,660
other tools, other libraries. Like okay, so if someone's done a lot of array work in pure Python,

1164
01:49:58,660 --> 01:50:05,220
first they would always use numpy first and try to use the built-in numpy function so you don't

1165
01:50:05,220 --> 01:50:10,500
need any python loops and that will give you a tremendous speed up and is really what you

1166
01:50:10,500 --> 01:50:18,100
should do anyway and then once you've done all of those you get to this question we're at now so

1167
01:50:18,100 --> 01:50:25,140
what are the parallel computing methods yes okay so here are some important regimes of parallel

1168
01:50:25,140 --> 01:50:31,100
compute and this is completely agnostic here to the specific programming

1169
01:50:31,100 --> 01:50:37,700
languages. So starting here with embarrassingly parallel that can be if

1170
01:50:37,700 --> 01:50:44,500
you have some task that you want to compute and you would like to do it for

1171
01:50:44,500 --> 01:50:52,020
might have some parameter and that parameter can take on say 200 different

1172
01:50:52,020 --> 01:50:56,700
values. And then whatever you do, starting with that parameter value, you

1173
01:50:56,700 --> 01:51:04,160
can do independently of each other. So in principle, you could launch it on 200

1174
01:51:04,160 --> 01:51:09,400
different computers. And when it's all done, you just collect the results. From a

1175
01:51:09,400 --> 01:51:15,260
technical point of view, this is an enabling factor, because then you don't

1176
01:51:15,260 --> 01:51:21,620
need to use any fast interconnect. You could just communicate, let's say, over

1177
01:51:21,620 --> 01:51:26,340
regular internet. There's been earlier sometimes screen saver programs that

1178
01:51:26,340 --> 01:51:29,380
distributed work and you would do a little task and then it was sent back to

1179
01:51:29,380 --> 01:51:35,460
some server. That's an example of it. On the other hand it's then a little bit

1180
01:51:35,460 --> 01:51:43,340
dull because it's so to say it doesn't enforce you to make the hands-on work to

1181
01:51:43,340 --> 01:51:51,700
get to make things to run efficiently. So we have here multithreading and

1182
01:51:51,700 --> 01:51:57,920
multiprocessing. Those are two important concepts. So multithreading, that is when

1183
01:51:57,920 --> 01:52:05,620
you have one instance of a program which operates with some amount of memory on

1184
01:52:05,620 --> 01:52:12,220
like your whole local computer or on a whole compute node if it is on a

1185
01:52:12,220 --> 01:52:20,220
cluster and the work within that task or process can be spread out over multiple

1186
01:52:20,220 --> 01:52:27,740
so-called threads and typically you would like to have one thread per core

1187
01:52:27,740 --> 01:52:34,020
in the processor. There's a little bit more details to it because sometimes you

1188
01:52:34,020 --> 01:52:40,740
would like to overload it to have twice as many threads as you have cores.

1189
01:52:40,740 --> 01:52:50,780
multiprocessing is that you launch more than one instance of your program and

1190
01:52:50,780 --> 01:52:56,300
this can then operate well it can be on your same computer or it could also be

1191
01:52:56,300 --> 01:53:06,720
on on separate computers that do not share the memory and in order then to

1192
01:53:06,720 --> 01:53:13,280
access data which is on the other nodes you need to explicitly pass data in

1193
01:53:13,280 --> 01:53:22,880
between and this is used in the particular libraries which are taking

1194
01:53:22,880 --> 01:53:26,840
part of this and here in Python we have one which is the multiprocessing

1195
01:53:26,840 --> 01:53:33,560
library. We will later here after lunch see also the so-called MPI library. Okay

1196
01:53:33,560 --> 01:53:39,560
So, to summarize this in my mind, in Bearsing Parallel you have completely separate stuff

1197
01:53:39,560 --> 01:53:48,280
running that might save different output files and everything, multi-threading you have something

1198
01:53:48,280 --> 01:53:54,400
running that uses multiple cores and it's all the same process of sharing the memory,

1199
01:53:54,400 --> 01:54:00,840
and then MPI is separate stuff running but everything's communicating with each other

1200
01:54:00,840 --> 01:54:10,600
well it's running which I guess is the hardest to use. Yes it can be hard and it requires a lot of

1201
01:54:10,600 --> 01:54:18,920
code to be written also in order to use it. So there is something in Python which is called

1202
01:54:18,920 --> 01:54:30,520
the global interpreter lock, DIL, and that restricts that the process can only run one

1203
01:54:30,520 --> 01:54:38,440
thread, and that has to do with that some parts of Python are not thread safe, so one

1204
01:54:38,440 --> 01:54:46,480
has to restrict it like this because otherwise non-deterministic execution could occur.

1205
01:54:46,480 --> 01:54:55,280
So we will here take a little bit look on an example and the code snippet here which

1206
01:54:55,280 --> 01:55:02,560
I have copied and here you don't need to type this you can just follow along and I have

1207
01:55:02,560 --> 01:55:14,280
put it here in a Jupyter notebook, paste it here and execute it.

1208
01:55:14,280 --> 01:55:21,820
this code is doing is that it's inverting a large matrix with random

1209
01:55:21,820 --> 01:55:28,660
elements so it's 4,000 by 4,000 square matrix okay here we got a time of 9

1210
01:55:28,660 --> 01:55:37,140
seconds you might have noticed that it was earlier stated 13 seconds so this is

1211
01:55:37,140 --> 01:55:41,860
one typical thing with parallel computing or okay this is not parallel

1212
01:55:41,860 --> 01:55:51,260
yet. But the actual performance can be quite dependent on your environment and on the load

1213
01:55:51,260 --> 01:56:04,180
of other processes on your system. So here are, and this is a bit difficult to display

1214
01:56:04,180 --> 01:56:09,780
here in the notebook, but there are some environment variables which you readily have available

1215
01:56:09,780 --> 01:56:14,460
if you are on Linux or on a Mac OS.

1216
01:56:14,460 --> 01:56:17,460
And that's OMP num threads.

1217
01:56:17,460 --> 01:56:22,460
Or could be here in Windows context, MKL num threads.

1218
01:56:23,420 --> 01:56:26,920
So that will then specify how programs are,

1219
01:56:26,920 --> 01:56:28,160
I mean, how many threads they have,

1220
01:56:28,160 --> 01:56:31,000
they should see or be able to set.

1221
01:56:39,780 --> 01:56:48,780
So we will now have an example of the use of the multiprocessing library of Python.

1222
01:56:48,780 --> 01:56:54,780
So this we will work with in, I'll actually do it in a terminal.

1223
01:56:54,780 --> 01:57:23,420
So, we can define this function, it calculates the square of an input argument and we can

1224
01:57:23,420 --> 01:57:36,280
And then we used this list function here, we used this map function to input to square

1225
01:57:36,280 --> 01:57:39,780
an array here of six elements.

1226
01:57:39,780 --> 01:57:49,780
So this is not parallel yet but can be used.

1227
01:57:49,780 --> 01:57:55,700
needed an extra blank line after the def square it was still doing the function

1228
01:57:55,700 --> 01:58:05,380
definition oh okay I'm sorry do I need to restart here or oh if you do this

1229
01:58:05,380 --> 01:58:12,540
yeah I'd say you probably need to do the square one def square and then push

1230
01:58:12,540 --> 01:58:34,220
enter twice yeah yeah here we go great so this all worked but this was still

1231
01:58:34,220 --> 01:58:44,060
then serial. We will then import a so-called multiprocessing library and

1232
01:58:44,060 --> 01:58:50,220
we use here the statement from multiprocessing import pool

1233
01:58:50,220 --> 01:59:19,780
And then I write it with pool as pool and I use pool and then the map function

1234
01:59:19,780 --> 01:59:32,900
square and then the same same list of arguments as earlier okay so this pool multi-processing it's

1235
01:59:34,980 --> 01:59:38,020
making multiple runners that can run it separately

1236
01:59:39,060 --> 01:59:43,220
and so it's sort of like automatically dividing it up and recombining it

1237
01:59:43,220 --> 01:59:51,700
all without us noticing. This was parallel right here. Yes and from a technical point

1238
01:59:51,700 --> 02:00:00,620
here this was by means of launching multiple processes. Here's a little warning

1239
02:00:00,620 --> 02:00:07,540
here that if you run interactive in a Jupyter notebook or through an

1240
02:00:07,540 --> 02:00:14,940
Python, IPython terminal. It could be that this will not work as intended. So, I actually

1241
02:00:14,940 --> 02:00:21,820
had some problems here when I was preparing. So, that's why I resorted to use it in the

1242
02:00:21,820 --> 02:00:34,420
terminal. One option here is to install and make use of the so-called multiprocess library,

1243
02:00:34,420 --> 02:00:44,780
which differs a little bit in implementation under the hood.

1244
02:00:44,780 --> 02:00:52,200
So we have now already come here to the first exercises, which will be on multiprocessing

1245
02:00:52,200 --> 02:00:55,320
and also on multithreading.

1246
02:00:55,320 --> 02:01:04,880
So tonight, we will go through a little bit what the exercise is about, and then we will

1247
02:01:04,880 --> 02:01:09,240
let you work on it.

1248
02:01:09,240 --> 02:01:18,600
So this is a bit more a different kind of compute problem.

1249
02:01:18,600 --> 02:01:23,880
We saw here earlier inversion of a matrix and also just squaring a function.

1250
02:01:23,880 --> 02:01:32,880
we will use a rather, I would say this is a rather neat way of calculating pi. So [name]

1251
02:01:32,880 --> 02:01:39,640
can you explain how do we do this? I forget who was the one that started this, but basically

1252
02:01:39,640 --> 02:01:47,600
it's you have a, the metaphor is you're randomly throwing darts onto a square. So we're generating

1253
02:01:47,600 --> 02:01:55,240
random points in a 1 by 1 square, and inside of that is a circle, and we can compute that

1254
02:01:55,240 --> 02:02:01,320
by squaring, like Pythagorean theorem.

1255
02:02:01,320 --> 02:02:07,020
So as we pick random points on the square, we know some proportion of those will fall

1256
02:02:07,020 --> 02:02:10,240
inside of the circle, and that's related to pi.

1257
02:02:10,240 --> 02:02:17,520
So by doing a little bit of math, we compute pi by generating lots and lots of random numbers.

1258
02:02:17,520 --> 02:02:24,580
So it's not an efficient way to compute pi by any means, but it is quite useful to show

1259
02:02:24,580 --> 02:02:30,360
multiprocessing because, basically, the more random number you can generate in parallel,

1260
02:02:30,360 --> 02:02:34,100
the faster you can do it.

1261
02:02:34,100 --> 02:02:37,060
And you can see the code here yourself.

1262
02:02:37,060 --> 02:02:50,580
It's a good exercise because it can be done in different flavors and also in different

1263
02:02:50,580 --> 02:02:55,420
programming languages.

1264
02:02:55,420 --> 02:02:58,860
So we could actually demonstrate that this works first.

1265
02:02:58,860 --> 02:03:06,780
So if you walk through the code here, first you have that you import the so-called random

1266
02:03:06,780 --> 02:03:16,940
library then we define a function here sample function and this is what then

1267
02:03:16,940 --> 02:03:24,460
throws all the darts and the central statement here this is the

1268
02:03:24,460 --> 02:03:30,380
statement here that checks then is the x and the y points this coordinates are

1269
02:03:30,380 --> 02:03:35,500
they within the unit circle?

1270
02:03:35,500 --> 02:03:39,260
And if so, then they increment this n inside circle with 1.

1271
02:03:42,100 --> 02:03:44,140
Here you have code one can calculate,

1272
02:03:44,140 --> 02:03:47,460
then how long time does it take?

1273
02:03:47,460 --> 02:03:53,060
And the final thing is that in order to get the value of pi,

1274
02:03:53,060 --> 02:03:55,140
we need to multiply with 4.

1275
02:03:55,140 --> 02:03:57,220
It's a normalization constant.

1276
02:03:57,220 --> 02:03:59,380
And then also to divide with the total number

1277
02:03:59,380 --> 02:04:00,880
or a dot thrown.

1278
02:04:04,060 --> 02:04:09,060
So we could demonstrate that this works.

1279
02:04:13,500 --> 02:04:15,540
Yeah, so that's the one that says,

1280
02:04:15,540 --> 02:04:18,060
is this random point inside of a circle?

1281
02:04:24,300 --> 02:04:28,460
So first, I copy here.

1282
02:04:29,380 --> 02:04:33,620
the import statement and the definition.

1283
02:04:33,620 --> 02:04:36,060
Yes, so note here that if you copy all of this here,

1284
02:04:36,060 --> 02:04:39,100
it might not.

1285
02:04:39,100 --> 02:04:41,580
So it's better you copy it piece by piece.

1286
02:04:41,580 --> 02:04:42,900
Right. Yeah. Okay. Got it.

1287
02:04:42,900 --> 02:04:44,300
If you copy it like this,

1288
02:04:44,300 --> 02:04:45,820
then you have first imported

1289
02:04:45,820 --> 02:04:47,580
the library and define your function.

1290
02:04:47,580 --> 02:04:48,340
Okay.

1291
02:04:48,340 --> 02:04:50,780
Then we can, with this statement here,

1292
02:04:50,780 --> 02:04:54,100
using the time it magic,

1293
02:04:54,100 --> 02:05:05,060
we can calculate we can measure how long time it takes to throw 1 million

1294
02:05:05,060 --> 02:05:15,180
darts guess we can hear about what half a second however we did here not assign

1295
02:05:15,180 --> 02:05:28,000
anything to do it again it assigned to the variables properly okay and then we

1296
02:05:28,000 --> 02:05:36,240
calculate pi and now with that little math we get the pi value okay well

1297
02:05:36,240 --> 02:05:42,920
that's not it's not it's not too bad but but still it's only it's only correct

1298
02:05:42,920 --> 02:05:45,780
with the first three digits.

1299
02:05:45,780 --> 02:05:46,620
Yeah.

1300
02:05:46,620 --> 02:05:50,640
So all of the zero here is wrong.

1301
02:05:50,640 --> 02:05:52,780
That's an aspect of this algorithm

1302
02:05:52,780 --> 02:05:54,260
not being that efficient.

1303
02:05:54,260 --> 02:05:59,260
We have 1 million darts to get three digits of accuracy.

1304
02:05:59,460 --> 02:06:00,300
Yeah.

1305
02:06:01,820 --> 02:06:02,660
Okay.

1306
02:06:02,660 --> 02:06:04,660
So now coming to the actual exercise

1307
02:06:04,660 --> 02:06:06,140
that you will work with.

1308
02:06:06,140 --> 02:06:11,140
And you will then use the multiprocessing pool.

1309
02:06:14,680 --> 02:06:19,680
And you can also try out the so-called

1310
02:06:22,720 --> 02:06:25,340
multiprocessing thread pool.

1311
02:06:25,340 --> 02:06:28,420
And that will then do this parallel work,

1312
02:06:28,420 --> 02:06:32,060
but instead of going over multiple processes,

1313
02:06:32,060 --> 02:06:34,660
it will go over multiple threads.

1314
02:06:36,140 --> 02:06:41,660
So start with the multiprocessing variant and if you have time you can then have a go on the

1315
02:06:41,660 --> 02:06:52,860
multi-threading variant and the idea now so it's now 10 to the full hour and the idea is that

1316
02:06:53,980 --> 02:07:03,020
we let you work for 20 minutes then however it's lunchtime so we will then go for the break and

1317
02:07:03,020 --> 02:07:05,180
And then [name], how do we do, do we reconvene

1318
02:07:05,180 --> 02:07:07,780
before lunch break on stream?

1319
02:07:07,780 --> 02:07:12,060
We could just go for an hour and 20 minutes lunch break

1320
02:07:12,060 --> 02:07:14,420
and let people decide how they allocate

1321
02:07:14,420 --> 02:07:17,220
the time themselves, maybe.

1322
02:07:17,220 --> 02:07:18,660
Yeah, I agree.

1323
02:07:18,660 --> 02:07:20,140
I think that sounds best.

1324
02:07:20,140 --> 02:07:24,620
And then, I mean, we will be then,

1325
02:07:24,620 --> 02:07:27,100
some of us will at any given point of time

1326
02:07:27,100 --> 02:07:29,380
be on the shared document.

1327
02:07:29,380 --> 02:07:34,140
So you can post questions there.

1328
02:07:34,140 --> 02:07:42,420
So perhaps, should we look on the shared document to see if there's something that we can bring

1329
02:07:42,420 --> 02:07:44,060
up for all?

1330
02:07:44,060 --> 02:07:51,300
There's been a lot of good questions there.

1331
02:07:51,300 --> 02:07:59,260
There was one with someone whose pool code, they tried to run the pool code, and it made

1332
02:07:59,260 --> 02:08:08,900
a problem I can switch to my notes share here let's see yeah so I said yes though

1333
02:08:08,900 --> 02:08:12,140
that we can see if there's some questions that directly relate to the

1334
02:08:12,140 --> 02:08:17,780
exercise yeah okay and then we can actually go through a little bit these

1335
02:08:17,780 --> 02:08:22,440
questions after the lunch break yeah I think there's nothing that we need to

1336
02:08:22,440 --> 02:08:31,000
answer before the exercise. There's this one that's semi-related about separating

1337
02:08:32,360 --> 02:08:37,640
or about separating the calculations but yeah I think we're good to go. Okay great so

1338
02:08:39,560 --> 02:08:48,920
and one last thing here so yes as usual there is a template solution but yeah so yes it is

1339
02:08:48,920 --> 02:08:54,600
naturally that don't don't look and it's too early so to say so it's nice if you

1340
02:08:54,600 --> 02:09:05,560
try it ever yeah good okay so see you then at 10 past the full hour well now

1341
02:09:05,560 --> 02:09:15,000
it's I put 15 past the full hour yes perhaps and that also because it's

1342
02:09:15,000 --> 02:09:19,440
You need to specify what hour, actually, because it's more than 20 minutes.

1343
02:09:19,440 --> 02:09:27,560
Yeah, I wrote it there in central European time also, so yeah, okay, great, great.

1344
02:09:27,560 --> 02:09:28,560
Sounds good.

1345
02:09:28,560 --> 02:09:30,560
See you after lunch.

1346
02:09:30,560 --> 02:09:32,560
Yep, see you, bye.

1347
02:09:45,000 --> 02:09:47,060
you

1348
02:10:15,000 --> 02:10:17,060
you

1349
02:10:45,000 --> 02:10:47,060
you

1350
02:11:15,000 --> 02:11:17,060
you

1351
02:11:45,000 --> 02:11:47,060
you

1352
02:12:15,000 --> 02:12:17,060
you

1353
02:12:45,000 --> 02:12:47,060
you

1354
02:13:15,000 --> 02:13:17,060
you

1355
02:13:45,000 --> 02:13:47,060
you

1356
02:14:15,000 --> 02:14:17,060
you

1357
02:14:45,000 --> 02:14:47,060
you

1358
02:15:15,000 --> 02:15:17,060
you

1359
02:15:45,000 --> 02:15:47,060
you

1360
02:16:15,000 --> 02:16:17,060
you

1361
02:16:45,000 --> 02:16:47,060
you

1362
02:17:15,000 --> 02:17:17,060
you

1363
02:17:45,000 --> 02:17:47,060
you

1364
02:18:15,000 --> 02:18:17,060
you

1365
02:18:45,000 --> 02:18:47,060
you

1366
02:19:15,000 --> 02:19:17,060
you

1367
02:19:45,000 --> 02:19:47,060
you

1368
02:20:15,000 --> 02:20:17,060
you

1369
02:20:45,000 --> 02:20:47,060
you

1370
02:21:15,000 --> 02:21:17,060
you

1371
02:21:45,000 --> 02:21:47,060
you

1372
02:22:15,000 --> 02:22:17,060
you

1373
02:22:45,000 --> 02:22:47,060
you

1374
02:23:15,000 --> 02:23:17,060
you

1375
02:23:45,000 --> 02:23:47,060
you

1376
02:24:15,000 --> 02:24:17,060
you

1377
02:24:45,000 --> 02:24:47,060
you

1378
02:25:15,000 --> 02:25:17,060
you

1379
02:25:45,000 --> 02:25:47,060
you

1380
02:26:15,000 --> 02:26:17,060
you

1381
02:26:45,000 --> 02:26:47,060
you

1382
02:27:15,000 --> 02:27:17,060
you

1383
02:27:45,000 --> 02:27:47,060
you

1384
02:28:15,000 --> 02:28:17,060
you

1385
02:28:45,000 --> 02:28:47,060
you

1386
02:29:15,000 --> 02:29:17,060
you

1387
02:29:45,000 --> 02:29:47,060
you

1388
02:30:15,000 --> 02:30:17,060
you

1389
02:30:45,000 --> 02:30:47,060
you

1390
02:31:15,000 --> 02:31:17,060
you

1391
02:31:45,000 --> 02:31:47,060
you

1392
02:32:15,000 --> 02:32:17,060
you

1393
02:32:45,000 --> 02:32:47,060
you

1394
02:33:15,000 --> 02:33:17,060
you

1395
02:33:45,000 --> 02:33:47,060
you

1396
02:34:15,000 --> 02:34:17,060
you

1397
02:34:45,000 --> 02:34:47,060
you

1398
02:35:15,000 --> 02:35:17,060
you

1399
02:35:45,000 --> 02:35:47,060
you

1400
02:36:15,000 --> 02:36:17,060
you

1401
02:36:45,000 --> 02:36:47,060
you

1402
02:37:15,000 --> 02:37:17,060
you

1403
02:37:45,000 --> 02:37:47,060
you

1404
02:38:15,000 --> 02:38:17,060
you

1405
02:38:45,000 --> 02:38:47,060
you

1406
02:39:15,000 --> 02:39:17,060
you

1407
02:39:45,000 --> 02:39:47,060
you

1408
02:40:15,000 --> 02:40:17,060
you

1409
02:40:45,000 --> 02:40:47,060
you

1410
02:41:15,000 --> 02:41:17,060
you

1411
02:41:45,000 --> 02:41:47,060
you

1412
02:42:15,000 --> 02:42:17,060
you

1413
02:42:45,000 --> 02:42:47,060
you

1414
02:43:15,000 --> 02:43:17,060
you

1415
02:43:45,000 --> 02:43:47,060
you

1416
02:44:15,000 --> 02:44:17,060
you

1417
02:44:45,000 --> 02:44:47,060
you

1418
02:45:15,000 --> 02:45:17,060
you

1419
02:45:45,000 --> 02:45:47,060
you

1420
02:46:15,000 --> 02:46:17,060
you

1421
02:46:45,000 --> 02:46:47,060
you

1422
02:47:15,000 --> 02:47:17,060
you

1423
02:47:45,000 --> 02:47:47,060
you

1424
02:48:15,000 --> 02:48:17,060
you

1425
02:48:45,000 --> 02:48:47,060
you

1426
02:49:15,000 --> 02:49:17,060
you

1427
02:49:45,000 --> 02:49:47,060
you

1428
02:50:15,000 --> 02:50:17,060
you

1429
02:50:45,000 --> 02:50:47,060
you

1430
02:51:15,000 --> 02:51:17,060
you

1431
02:51:45,000 --> 02:51:47,060
you

1432
02:52:15,000 --> 02:52:17,060
you

1433
02:52:45,000 --> 02:52:47,060
you

1434
02:53:15,000 --> 02:53:17,060
you

1435
02:53:45,000 --> 02:53:47,060
you

1436
02:54:15,000 --> 02:54:17,060
you

1437
02:54:45,000 --> 02:54:47,060
you

1438
02:55:15,000 --> 02:55:17,060
you

1439
02:55:45,000 --> 02:55:47,060
you

1440
02:56:15,000 --> 02:56:17,060
you

1441
02:56:45,000 --> 02:56:47,060
you

1442
02:57:15,000 --> 02:57:17,060
you

1443
02:57:45,000 --> 02:57:47,060
you

1444
02:58:15,000 --> 02:58:17,060
you

1445
02:58:45,000 --> 02:58:47,060
you

1446
02:59:15,000 --> 02:59:17,060
you

1447
02:59:45,000 --> 02:59:47,060
you

1448
03:00:15,000 --> 03:00:17,060
you

1449
03:00:45,000 --> 03:00:47,060
you

1450
03:01:15,000 --> 03:01:17,060
you

1451
03:01:45,000 --> 03:01:47,060
you

1452
03:02:15,000 --> 03:02:17,060
you

1453
03:02:45,000 --> 03:02:47,060
you

1454
03:03:15,000 --> 03:03:17,060
you

1455
03:03:45,000 --> 03:03:47,060
you

1456
03:04:15,000 --> 03:04:17,060
you

1457
03:04:45,000 --> 03:04:47,060
you

1458
03:05:15,000 --> 03:05:17,060
you

1459
03:05:45,000 --> 03:05:47,060
you

1460
03:06:15,000 --> 03:06:17,060
you

1461
03:06:45,000 --> 03:06:47,060
you

1462
03:07:15,000 --> 03:07:17,060
you

1463
03:07:45,000 --> 03:07:47,060
you

1464
03:08:15,000 --> 03:08:17,060
you

1465
03:08:45,000 --> 03:08:47,060
you

1466
03:09:15,000 --> 03:09:17,060
you

1467
03:09:45,000 --> 03:09:47,060
you

1468
03:10:15,000 --> 03:10:17,060
you

1469
03:10:45,000 --> 03:10:47,060
you

1470
03:11:15,000 --> 03:11:17,060
you

1471
03:11:45,000 --> 03:11:47,060
you

1472
03:12:15,000 --> 03:12:17,060
you

1473
03:12:45,000 --> 03:12:47,060
you

1474
03:13:15,000 --> 03:13:17,060
you

1475
03:13:45,000 --> 03:13:47,060
you

1476
03:14:15,000 --> 03:14:17,060
you

1477
03:14:45,000 --> 03:14:47,060
you

1478
03:15:15,000 --> 03:15:17,060
you

1479
03:15:45,000 --> 03:15:47,060
you

1480
03:16:15,000 --> 03:16:17,060
you

1481
03:16:45,000 --> 03:16:47,060
you

1482
03:17:15,000 --> 03:17:17,060
you

1483
03:17:45,000 --> 03:17:47,060
you

1484
03:18:15,000 --> 03:18:17,060
you

1485
03:18:45,000 --> 03:18:47,060
you

1486
03:19:15,000 --> 03:19:17,060
you

1487
03:19:45,000 --> 03:19:47,060
you

1488
03:20:15,000 --> 03:20:17,060
you

1489
03:20:45,000 --> 03:20:47,060
you

1490
03:21:15,000 --> 03:21:17,060
you

1491
03:21:45,000 --> 03:21:47,060
you

1492
03:22:15,000 --> 03:22:17,060
you

1493
03:22:45,000 --> 03:22:47,060
you

1494
03:23:15,000 --> 03:23:17,060
you

1495
03:23:45,000 --> 03:23:47,060
you

1496
03:24:15,000 --> 03:24:17,060
you

1497
03:24:45,000 --> 03:24:47,060
you

1498
03:25:15,000 --> 03:25:17,060
you

1499
03:25:45,000 --> 03:25:47,060
you

1500
03:26:15,000 --> 03:26:17,060
you

1501
03:26:45,000 --> 03:26:47,060
you

1502
03:27:15,000 --> 03:27:17,060
you

1503
03:27:45,000 --> 03:27:47,060
you

1504
03:28:15,000 --> 03:28:17,060
you

1505
03:28:45,000 --> 03:28:47,060
you

1506
03:29:15,000 --> 03:29:17,060
you

1507
03:29:45,000 --> 03:30:06,660
So, welcome back.

1508
03:30:06,660 --> 03:30:13,500
We hope that you, yeah, both had some, made some good progress with the exercise and also

1509
03:30:13,500 --> 03:30:18,300
that you've had a refreshing lunch break.

1510
03:30:18,300 --> 03:30:25,220
So [name], perhaps we can have a look on the HackMD to see where we, what we have.

1511
03:30:25,220 --> 03:30:29,140
I'll switch it here on my screen.

1512
03:30:29,140 --> 03:30:30,140
Yeah.

1513
03:30:30,140 --> 03:30:34,100
So what do we have going on here?

1514
03:30:34,100 --> 03:30:35,100
Right.

1515
03:30:35,100 --> 03:30:41,820
I think we'd like to, you can scroll up above this blue box because there were some questions

1516
03:30:41,820 --> 03:30:59,620
about or do you want to share so you can scroll directly maybe one thing we

1517
03:30:59,620 --> 03:31:05,500
should say is that there's lots of things that can go wrong with this so we

1518
03:31:05,500 --> 03:31:11,420
see there was a problem with using multi processing on Mac and a different module

1519
03:31:11,420 --> 03:31:19,860
multi-process worked. We had problems running on the cluster when we just

1520
03:31:19,860 --> 03:31:27,900
tried. So there's all kinds of stuff here and a normal course on parallel

1521
03:31:27,900 --> 03:31:34,340
computing would be a week or even like a whole graduate degree becoming really

1522
03:31:34,340 --> 03:31:40,900
good at this. So we don't expect that you can do everything right now. This is just

1523
03:31:40,900 --> 03:31:49,940
the basic introduction. So one reason why the behavior here is not always the side one is that

1524
03:31:51,220 --> 03:31:56,420
it's implemented a little bit different on different operating systems and it also that

1525
03:31:56,420 --> 03:32:01,940
you might have different defaults and whatever program that you're launching, let's say Jupyter

1526
03:32:01,940 --> 03:32:09,620
Lab, can only live within its box with a given amount of memory and a given amount of hardware.

1527
03:32:09,620 --> 03:32:19,020
So if you have launched JupyterLab and it has upfront only access to one CPU core, then

1528
03:32:19,020 --> 03:32:26,780
it doesn't matter if your programming is multi-parallelized because it will anyhow only have one core

1529
03:32:26,780 --> 03:32:27,780
available.

1530
03:32:27,780 --> 03:32:28,780
Right.

1531
03:32:28,780 --> 03:32:29,780
Yeah.

1532
03:32:29,780 --> 03:32:36,780
So, but yeah, so the questions from the screen now are on that theme, but if you just, yeah,

1533
03:32:36,780 --> 03:32:40,000
Now, if you scroll down and we could then say a few words

1534
03:32:40,000 --> 03:32:45,000
about the distinction between processes and threads.

1535
03:32:48,140 --> 03:32:50,380
So further, load the blue box.

1536
03:32:50,380 --> 03:32:51,220
Here we go.

1537
03:32:55,540 --> 03:32:58,140
And yes, exactly.

1538
03:32:58,140 --> 03:33:03,140
If you put that up to the front of the window.

1539
03:33:03,180 --> 03:33:04,060
Yeah, thanks.

1540
03:33:04,060 --> 03:33:09,060
Yeah, so here we have been working on it asynchronously.

1541
03:33:09,540 --> 03:33:12,340
So there are multiple answers here

1542
03:33:12,340 --> 03:33:14,180
and that's really nice

1543
03:33:14,180 --> 03:33:16,300
because there are different aspects of it.

1544
03:33:17,860 --> 03:33:22,860
So one person here also in one sentence,

1545
03:33:24,500 --> 03:33:27,140
what is the difference between processes and threads?

1546
03:33:28,660 --> 03:33:33,660
And I can highlight here that in one of the answers,

1547
03:33:33,660 --> 03:33:36,540
if you put the pointer down here in the middle [name],

1548
03:33:36,540 --> 03:33:40,700
then for example over like four computers

1549
03:33:40,700 --> 03:33:46,700
with each having two CPUs each and for these CPUs we have 10 cores per

1550
03:33:46,700 --> 03:33:50,620
CPU. That means that your hardware available

1551
03:33:50,620 --> 03:33:55,740
is a total of 80 cores but the 80 cores are

1552
03:33:55,740 --> 03:33:59,660
then spread out on four computers or you can

1553
03:33:59,660 --> 03:34:01,860
you can call it four nodes.

1554
03:34:01,860 --> 03:34:04,980
And here it's rather clear that

1555
03:34:04,980 --> 03:34:07,620
it's only via the interconnect network

1556
03:34:07,620 --> 03:34:09,660
in between the nodes that you can

1557
03:34:09,660 --> 03:34:11,380
exchange any information at all.

1558
03:34:12,660 --> 03:34:15,180
And with multi-threading,

1559
03:34:16,140 --> 03:34:20,580
you can leave them within one node,

1560
03:34:20,580 --> 03:34:25,260
but in order to pass information to the other nodes,

1561
03:34:25,260 --> 03:34:28,340
need to do it with explicit message passing.

1562
03:34:29,660 --> 03:34:35,700
And threads is then something that you populate on the course.

1563
03:34:35,700 --> 03:34:48,460
So in general, the product of the number of processes and threads, in general, that should

1564
03:34:48,460 --> 03:34:51,940
match the number of physical cores available.

1565
03:34:51,940 --> 03:34:58,720
Sometimes you can go up to double, which in this case here would be 160 threads.

1566
03:34:58,720 --> 03:35:03,200
it moved out to the bottom block you can keep the screen but if you move the

1567
03:35:03,200 --> 03:35:12,000
pointer to the second last peg yeah okay just another sorry sorry no no no it's

1568
03:35:12,000 --> 03:35:23,800
going no no go up I wanted just to highlight the processes yeah here here

1569
03:35:23,800 --> 03:35:32,920
Yeah, keep it there. So, here are the definitions that I wrote myself and a process,

1570
03:35:33,720 --> 03:35:38,440
they can also be called ranks or tasks in the context of MPI.

1571
03:35:40,600 --> 03:35:47,720
They are indices of a program that execute independently of each other within the

1572
03:35:47,720 --> 03:35:54,600
runtime that is provided by the operating system and each process uses a chunk of the memory which

1573
03:35:54,600 --> 03:36:04,520
is available so even though I mean that's then part of I mean the complete set of RAM memory on

1574
03:36:04,520 --> 03:36:13,560
the computer it will be logically separated so one process cannot access the memory of the other

1575
03:36:13,560 --> 03:36:21,400
processes and if you think about it that's that's nothing other than that let's say you run five

1576
03:36:21,400 --> 03:36:26,920
completely different programs on your computer then clearly the desired functionality is that

1577
03:36:26,920 --> 03:36:32,600
they do not interfere with each other and that you can be able to start them and to

1578
03:36:32,600 --> 03:36:40,360
close them down independently of each other. Threads they are spawned

1579
03:36:40,360 --> 03:36:47,140
with the index execution of a process and by construction they then do share

1580
03:36:47,140 --> 03:36:55,360
memory and obviously this is attractive because you don't need to do any

1581
03:36:55,360 --> 03:37:04,480
explicit parsing of memory but there can also be a number of pitfalls so for

1582
03:37:04,480 --> 03:37:10,080
instance if you would come if it comes to that more than one thread tries to

1583
03:37:10,080 --> 03:37:15,480
write or read to the same address in memory then you would have a race

1584
03:37:15,480 --> 03:37:24,240
condition where it's not deterministic. For instance if you read before or after

1585
03:37:24,240 --> 03:37:29,280
another thread was writing to an address. So a concept here is that we talk

1586
03:37:29,280 --> 03:37:36,360
about the programs being thread safe or not thread safe. This connects back then

1587
03:37:36,360 --> 03:37:46,840
this CIL, this lock which is implemented in Python for the beginning. So this is to avoid

1588
03:37:46,840 --> 03:38:00,240
this unsafe thread situation. Good. And there is actually, this is on modern hardware and

1589
03:38:00,240 --> 03:38:02,280
and there's actually a lot to this aspect

1590
03:38:02,280 --> 03:38:05,040
of processes and threads.

1591
03:38:05,040 --> 03:38:09,840
And we will not go into it now though.

1592
03:38:09,840 --> 03:38:13,020
So instead we can, if you go back

1593
03:38:13,020 --> 03:38:14,320
and share my screen, [name].

1594
03:38:14,320 --> 03:38:15,160
Okay.

1595
03:38:18,640 --> 03:38:19,460
There you go.

1596
03:38:19,460 --> 03:38:20,300
Yeah, okay.

1597
03:38:21,360 --> 03:38:23,680
So what does this mean in practice?

1598
03:38:23,680 --> 03:38:36,080
Yeah, in practice, it means that it's good to be aware of this, that threading can be

1599
03:38:36,080 --> 03:38:42,960
done only what, I mean, really physically on the hardware is thread memory.

1600
03:38:42,960 --> 03:38:47,400
So you will always be limited to the number, I mean, to the amount of memory and to the

1601
03:38:47,400 --> 03:38:58,400
amount of CPU cores that you have on one node or yeah or one computer. So I think

1602
03:38:58,400 --> 03:39:06,280
we can highlight a little bit what you were working with in the exercise. So

1603
03:39:06,280 --> 03:39:15,960
here I have here in my notebook here I have opened up the notebook I mean

1604
03:39:15,960 --> 03:39:22,280
following the template solution. So the first thing I will do here is that I

1605
03:39:22,280 --> 03:39:31,380
restart the kernel and clear output of all cells. And then I also increase

1606
03:39:31,380 --> 03:39:39,540
light to this window so it becomes easy to see. And here the serial code, you've

1607
03:39:39,540 --> 03:39:53,060
seen it already? I executed now cell by cell. I'm not seeing any changes in your

1608
03:39:53,060 --> 03:39:59,420
screen. Could the screen share be paused or something?

1609
03:39:59,420 --> 03:40:18,420
I'm sorry, yes, you're right, I'll stop sharing and re-share.

1610
03:40:18,420 --> 03:40:42,380
Okay, so here's the notebook and I'm executing the cells one by one, so first was only the

1611
03:40:42,380 --> 03:40:47,380
definition here, this function, and we time it.

1612
03:40:54,940 --> 03:40:59,740
Okay, so this is the normal sample, so no parallel.

1613
03:40:59,740 --> 03:41:01,660
Okay, so it takes about one second.

1614
03:41:01,660 --> 03:41:06,660
It was rather many milliseconds here, 900.

1615
03:41:06,660 --> 03:41:15,620
milliseconds here 900 yeah then exclude again to put it here in the

1616
03:41:15,780 --> 03:41:18,580
to the variable

1617
03:41:19,300 --> 03:41:26,740
and we get the answer so 954 is our reference value

1618
03:41:26,740 --> 03:41:31,860
then we will make make use of the multi-processing tool

1619
03:41:31,860 --> 03:41:47,900
So, here we use this statement, import it, and then we create one pool.

1620
03:41:47,900 --> 03:41:52,460
How many processors does your computer have, or how many cores?

1621
03:41:52,460 --> 03:41:53,460
That's a good point.

1622
03:41:53,460 --> 03:42:07,060
So, I do have as many as 8 processors on my Intel i7, however, often it somehow behaves

1623
03:42:07,060 --> 03:42:08,060
as 4.

1624
03:42:08,060 --> 03:42:16,780
In this case here, the performance, I get it, seems as if it's using 2.

1625
03:42:16,780 --> 03:42:28,300
We got here a result of 336, which is, so we had got a 900 a minute ago, but 650 something

1626
03:42:28,300 --> 03:42:32,120
would be more the representative value.

1627
03:42:32,120 --> 03:42:38,660
So it's on the order of a speedup of two.

1628
03:42:38,660 --> 03:42:40,580
Yeah, okay.

1629
03:42:40,580 --> 03:42:43,460
It's quite neat.

1630
03:42:43,460 --> 03:42:51,300
It's part of the reason it's slow is it takes the time to distribute the task and re-collect

1631
03:42:51,300 --> 03:42:55,060
them all and so on.

1632
03:42:55,060 --> 03:42:58,660
Yes, in general.

1633
03:42:58,660 --> 03:43:07,900
But in order for this to have a smaller spread in executing times, you need to work in as

1634
03:43:07,900 --> 03:43:11,940
clean an environment as possible.

1635
03:43:11,940 --> 03:43:21,900
Right now, my runtime is not clean because I have Zoom, Twitch, have our Zulip chat,

1636
03:43:21,900 --> 03:43:22,900
and that slows things down.

1637
03:43:22,900 --> 03:43:28,180
I mean, only the screen sharing over Zoom will impact the execution time here.

1638
03:43:28,180 --> 03:43:29,180
Yeah.

1639
03:43:29,180 --> 03:43:30,180
Yeah.

1640
03:43:30,180 --> 03:43:31,180
Okay.

1641
03:43:31,180 --> 03:43:32,180
So, yeah.

1642
03:43:32,180 --> 03:43:33,180
What?

1643
03:43:33,180 --> 03:43:34,180
Yeah.

1644
03:43:34,180 --> 03:43:37,680
So, yeah, what?

1645
03:43:37,680 --> 03:43:40,180
Yeah, so this was multiprocessing.

1646
03:43:40,180 --> 03:43:44,280
And here we got a speedup.

1647
03:43:44,280 --> 03:43:47,080
We'll now highlight here something

1648
03:43:47,080 --> 03:43:50,280
which is something we can do here in practice,

1649
03:43:50,280 --> 03:43:51,780
but we will not gain anything from it,

1650
03:43:51,780 --> 03:43:53,880
namely to use a thread pool.

1651
03:43:53,880 --> 03:44:08,720
Okay, so now this is using things in the same process, so sharing memory.

1652
03:44:08,720 --> 03:44:09,720
Yeah.

1653
03:44:09,720 --> 03:44:10,720
And all.

1654
03:44:10,720 --> 03:44:11,720
Okay.

1655
03:44:11,720 --> 03:44:12,720
Yes.

1656
03:44:12,720 --> 03:44:15,240
And this thread pool is no big that we then create.

1657
03:44:15,240 --> 03:44:21,320
It's from the same multiprocessing here, but just a user thread pool.

1658
03:44:21,320 --> 03:44:23,360
Here it took 800 milliseconds.

1659
03:44:23,360 --> 03:44:32,800
okay so that's longer yeah it's about the same time as for the serial code

1660
03:44:35,440 --> 03:44:36,800
then we close it and

1661
03:44:39,040 --> 03:44:46,800
yeah this closing statement here what what does it achieve

1662
03:44:46,800 --> 03:44:55,800
It's a way of giving back the resources to the runtime.

1663
03:44:55,800 --> 03:44:56,800
Okay.

1664
03:44:56,800 --> 03:44:57,800
Okay.

1665
03:44:57,800 --> 03:44:58,800
Yeah.

1666
03:44:58,800 --> 03:44:59,800
Yeah.

1667
03:44:59,800 --> 03:45:00,800
Yeah.

1668
03:45:00,800 --> 03:45:04,800
So, it's like deallocating the threads or whatever.

1669
03:45:04,800 --> 03:45:05,800
Okay.

1670
03:45:05,800 --> 03:45:13,640
So, we have three different ways of doing it and multiprocessing was fastest thread pool

1671
03:45:13,640 --> 03:45:18,320
and normal were fairly similar.

1672
03:45:19,640 --> 03:45:21,480
Yes, indeed.

1673
03:45:21,480 --> 03:45:23,560
And we can note here,

1674
03:45:23,560 --> 03:45:28,560
and that's written here also in the lesson material

1675
03:45:28,680 --> 03:45:33,680
that this implementation here of the thread pool

1676
03:45:35,320 --> 03:45:38,760
will then not release the JIL lock.

1677
03:45:39,640 --> 03:45:42,000
In contrast to the very first thing that we saw

1678
03:45:42,000 --> 03:45:47,000
with the inverse matrix calculation

1679
03:45:47,080 --> 03:45:49,200
which was done with NumPy

1680
03:45:49,200 --> 03:45:52,100
which can launch multiple threads.

1681
03:45:55,880 --> 03:45:56,720
Okay.

1682
03:46:02,100 --> 03:46:05,560
So here, just to highlight here,

1683
03:46:05,560 --> 03:46:08,960
running on a cluster or running on a multi-core computer,

1684
03:46:08,960 --> 03:46:13,120
where you might have set up then an environment

1685
03:46:13,120 --> 03:46:16,880
for general parallel computing with,

1686
03:46:18,080 --> 03:46:23,080
let's say, OpenMP, well, yeah, OpenMPI from Mesopotamia.

1687
03:46:25,240 --> 03:46:28,160
We will not explore this because I actually tried it out

1688
03:46:28,160 --> 03:46:31,600
earlier in the week, and I actually did not manage

1689
03:46:31,600 --> 03:46:35,920
to set up the environment for the runtime

1690
03:46:35,920 --> 03:46:38,940
to actually launch it properly.

1691
03:46:38,940 --> 03:46:43,940
So I, but we will instead move on to the next section here

1692
03:46:45,380 --> 03:46:49,260
which is MPI and that's where we'll spend

1693
03:46:49,260 --> 03:46:52,160
most of the remaining time of the lesson.

1694
03:46:53,460 --> 03:46:58,460
So message parsing interface is a framework

1695
03:46:59,020 --> 03:47:02,860
which is almost 35 years old.

1696
03:47:04,100 --> 03:47:08,460
So that's even then preceding the invention

1697
03:47:08,460 --> 03:47:13,460
piting or coinciding, plus minus, around 1990.

1698
03:47:14,460 --> 03:47:17,700
I didn't know it was that young, okay.

1699
03:47:19,140 --> 03:47:24,140
So this is a fairly low level means

1700
03:47:29,260 --> 03:47:33,260
of letting different processes communicate

1701
03:47:33,260 --> 03:47:44,840
communicate machine data during their simultaneous execution. So this is

1702
03:47:44,840 --> 03:47:49,020
something which is used a lot in the context of high-performance computing so

1703
03:47:49,020 --> 03:47:58,440
often here you are having programs written in C, C++ or Fortran and you

1704
03:47:58,440 --> 03:48:06,560
will then use this explicit function calls in order to send data or to receive

1705
03:48:06,560 --> 03:48:13,440
data. We have here some references we will soon come to an example of such

1706
03:48:13,440 --> 03:48:19,840
code but I can highlight here that they have some references here on GitHub and

1707
03:48:19,840 --> 03:48:28,080
and also here some blog posts where use is made of MPI

1708
03:48:28,080 --> 03:48:33,920
in context of Python programming so here you have complementary material

1709
03:48:34,480 --> 03:48:43,120
what we'll do now is look into a code snippet here where we are using

1710
03:48:43,120 --> 03:48:49,200
a specific library namely the MPI for Python library so that is

1711
03:48:49,200 --> 03:48:58,640
a library that provides the MPI framework to Python programs.

1712
03:49:03,200 --> 03:49:08,400
Okay, and is it like a close mapping to MPI libraries?

1713
03:49:10,720 --> 03:49:14,960
So I don't know MPI, but if I knew MPI, would this be pretty similar?

1714
03:49:14,960 --> 03:49:26,400
Yes, I mean you would recognize if you learned MPI and first in the context of C programming

1715
03:49:26,400 --> 03:49:32,840
or Fortran programming, you would recognize that many of the keywords and concepts are

1716
03:49:32,840 --> 03:49:42,280
essentially the same, it's just that the syntax is then distinct in each of the languages.

1717
03:49:42,280 --> 03:49:46,040
So yeah, we will run a few examples here,

1718
03:49:46,040 --> 03:49:49,000
but just to highlight, walk through the code here.

1719
03:49:49,000 --> 03:49:51,600
So it is the same program as earlier,

1720
03:49:51,600 --> 03:49:55,320
namely the calculation of PI, by means of throwing darts.

1721
03:49:57,040 --> 03:50:02,040
The yellow lines of code here are highlighting the MPI

1722
03:50:02,160 --> 03:50:05,240
for Python specific statements.

1723
03:50:05,240 --> 03:50:10,240
So first of all, an import statement,

1724
03:50:12,280 --> 03:50:22,720
Then we get available a number of functions.

1725
03:50:22,720 --> 03:50:31,080
So these three lines here you will see in pretty much any MPI program.

1726
03:50:31,080 --> 03:50:42,240
So here is a handle to the opportunity to interconnect between the processes.

1727
03:50:42,240 --> 03:50:49,000
Is this sort of like a representation of how many processes are involved in the calculation?

1728
03:50:49,000 --> 03:50:54,320
So com world means everything that's running as part of it.

1729
03:50:54,320 --> 03:51:02,280
Yeah, so this com here is actually an object so that in principle you can have more than

1730
03:51:02,280 --> 03:51:08,280
one of them.

1731
03:51:08,280 --> 03:51:15,240
And sometimes here in other languages you will have an explicit like initializing initializing

1732
03:51:15,240 --> 03:51:18,840
statement there which you don't have here.

1733
03:51:18,840 --> 03:51:26,680
These two lines here size equals get size and rank equals get rank.

1734
03:51:26,680 --> 03:51:34,080
They will then provide you with information about what you have available and how many

1735
03:51:34,080 --> 03:51:42,880
ranks will you use and yet again this is a matter of configuration so size is

1736
03:51:42,880 --> 03:51:47,040
often corresponding to the number of physical cores on your system is often

1737
03:51:47,040 --> 03:51:52,720
reasonable to set this so that you cannot go beyond this because you will

1738
03:51:52,720 --> 03:52:00,160
simply not gain anything however sometimes it's just set free so that you

1739
03:52:00,160 --> 03:52:06,880
can oversubscribe and run let's say five times as many ranks as you have course

1740
03:52:06,880 --> 03:52:16,720
in the system okay here here is something interesting so you can see

1741
03:52:16,720 --> 03:52:33,240
hear that if else statement here that you can often you will have with

1742
03:52:33,240 --> 03:52:37,600
MPI programming that you would like to do something only for one of the ranks

1743
03:52:37,600 --> 03:52:44,560
typically then the rank number zero is standing out because algorithmically in

1744
03:52:44,560 --> 03:52:52,520
a program is often so that even if it's some kind of computation perhaps most of it can

1745
03:52:52,520 --> 03:52:59,000
be done in parallel but there will be some some part of the code which not I mean naturally

1746
03:52:59,000 --> 03:53:06,040
cannot be done in parallel so for instance you would like to have reading of input file

1747
03:53:06,040 --> 03:53:12,800
often convenient to read it only once only by one rank and also writing output often

1748
03:53:12,800 --> 03:53:18,080
you would like to aggregate it so that you don't write it in parallel for each and every rank.

1749
03:53:26,960 --> 03:53:31,280
Yeah sorry okay this if else statement here this is actually setting the number of tasks here from

1750
03:53:31,920 --> 03:53:38,320
yeah like how much we're dividing it up so if there's multiple basically multiple processors

1751
03:53:38,320 --> 03:53:48,680
we divide the work into numbers okay yeah yeah and this rank state this if

1752
03:53:48,680 --> 03:53:55,000
statement here if rank is equal to zero then you will do well first of all this

1753
03:53:55,000 --> 03:54:02,920
calculation and you will get density printing of the output okay and that's

1754
03:54:02,920 --> 03:54:08,060
saying that only one processor should be doing the printing out but everything

1755
03:54:08,060 --> 03:54:10,780
else is the same for all of them?

1756
03:54:10,780 --> 03:54:11,500
Yeah.

1757
03:54:11,500 --> 03:54:13,580
OK, yeah.

1758
03:54:13,580 --> 03:54:23,180
And the thing that's actually being running is the or OK.

1759
03:54:27,780 --> 03:54:30,660
Yeah, and OK, so this is basically

1760
03:54:30,660 --> 03:54:35,220
it looks like in this example here, most of the code

1761
03:54:35,220 --> 03:54:39,280
is running separately with this extra decoration,

1762
03:54:39,280 --> 03:54:42,840
but the gather step is where it takes the output

1763
03:54:42,840 --> 03:54:45,600
from four separate processes

1764
03:54:45,600 --> 03:54:49,400
and brings them all together as one.

1765
03:54:49,400 --> 03:54:53,080
And does it basically sum them up together?

1766
03:54:55,960 --> 03:54:56,800
Yes.

1767
03:54:56,800 --> 03:54:58,960
And inside circle equals con that gather

1768
03:54:58,960 --> 03:55:00,080
and inside circle.

1769
03:55:01,520 --> 03:55:02,360
Yeah.

1770
03:55:02,360 --> 03:55:03,180
Okay.

1771
03:55:03,180 --> 03:55:04,200
That's great.

1772
03:55:04,200 --> 03:55:08,000
And you mentioned gather here.

1773
03:55:08,000 --> 03:55:11,760
And one thing to be aware of is this,

1774
03:55:11,760 --> 03:55:16,760
that as long as the processes are running in independently

1775
03:55:17,480 --> 03:55:19,760
and then exchange data with each other

1776
03:55:19,760 --> 03:55:22,520
in a sort of symmetric way,

1777
03:55:22,520 --> 03:55:24,840
let's say pairwise exchange data

1778
03:55:24,840 --> 03:55:26,800
or do it in so-called round robin

1779
03:55:26,800 --> 03:55:28,760
where you, let's say, you pass it,

1780
03:55:28,760 --> 03:55:31,440
you send something to a rank which is one higher

1781
03:55:31,440 --> 03:55:35,560
and you receive from what is one rank lower,

1782
03:55:35,560 --> 03:55:36,460
that's efficient.

1783
03:55:36,460 --> 03:55:38,400
But when you gather thing to calculate,

1784
03:55:38,400 --> 03:55:41,340
let's say the sum of partial sums,

1785
03:55:42,200 --> 03:55:45,380
then you sort of feed everything towards

1786
03:55:45,380 --> 03:55:47,880
what in the end becomes sort of like a bottleneck.

1787
03:55:48,860 --> 03:55:51,360
That's actually a really intricate thing

1788
03:55:51,360 --> 03:55:52,800
to get high performing.

1789
03:55:54,360 --> 03:55:58,960
Okay, but now we want to see some operations of this.

1790
03:55:58,960 --> 03:56:03,960
So I will then do it here on,

1791
03:56:05,080 --> 03:56:08,080
here I have a compute node on the supercomputer

1792
03:56:08,080 --> 03:56:09,560
that I have here in Stockholm.

1793
03:56:09,560 --> 03:56:10,400
Okay.

1794
03:56:11,480 --> 03:56:16,480
So this, the individual nodes here on compute CPU partition

1795
03:56:16,880 --> 03:56:21,880
have many more cores than I have on my local laptop.

1796
03:56:23,600 --> 03:56:26,280
So it's as many as 128 cores.

1797
03:56:26,280 --> 03:56:27,120
Yeah.

1798
03:56:27,120 --> 03:56:48,000
Yes, then I have put all of this code into a program calcmpi.py and you can see what

1799
03:56:48,000 --> 03:57:03,880
happens if you just launch it. Oh yeah right now I need to check yes that's

1800
03:57:03,880 --> 03:57:08,000
because I opened a new session here because I'd closed it down over lunch in

1801
03:57:08,000 --> 03:57:13,400
order to hold on the resources yeah so so basically now you're running it on

1802
03:57:13,400 --> 03:57:17,600
the real supercomputer and we'll demonstrate it's actually using MPI in

1803
03:57:17,600 --> 03:57:19,660
in a lot of processors.

1804
03:57:19,660 --> 03:57:24,480
So, yeah.

1805
03:57:25,660 --> 03:57:29,580
Okay, so here it ran, rank zero.

1806
03:57:29,580 --> 03:57:31,900
And this is running on just one processor

1807
03:57:31,900 --> 03:57:32,820
because I see-

1808
03:57:32,820 --> 03:57:33,880
Yeah, yeah.

1809
03:57:33,880 --> 03:57:36,180
I sort of, you can see here,

1810
03:57:37,220 --> 03:57:39,140
I started Python and then in the program.

1811
03:57:39,140 --> 03:57:42,940
So I'm sort of launching it as a regular Python script.

1812
03:57:42,940 --> 03:57:43,820
Okay, yeah.

1813
03:57:43,820 --> 03:57:46,160
And it's nice that the program executes

1814
03:57:46,160 --> 03:57:47,800
even if you do like that.

1815
03:57:47,800 --> 03:57:51,120
Yeah, I guess it doesn't have to run in parallel.

1816
03:57:51,120 --> 03:57:51,960
Okay.

1817
03:57:51,960 --> 03:57:52,800
Yeah.

1818
03:57:52,800 --> 03:57:54,880
And the right time here.

1819
03:57:54,880 --> 03:57:58,200
And it takes 2.2 seconds.

1820
03:57:58,200 --> 03:57:59,020
Yeah.

1821
03:57:59,020 --> 03:57:59,860
Yeah.

1822
03:58:00,840 --> 03:58:03,800
Now we add something here,

1823
03:58:03,800 --> 03:58:08,800
S run and two.

1824
03:58:09,200 --> 03:58:12,160
So S run is a program which we're using

1825
03:58:12,160 --> 03:58:16,480
on the particular computer that we have here in Stockholm.

1826
03:58:20,400 --> 03:58:22,920
Often it's called MPI run instead.

1827
03:58:22,920 --> 03:58:24,280
Okay, what did we get there?

1828
03:58:24,280 --> 03:58:25,120
1.49.

1829
03:58:27,400 --> 03:58:32,400
1.49 real seconds or 1.1 seconds in the Python code.

1830
03:58:34,200 --> 03:58:35,960
Exactly, and I think that's the number

1831
03:58:35,960 --> 03:58:37,000
we should concentrate on.

1832
03:58:37,000 --> 03:58:38,080
So we do like this.

1833
03:58:38,080 --> 03:58:47,480
We type, use the grep command to filter out that specific line in the output and we go

1834
03:58:47,480 --> 03:59:00,880
back to having it with only one rank, then we get 2.2, and I remove this time because

1835
03:59:00,880 --> 03:59:10,800
it's redundant. Yeah. Now we've got to 2.2 and 1.1 seconds. Yeah. So this is your perfect

1836
03:59:10,800 --> 03:59:19,480
speed up. So yeah, it was actually exactly twice as fast. Okay, if we add more. Point

1837
03:59:19,480 --> 03:59:30,840
Oh, still still crazy. Much more perfect than I would have expected. Yeah. Point to eight.

1838
03:59:30,840 --> 03:59:31,840
Okay.

1839
03:59:31,840 --> 03:59:32,840
Okay.

1840
03:59:32,840 --> 03:59:35,840
We lose a few percent.

1841
03:59:35,840 --> 03:59:38,840
Yeah.

1842
03:59:38,840 --> 03:59:40,840
Okay.

1843
03:59:40,840 --> 03:59:44,840
So how hard is it to design code to use MPI?

1844
03:59:44,840 --> 03:59:52,840
So, this isn't even a Python specific question, but when would you recommend people to look

1845
03:59:52,840 --> 03:59:59,840
into MPI and similar things?

1846
03:59:59,840 --> 04:00:10,120
Yeah, so my experience is that to write MPI code, it's good if you know really well what

1847
04:00:10,120 --> 04:00:15,120
algorithms do you want to implement, that you know that upfront, because if you're doing

1848
04:00:15,120 --> 04:00:21,840
prototyping with your, let's say, serial code or just like in pseudocode, at the same time

1849
04:00:21,840 --> 04:00:32,620
as you're writing the actual code, then it can easily be that the code then becomes difficult

1850
04:00:32,620 --> 04:00:40,840
to read and also that it's not, will not be able to reach the highest performance.

1851
04:00:40,840 --> 04:00:44,120
Of course, this is a matter also of experience and training.

1852
04:00:44,120 --> 04:00:52,120
Personally, I've used OpenMP threading quite a bit more in larger programming projects and

1853
04:00:52,120 --> 04:00:58,400
that has the advantage that you can, you have your serial code and then you can decorate

1854
04:00:58,400 --> 04:01:06,360
it with statements that enable the runtime to fork into multiple threads.

1855
04:01:06,360 --> 04:01:09,320
So that's very convenient,

1856
04:01:09,320 --> 04:01:14,320
but then one is also a bit more dependent on the compiler

1857
04:01:15,400 --> 04:01:18,000
or in this case, if it Python,

1858
04:01:18,000 --> 04:01:20,860
more dependent on the runtime to do a good job for you.

1859
04:01:24,800 --> 04:01:27,960
Okay, yes, one last launching here,

1860
04:01:27,960 --> 04:01:30,320
we go all the way up to 128.

1861
04:01:31,320 --> 04:01:32,640
Oh no, it's 118.

1862
04:01:32,640 --> 04:01:44,680
I will still gain a bit and then we put it to some large value and here you see

1863
04:01:44,680 --> 04:01:50,280
more processes requested than permitted we were not allowed to do that yeah

1864
04:01:50,280 --> 04:02:03,680
Good, so we will now come here to the final part of the lesson which is on coupling to

1865
04:02:03,680 --> 04:02:12,320
other languages and this also in turn connects rather nightly to the MPI for Pi because that's

1866
04:02:12,320 --> 04:02:22,360
That's actually one of the good constructions to do so.

1867
04:02:22,360 --> 04:02:25,320
So how much time should we spend?

1868
04:02:25,320 --> 04:02:32,120
It's almost 50 past the hour.

1869
04:02:32,120 --> 04:02:35,160
I suggest we use around five minutes.

1870
04:02:35,160 --> 04:02:36,160
Okay, yeah.

1871
04:02:36,160 --> 04:02:39,320
We can quickly summarize this and go on.

1872
04:02:39,320 --> 04:02:51,360
good. So yeah, what about coupling? So I guess this goes back to the original

1873
04:02:51,360 --> 04:02:58,720
thing we said. You can use libraries that do the speedups and then you don't need

1874
04:02:58,720 --> 04:03:04,640
to make your own parallel. So these are all ways to somehow connect to other

1875
04:03:04,640 --> 04:03:10,720
languages where things might be implemented more efficiently? Is that why we're here?

1876
04:03:13,040 --> 04:03:16,240
Yes, precisely. And we can note then that

1877
04:03:18,480 --> 04:03:25,600
the NumPy library, it already has the Python MPI. So we just import it in Python,

1878
04:03:26,400 --> 04:03:32,880
and then we can run it, and benefiting them from all the functionality, and also that it can run

1879
04:03:32,880 --> 04:03:36,720
and execute really fast, also in parallel mode.

1880
04:03:38,640 --> 04:03:42,480
If you haven't got it all yet in a library

1881
04:03:42,480 --> 04:03:44,040
because you're implementing something

1882
04:03:44,040 --> 04:03:45,960
which is completely custom,

1883
04:03:45,960 --> 04:03:48,880
so which really is your code,

1884
04:03:50,880 --> 04:03:55,880
then let's say you would like to do that in C++ or Fortran,

1885
04:03:56,040 --> 04:03:59,000
then you need to deal with the API

1886
04:03:59,000 --> 04:04:00,800
between the languages on your own.

1887
04:04:00,800 --> 04:04:10,680
So, a very important one here is the PyBind11 for C++.

1888
04:04:10,680 --> 04:04:18,160
So you can then write code in C++ and you can, I mean, interoperate it with the Python

1889
04:04:18,160 --> 04:04:19,160
code.

1890
04:04:19,160 --> 04:04:28,440
And algorithmically so that you typically let the Python code be what binds us all together.

1891
04:04:28,440 --> 04:04:30,600
So you will then launch execution

1892
04:04:30,600 --> 04:04:33,800
and also so close wrap up execution with the Python code.

1893
04:04:38,560 --> 04:04:41,920
You can do similar things with Fortran,

1894
04:04:41,920 --> 04:04:44,880
but then it's a bit more intricate

1895
04:04:44,880 --> 04:04:47,580
because you would then need to have like PI binding

1896
04:04:47,580 --> 04:04:49,160
or a CFFI or something.

1897
04:04:49,160 --> 04:04:51,960
And then also this ISO C binding.

1898
04:04:51,960 --> 04:04:53,720
So it becomes only in two steps.

1899
04:04:54,840 --> 04:04:57,480
So that's a little bit

1900
04:04:58,440 --> 04:05:05,760
is something which is holding back Fortran in modern day programming because it's more

1901
04:05:05,760 --> 04:05:13,400
intricate to interoperate it with other languages.

1902
04:05:13,400 --> 04:05:24,520
This variant here is what I know is has become very popular and you let compile languages

1903
04:05:24,520 --> 04:05:33,240
to Shared Memory Parallelization. And then you let Python do the message

1904
04:05:33,240 --> 04:05:39,560
parsage interfacing by means of mpy4py. So it's sort of like

1905
04:05:39,560 --> 04:05:45,360
you're using numpy on each node and mpi4py to communicate the results of

1906
04:05:45,360 --> 04:05:52,600
that numpy across the nodes. Yes, precisely. So that would be one

1907
04:05:52,600 --> 04:05:58,040
variant. I mean, here I'm calling numpy with test and Python API. It could also be that

1908
04:05:58,040 --> 04:06:07,640
you're within on each node run an instance of a C program, which you have connected

1909
04:06:07,640 --> 04:06:19,200
to your Python by means of these bindings.

1910
04:06:19,200 --> 04:06:33,160
So one thing to highlight here is that this approach here, this is actually scaling to

1911
04:06:33,160 --> 04:06:37,660
good performance on really large amount of resources.

1912
04:06:37,660 --> 04:06:43,380
So I know now, and it actually happens to be my roommate here at work, his code can

1913
04:06:43,380 --> 04:06:49,300
fill the whole Dodel code running with MPy for Python.

1914
04:06:49,300 --> 04:06:52,600
Kotel is your cluster?

1915
04:06:52,600 --> 04:06:53,600
Kotel is your cluster?

1916
04:06:53,600 --> 04:06:56,600
Dodel is our cluster, yeah.

1917
04:06:56,600 --> 04:07:05,240
So they run in a Jupyter notebook using MPy for Py and then run with C++ and also Qt or

1918
04:07:05,240 --> 04:07:08,360
HIP in order to run on GPU.

1919
04:07:08,360 --> 04:07:15,320
And now in the coming months or so, there's a prospect of getting a special time slot

1920
04:07:15,320 --> 04:07:17,960
to run it on all of Lumi.

1921
04:07:17,960 --> 04:07:25,960
And Lumi is a computer in Finland which is like one of the top five computers in the world.

1922
04:07:25,960 --> 04:07:26,960
Okay.

1923
04:07:26,960 --> 04:07:34,280
Well, I guess that certainly gets the idea that Python is slow, it's just a matter of

1924
04:07:34,280 --> 04:07:40,520
connecting it the right way and using the right stuff under it yeah yeah okay

1925
04:07:40,520 --> 04:07:49,840
precisely so I think we could actually wrap things up so there's something

1926
04:07:49,840 --> 04:07:54,500
here which is called task and task queues and that you can read up on your

1927
04:07:54,500 --> 04:07:59,920
own but you can perhaps go quickly to the shared document to see if there are

1928
04:07:59,920 --> 04:08:03,240
or something, you can bring up your stream.

1929
04:08:03,240 --> 04:08:05,680
Can you share or should I share?

1930
04:08:05,680 --> 04:08:06,800
I can share.

1931
04:08:06,800 --> 04:08:09,000
Okay, yeah, then you can scroll.

1932
04:08:11,960 --> 04:08:12,800
Okay.

1933
04:08:12,800 --> 04:08:30,920
Yeah, there was some good questions here.

1934
04:08:30,920 --> 04:08:36,160
So these questions like what is speed up compared to the number of cores, in some sense

1935
04:08:36,160 --> 04:08:39,920
it's an easy answer.

1936
04:08:39,920 --> 04:08:44,600
If it's perfectly scalable, it's one divided by the number of cores.

1937
04:08:44,600 --> 04:08:55,040
But also, there's so many different things that can affect it that it's somehow quite

1938
04:08:55,040 --> 04:08:56,040
a hard problem.

1939
04:08:56,040 --> 04:09:07,680
The numbers we got 10 minutes ago when we ran the MPI4Py code on the Dredel node, that

1940
04:09:07,680 --> 04:09:12,080
was sort of like ideal scaling.

1941
04:09:12,080 --> 04:09:16,880
In reality, you often get a bit less speed up.

1942
04:09:16,880 --> 04:09:17,880
Right.

1943
04:09:17,880 --> 04:09:18,880
Yeah.

1944
04:09:18,880 --> 04:09:26,520
If you get hyperscaling, better speed up than that, it's because when you run with only

1945
04:09:26,520 --> 04:09:34,640
one rank, then you have somehow exhausted resources somehow, so that you are having

1946
04:09:34,640 --> 04:09:39,920
to paging memory down to hard disk or similar.

1947
04:09:39,920 --> 04:09:40,920
Yeah.

1948
04:09:40,920 --> 04:09:43,840
Algorithmically, it's not possible.

1949
04:09:43,840 --> 04:09:44,840
Yeah.

1950
04:09:44,840 --> 04:09:45,840
Okay.

1951
04:09:45,840 --> 04:09:52,840
Any other final questions? I don't see, okay, there's one coming.

1952
04:09:52,840 --> 04:10:00,840
I think to keep the time, I think it's better we do this asynchronously.

1953
04:10:00,840 --> 04:10:11,840
Now it's five to the full hour, so that would mean that we have a ten minute break and be back five past, I think.

1954
04:10:11,840 --> 04:10:12,840
Yes.

1955
04:10:12,840 --> 04:10:13,840
Okay.

1956
04:10:13,840 --> 04:10:14,840
Good.

1957
04:10:14,840 --> 04:10:22,400
So, yeah, please keep asking questions, and if you think this is relevant to you, keep

1958
04:10:22,400 --> 04:10:26,200
exploring yourself.

1959
04:10:26,200 --> 04:10:32,840
There's some stuff you can do that has a high impact for not too much work, so, yeah.

1960
04:10:32,840 --> 04:10:33,840
Okay.

1961
04:10:33,840 --> 04:10:34,840
Great.

1962
04:10:34,840 --> 04:10:36,840
So, see you later then.

1963
04:10:36,840 --> 04:10:37,840
See you.

1964
04:10:37,840 --> 04:10:38,840
Bye.

1965
04:10:38,840 --> 04:10:39,840
Bye.

1966
04:10:39,840 --> 04:10:40,340
Bye.

1967
04:11:09,840 --> 04:11:11,900
you

1968
04:11:39,840 --> 04:11:41,900
you

1969
04:12:09,840 --> 04:12:11,900
you

1970
04:12:39,840 --> 04:12:41,900
you

1971
04:13:09,840 --> 04:13:11,900
you

1972
04:13:39,840 --> 04:13:41,900
you

1973
04:14:09,840 --> 04:14:11,900
you

1974
04:14:39,840 --> 04:14:41,900
you

1975
04:15:09,840 --> 04:15:11,900
you

1976
04:15:39,840 --> 04:15:41,900
you

1977
04:16:09,840 --> 04:16:11,900
you

1978
04:16:39,840 --> 04:16:41,900
you

1979
04:17:09,840 --> 04:17:11,900
you

1980
04:17:39,840 --> 04:17:41,900
you

1981
04:18:09,840 --> 04:18:11,900
you

1982
04:18:39,840 --> 04:18:41,900
you

1983
04:19:09,840 --> 04:19:11,900
you

1984
04:19:39,840 --> 04:19:41,900
you

1985
04:20:09,840 --> 04:20:39,800
Hello, welcome back to all three instructors here are greeting you.

1986
04:20:39,800 --> 04:20:43,960
Um, so now we go to our last real lesson,

1987
04:20:43,960 --> 04:20:46,040
which is packaging.

1988
04:20:46,040 --> 04:20:48,080
So I'll open that up here.

1989
04:20:49,000 --> 04:20:54,000
And yeah, so what is packaging?

1990
04:20:54,900 --> 04:20:56,740
Like, what does this even mean?

1991
04:20:58,860 --> 04:20:59,700
Right.

1992
04:20:59,700 --> 04:21:02,880
So in the previous episodes,

1993
04:21:02,880 --> 04:21:06,400
we have been introduced to a whole bunch of libraries.

1994
04:21:06,400 --> 04:21:11,400
We saw how to write scripts and work with Jupyter notebooks.

1995
04:21:12,720 --> 04:21:16,080
So that's how typically a study

1996
04:21:16,080 --> 04:21:18,840
or a research project starts up.

1997
04:21:18,840 --> 04:21:23,080
But at some point it would become much larger

1998
04:21:23,080 --> 04:21:28,080
than a script and you will have a lot of code lying around

1999
04:21:29,000 --> 04:21:32,680
unorganized and you will feel the need like,

2000
04:21:32,680 --> 04:21:35,840
okay, I need to have some structure for this.

2001
04:21:36,400 --> 04:21:37,400
Okay.

2002
04:21:37,400 --> 04:21:38,400
Yeah.

2003
04:21:38,400 --> 04:21:39,400
Yeah.

2004
04:21:39,400 --> 04:21:41,800
One way to do that is to create a package.

2005
04:21:41,800 --> 04:21:42,800
Yeah.

2006
04:21:42,800 --> 04:21:48,040
And by package, this means like the package you would do pip install for on the Python

2007
04:21:48,040 --> 04:21:52,520
package index or the conda packages.

2008
04:21:52,520 --> 04:21:54,520
So basically something that you install.

2009
04:21:54,520 --> 04:21:55,520
Yeah.

2010
04:21:55,520 --> 04:21:56,520
Yeah.

2011
04:21:56,520 --> 04:21:57,520
So.

2012
04:21:57,520 --> 04:22:00,800
How often do you make packages yourself?

2013
04:22:00,800 --> 04:22:04,600
Like how relevant is it really?

2014
04:22:04,600 --> 04:22:08,280
What kind of, do you have some examples?

2015
04:22:08,280 --> 04:22:17,000
I think usually I don't start off with the goal of making a package.

2016
04:22:17,000 --> 04:22:24,840
Usually it's a bunch of code lying around in a Git repository, for example, or in my

2017
04:22:24,840 --> 04:22:32,440
own laptop, but at some point you realize that, okay, this is for myself, I can use

2018
04:22:32,440 --> 04:22:40,440
it in my laptop X and let's say this remote supercomputer that I'm locking onto and I don't

2019
04:22:40,440 --> 04:22:48,440
want to send it back and forth. That's one way, one reason when you realize. Another reason is,

2020
04:22:48,440 --> 04:22:54,600
okay, you have friends and then they really like the code you write and you want to share it with

2021
04:22:54,600 --> 04:22:59,600
with your friends or your colleagues at that point.

2022
04:23:00,920 --> 04:23:04,960
So the summary is it's useful when other people,

2023
04:23:04,960 --> 04:23:06,600
when you want other people to use it

2024
04:23:06,600 --> 04:23:11,560
because it is easier than saying download this

2025
04:23:11,560 --> 04:23:13,920
and put it here and it's all this other stuff.

2026
04:23:13,920 --> 04:23:16,120
But you also use it just for yourself

2027
04:23:16,120 --> 04:23:19,640
if you're using it on multiple different computers you have.

2028
04:23:21,000 --> 04:23:24,120
Okay, so I guess that means it's not too hard.

2029
04:23:24,120 --> 04:23:28,800
So maybe you can tell me a bit about how you do that.

2030
04:23:30,760 --> 04:23:35,760
Right, so to have a good package,

2031
04:23:36,720 --> 04:23:39,920
you need Python code, of course.

2032
04:23:39,920 --> 04:23:43,720
Typically, these are not scripts.

2033
04:23:44,800 --> 04:23:49,800
They will contain classes or functions.

2034
04:23:49,800 --> 04:23:51,540
or functions.

2035
04:23:51,540 --> 04:23:53,760
So I'm not sure.

2036
04:23:53,760 --> 04:23:56,320
In the scripts episode, did we import some functions

2037
04:23:56,320 --> 04:23:57,080
from a script?

2038
04:23:57,080 --> 04:24:01,640
Oh, did we in, hmm.

2039
04:24:01,640 --> 04:24:04,480
I think there was, well, it could

2040
04:24:04,480 --> 04:24:06,920
have gone as far as making a separate file

2041
04:24:06,920 --> 04:24:09,800
and importing there, but.

2042
04:24:09,800 --> 04:24:11,480
Right.

2043
04:24:11,480 --> 04:24:15,000
Well, at least it imported standard library functions

2044
04:24:15,000 --> 04:24:17,440
and things like that, so.

2045
04:24:17,440 --> 04:24:17,960
Yeah.

2046
04:24:17,960 --> 04:24:25,560
Oh, all right. So the way import works in Python, it has a bunch of,

2047
04:24:27,400 --> 04:24:33,320
it looks at some other standard directories, but it also looks at your current directory.

2048
04:24:33,960 --> 04:24:41,000
So if you have a file name, for example, here underneath you see a file called adding.

2049
04:24:41,000 --> 04:24:45,400
So if you say import adding, then it

2050
04:24:45,400 --> 04:24:48,720
will load it into your console.

2051
04:24:48,720 --> 04:24:51,440
It's adding.

2052
04:24:51,440 --> 04:24:53,360
So yeah.

2053
04:24:53,360 --> 04:24:56,640
And the reason why I said it should not

2054
04:24:56,640 --> 04:24:59,320
be a script, because when you do this import,

2055
04:24:59,320 --> 04:25:01,680
it executes everything in that file.

2056
04:25:01,680 --> 04:25:06,000
So if you have, for example, a print, hello,

2057
04:25:06,000 --> 04:25:09,400
I am adding audio, then it will show up.

2058
04:25:09,400 --> 04:25:13,240
that it's not a good sign of a module.

2059
04:25:13,240 --> 04:25:13,880
Yeah.

2060
04:25:13,880 --> 04:25:14,520
OK, wait.

2061
04:25:14,520 --> 04:25:17,000
So let's try to summarize what this is.

2062
04:25:17,000 --> 04:25:19,760
So when you make the package, you

2063
04:25:19,760 --> 04:25:22,880
have to have the self-contained files there.

2064
04:25:22,880 --> 04:25:27,600
Usually, they'll be used by importing to other things.

2065
04:25:27,600 --> 04:25:31,600
So that means that it should be structured like a module.

2066
04:25:31,600 --> 04:25:34,040
So when you import it, it doesn't have any side effects

2067
04:25:34,040 --> 04:25:38,080
and doesn't affect, it doesn't run anything directly.

2068
04:25:38,080 --> 04:25:40,400
Although you can also package scripts

2069
04:25:40,400 --> 04:25:43,520
where it becomes a command line utility.

2070
04:25:43,520 --> 04:25:45,560
But I think we're not talking about that here.

2071
04:25:45,560 --> 04:25:48,280
But it's important to note.

2072
04:25:48,280 --> 04:25:49,520
Yeah, that's another thing.

2073
04:25:49,520 --> 04:25:51,600
So you can do that as well.

2074
04:25:51,600 --> 04:25:53,920
But yeah, try not to.

2075
04:25:53,920 --> 04:25:56,840
Yeah, but our demo here will be only packaging

2076
04:25:56,840 --> 04:25:58,480
in portable code.

2077
04:25:58,480 --> 04:26:02,880
But realize you can package the script also.

2078
04:26:02,880 --> 04:26:03,560
Absolutely.

2079
04:26:03,560 --> 04:26:04,280
OK.

2080
04:26:04,280 --> 04:26:07,680
Yeah, so to do this, what do we do?

2081
04:26:07,680 --> 04:26:10,680
Do we, should we start with the demo?

2082
04:26:10,680 --> 04:26:12,920
Yeah, I guess we can do that.

2083
04:26:12,920 --> 04:26:13,760
Okay.

2084
04:26:13,760 --> 04:26:16,080
And we'll talk through the rest.

2085
04:26:16,080 --> 04:26:17,160
Yeah.

2086
04:26:17,160 --> 04:26:18,000
Okay.

2087
04:26:18,000 --> 04:26:20,220
Unfortunately, Katz has to go.

2088
04:26:23,080 --> 04:26:24,360
Somehow he knows.

2089
04:26:25,320 --> 04:26:26,440
Okay.

2090
04:26:26,440 --> 04:26:30,340
Let me get my screen set up here.

2091
04:26:32,280 --> 04:26:35,540
And hope Katz doesn't do any typing for me.

2092
04:26:37,680 --> 04:26:43,560
It's sitting right here, occupying all my space.

2093
04:26:43,560 --> 04:26:50,120
OK, so yeah, so should I make a new directory for the?

2094
04:26:50,120 --> 04:26:51,800
Yeah, that is good.

2095
04:26:51,800 --> 04:26:56,480
And here, it's called project folder, but it can be anything.

2096
04:26:56,480 --> 04:27:00,320
OK, so should we call it calculator?

2097
04:27:00,320 --> 04:27:03,400
Is that what we're doing?

2098
04:27:03,400 --> 04:27:05,720
I think that can get confusing.

2099
04:27:05,720 --> 04:27:09,280
You can maybe call it CalculatorReturn, maybe.

2100
04:27:15,680 --> 04:27:18,200
OK, I'll call it this, I guess.

2101
04:27:18,200 --> 04:27:20,480
Yeah, that looks good.

2102
04:27:20,480 --> 04:27:22,640
Actually, I'll call it Calculator

2103
04:27:22,640 --> 04:27:26,880
because of a reason you'll see later.

2104
04:27:26,880 --> 04:27:30,440
OK, so I'll go into this directory.

2105
04:27:30,440 --> 04:27:33,840
And do I start adding these different files here?

2106
04:27:33,840 --> 04:27:36,560
Yeah, you can do that.

2107
04:27:36,560 --> 04:27:42,240
Okay, so I add a new Python file here.

2108
04:27:42,880 --> 04:27:45,600
So I'm clicking down here.

2109
04:27:45,600 --> 04:27:49,200
This shouldn't be a notebook, but should be an actual Python file.

2110
04:27:50,960 --> 04:27:52,800
So this should be called add.

2111
04:27:56,320 --> 04:27:57,120
I'm adding.

2112
04:27:59,520 --> 04:28:00,800
Let's come to the launcher.

2113
04:28:00,800 --> 04:28:07,800
another new Python file, rename it to Subtracting.

2114
04:28:12,800 --> 04:28:16,800
This needs to be saved.

2115
04:28:17,800 --> 04:28:24,800
Okay, close them and integrating.py.

2116
04:28:24,800 --> 04:28:25,300
Oops.

2117
04:28:30,640 --> 04:28:31,140
Rename.

2118
04:28:39,080 --> 04:28:39,600
OK.

2119
04:28:39,600 --> 04:28:42,160
And that is saved.

2120
04:28:42,160 --> 04:28:42,800
Right.

2121
04:28:42,800 --> 04:28:44,000
And I guess I'll close it.

2122
04:28:44,000 --> 04:28:45,320
Now the fourth file.

2123
04:28:45,320 --> 04:28:48,840
So can you tell me what init.py means?

2124
04:28:48,840 --> 04:28:51,280
This is an interesting name for a file.

2125
04:28:51,280 --> 04:28:52,080
Yeah.

2126
04:28:52,080 --> 04:28:56,120
So we haven't given it a good location yet.

2127
04:28:56,120 --> 04:29:01,560
So we'll have to add one more directory.

2128
04:29:01,560 --> 04:29:05,560
Maybe we describe that after that.

2129
04:29:05,560 --> 04:29:10,680
Should I be doing something different here?

2130
04:29:10,680 --> 04:29:14,600
So let's just fill in this init.py.

2131
04:29:14,600 --> 04:29:18,360
And we will move all these four files

2132
04:29:18,360 --> 04:29:22,160
into a subdirectory called calculator.

2133
04:29:22,160 --> 04:29:24,360
OK, I see what you mean.

2134
04:29:24,360 --> 04:29:25,480
I think I know.

2135
04:29:25,480 --> 04:29:26,600
OK.

2136
04:29:26,600 --> 04:29:32,080
So I make a new directory called calculator.

2137
04:29:32,080 --> 04:29:35,760
You should be able to drag and drop if I'm right.

2138
04:29:35,760 --> 04:29:36,680
Hey, it works.

2139
04:29:36,680 --> 04:29:39,400
OK, so I dragged it there.

2140
04:29:39,400 --> 04:29:43,160
So now this, what I see here, calculator archivist

2141
04:29:43,160 --> 04:29:46,800
would be like the project repository or the Git

2142
04:29:46,800 --> 04:29:48,000
repository.

2143
04:29:48,000 --> 04:29:49,000
Exactly.

2144
04:29:49,000 --> 04:29:50,000
Calculator contains the code.

2145
04:29:50,000 --> 04:29:51,000
Okay.

2146
04:29:51,000 --> 04:29:52,000
Right.

2147
04:29:52,000 --> 04:29:53,000
Yeah.

2148
04:29:53,000 --> 04:29:54,000
Yeah.

2149
04:29:54,000 --> 04:29:58,520
So the name of the directory here, the calculator, is important.

2150
04:29:58,520 --> 04:30:02,320
So the top directory can be anything.

2151
04:30:02,320 --> 04:30:11,360
And like I said, init.py, if you open it, and we can see it on the top as well.

2152
04:30:11,360 --> 04:30:12,360
Yeah.

2153
04:30:12,360 --> 04:30:13,360
Okay.

2154
04:30:13,360 --> 04:30:22,640
When we do import.calculator, we can also access these functions that init.py imports

2155
04:30:22,640 --> 04:30:23,640
it for us.

2156
04:30:23,640 --> 04:30:24,640
Okay.

2157
04:30:24,640 --> 04:30:25,640
Yeah.

2158
04:30:25,640 --> 04:30:26,640
So.

2159
04:30:26,640 --> 04:30:27,640
There's a good question in the notes.

2160
04:30:27,640 --> 04:30:29,620
Do we always need the period here?

2161
04:30:29,620 --> 04:30:33,480
So what does this mean in particular?

2162
04:30:33,480 --> 04:30:37,520
So there are two ways to import modules.

2163
04:30:37,520 --> 04:30:41,240
The first way is called absolute imports.

2164
04:30:41,240 --> 04:30:46,840
So that would be like writing from calculator.adding import

2165
04:30:46,840 --> 04:30:47,340
add.

2166
04:30:49,920 --> 04:30:53,200
But I think it's recommended, if you can,

2167
04:30:53,200 --> 04:30:54,800
get away with relative imports.

2168
04:30:54,800 --> 04:31:00,200
Do that in one of the Python pet beads, I think.

2169
04:31:00,200 --> 04:31:03,920
The reason is down the line, you decide to, OK,

2170
04:31:03,920 --> 04:31:07,160
calculator is not a good name for this package.

2171
04:31:07,160 --> 04:31:10,920
Then you don't have to go around and changing in every module

2172
04:31:10,920 --> 04:31:12,160
that you have.

2173
04:31:12,160 --> 04:31:16,360
So this is called, the one on the top

2174
04:31:16,360 --> 04:31:19,200
is called Relative Imports, and this one on the bottom

2175
04:31:19,200 --> 04:31:20,360
is Absolute.

2176
04:31:20,360 --> 04:31:22,600
OK, yeah, so I could do this instead.

2177
04:31:22,600 --> 04:31:26,440
But that means that it has to know what the package name is.

2178
04:31:26,440 --> 04:31:29,560
And if it's renamed, then everything changes.

2179
04:31:29,560 --> 04:31:34,960
This means import a module called Adding from right

2180
04:31:34,960 --> 04:31:36,520
next to where I am.

2181
04:31:36,520 --> 04:31:39,880
And don't look at, like if someone else installs

2182
04:31:39,880 --> 04:31:46,200
package named adding that's unrelated to yours without the dot it would try to do that yes okay

2183
04:31:47,000 --> 04:31:53,880
so okay i guess we don't need to go into details there but no it's something you can read about

2184
04:31:53,880 --> 04:32:03,400
more with python if you want okay exactly yes so now here we have a rough package ready although

2185
04:32:03,400 --> 04:32:06,280
though we have not installed it anywhere.

2186
04:32:06,280 --> 04:32:14,560
But still, if we go one directory up in the Jupyter,

2187
04:32:14,560 --> 04:32:21,080
and then we can open either a terminal or a Python console.

2188
04:32:21,080 --> 04:32:23,000
Let's see, terminal.

2189
04:32:23,000 --> 04:32:24,200
Terminal is good, yeah?

2190
04:32:24,200 --> 04:32:24,960
Yeah, there I am.

2191
04:32:24,960 --> 04:32:28,440
So I'm in Calculator RK Darst.

2192
04:32:28,440 --> 04:32:29,560
OK.

2193
04:32:29,560 --> 04:32:32,960
So here we can.

2194
04:32:32,960 --> 04:32:37,000
There is some example code just below in the...

2195
04:32:37,000 --> 04:32:39,000
Oh, okay.

2196
04:32:39,000 --> 04:32:39,840
Yeah.

2197
04:32:39,840 --> 04:32:40,660
Yeah.

2198
04:32:40,660 --> 04:32:42,120
Should I try running this from here?

2199
04:32:42,120 --> 04:32:45,000
Yeah, in a Python console, of course.

2200
04:32:45,000 --> 04:32:45,840
Yeah. Okay.

2201
04:32:45,840 --> 04:32:47,160
So there is Python.

2202
04:32:48,360 --> 04:32:51,360
I guess I just copy the whole thing and paste it.

2203
04:32:51,360 --> 04:32:52,200
Yeah.

2204
04:32:57,160 --> 04:32:58,360
Hmm.

2205
04:32:58,360 --> 04:32:59,360
Oh, there it goes.

2206
04:33:00,480 --> 04:33:01,360
All right.

2207
04:33:01,360 --> 04:33:02,200
So it worked.

2208
04:33:02,200 --> 04:33:04,720
So I have a folder called calculator

2209
04:33:04,720 --> 04:33:09,840
and it knew to import abstract and integral and it worked.

2210
04:33:09,840 --> 04:33:12,160
Exactly.

2211
04:33:12,160 --> 04:33:15,440
So like I said before, it looks at some places

2212
04:33:15,440 --> 04:33:22,280
but also the current directory, where to import from.

2213
04:33:22,280 --> 04:33:25,880
But this would not work if you are in another directory,

2214
04:33:25,880 --> 04:33:28,680
let's say, import calculator will just fail.

2215
04:33:28,680 --> 04:33:30,600
Should I try that?

2216
04:33:30,600 --> 04:33:31,960
Yeah, you can quickly show that.

2217
04:33:31,960 --> 04:33:34,520
OK, so I've gone up.

2218
04:33:34,520 --> 04:33:37,040
Yeah.

2219
04:33:37,040 --> 04:33:40,920
OK, because it's not in the Python environment,

2220
04:33:40,920 --> 04:33:42,640
but it could be there.

2221
04:33:42,640 --> 04:33:45,280
OK, but I guess let's not dwell into that,

2222
04:33:45,280 --> 04:33:49,960
because there could be a huge amount of questions there.

2223
04:33:49,960 --> 04:33:51,920
Yeah, yeah, yeah.

2224
04:33:51,920 --> 04:33:57,600
So when you are doing serious research,

2225
04:33:57,600 --> 04:34:00,000
you want it in your Python environment.

2226
04:34:00,000 --> 04:34:02,960
You don't want to think about where you are.

2227
04:34:02,960 --> 04:34:06,720
So in order to do that, we make it installable.

2228
04:34:06,720 --> 04:34:11,240
So that's about the next section.

2229
04:34:11,240 --> 04:34:12,600
It's about that.

2230
04:34:12,600 --> 04:34:19,320
OK, so we're going to make it installable with, I guess,

2231
04:34:19,320 --> 04:34:20,600
this one here.

2232
04:34:20,600 --> 04:34:21,280
Right.

2233
04:34:21,280 --> 04:34:23,040
OK.

2234
04:34:23,040 --> 04:34:26,640
Should I do it, add the new file?

2235
04:34:26,640 --> 04:34:28,320
Yeah, we can do that.

2236
04:34:28,320 --> 04:34:29,600
OK.

2237
04:34:29,600 --> 04:34:34,360
So I think I'm in the right place here.

2238
04:34:34,360 --> 04:34:38,080
OK, this extra file got added.

2239
04:34:38,080 --> 04:34:39,680
My shell makes it automatically.

2240
04:34:39,680 --> 04:34:41,040
Let's delete that.

2241
04:34:41,040 --> 04:34:45,680
OK, so I'm adding a new file, a new text file.

2242
04:34:45,680 --> 04:34:53,640
I will rename to pyproject.toml.

2243
04:34:53,640 --> 04:34:57,960
And I copy and paste.

2244
04:34:57,960 --> 04:35:02,160
So what did this just do, and why?

2245
04:35:02,160 --> 04:35:07,560
So this is a new specification, relatively new,

2246
04:35:07,560 --> 04:35:12,360
a few years old, actually, which tells you

2247
04:35:12,360 --> 04:35:16,720
what the package is called.

2248
04:35:16,720 --> 04:35:21,400
For example, this particular format is called a TOML format.

2249
04:35:21,400 --> 04:35:26,240
So it contains some tables, which, for example,

2250
04:35:26,240 --> 04:35:29,600
build system is a table, project is a table.

2251
04:35:29,600 --> 04:35:34,120
These are the minimum that you need to describe a package.

2252
04:35:34,120 --> 04:35:36,680
You need to at least say what the name is,

2253
04:35:38,160 --> 04:35:42,200
and maybe also the version, that's good.

2254
04:35:45,560 --> 04:35:50,440
Yeah, so it's good to rename it as well for the demo.

2255
04:35:50,440 --> 04:35:51,740
Yeah.

2256
04:35:51,740 --> 04:35:56,220
You can also describe who created the package,

2257
04:35:56,220 --> 04:35:58,320
where can you contact them

2258
04:35:58,320 --> 04:36:00,460
if you decide to upload this package

2259
04:36:01,500 --> 04:36:04,000
to a public index such as PyPI.

2260
04:36:05,180 --> 04:36:07,900
And I've seen that I can leave off my email

2261
04:36:07,900 --> 04:36:09,400
and it still works, so.

2262
04:36:11,340 --> 04:36:12,180
Right.

2263
04:36:13,620 --> 04:36:17,140
And the dependencies part is particularly useful

2264
04:36:17,140 --> 04:36:22,820
because that ensures that when you're installing this package,

2265
04:36:22,820 --> 04:36:28,340
you bring along whatever you assume exists.

2266
04:36:28,340 --> 04:36:31,380
For example, we have this integrating module

2267
04:36:31,380 --> 04:36:33,220
where we actually import scipy,

2268
04:36:33,220 --> 04:36:34,860
so we need to ensure that.

2269
04:36:34,860 --> 04:36:37,940
Yeah. So this is how all the things fit together.

2270
04:36:37,940 --> 04:36:41,420
So installing this, it knows it needs these other things,

2271
04:36:41,420 --> 04:36:44,660
just like we talked about in the dependency section.

2272
04:36:44,660 --> 04:36:47,140
So I guess every other Python package

2273
04:36:47,140 --> 04:36:51,260
says it needs thumbpy or sidepy or whatever it may be.

2274
04:36:51,260 --> 04:36:52,420
Exactly.

2275
04:36:52,420 --> 04:36:53,660
OK.

2276
04:36:53,660 --> 04:36:55,300
Yeah.

2277
04:36:55,300 --> 04:36:57,540
What now?

2278
04:36:57,540 --> 04:37:03,220
There are other details like readme, but it's OK.

2279
04:37:03,220 --> 04:37:05,500
Maybe you can create an empty readme file

2280
04:37:05,500 --> 04:37:07,020
because we specify that.

2281
04:37:07,020 --> 04:37:08,420
Sure.

2282
04:37:08,420 --> 04:37:10,820
It's a text file.

2283
04:37:10,820 --> 04:37:14,020
I'll rename this.

2284
04:37:14,020 --> 04:37:16,980
readme.md.

2285
04:37:16,980 --> 04:37:19,740
So just a short note, it's good practice

2286
04:37:19,740 --> 04:37:22,940
to give a good description so that people know.

2287
04:37:22,940 --> 04:37:26,500
And this gets automatically shown when you upload it.

2288
04:37:26,500 --> 04:37:30,740
We will see that in a while.

2289
04:37:30,740 --> 04:37:34,260
The other important file that we mentioned here

2290
04:37:34,260 --> 04:37:35,940
is the license file.

2291
04:37:44,020 --> 04:37:56,120
And it's, although it's not mentioned in the SpyProjectTerminal, but it's possible to link

2292
04:37:56,120 --> 04:38:00,500
that this is the license file, but we don't go into that now.

2293
04:38:00,500 --> 04:38:01,500
Yeah.

2294
04:38:01,500 --> 04:38:02,500
Okay.

2295
04:38:02,500 --> 04:38:03,500
Yeah.

2296
04:38:03,500 --> 04:38:12,460
So, shall we, yeah, there are some more notes.

2297
04:38:12,460 --> 04:38:23,500
I try to do something so there's a node right so this is this is a if you run

2298
04:38:23,500 --> 04:38:29,200
into a small bug and then let's say you found a bug in x-ray and it got fixed

2299
04:38:29,200 --> 04:38:35,680
and then you want to use that latest bleeding-edge version of x-ray yeah but

2300
04:38:35,680 --> 04:38:39,160
it's they haven't released it yet so that you can do something like that as

2301
04:38:39,160 --> 04:38:43,720
So this is installing it straight from GitHub

2302
04:38:43,720 --> 04:38:44,880
without it being released.

2303
04:38:44,880 --> 04:38:45,880
OK, yeah.

2304
04:38:45,880 --> 04:38:46,840
Exactly.

2305
04:38:46,840 --> 04:38:51,480
And you can find more of the syntax on these links below.

2306
04:38:51,480 --> 04:38:52,480
Yeah.

2307
04:38:52,480 --> 04:38:53,520
OK.

2308
04:38:53,520 --> 04:38:55,840
Right.

2309
04:38:55,840 --> 04:39:00,680
So now it's time for an exercise so people who are following

2310
04:39:00,680 --> 04:39:02,880
can try this out.

2311
04:39:02,880 --> 04:39:03,880
Should.

2312
04:39:03,880 --> 04:39:08,640
OK, so basically they would do everything that I just did.

2313
04:39:08,640 --> 04:39:13,760
But OK, should I demonstrate this installation step

2314
04:39:13,760 --> 04:39:16,000
to see if it works?

2315
04:39:16,000 --> 04:39:17,040
Yeah, yeah.

2316
04:39:17,040 --> 04:39:19,720
And maybe some might have forgotten

2317
04:39:19,720 --> 04:39:21,840
how to create a virtual environment.

2318
04:39:21,840 --> 04:39:22,800
Oh, OK.

2319
04:39:22,800 --> 04:39:23,720
Yeah.

2320
04:39:23,720 --> 04:39:28,720
So I'll make a new terminal here.

2321
04:39:28,720 --> 04:39:32,400
Close some of these things.

2322
04:39:32,400 --> 04:39:38,520
OK, so here I am in my Python 4 scientific computing directory.

2323
04:39:38,520 --> 04:39:40,680
The ls command lists what's here.

2324
04:39:40,680 --> 04:39:42,840
Here's the calculator.

2325
04:39:42,840 --> 04:39:45,960
So I should make a new virtual environment.

2326
04:39:45,960 --> 04:39:57,880
So that would be Python minus vn and then vn,

2327
04:39:57,880 --> 04:40:01,360
just to keep things in.

2328
04:40:01,360 --> 04:40:05,520
And then now we need to activate it.

2329
04:40:05,520 --> 04:40:13,600
So in Linux and macOS, it will be source vn slash bin slash

2330
04:40:13,600 --> 04:40:15,760
activate.

2331
04:40:15,760 --> 04:40:16,840
OK, like this?

2332
04:40:19,560 --> 04:40:22,400
No, just you don't need to activate it.

2333
04:40:22,400 --> 04:40:24,760
Never mind.

2334
04:40:24,760 --> 04:40:25,760
Yes, yeah.

2335
04:40:25,760 --> 04:40:26,520
Yes.

2336
04:40:26,520 --> 04:40:28,280
Yeah, OK.

2337
04:40:28,280 --> 04:40:33,560
And if you're on Windows, it will be vn scripts activate,

2338
04:40:33,560 --> 04:40:35,440
I think.

2339
04:40:35,440 --> 04:40:36,520
without the source.

2340
04:40:36,520 --> 04:40:37,880
Yeah.

2341
04:40:37,880 --> 04:40:40,600
And now I try to pip install it.

2342
04:40:40,600 --> 04:40:41,440
Right.

2343
04:40:41,440 --> 04:40:44,960
We can just quickly show that pip list

2344
04:40:44,960 --> 04:40:49,040
before we do that to show that it's completely empty.

2345
04:40:49,040 --> 04:40:50,080
OK.

2346
04:40:50,080 --> 04:40:50,600
Yeah.

2347
04:40:50,600 --> 04:40:51,560
Yeah.

2348
04:40:51,560 --> 04:40:53,720
And now you can do that.

2349
04:40:53,720 --> 04:40:58,440
Pip install editable.

2350
04:40:58,440 --> 04:41:03,480
And then that should work, I think.

2351
04:41:03,480 --> 04:41:04,160
Yeah.

2352
04:41:04,160 --> 04:41:09,680
It says obtaining file, downloading SciPy and NumPy.

2353
04:41:09,680 --> 04:41:12,320
So there it just found the dependencies

2354
04:41:12,320 --> 04:41:15,160
and installed them automatically.

2355
04:41:15,160 --> 04:41:16,520
That's good.

2356
04:41:16,520 --> 04:41:18,120
Yeah.

2357
04:41:18,120 --> 04:41:22,320
And it also makes sure that it will install setup tools

2358
04:41:22,320 --> 04:41:27,280
on the fly, although we didn't have setup tools to package it.

2359
04:41:27,280 --> 04:41:32,120
So setup tools is one of the building packages.

2360
04:41:32,120 --> 04:41:33,600
Yeah.

2361
04:41:33,600 --> 04:41:36,320
OK, and should I run pip list now?

2362
04:41:36,320 --> 04:41:36,820
Yeah.

2363
04:41:39,600 --> 04:41:45,560
So now we see that numpy, scipy are installed,

2364
04:41:45,560 --> 04:41:54,080
but our calculator got installed in another location.

2365
04:41:57,840 --> 04:42:02,780
And it has the name that we specified in myproject.toml.

2366
04:42:02,780 --> 04:42:03,280
Yeah.

2367
04:42:03,280 --> 04:42:12,280
Yeah, OK, so is this enough to begin to exercise?

2368
04:42:12,280 --> 04:42:14,800
Yeah, right.

2369
04:42:14,800 --> 04:42:20,320
OK, yeah, I'll try to write it here.

2370
04:42:20,320 --> 04:42:23,520
So the goal is basically do what I just did

2371
04:42:23,520 --> 04:42:28,120
and get it to a point where you can pip install it,

2372
04:42:28,120 --> 04:42:29,560
like this here.

2373
04:42:29,560 --> 04:42:37,160
And then there are some, the same test commands that we tried out before. It's mentioned there.

2374
04:42:42,040 --> 04:42:42,920
Okay, yeah, yeah.

2375
04:42:45,400 --> 04:42:51,560
Okay, sounds good. So let's go to a break. How long do we have?

2376
04:42:51,560 --> 04:43:02,240
I think we can do, I don't know, seven minutes? Ten? That's too short.

2377
04:43:02,240 --> 04:43:16,280
Okay, 30. Should we say until 40? Until 40, yeah. 11 minutes. 12, yeah. Okay, sounds good. Okay, see you later then.

2378
04:43:16,280 --> 04:43:19,280
Yeah.

2379
04:43:19,280 --> 04:43:22,280
Yeah. Okay.

2380
04:43:22,280 --> 04:43:25,280
Bye.

2381
04:43:25,280 --> 04:43:28,280
Bye.

2382
04:43:46,280 --> 04:43:48,340
you

2383
04:44:16,280 --> 04:44:18,340
you

2384
04:44:46,280 --> 04:44:48,340
you

2385
04:45:16,280 --> 04:45:18,340
you

2386
04:45:46,280 --> 04:45:48,340
you

2387
04:46:16,280 --> 04:46:18,340
you

2388
04:46:46,280 --> 04:46:48,340
you

2389
04:47:16,280 --> 04:47:18,340
you

2390
04:47:46,280 --> 04:47:48,340
you

2391
04:48:16,280 --> 04:48:18,340
you

2392
04:48:46,280 --> 04:48:48,340
you

2393
04:49:16,280 --> 04:49:18,340
you

2394
04:49:46,280 --> 04:49:48,340
you

2395
04:50:16,280 --> 04:50:18,340
you

2396
04:50:46,280 --> 04:50:48,340
you

2397
04:51:16,280 --> 04:51:18,340
you

2398
04:51:46,280 --> 04:51:48,340
you

2399
04:52:16,280 --> 04:52:18,340
you

2400
04:52:46,280 --> 04:52:48,340
you

2401
04:53:16,280 --> 04:53:18,340
you

2402
04:53:46,280 --> 04:53:48,340
you

2403
04:54:16,280 --> 04:54:46,260
Okay, now you can hear it.

2404
04:54:46,260 --> 04:54:55,140
me. Okay, so we see the notes here, and we see there's lots of good questions going on.

2405
04:54:57,300 --> 04:55:00,660
Which one should we focus on answering first?

2406
04:55:05,140 --> 04:55:12,500
Maybe there's this question, why is vnvair twice? So the first one is the name of the module that

2407
04:55:12,500 --> 04:55:14,040
that Python's running.

2408
04:55:14,040 --> 04:55:16,720
The second one is the directory that's

2409
04:55:16,720 --> 04:55:19,200
being created with the virtual environment.

2410
04:55:19,200 --> 04:55:25,280
And it's kind of not great that there's like this

2411
04:55:25,280 --> 04:55:30,280
is a duplicate here, but it's a bit confusing,

2412
04:55:30,280 --> 04:55:32,320
but it is what it is.

2413
04:55:32,320 --> 04:55:42,160
But you can have any other name if you wish.

2414
04:55:42,160 --> 04:55:43,160
Yeah.

2415
04:55:43,160 --> 04:55:44,160
Yeah.

2416
04:55:44,160 --> 04:55:45,160
Yeah.

2417
04:55:45,160 --> 04:55:46,160
Okay.

2418
04:55:46,160 --> 04:55:53,540
This editable one, I think, is also asked below.

2419
04:55:53,540 --> 04:55:58,240
This one here, does pip install install my package in another location or is it making

2420
04:55:58,240 --> 04:56:01,600
use of what's already been made?

2421
04:56:01,600 --> 04:56:07,120
And I guess this gets to editable and what that means.

2422
04:56:07,120 --> 04:56:13,720
So if I installed it without editable, what would the answer to this question be?

2423
04:56:13,720 --> 04:56:21,680
It would take all the code that you have packaged, put it in a special directory called site

2424
04:56:21,680 --> 04:56:23,120
packages.

2425
04:56:23,120 --> 04:56:30,840
You will be able to see that if you write pip show calculator RKDOS for you.

2426
04:56:30,840 --> 04:56:41,400
And then if you have the editable flag on, then it would create a small file which points where

2427
04:56:41,400 --> 04:56:47,480
the source code actually is. So it won't make a full copy. Yeah. So for example, when I'm doing

2428
04:56:47,480 --> 04:56:53,240
developing, like when you're doing developing, you don't want to have to edit a file and then go and

2429
04:56:53,240 --> 04:56:58,760
install it and then test it and see if it works and repeat this over and over again. That's just

2430
04:56:58,760 --> 04:57:06,280
annoying. So when you do this editable, as you modify it, it's directly being taken into use.

2431
04:57:07,800 --> 04:57:12,280
Well, to me, I look at it as useful for development kind of things, but are there

2432
04:57:12,280 --> 04:57:23,000
other times it's useful? Maybe. Yeah, it's only good for development, I would say.

2433
04:57:23,000 --> 04:57:23,840
Yeah.

2434
04:57:23,840 --> 04:57:24,340
OK.

2435
04:57:30,080 --> 04:57:31,320
Here's another good question.

2436
04:57:31,320 --> 04:57:39,200
So when you're making the pyproject.toml file,

2437
04:57:39,200 --> 04:57:40,200
it gives the name.

2438
04:57:40,200 --> 04:57:45,800
So name here is the name that it will have on pypi, basically

2439
04:57:45,800 --> 04:57:48,760
the name you use for pip install.

2440
04:57:48,760 --> 04:57:53,800
that can be different than the name of the module itself,

2441
04:57:53,800 --> 04:57:56,120
as in what you use to import it.

2442
04:57:56,120 --> 04:57:58,800
And these days, it's usually the same.

2443
04:57:58,800 --> 04:58:02,120
But there are a few big cases where

2444
04:58:02,120 --> 04:58:06,800
you use one name to pip install it and a different name

2445
04:58:06,800 --> 04:58:08,040
to import it.

2446
04:58:08,040 --> 04:58:11,760
And that is confusing, to say the least.

2447
04:58:11,760 --> 04:58:22,760
Yeah, there are a lot of popular packages which does this, PyTorch, Torch, scikit-learn,

2448
04:58:22,760 --> 04:58:23,760
sklearn.

2449
04:58:23,760 --> 04:58:26,760
So it's very common, much common.

2450
04:58:26,760 --> 04:58:27,760
Yeah.

2451
04:58:27,760 --> 04:58:33,260
So, it's worth taking some time to try to come up with a unique name that other people

2452
04:58:33,260 --> 04:58:35,760
won't be using.

2453
04:58:35,760 --> 04:58:43,760
But, yeah, so that's the basic idea there.

2454
04:58:43,760 --> 04:58:54,760
The actual directory name you make is what, or is where it gets the import thing from.

2455
04:58:54,760 --> 04:58:56,760
Okay.

2456
04:58:56,760 --> 04:59:04,360
There's this other question. Calculator not installable, neither setup.py or pyprojecttoml

2457
04:59:04,360 --> 04:59:12,040
found. If pyprojecttoml is found and you made it, maybe it needs to be up one directory.

2458
04:59:12,040 --> 04:59:22,720
So there is this very particular arrangement for how it should be structured here. I'm

2459
04:59:22,720 --> 04:59:30,000
scrolling up. So there's a project folder. In it is one directory named calculator with all the

2460
04:59:30,000 --> 04:59:39,200
stuff. But it's in project folder that it has pyproject.toml. So yeah, it can be confusing.

2461
04:59:39,200 --> 04:59:48,080
I'd say look for an example and copy it because that's what all the rest of us do. You know,

2462
04:59:48,080 --> 04:59:55,760
It's like some standard ways and you can know why or you can copy and I'm always copying stuff.

2463
04:59:56,400 --> 05:00:01,440
Right. In this example, you should point to project folder to pip install it.

2464
05:00:02,240 --> 05:00:06,800
Ah, yes. Then you should pip install with this folder's name, not this name.

2465
05:00:06,800 --> 05:00:08,640
Yeah. Not that one.

2466
05:00:08,640 --> 05:00:10,640
Right. Yeah. Okay.

2467
05:00:10,640 --> 05:00:15,320
OK, hmm.

2468
05:00:15,320 --> 05:00:19,240
Should we go to the remaining demo?

2469
05:00:19,240 --> 05:00:20,240
Yeah, OK.

2470
05:00:20,240 --> 05:00:24,080
So there is one more demo we had.

2471
05:00:24,080 --> 05:00:26,400
Let's see.

2472
05:00:26,400 --> 05:00:28,840
Back to my screen.

2473
05:00:28,840 --> 05:00:40,440
OK, yeah, after this, so sharing packages with, whoa, sorry.

2474
05:00:40,440 --> 05:00:48,840
sharing packages with PyPI. Should I start typing it while you're explaining it?

2475
05:00:49,720 --> 05:00:58,200
Absolutely. So, now we have this package. So, we're going to try to upload it into a

2476
05:00:58,200 --> 05:01:06,760
test PyPI server. So, we're going to do this demo. You don't have to type along. Try to go fast.

2477
05:01:06,760 --> 05:01:11,800
I'd say please don't type a lot. It requires making an account and setting up a bunch of stuff.

2478
05:01:11,800 --> 05:01:13,000
It's just not needed.

2479
05:01:13,000 --> 05:01:25,960
Yes. Right. So first, I think in your terminal, we can try to go outside of this VM. Deactivate.

2480
05:01:28,280 --> 05:01:28,920
Yes. Okay.

2481
05:01:29,640 --> 05:01:35,560
Right. So this build module should be installed in our Conda environment.

2482
05:01:35,560 --> 05:01:44,600
Okay. So we go into, yeah, into the core directory and then press enter.

2483
05:01:46,680 --> 05:01:55,560
So it will, once again, on the fly install setup tools. Create a wheel file, it's called.

2484
05:01:56,360 --> 05:02:03,480
And this is the format. One of the formats for distribution. So if you look at test

2485
05:02:03,480 --> 05:02:11,080
directly, you'll get a source distribution, which has the extension tar, and the wheel

2486
05:02:11,080 --> 05:02:14,320
distribution, which is essentially a zip file.

2487
05:02:14,320 --> 05:02:15,320
Yeah.

2488
05:02:15,320 --> 05:02:21,720
So, this is exactly what PyPI is installing when you do pip install from somewhere else.

2489
05:02:21,720 --> 05:02:22,720
Right.

2490
05:02:22,720 --> 05:02:27,080
So, our goal is to then put this wherever it belongs.

2491
05:02:27,080 --> 05:02:28,080
Okay.

2492
05:02:28,080 --> 05:02:29,080
Exactly.

2493
05:02:29,080 --> 05:02:30,080
Yeah.

2494
05:02:30,080 --> 05:02:31,080
Yeah.

2495
05:02:31,080 --> 05:02:34,040
The tool to upload it is called Twine.

2496
05:02:34,040 --> 05:02:35,520
OK.

2497
05:02:35,520 --> 05:02:38,800
We can try by installing it.

2498
05:02:38,800 --> 05:02:44,640
So I'll just directly pip install Twine here.

2499
05:02:44,640 --> 05:02:47,720
That's a lot of stuff it's doing.

2500
05:02:47,720 --> 05:02:51,160
OK, but I guess it's installed.

2501
05:02:51,160 --> 05:02:54,800
And it's, since we are not serious about this package,

2502
05:02:54,800 --> 05:02:58,200
we are going to upload it to desktop by BI.

2503
05:02:58,200 --> 05:03:00,680
Yeah, I guess this is important to say.

2504
05:03:00,680 --> 05:03:04,520
if you do a Twine upload, then it's permanently out there.

2505
05:03:04,520 --> 05:03:09,120
And anyone that uses, like this package name

2506
05:03:09,120 --> 05:03:12,800
can never be used by anyone else in the future.

2507
05:03:12,800 --> 05:03:16,280
And it will always be out there.

2508
05:03:16,280 --> 05:03:18,380
So that's not what we want to do for a course

2509
05:03:18,380 --> 05:03:20,120
and probably not what you want to do

2510
05:03:20,120 --> 05:03:24,520
when you are here testing stuff

2511
05:03:24,520 --> 05:03:27,440
or if you're not really serious.

2512
05:03:27,440 --> 05:03:30,360
So that's why they've conveniently made a test pypi.

2513
05:03:31,640 --> 05:03:32,000
Okay.

2514
05:03:32,080 --> 05:03:35,520
So should I run this?

2515
05:03:36,200 --> 05:03:36,520
Yeah.

2516
05:03:37,360 --> 05:03:39,160
So I copy and paste.

2517
05:03:41,640 --> 05:03:42,960
Are they asking for a token?

2518
05:03:43,960 --> 05:03:44,880
You need a token.

2519
05:03:45,320 --> 05:03:49,680
So there is this link where you can go to just below them.

2520
05:03:50,640 --> 05:03:52,640
And this is test pypi.

2521
05:03:53,600 --> 05:03:54,040
Right.

2522
05:03:54,440 --> 05:03:54,800
Okay.

2523
05:03:54,800 --> 05:04:07,240
Because this is a security thing, they always ask for the password, even if you're logged

2524
05:04:07,240 --> 05:04:08,240
in.

2525
05:04:08,240 --> 05:04:09,240
Okay.

2526
05:04:09,240 --> 05:04:10,240
Yeah.

2527
05:04:10,240 --> 05:04:11,240
So

2528
05:04:11,240 --> 05:04:19,440
And you can call it something useful here, Python for Cyclone, maybe.

2529
05:04:19,440 --> 05:04:20,440
And

2530
05:04:20,440 --> 05:04:22,680
Okay.

2531
05:04:22,680 --> 05:04:25,000
The scope should be all packages,

2532
05:04:25,000 --> 05:04:27,800
because we are uploading a new one.

2533
05:04:31,560 --> 05:04:33,840
Well, I can do this, and then I can delete it.

2534
05:04:33,840 --> 05:04:38,200
I guess the other option is to make a new project, and then.

2535
05:04:39,920 --> 05:04:43,600
But to do that, you need to upload it through this.

2536
05:04:43,600 --> 05:04:45,200
So you have to upload it first.

2537
05:04:45,200 --> 05:04:46,040
Okay.

2538
05:04:46,040 --> 05:04:48,860
First, and then you can make a fine-grained token.

2539
05:04:48,860 --> 05:04:53,620
Hmm, okay, well, yeah, let's just do it.

2540
05:04:53,620 --> 05:04:56,420
Let's create a token.

2541
05:04:56,420 --> 05:05:00,060
I'm going to move this out

2542
05:05:00,060 --> 05:05:03,940
so people don't see the token for obvious reasons.

2543
05:05:03,940 --> 05:05:04,780
Yeah.

2544
05:05:05,940 --> 05:05:08,700
Okay, I see something here

2545
05:05:08,700 --> 05:05:13,700
and it looks like a three line thing.

2546
05:05:13,700 --> 05:05:20,700
Yes, and it starts with PyPI, and you can copy and paste it.

2547
05:05:20,700 --> 05:05:21,700
Yeah.

2548
05:05:21,700 --> 05:05:29,260
So just to be sure, I'm going to move this out of the way, paste, okay, I hope it's pasted,

2549
05:05:29,260 --> 05:05:31,260
and now I push enter.

2550
05:05:31,260 --> 05:05:32,260
Yes.

2551
05:05:32,260 --> 05:05:42,780
And voila, now it's up, and if you go to that link, which popped up, you can see it's up

2552
05:05:42,780 --> 05:05:57,520
there. Okay. Let's see. Due to this link. Yeah. So I will. With installation instructions,

2553
05:05:57,520 --> 05:06:06,380
the version number, the small description that we had just below. And even what we wrote

2554
05:06:06,380 --> 05:06:10,380
in the readme, which comes as project description. Yeah. Yeah.

2555
05:06:12,780 --> 05:06:17,660
And it shows me with email example at example.com.

2556
05:06:19,900 --> 05:06:22,700
Do you think I can install it from here with these instructions?

2557
05:06:24,540 --> 05:06:29,580
Almost. You can try that. Because it will not find scipy.

2558
05:06:31,740 --> 05:06:34,060
Because scipy is not in test pypi.

2559
05:06:34,060 --> 05:06:41,260
Yeah, exactly. Okay, so there is another parameter that you need to add and I

2560
05:06:41,260 --> 05:06:47,500
think it's listed in the course documentation. It's called extra index

2561
05:06:47,500 --> 05:06:53,980
URL. There you go.

2562
05:06:53,980 --> 05:07:02,540
Here, okay, yeah. So this means Python 3 and pip install, this tells it to

2563
05:07:02,540 --> 05:07:09,260
install from test my API and if it can't find a package there it will install

2564
05:07:09,260 --> 05:07:17,540
from here right yeah okay I guess I'll give it a try yeah

2565
05:07:19,340 --> 05:07:26,260
should I activate the virtual environment yeah the one you're using

2566
05:07:26,260 --> 05:07:38,060
before okay yeah but then uninstall it just to make sure okay I want to

2567
05:07:38,060 --> 05:07:43,580
uninstall yes I'll say yeah okay

2568
05:07:43,580 --> 05:08:05,580
So, testPiPiSimple, and then normalPiPi, and then RKDARS2.

2569
05:08:05,580 --> 05:08:06,580
Right.

2570
05:08:06,580 --> 05:08:09,580
Hey, it works.

2571
05:08:09,580 --> 05:08:10,580
Okay.

2572
05:08:10,580 --> 05:08:11,580
Right.

2573
05:08:11,580 --> 05:08:12,580
Right.

2574
05:08:12,580 --> 05:08:13,580
Yeah.

2575
05:08:13,580 --> 05:08:14,580
Yeah.

2576
05:08:14,580 --> 05:08:24,460
And if I do pip list, well, now it's not showing my local path here, so it's just installed.

2577
05:08:24,460 --> 05:08:27,460
OK, that wasn't too hard.

2578
05:08:27,460 --> 05:08:28,460
Yeah.

2579
05:08:28,460 --> 05:08:34,660
But there were some manual steps involved, and in recent years there are other tools

2580
05:08:34,660 --> 05:08:39,340
which helps you generate a PyProjectToml, for example,

2581
05:08:39,340 --> 05:08:42,700
Poetry, Flit, and there are many more others.

2582
05:08:42,700 --> 05:08:44,180
Yeah.

2583
05:08:44,180 --> 05:08:50,620
And for this token, you can create a .pypirc file

2584
05:08:50,620 --> 05:08:54,540
so you don't have to enter it every time.

2585
05:08:54,540 --> 05:08:58,340
So you can read about that in that link over there.

2586
05:08:58,340 --> 05:09:00,220
OK.

2587
05:09:00,220 --> 05:09:03,060
Do we have time for the conda package?

2588
05:09:03,060 --> 05:09:11,300
don't think so, but right. We can read about what I hear. It's pretty easy to do a content package

2589
05:09:11,300 --> 05:09:23,540
also. Right. So we can try it out later on. But the idea there is you have an existing PyPI package

2590
05:09:24,340 --> 05:09:32,260
and then you use two tools for fetching it, creating a something called a content recipe.

2591
05:09:33,060 --> 05:09:34,940
and building a conda package.

2592
05:09:34,940 --> 05:09:37,820
So that's what we show there.

2593
05:09:37,820 --> 05:09:39,460
So just to summarize,

2594
05:09:39,460 --> 05:09:43,660
like when you have a good enough project going on

2595
05:09:43,660 --> 05:09:45,260
and you want to share it,

2596
05:09:45,260 --> 05:09:48,700
either for yourself in for reusing it

2597
05:09:48,700 --> 05:09:53,700
or for your friends want to upload it somewhere.

2598
05:09:53,740 --> 05:09:55,360
PyPI is a good place.

2599
05:09:56,900 --> 05:09:57,740
Yeah.

2600
05:09:57,740 --> 05:10:01,060
But conda is also popular.

2601
05:10:01,060 --> 05:10:04,260
And also, if you don't want to use PyPI,

2602
05:10:04,260 --> 05:10:08,140
there's sometimes I've made things basically just for me,

2603
05:10:08,140 --> 05:10:11,660
and I install it from a GitHub URL.

2604
05:10:11,660 --> 05:10:14,460
So I'd publish it somewhere myself

2605
05:10:14,460 --> 05:10:16,260
and say, install from here.

2606
05:10:19,300 --> 05:10:22,780
But that's something you can read about later.

2607
05:10:22,780 --> 05:10:30,140
So yeah, I guess I'll switch to the notes here.

2608
05:10:31,060 --> 05:10:38,300
And notes, notes, where are notes?

2609
05:10:38,300 --> 05:10:39,740
Here.

2610
05:10:39,740 --> 05:10:42,660
So if we go up some.

2611
05:10:42,660 --> 05:10:47,500
So we have an outro and feedback of the day.

2612
05:10:47,500 --> 05:10:51,220
[name], are you here to give the outro?

2613
05:10:51,220 --> 05:10:52,100
I am here.

2614
05:10:52,100 --> 05:10:53,380
Hello, hello.

2615
05:10:53,380 --> 05:10:55,420
Do you hear me?

2616
05:10:55,420 --> 05:10:56,900
OK.

2617
05:10:56,900 --> 05:11:00,340
So in the meantime, you can keep asking questions

2618
05:11:00,340 --> 05:11:08,420
about packaging or also please answer the feedback questions.

2619
05:11:09,060 --> 05:11:13,940
Okay, go for it [name] or do you want to share your screen?

2620
05:11:13,940 --> 05:11:17,380
Maybe if you since you already have the page there if you wanna

2621
05:11:17,380 --> 05:11:23,140
just open the outro page.

2622
05:11:30,340 --> 05:11:42,380
Oh, I think I'll go into the shadows. Okay, see you later.

2623
05:11:46,660 --> 05:11:51,740
So basically, I mean, most of the things that we already

2624
05:11:51,740 --> 05:11:55,660
mentioned the previous days, the materials we stay online, we

2625
05:11:55,660 --> 05:11:59,260
will most likely revise them next year for the next session.

2626
05:11:59,260 --> 05:12:03,260
What is nice is that you can explore them through GitHub.

2627
05:12:03,260 --> 05:12:08,900
You can submit fixes, ask for new features, for new lessons.

2628
05:12:08,900 --> 05:12:14,380
So it's really nice if people want to contribute and why not even join the development of the

2629
05:12:14,380 --> 05:12:15,380
course.

2630
05:12:15,380 --> 05:12:20,640
Very briefly, there is the possibility of getting one ECTS credit.

2631
05:12:20,640 --> 05:12:25,100
So there's the rules on the website, on the main page.

2632
05:12:25,100 --> 05:12:27,580
The deadline is the last day of November.

2633
05:12:27,580 --> 05:12:33,260
have any questions you can get in touch with me directly but that's nothing it should be basically

2634
05:12:34,380 --> 05:12:39,340
just you just an occasion for you to show that you are able to run some of the examples that

2635
05:12:39,340 --> 05:12:46,700
you've been running in these three days and then more in general about Code Refinery and

2636
05:12:46,700 --> 05:12:52,140
Alto Scientific Computing. So Code Refinery is a Nordic e-infrastructure collaboration

2637
05:12:52,140 --> 05:12:56,140
sponsored project to support computational research.

2638
05:12:56,140 --> 05:12:59,140
We've been running Code Refinery.

2639
05:12:59,140 --> 05:13:03,140
I don't even remember how many years we've been going on.

2640
05:13:03,140 --> 05:13:05,140
Seven, maybe more.

2641
05:13:05,140 --> 05:13:10,140
But the so-called Code Refinery Tool Workshop

2642
05:13:10,140 --> 05:13:14,140
is the main workshop that we have already mentioned in the notes

2643
05:13:14,140 --> 05:13:16,140
at least during these days.

2644
05:13:16,140 --> 05:13:20,140
We run it twice a year and we usually teach kind of the basics

2645
05:13:20,140 --> 05:13:26,620
of computational reproducibility, Git version control environments, like conda environments,

2646
05:13:26,620 --> 05:13:34,460
but also containers and other things related to basically kind of good practices, good enough

2647
05:13:34,460 --> 05:13:41,740
practices for scientific computing. And then Alto Scientific Computing, which is basically based at

2648
05:13:41,740 --> 05:13:47,500
Alto University. We support our people at Alto, of course, but we also organize various courses.

2649
05:13:47,500 --> 05:13:54,460
and it's also important to mention our partners and for this time I especially want to mention

2650
05:13:54,460 --> 05:14:01,980
and thanks the people at ENCCS Sweden and CSC, the Center for Computational Science in Finland

2651
05:14:01,980 --> 05:14:08,060
and of course many universities in the Nordics who have been helping whether they were instructors

2652
05:14:08,060 --> 05:14:16,140
or they developed the materials or they did communications. For future events we will have

2653
05:14:16,140 --> 05:14:24,060
our so-called kickstart course which is basically kind of the abc for using hpc systems most likely

2654
05:14:24,060 --> 05:14:30,780
will be in february 2025 and the reason is that it corresponds to a big increase of doctoral

2655
05:14:30,780 --> 05:14:36,140
researchers in finland with the new year so it's an opportunity for new doctoral researchers to

2656
05:14:36,940 --> 05:14:43,900
get get started quickly in using hpc systems the code refinery workshop that i already mentioned

2657
05:14:43,900 --> 05:14:51,980
will be happening in the second half of March 2025 and as people already asked about other

2658
05:14:51,980 --> 05:14:57,180
courses that will be running in the past you can request a rerun of previous courses. We are very

2659
05:14:57,180 --> 05:15:02,620
happy to you know if there is an interest of course we we will be there. We are very happy to

2660
05:15:02,620 --> 05:15:09,340
rerun new old courses and usually this means that they get updated with new materials, better

2661
05:15:09,340 --> 05:15:17,020
exercises and so on. So to stay in touch we have the Code Refinery newsletter that you can visit

2662
05:15:17,020 --> 05:15:21,660
the Code Refinery website and from there you will see it and we also have the Alto Scientific

2663
05:15:21,660 --> 05:15:28,620
Company newsletter for more Alto related courses. There's some relevant links there

2664
05:15:29,580 --> 05:15:36,700
that you can explore and maybe we can end with this how can we work together. Do you want to

2665
05:15:36,700 --> 05:15:39,900
to reach or do that? How can we work together for it?

2666
05:15:43,660 --> 05:15:49,420
Yeah, if you're interested in these kinds of courses, like there's no obligation of course,

2667
05:15:51,740 --> 05:15:57,740
you can of course come to our future courses, but also bring more people with you. So we try

2668
05:15:57,740 --> 05:16:02,060
to design these courses where one person could bring a bunch of people from their

2669
05:16:02,060 --> 05:16:08,900
research team or friends or so on and come together and then basically you're

2670
05:16:08,900 --> 05:16:13,900
the local support for the exercises and things like that. You can keep following

2671
05:16:13,900 --> 05:16:21,300
the exercises later on, like help with homework, advising on homework and things

2672
05:16:21,300 --> 05:16:26,660
like that. If you're part of an organization like you work at your

2673
05:16:26,660 --> 05:16:34,340
university or something, you could come and basically advertise it as one of your courses,

2674
05:16:34,340 --> 05:16:42,660
run the local breakout rooms and all that stuff, and then really make it an official thing you do.

2675
05:16:44,900 --> 05:16:53,540
And Code Refinery is right now looking for more partners. So basically we're opening up,

2676
05:16:53,540 --> 05:16:59,620
it won't be a closed project anymore. But if anyone wants to join and do teaching with us

2677
05:16:59,620 --> 05:17:05,860
and make it part of your own course program and reshare the courses you do, that is something

2678
05:17:05,860 --> 05:17:13,300
that we're interested in. And probably the best way to learn more about that is the Code Refinery

2679
05:17:13,300 --> 05:17:20,580
newsletter. So as we find that, you can join. You'll hear there. Or join the Code Refinery chat

2680
05:17:20,580 --> 05:17:22,580
and talk there.

2681
05:17:24,580 --> 05:17:26,580
Yeah.

2682
05:17:29,580 --> 05:17:31,580
All right. I think that

2683
05:17:31,580 --> 05:17:33,580
it was nice to spend three days with you.

2684
05:17:33,580 --> 05:17:35,580
Very interesting questions.

2685
05:17:36,580 --> 05:17:38,580
Hopefully this was useful.

2686
05:17:38,580 --> 05:17:40,580
And please leave feedback as you

2687
05:17:40,580 --> 05:17:42,580
I see you're already writing comments

2688
05:17:42,580 --> 05:17:44,580
for the third day, but you can also

2689
05:17:44,580 --> 05:17:46,580
write any type of comment.

2690
05:17:46,580 --> 05:17:48,580
Yeah.

2691
05:17:48,580 --> 05:17:57,020
Yeah, you can give feedback for the whole thing, whole time.

2692
05:17:57,020 --> 05:18:02,220
Is there any feedback we would like to discuss with people now?

2693
05:18:02,220 --> 05:18:10,420
I guess my biggest lesson here would be we can't, like we know that what we've tried

2694
05:18:10,420 --> 05:18:17,700
to do here can't be a full course or lesson in any of the one things we're saying.

2695
05:18:17,700 --> 05:18:22,740
all so big, they could all become their whole time. But we hope that we've inspired you and

2696
05:18:22,740 --> 05:18:28,660
shown you a bit about how it works and why it works so that when you need to, you can go study

2697
05:18:28,660 --> 05:18:34,100
more yourself. Maybe our material is the starting point, but you definitely need more than that,

2698
05:18:34,100 --> 05:18:45,380
more than just what we have. So, yeah. Yeah, that was our philosophy here.

2699
05:18:47,700 --> 05:18:52,700
Okay, anything else for the news?

2700
05:19:00,700 --> 05:19:03,700
There's some question about the credits, but I will write.

2701
05:19:03,700 --> 05:19:06,700
[name] knows that.

2702
05:19:06,700 --> 05:19:12,700
I think we'll try to update all of the web page stuff with what it did.

2703
05:19:12,700 --> 05:19:19,700
Should we open the course room on Zoom so people can join and talk about it?

2704
05:19:19,700 --> 05:19:26,700
Yes. So after party, bring your own tea.

2705
05:19:26,700 --> 05:19:29,700
I will paste the link soon.

2706
05:19:29,700 --> 05:19:40,700
All right. Thanks a lot, [name], for being the director from your studio.

2707
05:19:40,700 --> 05:19:43,700
It's easy compared to the teaching.

2708
05:19:43,700 --> 05:19:47,700
Well, you know, it's a big effort.

2709
05:19:47,700 --> 05:19:49,700
And thanks to all the instructors, of course.

2710
05:19:49,700 --> 05:19:51,700
Excellent job also this time.

2711
05:19:51,700 --> 05:19:53,700
And thanks to all the participants

2712
05:19:53,700 --> 05:19:56,700
for being with us for three days.

2713
05:19:56,700 --> 05:19:58,700
Okay, great. Thanks.

2714
05:19:58,700 --> 05:20:01,700
So in a little bit, there'll be the Zoom link on here

2715
05:20:01,700 --> 05:20:05,700
and we'll talk to you later.

2716
05:20:05,700 --> 05:20:07,700
Okay. Bye, everyone.

2717
05:20:07,700 --> 05:20:08,540
Bye-bye.

2718
05:20:37,700 --> 05:20:39,760
you

2719
05:21:07,700 --> 05:21:09,760
you

2720
05:21:37,700 --> 05:21:39,760
you

2721
05:22:07,700 --> 05:22:09,760
you

