1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:32,060
you

13
00:06:00,000 --> 00:06:02,060
you

14
00:06:30,000 --> 00:06:32,060
you

15
00:07:00,000 --> 00:07:02,060
you

16
00:07:30,000 --> 00:07:32,060
you

17
00:08:00,000 --> 00:08:02,060
you

18
00:08:30,000 --> 00:08:32,060
you

19
00:09:00,000 --> 00:09:02,060
you

20
00:09:30,000 --> 00:09:59,000
Test one, two.

21
00:09:59,000 --> 00:10:04,000
Does anyone hear us out there?

22
00:10:04,000 --> 00:10:07,000
I can hear us, at least.

23
00:10:07,000 --> 00:10:09,000
Can anyone hear me?

24
00:10:09,000 --> 00:10:13,000
Can you hear us through Twitch or through?

25
00:10:13,000 --> 00:10:16,000
Through Twitch.

26
00:10:16,000 --> 00:10:18,000
Okay, good.

27
00:10:18,000 --> 00:10:25,000
Yeah, I'm still slightly adjusting things here.

28
00:10:25,000 --> 00:10:30,000
Okay, I got a report saying our audio is somewhat balanced.

29
00:10:30,000 --> 00:10:35,000
Okay, yeah. So, hi everyone. Welcome to this course.

30
00:10:35,000 --> 00:10:40,000
So, we have a few minutes to talk about practical details

31
00:10:40,000 --> 00:10:45,000
and initial thoughts before the main program starts at an hour.

32
00:10:45,000 --> 00:10:52,000
But yeah, my name is [name] and with me here is...

33
00:10:52,800 --> 00:10:58,880
[name], hi, from Aalto as well. Yeah, yeah, so we're both from Aalto University.

34
00:10:59,520 --> 00:11:08,160
And yeah, so what about this course? So is anyone as excited as we are?

35
00:11:10,320 --> 00:11:15,280
Yeah, there's lots of new material. So if you have joined us in the previous years,

36
00:11:15,280 --> 00:11:18,800
there's lots of updated materials. And if you haven't, well then, welcome.

37
00:11:18,800 --> 00:11:23,800
I hope this is going to be a good course for you.

38
00:11:23,800 --> 00:11:34,460
Yeah, so what we have here is what you're seeing on the stream, I hope, is what we call

39
00:11:34,460 --> 00:11:36,460
the notes document.

40
00:11:36,460 --> 00:11:41,220
So in this course, notes is only for registered participants.

41
00:11:41,220 --> 00:11:44,700
So if you haven't registered, you won't have this link.

42
00:11:44,700 --> 00:11:48,020
If you are registered, please open it up.

43
00:11:48,020 --> 00:11:50,780
So as you've noticed, this is live stream.

44
00:11:50,780 --> 00:11:54,060
So that means we'll have hundreds of people attending.

45
00:11:54,060 --> 00:11:56,780
We can't answer questions by chat.

46
00:11:56,780 --> 00:11:58,340
It just doesn't really work.

47
00:11:58,340 --> 00:11:59,420
So instead, we have this.

48
00:11:59,420 --> 00:12:01,340
And it's like a shared document.

49
00:12:01,340 --> 00:12:03,140
So you write in questions, and we

50
00:12:03,140 --> 00:12:05,340
have a bunch of people that can be answering them

51
00:12:05,340 --> 00:12:06,740
all at the same time.

52
00:12:06,740 --> 00:12:10,460
But you'll learn more about that later.

53
00:12:10,460 --> 00:12:12,300
For now, what I'll do.

54
00:12:12,300 --> 00:12:15,020
I think in the intro, we're probably

55
00:12:15,020 --> 00:12:22,540
going to give the user a spiel of how the CodeRefinery way of teaching works, right?

56
00:12:22,540 --> 00:12:24,700
Yes, so we don't have to worry about that now.

57
00:12:26,300 --> 00:12:28,060
Should we look at the icebreakers?

58
00:12:28,060 --> 00:12:35,660
Yeah, let's see. If I scroll down some, we see down here there's...

59
00:12:37,100 --> 00:12:41,900
Okay, I have so many windows on the screen that I have to balance. It becomes a bit tricky.

60
00:12:41,900 --> 00:12:50,180
Okay, so here we see people testing stuff, so if you write something it will appear here.

61
00:12:50,180 --> 00:12:55,780
We see some questions, but let's skip through these to icebreakers like [name] said.

62
00:12:55,780 --> 00:13:03,540
So you can come here and I will come up to my other screen, I'm in edit mode, and I will

63
00:13:03,540 --> 00:13:11,580
change Finland-Helsinki from plus one to plus two, and you can do the same.

64
00:13:11,580 --> 00:13:17,180
But while we're doing this, so what's this course about, if you had to explain to a non-technical

65
00:13:17,180 --> 00:13:18,180
person?

66
00:13:18,180 --> 00:13:27,780
Well, I'd say it's like this kind of like, you know, there's languages and there's languages

67
00:13:27,780 --> 00:13:29,900
in programming.

68
00:13:29,900 --> 00:13:33,580
And some of these languages are more commonly used than others.

69
00:13:33,580 --> 00:13:39,540
And I think Python is the kind of like thing that like, if people try to, it's like a boomerang

70
00:13:39,540 --> 00:13:44,100
that even if people try to like dodge it, it still comes back and hits them in the head.

71
00:13:44,100 --> 00:13:53,100
So people end up using Python at some point in their career and in their life.

72
00:13:53,100 --> 00:13:58,180
I think this is the kind of like, okay, like you're now at this point, how do you move

73
00:13:58,180 --> 00:13:59,180
forward?

74
00:13:59,180 --> 00:14:04,940
And I think we try to make it as simple as possible.

75
00:14:04,940 --> 00:14:08,100
It won't hit you as badly as you.

76
00:14:08,100 --> 00:14:13,900
So, okay. Are you saying this is sort of like a general intro course? So, you know, people

77
00:14:13,900 --> 00:14:21,200
that need to use Python, maybe they've used it as a normal programming language, how to

78
00:14:21,200 --> 00:14:27,220
manage it for science, since you're probably going to have to sometime, whether you want

79
00:14:27,220 --> 00:14:28,220
it or not.

80
00:14:28,220 --> 00:14:35,900
Yeah. I think your answer is a bit more like elegant, but yeah, yeah. So the point is something

81
00:14:35,900 --> 00:14:36,900
like that.

82
00:14:36,900 --> 00:14:44,860
Yeah, so the point here is that we don't teach Python itself, but if you know some Python

83
00:14:44,860 --> 00:14:49,940
like you take in normal programming courses in Python, you'll see the most common tips

84
00:14:49,940 --> 00:14:59,100
and tricks and stuff like that, which you need to know for scientific work, but aren't

85
00:14:59,100 --> 00:15:02,700
taught in normal Python courses.

86
00:15:02,700 --> 00:15:04,940
So basically, we're teaching the science behind.

87
00:15:04,940 --> 00:15:07,380
OK, we're not teaching science.

88
00:15:07,380 --> 00:15:08,220
What I said.

89
00:15:08,220 --> 00:15:09,980
Let's go on.

90
00:15:09,980 --> 00:15:14,100
We're teaching a very special set of skills

91
00:15:14,100 --> 00:15:19,740
that you can use to make your life a lot more easier.

92
00:15:19,740 --> 00:15:21,300
Yeah.

93
00:15:21,300 --> 00:15:23,540
And I guess you could say that we're not even

94
00:15:23,540 --> 00:15:26,860
teaching the skills.

95
00:15:26,860 --> 00:15:31,580
But with a few hours for a few days, the most we can do

96
00:15:31,580 --> 00:15:34,560
is give you an intro to the different skills.

97
00:15:34,560 --> 00:15:38,540
So we give an intro, but it's up to you

98
00:15:38,540 --> 00:15:43,380
to follow up the ones that are important to you.

99
00:15:43,380 --> 00:15:46,540
I have to say that there's a huge number of people

100
00:15:46,540 --> 00:15:47,500
from different places.

101
00:15:47,500 --> 00:15:49,380
Like the list is growing and growing,

102
00:15:49,380 --> 00:15:51,140
and it's still not stopping.

103
00:15:51,140 --> 00:15:52,100
Let's check the stats.

104
00:15:52,100 --> 00:15:52,600
Amazing.

105
00:15:55,820 --> 00:15:58,660
Yeah.

106
00:15:58,660 --> 00:15:59,860
Yeah, so, wow.

107
00:15:59,860 --> 00:16:04,260
Yeah, we've got quite a good set here.

108
00:16:04,260 --> 00:16:05,380
Everywhere.

109
00:16:05,380 --> 00:16:07,300
OK, how much do people use Python?

110
00:16:07,300 --> 00:16:08,700
Let's see this.

111
00:16:08,700 --> 00:16:14,980
So we have different beginners.

112
00:16:18,580 --> 00:16:21,900
OK, this is the fun part where people

113
00:16:21,900 --> 00:16:28,180
are editing the document so much that it becomes all crazy.

114
00:16:28,180 --> 00:16:34,900
it's hopping around. But it's okay. It'll stabilize. So, we have people who've used it a

115
00:16:34,900 --> 00:16:42,660
little bit, but not enough. So, yeah. Like, most of these answers look like they're about at the

116
00:16:42,660 --> 00:16:50,340
right level. So, you know, used it some. Yeah. It looks like what you said, that, like, not

117
00:16:50,340 --> 00:16:53,460
necessarily, we're not necessarily teaching Python, but we're teaching, like,

118
00:16:53,460 --> 00:17:03,380
the how do you use Python in a specific context. And I think, yeah, like, for the people who are

119
00:17:03,380 --> 00:17:07,540
answering in the chat, like, it looks like this might be really helpful.

120
00:17:08,740 --> 00:17:18,820
Yeah. How much have you used Jupyter before? We see never. Very briefly. Okay. So, we do start

121
00:17:18,820 --> 00:17:25,060
off discussing Jupyter, not because it's what you have to use, but because it's a basic user

122
00:17:25,060 --> 00:17:31,300
interface for most people to get through the course and we don't have to worry about how you're coding

123
00:17:31,300 --> 00:17:38,420
stuff. But you can of course use whatever environment you want to use, like a programming

124
00:17:38,420 --> 00:17:49,700
environment or IDE. Jupyter is just one that is very commonly seen when it comes to this kind of

125
00:17:49,700 --> 00:17:59,460
like. And we'll talk about that later. Yeah. Okay. We see here under where do you store your files,

126
00:17:59,460 --> 00:18:05,540
people write plus one whenever you agree with something. That's a good practice to use.

127
00:18:08,420 --> 00:18:15,700
It's, yeah. And here you see. In some other cases we might do this kind of like

128
00:18:15,700 --> 00:18:21,460
O-polls or we put like this kind of like you add the same character to the list of characters that

129
00:18:21,460 --> 00:18:28,100
makes it a bit more easier to count out the like this kind of histogram poll. But we'll talk about

130
00:18:28,100 --> 00:18:34,980
that as well a bit later. Yeah. And finally down here we see a preview. So ask more questions.

131
00:18:34,980 --> 00:18:41,460
people have written questions in these bullet points, and other people have given an answer,

132
00:18:41,460 --> 00:18:47,060
not us. So that's our whole army of other instructors and helpers that are watching

133
00:18:47,060 --> 00:18:52,100
and answering questions. So you'll get answers pretty quick like this when you write stuff.

134
00:18:53,220 --> 00:18:57,780
But with that being said, I think it's time to start the intro. So I will...

135
00:18:57,780 --> 00:19:02,220
So any final words before we do that?

136
00:19:02,220 --> 00:19:04,020
No, let's go.

137
00:19:04,020 --> 00:19:08,460
Let's wrap in and let's get rolling.

138
00:19:08,460 --> 00:19:12,780
So if this works, I will switch to my screen here.

139
00:19:16,820 --> 00:19:22,580
Yes, OK, so now you see my screen.

140
00:19:22,580 --> 00:19:33,140
and you see... Okay, let me just size some... Yeah, so this is the course page and the way you find

141
00:19:33,140 --> 00:19:40,180
where you are is you would scroll down to the schedule and we start at intro here. So I will

142
00:19:40,180 --> 00:19:50,500
open intro in a new tab and it says we have 15 minutes for this. So welcome everyone to Python

143
00:19:50,500 --> 00:19:57,300
for scientific computing. So what is this course? So as we said in the icebreaker session,

144
00:19:57,300 --> 00:20:03,540
this is a course that's not about Python, but about how to use Python for science. So we give

145
00:20:03,540 --> 00:20:13,220
some of the general tips and tricks and practical things that people might learn. So we don't teach

146
00:20:13,220 --> 00:20:19,300
Python itself, and we don't go and we don't teach everything in great detail like you might learn

147
00:20:19,300 --> 00:20:24,020
an academic course, but it's an overview, an introduction. You hopefully get some hands-on

148
00:20:24,020 --> 00:20:29,220
stuff you can do, and then the things that you need for your own work, you should be prepared

149
00:20:29,220 --> 00:20:36,580
to go learn about them yourself afterwards. So that's the basic idea. Who are we? So,

150
00:20:37,700 --> 00:20:42,900
as we said in icebreakers, I am [name], and with me here is [name]

151
00:20:42,900 --> 00:20:48,580
but we have a bunch more instructors going on. Just look at the schedule and you see we had

152
00:20:48,580 --> 00:20:54,740
almost 15 different people listed as taking part in instructing, which is really amazing for

153
00:20:55,540 --> 00:21:01,140
the course of this size. We have so many people watching the stream saying 163 now and so many

154
00:21:01,140 --> 00:21:08,020
people teaching. And many of the people who will teach on different times, they will be answering

155
00:21:08,660 --> 00:21:14,660
in the notes when they are not teaching. So if you ask questions in the notes, most likely

156
00:21:14,660 --> 00:21:23,620
Maybe one of the instructors will answer you quite quickly regarding whatever you ask them.

157
00:21:23,620 --> 00:21:25,980
Yes, definitely.

158
00:21:25,980 --> 00:21:27,940
And we have many different partners.

159
00:21:27,940 --> 00:21:33,860
So many of the instructors are coming from different institutions, universities in Sweden

160
00:21:33,860 --> 00:21:34,860
and Norway.

161
00:21:34,860 --> 00:21:40,260
And I think beyond that, but I'm not sure.

162
00:21:40,260 --> 00:21:46,100
Oh, I had updated this, but I guess I forgot to push the update.

163
00:21:51,620 --> 00:21:57,940
Well, I would say that the overall thing stands. We have a bit of a different, like,

164
00:21:59,460 --> 00:22:07,460
bit of a different, like, focus on different days. So this first day is mainly going to be

165
00:22:07,460 --> 00:22:13,460
about the basic building blocks of scientific Python, I would say. Like we're talking about

166
00:22:13,460 --> 00:22:19,700
NumPy, Pandas, Visualization, and also some advanced tools like X-Array, which are really nice.

167
00:22:19,700 --> 00:22:25,460
And then on the second day, we'll continue on with that.

168
00:22:26,660 --> 00:22:32,900
Yeah. And it's completely okay to mix and match when you're here. So since this is a stream,

169
00:22:32,900 --> 00:22:39,140
we won't be offended if you say this lesson is too easy and drop out and come back for a later one.

170
00:22:39,140 --> 00:22:48,100
But for most people, for some people the beginning might be a bit too basic and for some people the

171
00:22:48,100 --> 00:22:58,820
end might be a bit too advanced or specialized. So don't worry about mixing and matching as you

172
00:22:58,820 --> 00:23:03,460
would like. And also the course page it has a lot of materials that we are not

173
00:23:03,460 --> 00:23:08,460
going to go through through this course and this is because we have in the

174
00:23:08,460 --> 00:23:13,540
previous years we might have gone through it and if all of our courses

175
00:23:13,540 --> 00:23:18,460
will be recorded and they are released in our YouTube channel so if you

176
00:23:18,460 --> 00:23:23,260
want to see the previous year's course lectures you can see it from

177
00:23:23,260 --> 00:23:31,100
there and of course you can view the materials in the course page. Also in the course page there's

178
00:23:31,100 --> 00:23:35,740
lots more material than that we will probably go through in the course because like it's not very

179
00:23:35,740 --> 00:23:42,300
fun to go through just like speak about text in the wall like wall of text so instead we usually

180
00:23:42,300 --> 00:23:48,700
have this kind of like a co-teaching approach where we go through it in the like a natural

181
00:23:48,700 --> 00:23:54,140
discussion kind of a way, so that we have a bit more structure on it and it's easier to listen to,

182
00:23:54,140 --> 00:23:58,620
so it's not like a reading monologue of just reading through text.

183
00:23:59,900 --> 00:24:00,400
Yeah.

184
00:24:01,100 --> 00:24:05,180
So, but if you feel like you learn better from a written material,

185
00:24:05,740 --> 00:24:08,620
I recommend reading the materials as well.

186
00:24:09,180 --> 00:24:16,940
Yeah. Yeah. So, like [name] was saying, how to attend. So, it's live streamed. You can jump

187
00:24:16,940 --> 00:24:22,220
on and off as you want and there's different pathways so some people want to pay close

188
00:24:22,220 --> 00:24:27,340
attention and do all the exercise as we do them ask lots of questions be totally active

189
00:24:28,060 --> 00:24:34,700
some people may watch and listen to what we say but you don't do the exercises right now instead

190
00:24:34,700 --> 00:24:43,420
you do exercises like you'll come back and do stuff later reread whatever that's completely fine

191
00:24:43,420 --> 00:24:53,940
Some people may watch a little bit but mostly go and read it later or watch the videos later at a

192
00:24:53,940 --> 00:24:59,980
faster speed. All these are fine and it's designed so that you can do all of these things at the same

193
00:24:59,980 --> 00:25:08,820
time. Okay and now the course page is updated and we see the right three days here. So choose what

194
00:25:08,820 --> 00:25:17,140
want. Practicalities. How does it actually work? This is more like a TV production than a course.

195
00:25:17,780 --> 00:25:25,700
So we have a studio, we're broadcasting, you can join and leave when you want.

196
00:25:28,100 --> 00:25:34,020
We have pauses, so like the commercial breaks. And during these times, we'll give you time to do

197
00:25:34,020 --> 00:25:44,260
exercises yourself. So, then you, yeah, like we'll say, okay, exercise time, you go work and we come

198
00:25:44,260 --> 00:25:52,260
back. And now it's a good time to do like the scream quality check. We'll get there in a minute.

199
00:25:52,260 --> 00:25:59,220
Okay. Yeah. Okay. Something down below. Okay. And the types of things you might see are talking and

200
00:25:59,220 --> 00:26:07,140
demos where you're just listening, sometime when we're talking, but then you are typing along with

201
00:26:07,140 --> 00:26:12,100
us at the same time. There's exercises where we don't talk, we give you time, and you work on

202
00:26:12,100 --> 00:26:19,940
things alone. And this is where we try to focus. And then there's breaks. Okay, chat and communication.

203
00:26:19,940 --> 00:26:32,340
So we've already seen the notes document here. It is this thing here. As you scroll down,

204
00:26:33,220 --> 00:26:39,860
you see questions and answers. So if we go to the edit mode, then

205
00:26:39,860 --> 00:26:51,460
And you can go to the end and say, this is a question.

206
00:26:51,460 --> 00:26:58,540
And if we wait a minute, someone will reply and say, this is an answer.

207
00:26:58,540 --> 00:27:02,260
So this is the main way of communicating.

208
00:27:02,260 --> 00:27:14,260
Okay, no one's answering yet, but under normal conditions, someone would answer very quickly.

209
00:27:14,260 --> 00:27:17,020
Yeah.

210
00:27:17,020 --> 00:27:20,020
Okay.

211
00:27:20,020 --> 00:27:21,460
But this is the basic idea.

212
00:27:21,460 --> 00:27:26,620
Q and A. You need to switch to edit mode at the top.

213
00:27:26,620 --> 00:27:31,500
If you're not asking stuff, if you can switch to view mode, we think that keeps the performance

214
00:27:31,500 --> 00:27:43,040
up a little bit. Okay. Yeah. The view and edit modes here. So, we also have people watching

215
00:27:43,040 --> 00:27:52,320
this, and when that happens, if we need to, we will raise the question by voice and answer

216
00:27:52,320 --> 00:27:59,440
it for everyone. So, there is definitely feedback to us here. Please don't include names or

217
00:27:59,440 --> 00:28:05,600
any identities inside of the notes. It's public, it will be archived. We'll try to remove names as

218
00:28:05,600 --> 00:28:12,480
soon as we see them. And it might be streamed and recorded into videos also, so just don't do that.

219
00:28:14,240 --> 00:28:20,560
Okay, screen arrangement. So as you notice, we're streaming in this vertical mode. The idea is that

220
00:28:20,560 --> 00:28:25,680
it can take up half your screen, and the other half you have a workspace, you have a web browser,

221
00:28:25,680 --> 00:28:29,760
are all of these different things here.

222
00:28:29,760 --> 00:28:33,320
Like [name] was saying, we need to change the settings of Twitch

223
00:28:33,320 --> 00:28:36,400
to the highest resolution, the source resolution.

224
00:28:36,400 --> 00:28:41,480
And this will force it to stay at the full complete

225
00:28:41,480 --> 00:28:44,000
resolution.

226
00:28:44,000 --> 00:28:46,880
Yeah, so you can do that by clicking the gear icon,

227
00:28:46,880 --> 00:28:49,960
then quality, and then put it into the source.

228
00:28:49,960 --> 00:28:53,200
And like [name] has written here,

229
00:28:53,200 --> 00:28:58,740
You want to hide the chat, because we are not really looking at that chat, we are looking

230
00:28:58,740 --> 00:29:00,160
at the notes chat.

231
00:29:00,160 --> 00:29:06,420
So what you usually want to do is put the browser that has the Twitch stream into theater

232
00:29:06,420 --> 00:29:07,420
mode.

233
00:29:07,420 --> 00:29:14,220
And then you might want to, depending on your display, you might want to like increase or

234
00:29:14,220 --> 00:29:22,740
zoom or zoom in or zoom out so that the stream goes like from side to side.

235
00:29:22,740 --> 00:29:31,140
Yeah. Okay, so where do you focus? There's going to be so much information being thrown around here

236
00:29:31,700 --> 00:29:36,980
and the biggest problem is that people get overloaded. So where should you look? First,

237
00:29:36,980 --> 00:29:42,180
focus on the screen share and the lecture, if it's going on. That's probably the most important.

238
00:29:42,900 --> 00:29:49,380
Then, if you have spare mental cycles, you can focus on your own type along as we are

239
00:29:49,380 --> 00:29:56,180
demonstrating things. If we don't have that, or you still have more time, you can

240
00:29:56,180 --> 00:29:59,980
look at the notes and see the other questions and answers being put there.

241
00:29:59,980 --> 00:30:04,100
Our recommendation only look at the bottom, so questions should always be

242
00:30:04,100 --> 00:30:11,460
added as low as possible because that's where we are looking in order to to

243
00:30:11,460 --> 00:30:17,220
answer. If you ask things, you can also come back later and read it during a

244
00:30:17,220 --> 00:30:21,400
break, so don't let this get you caught up. It's an option but not required.

245
00:30:21,400 --> 00:30:27,740
During exercise times focus on the exercises and then as you have time you

246
00:30:27,740 --> 00:30:32,460
can be scrolling around the lesson web page yourself. So the more boring what

247
00:30:32,460 --> 00:30:38,340
we're doing is the more time you can spend on the other things at the bottom

248
00:30:38,340 --> 00:30:46,380
to keep everyone excited. Okay what can go wrong? So we have so many people there

249
00:30:46,380 --> 00:30:53,100
will be a lot going on. The lessons are too simple. In that case, later lessons will become

250
00:30:53,100 --> 00:30:58,820
more interesting, read notes, ask advanced questions, read through the advanced material,

251
00:30:58,820 --> 00:31:03,480
all that kind of stuff. If the lessons are too advanced, then take a step back, watch

252
00:31:03,480 --> 00:31:09,420
passively, don't worry about doing the exercises and type-alongs, and you'll learn a different

253
00:31:09,420 --> 00:31:15,260
way and you'll be prepared to come back later if you want. If instructors make a mistake,

254
00:31:15,260 --> 00:31:21,260
by design. We try to make it so that not everything works all the time. So you can see us try to solve

255
00:31:21,260 --> 00:31:27,180
the problems. If the note document stops responding, we have so many people, maybe it's lagging,

256
00:31:27,180 --> 00:31:32,620
wait a bit, and we'll try to reduce the size some, archive it, and hopefully it will pass.

257
00:31:33,500 --> 00:31:38,540
If the stream dies, that basically means my computer or internet connection has stopped.

258
00:31:39,100 --> 00:31:44,620
In that case, wait a minute, it'll reboot. Usually it takes around five minutes to get everything set

259
00:31:44,620 --> 00:31:52,140
up again and we will resume. Worst case you'll get an email saying that something big has happened.

260
00:31:53,260 --> 00:31:59,900
One year the internet actually died so a major content distribution network stopped working

261
00:31:59,900 --> 00:32:05,580
and Twitch couldn't load. So if something like this happens well just wait we have videos we'll

262
00:32:05,580 --> 00:32:11,580
figure it out. If a cat interrupts one of the instructors this is actually the opposite of a

263
00:32:11,580 --> 00:32:18,060
problem. So my cat usually starts coming by later in the day, so stick around to the end if you want

264
00:32:18,060 --> 00:32:26,700
to see a cat interact. I always put it on stream if it's there. Okay, we have videos. So videos

265
00:32:27,340 --> 00:32:35,340
are being recorded. There's no way that your voice or whatever can be in it because that's why we're

266
00:32:35,340 --> 00:32:41,260
streaming. Videos are available on Twitch for seven days and then on YouTube after we process them.

267
00:32:41,580 --> 00:32:46,620
So, unlike other years, I haven't promised to process all the YouTube videos the same

268
00:32:46,620 --> 00:32:49,820
day to have them up by midnight.

269
00:32:49,820 --> 00:32:56,620
But I think other people would like to work on it, and they will try to get them there

270
00:32:56,620 --> 00:33:00,380
by the, well, within a few days.

271
00:33:00,380 --> 00:33:01,900
So we'll see how that goes.

272
00:33:01,900 --> 00:33:06,460
If you want to volunteer, well, get in touch.

273
00:33:06,460 --> 00:33:10,340
Okay, being respectful and helpful.

274
00:33:10,340 --> 00:33:16,260
there's many people here on many different levels. So this is okay. Please

275
00:33:16,260 --> 00:33:21,300
try to help everyone, no matter who they are. Everyone is both a teacher and a

276
00:33:21,300 --> 00:33:27,700
learner, so the attendees can help each other in the notes, and also some of the

277
00:33:27,700 --> 00:33:32,900
instructors are here because we want to learn new topics. Please be kind to

278
00:33:32,900 --> 00:33:38,820
everyone. We'll try to take time to check in with people and ask, how are you doing?

279
00:33:38,820 --> 00:33:43,780
are we going too fast or too slow? But if you're with other people in smaller groups

280
00:33:43,780 --> 00:33:49,660
and so on, do the same. Ask people, are you doing okay? Are you getting what you need

281
00:33:49,660 --> 00:33:56,420
out of this? And so on. And when anything is not going right, speak up soon. So, in

282
00:33:56,420 --> 00:34:00,460
this case, write in the notes. If you can't hear us, if the screen share is not working

283
00:34:00,460 --> 00:34:06,260
right, write something saying, hey, we can't hear, we can't see, or we just completely

284
00:34:06,260 --> 00:34:13,300
lost this, the volume's too low, and we'll solve it. Okay, final notes. There have been a few times

285
00:34:13,300 --> 00:34:19,060
we have come back from the break, started to talk, have talked for a few minutes, and then realized

286
00:34:19,060 --> 00:34:25,380
that nobody can hear what we have just said, and then just repeat everything afterwards. Yeah,

287
00:34:25,940 --> 00:34:33,540
okay. So, certificates. You can see information about this on the course web page. I think

288
00:34:33,540 --> 00:34:42,420
there's not much more to say here. There's many ways you can keep in touch, including joining this

289
00:34:43,540 --> 00:34:49,780
chat. And we have a stream here where we, us, our instructors, are talking. And we'd be happy if

290
00:34:49,780 --> 00:34:55,300
learners or whoever would like to come give us feedback there and even start helping out some.

291
00:34:56,020 --> 00:35:02,740
If you like this, there are other workshops going on. So, in particular, our main code

292
00:35:02,740 --> 00:35:09,380
refinery workshop has a lot of complementary skills to this for scientists. So with that said,

293
00:35:09,380 --> 00:35:16,900
we're not too late. [name], is there anything that important that I missed? No, I think it's

294
00:35:16,900 --> 00:35:23,780
important to just have fun, try to learn, and not don't worry about it too much. If you

295
00:35:23,780 --> 00:35:29,780
know something already, like throughout this course I've learned a lot of new approaches to

296
00:35:29,780 --> 00:35:36,740
various things. I'm certain that I will learn new things through this course, because I haven't

297
00:35:37,300 --> 00:35:44,260
looked through all of the materials that have been updated. So, have fun. And whatever point

298
00:35:44,260 --> 00:35:51,460
of your coding life you are in, I think you will get something out of this course. So, just have

299
00:35:51,460 --> 00:35:58,660
fun and don't worry about it too much. We are here to help. Yeah. Okay. That's a good way to put it.

300
00:35:58,660 --> 00:36:06,020
just have fun. Just enjoy the experience. Okay, with that being said, if we come back to the main

301
00:36:07,060 --> 00:36:14,980
course page, if I can find my cursor, we see next up is Jupyter. And this is

302
00:36:16,100 --> 00:36:22,500
[name] teaching and me supporting. So thanks, [name]. I think we'll see each other after lunch.

303
00:36:22,500 --> 00:36:23,500
Yes.

304
00:36:23,500 --> 00:36:24,500
Yes.

305
00:36:24,500 --> 00:36:25,500
Yes.

306
00:36:25,500 --> 00:36:26,500
So, okay.

307
00:36:26,500 --> 00:36:27,500
Have fun.

308
00:36:27,500 --> 00:36:28,500
Sounds good.

309
00:36:28,500 --> 00:36:29,500
Bye.

310
00:36:29,500 --> 00:36:30,500
[name], are you here?

311
00:36:30,500 --> 00:36:31,500
Yes.

312
00:36:31,500 --> 00:36:32,500
Hello.

313
00:36:32,500 --> 00:36:33,500
Hello.

314
00:36:33,500 --> 00:36:34,500
Hello.

315
00:36:34,500 --> 00:36:35,500
Welcome.

316
00:36:35,500 --> 00:36:36,500
Would you like to introduce yourself to everyone?

317
00:36:36,500 --> 00:36:37,500
Yes.

318
00:36:37,500 --> 00:36:38,500
I'm [name].

319
00:36:38,500 --> 00:36:39,500
I'm working at Uppsala University in Sweden.

320
00:36:39,500 --> 00:36:40,500
Very happy to teach this lesson together with [name].

321
00:36:40,500 --> 00:36:41,900
I'm [name].

322
00:36:41,900 --> 00:36:44,780
I'm working at Uppsala University in Sweden.

323
00:36:44,780 --> 00:36:48,820
Very happy to teach this lesson together with [name].

324
00:36:48,820 --> 00:36:51,460
[name] and [name] have already told many things

325
00:36:51,460 --> 00:36:54,380
that stand for this lesson as well.

326
00:36:54,380 --> 00:36:57,540
So for Jupyter, we are really just going

327
00:36:57,540 --> 00:36:59,260
to scratch the surface of it.

328
00:36:59,260 --> 00:37:02,740
We are not going to go through a lot of detail

329
00:37:05,340 --> 00:37:08,020
and we are doing that just so that you all get

330
00:37:08,020 --> 00:37:15,420
And on the same base, it's perfectly fine to use the command line if you prefer that

331
00:37:15,420 --> 00:37:18,220
or your favorite ID.

332
00:37:18,220 --> 00:37:20,040
That's of course also an option.

333
00:37:20,040 --> 00:37:21,420
So it's really up to you.

334
00:37:21,420 --> 00:37:27,780
But for those of you that like to learn more about Jupyter, so what is Jupyter?

335
00:37:27,780 --> 00:37:28,780
So you can...

336
00:37:28,780 --> 00:37:30,860
Wait, I need to switch to your screen first.

337
00:37:30,860 --> 00:37:31,860
Yes.

338
00:37:31,860 --> 00:37:32,860
Thank you.

339
00:37:32,860 --> 00:37:34,780
And now it should be visible.

340
00:37:34,780 --> 00:37:35,780
Okay.

341
00:37:35,780 --> 00:37:36,780
Great.

342
00:37:36,780 --> 00:37:37,780
Yes.

343
00:37:37,780 --> 00:37:43,700
know if the font is not big enough for you. We should adjust it in any way.

344
00:37:43,700 --> 00:37:50,420
It looks like it's probably big enough. Okay, yes, so please begin. So maybe first

345
00:37:50,420 --> 00:37:58,900
from the voice of the learner. So my understanding is that the point of this lesson is to provide

346
00:37:58,900 --> 00:38:09,300
one user interface so people can do other course stuff. Basically, you know, a person

347
00:38:09,300 --> 00:38:13,140
completely new to Python can get started enough to do the other exercises.

348
00:38:15,380 --> 00:38:20,420
Yeah, exactly. The nice thing about Jupyter is that it's very interactive and you can

349
00:38:20,420 --> 00:38:25,420
and you can execute pieces of code in the interface

350
00:38:29,420 --> 00:38:33,900
and it's going to be clearer in a little bit

351
00:38:33,900 --> 00:38:36,000
when we fire it up.

352
00:38:36,000 --> 00:38:41,000
And you can integrate figures, code, equations,

353
00:38:43,740 --> 00:38:46,580
if you want to stylize the text

354
00:38:46,580 --> 00:38:49,700
so you can have documentation along your code

355
00:38:49,700 --> 00:38:52,800
in an easily accessible matter,

356
00:38:52,800 --> 00:38:57,180
and you can do all that in the Jupyter Notebook.

357
00:38:58,120 --> 00:38:58,960
Yes.

358
00:38:58,960 --> 00:38:59,780
So,

359
00:39:03,160 --> 00:39:04,640
I have already said this.

360
00:39:04,640 --> 00:39:07,280
I'm going to start it up,

361
00:39:07,280 --> 00:39:11,560
and if you still have problems with installations,

362
00:39:11,560 --> 00:39:15,600
then my colleagues

363
00:39:15,600 --> 00:39:20,700
We'll be able to help you, hopefully.

364
00:39:20,700 --> 00:39:31,940
So the way I started is I first activate my MiniForge, the base environment for MiniForge,

365
00:39:31,940 --> 00:39:38,700
and I do that just as it's described there.

366
00:39:38,700 --> 00:39:41,900
You are demonstrating on a Mac computer.

367
00:39:41,900 --> 00:39:43,540
I'm demonstrating on the Mac.

368
00:39:43,540 --> 00:39:48,660
it's going to work the same on the Linux and if you want to see how you can do that on Windows

369
00:39:48,660 --> 00:39:59,380
then you just switch to this tab for Windows. Yeah. And I am going to use MiniForge in this

370
00:39:59,380 --> 00:40:07,380
case. If you have Anaconda you can do that or you can use the Anaconda Navigator, it's up to you.

371
00:40:07,380 --> 00:40:15,300
but I am going to use MiniForge. So I'm going to go back to my terminal and I will activate MiniForge

372
00:40:17,140 --> 00:40:22,180
and I have a different location for MiniForge and that's why I have an extra

373
00:40:23,860 --> 00:40:28,740
directory there but then it's just the same MiniForge being activated.

374
00:40:29,620 --> 00:40:36,340
And I have to do this as I have not done any Fonda in it. I prefer not to have the base

375
00:40:36,340 --> 00:40:46,420
environment activated by default. Okay, so now I have the base and I do not want to work in the

376
00:40:46,420 --> 00:40:52,660
base environment and the reason for that is that for the rest of the course we will be needing

377
00:40:52,660 --> 00:41:01,540
other packages which are not in this base and in order to do that I'm going to activate the

378
00:41:01,540 --> 00:41:07,380
environment that I have created for this course specifically, and that has the name Python for

379
00:41:07,380 --> 00:41:16,420
SciComp. So there's a question in the chat, what is being activated here? And I guess the follow-up

380
00:41:16,420 --> 00:41:26,260
is why? Yeah, so by doing source, miniforge.bin activate, I just activate the base environment

381
00:41:26,260 --> 00:41:35,780
for MiniForge and that is very basic. So what is MiniForge and what can we explain some sort of

382
00:41:35,780 --> 00:41:50,340
the bigger picture here? So MiniForge has limited its lightweight by construction. It has a minimal

383
00:41:50,340 --> 00:41:58,580
set of tools like Conda and Mamba and some basic Python packages.

384
00:42:01,780 --> 00:42:16,500
But, yeah, I mean, in order to use additional packages, then I have created this environment.

385
00:42:16,500 --> 00:42:23,240
And the reason why they don't come with MiniForge is because there is such a large number of

386
00:42:23,240 --> 00:42:29,020
packages and everyone wants to customize their own environment.

387
00:42:29,020 --> 00:42:40,980
So it is easier if you build simply the environment that is suitable for your workflow.

388
00:42:40,980 --> 00:42:48,200
You could work with Anaconda, and I think that has most of the packages, if not all.

389
00:42:48,200 --> 00:42:52,280
I think it does have all the packages that we are using in this course, but there has

390
00:42:52,280 --> 00:42:53,960
been licensing issues with that.

391
00:42:53,960 --> 00:43:03,600
So we are going to go for a free alternative, which is...

392
00:43:03,600 --> 00:43:09,120
So this is like the way we, how do we say it?

393
00:43:09,120 --> 00:43:14,000
you can install plain Python but that doesn't include everything needed for science. So

394
00:43:15,360 --> 00:43:21,600
MiniForge allows you to make these other environments and the environment is a thing

395
00:43:21,600 --> 00:43:28,880
that has a bunch of scientific software installed in it. Exactly. So I'm going to show quickly what

396
00:43:28,880 --> 00:43:35,520
this environment has. So it has JupyterLab that we are going to be using in this lesson,

397
00:43:35,520 --> 00:43:44,800
them, but it also has NumPy and SciPy, Matplotlib, and some MPI4Py, which we'll use in the parallel

398
00:43:44,800 --> 00:43:56,080
lesson and, yeah, so, and in order to make sure that all these different packages work

399
00:43:56,080 --> 00:44:03,360
together, then we build it in one environment, which we'll be using throughout this course.

400
00:44:03,360 --> 00:44:08,160
And I guess there's more questions about how do we make the environments.

401
00:44:08,160 --> 00:44:12,800
So making these was done as part of the installation instructions.

402
00:44:12,800 --> 00:44:17,800
So we see the link up here in the purple color.

403
00:44:17,800 --> 00:44:24,920
So if you're not ready and set up, you probably don't have enough time to do it now.

404
00:44:24,920 --> 00:44:30,560
So in that case, what I would say is during the exercise time and the break times, work

405
00:44:30,560 --> 00:44:39,160
on this, work on installing it, and then hopefully you're ready for after lunch or tomorrow.

406
00:44:39,160 --> 00:44:48,760
And also we'll go into more detail about what this actually means later on, in, on day two

407
00:44:48,760 --> 00:44:53,280
or three, we have a whole lesson about how the environments work.

408
00:44:53,280 --> 00:45:01,760
Exactly. If you have Anaconda, you can open JupyterLab from there, otherwise you can create

409
00:45:01,760 --> 00:45:07,760
this environment when you have some time. But you can just follow the lesson along and

410
00:45:07,760 --> 00:45:14,480
try it later on if you prefer. So that is okay. So I'm going to go back to my terminal.

411
00:45:14,480 --> 00:45:18,160
So then I am going to activate this particular environment

412
00:45:18,160 --> 00:45:20,080
that I have created.

413
00:45:23,080 --> 00:45:25,520
So now I am in this one.

414
00:45:25,520 --> 00:45:29,200
And here I'm going to start up JupyterLab.

415
00:45:29,200 --> 00:45:32,120
And I'm going to do it a little bit different compared

416
00:45:32,120 --> 00:45:34,040
to what I wrote there.

417
00:45:34,040 --> 00:45:37,480
I'm going to add the option No Browser.

418
00:45:37,480 --> 00:45:41,000
And what this does, No Browser, it's

419
00:45:41,000 --> 00:45:47,080
going to provide me a link, a URL that I can use in order

420
00:45:47,080 --> 00:45:49,840
to open this JupyterLab session.

421
00:45:49,840 --> 00:45:53,880
So this way, I have control over which window

422
00:45:53,880 --> 00:45:57,520
I'm going to be using or which browser I'm

423
00:45:57,520 --> 00:45:59,920
going to be using for this.

424
00:45:59,920 --> 00:46:01,560
So I copy this link from here.

425
00:46:04,680 --> 00:46:08,960
Either of these two will work, so that I'm

426
00:46:08,960 --> 00:46:24,720
I'm going to paste it in one of my browser windows, tabs, sorry.

427
00:46:24,720 --> 00:46:25,720
Okay.

428
00:46:25,720 --> 00:46:26,720
Okay.

429
00:46:26,720 --> 00:46:35,120
So now I have Jupyter and when one starts it up, then we have a main page, which is

430
00:46:35,120 --> 00:46:37,520
the launcher.

431
00:46:37,520 --> 00:46:47,720
And I can open up a notebook from this launcher, and the important thing to know is that you

432
00:46:47,720 --> 00:46:59,280
can use different kernels, so you can have different programming languages which are being

433
00:46:59,280 --> 00:47:04,760
used in order to interpret the code that you are writing in the Jupyter notebook.

434
00:47:04,760 --> 00:47:14,240
And what they have in this particular environment is only the Python kernel, but you can also

435
00:47:14,240 --> 00:47:17,320
have extensions that work with other programming languages.

436
00:47:17,320 --> 00:47:26,240
You can also have additions, or you can have additional packages in the Conda environment

437
00:47:26,240 --> 00:47:30,920
so that you can work with different Conda environments

438
00:47:30,920 --> 00:47:39,200
in the same JupyterLab session, but not the same session.

439
00:47:39,200 --> 00:47:41,160
So you can have different notebooks

440
00:47:41,160 --> 00:47:43,760
or different environments if you prefer.

441
00:47:43,760 --> 00:47:50,360
But in this case, I'm just going to open up one for Python.

442
00:47:50,360 --> 00:47:55,360
And good practice is always to save the file, the notebook

443
00:47:55,360 --> 00:47:57,600
that you create.

444
00:47:57,600 --> 00:48:01,920
So I'm going to give this a name.

445
00:48:02,960 --> 00:48:08,440
So Jupyter Notebook, then Jupyter.

446
00:48:08,440 --> 00:48:11,560
Here what I can have is,

447
00:48:11,560 --> 00:48:14,440
so I have different cells.

448
00:48:14,440 --> 00:48:17,960
This is one cell and this cell can be

449
00:48:17,960 --> 00:48:24,480
either a code cell or it can be a markdown cell, for example.

450
00:48:24,480 --> 00:48:28,800
So I, why it has disappeared, it's still there.

451
00:48:28,800 --> 00:48:31,600
Yeah. So I can write, for example, let's see,

452
00:48:31,600 --> 00:48:37,840
I'm going to copy paste something from the lesson as it's a bit more well-thought.

453
00:48:37,840 --> 00:48:41,440
So I will just scroll a little bit here,

454
00:48:41,440 --> 00:48:49,640
and I'm going to copy this text which has a markdown format,

455
00:48:49,640 --> 00:48:52,920
paste it in myself, and I'm going to run this.

456
00:48:52,920 --> 00:49:00,040
on my Mac it's a shift enter but it may be different depending on your operating system.

457
00:49:00,040 --> 00:49:05,160
So now the output is shown here so it's just a stylized text with italics or

458
00:49:06,120 --> 00:49:15,560
highlighters or links in fancy colors. The cells can also be figures or as I said they can be

459
00:49:15,560 --> 00:49:19,120
the code as well.

460
00:49:19,120 --> 00:49:25,280
So let's see if we can just show some example of a code.

461
00:49:25,280 --> 00:49:32,480
Yeah, so let's just do a simple for loop in Python.

462
00:49:32,480 --> 00:49:36,400
So note here that now I have changed from a markdown

463
00:49:36,400 --> 00:49:38,400
set to a code set.

464
00:49:38,400 --> 00:49:40,320
So then the kernel, which is Python,

465
00:49:40,320 --> 00:49:50,080
going to interpret this as a Python cell. So I'm just going to print the numbers in the range

466
00:49:50,080 --> 00:49:59,520
up to 3, which is 0, 1, 2. So I can just move it more with this.

467
00:50:01,200 --> 00:50:09,680
And the way, again, the way I execute this cell is by pressing Shift Enter on my Mac.

468
00:50:10,320 --> 00:50:23,080
So, if I choose to print several lines, I cannot actually do that in one cell because

469
00:50:23,080 --> 00:50:26,780
only the very last one is going to be printed.

470
00:50:26,780 --> 00:50:31,560
So then what I would need to do is actually to break this down into two cells if I do

471
00:50:31,560 --> 00:50:36,400
wish to have both some sprinkled.

472
00:50:40,280 --> 00:50:43,280
So this is one thing to remember.

473
00:50:46,000 --> 00:50:51,000
In addition to using the, to running code,

474
00:50:53,040 --> 00:50:57,880
you can also run some bash scripts if you want to.

475
00:50:57,880 --> 00:51:06,880
And the way you can do that is by using these magics.

476
00:51:06,880 --> 00:51:09,880
So here we have one example for bash.

477
00:51:11,880 --> 00:51:14,880
What's a magic? What does that mean?

478
00:51:14,880 --> 00:51:21,880
So magic is a way of telling the Jupyter notebook that

479
00:51:21,880 --> 00:51:32,640
that this cell should not be interpreted as being Python code or code written in the programming

480
00:51:32,640 --> 00:51:38,680
language that the kernel is for, but it is actually bash. Or it can be something different.

481
00:51:38,680 --> 00:51:45,120
The way to tell that it is bash code is to have this double percentage followed by bash

482
00:51:45,120 --> 00:51:50,120
And then, yeah, just another simple loop in Bash.

483
00:51:53,000 --> 00:51:54,560
There are many different magics.

484
00:51:54,560 --> 00:51:57,200
We won't really go through them.

485
00:51:57,200 --> 00:52:00,120
It's just a way of letting you know they exist

486
00:52:00,120 --> 00:52:01,480
and then you can check some more.

487
00:52:01,480 --> 00:52:05,240
One nice magic is the timeit one.

488
00:52:05,240 --> 00:52:10,240
And what this does is going to run this cell

489
00:52:10,240 --> 00:52:17,440
to run this cell for a couple of times

490
00:52:17,440 --> 00:52:21,200
and then provide an average of the time

491
00:52:21,200 --> 00:52:24,360
that it took to execute.

492
00:52:24,360 --> 00:52:28,640
So in this case, it's 60 milliseconds.

493
00:52:28,640 --> 00:52:37,120
It's a nice magic for if you want

494
00:52:37,120 --> 00:52:49,440
test how much time different cells of your notebook take. You may want to find ways of

495
00:52:49,440 --> 00:52:56,000
improving that and you want to see, I mean, how different algorithms or different, yeah,

496
00:52:56,720 --> 00:53:03,600
different ways of programming can impact the result. And I mean, of course, I mean, it's

497
00:53:03,600 --> 00:53:08,600
It's, well, this has just taken milliseconds,

498
00:53:10,120 --> 00:53:14,400
but it is questionable how useful it is

499
00:53:14,400 --> 00:53:19,400
for code that runs over many minutes or hours.

500
00:53:21,400 --> 00:53:24,860
But you can use that for a quick estimation.

501
00:53:26,640 --> 00:53:28,320
And let's see.

502
00:53:28,320 --> 00:53:35,620
You can use line magic if you want as well.

503
00:53:35,620 --> 00:53:44,520
So this starts with one percentage and there are many really that are out there.

504
00:53:44,520 --> 00:53:53,920
So I'm going to just show you if I remember correctly, yes, these are many different magics

505
00:53:53,920 --> 00:53:56,000
that you can use.

506
00:53:56,000 --> 00:53:59,080
And the focus of this lesson is now creating this magic.

507
00:53:59,080 --> 00:54:06,520
So if you want to learn more, you can just play around with that.

508
00:54:06,520 --> 00:54:13,000
So [name], what do you think we should say more about Jupyter?

509
00:54:13,000 --> 00:54:18,080
Yeah, maybe I think you gave the pretty good intro there.

510
00:54:18,080 --> 00:54:24,480
So there's a whole lot more about all of these topics and many things to do.

511
00:54:24,480 --> 00:54:33,160
But for the purposes of right now, the only thing is, can you activate the environment

512
00:54:33,160 --> 00:54:36,880
with the libraries needed for this course?

513
00:54:36,880 --> 00:54:39,800
And can you do some basic printing?

514
00:54:39,800 --> 00:54:44,480
And if you can get that far, then through the rest of the course, you'll be seeing more

515
00:54:44,480 --> 00:54:47,160
tips and tricks with Jupyter as we go on.

516
00:54:47,160 --> 00:54:51,000
So don't worry too much.

517
00:54:51,000 --> 00:54:52,760
Exactly.

518
00:54:52,760 --> 00:54:59,040
And I think now it would be nice if you try it on your own.

519
00:54:59,040 --> 00:55:08,800
So we have an exercise that I'm going to share a link to and try to do it for the next, let's

520
00:55:08,800 --> 00:55:11,800
say 15 minutes.

521
00:55:11,800 --> 00:55:19,120
If you're very fast, you can jump to exercise number three, but that is really optional.

522
00:55:19,120 --> 00:55:23,440
So it's really, if you do have the time.

523
00:55:23,440 --> 00:55:27,760
And if you are very experienced with Jupyter and you don't feel like doing these exercises,

524
00:55:27,760 --> 00:55:35,400
then just share what you like about it or dislike about it in the notes document.

525
00:55:35,400 --> 00:55:40,200
And then we convene at nine.

526
00:55:40,200 --> 00:55:51,200
I propose we come back at 50 past the hour, and then if we can take five minutes to wrap

527
00:55:51,200 --> 00:55:58,200
up, then we can take the break, and then the next lesson starts five past the hour.

528
00:55:58,200 --> 00:56:00,200
Yes, right.

529
00:56:00,200 --> 00:56:01,200
Okay.

530
00:56:01,200 --> 00:56:08,200
So, please continue asking questions and all.

531
00:56:08,200 --> 00:56:11,680
I will switch the screen to the notes here.

532
00:56:12,800 --> 00:56:14,180
Yes, you see.

533
00:56:14,180 --> 00:56:16,780
And you see down below, there's...

534
00:56:17,780 --> 00:56:20,240
We're having notes about the exercise here.

535
00:56:20,240 --> 00:56:22,580
And we'll keep answering questions.

536
00:56:22,580 --> 00:56:23,580
Um...

537
00:56:23,840 --> 00:56:26,780
And try to clear up all the

538
00:56:26,780 --> 00:56:28,480
little bits of other things.

539
00:56:29,280 --> 00:56:30,280
Okay.

540
00:56:31,680 --> 00:56:33,480
So, with that said,

541
00:56:33,480 --> 00:56:36,080
good luck, and see you later.

542
00:56:38,200 --> 00:56:41,000
Okay, bye.

543
00:57:08,200 --> 00:57:10,260
you

544
00:57:38,200 --> 00:57:40,260
you

545
00:58:08,200 --> 00:58:10,260
you

546
00:58:38,200 --> 00:58:40,260
you

547
00:59:08,200 --> 00:59:10,260
you

548
00:59:38,200 --> 00:59:40,260
you

549
01:00:08,200 --> 01:00:10,260
you

550
01:00:38,200 --> 01:00:40,260
you

551
01:01:08,200 --> 01:01:10,260
you

552
01:01:38,200 --> 01:01:40,260
you

553
01:02:08,200 --> 01:02:10,260
you

554
01:02:38,200 --> 01:02:40,260
you

555
01:03:08,200 --> 01:03:10,260
you

556
01:03:38,200 --> 01:03:40,260
you

557
01:04:08,200 --> 01:04:10,260
you

558
01:04:38,200 --> 01:04:40,260
you

559
01:05:08,200 --> 01:05:10,260
you

560
01:05:38,200 --> 01:05:40,260
you

561
01:06:08,200 --> 01:06:10,260
you

562
01:06:38,200 --> 01:06:40,260
you

563
01:07:08,200 --> 01:07:10,260
you

564
01:07:38,200 --> 01:07:40,260
you

565
01:08:08,200 --> 01:08:10,260
you

566
01:08:38,200 --> 01:08:40,260
you

567
01:56:08,200 --> 01:56:11,200
♪

568
01:56:11,200 --> 01:56:14,200
♪

569
01:56:14,200 --> 01:56:17,360
♪

570
01:56:17,360 --> 01:56:20,360
♪

571
01:56:20,360 --> 01:56:23,520
♪

572
01:56:23,520 --> 01:56:26,560
♪

573
01:56:26,560 --> 01:56:29,600
♪

574
01:56:29,600 --> 01:56:32,640
♪

575
01:56:32,640 --> 01:56:35,760
♪

576
01:56:35,760 --> 01:56:37,820
you

577
01:57:05,760 --> 01:57:24,760
So, welcome back.

578
01:57:24,760 --> 01:57:28,520
I hope you got some time to try out the exercises.

579
01:57:28,520 --> 01:57:35,400
We have had some questions in our collaborative notes, so keep them coming.

580
01:57:35,400 --> 01:57:37,960
For example, one person asked that if you

581
01:57:37,960 --> 01:57:42,320
can have mixed data types in the same array to store metadata.

582
01:57:42,320 --> 01:57:45,080
But maybe that's not the best approach.

583
01:57:45,080 --> 01:57:47,720
So for that, we have other libraries,

584
01:57:47,720 --> 01:57:51,240
such as Xarray, which will be presented later on

585
01:57:51,240 --> 01:57:51,920
in this course.

586
01:57:54,720 --> 01:57:57,240
We'll quickly take a look at the exercise

587
01:57:57,240 --> 01:58:00,200
one, what the answers were.

588
01:58:00,200 --> 01:58:02,880
So the first question was the comparison

589
01:58:02,880 --> 01:58:05,320
between A-range and linspace.

590
01:58:05,320 --> 01:58:11,880
So as you can see, A-range gives you integers.

591
01:58:11,880 --> 01:58:17,120
And in linspace, first thing is you can set the start and stop.

592
01:58:17,120 --> 01:58:21,200
And you get floating points equally spaced

593
01:58:21,200 --> 01:58:23,920
based on the start and stop and the number of elements

594
01:58:23,920 --> 01:58:24,560
that you need.

595
01:58:28,040 --> 01:58:33,760
If we want to create a random array of a given shape of three

596
01:58:33,760 --> 01:58:38,480
rows and two columns, you can do that using random.

597
01:58:38,480 --> 01:58:42,280
And then if we go into use as type of it,

598
01:58:42,280 --> 01:58:44,360
it does not round everything.

599
01:58:44,360 --> 01:58:48,600
So it doesn't round, for example, 0.95 to 1,

600
01:58:48,600 --> 01:58:51,760
but it just truncates it, casts it.

601
01:58:51,760 --> 01:58:54,520
Then integer, losing all the precision,

602
01:58:54,520 --> 01:58:59,240
so you only get zeros, because this function produces

603
01:58:59,240 --> 01:59:03,440
random floats between 0 and 1.

604
01:59:03,440 --> 01:59:05,200
If you want random integers instead,

605
01:59:05,200 --> 01:59:09,880
there is the randint function instead,

606
01:59:09,880 --> 01:59:15,000
where you specify what range and then the shape.

607
01:59:15,000 --> 01:59:16,800
So that's question two.

608
01:59:21,040 --> 01:59:25,560
No, question three, sorry, for random integers.

609
01:59:25,560 --> 01:59:28,520
If you do reshape, we need to be careful,

610
01:59:28,520 --> 01:59:31,040
making sure that the number of elements are the same.

611
01:59:31,040 --> 01:59:36,360
So for example, we can have a reshaped array consisting

612
01:59:36,360 --> 01:59:42,440
of six rows, so still six elements, or two rows instead.

613
01:59:42,440 --> 01:59:45,520
But if you're going to try something very strange,

614
01:59:45,520 --> 01:59:48,880
like 12 rows, you will get an error instead.

615
01:59:52,400 --> 01:59:55,320
Now the last question is just a check

616
01:59:55,320 --> 02:00:00,520
of what we showed, which is how to save it using np.save.

617
02:00:00,520 --> 02:00:02,460
and to get it back again.

618
02:00:04,700 --> 02:00:06,300
So that was exercise one.

619
02:00:07,220 --> 02:00:09,660
Keep the questions coming if you have any doubts

620
02:00:09,660 --> 02:00:12,060
and we'll move on to the next part,

621
02:00:12,060 --> 02:00:14,300
which is vectorization.

622
02:00:14,300 --> 02:00:17,380
We'll continue to talk about the arithmetic calculations

623
02:00:17,380 --> 02:00:20,100
for these items in a read.

624
02:00:21,140 --> 02:00:24,060
Yeah, 10 or 20 minutes ago,

625
02:00:24,060 --> 02:00:28,340
you see that you have saw that if we use NumPy

626
02:00:28,340 --> 02:00:31,620
for this arithmetic calculation.

627
02:00:31,620 --> 02:00:33,580
Transformation from one array to another

628
02:00:33,580 --> 02:00:36,220
is quite super fast than the regular Python.

629
02:00:37,180 --> 02:00:41,900
The mechanism is that the code in NumPy

630
02:00:41,900 --> 02:00:46,900
is implemented in the C or Fortran code.

631
02:00:48,340 --> 02:00:50,660
That's why it is a low-level programming language,

632
02:00:50,660 --> 02:00:53,780
which enables the fast calculation

633
02:00:53,780 --> 02:00:57,820
for this data manipulation in this array.

634
02:00:58,340 --> 02:01:03,940
That is why we prefer to use the NumPy for the scientific computing.

635
02:01:06,260 --> 02:01:10,100
Besides this, we also have other arithmetic calculations,

636
02:01:11,060 --> 02:01:18,420
something similar to the ones in regular Python and also in the other programming languages.

637
02:01:18,420 --> 02:01:25,220
We will show how it goes right here. For example, the addition,

638
02:01:25,220 --> 02:01:32,300
subtraction, multiplication, and the division right here.

639
02:01:32,300 --> 02:01:41,980
So actually now it's generating the two arrays, A and B, and we will do some arithmetic calculation

640
02:01:41,980 --> 02:01:42,980
for these two arrays.

641
02:01:42,980 --> 02:01:43,980
Yeah.

642
02:01:43,980 --> 02:01:44,980
Right.

643
02:01:44,980 --> 02:01:51,900
So you get A plus B, and you get the sum?

644
02:01:51,900 --> 02:01:53,940
Yeah, quite simple.

645
02:01:53,940 --> 02:01:58,940
You can see it's the addition of these two arrays

646
02:02:01,200 --> 02:02:06,000
element by element means for the first element

647
02:02:06,000 --> 02:02:11,000
is a one in A and the first element in array B is five.

648
02:02:11,400 --> 02:02:13,240
And then one plus five is a six

649
02:02:13,240 --> 02:02:15,280
to get to the first one in this new array.

650
02:02:15,280 --> 02:02:16,120
Yes.

651
02:02:17,640 --> 02:02:22,640
And you can see if we use the add method in the NumPy

652
02:02:22,640 --> 02:02:32,440
get the same results? Yes. But for matrix multiplication. Okay, matrix multiplication.

653
02:02:32,440 --> 02:02:42,560
So we have A and B and then we multiply the first row against the first column. So 5 and

654
02:02:42,560 --> 02:02:53,920
14 becomes 90. This is the way for us to handle the matrix multiplication and the other problem

655
02:02:53,920 --> 02:03:01,280
language for the first line first row and the first column and then go on but we have another

656
02:03:01,280 --> 02:03:13,520
one, the NumPy dot, to see what is... Yes. For this particular example, it gives you the same result.

657
02:03:15,440 --> 02:03:20,720
But it can be useful where you're actually interested in dot product system.

658
02:03:20,720 --> 02:03:26,160
Yeah. If you make the efficiency of these two methods, you can see the difference. You can

659
02:03:26,160 --> 02:03:37,040
time it some magic method you can play the gold later less or minus transpose

660
02:03:37,040 --> 02:03:46,280
for example yes much more functions to try out

661
02:03:46,280 --> 02:03:53,560
now before we go to exercise 2 we will also present we can we continue to talk

662
02:03:53,560 --> 02:04:01,920
about indexing and slicing. These two functions means how can we extract one element or one

663
02:04:01,920 --> 02:04:12,640
block from this array. Yeah, because we can to extract some, some items from the sysarray

664
02:04:12,640 --> 02:04:20,720
to further usage or the for the data visualization, or the other calculations. Let's see where

665
02:04:20,720 --> 02:04:28,640
can generate uh this array one by one to see we can so that we have more space to to extract

666
02:04:29,920 --> 02:04:37,120
so we had a two by two array and if we give a zero we get the first row

667
02:04:39,040 --> 02:04:41,120
and how can we extract the first column

668
02:04:45,040 --> 02:04:46,560
the first column would be

669
02:04:50,720 --> 02:05:00,320
like that so we get one three yeah that's good now here is a better example

670
02:05:00,320 --> 02:05:05,120
with a much bigger area we can use that

671
02:05:05,440 --> 02:05:13,320
if you need and let's let's take a look at how it's what's this stuff yes if we

672
02:05:13,320 --> 02:05:28,120
need this part then we can do in square brackets one all in three so yeah one

673
02:05:28,120 --> 02:05:35,000
from one two three is then the from the first row to the third row but in the

674
02:05:35,000 --> 02:05:42,320
third row is not included right hmm and also quick note in numpy rows starts

675
02:05:42,320 --> 02:05:49,040
are indexed from 0 yeah so this is row 0 and this is 1, 2 and then the third row

676
02:05:49,040 --> 02:05:55,680
skipped 0. This is the C type. If you are familiar with C, you know what

677
02:05:55,680 --> 02:06:00,880
you need to do. It is somewhat different to the fortune version

678
02:06:00,880 --> 02:06:04,440
because the fortune started from 1

679
02:06:04,440 --> 02:06:18,840
and if you need a very fancy slicing here like this one then we do

680
02:06:18,840 --> 02:06:32,880
So here, we are trying to get these two.

681
02:06:32,880 --> 02:06:39,280
So we can also, instead of using the colon slicing operation,

682
02:06:39,280 --> 02:06:42,600
we can also mention the coordinates.

683
02:06:46,480 --> 02:06:47,160
Right?

684
02:06:47,160 --> 02:06:48,760
Yes.

685
02:06:48,760 --> 02:06:52,400
Boolean indexing, what's that?

686
02:06:52,400 --> 02:06:59,840
Boolean indexing means we can get the,

687
02:06:59,840 --> 02:07:03,440
we can set some conditions, and these conditions

688
02:07:03,440 --> 02:07:08,800
apply to the array, and we can get a new array

689
02:07:08,800 --> 02:07:16,120
for all these items that follow this condition right here.

690
02:07:16,120 --> 02:07:18,360
We just look at that.

691
02:07:18,360 --> 02:07:26,360
yeah we generate a mask because there's only one element which is zero

692
02:07:26,520 --> 02:07:32,680
then we can pass on that mask and then we get

693
02:07:32,680 --> 02:07:37,560
everything else you can see when we remove that the first

694
02:07:37,560 --> 02:07:42,440
atom here we started from that the atom to start from one but not

695
02:07:42,440 --> 02:07:46,760
zero although you will lose the shape because

696
02:07:46,760 --> 02:07:53,800
yeah the shape is somewhat different but you can do it in one go as well single line

697
02:07:57,240 --> 02:08:06,440
the same result all right so now is the time for trying out the exercises

698
02:08:06,440 --> 02:08:21,200
Let's combine the exercise 2 and exercise 3 together and let's see some basic arithmetical

699
02:08:21,200 --> 02:08:29,560
calculations using NumPy and also the summation of this and also the indexing and slicing

700
02:08:29,560 --> 02:08:41,680
how to extract some item or one block of item from the from the array. Yes. Yeah, nice.

701
02:08:41,680 --> 02:08:51,320
Nice. Take probably a minute, because we are wrong. A little bit behind the schedule. Right?

702
02:08:51,320 --> 02:08:52,320
Sounds good.

703
02:08:52,320 --> 02:08:53,320
Yeah.

704
02:08:53,320 --> 02:09:00,320
In 10 minutes, we come back at 11 o'clock, or 12 o'clock in Finland.

705
02:09:00,320 --> 02:09:02,320
At the hour.

706
02:09:02,320 --> 02:09:03,320
Yes.

707
02:09:03,320 --> 02:09:05,320
See you later, in 10 minutes.

708
02:09:05,320 --> 02:09:06,320
Bye.

709
02:09:21,320 --> 02:09:23,380
you

710
02:09:51,320 --> 02:09:53,380
you

711
02:10:21,320 --> 02:10:23,380
you

712
02:10:51,320 --> 02:10:53,380
you

713
02:11:21,320 --> 02:11:23,380
you

714
02:11:51,320 --> 02:11:53,380
you

715
02:12:21,320 --> 02:12:23,380
you

716
02:12:51,320 --> 02:12:53,380
you

717
02:13:21,320 --> 02:13:23,380
you

718
02:13:51,320 --> 02:13:53,380
you

719
02:14:21,320 --> 02:14:23,380
you

720
02:14:51,320 --> 02:14:53,380
you

721
02:15:21,320 --> 02:15:23,380
you

722
02:15:51,320 --> 02:15:53,380
you

723
02:16:21,320 --> 02:16:23,380
you

724
02:16:51,320 --> 02:16:53,380
you

725
02:17:21,320 --> 02:17:23,380
you

726
02:17:51,320 --> 02:17:53,380
you

727
02:18:21,320 --> 02:18:23,380
you

728
02:18:51,320 --> 02:18:58,960
All right, so welcome back, everyone.

729
02:18:58,960 --> 02:19:03,280
I hope you had some time to try out the exercises two and three.

730
02:19:03,280 --> 02:19:08,600
We'll quickly take a look at what the questions were.

731
02:19:08,600 --> 02:19:13,200
So the first one was to compare NumPy multiply and dot.

732
02:19:13,200 --> 02:19:14,320
What's the difference?

733
02:19:14,320 --> 02:19:21,160
So here I built, used the same A metric, A array that we had,

734
02:19:21,160 --> 02:19:22,760
and then identity array.

735
02:19:22,760 --> 02:19:26,960
Then if we try numpy.multiply on that,

736
02:19:26,960 --> 02:19:30,160
we get element-wise multiplication.

737
02:19:30,160 --> 02:19:35,120
So everything which is 0 cancels out,

738
02:19:35,120 --> 02:19:38,520
and then you are left with a diagonal.

739
02:19:38,520 --> 02:19:41,680
But instead, if you're going to do np.dot,

740
02:19:41,680 --> 02:19:44,280
it does matrix multiplication.

741
02:19:44,280 --> 02:19:51,000
this case. So that's the answer for the first question. And about the access

742
02:19:51,000 --> 02:19:59,000
parameter, if for, oh sorry, numpy.sum, yeah you can look at the

743
02:19:59,000 --> 02:20:03,000
documentation as well if you click there.

744
02:20:03,000 --> 02:20:13,120
So np.sum, if you pass access parameter as one, it does summation over

745
02:20:13,120 --> 02:20:21,800
the along the rows for every column so it aggregates and you get 3 here 22 and

746
02:20:21,800 --> 02:20:32,680
so on if you use access equal to 0 it does summation along the rows instead so

747
02:20:32,680 --> 02:20:38,360
that's why here you get a different answer if you skip that you get the sum

748
02:20:38,360 --> 02:20:44,200
of the whole array in one scalar.

749
02:20:45,080 --> 02:20:50,520
And finally, exercise number three, we are asked to

750
02:20:50,520 --> 02:20:56,680
create an array which is an identity array.

751
02:20:56,680 --> 02:21:03,400
Fold by fold, we create b. Now, note that we did not copy b

752
02:21:03,400 --> 02:21:07,720
here. It's all this. You don't get a message. You need to

753
02:21:07,720 --> 02:21:12,880
understand that this is actually a view, not a copy.

754
02:21:12,880 --> 02:21:18,400
So if you're going to modify this here in a cell above,

755
02:21:18,400 --> 02:21:24,320
we're going to set B as the first element of B as phi.

756
02:21:24,320 --> 02:21:28,320
Then it would have an effect on A as well.

757
02:21:28,320 --> 02:21:32,480
So when we do this, take care of that.

758
02:21:32,480 --> 02:21:33,520
All right.

759
02:21:33,520 --> 02:21:38,680
So now we go to the remaining parts.

760
02:21:38,680 --> 02:21:42,480
Yeah, because we are a little bit behind the schedule.

761
02:21:42,480 --> 02:21:46,880
So we will have a short wrap up, but this episode.

762
02:21:46,880 --> 02:21:50,760
Yeah, besides these standard operations we mentioned before,

763
02:21:50,760 --> 02:21:53,360
there are more types of operations.

764
02:21:53,360 --> 02:21:57,400
For example, the ufuncs, this is the universal function,

765
02:21:57,400 --> 02:22:00,960
which enables the users to have more control

766
02:22:00,960 --> 02:22:05,440
or for this of this array.

767
02:22:05,440 --> 02:22:10,280
And you can see that previously, the arithmetical operations

768
02:22:10,280 --> 02:22:15,280
is element by element, which means that the two arrays

769
02:22:15,280 --> 02:22:20,200
your handle should be the same size and the same shape.

770
02:22:20,200 --> 02:22:22,280
But in NumPy, you can have more control.

771
02:22:22,280 --> 02:22:24,480
For example, you can have this addition

772
02:22:24,480 --> 02:22:28,200
of a one-dimensional array to a two-dimensional array.

773
02:22:28,200 --> 02:22:30,320
How to handle this?

774
02:22:30,320 --> 02:22:33,520
you can use the broadcasting method right here.

775
02:22:33,520 --> 02:22:38,240
And this means that you handle this array from a small array

776
02:22:38,240 --> 02:22:39,320
to a large one.

777
02:22:39,320 --> 02:22:41,920
And the worst precise is also applicable.

778
02:22:41,920 --> 02:22:47,640
And you can do this from a large array to get the smaller one.

779
02:22:47,640 --> 02:22:54,520
It can be a candle for the slicing part right here.

780
02:22:54,520 --> 02:22:58,800
Besides this, we have more other functions right here.

781
02:22:58,800 --> 02:23:02,200
You can see the max, mean, sum.

782
02:23:02,200 --> 02:23:05,200
These functions are building functions

783
02:23:05,200 --> 02:23:08,720
in NumPy, which you save lots of time to handle the data.

784
02:23:08,720 --> 02:23:10,320
So due to the limitation, we're not

785
02:23:10,320 --> 02:23:14,240
going to talk too much about these functions.

786
02:23:14,240 --> 02:23:16,440
There are more or less materials,

787
02:23:16,440 --> 02:23:18,840
if you scroll down a bit.

788
02:23:18,840 --> 02:23:21,360
But there's less materials for the linear algebra

789
02:23:21,360 --> 02:23:22,960
and advanced math.

790
02:23:22,960 --> 02:23:27,480
And there are two accesses right here,

791
02:23:27,480 --> 02:23:29,400
accesses number four and number five.

792
02:23:29,400 --> 02:23:32,760
But if you like, you can take this as a homework

793
02:23:32,760 --> 02:23:36,800
and to see how these accesses and the solutions

794
02:23:36,800 --> 02:23:40,420
for the accesses are provided below the frames.

795
02:23:42,720 --> 02:23:43,560
Yeah, that's it.

796
02:23:44,920 --> 02:23:47,120
And then also accesses five,

797
02:23:47,120 --> 02:23:52,120
it's a bit more of NumPy operations introduction to those.

798
02:23:52,120 --> 02:24:02,760
to those and if you found this episode too simple of course you can there is a another episode in

799
02:24:02,760 --> 02:24:08,360
the same material which won't be covered in this course which is called advanced numpy and that you

800
02:24:08,360 --> 02:24:18,360
can find it just after this course material something for later yes in seeing case right

801
02:24:18,360 --> 02:24:26,360
time for us to stop here and we will continue after the lunch break. So see you in one hour.

802
02:24:27,800 --> 02:24:28,300
Bye.

803
02:24:48,360 --> 02:24:50,420
you

804
02:25:18,360 --> 02:25:20,420
you

805
02:25:48,360 --> 02:25:50,420
you

806
02:26:18,360 --> 02:26:20,420
you

807
02:26:48,360 --> 02:26:50,420
you

808
02:27:18,360 --> 02:27:20,420
you

809
02:27:48,360 --> 02:27:50,420
you

810
02:28:18,360 --> 02:28:20,420
you

811
02:28:48,360 --> 02:28:50,420
you

812
02:29:18,360 --> 02:29:20,420
you

813
02:29:48,360 --> 02:29:50,420
you

814
02:30:18,360 --> 02:30:20,420
you

815
02:30:48,360 --> 02:30:50,420
you

816
02:31:18,360 --> 02:31:20,420
you

817
02:31:48,360 --> 02:31:50,420
you

818
02:32:18,360 --> 02:32:20,420
you

819
02:32:48,360 --> 02:32:50,420
you

820
02:33:18,360 --> 02:33:20,420
you

821
02:33:48,360 --> 02:33:50,420
you

822
02:34:18,360 --> 02:34:20,420
you

823
02:34:48,360 --> 02:34:50,420
you

824
02:35:18,360 --> 02:35:20,420
you

825
02:35:48,360 --> 02:35:50,420
you

826
02:36:18,360 --> 02:36:20,420
you

827
02:36:48,360 --> 02:36:50,420
you

828
02:37:18,360 --> 02:37:20,420
you

829
02:37:48,360 --> 02:37:50,420
you

830
02:38:18,360 --> 02:38:20,420
you

831
02:38:48,360 --> 02:38:50,420
you

832
02:39:18,360 --> 02:39:20,420
you

833
02:39:48,360 --> 02:39:50,420
you

834
02:40:18,360 --> 02:40:20,420
you

835
02:40:48,360 --> 02:40:50,420
you

836
02:41:18,360 --> 02:41:20,420
you

837
02:41:48,360 --> 02:41:50,420
you

838
02:42:18,360 --> 02:42:20,420
you

839
02:42:48,360 --> 02:42:50,420
you

840
02:43:18,360 --> 02:43:20,420
you

841
02:43:48,360 --> 02:43:50,420
you

842
02:44:18,360 --> 02:44:20,420
you

843
02:44:48,360 --> 02:44:50,420
you

844
02:45:18,360 --> 02:45:20,420
you

845
02:45:48,360 --> 02:45:50,420
you

846
02:46:18,360 --> 02:46:20,420
you

847
02:46:48,360 --> 02:46:50,420
you

848
02:47:18,360 --> 02:47:20,420
you

849
02:47:48,360 --> 02:47:50,420
you

850
02:48:18,360 --> 02:48:20,420
you

851
02:48:48,360 --> 02:48:50,420
you

852
02:49:18,360 --> 02:49:20,420
you

853
02:49:48,360 --> 02:49:50,420
you

854
02:50:18,360 --> 02:50:20,420
you

855
02:50:48,360 --> 02:50:50,420
you

856
02:51:18,360 --> 02:51:20,420
you

857
02:51:48,360 --> 02:51:50,420
you

858
02:52:18,360 --> 02:52:20,420
you

859
02:52:48,360 --> 02:52:50,420
you

860
02:53:18,360 --> 02:53:20,420
you

861
02:53:48,360 --> 02:53:50,420
you

862
02:54:18,360 --> 02:54:20,420
you

863
02:54:48,360 --> 02:54:50,420
you

864
02:55:18,360 --> 02:55:20,420
you

865
02:55:48,360 --> 02:55:50,420
you

866
02:56:18,360 --> 02:56:20,420
you

867
02:56:48,360 --> 02:56:50,420
you

868
02:57:18,360 --> 02:57:20,420
you

869
02:57:48,360 --> 02:57:50,420
you

870
02:58:18,360 --> 02:58:20,420
you

871
02:58:48,360 --> 02:58:50,420
you

872
02:59:18,360 --> 02:59:20,420
you

873
02:59:48,360 --> 02:59:50,420
you

874
03:00:18,360 --> 03:00:20,420
you

875
03:00:48,360 --> 03:00:50,420
you

876
03:01:18,360 --> 03:01:20,420
you

877
03:01:48,360 --> 03:01:50,420
you

878
03:02:18,360 --> 03:02:20,420
you

879
03:02:48,360 --> 03:02:50,420
you

880
03:03:18,360 --> 03:03:20,420
you

881
03:03:48,360 --> 03:03:50,420
you

882
03:04:18,360 --> 03:04:20,420
you

883
03:04:48,360 --> 03:04:50,420
you

884
03:05:18,360 --> 03:05:20,420
you

885
03:05:48,360 --> 03:05:50,420
you

886
03:06:18,360 --> 03:06:20,420
you

887
03:06:48,360 --> 03:06:50,420
you

888
03:07:18,360 --> 03:07:20,420
you

889
03:07:48,360 --> 03:07:50,420
you

890
03:08:18,360 --> 03:08:20,420
you

891
03:08:48,360 --> 03:08:50,420
you

892
03:09:18,360 --> 03:09:20,420
you

893
03:09:48,360 --> 03:09:50,420
you

894
03:10:18,360 --> 03:10:20,420
you

895
03:10:48,360 --> 03:10:50,420
you

896
03:11:18,360 --> 03:11:20,420
you

897
03:11:48,360 --> 03:11:50,420
you

898
03:12:18,360 --> 03:12:20,420
you

899
03:12:48,360 --> 03:12:50,420
you

900
03:13:18,360 --> 03:13:20,420
you

901
03:13:48,360 --> 03:13:50,420
you

902
03:14:18,360 --> 03:14:20,420
you

903
03:14:48,360 --> 03:14:50,420
you

904
03:15:18,360 --> 03:15:20,420
you

905
03:15:48,360 --> 03:15:50,420
you

906
03:16:18,360 --> 03:16:20,420
you

907
03:16:48,360 --> 03:16:50,420
you

908
03:17:18,360 --> 03:17:20,420
you

909
03:17:48,360 --> 03:17:50,420
you

910
03:18:18,360 --> 03:18:20,420
you

911
03:18:48,360 --> 03:18:55,360
Hi, we're back.

912
03:18:55,360 --> 03:18:59,000
Hello.

913
03:18:59,000 --> 03:19:03,080
So now we are going to a new direction.

914
03:19:03,080 --> 03:19:05,340
We are going from NumPy to Pandas.

915
03:19:05,340 --> 03:19:13,000
So I hope everybody is feeling refreshed after lunch and so that we have lots of energy to

916
03:19:13,000 --> 03:19:18,120
maybe a cup of coffee to boost your energy for this lesson.

917
03:19:18,120 --> 03:19:25,160
Yeah, so I guess the first question that everyone wants to know is what is pandas and why?

918
03:19:26,600 --> 03:19:33,320
Do you have any initial insights? Yeah, so on the initial insights. So pandas,

919
03:19:33,320 --> 03:19:40,440
like we previously talked about how NumPy solved the problem in Python, where Python has

920
03:19:41,160 --> 03:19:47,720
various objects like lists and stuff like that that can, of course, be used to represent numbers,

921
03:19:47,720 --> 03:19:55,160
but it's very inefficient because, well, NumPy is written in C++ whereas Python objects are

922
03:19:55,160 --> 03:20:02,520
like Python objects and they are much slower. So NumPy solves a problem where you can store,

923
03:20:03,720 --> 03:20:09,560
you can use, create these number arrays. You can create number arrays and stuff like that.

924
03:20:09,560 --> 03:20:15,160
Like you can store lots of numbers and do operations on these numbers. But usually,

925
03:20:15,160 --> 03:20:20,040
Actually, in science, we don't usually just deal with numbers.

926
03:20:20,040 --> 03:20:22,640
The numbers usually mean something.

927
03:20:22,640 --> 03:20:28,160
So unless you're in pure mathematics, I feel like that.

928
03:20:28,160 --> 03:20:32,560
But in most of the cases, you have numbers that represent some quantities.

929
03:20:32,560 --> 03:20:34,560
You have numbers that represent something.

930
03:20:34,560 --> 03:20:41,400
So you have numbers like, let's say, temperature or height, or if you're in social studies,

931
03:20:41,400 --> 03:20:50,520
You might have a height or in a medicine, you might have a response to a drug or whatever.

932
03:20:50,520 --> 03:20:57,120
You might have all kinds of quantities that are represented as numbers, but there is some

933
03:20:57,120 --> 03:21:00,520
concept or something they are related to.

934
03:21:00,520 --> 03:21:04,440
So then you have some variable.

935
03:21:04,440 --> 03:21:09,440
So you have things that have numbers associated with them.

936
03:21:09,440 --> 03:21:14,800
And keeping track of this kind of stuff can get quite tedious quite quickly if you always

937
03:21:14,800 --> 03:21:16,780
just use NumPy arrays.

938
03:21:16,780 --> 03:21:24,640
So let's think of a situation where you want to, let's say a simple situation, you want

939
03:21:24,640 --> 03:21:30,240
to keep track of, let's say, temperature and pressure at a certain time.

940
03:21:30,240 --> 03:21:33,960
Like you're doing, I don't know, weather forecasting or something.

941
03:21:33,960 --> 03:21:43,960
You want to have a time dimension and then you have a pressure and a temperature at different

942
03:21:43,960 --> 03:21:50,680
times. You, of course, could do it in a way that you have a NumPy array for each one of these,

943
03:21:50,680 --> 03:21:56,600
and then you index every one. If you want to find a certain time range, you find from the

944
03:21:56,600 --> 03:22:01,720
time array and then you index the temperature and pressure. But it gets really tedious really

945
03:22:01,720 --> 03:22:09,640
quickly. So if you have these kinds of data that is related to each other, but it's not like you

946
03:22:09,640 --> 03:22:18,760
have multiple variables, multiple different arrays that you want to show and they are related.

947
03:22:20,360 --> 03:22:29,640
So in these cases, you don't want to go off from NumPy because NumPy is very good for speed-wise,

948
03:22:29,640 --> 03:22:37,400
but you want to add more tools to the toolbox so that you can easily handle these sorts of

949
03:22:40,680 --> 03:22:45,880
related quantities, related variables to each other.

950
03:22:45,880 --> 03:22:52,920
So what do you say? It's like normal Python objects are inefficient for having lots of data.

951
03:22:52,920 --> 03:23:00,840
NumPy arrays become efficient for a lot of data, and then Pandas lets you tag the different

952
03:23:00,840 --> 03:23:08,360
NumPy arrays, so it makes it like tabular data where there's rows that represent something

953
03:23:08,360 --> 03:23:14,960
and then columns, and one column could be times and one column could be an integer index

954
03:23:14,960 --> 03:23:20,200
and one column could be floating points, things like that.

955
03:23:20,200 --> 03:23:26,520
Yes. And I think we'll go into how the data is organized in a bit more detail,

956
03:23:26,520 --> 03:23:32,840
because there's a specific way that Pandas does it. But I think it's better to first get a glimpse

957
03:23:32,840 --> 03:23:38,920
of this sort of data, what we're talking about. But you are exactly right. Pandas is about

958
03:23:38,920 --> 03:23:46,600
organizing your data so that you can handle this more complex data that has some sort of meaning

959
03:23:46,600 --> 03:23:52,600
inside of it. And the data relates to each other. So, the different data points relate to other

960
03:23:52,600 --> 03:23:57,960
data points. So, let's... There's a question in the notes. It's the same as SciPy is built over

961
03:23:57,960 --> 03:24:03,400
NumPy with more functions. So, yes. So, Pandas is also built over NumPy with NumPy being the

962
03:24:04,040 --> 03:24:09,720
data storage for each column. So, SciPy, which I don't know if it was mentioned previously,

963
03:24:09,720 --> 03:24:18,360
but SciPy and many of the scikit things, which are like scikit-learn is probably the most popular one

964
03:24:18,360 --> 03:24:23,800
for machine learning, like traditional machine learning. These are all built upon NumPy that

965
03:24:23,800 --> 03:24:30,280
use NumPy as the basic building block, because the NumPy arrays are so fast, you can use those

966
03:24:30,280 --> 03:24:34,680
to build different functions. Also in case of SciPy, like, I don't know, Bessel functions or

967
03:24:34,680 --> 03:24:38,560
or like sparse linear matrices or whatever.

968
03:24:38,560 --> 03:24:41,800
Like you can do lots of stuff in the SciPy stuff,

969
03:24:41,800 --> 03:24:46,800
but Pandas is all about like organizing different results.

970
03:24:46,960 --> 03:24:51,160
So yeah, so let's move forward

971
03:24:51,160 --> 03:24:53,280
and let's look at the actual code.

972
03:24:53,280 --> 03:24:54,880
And okay.

973
03:24:54,880 --> 03:24:56,880
So I have my Jupyter open.

974
03:24:56,880 --> 03:24:59,820
I'll scroll this down and try to make it smaller.

975
03:24:59,820 --> 03:25:03,540
We do have these fancy run code buttons here,

976
03:25:03,540 --> 03:25:06,020
but this is sort of a test and it might not work

977
03:25:06,020 --> 03:25:09,020
and we don't recommend you doing it that way.

978
03:25:09,020 --> 03:25:12,780
Also, we might overload the service that's running these.

979
03:25:12,780 --> 03:25:13,620
Yeah.

980
03:25:13,620 --> 03:25:15,540
I would recommend just, if you have your,

981
03:25:15,540 --> 03:25:18,860
if you've managed to open a Jupyter setup,

982
03:25:18,860 --> 03:25:20,860
so you have your own Jupyter,

983
03:25:20,860 --> 03:25:23,740
most likely it will have the Pandas installed as well.

984
03:25:23,740 --> 03:25:27,500
So I recommend getting a Jupyter notebook open.

985
03:25:27,500 --> 03:25:28,340
Yeah.

986
03:25:29,460 --> 03:25:30,580
Okay, so

987
03:25:30,580 --> 03:25:34,140
So, here we go.

988
03:25:34,140 --> 03:25:42,460
We see Pandas, the lesson at the top and my Jupyter at the bottom.

989
03:25:42,460 --> 03:25:50,980
So if now, [name], I'm in a Python place, I'll make a new notebook and yeah, okay.

990
03:25:50,980 --> 03:25:52,780
So [name], what should I do?

991
03:25:52,780 --> 03:25:56,740
So first step is, of course, like importing NumPy.

992
03:25:56,740 --> 03:25:59,100
We want to use the library, so we import Pandas.

993
03:25:59,100 --> 03:26:03,820
And with pandas, same as with NumPy, nobody wants to write pandas, pandas, pandas, over

994
03:26:03,820 --> 03:26:04,820
again.

995
03:26:04,820 --> 03:26:08,220
So instead, we import it with the name pd.

996
03:26:08,220 --> 03:26:09,220
So this is common.

997
03:26:09,220 --> 03:26:13,460
If you see documentation, it's just like in the internet, everybody does this all the

998
03:26:13,460 --> 03:26:14,460
time.

999
03:26:14,460 --> 03:26:17,960
And let's load some example data.

1000
03:26:17,960 --> 03:26:24,860
So in the example, in the next cell, we read from the internet.

1001
03:26:24,860 --> 03:26:29,420
So this is from the pandas internal.

1002
03:26:29,420 --> 03:26:33,420
They include in the development side,

1003
03:26:33,420 --> 03:26:35,020
they include this famous data set,

1004
03:26:35,020 --> 03:26:39,660
which is like Titanic passenger list.

1005
03:26:39,660 --> 03:26:46,140
And we can use that as an example for what sort of data

1006
03:26:46,140 --> 03:26:48,220
do we have here.

1007
03:26:48,220 --> 03:26:50,820
So let's load that in.

1008
03:26:50,820 --> 03:26:53,740
OK, so the first line sets some URL

1009
03:26:53,740 --> 03:26:56,980
where it's already online and the second line

1010
03:26:56,980 --> 03:26:58,380
makes a data frame.

1011
03:26:58,380 --> 03:26:59,220
Yeah.

1012
03:26:59,220 --> 03:27:03,900
So you notice that we have used this pandas read CSV.

1013
03:27:03,900 --> 03:27:05,900
We'll talk about data formats and data,

1014
03:27:05,900 --> 03:27:08,340
like different data structures,

1015
03:27:08,340 --> 03:27:11,500
but pandas already supports a myriad

1016
03:27:11,500 --> 03:27:13,100
of these different kinds of data formats.

1017
03:27:13,100 --> 03:27:16,060
So in this case, we just load a CSV file.

1018
03:27:16,060 --> 03:27:18,460
So comma separate values, we read it in.

1019
03:27:19,420 --> 03:27:21,700
And now we have it loaded

1020
03:27:21,700 --> 03:27:29,160
And let's use this titanic.ed to this function

1021
03:27:29,160 --> 03:27:35,400
to view the first few rows of that thing.

1022
03:27:35,400 --> 03:27:40,000
So OK, so now we can see that, OK, we

1023
03:27:40,000 --> 03:27:45,320
have this kind of like a table now of data.

1024
03:27:45,320 --> 03:27:49,160
And it's organized by this name column.

1025
03:27:49,160 --> 03:27:55,480
so the name is like on the left you can see that it's like bolded so that's like every passenger

1026
03:27:56,280 --> 03:28:04,120
is organized by their name and for each passenger we have a passenger ID, whether they survived,

1027
03:28:04,120 --> 03:28:08,840
what passenger class they were, what is their sex, what is their age

1028
03:28:11,880 --> 03:28:18,920
and so forth, like how much they paid for the Titanic fare and so forth. So we

1029
03:28:18,920 --> 03:28:27,240
have lots of these different values here. And what we have here is a so-called data frame.

1030
03:28:27,240 --> 03:28:33,720
So, Panda stores the stuff in these objects called data frames, and it stores each of these

1031
03:28:35,640 --> 03:28:45,960
columns into an object called series. And each of these series is wrapped around a NumPy array.

1032
03:28:45,960 --> 03:28:52,040
Okay. So, each column is one NumPy array. So, all these integers are one NumPy array.

1033
03:28:52,840 --> 03:28:59,000
Yes. And you notice that some of these columns have different kinds of data types. So, for

1034
03:28:59,000 --> 03:29:07,480
example, the gender or the sex field that can be male, female, and same with the ticket.

1035
03:29:07,480 --> 03:29:15,240
And some of these are integers, such as survived or a passenger ID. And some of them are floating

1036
03:29:15,240 --> 03:29:23,160
point values such as fair. So we have different data types stored in the same data frame.

1037
03:29:24,360 --> 03:29:29,480
So there was a question previously about, can you store multiple data types in a NumPy array?

1038
03:29:29,480 --> 03:29:36,040
And that's not possible because NumPy arrays are fast because they only have one data type

1039
03:29:36,040 --> 03:29:41,880
in them. So many of the functions that are written in NumPy, they know that, okay, whatever

1040
03:29:41,880 --> 03:29:47,640
I'm getting in, it's floating point numbers, I can just know that it's floating point numbers,

1041
03:29:47,640 --> 03:29:54,040
so I can do stuff like square root or addition or whatever. And I know what it means and I can

1042
03:29:54,040 --> 03:30:01,400
do it very fast. And that's why you cannot in NumPy mix and match these different types unless

1043
03:30:01,400 --> 03:30:07,560
you use this object type. But that just means that it's very slow. It's basically like Python

1044
03:30:07,560 --> 03:30:15,960
list again. So I guess pandas automatically detected all of these for us. Yes. So the read

1045
03:30:15,960 --> 03:30:21,320
CSV function, it basically went through the file and it checked, okay, like can I convert all of

1046
03:30:21,320 --> 03:30:28,040
these into integers or floating points? What is the kind of type I need for all of these?

1047
03:30:28,600 --> 03:30:36,840
So let's look at the describe. Let's get a quick description of every column that we have here.

1048
03:30:37,560 --> 03:30:49,120
Yeah, so over here, we can already see what sort of features the pandas provides us.

1049
03:30:49,120 --> 03:30:56,640
So for different kinds of, well, what we have here for different kinds of values, we get

1050
03:30:56,640 --> 03:31:01,720
already like we can get quick descriptions of, okay, what sort of data do we have here?

1051
03:31:01,720 --> 03:31:06,680
So you notice that none of the string values are included because like, how do you calculate

1052
03:31:06,680 --> 03:31:12,520
mean string or like how do you calculate the standard deviation of a gender? I don't know,

1053
03:31:12,520 --> 03:31:18,200
like it's very hard. So, instead those are like discarded because those operations are

1054
03:31:18,200 --> 03:31:26,680
not defined for them. So, instead we have like for the integer and for the

1055
03:31:26,680 --> 03:31:38,360
the, for the, for integer and for the floating point columns, we get descriptions of what

1056
03:31:38,360 --> 03:31:39,360
is.

1057
03:31:39,360 --> 03:31:40,360
Yeah.

1058
03:31:40,360 --> 03:31:46,920
So, for example, the mean of survived is 0.38, so I guess that means 38% of people survived.

1059
03:31:46,920 --> 03:31:47,920
Yeah.

1060
03:31:47,920 --> 03:31:48,920
And so on.

1061
03:31:48,920 --> 03:31:49,920
Okay.

1062
03:31:49,920 --> 03:31:52,120
So, we have this quick overview of data.

1063
03:31:52,120 --> 03:31:53,120
Yeah.

1064
03:31:53,120 --> 03:31:57,880
Let's do another quick overview that's in a different order in the documentation.

1065
03:31:57,880 --> 03:32:03,980
But let's quickly look at Titanic.info function.

1066
03:32:03,980 --> 03:32:12,240
So that provides us a bit of information about how the stuff is stored.

1067
03:32:12,240 --> 03:32:15,720
It shows a bit of the insights of what's happening here.

1068
03:32:15,720 --> 03:32:22,400
So we see here that we have 891 entries.

1069
03:32:22,400 --> 03:32:30,800
So it had 91 rows, and then we have 11 columns.

1070
03:32:30,800 --> 03:32:36,680
And each of these columns have a different name,

1071
03:32:36,680 --> 03:32:39,960
and then we see the data type of each column.

1072
03:32:39,960 --> 03:32:44,320
So we can see that, OK, some of these are, let's say,

1073
03:32:44,320 --> 03:32:46,600
the strings are objects, and the others

1074
03:32:46,600 --> 03:32:49,040
are floating points and integers.

1075
03:32:49,040 --> 03:32:54,960
Yeah. So, this looks a lot like the NumPy data types.

1076
03:32:56,160 --> 03:33:05,520
Yes. And, like, why do we want, like, what do we get from this approach? So, the approach,

1077
03:33:06,400 --> 03:33:12,640
like, why do we want to do this is that, like, some of the columns are related to each other.

1078
03:33:12,640 --> 03:33:18,480
So, let's say we want to ask a question of what is the mean age of a survived person.

1079
03:33:19,040 --> 03:33:23,240
Like now we need to relate like the survived column with the age column.

1080
03:33:23,780 --> 03:33:28,100
And we need to like, based on the value of another, we need to answer

1081
03:33:28,100 --> 03:33:29,660
something from another column.

1082
03:33:30,200 --> 03:33:34,840
So, so we, we suddenly have a situation where like, of course we could do all of

1083
03:33:34,840 --> 03:33:38,160
these, we could store these as individual arrays, each of one of these.

1084
03:33:38,580 --> 03:33:43,420
But when we want to ask a question of, okay, like I want to, I want to get

1085
03:33:43,420 --> 03:33:48,600
something from other, like one array based on the values of another array.

1086
03:33:49,040 --> 03:33:55,600
it gets really tedious to first index, let's say, one array based on values of that array,

1087
03:33:55,600 --> 03:34:02,640
and then index another array with that information. So, it's super tedious. So, let's do it.

1088
03:34:02,640 --> 03:34:08,720
Yeah. So, if I can, I think I can, if I understand this right. So, using the same

1089
03:34:08,720 --> 03:34:14,720
metaphor before, if you're doing it in pure Python, then you basically have a list with

1090
03:34:14,720 --> 03:34:18,760
with one column and a list with another column.

1091
03:34:18,760 --> 03:34:20,680
I mean, you need to make a bunch of code that

1092
03:34:20,680 --> 03:34:23,400
finds the values from one column,

1093
03:34:23,400 --> 03:34:25,200
get the data from another column,

1094
03:34:25,200 --> 03:34:26,800
and that's a lot of work.

1095
03:34:26,800 --> 03:34:30,160
With NumPy, it's more efficient because you

1096
03:34:30,160 --> 03:34:31,440
have arrays of columns.

1097
03:34:31,440 --> 03:34:34,960
And there might be functions that find different bits,

1098
03:34:34,960 --> 03:34:37,960
but you still have two separate arrays

1099
03:34:37,960 --> 03:34:41,960
and have to correlate them together.

1100
03:34:41,960 --> 03:34:44,080
And there's lots of stuff that can go wrong,

1101
03:34:44,080 --> 03:34:48,760
you're writing more code. But now here, since it's one table, are we going to learn some

1102
03:34:48,760 --> 03:34:53,880
functions that let us say, well, just like you said, for every survived passenger, what

1103
03:34:53,880 --> 03:35:02,720
was their average fare? And then it knows that these two are related and each row is

1104
03:35:02,720 --> 03:35:05,080
the same person and that kind of thing.

1105
03:35:05,080 --> 03:35:10,480
Yeah. Like we usually, when we want to answer questions, like scientific questions, we usually

1106
03:35:10,480 --> 03:35:16,960
want to answer questions that are like, okay, given this time level or whatever, what happened

1107
03:35:16,960 --> 03:35:25,840
or given the survived, if a person survived, what is their mean age or stuff like that.

1108
03:35:25,840 --> 03:35:35,080
Or let's say given the gender, how many survived, we want to see answer questions like these.

1109
03:35:35,080 --> 03:35:40,720
When I asked those questions, I didn't speak about indexes or anything at all.

1110
03:35:40,720 --> 03:35:46,960
I didn't mention that, okay, I want to know what's in the index zero of this array.

1111
03:35:46,960 --> 03:35:49,200
And that is the scientific question I want to answer.

1112
03:35:49,200 --> 03:35:56,640
No, I want to answer a question that can be formulated more in this natural language.

1113
03:35:56,640 --> 03:36:03,520
And I want to ask a question based on the contents of the data, not based on how it's

1114
03:36:03,520 --> 03:36:06,120
organized in the memory.

1115
03:36:06,120 --> 03:36:08,480
Yeah, can we see some?

1116
03:36:08,480 --> 03:36:11,640
Yeah, let's do this quickly.

1117
03:36:11,640 --> 03:36:14,800
Quick example of this grouping.

1118
03:36:20,600 --> 03:36:25,920
Well, we can talk later about how groupings work in Pandas.

1119
03:36:25,920 --> 03:36:30,180
But basically, what we can do is that in Pandas,

1120
03:36:30,180 --> 03:36:32,760
we can take a data frame, and we can basically

1121
03:36:32,760 --> 03:36:38,160
split it into sub-dataframes based on some values.

1122
03:36:38,160 --> 03:36:40,760
It can go multiple levels deep as well.

1123
03:36:40,760 --> 03:36:45,600
Like, you can, you can, yeah, so in this case,

1124
03:36:45,600 --> 03:36:47,920
we basically say that, OK, like, OK,

1125
03:36:47,920 --> 03:36:55,080
get me the original data frame, group it by the survival value,

1126
03:36:55,080 --> 03:36:59,360
and then get me the age column of each of these,

1127
03:36:59,360 --> 03:37:04,360
like split groups and then calculate the mean of that.

1128
03:37:04,780 --> 03:37:05,620
Okay.

1129
03:37:05,620 --> 03:37:07,580
So let's run it and let's see what happens.

1130
03:37:09,380 --> 03:37:14,380
So group by, this makes two separate frames

1131
03:37:15,820 --> 03:37:17,260
for the values that survived.

1132
03:37:17,260 --> 03:37:18,300
Yeah.

1133
03:37:18,300 --> 03:37:20,340
What it creates is this group by object

1134
03:37:20,340 --> 03:37:22,980
that you can iterate over or you can like get stuff,

1135
03:37:22,980 --> 03:37:27,060
but it's like, that's black magic, like what happens.

1136
03:37:27,060 --> 03:37:30,340
So you don't necessarily have to know that.

1137
03:37:30,340 --> 03:37:30,840
Yeah.

1138
03:37:30,840 --> 03:37:31,340
Yeah.

1139
03:37:31,340 --> 03:37:36,420
We get the mean value, and we print it.

1140
03:37:36,420 --> 03:37:41,620
So we see here survived 0, 1, and then 2 means so.

1141
03:37:41,620 --> 03:37:42,300
Yeah.

1142
03:37:42,300 --> 03:37:47,780
So let's say if the children were at the,

1143
03:37:47,780 --> 03:37:48,900
hey, I don't actually know.

1144
03:37:48,900 --> 03:37:51,980
Is survive dead, or which one is true?

1145
03:37:51,980 --> 03:37:53,740
I'm guessing one is survived.

1146
03:37:53,740 --> 03:38:04,740
I think so, because above we saw the mean of survived was 38, and probably around 38% survived.

1147
03:38:04,740 --> 03:38:09,740
Okay, yeah, so the survivors were on average a few years younger.

1148
03:38:09,740 --> 03:38:15,740
Yeah, younger. So that would mean like women and children first, like maybe the children were the, I don't know.

1149
03:38:15,740 --> 03:38:23,120
But we can, like, we don't know about the results, but we can show, like, this already

1150
03:38:23,120 --> 03:38:27,180
shows the power of it, like what pandas can do.

1151
03:38:27,180 --> 03:38:31,780
But pandas can also do, like, you can, like, if you want to explore your data, you can

1152
03:38:31,780 --> 03:38:34,780
also do this kind of, like, quick plots with it.

1153
03:38:34,780 --> 03:38:40,900
So we don't, like, there's many of these kinds of plots, but let's just run this one example

1154
03:38:40,900 --> 03:38:47,140
plot here, which creates a histogram based on one column.

1155
03:38:47,140 --> 03:38:49,500
So that's just copying.

1156
03:38:49,500 --> 03:38:50,260
Yeah.

1157
03:38:50,260 --> 03:38:58,100
So OK, so making a histogram with a column of age,

1158
03:38:58,100 --> 03:39:01,620
survived bins.

1159
03:39:01,620 --> 03:39:03,740
Oh, there we go.

1160
03:39:03,740 --> 03:39:07,220
So we see like a histogram of, so we

1161
03:39:07,220 --> 03:39:17,060
notice that in the survived one, there's this big bump at the lowest number, so babies basically.

1162
03:39:20,020 --> 03:39:25,300
I would assume that that means that a lot of those survived, a lot of babies survived.

1163
03:39:25,300 --> 03:39:36,900
And this is really the power of like we are here showing one example here and one kind

1164
03:39:36,900 --> 03:39:38,220
of an example that you can do.

1165
03:39:38,220 --> 03:39:45,020
But if you look at the code again, quickly, at no point did we reference any indexes or

1166
03:39:45,020 --> 03:39:46,500
any kinds of stuff like that.

1167
03:39:46,500 --> 03:39:52,520
We just referred to the columns and the data in the columns and that sort of stuff.

1168
03:39:52,520 --> 03:39:59,720
referenced the data based on the names of the stuff. We didn't, we weren't interested about,

1169
03:39:59,720 --> 03:40:06,760
okay, like, how are they, like, are they sorted in a certain order? Are the rows sorted in a

1170
03:40:06,760 --> 03:40:13,960
certain order? Like, none of that matters, because in this kind of data, like, and you might,

1171
03:40:13,960 --> 03:40:19,640
yeah, like, in this kind of data, like, it doesn't really matter. Like, what we want to do is we

1172
03:40:19,640 --> 03:40:23,340
we want to calculate something based on the,

1173
03:40:25,240 --> 03:40:26,600
we don't care about the indexes.

1174
03:40:26,600 --> 03:40:29,520
We really care about how they relate to each other

1175
03:40:29,520 --> 03:40:34,280
and that the relationships are like set correctly.

1176
03:40:34,280 --> 03:40:35,600
Yeah.

1177
03:40:35,600 --> 03:40:37,400
So what's next?

1178
03:40:37,400 --> 03:40:40,720
So let's quickly look, if we scroll a bit down,

1179
03:40:42,160 --> 03:40:46,160
we can view what, again, like what is a data frame?

1180
03:40:46,160 --> 03:40:48,160
I already mentioned this,

1181
03:40:48,160 --> 03:40:54,720
This is quite important to say. Previously, when we were talking about NumPy arrays,

1182
03:40:54,720 --> 03:40:59,200
and we were talking about rows and columns in multidimensional NumPy arrays,

1183
03:41:05,680 --> 03:41:14,880
Pandas isn't like a multidimensional NumPy array in that in NumPy, all of the rows and columns,

1184
03:41:14,880 --> 03:41:21,280
like the speakers already mentioned that NumPy can have multiple dimensions, and each of these

1185
03:41:24,960 --> 03:41:28,640
you can create a three-dimensional NumPy array or two-dimensional NumPy array,

1186
03:41:28,640 --> 03:41:34,160
and all of these have the same data type. And you would think that, okay, if I just have

1187
03:41:34,160 --> 03:41:41,200
numbers in a table, that just means that, okay, this is the same as a DataFrame. But that's not

1188
03:41:41,200 --> 03:41:50,640
the case, because in Pandas, the columns and rows have a meaning. And the meaning is that

1189
03:41:50,640 --> 03:42:01,840
each column represents a variable, and each row represents an instance of that variable existing.

1190
03:42:01,840 --> 03:42:09,760
So, like a measurement. Yeah. So, if we thought about previous example of the Titanic

1191
03:42:09,760 --> 03:42:14,320
In each row, we had an individual person.

1192
03:42:14,320 --> 03:42:22,880
And for that individual person, we have different variables that correspond to that measurement.

1193
03:42:22,880 --> 03:42:26,440
And we had like specific features.

1194
03:42:26,440 --> 03:42:29,720
And each of these variables has the same data type.

1195
03:42:29,720 --> 03:42:37,120
So each of these variables is a NumPy, like it's the NumPy array, like each column.

1196
03:42:37,120 --> 03:42:48,320
And each row is one measurement that belongs to all of these different columns.

1197
03:42:48,320 --> 03:43:01,800
And what it means is that pandas can then identify and match the different columns for

1198
03:43:01,800 --> 03:43:03,240
each observation.

1199
03:43:03,240 --> 03:43:11,560
So it can handle the arduous task of matching, let's say, pressure and temperature at this

1200
03:43:11,560 --> 03:43:12,760
and that time.

1201
03:43:12,760 --> 03:43:17,520
It can match, keep them in sync, these different variables.

1202
03:43:17,520 --> 03:43:23,280
And this is important because all of the tools in Pandas are designed around this.

1203
03:43:23,280 --> 03:43:25,000
And it's not only Pandas.

1204
03:43:25,000 --> 03:43:33,040
So basically every major language that uses just this kind of like scientific, or not

1205
03:43:33,040 --> 03:43:37,780
even scientific, like does this kind of data analysis kind of thing, uses the same kind

1206
03:43:37,780 --> 03:43:39,080
of idea.

1207
03:43:39,080 --> 03:43:43,900
So if you think about big data analysis, if you think about SQL databases, if you think

1208
03:43:43,900 --> 03:43:52,000
about R, if you think about extensions of Pandas, if you think about like how big data

1209
03:43:52,000 --> 03:43:57,440
is handled. All of these use the same kind of idea, where you have columns that have data,

1210
03:43:58,400 --> 03:44:05,280
like in variables, and then you have rows that are measurements. The underlying implementations

1211
03:44:05,280 --> 03:44:10,000
might differ, but the same idea is across all of the data landscape.

1212
03:44:11,120 --> 03:44:16,400
Maybe we should move on. Are there any alternatives to Pandas, or is it basically

1213
03:44:16,400 --> 03:44:20,480
what everything uses under the hood, the higher level stuff.

1214
03:44:20,480 --> 03:44:25,040
So there are many alternatives to pandas. For example, nowadays, there's lots of talk

1215
03:44:25,040 --> 03:44:31,360
about Polars, which uses the pandas API because it's so everybody uses the pandas API. It

1216
03:44:31,360 --> 03:44:38,560
has the same kind of like functions, but underneath it, it uses the same kind of tools. Dask is

1217
03:44:38,560 --> 03:44:45,440
another option that also uses the same underlying structure, but it uses parallelism and that

1218
03:44:45,440 --> 03:44:50,960
sort of stuff for big data and there's others, but they all basically use the same kind of idea.

1219
03:44:50,960 --> 03:44:58,320
So you really, if you want to do this kind of like data analysis, you really want to make certain

1220
03:44:58,320 --> 03:45:06,080
that your data and your, basically your measurements abide by this idea, because

1221
03:45:06,080 --> 03:45:12,560
otherwise you will, you cannot use the tools because they're not like designed for it.

1222
03:45:12,560 --> 03:45:17,200
Like you cannot, it's not, it doesn't mean anything, for example, to calculate the mean

1223
03:45:17,200 --> 03:45:24,000
across a row, because how do you calculate the mean across like when you had columns like gender

1224
03:45:24,000 --> 03:45:33,200
and columns like, like survive. So, so what should we do now? So let's quickly look at how do we,

1225
03:45:33,200 --> 03:45:38,160
now that we know that the data is organized like this, how do we access the data? Like how do we

1226
03:45:38,160 --> 03:45:44,160
access the data in different ways. So previously we showed the group by method, but there's other

1227
03:45:44,160 --> 03:45:52,880
methods that you can use to refer to various things in here. So are we here where we look at the

1228
03:45:54,000 --> 03:46:05,200
age and so on? Yeah. Okay. So let's look at a few ways that you can access the columns.

1229
03:46:05,200 --> 03:46:08,480
So, the first one is to use these brackets.

1230
03:46:08,480 --> 03:46:12,480
So this, if you have used Python dictionaries, this is a very similar kind of a thing.

1231
03:46:12,480 --> 03:46:14,800
So you refer to it by name.

1232
03:46:14,800 --> 03:46:20,000
And this is especially useful if your name has spaces or some characters that don't really

1233
03:46:20,000 --> 03:46:25,400
work with the other option, which is this dot, which is like this Python attribute

1234
03:46:25,400 --> 03:46:31,360
kind of a way to access the different columns.

1235
03:46:31,360 --> 03:46:38,060
And you notice that what this returns, like this titanic age, for example, it's a series

1236
03:46:38,060 --> 03:46:39,620
that has the same index.

1237
03:46:39,620 --> 03:46:40,860
So again, the names.

1238
03:46:40,860 --> 03:46:47,220
So it's not only like, it doesn't just return the numbers, it returns a series.

1239
03:46:47,220 --> 03:46:51,180
So it still knows, okay, who is this related to.

1240
03:46:51,180 --> 03:46:58,000
There are functions like toNumPy or toList that you can use to convert it into basic

1241
03:46:58,000 --> 03:47:05,520
NumPy array or Python list if you want to, but the columns are this kind of like.

1242
03:47:05,520 --> 03:47:06,520
Yeah.

1243
03:47:06,520 --> 03:47:07,520
Yeah.

1244
03:47:07,520 --> 03:47:08,520
Yeah.

1245
03:47:08,520 --> 03:47:09,520
So it knows.

1246
03:47:09,520 --> 03:47:10,520
Yeah.

1247
03:47:10,520 --> 03:47:11,520
Okay.

1248
03:47:11,520 --> 03:47:12,520
Yeah.

1249
03:47:12,520 --> 03:47:13,520
Yeah.

1250
03:47:13,520 --> 03:47:14,520
And I guess this next one is the same.

1251
03:47:14,520 --> 03:47:15,520
Yeah.

1252
03:47:15,520 --> 03:47:16,520
Yeah.

1253
03:47:16,520 --> 03:47:17,520
Next one is the same.

1254
03:47:17,520 --> 03:47:18,520
So it has some shortcut there.

1255
03:47:18,520 --> 03:47:19,520
Okay.

1256
03:47:19,520 --> 03:47:20,520
Yeah.

1257
03:47:20,520 --> 03:47:25,240
And if you look at the, below there's the type, so here you notice that it is a series.

1258
03:47:25,240 --> 03:47:29,560
So it's not a NumPy array.

1259
03:47:29,560 --> 03:47:32,440
It's NumPy array with additional information,

1260
03:47:32,440 --> 03:47:36,000
basically, still in it.

1261
03:47:36,000 --> 03:47:41,000
You can look at type, titanic, age, and dot values,

1262
03:47:41,120 --> 03:47:44,700
if you want to, and check what is.

1263
03:47:50,280 --> 03:47:52,360
So this is the NumPy array here.

1264
03:47:52,360 --> 03:47:54,560
And you notice that there's many other numbers

1265
03:47:54,560 --> 03:47:58,800
and stuff like that over here, but yeah.

1266
03:47:58,800 --> 03:48:03,640
So inside of this series, there are the values,

1267
03:48:03,640 --> 03:48:07,520
but usually you don't need to mess up with those.

1268
03:48:07,520 --> 03:48:10,080
Usually you can access them in other ways.

1269
03:48:12,120 --> 03:48:14,560
So for the data frame itself,

1270
03:48:14,560 --> 03:48:17,160
you can view what columns you have there

1271
03:48:17,160 --> 03:48:19,560
with like titanic.columns.

1272
03:48:19,560 --> 03:48:27,260
We already view them with the info, but sometimes you want to like iterate over the columns

1273
03:48:27,260 --> 03:48:28,260
or do something like that.

1274
03:48:28,260 --> 03:48:32,120
And then you want to do that kind of stuff.

1275
03:48:32,120 --> 03:48:38,600
Then, yeah, okay.

1276
03:48:38,600 --> 03:48:45,440
And the same for rows, you can see the, what are the rows with index.

1277
03:48:45,440 --> 03:48:54,560
So index is the name of the row names, columns is the name of the column names.

1278
03:48:54,560 --> 03:48:55,560
Yeah.

1279
03:48:55,560 --> 03:48:58,920
And quite often, of course, you might have a situation where the index is just like a

1280
03:48:58,920 --> 03:49:04,720
number that runs and then you use some other thing to basically index the stuff.

1281
03:49:04,720 --> 03:49:08,840
You can use a column to index it, but quite often you might have a situation where you

1282
03:49:08,840 --> 03:49:17,940
You want to put one of the columns as the ID of the thing and make it an index.

1283
03:49:17,940 --> 03:49:26,780
In this case, for example, the name column has been specified as the index column.

1284
03:49:26,780 --> 03:49:31,500
What describes the row, basically.

1285
03:49:31,500 --> 03:49:32,500
Why is this important?

1286
03:49:32,500 --> 03:49:34,620
Why do you want to put something as an index?

1287
03:49:34,620 --> 03:49:36,820
Well, it's again for references.

1288
03:49:36,820 --> 03:49:43,000
If you want to reference stuff, you can reference by the same as in NumPy, you can do references

1289
03:49:43,000 --> 03:49:59,060
based on a row and a column, so you can then search the data.

1290
03:49:59,060 --> 03:50:04,540
And the recommended way of doing these searches is usually using these functions, this lock

1291
03:50:04,540 --> 03:50:12,140
function, especially, to find stuff. Let's look at a few examples here. Remember, our rows are now

1292
03:50:12,140 --> 03:50:26,140
named. Our rows have a name of a person. Over here, we want to find location of

1293
03:50:26,140 --> 03:50:36,380
of what is the row, lam, Mr. Ali, and what is the age.

1294
03:50:36,380 --> 03:50:43,980
So we want to find one column from this row.

1295
03:50:43,980 --> 03:50:46,460
And we can now use the name of the person

1296
03:50:46,460 --> 03:50:48,860
instead of a random index or whatever.

1297
03:50:48,860 --> 03:50:51,420
Instead of saying row one or row two.

1298
03:50:51,420 --> 03:50:53,620
If the names meant something, now

1299
03:50:53,620 --> 03:50:55,300
we can look up stuff by name.

1300
03:50:55,300 --> 03:51:00,620
And this is very important, especially if you do a time series analysis, because usually

1301
03:51:00,620 --> 03:51:03,900
the time is a natural way of organizing the stuff.

1302
03:51:03,900 --> 03:51:09,020
You want to organize the stuff based on the time, or maybe you have some other index that

1303
03:51:09,020 --> 03:51:10,020
you want.

1304
03:51:10,020 --> 03:51:13,700
You have some natural way of organizing the data, and that's why you might put it into

1305
03:51:13,700 --> 03:51:19,820
the rows so you don't always have to do very complex searches.

1306
03:51:19,820 --> 03:51:21,220
But let's look at other things.

1307
03:51:21,220 --> 03:51:25,580
So we can, of course, ask for multiple columns.

1308
03:51:25,580 --> 03:51:32,300
So in the example, you can ask for a range of columns.

1309
03:51:32,300 --> 03:51:37,300
But I would say that this is pretty weird way.

1310
03:51:37,300 --> 03:51:39,220
You can do this kind of thing.

1311
03:51:39,220 --> 03:51:43,300
But again, it's like, OK, it depends on how the columns are organized.

1312
03:51:43,300 --> 03:51:45,980
So I wouldn't probably use that.

1313
03:51:45,980 --> 03:51:49,700
So instead, what I would do is put brackets around it.

1314
03:51:49,700 --> 03:51:54,260
So let's say we want to know survived and aged age.

1315
03:51:54,260 --> 03:51:59,100
So if you put the brackets around the survived age

1316
03:51:59,100 --> 03:52:01,660
and make it the least instead.

1317
03:52:01,660 --> 03:52:03,300
OK.

1318
03:52:03,300 --> 03:52:04,540
Let's see.

1319
03:52:04,540 --> 03:52:06,460
So.

1320
03:52:06,460 --> 03:52:12,020
So survived comma age.

1321
03:52:12,020 --> 03:52:15,420
So now we're using loke, and one of the arguments

1322
03:52:15,420 --> 03:52:17,900
itself is a list.

1323
03:52:17,900 --> 03:52:18,540
OK.

1324
03:52:18,540 --> 03:52:22,060
Yeah, I've got two things out.

1325
03:52:22,060 --> 03:52:24,900
OK, yeah.

1326
03:52:24,900 --> 03:52:28,500
Yeah, sorry, my computer is frozen.

1327
03:52:28,500 --> 03:52:29,300
Just a second.

1328
03:52:29,300 --> 03:52:30,300
OK.

1329
03:52:30,300 --> 03:52:32,500
Yeah, yeah.

1330
03:52:32,500 --> 03:52:34,660
Too many windows open.

1331
03:52:34,660 --> 03:52:37,980
I'll be right back probably.

1332
03:52:37,980 --> 03:52:40,420
Yeah, the Firefox crashes.

1333
03:52:40,420 --> 03:52:43,100
At least I can still hear you and see you.

1334
03:52:43,100 --> 03:52:44,100
Yeah.

1335
03:52:44,100 --> 03:52:46,420
Yeah, Zoom is taking over.

1336
03:52:46,420 --> 03:52:51,340
Yeah, no, but it seems that too many windows open.

1337
03:52:51,340 --> 03:52:54,180
Yeah, so you can do stuff like this.

1338
03:52:54,180 --> 03:52:56,060
So you can refer to the columns,

1339
03:52:56,060 --> 03:52:58,300
like you can index by the column names

1340
03:52:58,300 --> 03:53:00,300
instead of like where they are,

1341
03:53:00,300 --> 03:53:02,660
because it's much more like natural way of,

1342
03:53:02,660 --> 03:53:05,180
at least for me, of thinking about the data,

1343
03:53:05,180 --> 03:53:06,940
of, okay, what's in the data

1344
03:53:06,940 --> 03:53:09,300
instead of where is it stored.

1345
03:53:10,700 --> 03:53:13,980
For, you can also use these indexing things.

1346
03:53:13,980 --> 03:53:15,820
So you can use this iloc.

1347
03:53:15,820 --> 03:53:24,380
OK, so 0 to 2 gets the first two rows.

1348
03:53:24,380 --> 03:53:26,340
Two rows, yeah.

1349
03:53:26,340 --> 03:53:32,500
3 to 6 gives the fourth to seventh columns,

1350
03:53:32,500 --> 03:53:35,300
following the Python conventions.

1351
03:53:35,300 --> 03:53:37,100
Fourth to sixth columns.

1352
03:53:37,100 --> 03:53:38,700
Yeah, OK.

1353
03:53:38,700 --> 03:53:42,100
But this is, again, pretty arbitrary.

1354
03:53:42,100 --> 03:53:43,860
What do these mean?

1355
03:53:43,860 --> 03:53:44,740
I don't know.

1356
03:53:44,740 --> 03:53:48,420
I rarely ever use these, but it's

1357
03:53:48,420 --> 03:53:51,620
good to know that they are present.

1358
03:53:51,620 --> 03:53:54,860
You can also, for individual values,

1359
03:53:54,860 --> 03:53:57,940
you can use this at to modify individual values

1360
03:53:57,940 --> 03:53:59,020
and get individual values.

1361
03:53:59,020 --> 03:54:03,540
But I don't think we need to set or necessarily show

1362
03:54:03,540 --> 03:54:05,100
all of the examples here.

1363
03:54:05,100 --> 03:54:09,060
But it's good to know that you can get these.

1364
03:54:09,060 --> 03:54:12,540
They are useful if you want to get a specific value

1365
03:54:12,540 --> 03:54:25,580
something. But the power of pandas also comes that you can do operations for a whole column at

1366
03:54:25,580 --> 03:54:34,220
time. Because all of the columns are NumPy arrays, you can create new NumPy arrays. You can set in

1367
03:54:34,220 --> 03:54:42,140
entire columns at a time. Or you can do like mathematics calculations for

1368
03:54:43,180 --> 03:54:48,700
and do all sorts of like indexing tricks for the whole column. So if you show

1369
03:54:53,020 --> 03:55:00,780
the... So [name], you're breaking up maybe. Your computer's slowing down again.

1370
03:55:00,780 --> 03:55:11,340
Yeah, I think it's the HackMD chat is probably, or the notes check chat is probably, or could

1371
03:55:11,340 --> 03:55:15,740
it be the stream previews that's causing the problem?

1372
03:55:15,740 --> 03:55:16,740
Might be.

1373
03:55:16,740 --> 03:55:19,540
I'll probably have to restart some of my browsers.

1374
03:55:19,540 --> 03:55:22,020
Yeah, no.

1375
03:55:22,020 --> 03:55:23,460
Maybe it eases up.

1376
03:55:23,460 --> 03:55:24,460
Yeah.

1377
03:55:24,460 --> 03:55:25,460
So, so, but yeah.

1378
03:55:25,460 --> 03:55:26,460
So, if you.

1379
03:55:26,460 --> 03:55:27,460
Age.

1380
03:55:27,460 --> 03:55:28,460
Yeah.

1381
03:55:28,460 --> 03:55:32,460
Sorry about the technical problems.

1382
03:55:32,460 --> 03:55:34,460
Shows ages.

1383
03:55:34,460 --> 03:55:35,460
Yeah.

1384
03:55:35,460 --> 03:55:40,460
Titanic age greater than 70 shows a false and true

1385
03:55:40,460 --> 03:55:43,460
for people whose age is greater than 70, I guess.

1386
03:55:43,460 --> 03:55:44,460
Yeah.

1387
03:55:44,460 --> 03:55:49,460
So when previously, in the previous session,

1388
03:55:49,460 --> 03:55:54,460
was demonstrated how can you use NumPy to create

1389
03:55:54,460 --> 03:55:58,540
this kind of like, in NumPy you can do these Boolean arrays.

1390
03:55:58,540 --> 03:56:03,580
So basically you have a condition and then based on that condition,

1391
03:56:03,580 --> 03:56:09,820
you get another array that either says true or false based on that condition.

1392
03:56:10,380 --> 03:56:20,500
In this case, we can use the column age to say that, okay, which rows does this apply to?

1393
03:56:20,500 --> 03:56:24,500
and then take only those rows.

1394
03:56:24,500 --> 03:56:38,500
So, the inside, like we are sorting or going through the data row by row based on the value of one column.

1395
03:56:38,500 --> 03:56:44,500
So, you can do these kinds of things to hone in on the data that you're interested in.

1396
03:56:44,500 --> 03:56:51,620
So all automatically, it's doing these complex data operations in one line.

1397
03:56:51,620 --> 03:56:52,620
Yes.

1398
03:56:52,620 --> 03:56:54,780
Which is pretty cool.

1399
03:56:54,780 --> 03:56:56,900
And the other one is also very cool.

1400
03:56:56,900 --> 03:57:03,820
So there's also like this many of like, you can, the inside can be also like a function

1401
03:57:03,820 --> 03:57:07,640
of the, of one of the columns.

1402
03:57:07,640 --> 03:57:20,360
So because the index is a string column, so its name is a string, we can run this contains

1403
03:57:20,360 --> 03:57:21,360
function.

1404
03:57:21,360 --> 03:57:30,040
So it tells, it produces true or false if there's the substring inside that string,

1405
03:57:30,040 --> 03:57:33,000
and then we can use that to index the data.

1406
03:57:33,000 --> 03:57:39,000
huge bunch of these, so I wouldn't expect anyone to necessarily remember that this exists,

1407
03:57:39,000 --> 03:57:44,200
but it's good to check the pandas documentation for various of these, because there's so many

1408
03:57:44,200 --> 03:57:51,560
of these kinds of tricks to sort through the data. Yeah. Do you even know all the tricks,

1409
03:57:51,560 --> 03:57:59,240
or do you basically find them when you... No, I would say that it's like wasted

1410
03:57:59,240 --> 03:58:08,520
that brainpower. If I remember one URL, not even the URL, if I know how to Google pandas

1411
03:58:08,520 --> 03:58:14,680
documentation, I can go there and then I can search there. Okay, how do I do this? Because

1412
03:58:14,680 --> 03:58:21,920
somebody has written a great explanation there and I just have to know that there exists

1413
03:58:21,920 --> 03:58:29,640
away, and then I can find it. I don't have to remember it. And there's also multiple

1414
03:58:29,640 --> 03:58:35,060
of different ways. People use different kinds of syntax they want. The Pandas ecosystem

1415
03:58:35,060 --> 03:58:42,560
supports many types of these kind of indexing things. Either use indexes, you use columns,

1416
03:58:42,560 --> 03:58:49,600
whatever. You can do different kinds of tricks. And it's more about knowing that there is

1417
03:58:49,600 --> 03:58:58,480
a way of organizing the data. And what do we get when we do these searches? What Pandas does,

1418
03:59:00,880 --> 03:59:06,240
it doesn't create us copies of the original data. It creates this so-called view of the data. So

1419
03:59:06,240 --> 03:59:13,280
when we do this kind of stuff, we are basically like splitting pieces out from the original data

1420
03:59:13,280 --> 03:59:20,160
and we are like limiting ourselves to a subset of the data and pandas will like cut out the rest,

1421
03:59:20,160 --> 03:59:26,000
but it won't do a copy. It will just show us a different view of the data. So that's very

1422
03:59:26,000 --> 03:59:29,600
important when you're dealing especially with big data and you don't want to do like,

1423
03:59:30,320 --> 03:59:35,200
you don't want to do copies. You want it to figure out everything from the same data.

1424
03:59:35,200 --> 03:59:46,480
Yeah. Okay, so basically, if you have big data stuff, this is not the worst thing. It might work

1425
03:59:46,480 --> 03:59:51,520
and it's not going to eat up all your memory more than it has to.

1426
03:59:52,480 --> 03:59:59,920
Yeah. There's, of course, even more specialized tools for these, but all of them use the same

1427
03:59:59,920 --> 04:00:06,320
kind of idea. You first figure out what is the important data, then you get that, then you do

1428
04:00:06,320 --> 04:00:12,800
some operations with that data. You usually need to describe how do you get to that data.

1429
04:00:13,680 --> 04:00:21,280
There's also plenty of pandas functions. For example, is not a number,

1430
04:00:21,280 --> 04:00:26,280
to go up another number and this sort of stuff here.

1431
04:00:26,880 --> 04:00:30,800
So you can get different views of the data

1432
04:00:30,800 --> 04:00:32,560
where some of the data has dropped out.

1433
04:00:32,560 --> 04:00:33,600
And this is very useful,

1434
04:00:33,600 --> 04:00:35,600
especially if you have noisy data,

1435
04:00:36,760 --> 04:00:38,320
historical data or something

1436
04:00:38,320 --> 04:00:40,760
that you don't know how to deal with.

1437
04:00:40,760 --> 04:00:43,540
And especially if you have,

1438
04:00:43,540 --> 04:00:45,320
in some cases people want to put,

1439
04:00:46,520 --> 04:00:48,040
instead of using another number,

1440
04:00:48,040 --> 04:00:50,640
they use minus one is another number

1441
04:00:50,640 --> 04:00:52,560
And now you need to modify everything

1442
04:00:52,560 --> 04:00:55,560
where a number is minus one into another number

1443
04:00:55,560 --> 04:00:56,800
so that you can drop them out.

1444
04:00:56,800 --> 04:00:59,440
And if you need to do data cleansing

1445
04:00:59,440 --> 04:01:02,360
and this sort of thing, these functions help a lot.

1446
04:01:02,360 --> 04:01:03,960
But I think we should go to the exercise

1447
04:01:03,960 --> 04:01:06,840
and let people try it out themselves.

1448
04:01:06,840 --> 04:01:09,880
Yeah, so what's the goal here?

1449
04:01:11,920 --> 04:01:16,920
So I would say, yeah, many of these are a bit,

1450
04:01:16,920 --> 04:01:27,880
this exercise a bit, how could I say, free-form, so maybe not. What I think would be important

1451
04:01:28,920 --> 04:01:36,680
is probably if you can do the steps that we have done previously and try out them yourself,

1452
04:01:36,680 --> 04:01:42,920
because it really helps to look at them yourself, and try out the third one at least,

1453
04:01:42,920 --> 04:01:47,920
which is the compute the mean age of the first 10 passengers,

1454
04:01:47,920 --> 04:01:50,920
and try out different things as well.

1455
04:01:50,920 --> 04:01:53,920
Like try out switching different columns, see what you can,

1456
04:01:53,920 --> 04:01:56,920
like explore the data, because in lots of cases,

1457
04:01:56,920 --> 04:01:59,920
the science is really about how do you view the data?

1458
04:01:59,920 --> 04:02:01,920
How do you explore the data?

1459
04:02:01,920 --> 04:02:04,920
And in that case, you need to know, like,

1460
04:02:04,920 --> 04:02:06,920
how do you select a certain amount of the data

1461
04:02:06,920 --> 04:02:08,920
and what data to select?

1462
04:02:08,920 --> 04:02:18,920
So if you try that out, maybe you can answer and check the questions in the notes in the meantime and answer them afterwards.

1463
04:02:18,920 --> 04:02:33,920
So by the time we come back, there should also be a break. So should we go for 20 or 25 minutes and there's break time plus the question time?

1464
04:02:33,920 --> 04:02:37,040
or break time plus the exercise time.

1465
04:02:40,600 --> 04:02:43,080
Is 10 minutes enough for these exercises?

1466
04:02:43,080 --> 04:02:48,080
Yeah, I think we can move forward and explore more.

1467
04:02:48,080 --> 04:02:49,240
Yeah.

1468
04:02:49,240 --> 04:02:50,360
OK.

1469
04:02:50,360 --> 04:02:54,760
And I guess there's probably not enough time

1470
04:02:54,760 --> 04:02:56,400
to do everything from scratch.

1471
04:02:56,400 --> 04:03:01,240
But get started a little bit and see how it goes.

1472
04:03:01,240 --> 04:03:12,440
Okay, um, yeah. Okay, see you later in 20 minutes. Okay, bye.

1473
04:03:31,240 --> 04:03:33,300
you

1474
04:04:01,240 --> 04:04:03,300
you

1475
04:04:31,240 --> 04:04:33,300
you

1476
04:05:01,240 --> 04:05:03,300
you

1477
04:05:31,240 --> 04:05:33,300
you

1478
04:06:01,240 --> 04:06:03,300
you

1479
04:06:31,240 --> 04:06:33,300
you

1480
04:07:01,240 --> 04:07:03,300
you

1481
04:07:31,240 --> 04:07:33,300
you

1482
04:08:01,240 --> 04:08:03,300
you

1483
04:08:31,240 --> 04:08:33,300
you

1484
04:09:01,240 --> 04:09:03,300
you

1485
04:09:31,240 --> 04:09:33,300
you

1486
04:10:01,240 --> 04:10:03,300
you

1487
04:10:31,240 --> 04:10:33,300
you

1488
04:11:01,240 --> 04:11:03,300
you

1489
04:11:31,240 --> 04:11:33,300
you

1490
04:12:01,240 --> 04:12:03,300
you

1491
04:12:31,240 --> 04:12:33,300
you

1492
04:13:01,240 --> 04:13:03,300
you

1493
04:13:31,240 --> 04:13:33,300
you

1494
04:14:01,240 --> 04:14:03,300
you

1495
04:14:31,240 --> 04:14:33,300
you

1496
04:15:01,240 --> 04:15:03,300
you

1497
04:15:31,240 --> 04:15:33,300
you

1498
04:16:01,240 --> 04:16:03,300
you

1499
04:16:31,240 --> 04:16:33,300
you

1500
04:17:01,240 --> 04:17:03,300
you

1501
04:17:31,240 --> 04:17:33,300
you

1502
04:18:01,240 --> 04:18:03,300
you

1503
04:18:31,240 --> 04:18:33,300
you

1504
04:19:01,240 --> 04:19:03,300
you

1505
04:19:31,240 --> 04:19:33,300
you

1506
04:20:01,240 --> 04:20:03,300
you

1507
04:20:31,240 --> 04:20:33,300
you

1508
04:21:01,240 --> 04:21:03,300
you

1509
04:21:31,240 --> 04:21:33,300
you

1510
04:22:01,240 --> 04:22:03,300
you

1511
04:22:31,240 --> 04:22:33,300
you

1512
04:23:01,240 --> 04:23:03,300
you

1513
04:23:31,240 --> 04:23:32,240
Hello.

1514
04:23:32,240 --> 04:23:33,240
Hi.

1515
04:23:33,240 --> 04:23:34,240
You're back.

1516
04:23:34,240 --> 04:23:35,240
Yeah.

1517
04:23:35,240 --> 04:23:58,720
So we had lots of interesting discussion in the notes, which is really great.

1518
04:23:58,720 --> 04:24:05,880
So we want to highlight a few of the, like, because there's lots of stuff still to come

1519
04:24:05,880 --> 04:24:10,800
that we could go through, but it's really nice to have this kind of discussion and really

1520
04:24:10,800 --> 04:24:16,960
focus on, okay, what sort of questions you had, because it really shows like, okay, what

1521
04:24:16,960 --> 04:24:24,000
kind of stuff is still, well, maybe left out of the discussion.

1522
04:24:24,000 --> 04:24:31,360
One thing was that, okay, why aren't we using the PD anywhere anymore? In NumPy,

1523
04:24:31,360 --> 04:24:37,280
we did a lot of NumPy something, NumPy something, like np arrange, np whatever.

1524
04:24:37,280 --> 04:24:46,240
We used a lot of stuff from the np module, so the Python library. This is because in NumPy,

1525
04:24:46,240 --> 04:24:54,240
Well, the NumPy array objects themselves, they have a lot of functionality themselves,

1526
04:24:54,240 --> 04:25:00,440
but the NumPy module or the library provides additional functions, a lot of functions that

1527
04:25:00,440 --> 04:25:02,240
operate on these arrays.

1528
04:25:02,240 --> 04:25:05,240
Whereas in Pandas, well, it's the same case.

1529
04:25:05,240 --> 04:25:07,040
Pandas has a lot of these things.

1530
04:25:07,040 --> 04:25:12,640
But in most situations, we have a situation where we want to use the data frame.

1531
04:25:12,640 --> 04:25:18,480
In Pandas, when we read data in or when we create, we create these data frames.

1532
04:25:18,480 --> 04:25:25,200
And this data frame is the NumPy array on steroids, which is a bunch of these NumPy

1533
04:25:25,200 --> 04:25:31,760
arrays. And it also contains a lot of this information. So, what we usually use are the

1534
04:25:32,480 --> 04:25:38,880
functionality in the data frame itself, and sometimes in the series. So, in each column,

1535
04:25:38,880 --> 04:25:44,640
we use functionality of those columns. So, for example, we calculate the mean of a column or we

1536
04:25:44,640 --> 04:25:50,720
calculate the mean of the data frame. So, we use functionalities of these objects themselves. So,

1537
04:25:50,720 --> 04:25:55,760
the coding style is a bit different. So, we have a lot of dot something, dot something, dot something,

1538
04:25:55,760 --> 04:26:01,600
and then we have the brackets to limit ourselves to some stuff. So, the pandas, it's quite often

1539
04:26:01,600 --> 04:26:07,840
the case that you have import pandas as PD, and then you have PD read CSV, and you never see the

1540
04:26:07,840 --> 04:26:14,560
PD and ever again, it's just all open, working on the data frames afterwards.

1541
04:26:16,320 --> 04:26:25,200
Another thing that was interesting was that there was this kind of location

1542
04:26:27,040 --> 04:26:34,320
where a question on indexing the data based on, with the same rules as you do with the NumPy

1543
04:26:34,320 --> 04:26:51,680
arrays. And in the question, the person was trying to do the same sort of indexing as you

1544
04:26:51,680 --> 04:26:57,680
would do with a NumPy array. But again, it's a great question because this is something that

1545
04:26:57,680 --> 04:27:07,440
you might do quite often. But here, the NumPy array is, let's say, a two-dimensional block of

1546
04:27:08,160 --> 04:27:19,280
indexes. It's a two-dimensional table or block of indexes. And in Pandas, it's not that. It's

1547
04:27:19,280 --> 04:27:26,560
individual rows and individual columns. And you use one or more of these columns as the

1548
04:27:26,560 --> 04:27:38,320
indexing columns, so as the indexes. In the example there, if you're indexing with this

1549
04:27:38,960 --> 04:27:46,640
colon colon 10, you take every 10th row and that is defined, but when you take from 0 to 10,

1550
04:27:46,640 --> 04:27:57,320
10, what you get is range from 0 to 10, and now it's looking for numbers, like indexes

1551
04:27:57,320 --> 04:28:05,400
numbered or named 0 and number 1 and number 2, but the indexes are named after the persons,

1552
04:28:05,400 --> 04:28:06,640
so you don't get that.

1553
04:28:06,640 --> 04:28:08,800
So then you need to use the iloc.

1554
04:28:08,800 --> 04:28:20,560
And this is what usually, when you're doing these kinds of indexing in Pandas, you often

1555
04:28:20,560 --> 04:28:29,480
search by what is the index contents, like by some condition, okay, give me rows where

1556
04:28:29,480 --> 04:28:31,200
something's happening.

1557
04:28:31,200 --> 04:28:40,200
This is why you rarely use, or you can use the iloc to use the exact indices, but you

1558
04:28:40,200 --> 04:28:50,240
rarely do that because, again, you get the random numbers, yes, but you didn't have any

1559
04:28:50,240 --> 04:28:53,480
specific reason why those were better than the others.

1560
04:28:53,480 --> 04:28:55,160
It can get quite confusing.

1561
04:28:55,160 --> 04:29:04,760
people stick to the, like they use the contents of the rows or contents of the index to search

1562
04:29:04,760 --> 04:29:14,080
for the data, not necessarily the, not necessarily like the indexes because that's like, you

1563
04:29:14,080 --> 04:29:20,000
can switch columns, you can order them around and you can order the rows around and like

1564
04:29:20,000 --> 04:29:24,520
suddenly your indexes are all messed up and that's no good.

1565
04:29:24,520 --> 04:29:33,400
Yeah, another great question was like, okay, so which one is better for if you have like

1566
04:29:33,400 --> 04:29:42,280
2D, like lots of data that is in the same data types and do you have it in the,

1567
04:29:44,520 --> 04:29:47,240
do you have it, I'm confused by the cat, I'm like

1568
04:29:47,240 --> 04:30:00,080
So, yeah, if you have mixed data types versus non-mixed data types, and again, there's multiple

1569
04:30:00,080 --> 04:30:01,180
ways of thinking about it.

1570
04:30:01,180 --> 04:30:08,580
So if you have 2D data where it's actually meaningful to have it in multiple dimensions,

1571
04:30:08,580 --> 04:30:13,660
it's very good to have it in NumPy format.

1572
04:30:13,660 --> 04:30:21,580
But let's consider a case where you have 2D NumPy array where the first column is temperature

1573
04:30:21,580 --> 04:30:24,300
and the second column is pressure.

1574
04:30:24,300 --> 04:30:26,580
And now you calculate the mean out of it.

1575
04:30:26,580 --> 04:30:28,540
What does it mean?

1576
04:30:28,540 --> 04:30:34,460
What does it mean to calculate the mean value over temperature and pressure that are in

1577
04:30:34,460 --> 04:30:37,100
the same array?

1578
04:30:37,100 --> 04:30:39,220
You cannot do that kind of stuff.

1579
04:30:39,220 --> 04:30:41,540
It doesn't produce any meaningful results.

1580
04:30:41,540 --> 04:30:48,260
in Pandas because Pandas knows that they are like suffix quantities. Can you multiply height and

1581
04:30:48,260 --> 04:30:56,900
width or can you add kilograms and meters? It doesn't make any sense. And if you store them

1582
04:30:56,900 --> 04:31:02,020
in the same NumPy array, you even often have a situation where that happens. You just

1583
04:31:02,740 --> 04:31:10,820
accidentally multiplied or maybe added meters to kilograms or seconds and then you're like,

1584
04:31:10,820 --> 04:31:16,580
okay, what's wrong with my analysis pipeline? Why am I getting really strange results? And the reason

1585
04:31:16,580 --> 04:31:22,340
was that the independent quantities or the quantities that are like different variables,

1586
04:31:22,340 --> 04:31:29,620
they are mixed and you don't want to do that. Like in Pandas, you can also have like NumPy arrays

1587
04:31:29,620 --> 04:31:38,100
stored in each row. So you can have like, but that's a bit more advanced, I would say.

1588
04:31:38,100 --> 04:31:44,940
But so, and especially for people who are doing like natural sciences, who might have

1589
04:31:44,940 --> 04:31:49,540
like large datasets and they might think that, okay, I'm never going to use like a, I will

1590
04:31:49,540 --> 04:31:53,060
never need to do my data in this sort of format.

1591
04:31:53,060 --> 04:31:59,540
But in papers, like if you have data that you have X and Y axis, that's two variables,

1592
04:31:59,540 --> 04:32:00,540
right?

1593
04:32:00,540 --> 04:32:03,820
Like you have two variables and you need to plot them, right?

1594
04:32:03,820 --> 04:32:06,020
You need to keep them in check.

1595
04:32:06,020 --> 04:32:11,060
you even have a table in your paper that describes like, okay, different values,

1596
04:32:11,460 --> 04:32:16,580
all of that, you can manage that in NumPy arrays and whatever, but it's much

1597
04:32:16,580 --> 04:32:18,660
easier to manage it in a table format.

1598
04:32:19,060 --> 04:32:22,540
And it's in this data frame format in pandas.

1599
04:32:22,860 --> 04:32:30,740
And then let's say do a plot on that instead of having it done in NumPy

1600
04:32:30,740 --> 04:32:35,980
arrays, and this is like, it's a bit of a mind shift coming from NumPy.

1601
04:32:36,020 --> 04:32:42,020
So, it's even bigger, like, you have already gone through the mind shift of going from Python to NumPy.

1602
04:32:42,020 --> 04:32:44,020
Okay, now everything is a big block.

1603
04:32:44,020 --> 04:32:51,020
And now you have to think about, okay, like, there's big blocks, but all of these are, like, separate variables.

1604
04:32:51,020 --> 04:32:57,020
And it's a bit of a mind shift, but the reason why it's constructed in this way is that then you can do, like,

1605
04:32:57,020 --> 04:33:01,020
you can correlate one variable with another variable.

1606
04:33:01,020 --> 04:33:08,940
and it's very hard to do that in NumPy without this sort of machinery.

1607
04:33:10,460 --> 04:33:20,860
But yeah, so maybe we should quickly look at the document. We'll quickly look at this

1608
04:33:20,860 --> 04:33:28,540
in a bit more detail. I might harp over this, but this is basically why this has been designed.

1609
04:33:28,540 --> 04:33:35,900
So the original idea of Pandas was that the developers basically designed this for banking

1610
04:33:35,900 --> 04:33:44,220
world. And there you really don't want to keep your stuff for data analysis in banking world.

1611
04:33:44,220 --> 04:33:54,060
And it's of course used in scientific fields ever since. But they really want to keep their

1612
04:33:54,060 --> 04:33:59,100
ledgers in check. They really want to keep their data in check and make certain that

1613
04:33:59,100 --> 04:34:06,380
everything's correct. This is why it's been designed like this and why other data analysis

1614
04:34:06,380 --> 04:34:13,420
things are designed in the same way. It all goes back to this concept of tidy data that I

1615
04:34:13,420 --> 04:34:17,460
I would describe where the rows are variables,

1616
04:34:17,460 --> 04:34:20,380
sorry, rows are measurements

1617
04:34:20,380 --> 04:34:24,220
and each column is a variable.

1618
04:34:24,220 --> 04:34:26,620
So let's look at this dataset that we have here,

1619
04:34:26,620 --> 04:34:30,140
like this runner dataset.

1620
04:34:30,140 --> 04:34:32,580
So here we create the DataFrame explicitly.

1621
04:34:32,580 --> 04:34:36,820
We don't create it from CSV, but we create it explicitly.

1622
04:34:36,820 --> 04:34:38,100
Should I be typing now?

1623
04:34:38,980 --> 04:34:40,580
Yeah, if you can copy that.

1624
04:34:40,580 --> 04:34:41,420
Okay, let's.

1625
04:34:41,420 --> 04:34:51,020
look a bit busy. Maybe it will sit there. Okay, so I'll copy this and I paste,

1626
04:34:52,540 --> 04:35:01,260
and this makes a data set called runners. Yeah, if you show the runners, like if you just

1627
04:35:02,540 --> 04:35:07,740
go with them. Yeah, okay. And you might look at, hey, look, this is like a nice looking table.

1628
04:35:07,740 --> 04:35:14,620
what's wrong with this? And the idea behind the dataset, like the tidy data, is that again,

1629
04:35:14,620 --> 04:35:23,820
like every row is a measurement and each column is a variable. So let's say you want to calculate,

1630
04:35:23,820 --> 04:35:31,100
like in running, you often have this concept called pace, so which is like how many minutes

1631
04:35:31,100 --> 04:35:35,820
per kilometer, like how fast are you running, like how many minutes does it take for you to

1632
04:35:35,820 --> 04:35:42,260
And in this case, if you would not want to calculate something like that, you notice

1633
04:35:42,260 --> 04:35:48,740
that the distance is actually baked into the column names.

1634
04:35:48,740 --> 04:35:54,340
You have extra information here that is baked into the column names.

1635
04:35:54,340 --> 04:36:01,500
And some cases it might be fine, like this might be fine for analysis, but it's not in

1636
04:36:01,500 --> 04:36:13,340
this tidy data format, which means that you have stuff in the individual rows.

1637
04:36:13,340 --> 04:36:17,680
So it's wide instead of being tall.

1638
04:36:17,680 --> 04:36:19,380
It's often said in this way.

1639
04:36:19,380 --> 04:36:27,600
So what you can do is you can use this pandas melt to basically take the columns and then

1640
04:36:27,600 --> 04:36:29,080
make it into rows.

1641
04:36:29,080 --> 04:36:36,140
I mean, yesterday I thought that this melt function, the naming of the melt function

1642
04:36:36,140 --> 04:36:43,320
is probably because brains melt when they try to get a grasp of what's happening here.

1643
04:36:43,320 --> 04:36:46,640
And this is sometimes what happens with data wrangling.

1644
04:36:46,640 --> 04:36:52,320
I remember once dealing with this kind of data set from World Bank or what was it, that

1645
04:36:52,320 --> 04:37:01,000
had like Excel data where each like column name had huge amount of information in it.

1646
04:37:01,000 --> 04:37:07,480
And it was like one Excel spreadsheet, but it had like lots of information encoded into

1647
04:37:07,480 --> 04:37:10,060
the column names and row names or whatever.

1648
04:37:10,060 --> 04:37:15,720
And in order to create like a data set that can then be used, you need to like do a lots

1649
04:37:15,720 --> 04:37:16,920
of wrangling for it.

1650
04:37:16,920 --> 04:37:22,480
And this is very common, especially in economics and stuff like that, where lots of information

1651
04:37:22,480 --> 04:37:25,360
is hidden into the columns.

1652
04:37:25,360 --> 04:37:32,680
So let's say if we want to now calculate the pace, we could do like a simple like runners

1653
04:37:32,680 --> 04:37:45,160
column, like new column called pace, if you put brackets and yeah.

1654
04:37:45,160 --> 04:37:50,440
And there you put runners, and then you take the,

1655
04:37:50,440 --> 04:37:52,800
what was the speed?

1656
04:37:52,800 --> 04:37:53,880
It was time.

1657
04:37:53,880 --> 04:37:57,320
Time over distance.

1658
04:37:57,320 --> 04:38:00,360
Yeah, they are, like, pace is a weird one.

1659
04:38:00,360 --> 04:38:03,800
It's often written this sort of way.

1660
04:38:03,800 --> 04:38:04,300
Yeah.

1661
04:38:04,300 --> 04:38:06,960
So now you can calculate the pace.

1662
04:38:06,960 --> 04:38:07,480
Yeah.

1663
04:38:07,480 --> 04:38:09,960
I'll make it lowercase.

1664
04:38:09,960 --> 04:38:11,360
Yeah.

1665
04:38:11,360 --> 04:38:14,200
And now you can show the runners again.

1666
04:38:14,200 --> 04:38:17,400
So now you can calculate the pace.

1667
04:38:17,400 --> 04:38:23,160
And you can see that, let's say, runner two is very consistent.

1668
04:38:23,160 --> 04:38:24,880
So every runner is very consistent

1669
04:38:24,880 --> 04:38:28,680
that they can run with the same pace at different,

1670
04:38:28,680 --> 04:38:31,360
even though they're running at different lengths.

1671
04:38:31,360 --> 04:38:33,320
So it's not very realistic.

1672
04:38:33,320 --> 04:38:34,920
Artificial data.

1673
04:38:34,920 --> 04:38:35,520
Yeah.

1674
04:38:35,520 --> 04:38:36,280
OK.

1675
04:38:36,280 --> 04:38:37,800
Yeah.

1676
04:38:37,800 --> 04:38:41,920
But yeah, this sort of situation,

1677
04:38:41,920 --> 04:38:46,720
And this maybe demonstrates to you how it's easier to work, because all of the workflows

1678
04:38:46,720 --> 04:38:55,640
in Pandas and in these kinds of libraries is designed around this tidy data, where you

1679
04:38:55,640 --> 04:39:00,400
have these...

1680
04:39:00,400 --> 04:39:06,440
In order to do the same calculation in the previous format, where it was, we would have

1681
04:39:06,440 --> 04:39:11,560
to divide each column by the column name.

1682
04:39:11,560 --> 04:39:12,200
Yeah, yeah, yeah.

1683
04:39:12,200 --> 04:39:14,480
And that's like the general idea.

1684
04:39:14,480 --> 04:39:16,120
Yeah.

1685
04:39:16,120 --> 04:39:20,000
And that creates it, makes it a lot more complicated.

1686
04:39:20,000 --> 04:39:22,400
And of course, like your data might,

1687
04:39:22,400 --> 04:39:25,000
like usually it's a good idea to store your data

1688
04:39:25,000 --> 04:39:29,920
in this kind of tidy format all the time.

1689
04:39:29,920 --> 04:39:32,320
So it's easier to then use the tools.

1690
04:39:32,320 --> 04:39:35,400
Because the tools are designed around this concept.

1691
04:39:35,400 --> 04:39:37,560
And it's good to know the concept,

1692
04:39:37,560 --> 04:39:40,080
because then you know that, OK, like there

1693
04:39:40,080 --> 04:39:47,600
tools that probably work with this. Yeah, like, since I learned of tidy data, suddenly everything

1694
04:39:47,600 --> 04:39:54,480
started making so much more sense to me. And like, yeah, okay, I should always use this,

1695
04:39:54,480 --> 04:40:01,760
and it makes everything easier. Okay. And the same concept is used widely in different fields,

1696
04:40:01,760 --> 04:40:08,400
so on different tools. So R, for example, uses the same format, or same idea. And like I

1697
04:40:08,400 --> 04:40:13,800
Like I mentioned, the SQL users, so if you want to deal with databases or big data like

1698
04:40:13,800 --> 04:40:20,640
Hadoop or whatever, they all do the same kind of stuff because it's efficient and it's possible

1699
04:40:20,640 --> 04:40:27,000
to handle huge amounts of data with this sort of format.

1700
04:40:27,000 --> 04:40:30,800
Okay.

1701
04:40:30,800 --> 04:40:31,800
What next?

1702
04:40:31,800 --> 04:40:37,040
We have about eight more minutes before we should move on.

1703
04:40:37,040 --> 04:40:38,040
Yeah.

1704
04:40:38,040 --> 04:40:58,000
So I think what we could do is in the, yeah,

1705
04:40:58,000 --> 04:41:04,520
I think we could quickly show at the near the access

1706
04:41:04,520 --> 04:41:17,480
two. I quickly mentioned that if you scroll a bit up, there's lots of these functions

1707
04:41:17,480 --> 04:41:23,640
in Pandas, so we cannot go possibly through all of these because there's so many. There's

1708
04:41:23,640 --> 04:41:28,840
a whole chapter on time series analysis afterwards that we unfortunately don't have time to go

1709
04:41:28,840 --> 04:41:34,520
through. But there's lots of these functions. If you scroll a bit down.

1710
04:41:34,520 --> 04:41:41,320
Okay. Tell me when to stop. Yeah. Yeah. A bit down. Yeah.

1711
04:41:44,920 --> 04:41:52,840
Yeah. Like a bit down even more. Well, I can explain over here. Yeah. So, there's lots of

1712
04:41:52,840 --> 04:42:00,360
these different numbers that are already defined in Pandas, like standard deviations and means max

1713
04:42:00,360 --> 04:42:05,880
and cumulative sums and medians and whatever, like statistic functions and that sort of stuff.

1714
04:42:05,880 --> 04:42:13,880
And of course, you can do a more complicated analysis on different rows as well. But one

1715
04:42:13,880 --> 04:42:20,200
important thing in Pandas is also this kind of grouping idea that you can group the data based

1716
04:42:20,200 --> 04:42:26,520
on. Like I mentioned previously, you can group the data into sub-sections, like sub-arrays.

1717
04:42:26,520 --> 04:42:32,760
So, instead of doing a for loop, where in, like, the alternative is to, like, create a for loop

1718
04:42:32,760 --> 04:42:39,560
where you for loop values of a certain, unique values of a certain row, and then you,

1719
04:42:40,360 --> 04:42:45,400
for each row, you select the subset, and then you, for that subset, you calculate something.

1720
04:42:45,400 --> 04:42:51,160
Instead of doing that, you can do these groupings, these group bys, and you can do multiple levels

1721
04:42:51,160 --> 04:42:52,160
of this.

1722
04:42:52,160 --> 04:42:58,200
So, for example, you can do stuff like that, that you can split among gender and check

1723
04:42:58,200 --> 04:43:02,320
whether they're a child, and then you can calculate the mean survival rate.

1724
04:43:02,320 --> 04:43:04,960
And there's lots of different values like this.

1725
04:43:04,960 --> 04:43:12,560
And I think it might be good to maybe let people have a bit of a break.

1726
04:43:12,560 --> 04:43:14,640
There's lots of stuff coming here.

1727
04:43:14,640 --> 04:43:19,760
So test out the exercises, exercise two.

1728
04:43:19,760 --> 04:43:22,920
And also, in the next session, we'll

1729
04:43:22,920 --> 04:43:28,120
talk a bit more about this same kinds of stuff as this one is,

1730
04:43:28,120 --> 04:43:31,520
like data and the metadata joined together.

1731
04:43:31,520 --> 04:43:35,600
But this time, we are dealing with this kind

1732
04:43:35,600 --> 04:43:37,040
of multidimensional data.

1733
04:43:37,040 --> 04:43:39,360
So if you're doing, I don't know,

1734
04:43:39,360 --> 04:43:41,360
natural sciences or whatever, you

1735
04:43:41,360 --> 04:43:44,160
are definitely interested in this next one

1736
04:43:44,160 --> 04:43:52,480
because it's the x-arrays that Magan will be talking about there, really, really great.

1737
04:43:52,480 --> 04:44:01,440
But I would say, try out these different functions on the dataset in the examples and yeah, hopefully

1738
04:44:01,440 --> 04:44:06,200
this answered many of the questions about them.

1739
04:44:06,200 --> 04:44:16,200
Should we go on to the x-ray lesson, then?

1740
04:44:16,200 --> 04:44:20,200
Wasn't it at 30?

1741
04:44:20,200 --> 04:44:22,200
Yeah, but do...

1742
04:44:22,200 --> 04:44:26,200
I think we could have a bit of a break.

1743
04:44:26,200 --> 04:44:28,200
Okay, so...

1744
04:44:28,200 --> 04:44:30,200
So people can try out the exercises.

1745
04:44:30,200 --> 04:44:32,200
We'll quickly break for now.

1746
04:44:32,200 --> 04:44:34,200
Okay.

1747
04:44:34,200 --> 04:44:44,680
um yeah okay see you shortly bye

1748
04:45:04,200 --> 04:45:06,260
you

1749
04:45:34,200 --> 04:45:36,260
you

1750
04:46:04,200 --> 04:46:06,260
you

1751
04:46:34,200 --> 04:46:36,260
you

1752
04:47:04,200 --> 04:47:06,260
you

1753
04:47:34,200 --> 04:47:36,260
you

1754
04:48:04,200 --> 04:48:06,260
you

1755
04:48:34,200 --> 04:48:36,260
you

1756
04:49:04,200 --> 04:49:06,260
you

1757
04:49:34,200 --> 04:49:36,260
you

1758
04:50:04,200 --> 04:50:20,800
We are live right here for the next section, the next session.

1759
04:50:20,800 --> 04:50:23,600
I hope you all had a great break.

1760
04:50:23,600 --> 04:50:35,120
This session is all about X-Ray and helping me learn about X-Ray is [name].

1761
04:50:35,120 --> 04:50:36,960
But I am [name].

1762
04:50:36,960 --> 04:50:42,600
I'm also at the University of Aalto and together with [name] and maybe [name], you would like

1763
04:50:42,600 --> 04:50:43,600
to introduce yourself.

1764
04:50:43,600 --> 04:50:44,600
Yes.

1765
04:50:44,600 --> 04:50:45,600
I'm [name].

1766
04:50:45,600 --> 04:50:53,440
I work at UIT, the Arctic University of Norway in Tromsø and I have been working with xarray

1767
04:50:53,440 --> 04:50:55,400
during my PhD and postdoc quite extensively,

1768
04:50:55,400 --> 04:50:58,720
so I hope I'm able to answer most of the questions.

1769
04:50:58,720 --> 04:51:00,160
Looking forward to it.

1770
04:51:00,160 --> 04:51:02,160
That would be great.

1771
04:51:02,160 --> 04:51:06,720
I think to dive right in, we've just seen NumPy,

1772
04:51:06,720 --> 04:51:09,000
and then we went to Pandas, and now we're

1773
04:51:09,000 --> 04:51:11,120
going to add another library into the mix that

1774
04:51:11,120 --> 04:51:12,880
deals with data.

1775
04:51:12,880 --> 04:51:17,400
Why X-Ray, and why should we learn about X-Ray?

1776
04:51:17,400 --> 04:51:21,280
So X-Ray is really handy if you work with data where

1777
04:51:21,280 --> 04:51:24,000
have a higher dimensionality than 1D or 2D.

1778
04:51:24,000 --> 04:51:25,640
So if you have tabular data, then probably

1779
04:51:25,640 --> 04:51:26,680
we'll never need X-Array.

1780
04:51:26,680 --> 04:51:27,840
You can just use pandas.

1781
04:51:27,840 --> 04:51:30,340
But if you work with data which has three dimensions or even

1782
04:51:30,340 --> 04:51:34,520
more, then X-Array is by far, at least what I know,

1783
04:51:34,520 --> 04:51:37,760
the best tool that is out there for Python.

1784
04:51:37,760 --> 04:51:42,640
It might also be valuable if you have 2D arrays or 1D arrays,

1785
04:51:42,640 --> 04:51:43,640
time series, and so on.

1786
04:51:43,640 --> 04:51:45,320
But really, the major selling point

1787
04:51:45,320 --> 04:51:46,800
or the major advantage of X-Arrays

1788
04:51:46,800 --> 04:51:49,560
is multiple dimensions.

1789
04:51:49,560 --> 04:51:50,200
Exactly.

1790
04:51:50,200 --> 04:51:51,640
That's what I thought as well,

1791
04:51:51,640 --> 04:51:55,200
that when your data fits into a table

1792
04:51:55,200 --> 04:51:57,880
and it looks like a table and you could build it in Excel,

1793
04:51:57,880 --> 04:51:59,400
then Pandas is probably good.

1794
04:51:59,400 --> 04:52:01,680
But what if you have multiple dimensional data?

1795
04:52:01,680 --> 04:52:03,960
So you have three dimensions, four dimensions.

1796
04:52:03,960 --> 04:52:06,380
It doesn't fit neatly into a table anymore.

1797
04:52:06,380 --> 04:52:08,280
That's where X-Ray comes in.

1798
04:52:10,960 --> 04:52:15,040
Okay, so but then I can create NumPy arrays

1799
04:52:15,040 --> 04:52:16,840
of three dimensions and four dimensions

1800
04:52:16,840 --> 04:52:19,600
and five dimensions, I know that.

1801
04:52:19,600 --> 04:52:23,040
So what does X-Array then give us?

1802
04:52:24,360 --> 04:52:26,280
So the biggest contribution of X-Array

1803
04:52:26,280 --> 04:52:28,160
is to introduce coordinates.

1804
04:52:28,160 --> 04:52:29,840
So in this example that you're showing here,

1805
04:52:29,840 --> 04:52:31,880
which we have in the document,

1806
04:52:31,880 --> 04:52:34,780
you have this 3D non-plane array,

1807
04:52:34,780 --> 04:52:36,880
but if you want to get a data out of it,

1808
04:52:36,880 --> 04:52:38,600
a specific one at a specific point,

1809
04:52:38,600 --> 04:52:41,400
you first of all have to know which dimension refers to

1810
04:52:41,400 --> 04:52:44,640
which coordinate and you also need to know which index

1811
04:52:44,640 --> 04:52:47,640
refers to the exact position that you need.

1812
04:52:47,640 --> 04:52:49,000
And this can be highly unintuitive

1813
04:52:49,000 --> 04:52:51,000
and it's like data or like this information

1814
04:52:51,000 --> 04:52:52,480
that you typically don't really think about

1815
04:52:52,480 --> 04:52:54,640
if you want to explore a dataset.

1816
04:52:54,640 --> 04:52:56,040
So when you use X-Ray,

1817
04:52:56,040 --> 04:52:58,600
instead you can actually access these dimensions

1818
04:52:58,600 --> 04:53:00,400
by the name of this dimension.

1819
04:53:00,400 --> 04:53:02,820
We'll see how it's implemented in X-Ray soon.

1820
04:53:02,820 --> 04:53:03,920
And you can also choose it

1821
04:53:03,920 --> 04:53:06,080
by the specific value of the coordinate.

1822
04:53:06,080 --> 04:53:07,880
So that's very similar to what you've seen previously

1823
04:53:07,880 --> 04:53:09,680
in Sway and Pandas,

1824
04:53:09,680 --> 04:53:12,120
but we will now see how it works in 3D.

1825
04:53:12,120 --> 04:53:15,240
So working with X-Ray makes it just so much more intuitive

1826
04:53:15,240 --> 04:53:17,680
for us humans to work with data.

1827
04:53:17,680 --> 04:53:21,840
Exactly. So say if our data here is temperature data,

1828
04:53:22,800 --> 04:53:24,600
but I want to say, okay,

1829
04:53:24,600 --> 04:53:26,760
I want the temperature at London, for example,

1830
04:53:26,760 --> 04:53:29,720
then yeah, this is going to be tricky

1831
04:53:29,720 --> 04:53:33,080
because then I need like the numerical indices

1832
04:53:33,080 --> 04:53:35,160
on wherever London is in my data.

1833
04:53:35,160 --> 04:53:37,840
It would be nice if it could just say to the data,

1834
04:53:37,840 --> 04:53:41,600
hey, just give me the row corresponding to London

1835
04:53:41,600 --> 04:53:43,560
or give me the row, column, and even Z

1836
04:53:43,560 --> 04:53:45,700
like corresponds to something.

1837
04:53:45,700 --> 04:53:50,700
Okay, so let's take a look at an x-array then.

1838
04:53:52,880 --> 04:53:54,440
Let's do this.

1839
04:53:55,720 --> 04:53:56,680
So let's load one up.

1840
04:53:56,680 --> 04:54:00,120
I'm gonna load this data here that we have here in example.

1841
04:54:00,120 --> 04:54:01,440
Yeah.

1842
04:54:01,440 --> 04:54:03,140
What is this dataset, by the way?

1843
04:54:04,240 --> 04:54:08,320
This is a dataset from like a temperature

1844
04:54:08,320 --> 04:54:10,400
and pressure measurements, I believe.

1845
04:54:10,400 --> 04:54:12,840
It's open access, anyone can download it.

1846
04:54:12,840 --> 04:54:15,200
And in this case, we have four dimensions

1847
04:54:15,200 --> 04:54:17,040
as we already see here in the document.

1848
04:54:17,040 --> 04:54:18,040
Yeah.

1849
04:54:18,040 --> 04:54:21,320
I see here that this just gives me the file path,

1850
04:54:21,320 --> 04:54:23,640
but not just the name of the file, I suppose.

1851
04:54:23,640 --> 04:54:26,600
So now I'm gonna use these two lines

1852
04:54:26,600 --> 04:54:31,600
to actually load the data in that file path.

1853
04:54:32,400 --> 04:54:35,400
That gives me now a variable called ds.

1854
04:54:35,400 --> 04:54:36,640
So this must be the data set.

1855
04:54:36,640 --> 04:54:38,400
So let's check it out there.

1856
04:54:39,300 --> 04:54:41,480
Oh, look, that's the Jupyter Notebook

1857
04:54:41,480 --> 04:54:43,640
actually gives me a very nice table.

1858
04:54:45,200 --> 04:54:48,920
Okay, wow, there's a lot of stuff in here.

1859
04:54:48,920 --> 04:54:51,720
So this is much more than a single array.

1860
04:54:51,720 --> 04:54:56,080
I don't think I've opened a single NumPy array now.

1861
04:54:56,080 --> 04:54:57,080
You have not.

1862
04:54:57,080 --> 04:54:58,680
There is much more in it.

1863
04:54:58,680 --> 04:55:01,720
So the first thing we see is already that it shows us here the dimensions on top and

1864
04:55:01,720 --> 04:55:06,040
it tells us how many dimensions there are and also how many discretization points each

1865
04:55:06,040 --> 04:55:07,040
dimension has.

1866
04:55:07,040 --> 04:55:10,680
So in this case, we have four dimensions or effectively three because time only has one

1867
04:55:10,680 --> 04:55:11,680
value.

1868
04:55:11,680 --> 04:55:16,720
one value. So it's effectively a three-dimensional data set. And we can see now there's multiple

1869
04:55:16,720 --> 04:55:20,880
things in this data set. So we have the coordinates here, which are then explicitly mentioned with

1870
04:55:20,880 --> 04:55:28,240
their name and also the type and also the values. We have the data variables, which then, if you

1871
04:55:28,240 --> 04:55:33,040
scroll further down, exactly. So here we have the data variables which are in this data set. So

1872
04:55:33,040 --> 04:55:37,760
one important point is we can group together multiple data arrays, or in this case,

1873
04:55:37,760 --> 04:55:45,520
these data variables into one coherent data set, and these can be then data which is then

1874
04:55:45,520 --> 04:55:50,280
from zero to four dimensions, and it shows us here along which dimensions these values

1875
04:55:50,280 --> 04:55:51,280
are measured.

1876
04:55:51,280 --> 04:55:58,080
Yeah, so I see here we've actually loaded in seven NumPy arrays, but these seven NumPy

1877
04:55:58,080 --> 04:56:05,440
arrays, they are related to each other, because you see that I have two arrays, but I see

1878
04:56:05,440 --> 04:56:10,640
their dimensions, they have the same names. So the dimension in one array is probably like matches

1879
04:56:10,640 --> 04:56:18,720
the dimension in some other array. And so all these arrays are now tied together. I think we even

1880
04:56:20,160 --> 04:56:28,400
now have a nice example of this. So yeah, so officially our data was four-dimensional,

1881
04:56:28,400 --> 04:56:32,160
but we only had one time point. So let's say it's actually three-dimensional, three dimensions

1882
04:56:32,160 --> 04:56:39,280
actually matter. And of course, the role NumPy array is just a block of numbers. So that's

1883
04:56:39,280 --> 04:56:46,800
now our blue thing. But I see that with X array, we can annotate this array and say,

1884
04:56:46,800 --> 04:56:53,920
okay, well, but this dimension, this is our X coordinates in kilometers. And even every

1885
04:56:53,920 --> 04:57:00,520
step in this dimension, let's maybe call this columns. Every column has a name or, well,

1886
04:57:00,520 --> 04:57:09,400
a name, a value associated to it. And then we have the same. So if we go up this dimension,

1887
04:57:09,400 --> 04:57:13,240
this is the, I don't have to call it the third dimension or the second dimension, I could

1888
04:57:13,240 --> 04:57:18,200
just call it, hey, this is the isobaric pressure dimension. This dimension encodes isobaric

1889
04:57:18,200 --> 04:57:24,560
pressure. And this has a unit even assigned to it in, what is HPA, I don't know, Pascal

1890
04:57:24,560 --> 04:57:25,560
or something.

1891
04:57:25,560 --> 04:57:28,560
Yeah, Heid Pascal, I assume, right?

1892
04:57:28,560 --> 04:57:40,240
Pascal, yeah. And it gives me like the numbers for each. So now, instead of just having a

1893
04:57:40,240 --> 04:57:46,520
block of numbers, this block of numbers now is put into a certain context. It describes

1894
04:57:46,520 --> 04:57:53,400
temperature at certain heights and the heights are indexed by something and it's located

1895
04:57:53,400 --> 04:58:00,360
somewhere on this actual planet earth of ours and we can index it by actually giving it the

1896
04:58:01,080 --> 04:58:09,160
locations on the earth or where do we want this data. All right, so let's give that a try.

1897
04:58:10,840 --> 04:58:17,560
So maybe you talk me through it. Yeah, so we can now. So now can we slice up this data? How do I

1898
04:58:17,560 --> 04:58:21,300
I select pressure data from this?

1899
04:58:21,300 --> 04:58:23,060
So if you want to take the pressure data,

1900
04:58:23,060 --> 04:58:25,220
or like in this case, we have the temperature data,

1901
04:58:25,220 --> 04:58:27,200
you can access each data variable

1902
04:58:27,200 --> 04:58:28,420
the same as you did in Pandas.

1903
04:58:28,420 --> 04:58:31,620
So it's this kind of syntax that is similar to dictionaries.

1904
04:58:31,620 --> 04:58:35,140
So we can do day s, and then we use

1905
04:58:35,140 --> 04:58:39,300
the name of the variable in these square brackets.

1906
04:58:39,300 --> 04:58:41,220
And that will then return the data array.

1907
04:58:41,220 --> 04:58:43,540
So it only is this one data variable,

1908
04:58:43,540 --> 04:58:45,380
but it still contains all the other metadata

1909
04:58:45,380 --> 04:58:46,940
that you've seen before.

1910
04:58:46,940 --> 04:58:51,940
So if you print this out, there's probably a typo.

1911
04:58:52,420 --> 04:58:53,820
Yeah.

1912
04:58:53,820 --> 04:58:54,660
Temperature data.

1913
04:58:54,660 --> 04:58:55,500
Exactly.

1914
04:58:55,500 --> 04:58:57,540
Let's get this out of the way a little bit.

1915
04:58:58,500 --> 04:58:59,740
Okay, so now I've selected, yeah,

1916
04:58:59,740 --> 04:59:04,000
because we saw we had seven NumPy arrays in there,

1917
04:59:04,000 --> 04:59:05,860
seven X-arrays in the dataset.

1918
04:59:05,860 --> 04:59:09,220
We've now selected one of them, the temperature.

1919
04:59:09,220 --> 04:59:14,040
Yeah, and I can see it's a four-dimensional array.

1920
04:59:14,040 --> 04:59:15,540
All the dimensions have names.

1921
04:59:17,900 --> 04:59:21,260
And even coordinates. Okay, so now we have temperature. Okay, cool.

1922
04:59:22,460 --> 04:59:24,460
Can we slice this up now even further?

1923
04:59:24,460 --> 04:59:34,060
Yes, so we can select now specific data out of this data array by using the SEL method.

1924
04:59:34,060 --> 04:59:39,420
And in this case, we can specify the exact value at which we want to get the data from.

1925
04:59:39,420 --> 04:59:44,540
So remember in NumPy, we had to use an index, which is really unintuitive since we don't really

1926
04:59:44,540 --> 04:59:49,740
care about which position in the array this data is stored, but we can actually get it by its

1927
04:59:49,740 --> 04:59:56,380
physical position, which is much more useful. Yeah, so instead of having to index like this,

1928
04:59:56,380 --> 05:00:00,860
we're now going to index like this. I can index with a name, like okay, I want the selection of the

1929
05:00:01,420 --> 05:00:09,340
data where our x-coordinate is a certain number, and this is in kilometers. Yes, and you can

1930
05:00:09,340 --> 05:00:14,300
see now also that the dimensionality has changed, so the x-variable has now, or the x-dimension has

1931
05:00:14,300 --> 05:00:18,460
disappeared, or like it's only one's value. If you look up there, then you can see it's now

1932
05:00:20,060 --> 05:00:24,620
it's a 2D array, effectively. So now I only have Y subarachnothyme left there.

1933
05:00:28,540 --> 05:00:30,620
Sorry, why is this a string? I'm now confused by this.

1934
05:00:32,860 --> 05:00:39,020
It's the way how the coordinate stores the values. So in this case, if I remember correctly,

1935
05:00:39,020 --> 05:00:40,340
if it's sorted strings.

1936
05:00:42,300 --> 05:00:43,140
Right, every...

1937
05:00:43,140 --> 05:00:45,140
Oh, no, actually, yes.

1938
05:00:45,140 --> 05:00:46,380
Every name was a string.

1939
05:00:46,380 --> 05:00:49,300
Do coordinates, so the coordinates,

1940
05:00:49,300 --> 05:00:51,220
do they always have to be strings, or?

1941
05:00:53,740 --> 05:00:55,340
I'm not entirely sure how it does it under the hood,

1942
05:00:55,340 --> 05:01:00,340
but it kind of casts it into floats that I don't know,

1943
05:01:02,860 --> 05:01:04,580
but we can quickly test it.

1944
05:01:04,580 --> 05:01:06,860
I'm not sure where it would work.

1945
05:01:06,860 --> 05:01:08,820
We'll test it later when we create our own.

1946
05:01:08,820 --> 05:01:17,180
For now, the coordinates are strings.

1947
05:01:17,180 --> 05:01:22,020
We can also use the index by using ISEL instead of SEL, so ISEL.

1948
05:01:22,020 --> 05:01:27,020
Right, so if we actually wanted to do, because sometimes in algorithms and things we do want

1949
05:01:27,020 --> 05:01:36,580
to index by number, so just give me the first x-coordinate and I don't know actually what

1950
05:01:36,580 --> 05:01:40,580
sort of string label that was, but just give me the first one.

1951
05:01:40,580 --> 05:01:43,300
And it's actually the second one since it still uses the

1952
05:01:43,300 --> 05:01:47,540
numpy, sorry, the Python dimension.

1953
05:01:47,540 --> 05:01:50,740
Yeah, exactly. Yeah, this is the second one.

1954
05:01:50,740 --> 05:01:54,260
Okay, so we can do it both ways.

1955
05:01:54,260 --> 05:01:58,740
That is useful. Okay, now we come to the real

1956
05:01:58,740 --> 05:02:02,340
power of X-Array, and this is that we can use now these

1957
05:02:02,340 --> 05:02:05,700
functionality along dimensions by name.

1958
05:02:05,700 --> 05:02:09,940
So we have here as an example sum, mean, median, the minimum, the maximum, and so on.

1959
05:02:09,940 --> 05:02:12,820
There is more to it, but these are maybe the most common ones.

1960
05:02:13,780 --> 05:02:17,940
And what you've just typed now, we now calculate the mean along a certain dimension.

1961
05:02:18,660 --> 05:02:22,500
Which in NumPy, if you would want to do the same thing, it would be really cumbersome

1962
05:02:22,500 --> 05:02:27,060
because we would have to use the mean function, the NumPy.mean function, and then specify the axis.

1963
05:02:27,060 --> 05:02:29,300
Like axis. Now I have to remember which one was the

1964
05:02:30,260 --> 05:02:34,020
pressure axis, and I don't remember. I think it was axis two or something.

1965
05:02:34,020 --> 05:02:40,460
But they don't have to, because I can just now say, well, give me the isobaric mean along

1966
05:02:40,460 --> 05:02:44,940
the isobaric axis, and we'll do so.

1967
05:02:44,940 --> 05:02:45,940
Exactly.

1968
05:02:45,940 --> 05:02:46,940
Yeah.

1969
05:02:46,940 --> 05:02:47,940
Okay.

1970
05:02:47,940 --> 05:02:48,940
And which is also super min-max.

1971
05:02:48,940 --> 05:02:51,940
All the standard NumPy array stuff is there, it's supported.

1972
05:02:51,940 --> 05:02:58,300
Yeah, so the plotting is also one thing we should mention quickly.

1973
05:02:58,300 --> 05:03:01,180
Yeah, let's show, because we have that.

1974
05:03:01,180 --> 05:03:06,940
as pandas, it was not really mandem, but pandas has some rudimentary plotting features. So

1975
05:03:06,940 --> 05:03:17,580
is X-Ray. So there's a dumb plot and that allows me to do some rudimentary plotting

1976
05:03:17,580 --> 05:03:23,820
to say, okay, so this is actually a slice we've now selected along the X. So now we

1977
05:03:23,820 --> 05:03:27,860
have height and the Y-coordinate still and we see the temperature plotted here. So we

1978
05:03:27,860 --> 05:03:30,420
and we can quickly pop like different things.

1979
05:03:30,420 --> 05:03:31,900
And note that you didn't have to specify

1980
05:03:31,900 --> 05:03:34,800
any of the plotting, the labels at each,

1981
05:03:35,900 --> 05:03:39,460
here at each axis, or all of this was,

1982
05:03:39,460 --> 05:03:41,700
is the met information that the dataset already has,

1983
05:03:41,700 --> 05:03:44,980
and then the plotting function takes all this data

1984
05:03:44,980 --> 05:03:47,180
and puts it into the figure.

1985
05:03:47,180 --> 05:03:48,980
So this is maybe not the type of figure

1986
05:03:48,980 --> 05:03:50,380
that you want to include in your publication,

1987
05:03:50,380 --> 05:03:52,460
but if you quickly want to have a look

1988
05:03:52,460 --> 05:03:53,700
at the data for data analysis,

1989
05:03:53,700 --> 05:03:56,660
or quickly check whether you set up the right slice

1990
05:03:56,660 --> 05:03:58,700
and so on, this is extremely handy.

1991
05:03:58,700 --> 05:04:01,660
And it also, if you scroll further down,

1992
05:04:01,660 --> 05:04:03,100
we will see that also it detects

1993
05:04:03,100 --> 05:04:05,100
the dimensionality automatically.

1994
05:04:05,100 --> 05:04:07,260
So now if we choose,

1995
05:04:07,260 --> 05:04:09,740
where we also specify the Y position,

1996
05:04:09,740 --> 05:04:12,260
we will get now a 1D box.

1997
05:04:12,260 --> 05:04:13,100
Yeah.

1998
05:04:13,100 --> 05:04:14,820
So if we quickly do that.

1999
05:04:17,220 --> 05:04:20,540
You get that.

2000
05:04:20,540 --> 05:04:23,060
So now it just draws it as a line

2001
05:04:23,060 --> 05:04:25,060
because now it's one dimensional data.

2002
05:04:25,060 --> 05:04:28,540
It makes sense to draw as a line, no longer as a figure,

2003
05:04:28,540 --> 05:04:31,300
and no longer as a heat map.

2004
05:04:31,300 --> 05:04:32,700
Yeah, and it's filled in all the dimensions,

2005
05:04:32,700 --> 05:04:36,040
like all the annotations that the X-ray had,

2006
05:04:36,040 --> 05:04:38,180
all the labels and all the coordinates and everything.

2007
05:04:38,180 --> 05:04:39,340
It's all there, so.

2008
05:04:42,040 --> 05:04:43,380
Okay.

2009
05:04:43,380 --> 05:04:45,140
So I think...

2010
05:04:45,140 --> 05:04:47,860
So there was one question in the HedgeDog document

2011
05:04:47,860 --> 05:04:48,980
about 3D plots.

2012
05:04:50,460 --> 05:04:53,840
So if you have data which has more than two dimensions,

2013
05:04:53,840 --> 05:04:56,680
then x-array will interpret it as a histogram.

2014
05:04:56,680 --> 05:04:59,160
And this is actually also included here in the document.

2015
05:04:59,160 --> 05:05:00,880
Oh, okay, so let's show it.

2016
05:05:00,880 --> 05:05:02,640
Okay, yeah, so what if we just plot

2017
05:05:02,640 --> 05:05:05,080
the entire three-dimensional array?

2018
05:05:05,080 --> 05:05:06,720
What does x-array do then?

2019
05:05:06,720 --> 05:05:07,540
Aha!

2020
05:05:10,060 --> 05:05:13,180
It will give us, indeed, a histogram.

2021
05:05:15,440 --> 05:05:17,800
The histogram of all the various values in there.

2022
05:05:17,800 --> 05:05:19,480
How do I interpret this histogram?

2023
05:05:20,520 --> 05:05:23,160
Yeah, it's all, yeah, it's showing

2024
05:05:23,160 --> 05:05:25,480
distribution of all the values of the data set.

2025
05:05:25,480 --> 05:05:29,240
Very often, at least when I was working with data and I got a histogram

2026
05:05:29,240 --> 05:05:31,640
but it was not what I wanted and it turned out that I haven't really

2027
05:05:31,640 --> 05:05:36,360
understood how to apply it or like which dimension I wanted to follow.

2028
05:05:37,080 --> 05:05:40,200
But it does tell us something. It tells that there seems to be

2029
05:05:40,200 --> 05:05:43,240
a sort of a binary distribution here. There's some

2030
05:05:43,240 --> 05:05:47,800
values here and some values there, so there are probably two hot spots.

2031
05:05:47,800 --> 05:05:56,340
Okay, but I think it's time for a first exercise.

2032
05:05:56,340 --> 05:05:59,300
So we've now shown how to load data.

2033
05:05:59,300 --> 05:06:01,500
We've quickly shown how to select some of the data.

2034
05:06:01,500 --> 05:06:03,660
We've quickly shown how to plot something.

2035
05:06:03,660 --> 05:06:09,420
So now for this exercise, we're going to turn it over to you and do a simple exercise with

2036
05:06:09,420 --> 05:06:10,420
it.

2037
05:06:10,420 --> 05:06:15,700
So load this data set, select some data and call the plot on it, just to give you a taste

2038
05:06:15,700 --> 05:06:18,100
of what it is like to work with X-Ray.

2039
05:06:19,860 --> 05:06:22,220
Let's give them...

2040
05:06:22,220 --> 05:06:23,060
One.

2041
05:06:24,580 --> 05:06:25,420
Sorry.

2042
05:06:25,420 --> 05:06:26,260
Yeah, since...

2043
05:06:26,260 --> 05:06:27,080
Yeah, sorry.

2044
05:06:27,080 --> 05:06:27,920
I'll let you finish.

2045
05:06:27,920 --> 05:06:28,760
There's just one comment I wanted to give

2046
05:06:28,760 --> 05:06:31,500
since in the hash document, there was a question.

2047
05:06:31,500 --> 05:06:32,340
Oh, okay.

2048
05:06:32,340 --> 05:06:35,300
But maybe we can get to it, but that's why I want...

2049
05:06:35,300 --> 05:06:37,540
If you want to do the exercise, we have to do it now.

2050
05:06:37,540 --> 05:06:39,980
You have until, I think, 55.

2051
05:06:39,980 --> 05:06:44,180
Let's come back at 1455 here.

2052
05:06:45,700 --> 05:06:52,700
And we'll discuss the question and we'll wrap up, we'll show you some final things, but first let's do the exercise.

2053
05:06:52,700 --> 05:06:57,700
So, I will see you back here in seven minutes.

2054
05:07:15,700 --> 05:07:17,760
you

2055
05:07:45,700 --> 05:07:47,760
you

2056
05:08:15,700 --> 05:08:17,760
you

2057
05:08:45,700 --> 05:08:47,760
you

2058
05:09:15,700 --> 05:09:17,760
you

2059
05:09:45,700 --> 05:09:47,760
you

2060
05:10:15,700 --> 05:10:17,760
you

2061
05:10:45,700 --> 05:10:47,760
you

2062
05:11:15,700 --> 05:11:17,760
you

2063
05:11:45,700 --> 05:11:47,760
you

2064
05:12:15,700 --> 05:12:17,760
you

2065
05:12:45,700 --> 05:12:47,760
you

2066
05:13:15,700 --> 05:13:17,760
you

2067
05:13:45,700 --> 05:14:03,820
And welcome back everybody. I hope you all managed to do this exercise, and otherwise

2068
05:14:03,820 --> 05:14:08,500
we will leave it as homework, but we have to carry on. We have a few more minutes left

2069
05:14:08,500 --> 05:14:14,140
and there's a few more things we would like to show you. So, [name], why don't you talk

2070
05:14:14,140 --> 05:14:22,300
me through it. So we have now got an overview of how to use X-Array to work with data but of course

2071
05:14:22,300 --> 05:14:26,060
probably the most important thing for you is if you want to use X-Array how do you transfer your

2072
05:14:26,060 --> 05:14:33,180
own data into an X-Array data set and the syntax for that is now shown here where we create it

2073
05:14:33,180 --> 05:14:40,780
with the xset.dataset method here and this then contains the data variables that we can pass into

2074
05:14:40,780 --> 05:14:46,780
the data set. And these are typically non-player arrays. So in this case we have pressure and

2075
05:14:46,780 --> 05:14:51,820
humidity as an example and we have to coordinate. And in addition to that we can also give attributes

2076
05:14:51,820 --> 05:14:56,460
which is like metadata which doesn't really fit into the format of the remaining data. So this

2077
05:14:56,460 --> 05:15:00,460
can be for instance the time that the measurement was taken, if it's a simulation data it could be

2078
05:15:00,460 --> 05:15:05,820
the compiler and the software version that you use for running the simulation. So you can basically

2079
05:15:05,820 --> 05:15:10,860
keep all this extra information that you typically always want to have close by in these attributes.

2080
05:15:12,380 --> 05:15:19,420
In this case we have here simply a 2D dataset and of course you need to you have to make sure that

2081
05:15:19,420 --> 05:15:23,900
the dimensionality fits. So if you then create your own dataset at some point you will get

2082
05:15:23,900 --> 05:15:29,980
some weird errors if the data you try to glue together has different dimensions. So this is

2083
05:15:29,980 --> 05:15:33,180
is maybe the hardest thing to get that right at the beginning.

2084
05:15:33,180 --> 05:15:37,580
But I mean, I shouldn't say hard because I wouldn't say it's hard. It's just like

2085
05:15:37,580 --> 05:15:41,820
one of the typical sampling blocks at the beginning.

2086
05:15:42,060 --> 05:15:47,580
So if we do, let me run this just to show that this works.

2087
05:15:47,580 --> 05:15:52,300
Okay, so now I've created my own data set with this.

2088
05:15:52,300 --> 05:15:58,140
Yeah, and we have time, we have location, so we have two-dimensional data.

2089
05:15:58,140 --> 05:16:03,660
And we have two variables here now in our data set, and they're linked together.

2090
05:16:03,660 --> 05:16:11,100
So we have a pressure array with humidity array, and they both have two dimensions,

2091
05:16:11,100 --> 05:16:12,940
time and location, and they are the same ones.

2092
05:16:12,940 --> 05:16:17,220
So X-Ray knows that they are the same.

2093
05:16:17,220 --> 05:16:23,820
We should mention how to transfer data from X-Ray to NumPy, Pandas, or like a binary format.

2094
05:16:23,820 --> 05:16:25,980
This X-Array is built on top of Pandas and NumPy.

2095
05:16:25,980 --> 05:16:28,420
It's really easy to convert the data,

2096
05:16:28,420 --> 05:16:29,780
and it's shown here how to do this.

2097
05:16:29,780 --> 05:16:33,260
So the NumPy arrays can simply be accessed

2098
05:16:33,260 --> 05:16:37,140
by typing dot values after the data array,

2099
05:16:37,140 --> 05:16:39,340
but there's also a toNumPy method

2100
05:16:39,340 --> 05:16:41,420
if you prefer to use that.

2101
05:16:41,420 --> 05:16:43,820
And similarly for data frames,

2102
05:16:45,220 --> 05:16:48,460
there's a pull-down to that as well.

2103
05:16:48,460 --> 05:16:49,300
That's interesting.

2104
05:16:49,300 --> 05:16:50,300
I want to try this one.

2105
05:16:50,300 --> 05:17:00,700
Okay, so that actually gave me a data frame in tidy data format, as we saw in the last

2106
05:17:00,700 --> 05:17:01,700
lesson.

2107
05:17:01,700 --> 05:17:09,540
And then NetCDF is really handy if you have very large data sets, since NetCDF is a binary

2108
05:17:09,540 --> 05:17:10,540
format.

2109
05:17:10,540 --> 05:17:16,580
So, I've used that mostly when I was working with gigabytes of data from simulations.

2110
05:17:16,580 --> 05:17:26,300
So there was actually a question there about this.

2111
05:17:26,300 --> 05:17:31,980
What is X-Array the same as NetCDF or is it built on top of it?

2112
05:17:31,980 --> 05:17:33,180
It's built on top.

2113
05:17:33,180 --> 05:17:40,060
It uses NetCDF as a backend and it's really easy to store the data as NetCDF and load

2114
05:17:40,060 --> 05:17:49,740
NETCDF files but it adds additional functionality like group by, masking and all sorts of things

2115
05:17:49,740 --> 05:17:54,700
that pandas for instance does like x-ray builds that on top of NETCDF. So basically we actually

2116
05:17:54,700 --> 05:18:07,500
have the best profiles of NETCDF and pandas. And just a quick comment, there was someone

2117
05:18:07,500 --> 05:18:10,580
on running into an issue of NetCDF not being installed.

2118
05:18:10,580 --> 05:18:13,540
If you install NetCDF, the Python library

2119
05:18:13,540 --> 05:18:16,180
with Conda, Mamba, whatever you use,

2120
05:18:16,180 --> 05:18:18,780
it will be automatically detected on the deploy run.

2121
05:18:20,100 --> 05:18:20,940
Yeah.

2122
05:18:20,940 --> 05:18:23,660
Just a comment to this one question we received.

2123
05:18:23,660 --> 05:18:26,380
Yes, there are multiple backends to this.

2124
05:18:26,380 --> 05:18:29,300
So with that, we come to the end of this session.

2125
05:18:29,300 --> 05:18:32,980
We have barely scratched the surface of what XRA can do.

2126
05:18:32,980 --> 05:18:34,940
It's a pretty large library.

2127
05:18:34,940 --> 05:18:36,900
It can do a lot of things.

2128
05:18:36,900 --> 05:18:39,040
And there's a lot more to explore.

2129
05:18:39,040 --> 05:18:41,920
So we've included an exercise number two,

2130
05:18:41,920 --> 05:18:43,360
which you can do in your own time

2131
05:18:43,360 --> 05:18:46,020
to explore a little bit more about X-ray.

2132
05:18:48,160 --> 05:18:51,300
And otherwise, I think it's time to move on.

2133
05:18:51,300 --> 05:18:53,120
Thank you a lot, [name].

2134
05:18:54,040 --> 05:18:55,480
Yeah, well, thank you.

2135
05:18:55,480 --> 05:18:56,880
Thanks for joining everyone.

