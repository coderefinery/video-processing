- workshop_title: Python for Scientific Computing 2023
- workshop_description: >
    Python for Scientific Computing is a bridge between basic Python
    courses and scientific work with Python.  This is a
    basic to intermediate course in Python tools such as NumPy, SciPy,
    Matplotlib, and Pandas.  It also covers some more advanced tools,
    such as Binder, releasing software, data formats, etc.  It is
    suitable for people who have a basic understanding of Python
    and want to know some internals and important libraries for
    science.  We don't cover anything in too much depth, but we do
    introduce you to all of the main tools you will need.

    This course was put on as a collaboration between partners in
    Finland, Norway, and Sweden, coordinated by Aalto Scientific
    Computing.

    Links:

    - Playlist: https://www.youtube.com/playlist?list=PLZLVmS9rf3nNI3oQEqSJW6yXltOAZnkpa

    - Course material: https://aaltoscicomp.github.io/python-for-scicomp/

    - Workshop webpage: https://scicomp.aalto.fi/training/scip/python-for-scicomp-2023/

    - Aalto Scientific Computing: https://scicomp.aalto.fi/

    - CodeRefinery: https://coderefinery.org

- input: raw/day1-obs.mkv

- output: day1.1-icebreaker.mkv
  title: 1.1 Icebreaker
  description: >-
    The icebreaker/intro session of the day  You probably don't want
    to watch this and instead will go to the main material.

  editlist:
    - start: 00:05:27
    - end: 00:14:25

- output: day1-intro.mkv
  title: 1.2 Intro
  description: >-
    The introduction to the workshop which explains the outline and
    practical livestream mechanics.  You might want to go on to the
    main material.

    https://scicomp.aalto.fi/training/scip/python-for-scicomp/intro/

  editlist:
    - start: 00:16:35
    - 00:16:49: Who presents this course?
    - 00:19:22: Practicalities
    - 00:27:26: Respect
    - 00:28:46: Final notes
    - end: 00:29:29


- output: day1-jupyter.mkv
  title: 1.3 Jupyter
  description: >-
    We discuss Jupyter, its advantages and disadvantages, and how to
    use it.  Our main focus is establishing a common ground for our
    main way of doing demos for the rest of the course, we don't go
    too deep.

    https://aaltoscicomp.github.io/python-for-scicomp/jupyter/

  editlist:
    - start: 00:30:26
    #- -: Intro
    - 00:31:23: Getting started / launching Jupyter
    - 00:32:30: Tour of the interface
    - 00:43:59: Exercises 1, 2
    - end: 00:45:24
    - start: 00:59:31
    - -: "Post-exercises Q&A"
    - 01:01:10: Why Jupyter, advantages and disadvantages
    - end: 01:04:21


- output: day1-numpy.mkv
  title: 1.4 Numpy
  description: >-
    Numpy is the standard Python array package.  It provides not only
    the basic data structure, but also plenty of operations on this
    data.  By using built-in functions, many operations can be
    vectorized and made much faster (just like they are done in any
    other high-level numerical language).  Many other scientific and
    numerical packages are build using Numpy, so it is very important
    to learn to use it well.

    https://aaltoscicomp.github.io/python-for-scicomp/numpy/

  editlist:
    - start: 01:14:30
    - 01:15:16: Numpy, why?


    - 01:17:06: What is the array object?
    - 01:18:43: Python vs Numpy speed test
    - 01:22:32: Ways to create arrays
    - 01:28:24: Exercise Numpy-1
    - end: 01:29:37
    - start: 01:44:38
    - -: Going over the exercise
    - 01:45:42: Array math
    - 01:49:32: Indexing and slicing
    - 01:53:51: Exercises Numpy-2 and Numpy-3
    - end: 01:55:10
    - start: 02:04:37
    - -: Going over the exercise
    - 02:05:42: Types of operations
    - 02:08:05: Big picture of numpy's usage and wrap-up
    - 02:08:57: Advanced numpy lesson (how it works under the hood)
    - 02:10:29: Wrap-up
    - end: 02:11:05



- output: day1-pandas.mkv
  title: 1.5 Pandas 1/2
  description: >-
    Pandas is the standard tabular data package for Python.  It allows
    you to do plenty of operations quickly and seamlessly.  In this
    lesson, we go over the basics of using Pandas.  After this lesson,
    you won't know everything but you will be able to read the docs
    and figure out from more yourself, which is what almost everyone
    has to do anyway.

    Continued in part 2: ... coming tomorrow

    https://aaltoscicomp.github.io/python-for-scicomp/pandas/

  editlist:
    - start: 02:21:25
    - -: What is pandas?
    - 02:23:39: A quick overview
    - 02:30:03: Demo and basic structure of a DataFrame
    - 02:38:33: Tidy data
    - 02:45:05: Exercises Pandas-1 and Pandas-2
    - stop: 02:45:51
    - start: 03:04:47
    - -: Summary of pandas so far
    - 03:09:51: "Done for the day, wrap-up and Q&A, feedback of the day"
    - end: 03:12:55



- input: raw/day2-obs.mkv

- output: day2.1-icebreaker.mkv
  title: 2.1 Icebreaker
  description: >-
    The icebreaker/intro session of the day.  You probably don't want
    to watch this and instead will go to the main material.

  editlist:
    - start: 00:11:44
    - end: 00:20:07


- output: day2.2-pandas2.mkv
  title: 2.2 Pandas 2/2
  description: >-
    Pandas is the standard tabular data package for Python.  It allows
    you to do plenty of operations quickly and seamlessly.  In this
    lesson, we go over the basics of using Pandas.  After this lesson,
    you won't know everything but you will be able to read the docs
    and figure out from more yourself, which is what almost everyone
    has to do anyway.

    Continued from part 1: https://www.youtube.com/watch?v=7YOU2Qh4hOU&list=PLZLVmS9rf3nNI3oQEqSJW6yXltOAZnkpa

    https://aaltoscicomp.github.io/python-for-scicomp/pandas/

  editlist:
    - start: 00:20:07
    - 00:20:43: "Working with dataframes: merging dataframes"
    - 00:23:17: Time serieses
    - 00:26:49: Plotting with pandas
    - 00:30:10: Exercise 3

    - end: 00:30:32
    - start: 00:44:42
    - -: 'Pandas Q&A and where to go from here'
    - end: 00:48:04

- output: day2.3-visualization.mkv
  title: 2.3 Visualizaiton
  description: >-
    Generating figures is part of the scientific process.  This should
    not be manual, but ideally they should be automatically generated in
    final form.  This makes your work reproducible, getting around
    "oh no I can't make it again" problems.

    In this lesson, we discuss the matplotlib Python library which can
    be used to make figures like this.  This isn't the only Python
    tool, and may not even be the best one, but it is the base of many
    other tools and a good point to learn the basic concepts you will
    apply over and over.

    https://aaltoscicomp.github.io/python-for-scicomp/data-visualization/

  editlist:
    - start: 00:48:28
    - 00:49:58: What to expect
    - 00:52:00: Motivation for reproducible figures
    - 01:00:09: Getting started with matplotlib
    - 01:05:42: Exercise 1
    - end: 01:08:12
    - start: 01:34:29
    - -: 'Going over the exercises'
    - 01:36:06: Two matplotlib interfaces, object-oriented or pyplot
    - 01:38:52: Styling and customizing plots
    - 01:43:55: Exercises Customization-{1,2,3}
    - end: 01:55:18
    - start: 02:14:26
    - -: Exercise Customization-3 demo (find a similar plot from a gallery and adapt it), uses Seaborn
    - 02:18:52: Matplotlib and dataframes

    - 02:20:04: Summary
    - end: 02:20:50

- output: day2.4-dataformats.mkv
  title: 2.4 Data formats
  description: >-

    Input/output bandwidth is just as much a consumable resource as
    CPU or memory.  And data formats are important for both ease
    (human effort) and time taken to read data.  Here, we will go over
    the basic concepts and some important data formats which you may
    need in your work.

    The longer video from last year: https://www.youtube.com/watch?v=kvZkc3idtF4

    https://aaltoscicomp.github.io/python-for-scicomp/data-formats/

  editlist:
    - start: 02:30:03
    - 02:31:03: What do we mean by data formats?
    - 02:31:34: What's a data frame?
    - 02:34:54: Numpy arrays arrangement?
    - 02:36:32: Each file format has a purpose
    - end: 02:40:36


#    - -: Why are data formats important?
#    - 02:32:47: Tidy vs array data
#    - 02:36:27: Choosing a file format (various considerations)
#    - 02:43:30: pickle
#    - 02:47:14: "Exercise: pickle"
#    - stop: 02:48:06
#    - start: 02:53:30
#    - -: Tidy data formats
#    - 02:54:03: CSV
#    - 03:00:27: Feather
#    - 03:01:03: Parquet
#    - 03:02:52: "Exercise: CSV or parquet"
#    - stop: 03:03:33
#    - start: 03:07:18
#    - 03:08:00: Now let's talk about array data
#    - 03:08:40: npy (npy array format)
#    - 03:11:59: HDF5
#    - 03:13:38: NetCDF4
#    - 03:15:01: JSON
#    - 03:19:50: Excel
#    - 03:20:07: Graph formats
#    - 03:20:29: Summary, think about how your code uses the data
#    - 03:21:36: Wrap-up of the day
#    - stop: 03:25:38
##    - end: 2:44:26
##    - start: 2:25:18
##    - 2:47:00: Two most common data formats (tidy and array)
##    - 2:52:47: File formats, considerations
##    - 2:59:00: csv
##    - 3:08:30: Feather
##    - 3:12:23: Parquet
##    - 3:15:15: HDF5
##    - 3:16:58: NetCDF
##    - 3:18:35: npy (numpy data format)
##    - 3:19:45: Exercises
##    - 3:20:00: Why binary formats over text formats? Main considerations
##    - 3:21:45: Things to remember / questions to ask yourself
##    - end: 3:22:40
##    - start: 3:23:20
##    - -: sqlite
##    - end: 3:25:22
##    - start: 3:27:20
##    - -: Discussion
##    - 3:29:50: Structural format vs semantic formats
##    - 3:30:50: "Conclusion, Relation of data formats to the rest of workflow: reducing bottlenecks"
##    - end: 3:33:00

- output: day2.5-productivity.mkv
  title: 2.5 Productivity tools
  description: >-

    There are various tools that can make your own human time more
    efficient - productivity tools.  These do things and find problems
    that are easy for a computer but hard or annoying for a human.
    Things like finding simple bugs or reformatting code.  We'll
    discuss linting and code formatting, and have a discussion about
    other things and how we actually usually work.

    https://aaltoscicomp.github.io/python-for-scicomp/productivity/

  editlist:
    - start: 02:40:43
    - -: What do we mean by productivity tools?
    - 02:42:50: Linters
    - 02:54:20: "Exercise 1: linters"
    - stop: 02:55:13
    - start: 03:04:21
    - -: 'Going over the exercise and more linter Q&A'
    - 03:06:48: Code formatters
    - 03:11:06: The "black" code formatter (demo)
    - 03:14:48: Discussion
    - 03:24:24: Final news of the day
    - 03:24:46: More discussion of productivity tools
    - 03:26:59: Wrap-up
    - end: 03:27:45





# Day 3
- input: raw/day3-obs.mkv

- output: day3.1-icebreaker.mkv
  title: 3.1 Icebreaker
  description: >-
    The icebreaker/intro session of the day  You probably don't want
    to watch this and instead will go to the main material.

    We have a guest, Luca Ferranti, who talks about their path into a
    career in scientific computing and the Julia programming language.

  editlist:
    - start: 00:07:20
    - end: 00:17:40

- output: day3.2-scripts.mkv
  title: 3.2 Scripts
  description: >-

    Thus far, we have been running Python code from Jupyter notebooks
    (though the same principle applies to other environments such as
    Spyder or IDSs).  This doesn't easily allow you to scale up or
    scale out: if you need to run the same, or slightly different,
    code many times, it is hard.  There are ways to do this within
    Jupyter, but in the end you will want to escape and make command
    line interfaces.  This is the universal interface for automation,
    scale-out, and parameterization of work.  We give the quickest
    intro to this.

    https://aaltoscicomp.github.io/python-for-scicomp/scripts/

  editlist:
    - start: 00:17:41
    - -: Why make scripts?
    - 00:18:45: What is a script?
    - 00:23:31: Script example type-along (+ exercise 1 to do it yourself)
    - end: 00:28:26
    - start: 00:34:02
    - -: Exercise follow-up
    - 00:35:42: Command line argument parsing with sys.argv (demo)
    - 00:42:44: Other parsers (argparse demo)
    - 00:44:57: Exercise 2 intro (argparse)
    - end: 00:46:17
    - start: 01:01:32
    - -: Summary, Discussion of where we are with command-line argument usage
    - 01:06:56: Configuration files
    - end: 01:08:21


##- output: day3.3-scipy.mkv
##  title: 3.3 Scipy
##  description: >-
##
##    Scipy is a Python interface to a large amount of useful code, a
##    lot of it written in C or Fortran.  Here, we can't really try to
##    teach everything about it, but we provide some discussions and
##    examples.
##
##    https://aaltoscicomp.github.io/python-for-scicomp/scipy/
##
##  editlist:
##    - start: 1:32:57
##    - 1:34:50: What is scipy?
##    - 1:36:30: Introduction to exercises
##    - end: 1:38:03
##    - start: 1:52:40
##    - -: Post-exercise discussion
##    - end: 1:56:40


- output: day3.3-libraries.mkv
  title: 3.3 Libraries
  description: >-

    Your code doesn't exist alone.  It is one part of a large
    ecosystem, where many other things exist for you to build off of.
    This is (more than anything) a discussion about the broader
    ecosystem, what you would want to build off of, and what you can
    do to make your code reusable.

    https://aaltoscicomp.github.io/python-for-scicomp/libraries/

  editlist:
    - start: 01:19:13
    - -:  Motivation and introduction
    - 01:25:13: Glossary
    - 01:28:37: The SciPy ecosystem
    - 01:31:27: Connecting Python to other languages
    - 01:33:34: How can you tell if you should use some library?
#    - 2:06:58: Making your work reuseable
#    - : Discussion based on exercise (evaluating packages)
#    - 2:07:55: cython
#    - 2:09:10: "Q&A: building a package, dependency mismatches"
    - end: 01:37:01


- output: day3.4-dependencies.mkv
  title: 3.4 Dependencies
  description: >-

    Dependency management with environments and requirement files in
    Python.

    When you have projects that depend on other libraries, you need
    some way of recording and managing these.  Here, we learn of the
    basic concepts, how to record dependencies (requirements.txt,
    environment.yml), and how to use the virtual environments/conda
    environments.

    https://aaltoscicomp.github.io/python-for-scicomp/dependencies/

  editlist:
    - start: 01:37:14
    - -: About dependency management
    - 01:38:18: Python Package Index and Anaconda, pip vs conda, and more.
    - 01:51:21: Creating isolated environments
    - 01:55:27: Recording dependencies (requirements.txt and environment.yml)
    - 02:03:43: 'Exercise 4 (as demo): freezing an environment'
    - 02:15:56: mamba (since previous attempt was slow)
    - 02:17:19: Activating environments
    - 02:23:55: Q&A
    - end: 02:28:53


- output: day3.5-binder.mkv
  title: 3.5 Binder
  description: >-

    A demo of the Binder service.

    Binder (mybinder.org) is a cloud service for running Jupyter
    in a reproducible software environment.  It uses requirements
    files in various languages (requirements.txt, environment.yml, and
    similar for other languages) to create an environment out of a
    repository (Github, Gitlab, Zenodo).

    https://aaltoscicomp.github.io/python-for-scicomp/binder/

  editlist:
    - start: 02:40:10
    - -: Why is it sometimes not enough to share your code?
    - 02:45:26: Demo of binder (begin)
    - 02:46:13: Getting the notebook
    - 02:46:48: Making a git repository (Github web interface)
    - 02:49:34: Adding requirements to the repository
    - 02:50:38: Making the binder link
    - 02:52:21: Launching on Binder (this it takes a long time)
    - 02:58:58: Getting a DOI using Zenodo
    - 03:06:54: Wrap-up discussion
    - 03:08:34: Why was Binder slow this time?
    - 03:09:19: Binder is starting
    - stop: 03:11:06


- output: day3.6-outro.mkv
  title: 3.6 Outro of day 3
  description: >-

    Outro of day 3 - general discussion about the course.

  editlist:
    - start: 03:11:06
    - -: 'Q&A and summary of the day: why did we do this?'
    - end: 03:20:36





## Day 4
- input: raw/day4-obs.mkv

- output: day4.1-icebreaker.mkv
  title: 4.1 Icebreaker
  description: >-
    The icebreaker/intro session of the day  You probably don't want
    to watch this and instead will go to the main material.

  editlist:
    - start: 00:03:09
    - end: 00:12:37


- output: day4.2-parallel.mkv
  title: 4.2 Parallel
  description: >-

    Parallel programming: doing more than one thing at a time.  It is
    often needed when you need more computer power, and there are a
    variety of ways to do it.  We don't go much into depth, but we do
    tell the basics.

    https://aaltoscicomp.github.io/python-for-scicomp/parallel/

  editlist:
    - start: 00:12:53
    - 00:14:00: Modes of parallelism
    - 00:15:49: Parallel paradigms (embarrassingly, shared memory, message passing)
    - 00:21:13: "Python's global interpreter lock (GIL)"
    - 00:24:31: Python's multiprocessing module
#    - 2:35:10: Message Passing Interface (MPI) in Python
    - 00:24:45: Multiprocessing
    - 00:30:16: Exercise 1 introduction (multiprocessing)
    - end: 00:31:27
    - start: 00:45:55
    - -: Configuring the parallelism
    - 00:48:20: Exercise 1 discussion
    - 00:50:44: MPI (discussion + example)
    - 00:58:54: Coupling to other languages
    - 01:00:59: Dask
    - 01:02:10: 'Summary/Q&A of Parallel'
    - end: 01:11:38


- output: day4.3-packaging.mkv
  title: 4.3 Packaging
  description: >-

    How to package and distribute software you write.

    After you create code, what comes next: how do you distribute it?
    Here, we discuss how to package and distribute your work via
    pyproject.toml and the Python Package Index and other things.

    https://aaltoscicomp.github.io/python-for-scicomp/packaging/

  editlist:
    - start: 01:21:39
    - 01:21:48: What is packaging?  How do you distribute code?
    - 01:23:11: Organizing Python projects / Creating a new sample project
    - 01:28:51: Adding __init__.py to make it a package
    - 01:33:12: Making it installable with pyproject.toml
    - 01:35:37: Exercise 1 introduction
    - end: 01:36:22
    - start: 01:51:09
    - -: Sharing packages via PyPI
    - 01:58:30: "Wrap-up, Q&A"
    - end: 02:00:20



- output: day4.4-web-apis.mkv
  title: 4.4 Web APIs
  description: >-
    Often, you need to collect your own data - and often, that data is
    online somewhere, and you need to write a program to fetch it.
    This talks about the general idea of a web server and making
    requests to it and uses the Python "requests" library to demonstrate
    some sample requests.  We also discuss the big picture, such as
    when you would want to do this and the security and ethical
    considerations.

    https://aaltoscicomp.github.io/python-for-scicomp/web-apis/

  editlist:
    - start: 02:10:46
    - -: What's a web server?  What's an API?
    - 02:13:42: Requests (the Python library)
    - 02:15:49: "Demo: requests from a sample API"
    - 02:23:25: Exercises
    - stop: 02:24:35
    - start: 02:33:33
    - -: "A bit more, Q&A and summary"
    - stop: 02:41:51



- output: day4.5-paneldiscussion.mkv
  title: 4.5 Panel discussion
  description: >-

    At the end of the course, we had a general panel discussion/Q&A
    session with all of these instructions.  We discuss many
    interesting topics.

    See the notes for all the questions asked, which are findable by
    the course page:
    https://scicomp.aalto.fi/training/scip/python-for-scicomp-2023/

  editlist:
    - start: 02:41:51
    - end: 03:04:23


- output: day4.6-outro.mkv
  title: 4.6 Outro
  description: >-

    The conclusion of the workshop, looking at feedback, some final
    discussion.

  editlist:
    - start: 03:04:23
    - end: 03:11:42
