1
00:00:00,000 --> 00:00:06,620
later or find us, talk to us later. Next up is a session that's about Conda. I guess the

2
00:00:06,620 --> 00:00:18,380
instructors seem like they're here in the room, so you can start appearing. So this session,

3
00:00:18,380 --> 00:00:26,960
So, you may know of Conda as a way to install Python packages.

4
00:00:26,960 --> 00:00:28,380
But it's a lot more than that.

5
00:00:28,380 --> 00:00:36,260
It's also a way to install R packages and other compiled code kind of stuff.

6
00:00:36,260 --> 00:00:41,220
And we have a running joke in our Garage session.

7
00:00:41,220 --> 00:00:42,220
It's day's-

8
00:00:42,220 --> 00:00:43,220
Okay, now you're just doing my intro.

9
00:00:43,220 --> 00:00:44,220
Okay.

10
00:00:44,220 --> 00:00:45,220
Go ahead.

11
00:00:45,220 --> 00:00:46,220
I'll let you do your intro to that.

12
00:00:46,220 --> 00:00:53,420
I mean, yeah, we have the running joke. Days since there was a Conda question in the garage.

13
00:00:55,340 --> 00:00:59,660
Okay, how was I going to go? Yeah, it is always zero.

14
00:01:01,660 --> 00:01:07,500
But that means two things. One, Conda's pretty important for installing software because it's

15
00:01:07,500 --> 00:01:15,260
the best way to manage Python and compile the scientific software on a cluster.

16
00:01:15,260 --> 00:01:18,900
And two, it's harder than it should be.

17
00:01:18,900 --> 00:01:21,300
Or maybe it's as hard as it needs to be.

18
00:01:21,300 --> 00:01:24,500
It's just that it's actually a hard problem.

19
00:01:24,500 --> 00:01:32,540
So us as cluster admins before the RSE things started,

20
00:01:32,540 --> 00:01:34,340
the software installation probably

21
00:01:34,340 --> 00:01:37,100
took up most of our time.

22
00:01:37,100 --> 00:01:39,100
Took up most of our time.

23
00:01:39,100 --> 00:01:44,940
And yeah, so where was this going?

24
00:01:44,940 --> 00:01:50,380
Yeah, software installation is quite a difficult thing.

25
00:01:50,380 --> 00:01:55,620
And now, lucky you, you get to learn one way of handling it.

26
00:01:55,620 --> 00:01:58,260
So maybe I'll just go and let [name] and you

27
00:01:58,260 --> 00:01:59,220
do their introduction.

28
00:01:59,220 --> 00:02:01,460
So see you later.

29
00:02:01,460 --> 00:02:02,540
All right.

30
00:02:02,540 --> 00:02:04,140
Bye.

31
00:02:04,140 --> 00:02:05,140
Yeah.

32
00:02:05,140 --> 00:02:09,100
So I mean, my starting intro was going

33
00:02:09,100 --> 00:02:11,340
to be that joke specifically.

34
00:02:11,340 --> 00:02:15,620
So yeah, day since we've had a question about Conda

35
00:02:15,620 --> 00:02:19,620
is always zero because Conda is very useful

36
00:02:19,620 --> 00:02:23,660
and you also run into complicated problems.

37
00:02:23,660 --> 00:02:28,660
But if you then include the kinds of questions

38
00:02:29,420 --> 00:02:33,900
where it's about installing some software

39
00:02:33,900 --> 00:02:35,900
or problems installing some software

40
00:02:35,900 --> 00:02:38,420
and the solution is Conda,

41
00:02:38,420 --> 00:02:40,060
well, you get even more of those questions.

42
00:02:40,060 --> 00:02:44,140
It's basically like a half of the questions

43
00:02:44,140 --> 00:02:45,300
or something like that.

44
00:02:47,060 --> 00:02:51,020
So yeah, what is Conda?

45
00:02:51,020 --> 00:02:52,400
I can be honest.

46
00:02:52,400 --> 00:02:55,060
The name of this page that I'm sharing

47
00:02:55,060 --> 00:02:57,020
is Python environments with Conda.

48
00:02:57,020 --> 00:03:00,480
And that's also linked to in the notes page.

49
00:03:01,380 --> 00:03:03,940
But Conda is not just about Python installations.

50
00:03:03,940 --> 00:03:07,820
It's a very general dependency manager.

51
00:03:07,820 --> 00:03:12,500
So to install a specific piece of software,

52
00:03:12,500 --> 00:03:14,660
you have a bunch of dependencies

53
00:03:14,660 --> 00:03:15,860
that need to be installed as well.

54
00:03:15,860 --> 00:03:18,380
So this could be a system,

55
00:03:18,380 --> 00:03:21,220
or what would normally on your own desktop laptop

56
00:03:21,220 --> 00:03:22,860
be system libraries

57
00:03:22,860 --> 00:03:25,900
and specific versions of those system libraries.

58
00:03:25,900 --> 00:03:27,300
You can install those with Conda

59
00:03:27,300 --> 00:03:29,500
and then get the software to work.

60
00:03:29,500 --> 00:03:33,660
And it's also useful for separating between projects

61
00:03:33,660 --> 00:03:34,780
because different projects

62
00:03:34,780 --> 00:03:41,500
might need a different version of some library. Often they're not designed to exist at the same

63
00:03:41,500 --> 00:03:48,700
time, but Conda takes care of that as well. So it is very useful. It also does have some problems,

64
00:03:48,700 --> 00:03:53,340
especially when used with Python on some HPC systems. So we'll come to that later.

65
00:03:54,140 --> 00:04:01,580
But yeah, I guess one important point about HPC specifically is that it's always a shared system.

66
00:04:01,580 --> 00:04:14,580
So installing all the software that everybody using it needs on the system level would get very complicated very quickly.

67
00:04:14,580 --> 00:04:27,580
And that's where conda helps. It allows you to install software that you need that maybe not everybody else needs.

68
00:04:27,580 --> 00:04:35,580
Okay. I mean, I did not introduce myself or you. Do you want to introduce yourself?

69
00:04:39,580 --> 00:04:46,580
Yeah, my name is [name]. I'm also one of the RSEs. I'm very happy to be here today.

70
00:04:47,580 --> 00:04:52,580
And I'm [name]. I'm also an RSE here in Aalto.

71
00:04:52,580 --> 00:05:05,700
Okay. So, let's get started. So, yeah, I mean, Conda is actually language agnostic. There's

72
00:05:05,700 --> 00:05:12,180
nothing specific to Python. We use it often to handle Python environments. An environment

73
00:05:12,180 --> 00:05:20,860
is, so an environment is when you have this certain set of dependencies for a specific

74
00:05:20,860 --> 00:05:24,860
project and you can have a different environment for a different project.

75
00:05:24,860 --> 00:05:30,220
So you can have a completely different set of libraries for a different project.

76
00:05:31,180 --> 00:05:35,980
So it's a very general solution for handling software environments.

77
00:05:37,580 --> 00:05:43,900
And actually yeah we use Mamba most of the time. Mamba is a replacement for Conda that's just

78
00:05:43,900 --> 00:05:51,420
faster. It uses a different algorithm on the background. But it's essentially the same thing,

79
00:05:51,420 --> 00:06:01,740
a very small difference. So let's actually go to the terminal and get started. And there's some,

80
00:06:03,420 --> 00:06:12,220
well, we load a module called Mamba. Module is its own kind of, it's a system level way of handling

81
00:06:12,220 --> 00:06:18,140
the fact that people need different software. There will be a separate section on the module

82
00:06:18,140 --> 00:06:24,220
system later in this course, so I will not explain that much of it, except that I will show you.

83
00:06:26,060 --> 00:06:31,260
If I try to run Mamba, it does not exist. I am on Triton, we do have Mamba,

84
00:06:31,260 --> 00:06:35,100
but I do need to run module load Mamba in order to get access to it.

85
00:06:36,460 --> 00:06:41,260
And now I have Mamba. Oh, it printed a long, long list of commands you can run.

86
00:06:42,220 --> 00:06:45,500
but it did work, so the command is found.

87
00:06:47,020 --> 00:06:50,060
And then we have this initial setup.

88
00:06:50,060 --> 00:06:52,220
This is very much Aalto-specific.

89
00:06:52,220 --> 00:06:57,220
It's something you probably should not run on other systems,

90
00:06:59,020 --> 00:07:00,840
but it's here in the documentation.

91
00:07:00,840 --> 00:07:03,420
And if you are on Triton, you should run it.

92
00:07:03,420 --> 00:07:06,280
So if you're not on Triton, ask,

93
00:07:07,300 --> 00:07:10,140
and probably don't just take our Aldo instruction

94
00:07:10,140 --> 00:07:11,980
or Triton instructions directly.

95
00:07:12,220 --> 00:07:17,220
Okay, and that's the first time set up.

96
00:07:18,220 --> 00:07:20,780
Oh, there was one thing I was going to talk about

97
00:07:20,780 --> 00:07:24,480
before going to an example here.

98
00:07:24,480 --> 00:07:26,660
So about conda channels.

99
00:07:26,660 --> 00:07:31,060
Channels are where conda pulls the software.

100
00:07:31,060 --> 00:07:36,060
So they store a bunch of these libraries, binary packages,

101
00:07:37,500 --> 00:07:41,420
and allow you to install them into your environment.

102
00:07:41,420 --> 00:07:45,380
So there are many options.

103
00:07:45,380 --> 00:07:47,900
conda-forge is probably the biggest one

104
00:07:47,900 --> 00:07:51,020
and you almost always want to include it.

105
00:07:51,020 --> 00:07:53,580
It has a lot of packages and it's,

106
00:07:56,780 --> 00:08:01,780
well, the licensing is good for research.

107
00:08:02,280 --> 00:08:03,700
It's mostly open source

108
00:08:05,380 --> 00:08:07,700
and the channel itself is open source.

109
00:08:07,700 --> 00:08:10,100
So it's very useful.

110
00:08:11,420 --> 00:08:22,420
There's also the default channel, which is maintained by Anaconda Inc., who also maintains the conda command itself.

111
00:08:22,420 --> 00:08:31,420
There's licensing issues though, so you mostly want to exclude it.

112
00:08:31,420 --> 00:08:38,420
And if you do want to include it, it's a specific case and you know what you're doing.

113
00:08:38,420 --> 00:08:46,860
Okay, there's also Bioconda, for example, okay, Bioconda has specifically bioinformatics

114
00:08:46,860 --> 00:08:47,860
packages.

115
00:08:47,860 --> 00:08:55,380
It's a separate place for those and if you are in bioinformatics, then you will often

116
00:08:55,380 --> 00:08:56,700
end up using it.

117
00:08:56,700 --> 00:09:01,980
PyTorch, the channel doesn't exist anymore and I should have deleted that line, but I

118
00:09:01,980 --> 00:09:03,460
didn't notice that it was there.

119
00:09:03,460 --> 00:09:12,340
So we will demonstrate installing PyTorch for machine learning later from CondaForge.

120
00:09:12,340 --> 00:09:17,540
Okay.

121
00:09:17,540 --> 00:09:28,060
So I will do a quick example of creating an environment with R. This page is about Python,

122
00:09:28,060 --> 00:09:32,380
but you can also install R and R packages there.

123
00:09:35,300 --> 00:09:38,180
Or any questions?

124
00:09:38,180 --> 00:09:39,920
Anything before we delve in?

125
00:09:41,900 --> 00:09:43,700
I have a question, actually.

126
00:09:43,700 --> 00:09:44,820
Yeah.

127
00:09:44,820 --> 00:09:48,300
How to exclude the defaults from the channel,

128
00:09:48,300 --> 00:09:53,300
from the conda config or from the YAML file?

129
00:09:54,580 --> 00:09:56,940
I always use the YAML files,

130
00:09:56,940 --> 00:10:01,940
And I guess, well, let's make a YAML file.

131
00:10:01,940 --> 00:10:04,500
I mean, so yeah, I always use the YAML files instead

132
00:10:04,500 --> 00:10:09,660
of the config, because the file, essentially,

133
00:10:09,660 --> 00:10:14,260
you can have it with the code and with the whatever version

134
00:10:14,260 --> 00:10:18,060
that you've been running that has produced a specific result,

135
00:10:18,060 --> 00:10:19,300
specific.

136
00:10:19,300 --> 00:10:21,720
You can include it with your paper, basically.

137
00:10:21,720 --> 00:10:26,380
So everybody can reproduce the same thing.

138
00:10:26,380 --> 00:10:29,980
So if you push it to a GitHub repo, it will be there?

139
00:10:30,700 --> 00:10:30,860
Yeah.

140
00:10:30,860 --> 00:10:32,700
Then everyone can reproduce?

141
00:10:32,700 --> 00:10:33,020
Yeah.

142
00:10:33,020 --> 00:10:33,500
That's good.

143
00:10:36,860 --> 00:10:37,260
Yeah.

144
00:10:37,260 --> 00:10:48,140
Was there anything else about environments and managing software in general?

145
00:10:48,140 --> 00:10:51,020
I guess we can come back to any questions if there's there.

146
00:10:51,020 --> 00:10:59,260
there. Left side of my terminal is slightly off screen. So now it should be on the screen,

147
00:10:59,260 --> 00:11:10,980
I think. Okay. Okay. So in order to create an environment, my workflow and workflow I

148
00:11:10,980 --> 00:11:18,020
generally recommend is to create a YAML file. So let's make, I use a Vim to edit the file.

149
00:11:18,020 --> 00:11:31,140
can use nano or whichever you want. I'm creating a file called tidyverse.yml or yaml and this will

150
00:11:31,140 --> 00:11:37,140
describe the entire software environment for my project. So first name for the environment

151
00:11:37,860 --> 00:11:45,140
and I will call it tidyverse. Tidyverse is an R package or an R, well it is a single package

152
00:11:45,140 --> 00:11:50,020
but it contains a lot of useful things.

153
00:11:50,740 --> 00:11:55,300
Then I will describe the channels. So this is a list of channels that

154
00:11:55,300 --> 00:12:00,260
Mamba or Conda is allowed to use to construct this environment.

155
00:12:00,260 --> 00:12:07,860
I will say Conda Forge. That's the only one I need for this one.

156
00:12:07,860 --> 00:12:13,220
Okay and then dependencies. So this is the list of software we actually need

157
00:12:13,220 --> 00:12:23,060
and I will only specify one, r-tidyverse. So because this r-tidyverse depends on r,

158
00:12:23,060 --> 00:12:31,300
we will also get r, the entire programming language ecosystem, into this environment

159
00:12:31,300 --> 00:12:36,260
and it will automatically have a version that supports whatever version of r-tidyverse it

160
00:12:37,300 --> 00:12:42,900
pulls up. You could specify a specific version. I don't actually know what versions

161
00:12:42,900 --> 00:12:47,460
exist though so let me not just do that.

162
00:12:47,860 --> 00:12:54,580
Okay and then I'm saving the file so have it on the screen. Let's cat it.

163
00:12:54,580 --> 00:12:59,060
So this is what the file looks like although very quickly

164
00:12:59,060 --> 00:13:02,420
it will actually disappear off the screen when I run

165
00:13:02,420 --> 00:13:07,700
the next command. So we can do mamba. I actually did not write down the

166
00:13:07,700 --> 00:13:14,900
command. So let's see if I get it right. Mamba env for environment, create,

167
00:13:16,500 --> 00:13:26,340
`-f`, f stands for file, and tidyverse. Okay, so now it's looking for first tidyverse

168
00:13:27,140 --> 00:13:33,380
in ContaForge and then it looks for possible dependencies. It's

169
00:13:33,380 --> 00:13:36,500
It's taking a while before printing again.

170
00:13:36,500 --> 00:13:37,780
OK, here we go.

171
00:13:37,780 --> 00:13:39,180
So it found a bunch of stuff.

172
00:13:42,540 --> 00:13:47,660
If I had one more character width on the display,

173
00:13:47,660 --> 00:13:51,620
it wouldn't break the lines, but that's fine.

174
00:13:51,620 --> 00:13:54,380
So yeah, it takes a while to download all of this.

175
00:13:54,380 --> 00:13:57,460
Tidyverse is relatively small, so it doesn't take that long.

176
00:13:57,460 --> 00:13:58,380
That's why I chose it.

177
00:13:58,380 --> 00:14:02,340
But it takes a while to get all of the system libraries,

178
00:14:02,340 --> 00:14:08,420
like X-Org, the window manager, graphics manager,

179
00:14:08,420 --> 00:14:12,820
display manager for Linux, and a lot of other stuff.

180
00:14:16,460 --> 00:14:22,820
FontConfig and GNU, C libraries, all sorts of stuff.

181
00:14:22,820 --> 00:14:23,320
OK.

182
00:14:26,140 --> 00:14:29,260
So it is essentially constructing an entire software

183
00:14:29,260 --> 00:14:32,180
environment.

184
00:14:32,180 --> 00:14:41,140
me oh okay it's done then i will not yet take a look at the um the chat uh the notes

185
00:14:41,780 --> 00:14:48,260
okay yeah there's a question uh asking us to clean the terminal so that they can see the

186
00:14:48,260 --> 00:14:56,660
commands on top so maybe move the terminal a bit upper or clean the terminal so um i guess

187
00:14:56,660 --> 00:15:03,140
does it mean that they cannot see the lowest line? Yes, I think that's the problem. Okay,

188
00:15:03,140 --> 00:15:08,740
you can move it up a little bit. Maybe that's it. Maybe run clear.

189
00:15:10,900 --> 00:15:17,220
So, I want to comment on the text that is showing here. So, because in a lot of systems,

190
00:15:17,220 --> 00:15:23,380
you actually do not want to run this command. On Triton, you do not want to run this command.

191
00:15:23,380 --> 00:15:35,540
So, instead, we use source activate tidyverse.

192
00:15:35,540 --> 00:15:38,080
But okay, let me clear the terminal first.

193
00:15:38,080 --> 00:15:43,880
The reason that we don't want to run this command is that it requires you to modify

194
00:15:43,880 --> 00:15:46,760
the shell environment in some way.

195
00:15:46,760 --> 00:15:49,560
You need to run this mamba init command.

196
00:15:49,560 --> 00:15:57,400
will tell you to run it if you run this mamba activate. So we want to avoid that to avoid

197
00:15:58,040 --> 00:16:10,360
complicating things even more. So instead we run not mamba activate but source activate tidyverse.

198
00:16:10,360 --> 00:16:21,360
Okay, so now it's showing that this particular environment is active and since I have it

199
00:16:21,360 --> 00:16:29,880
active now, I have for example the R script command.

200
00:16:29,880 --> 00:16:36,920
So let's make a HelloTidy.r, an R script.

201
00:16:41,320 --> 00:16:45,240
If I was using a graphical system,

202
00:16:45,240 --> 00:16:48,840
I could also run RStudio, for example.

203
00:16:48,840 --> 00:16:51,840
OK, I'm not going to explain that much about what

204
00:16:51,840 --> 00:16:53,000
is happening in this script.

205
00:16:53,000 --> 00:16:55,360
But maybe I should say it will check

206
00:16:55,360 --> 00:16:58,520
if I actually have Tidyverse.

207
00:16:58,520 --> 00:17:06,120
and then it will tell me and it will say tidyverse could not be loaded or dplyr could not be loaded.

208
00:17:09,080 --> 00:17:13,480
So I can use our script to run hello tidy

209
00:17:14,520 --> 00:17:18,040
and it should report that the tidyverse library is available.

210
00:17:18,040 --> 00:17:25,040
Okay, and there were some conflicts that became errors.

211
00:17:25,040 --> 00:17:29,040
It loaded successfully, though.

212
00:17:29,040 --> 00:17:34,040
I do not know enough about R to actually know if this is a problem or not.

213
00:17:34,040 --> 00:17:38,040
Probably not a huge problem.

214
00:17:38,040 --> 00:17:41,040
Okay.

215
00:17:41,040 --> 00:17:46,040
So, yeah, that's the point of this demonstration, though, is to show you how to

216
00:17:46,040 --> 00:17:50,280
to record the dependencies in a YAML file,

217
00:17:50,280 --> 00:17:59,800
and also to show you that this is not just for Python,

218
00:17:59,800 --> 00:18:03,880
that you can install a lot of other things as well.

219
00:18:03,880 --> 00:18:05,500
The next thing, though, will be Python,

220
00:18:05,500 --> 00:18:09,120
because it will be how to set up an environment

221
00:18:09,120 --> 00:18:10,320
for a large language model.

222
00:18:13,120 --> 00:18:14,440
How are we doing on time?

223
00:18:16,040 --> 00:18:18,040
Not bad.

224
00:18:20,040 --> 00:18:22,040
Okay, so

225
00:18:24,040 --> 00:18:26,040
next

226
00:18:26,040 --> 00:18:28,040
I have a section

227
00:18:28,040 --> 00:18:30,040
about why you should track

228
00:18:30,040 --> 00:18:32,040
dependencies, which we actually

229
00:18:32,040 --> 00:18:34,040
did touch on a little bit.

230
00:18:34,040 --> 00:18:36,040
So maybe

231
00:18:36,040 --> 00:18:38,040
at this point, do we have any questions

232
00:18:38,040 --> 00:18:40,040
in the notes?

233
00:18:42,040 --> 00:18:44,040
Or do you have

234
00:18:44,040 --> 00:18:50,680
have other questions just in general? There's a question about how do I exit the environment

235
00:18:50,680 --> 00:18:59,480
tab? I think that's asking about the deactivation. Yes, so now I still have the tidyverse environment

236
00:18:59,480 --> 00:19:10,440
active and that means I do have for example rscript. Version of rscript is yes. So to exit I

237
00:19:10,440 --> 00:19:14,840
could run source deactivate.

238
00:19:16,600 --> 00:19:22,120
Okay. It will complain about the source activate, source deactivate

239
00:19:22,120 --> 00:19:28,520
thing but I do not want to like change the environment to run mamba

240
00:19:28,520 --> 00:19:31,960
activate and mamba deactivate so this is fine.

241
00:19:31,960 --> 00:19:36,200
Now if I try to run our script

242
00:19:36,200 --> 00:19:44,920
version. It will not find R script. So now I'm outside the environment. I don't have

243
00:19:44,920 --> 00:19:52,600
R anymore and I don't have the libraries. Okay.

244
00:19:52,600 --> 00:20:07,800
Okay, there's another question about, it's kind of like a Python 3.0, I suppose it's

245
00:20:07,800 --> 00:20:15,040
asking the Python's own virtualenv and how it's different from Conda.

246
00:20:15,040 --> 00:20:22,680
Yeah, so, oh, so I guess like venv or venv comes with Python 3.

247
00:20:22,680 --> 00:20:23,680
Yeah.

248
00:20:23,680 --> 00:20:27,800
So, yeah, there's plenty of different environment managers.

249
00:20:27,800 --> 00:20:32,640
The Python 3 venv thing is designed for Python specifically.

250
00:20:32,640 --> 00:20:38,240
It can install Python packages.

251
00:20:38,240 --> 00:20:43,200
So it cannot install system level packages.

252
00:20:43,200 --> 00:20:45,000
it cannot install R for you.

253
00:20:45,000 --> 00:20:49,080
So Conda is more general.

254
00:20:49,080 --> 00:20:51,440
It's not just for Python, and it can install

255
00:20:51,440 --> 00:20:56,400
some system-level things.

256
00:20:56,400 --> 00:20:59,640
So for example, we'll soon install an environment

257
00:20:59,640 --> 00:21:03,920
that has CUDA in it without you needing

258
00:21:03,920 --> 00:21:07,360
to set it up for your system in the same way.

259
00:21:07,360 --> 00:21:15,520
Yeah, I think maybe it's the time to go to the next question.

260
00:21:15,520 --> 00:21:22,080
But there is also a question about the CSC thing.

261
00:21:22,080 --> 00:21:27,400
The background of this is that Conda creates a lot of files in the environment, especially

262
00:21:27,400 --> 00:21:30,860
if you install Python packages, it can be millions of files.

263
00:21:30,860 --> 00:21:35,420
And this is often bad on an HPC system.

264
00:21:35,420 --> 00:21:42,700
So if you want to use Conda to manage environments,

265
00:21:42,700 --> 00:21:45,980
there is this solution from CSC called

266
00:21:45,980 --> 00:21:49,540
Tykky, the container wrapper.

267
00:21:49,540 --> 00:21:52,920
So it can create something very much like a Conda environment

268
00:21:52,920 --> 00:21:53,420
for you.

269
00:21:53,420 --> 00:21:55,100
It is actually a Conda environment,

270
00:21:55,100 --> 00:21:59,660
but wrapped into a single file that is a container.

271
00:21:59,660 --> 00:22:05,060
So you can read up about it in here.

272
00:22:05,060 --> 00:22:09,700
And yes, there is a link to it already in the notes.

273
00:22:09,700 --> 00:22:12,700
So most of the things I say apply,

274
00:22:12,700 --> 00:22:15,980
but the commands are different.

275
00:22:15,980 --> 00:22:18,260
And this is probably true on a lot of systems.

276
00:22:18,260 --> 00:22:22,820
So yeah, if you're using a different system,

277
00:22:22,820 --> 00:22:27,100
you do need to figure out how to do this in your system.

278
00:22:27,100 --> 00:22:30,940
Maybe there is even a different manager.

279
00:22:30,940 --> 00:22:32,700
OK.

280
00:22:32,700 --> 00:22:34,580
But yeah, so let's move on.

281
00:22:36,460 --> 00:22:41,460
Okay, so we already mentioned,

282
00:22:45,540 --> 00:22:48,940
talked about how using a Conda environment,

283
00:22:48,940 --> 00:22:52,940
so using a file like this inside your code

284
00:22:52,940 --> 00:22:57,940
makes your code and your research more reproducible.

285
00:22:57,940 --> 00:23:05,220
reproducible. So you can track the entire environment, your entire coding environment,

286
00:23:05,220 --> 00:23:16,580
in a single file. And then you can include it either with your code or with your data,

287
00:23:16,580 --> 00:23:21,700
for example. So if you publish a bunch of data, you can include some software to

288
00:23:21,700 --> 00:23:29,580
to analyze the data and you can include a file that describes the entire environment

289
00:23:29,580 --> 00:23:35,700
that you use to analyze the data so that it is way more reproducible.

290
00:23:35,700 --> 00:23:43,900
People can install your environment and run your code and get the results from your data.

291
00:23:43,900 --> 00:23:49,180
It also helps with debugging, so you will get a lot less of the it works on my machine

292
00:23:49,180 --> 00:23:55,500
problem when other people can reproduce the same environment that you have and it allows version

293
00:23:55,500 --> 00:24:02,300
controlling so if you are doing some heavy software development you are probably hopefully

294
00:24:02,300 --> 00:24:09,420
using version control with your software and you can also conversion your environments so you can

295
00:24:09,420 --> 00:24:16,300
create different versions for different versions of the software so it is it's very useful in for

296
00:24:16,300 --> 00:24:24,620
yourself it also it is very useful for helping your teammates your people in your research group

297
00:24:25,180 --> 00:24:31,420
set up the same environment and run the same code so you can give them the file and give them these

298
00:24:31,420 --> 00:24:37,180
two three commands and they will be able to they will have the same software environment as you do

299
00:24:37,180 --> 00:24:39,740
it also works across different operating systems

300
00:24:39,740 --> 00:24:44,320
with some caveats.

301
00:24:44,320 --> 00:24:46,840
So Windows might require different versions

302
00:24:46,840 --> 00:24:47,760
of system libraries,

303
00:24:47,760 --> 00:24:50,360
but if you don't specify exact versions,

304
00:24:50,360 --> 00:24:52,400
they will mostly figure out to you

305
00:24:52,400 --> 00:24:53,800
how to use the correct ones.

306
00:24:59,440 --> 00:25:00,320
Yes.

307
00:25:00,320 --> 00:25:04,600
So it also helps with a lot of this Python dependency

308
00:25:04,600 --> 00:25:06,200
problems and especially problems

309
00:25:06,200 --> 00:25:08,080
where you need multiple different versions

310
00:25:08,080 --> 00:25:10,680
of the same package for different versions

311
00:25:10,680 --> 00:25:13,080
of your software, different projects.

312
00:25:13,080 --> 00:25:15,360
So those are the main points

313
00:25:15,360 --> 00:25:17,680
for why to use conda in general,

314
00:25:17,680 --> 00:25:22,080
or why to use software environments in general.

315
00:25:22,080 --> 00:25:23,880
It becomes very,

316
00:25:26,860 --> 00:25:28,660
it becomes an especially useful thing

317
00:25:28,660 --> 00:25:31,040
if you have multiple projects running

318
00:25:31,040 --> 00:25:32,880
at the same time with different code.

319
00:25:35,400 --> 00:25:36,560
Okay.

320
00:25:36,560 --> 00:25:42,240
So there's one more thing that I want to mention about practically how to use this.

321
00:25:45,200 --> 00:25:48,000
So we have it somewhere. There are some

322
00:25:49,760 --> 00:25:52,880
a list of useful commands that I could also demonstrate while we go.

323
00:25:53,520 --> 00:25:58,800
So I still have mamba and now that I have an environment I can run.

324
00:25:58,800 --> 00:26:08,040
one more. I was not in an environment. I exited the main. So, okay. If you're in an environment,

325
00:26:08,040 --> 00:26:15,560
you can list. So, let's activate the environment. High diverse. Source activate high diverse.

326
00:26:15,560 --> 00:26:24,640
And let's try. So, you can list all of the packages that are in the environment for additional

327
00:26:24,640 --> 00:26:27,120
reproducibility to make it extra clear what's in,

328
00:26:27,120 --> 00:26:28,760
and then to check to do some debugging

329
00:26:28,760 --> 00:26:31,640
on what is installed in your system, in your environment.

330
00:26:32,920 --> 00:26:35,760
Okay, you can also remove an environment,

331
00:26:35,760 --> 00:26:40,440
but really with this,

332
00:26:40,440 --> 00:26:42,920
which is necessary and useful occasionally,

333
00:26:42,920 --> 00:26:44,840
cleaning the cache is necessary

334
00:26:44,840 --> 00:26:46,960
if you run out of disk space.

335
00:26:46,960 --> 00:26:49,640
But the main thing that I want to highlight

336
00:26:49,640 --> 00:26:51,760
is how to update an environment.

337
00:26:51,760 --> 00:26:57,840
So you can install a package directly into the environment that already exists,

338
00:26:57,840 --> 00:27:04,480
but what I would do essentially always is I have this idverse.yaml file

339
00:27:05,920 --> 00:27:08,320
is to edit the file. So what should I add?

340
00:27:12,320 --> 00:27:16,800
I have R already but I can add it explicitly as a dependency and I could specify a version

341
00:27:16,800 --> 00:27:25,920
for example. So let's see. So now I can run mamba-env-update and then use

342
00:27:26,880 --> 00:27:31,120
`-f` or `--file` and the environment file.

343
00:27:34,240 --> 00:27:40,640
So let's see if it works when I specify the R. I did not specify a R version, I just specified

344
00:27:40,640 --> 00:27:46,080
that I want R. It did install some new packages, which is interesting. Maybe I didn't have the

345
00:27:46,080 --> 00:27:49,600
R command specifically before I just had R script.

346
00:27:49,600 --> 00:27:56,320
Okay, so you can update the environment,

347
00:27:56,320 --> 00:27:59,520
you can add new packages to the environment

348
00:27:59,520 --> 00:28:03,360
and keep track of them in the file as you go, which makes it

349
00:28:03,360 --> 00:28:07,120
makes the file more useful in the long run.

350
00:28:07,120 --> 00:28:12,480
Okay, so here's about setting default channels and like I said I

351
00:28:12,480 --> 00:28:18,640
always use the yaml file to track the channels but you can set default channels in your

352
00:28:20,320 --> 00:28:26,400
conda rc file or in your conda configuration and that can also be useful

353
00:28:29,040 --> 00:28:33,040
okay and that's the motivation for using conda section which essentially we already talked about

354
00:28:33,040 --> 00:28:42,800
So yes. And a section about how to set up environment with CUDA, which we'll be talking

355
00:28:42,800 --> 00:28:51,840
about next. But essentially, I will do this by not that much looking at the documentation,

356
00:28:51,840 --> 00:28:57,920
which you can read yourself, but rather by just creating a new environment. So let's see how it

357
00:28:57,920 --> 00:29:04,800
goes. So, let's create a new environment file. And this time, I want to develop some

358
00:29:06,080 --> 00:29:11,840
language models, large language models with Python and PyTorch.

359
00:29:12,560 --> 00:29:20,000
So, to do that, I will create a new environment. Let's call it PyTorch.yml.

360
00:29:22,720 --> 00:29:25,760
And, again, the environment needs a name.

361
00:29:27,920 --> 00:29:36,800
So I'll call it PyTorch and we'll need to list some channels.

362
00:29:36,800 --> 00:29:45,160
So now we want NVIDIA as one of the channels because this environment will depend on CUDA

363
00:29:45,160 --> 00:29:51,680
and that comes from the NVIDIA channel or some CUDA-related packages come from there.

364
00:29:51,680 --> 00:29:56,560
We'll also want to use conda-forge. That is almost always there.

365
00:29:58,000 --> 00:30:06,080
And then list the dependencies. Dependencies. It is correct, I think. Yes. Okay.

366
00:30:09,840 --> 00:30:14,240
We will definitely need Python, and I want to specify the version of Python,

367
00:30:14,240 --> 00:30:20,000
because if you – it's actually missing a dash here, a minus sign there.

368
00:30:21,760 --> 00:30:26,960
So if you don't specify, it will probably – well, it will first of all try to check all different

369
00:30:26,960 --> 00:30:35,760
Python versions or possible PyTorch packages. And that will take a long time. Not as long as

370
00:30:35,760 --> 00:30:42,480
installing PyTorch, but still. So that's one reason. But also, it will probably actually try

371
00:30:42,480 --> 00:30:51,120
Python 3.13 and then just fail because I think some of the packages don't exist for Python 3.13.

372
00:30:52,160 --> 00:30:57,200
I'm not sure why it doesn't figure it out before it tries to install, but there's something there,

373
00:30:58,880 --> 00:31:02,160
some configuration issue somewhere there in the packages.

374
00:31:04,320 --> 00:31:08,320
Might actually be useful to just demonstrate what a failure looks like, right?

375
00:31:08,320 --> 00:31:16,420
Okay, well, actually, that will come, so let's see.

376
00:31:16,420 --> 00:31:27,520
So we want PyTorch GPU, and I'll just specify larger than 2.6, less than 2.7, mostly just

377
00:31:27,520 --> 00:31:32,920
to show the syntax, but also because I don't remember the exact version.

378
00:31:32,920 --> 00:31:35,680
I didn't write it down in the notes on purpose.

379
00:31:35,680 --> 00:31:44,800
So TorchVision, this is often useful if you are dealing with image models.

380
00:31:44,800 --> 00:31:48,680
Let's do TorchAudio as well.

381
00:31:48,680 --> 00:31:53,780
Just commonly installed in the PyTorch environment, although if I'm using large language models,

382
00:31:53,780 --> 00:31:55,440
maybe I don't need them.

383
00:31:55,440 --> 00:31:58,640
But I do need definitely these transformers.

384
00:31:58,640 --> 00:32:00,080
Okay.

385
00:32:00,080 --> 00:32:06,560
So there's some useful packages for machine learning stuff.

386
00:32:06,560 --> 00:32:12,080
And let's save this file and show what's in there.

387
00:32:12,080 --> 00:32:13,300
Okay.

388
00:32:13,300 --> 00:32:18,940
And then let's see how long it takes to construct the environment.

389
00:32:18,940 --> 00:32:27,060
So mambaenv create and use the PyTorch file.

390
00:32:27,060 --> 00:32:32,740
The first thing it does is it recognizes that I'm on a Linux system. It can also use no-arch

391
00:32:33,380 --> 00:32:41,060
version, so no architecture or system-independent packages, and then it's looking for specifically

392
00:32:41,940 --> 00:32:48,580
system packages and dependencies that work on Linux to get all of these dependencies.

393
00:32:48,580 --> 00:32:58,580
Okay, so we have a critical issue.

394
00:32:58,580 --> 00:33:02,580
I almost transitioned to the nodes, but not quite.

395
00:33:02,580 --> 00:33:09,580
So the problem here is that it doesn't find CUDA.

396
00:33:09,580 --> 00:33:14,580
And it doesn't find CUDA because we don't actually have any GPUs

397
00:33:14,580 --> 00:33:19,420
on the login node.

398
00:33:19,420 --> 00:33:22,900
So there are nodes on Triton that have GPUs,

399
00:33:22,900 --> 00:33:24,900
but on almost any HPC system,

400
00:33:24,900 --> 00:33:27,460
you're not gonna have GPUs on the login node.

401
00:33:27,460 --> 00:33:32,460
So that is confusing, Mamba, yeah.

402
00:33:34,700 --> 00:33:36,860
And it's thinking that you're trying to install

403
00:33:36,860 --> 00:33:39,940
some GPU dependent stuff on a system that doesn't have them.

404
00:33:39,940 --> 00:33:42,540
I mean, technically it is correct about that,

405
00:33:42,540 --> 00:33:45,180
But I still do want to install this environment that

406
00:33:45,180 --> 00:33:49,340
depends on GPUs existing in the system.

407
00:33:49,340 --> 00:33:55,380
So we can override the CUDA version

408
00:33:55,380 --> 00:33:59,020
and just tell it that we have CUDA 12.6.

409
00:33:59,020 --> 00:34:07,740
So that is also mentioned here in the notes here.

410
00:34:07,740 --> 00:34:10,620
So we export that, and then we try again.

411
00:34:10,620 --> 00:34:13,740
So mamba and create pytorch.yaml.

412
00:34:13,740 --> 00:34:16,740
Okay, so this version of the command worked yesterday,

413
00:34:16,740 --> 00:34:17,580
so we'll see.

414
00:34:20,740 --> 00:34:23,260
It's always possible that some library got updated

415
00:34:23,260 --> 00:34:24,620
and broken somehow.

416
00:34:26,020 --> 00:34:29,220
But while we wait, let's see if there's any

417
00:34:29,220 --> 00:34:31,660
other interesting questions in the notes

418
00:34:32,860 --> 00:34:34,820
or important questions.

419
00:34:34,820 --> 00:34:36,300
What are the channels?

420
00:34:36,300 --> 00:34:39,900
So yeah, I guess we went over this maybe a bit too quickly.

421
00:34:40,620 --> 00:34:45,220
But yeah, channels are repositories of packages.

422
00:34:45,220 --> 00:34:48,420
So they are servers somewhere that store all the packages

423
00:34:48,420 --> 00:34:49,460
that you might need.

424
00:34:49,460 --> 00:34:52,760
Well, all the packages that somebody has added to them.

425
00:34:52,760 --> 00:34:54,840
So conda-forge is one of them.

426
00:34:54,840 --> 00:34:59,840
And it says, it contains a lot of different packages

427
00:34:59,900 --> 00:35:03,860
that most things depend on.

428
00:35:03,860 --> 00:35:06,980
So conda-forge includes torch-vision here.

429
00:35:06,980 --> 00:35:11,420
I think `transformers` also comes from conda-forge.

430
00:35:11,420 --> 00:35:13,340
Does anything actually, there's also

431
00:35:13,340 --> 00:35:15,860
the NVIDIA channel that we included.

432
00:35:15,860 --> 00:35:18,180
Does anything actually come from there?

433
00:35:18,180 --> 00:35:24,220
Yes. Some libraries that have to do with CUDA and

434
00:35:24,220 --> 00:35:33,100
with NVIDIA GPU specifically are coming from the NVIDIA channel.

435
00:35:33,100 --> 00:35:44,140
So conda-forge is the big channel that has a lot of open source packages and most stuff comes from

436
00:35:44,140 --> 00:35:50,860
there. But Nvidia has things that Nvidia maintains. So this is a channel where Nvidia provides a

437
00:35:50,860 --> 00:35:56,940
bunch of packages and it's necessary for this environment. Okay, so let's run this to install

438
00:35:56,940 --> 00:36:06,300
the environment and this will take a while. It should succeed but the main point though is how

439
00:36:06,300 --> 00:36:15,500
to create the environment and how to use it and not actually finishing this download process

440
00:36:15,500 --> 00:36:21,580
where it gets all of the PyTorch and all of the system stuff. But yeah so it is actually now

441
00:36:21,580 --> 00:36:27,020
downloading this from the

442
00:36:27,020 --> 00:36:31,980
channel is where it's actually pulling all of these dependencies.

443
00:36:34,380 --> 00:36:38,780
If you have something cached, will it be faster?

444
00:36:38,780 --> 00:36:42,300
Yes, definitely. If you have a similar environment

445
00:36:42,300 --> 00:36:45,580
installed before, then it will be faster, right?

446
00:36:45,580 --> 00:36:52,380
And I think it will even slightly prefer cached versions if they exist, but also

447
00:36:54,860 --> 00:36:59,260
quite often when you create one environment and then you create another one with almost the same

448
00:36:59,260 --> 00:37:03,420
requirement, it will still end up using slightly different versions and redownload stuff.

449
00:37:04,300 --> 00:37:07,180
But yeah, in principle it does cache the packages.

450
00:37:07,180 --> 00:37:20,980
I think it also done some fancy system or fancy linking where it actually uses the same

451
00:37:20,980 --> 00:37:33,420
files in different environments if it just has the same exact same version of the package.

452
00:37:33,420 --> 00:37:46,860
Okay. I think it's almost done. And so is also our time. So, unless there's anything

453
00:37:46,860 --> 00:37:54,540
else, I guess we could move on to a break. I mean, showing that it works is kind of fun,

454
00:37:54,540 --> 00:38:03,340
but not necessarily worth the wait. So, what is next on the schedule?

455
00:38:03,340 --> 00:38:05,900
I think it's a break, or?

456
00:38:05,900 --> 00:38:06,400
Yes.

457
00:38:11,540 --> 00:38:15,500
Yeah, we have a short break.

458
00:38:15,500 --> 00:38:19,660
And then we get back to hands-on with, I think,

459
00:38:19,660 --> 00:38:24,740
it's Array Jobs, which is the start of Parallelism

460
00:38:24,740 --> 00:38:27,220
and the Power of the Cluster.

461
00:38:27,220 --> 00:38:33,300
OK, so I'll stick around and answer questions, of course.

462
00:38:33,300 --> 00:38:40,100
There's a number of questions coming up, so just keep them coming.

463
00:38:40,100 --> 00:38:46,260
So I guess, I guess we have a break until two minutes past the hour.

464
00:38:46,260 --> 00:38:57,180
So yes, there it is.

465
00:38:57,180 --> 00:38:58,180
See you later.

466
00:38:58,180 --> 00:38:59,180
Bye.

467
00:38:59,180 --> 00:39:00,180
See you.

468
00:39:00,180 --> 00:39:00,680
Bye.

